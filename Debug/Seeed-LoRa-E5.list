
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001df90  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa4  0801e0d0  0801e0d0  0002e0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801f074  0801f074  0002f074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801f134  0801f134  000301b4  2**0
                  CONTENTS
  5 .ARM          00000008  0801f134  0801f134  0002f134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801f13c  0801f13c  000301b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801f13c  0801f13c  0002f13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801f140  0801f140  0002f140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001b4  20000000  0801f144  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000020ec  200001b4  0801f2f8  000301b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200022a0  0801f2f8  000322a0  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000301b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004580f  00000000  00000000  000301de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a410  00000000  00000000  000759ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003470  00000000  00000000  0007fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030a0  00000000  00000000  00083270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028adf  00000000  00000000  00086310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eaa7  00000000  00000000  000aedef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd649  00000000  00000000  000ed896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001baedf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dc20  00000000  00000000  001baf30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b4 	.word	0x200001b4
 800015c:	00000000 	.word	0x00000000
 8000160:	0801e0b8 	.word	0x0801e0b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001b8 	.word	0x200001b8
 800017c:	0801e0b8 	.word	0x0801e0b8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	; 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000976:	2afd      	cmp	r2, #253	; 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	; 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	; 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	; 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_f2iz>:
 8000bc4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000bcc:	d30f      	bcc.n	8000bee <__aeabi_f2iz+0x2a>
 8000bce:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000bd2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bd6:	d90d      	bls.n	8000bf4 <__aeabi_f2iz+0x30>
 8000bd8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bdc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be4:	fa23 f002 	lsr.w	r0, r3, r2
 8000be8:	bf18      	it	ne
 8000bea:	4240      	negne	r0, r0
 8000bec:	4770      	bx	lr
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	4770      	bx	lr
 8000bf4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bf8:	d101      	bne.n	8000bfe <__aeabi_f2iz+0x3a>
 8000bfa:	0242      	lsls	r2, r0, #9
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_f2iz+0x46>
 8000bfe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000c02:	bf08      	it	eq
 8000c04:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_f2uiz>:
 8000c10:	0042      	lsls	r2, r0, #1
 8000c12:	d20e      	bcs.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c18:	d30b      	bcc.n	8000c32 <__aeabi_f2uiz+0x22>
 8000c1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c22:	d409      	bmi.n	8000c38 <__aeabi_f2uiz+0x28>
 8000c24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr
 8000c38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c3c:	d101      	bne.n	8000c42 <__aeabi_f2uiz+0x32>
 8000c3e:	0242      	lsls	r2, r0, #9
 8000c40:	d102      	bne.n	8000c48 <__aeabi_f2uiz+0x38>
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b974 	b.w	8000f50 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	9e08      	ldr	r6, [sp, #32]
 8000c86:	460d      	mov	r5, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	4688      	mov	r8, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14d      	bne.n	8000d2c <__udivmoddi4+0xac>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4694      	mov	ip, r2
 8000c94:	d968      	bls.n	8000d68 <__udivmoddi4+0xe8>
 8000c96:	fab2 f282 	clz	r2, r2
 8000c9a:	b152      	cbz	r2, 8000cb2 <__udivmoddi4+0x32>
 8000c9c:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca0:	f1c2 0120 	rsb	r1, r2, #32
 8000ca4:	fa20 f101 	lsr.w	r1, r0, r1
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	ea41 0803 	orr.w	r8, r1, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000cb6:	0c21      	lsrs	r1, r4, #16
 8000cb8:	fbb8 fef5 	udiv	lr, r8, r5
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fb05 831e 	mls	r3, r5, lr, r8
 8000cc4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cc8:	fb0e f107 	mul.w	r1, lr, r7
 8000ccc:	4299      	cmp	r1, r3
 8000cce:	d90b      	bls.n	8000ce8 <__udivmoddi4+0x68>
 8000cd0:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd4:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000cd8:	f080 811e 	bcs.w	8000f18 <__udivmoddi4+0x298>
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	f240 811b 	bls.w	8000f18 <__udivmoddi4+0x298>
 8000ce2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f5 	udiv	r0, r3, r5
 8000cf0:	fb05 3310 	mls	r3, r5, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 f707 	mul.w	r7, r0, r7
 8000cfc:	42a7      	cmp	r7, r4
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x96>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d08:	f080 8108 	bcs.w	8000f1c <__udivmoddi4+0x29c>
 8000d0c:	42a7      	cmp	r7, r4
 8000d0e:	f240 8105 	bls.w	8000f1c <__udivmoddi4+0x29c>
 8000d12:	4464      	add	r4, ip
 8000d14:	3802      	subs	r0, #2
 8000d16:	1be4      	subs	r4, r4, r7
 8000d18:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	b11e      	cbz	r6, 8000d28 <__udivmoddi4+0xa8>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c6 4300 	strd	r4, r3, [r6]
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0xc2>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	f000 80ee 	beq.w	8000f12 <__udivmoddi4+0x292>
 8000d36:	2100      	movs	r1, #0
 8000d38:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d14a      	bne.n	8000de0 <__udivmoddi4+0x160>
 8000d4a:	42ab      	cmp	r3, r5
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xd4>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 80f9 	bhi.w	8000f46 <__udivmoddi4+0x2c6>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb65 0303 	sbc.w	r3, r5, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d0e2      	beq.n	8000d28 <__udivmoddi4+0xa8>
 8000d62:	e9c6 4800 	strd	r4, r8, [r6]
 8000d66:	e7df      	b.n	8000d28 <__udivmoddi4+0xa8>
 8000d68:	b902      	cbnz	r2, 8000d6c <__udivmoddi4+0xec>
 8000d6a:	deff      	udf	#255	; 0xff
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	f040 8091 	bne.w	8000e98 <__udivmoddi4+0x218>
 8000d76:	eba1 050c 	sub.w	r5, r1, ip
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb5 f3f7 	udiv	r3, r5, r7
 8000d88:	fb07 5013 	mls	r0, r7, r3, r5
 8000d8c:	0c25      	lsrs	r5, r4, #16
 8000d8e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d92:	fb0e f003 	mul.w	r0, lr, r3
 8000d96:	42a8      	cmp	r0, r5
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x12c>
 8000d9a:	eb1c 0505 	adds.w	r5, ip, r5
 8000d9e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x12a>
 8000da4:	42a8      	cmp	r0, r5
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2c0>
 8000daa:	4643      	mov	r3, r8
 8000dac:	1a2d      	subs	r5, r5, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb5 f0f7 	udiv	r0, r5, r7
 8000db4:	fb07 5510 	mls	r5, r7, r0, r5
 8000db8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x156>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x154>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2ca>
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dde:	e79e      	b.n	8000d1e <__udivmoddi4+0x9e>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa20 f407 	lsr.w	r4, r0, r7
 8000df2:	fa05 f301 	lsl.w	r3, r5, r1
 8000df6:	431c      	orrs	r4, r3
 8000df8:	40fd      	lsrs	r5, r7
 8000dfa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfe:	fa00 f301 	lsl.w	r3, r0, r1
 8000e02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e06:	0c20      	lsrs	r0, r4, #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fb09 5518 	mls	r5, r9, r8, r5
 8000e10:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000e14:	fb08 f00e 	mul.w	r0, r8, lr
 8000e18:	42a8      	cmp	r0, r5
 8000e1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b8>
 8000e20:	eb1c 0505 	adds.w	r5, ip, r5
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2bc>
 8000e2c:	42a8      	cmp	r0, r5
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2bc>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4465      	add	r5, ip
 8000e38:	1a2d      	subs	r5, r5, r0
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000e40:	fb09 5510 	mls	r5, r9, r0, r5
 8000e44:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e4c:	45ae      	cmp	lr, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1e2>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5a:	45ae      	cmp	lr, r5
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2b4>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e66:	fba0 9402 	umull	r9, r4, r0, r2
 8000e6a:	eba5 050e 	sub.w	r5, r5, lr
 8000e6e:	42a5      	cmp	r5, r4
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46a6      	mov	lr, r4
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x2a4>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x2a0>
 8000e78:	b15e      	cbz	r6, 8000e92 <__udivmoddi4+0x212>
 8000e7a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e7e:	eb65 050e 	sbc.w	r5, r5, lr
 8000e82:	fa05 f707 	lsl.w	r7, r5, r7
 8000e86:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8a:	40cd      	lsrs	r5, r1
 8000e8c:	431f      	orrs	r7, r3
 8000e8e:	e9c6 7500 	strd	r7, r5, [r6]
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000ea0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ea4:	fa25 f303 	lsr.w	r3, r5, r3
 8000ea8:	4095      	lsls	r5, r2
 8000eaa:	430d      	orrs	r5, r1
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb3 f1f7 	udiv	r1, r3, r7
 8000eb8:	fb07 3011 	mls	r0, r7, r1, r3
 8000ebc:	0c2b      	lsrs	r3, r5, #16
 8000ebe:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000ec2:	fb01 f00e 	mul.w	r0, r1, lr
 8000ec6:	4298      	cmp	r0, r3
 8000ec8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x260>
 8000ece:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b8>
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b8>
 8000edc:	3902      	subs	r1, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	1a1b      	subs	r3, r3, r0
 8000ee2:	b2ad      	uxth	r5, r5
 8000ee4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee8:	fb07 3310 	mls	r3, r7, r0, r3
 8000eec:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ef0:	fb00 f30e 	mul.w	r3, r0, lr
 8000ef4:	42ab      	cmp	r3, r5
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x28a>
 8000ef8:	eb1c 0505 	adds.w	r5, ip, r5
 8000efc:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2b0>
 8000f02:	42ab      	cmp	r3, r5
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2b0>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4465      	add	r5, ip
 8000f0a:	1aed      	subs	r5, r5, r3
 8000f0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0x104>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e707      	b.n	8000d28 <__udivmoddi4+0xa8>
 8000f18:	4686      	mov	lr, r0
 8000f1a:	e6e5      	b.n	8000ce8 <__udivmoddi4+0x68>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fa      	b.n	8000d16 <__udivmoddi4+0x96>
 8000f20:	454b      	cmp	r3, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f8>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f8>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x28a>
 8000f34:	4620      	mov	r0, r4
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1e2>
 8000f38:	4641      	mov	r1, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x260>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b8>
 8000f40:	3b02      	subs	r3, #2
 8000f42:	4465      	add	r5, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x12c>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e709      	b.n	8000d5e <__udivmoddi4+0xde>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x156>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f78:	68fb      	ldr	r3, [r7, #12]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <MX_ADC_Init+0x94>)
 8000fae:	4a24      	ldr	r2, [pc, #144]	; (8001040 <MX_ADC_Init+0x98>)
 8000fb0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	; (800103c <MX_ADC_Init+0x94>)
 8000fb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000fb8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <MX_ADC_Init+0x94>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc0:	4b1e      	ldr	r3, [pc, #120]	; (800103c <MX_ADC_Init+0x94>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_ADC_Init+0x94>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_ADC_Init+0x94>)
 8000fce:	2204      	movs	r2, #4
 8000fd0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_ADC_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_ADC_Init+0x94>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_ADC_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_ADC_Init+0x94>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_ADC_Init+0x94>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <MX_ADC_Init+0x94>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff8:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_ADC_Init+0x94>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_ADC_Init+0x94>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <MX_ADC_Init+0x94>)
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_ADC_Init+0x94>)
 8001010:	2207      	movs	r2, #7
 8001012:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_ADC_Init+0x94>)
 8001016:	2207      	movs	r2, #7
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_ADC_Init+0x94>)
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_ADC_Init+0x94>)
 8001024:	2200      	movs	r2, #0
 8001026:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <MX_ADC_Init+0x94>)
 800102a:	f001 ffcd 	bl	8002fc8 <HAL_ADC_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001034:	f000 fbde 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	200001d0 	.word	0x200001d0
 8001040:	40012400 	.word	0x40012400

08001044 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <HAL_ADC_MspInit+0x24>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d103      	bne.n	800105e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001056:	f44f 7000 	mov.w	r0, #512	; 0x200
 800105a:	f7ff ff7b 	bl	8000f54 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40012400 	.word	0x40012400

0800106c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <HAL_ADC_MspDeInit+0x24>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d103      	bne.n	8001086 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 800107e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001082:	f7ff ff7f 	bl	8000f84 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40012400 	.word	0x40012400

08001094 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <SYS_InitMeasurement+0x14>)
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <SYS_InitMeasurement+0x18>)
 800109c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200001d0 	.word	0x200001d0
 80010ac:	40012400 	.word	0x40012400

080010b0 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010be:	4813      	ldr	r0, [pc, #76]	; (800110c <SYS_GetBatteryLevel+0x5c>)
 80010c0:	f000 f82a 	bl	8001118 <ADC_ReadChannels>
 80010c4:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	80fb      	strh	r3, [r7, #6]
 80010d0:	e016      	b.n	8001100 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SYS_GetBatteryLevel+0x60>)
 80010d4:	881b      	ldrh	r3, [r3, #0]
 80010d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00b      	beq.n	80010f6 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SYS_GetBatteryLevel+0x60>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	f640 43e4 	movw	r3, #3300	; 0xce4
 80010e8:	fb03 f202 	mul.w	r2, r3, r2
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	80fb      	strh	r3, [r7, #6]
 80010f4:	e004      	b.n	8001100 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010f6:	4a07      	ldr	r2, [pc, #28]	; (8001114 <SYS_GetBatteryLevel+0x64>)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001100:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	b4002000 	.word	0xb4002000
 8001110:	1fff75aa 	.word	0x1fff75aa
 8001114:	004c08d8 	.word	0x004c08d8

08001118 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001130:	f7ff ff3a 	bl	8000fa8 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001134:	481a      	ldr	r0, [pc, #104]	; (80011a0 <ADC_ReadChannels+0x88>)
 8001136:	f002 fd76 	bl	8003c26 <HAL_ADCEx_Calibration_Start>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001140:	f000 fb58 	bl	80017f4 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	4619      	mov	r1, r3
 8001156:	4812      	ldr	r0, [pc, #72]	; (80011a0 <ADC_ReadChannels+0x88>)
 8001158:	f002 fa82 	bl	8003660 <HAL_ADC_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8001162:	f000 fb47 	bl	80017f4 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <ADC_ReadChannels+0x88>)
 8001168:	f002 f95e 	bl	8003428 <HAL_ADC_Start>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8001172:	f000 fb3f 	bl	80017f4 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001176:	f04f 31ff 	mov.w	r1, #4294967295
 800117a:	4809      	ldr	r0, [pc, #36]	; (80011a0 <ADC_ReadChannels+0x88>)
 800117c:	f002 f9cc 	bl	8003518 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001180:	4807      	ldr	r0, [pc, #28]	; (80011a0 <ADC_ReadChannels+0x88>)
 8001182:	f002 f997 	bl	80034b4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <ADC_ReadChannels+0x88>)
 8001188:	f002 fa5d 	bl	8003646 <HAL_ADC_GetValue>
 800118c:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <ADC_ReadChannels+0x88>)
 8001190:	f002 f8ce 	bl	8003330 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001194:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200001d0 	.word	0x200001d0

080011a4 <LL_AHB1_GRP1_EnableClock>:
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d8:	2004      	movs	r0, #4
 80011da:	f7ff ffe3 	bl	80011a4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff ffe0 	bl	80011a4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2102      	movs	r1, #2
 80011e8:	200b      	movs	r0, #11
 80011ea:	f002 fec2 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011ee:	200b      	movs	r0, #11
 80011f0:	f002 fed9 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	200c      	movs	r0, #12
 80011fa:	f002 feba 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80011fe:	200c      	movs	r0, #12
 8001200:	f002 fed1 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001214:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001218:	d101      	bne.n	800121e <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800121e:	2300      	movs	r3, #0
#endif
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	58004000 	.word	0x58004000

0800122c <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	; 0x30
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <FLASH_IF_Write+0x174>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	0299      	lsls	r1, r3, #10
 800124a:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <FLASH_IF_Write+0x178>)
 800124c:	400b      	ands	r3, r1
 800124e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001252:	fb01 f303 	mul.w	r3, r1, r3
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	0adb      	lsrs	r3, r3, #11
 800125a:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001266:	3b01      	subs	r3, #1
 8001268:	4a4d      	ldr	r2, [pc, #308]	; (80013a0 <FLASH_IF_Write+0x174>)
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	0291      	lsls	r1, r2, #10
 800126e:	4a4d      	ldr	r2, [pc, #308]	; (80013a4 <FLASH_IF_Write+0x178>)
 8001270:	400a      	ands	r2, r1
 8001272:	fbb3 f1f2 	udiv	r1, r3, r2
 8001276:	fb01 f202 	mul.w	r2, r1, r2
 800127a:	1a9b      	subs	r3, r3, r2
 800127c:	0adb      	lsrs	r3, r3, #11
 800127e:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d009      	beq.n	80012a6 <FLASH_IF_Write+0x7a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <FLASH_IF_Write+0x7a>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80012a6:	f06f 0304 	mvn.w	r3, #4
 80012aa:	e074      	b.n	8001396 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80012ac:	4b3e      	ldr	r3, [pc, #248]	; (80013a8 <FLASH_IF_Write+0x17c>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da02      	bge.n	80012ba <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80012b4:	f06f 0303 	mvn.w	r3, #3
 80012b8:	e06d      	b.n	8001396 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d005      	beq.n	80012ce <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012c8:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e05b      	b.n	800138c <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f8f8 	bl	80014ce <FLASH_IF_IsEmpty>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d037      	beq.n	8001354 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 80012ea:	f06f 0304 	mvn.w	r3, #4
 80012ee:	e052      	b.n	8001396 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012f6:	02db      	lsls	r3, r3, #11
 80012f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012fc:	4619      	mov	r1, r3
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f01a fffa 	bl	801c2f8 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	6a39      	ldr	r1, [r7, #32]
 8001310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001312:	b292      	uxth	r2, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f01a ffef 	bl	801c2f8 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800131a:	2200      	movs	r2, #0
 800131c:	2101      	movs	r1, #1
 800131e:	69f8      	ldr	r0, [r7, #28]
 8001320:	f000 f865 	bl	80013ee <FLASH_IF_EraseByPages>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800132a:	f06f 0301 	mvn.w	r3, #1
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001330:	e030      	b.n	8001394 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001338:	02db      	lsls	r3, r3, #11
 800133a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133e:	6839      	ldr	r1, [r7, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f88a 	bl	800145a <FLASH_IF_Write_Buffer>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d010      	beq.n	800136e <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 800134c:	f06f 0302 	mvn.w	r3, #2
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 8001352:	e01f      	b.n	8001394 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001358:	4619      	mov	r1, r3
 800135a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800135c:	f000 f87d 	bl	800145a <FLASH_IF_Write_Buffer>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 8001366:	f06f 0302 	mvn.w	r3, #2
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 800136c:	e012      	b.n	8001394 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	4413      	add	r3, r2
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 8001376:	6a3a      	ldr	r2, [r7, #32]
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	4413      	add	r3, r2
 800137c:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	61fb      	str	r3, [r7, #28]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	d99f      	bls.n	80012d4 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 8001396:	4618      	mov	r0, r3
 8001398:	3730      	adds	r7, #48	; 0x30
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	1fff75e0 	.word	0x1fff75e0
 80013a4:	03fffc00 	.word	0x03fffc00
 80013a8:	58004000 	.word	0x58004000

080013ac <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80013b8:	e00b      	b.n	80013d2 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80013ba:	bf00      	nop
 80013bc:	f7ff ff24 	bl	8001208 <LL_FLASH_IsActiveFlag_OperationSuspended>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1fa      	bne.n	80013bc <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80013c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013ca:	68f9      	ldr	r1, [r7, #12]
 80013cc:	2001      	movs	r0, #1
 80013ce:	f003 f9f1 	bl	80047b4 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013dc:	4299      	cmp	r1, r3
 80013de:	bf08      	it	eq
 80013e0:	4290      	cmpeq	r0, r2
 80013e2:	d1ea      	bne.n	80013ba <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 80013e4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b08a      	sub	sp, #40	; 0x28
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	460b      	mov	r3, r1
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d008      	beq.n	8001420 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800140e:	f107 0318 	add.w	r3, r7, #24
 8001412:	4618      	mov	r0, r3
 8001414:	f003 fb6c 	bl	8004af0 <HAL_FLASHEx_Erase_IT>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800141e:	e00a      	b.n	8001436 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001420:	f107 0214 	add.w	r2, r7, #20
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f003 fb08 	bl	8004a40 <HAL_FLASHEx_Erase>
 8001430:	4603      	mov	r3, r0
 8001432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 8001436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800143a:	2b00      	cmp	r3, #0
 800143c:	d008      	beq.n	8001450 <FLASH_IF_EraseByPages+0x62>
 800143e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001442:	2b02      	cmp	r3, #2
 8001444:	d101      	bne.n	800144a <FLASH_IF_EraseByPages+0x5c>
 8001446:	2301      	movs	r3, #1
 8001448:	e003      	b.n	8001452 <FLASH_IF_EraseByPages+0x64>
 800144a:	f06f 0301 	mvn.w	r3, #1
 800144e:	e000      	b.n	8001452 <FLASH_IF_EraseByPages+0x64>
 8001450:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001452:	4618      	mov	r0, r3
 8001454:	3728      	adds	r7, #40	; 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b08a      	sub	sp, #40	; 0x28
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	e020      	b.n	80014b6 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	2208      	movs	r2, #8
 800147a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800147c:	4618      	mov	r0, r3
 800147e:	f01a ff3b 	bl	801c2f8 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 8001482:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148a:	bf08      	it	eq
 800148c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001490:	d005      	beq.n	800149e <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 8001492:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f7ff ff88 	bl	80013ac <FLASH_IF_Write64>
 800149c:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3308      	adds	r3, #8
 80014a2:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	3308      	adds	r3, #8
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d108      	bne.n	80014c2 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3301      	adds	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3d9      	bcc.n	8001474 <FLASH_IF_Write_Buffer+0x1a>
 80014c0:	e000      	b.n	80014c4 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80014c2:	bf00      	nop
    }
  }

  return status;
 80014c4:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80014d8:	e00a      	b.n	80014f0 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	1c5a      	adds	r2, r3, #1
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2bff      	cmp	r3, #255	; 0xff
 80014e4:	d001      	beq.n	80014ea <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e039      	b.n	800155e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1ef      	bne.n	80014da <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	e010      	b.n	8001526 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f103 0208 	add.w	r2, r3, #8
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001514:	bf08      	it	eq
 8001516:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800151a:	d001      	beq.n	8001520 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 800151c:	2301      	movs	r3, #1
 800151e:	e01e      	b.n	800155e <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	3301      	adds	r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	429a      	cmp	r2, r3
 800152e:	d3e9      	bcc.n	8001504 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	607b      	str	r3, [r7, #4]
  while (size != 0)
 800153e:	e00a      	b.n	8001556 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2bff      	cmp	r3, #255	; 0xff
 800154a:	d001      	beq.n	8001550 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 800154c:	2301      	movs	r3, #1
 800154e:	e006      	b.n	800155e <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3b01      	subs	r3, #1
 8001554:	603b      	str	r3, [r7, #0]
  while (size != 0)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f1      	bne.n	8001540 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 800155c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <LL_AHB2_GRP1_EnableClock>:
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001576:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4313      	orrs	r3, r2
 800157e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800158c:	68fb      	ldr	r3, [r7, #12]
}
 800158e:	bf00      	nop
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff ffdb 	bl	8001568 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2002      	movs	r0, #2
 80015b4:	f7ff ffd8 	bl	8001568 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff ffd5 	bl	8001568 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 6183 	mov.w	r1, #1048	; 0x418
 80015c4:	4829      	ldr	r0, [pc, #164]	; (800166c <MX_GPIO_Init+0xd4>)
 80015c6:	f003 fd85 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2120      	movs	r1, #32
 80015ce:	4827      	ldr	r0, [pc, #156]	; (800166c <MX_GPIO_Init+0xd4>)
 80015d0:	f003 fd80 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|GPIO_PIN_9|RF_CTRL2_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f240 2121 	movw	r1, #545	; 0x221
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f003 fd79 	bl	80050d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 80015e2:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80015e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	481c      	ldr	r0, [pc, #112]	; (800166c <MX_GPIO_Init+0xd4>)
 80015fa:	f003 fb3d 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL2_Pin;
 80015fe:	2321      	movs	r3, #33	; 0x21
 8001600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4619      	mov	r1, r3
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f003 fb2f 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800161a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001620:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001626:	2301      	movs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 800162a:	1d3b      	adds	r3, r7, #4
 800162c:	4619      	mov	r1, r3
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <MX_GPIO_Init+0xd4>)
 8001630:	f003 fb22 	bl	8004c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800163e:	2301      	movs	r3, #1
 8001640:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164e:	f003 fb13 	bl	8004c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2029      	movs	r0, #41	; 0x29
 8001658:	f002 fc8b 	bl	8003f72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800165c:	2029      	movs	r0, #41	; 0x29
 800165e:	f002 fca2 	bl	8003fa6 <HAL_NVIC_EnableIRQ>

}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	48000400 	.word	0x48000400

08001670 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	f023 0218 	bic.w	r2, r3, #24
 8001684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4313      	orrs	r3, r2
 800168c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr
	...

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f001 fabf 	bl	8002c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 f839 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f7ff ff75 	bl	8001598 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80016ae:	f008 ff75 	bl	800a59c <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 2 */
  //For the trying bellow
  uint8_t MSG[2] = {'\0'};
 80016b2:	2300      	movs	r3, #0
 80016b4:	81bb      	strh	r3, [r7, #12]
  uint8_t MSG_ret[12];
  //uint8_t X = 0;


  //MX_USART2_UART_Init();
  MX_USART1_IRDA_Init();
 80016b6:	f000 ff3b 	bl	8002530 <MX_USART1_IRDA_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		for(uint8_t i = 0; i<6; i++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e013      	b.n	80016e8 <main+0x4c>
		  HAL_Delay(500);
 80016c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c4:	f000 fbaa 	bl	8001e1c <HAL_Delay>
		  sprintf(MSG, "A\r");
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4910      	ldr	r1, [pc, #64]	; (8001710 <main+0x74>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f01c f804 	bl	801d6dc <siprintf>
		  HAL_IRDA_Transmit(&hirda1, MSG, sizeof(MSG), 100);
 80016d4:	f107 010c 	add.w	r1, r7, #12
 80016d8:	2364      	movs	r3, #100	; 0x64
 80016da:	2202      	movs	r2, #2
 80016dc:	480d      	ldr	r0, [pc, #52]	; (8001714 <main+0x78>)
 80016de:	f003 fd8a 	bl	80051f6 <HAL_IRDA_Transmit>
		for(uint8_t i = 0; i<6; i++){
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d9e8      	bls.n	80016c0 <main+0x24>
	    //APP_LOG(TS_ON,VLEVEL_M,"%d\r\n", MSG_ret);
    /* USER CODE END WHILE */
    //MX_LoRaWAN_Process();

    /* USER CODE BEGIN 3 */
		sprintf(MSG, Rx_Data[1]);
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <main+0x7c>)
 80016f0:	785b      	ldrb	r3, [r3, #1]
 80016f2:	461a      	mov	r2, r3
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f01b ffee 	bl	801d6dc <siprintf>
		HAL_IRDA_Transmit(&hirda1, MSG, sizeof(MSG), 100);
 8001700:	f107 010c 	add.w	r1, r7, #12
 8001704:	2364      	movs	r3, #100	; 0x64
 8001706:	2202      	movs	r2, #2
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <main+0x78>)
 800170a:	f003 fd74 	bl	80051f6 <HAL_IRDA_Transmit>
  {
 800170e:	e7d4      	b.n	80016ba <main+0x1e>
 8001710:	0801e0d0 	.word	0x0801e0d0
 8001714:	20000294 	.word	0x20000294
 8001718:	20000234 	.word	0x20000234

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b09a      	sub	sp, #104	; 0x68
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2248      	movs	r2, #72	; 0x48
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f01b ffce 	bl	801d6cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001742:	f004 fa69 	bl	8005c18 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff ff92 	bl	8001670 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <SystemClock_Config+0xb0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001754:	4a1d      	ldr	r2, [pc, #116]	; (80017cc <SystemClock_Config+0xb0>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	4b1b      	ldr	r3, [pc, #108]	; (80017cc <SystemClock_Config+0xb0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001768:	2324      	movs	r3, #36	; 0x24
 800176a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800176c:	2381      	movs	r3, #129	; 0x81
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001770:	2301      	movs	r3, #1
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001778:	23b0      	movs	r3, #176	; 0xb0
 800177a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001780:	f107 0320 	add.w	r3, r7, #32
 8001784:	4618      	mov	r0, r3
 8001786:	f004 fcf1 	bl	800616c <HAL_RCC_OscConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001790:	f000 f830 	bl	80017f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001794:	234f      	movs	r3, #79	; 0x4f
 8001796:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2102      	movs	r1, #2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 f876 	bl	80068a4 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017be:	f000 f819 	bl	80017f4 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3768      	adds	r7, #104	; 0x68
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	58000400 	.word	0x58000400

080017d0 <HAL_IRDA_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	HAL_IRDA_Receive_IT(&hirda1, Rx_Data, 4 );
 80017d8:	2204      	movs	r2, #4
 80017da:	4904      	ldr	r1, [pc, #16]	; (80017ec <HAL_IRDA_RxCpltCallback+0x1c>)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <HAL_IRDA_RxCpltCallback+0x20>)
 80017de:	f003 fd96 	bl	800530e <HAL_IRDA_Receive_IT>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000234 	.word	0x20000234
 80017f0:	20000294 	.word	0x20000294

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>

080017fe <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800180e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <LL_APB1_GRP1_EnableClock>:
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800182c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4013      	ands	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001842:	68fb      	ldr	r3, [r7, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	222c      	movs	r2, #44	; 0x2c
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f01b ff35 	bl	801d6cc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <MX_RTC_Init+0x9c>)
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <MX_RTC_Init+0xa0>)
 8001866:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <MX_RTC_Init+0x9c>)
 800186a:	221f      	movs	r2, #31
 800186c:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <MX_RTC_Init+0x9c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_RTC_Init+0x9c>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_RTC_Init+0x9c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001880:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_RTC_Init+0x9c>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_RTC_Init+0x9c>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_RTC_Init+0x9c>)
 8001890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001896:	4815      	ldr	r0, [pc, #84]	; (80018ec <MX_RTC_Init+0x9c>)
 8001898:	f005 fcc0 	bl	800721c <HAL_RTC_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80018a2:	f7ff ffa7 	bl	80017f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80018a6:	4811      	ldr	r0, [pc, #68]	; (80018ec <MX_RTC_Init+0x9c>)
 80018a8:	f005 ffae 	bl	8007808 <HAL_RTCEx_SetSSRU_IT>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80018b2:	f7ff ff9f 	bl	80017f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80018c2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018c6:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2200      	movs	r2, #0
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_RTC_Init+0x9c>)
 80018d6:	f005 fd1b 	bl	8007310 <HAL_RTC_SetAlarm_IT>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80018e0:	f7ff ff88 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3730      	adds	r7, #48	; 0x30
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000240 	.word	0x20000240
 80018f0:	40002800 	.word	0x40002800

080018f4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b090      	sub	sp, #64	; 0x40
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018fc:	f107 0308 	add.w	r3, r7, #8
 8001900:	2238      	movs	r2, #56	; 0x38
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f01b fee1 	bl	801d6cc <memset>
  if(rtcHandle->Instance==RTC)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_RTC_MspInit+0x74>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d125      	bne.n	8001960 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001918:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800191a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4618      	mov	r0, r3
 8001926:	f005 fb5f 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001930:	f7ff ff60 	bl	80017f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001934:	f7ff ff63 	bl	80017fe <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001938:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800193c:	f7ff ff6f 	bl	800181e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2100      	movs	r1, #0
 8001944:	2002      	movs	r0, #2
 8001946:	f002 fb14 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800194a:	2002      	movs	r0, #2
 800194c:	f002 fb2b 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	202a      	movs	r0, #42	; 0x2a
 8001956:	f002 fb0c 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800195a:	202a      	movs	r0, #42	; 0x2a
 800195c:	f002 fb23 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	3740      	adds	r7, #64	; 0x40
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40002800 	.word	0x40002800

0800196c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
	...

080019c8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80019ce:	f005 ff57 	bl	8007880 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000240 	.word	0x20000240

080019dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA1_Channel1_IRQHandler+0x10>)
 80019e2:	f002 fd77 	bl	80044d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000036c 	.word	0x2000036c

080019f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <DMA1_Channel2_IRQHandler+0x10>)
 80019f6:	f002 fd6d 	bl	80044d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200003cc 	.word	0x200003cc

08001a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_IRDA_IRQHandler(&hirda1);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <USART1_IRQHandler+0x10>)
 8001a0a:	f003 fd0d 	bl	8005428 <HAL_IRDA_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000294 	.word	0x20000294

08001a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <USART2_IRQHandler+0x10>)
 8001a1e:	f006 fd8f 	bl	8008540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002dc 	.word	0x200002dc

08001a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001a30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a34:	f003 fb66 	bl	8005104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a40:	4802      	ldr	r0, [pc, #8]	; (8001a4c <RTC_Alarm_IRQHandler+0x10>)
 8001a42:	f005 fdcd 	bl	80075e0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000240 	.word	0x20000240

08001a50 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001a56:	f006 fa7b 	bl	8007f50 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000278 	.word	0x20000278

08001a64 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SUBGHZ_Init+0x20>)
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_SUBGHZ_Init+0x20>)
 8001aa0:	f005 ffda 	bl	8007a58 <HAL_SUBGHZ_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001aaa:	f7ff fea3 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000278 	.word	0x20000278

08001ab8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	f7ff ffcf 	bl	8001a64 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2032      	movs	r0, #50	; 0x32
 8001acc:	f002 fa51 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001ad0:	2032      	movs	r0, #50	; 0x32
 8001ad2:	f002 fa68 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <LL_FLASH_GetUDN+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	1fff7580 	.word	0x1fff7580

08001b18 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <LL_FLASH_GetDeviceID+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	1fff7584 	.word	0x1fff7584

08001b30 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <LL_FLASH_GetSTCompanyID+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0a1b      	lsrs	r3, r3, #8
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc80      	pop	{r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	1fff7584 	.word	0x1fff7584

08001b48 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff ffc6 	bl	8001ade <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001b52:	f01b f85b 	bl	801cc0c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <SystemApp_Init+0x48>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001b5c:	f000 f982 	bl	8001e64 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001b60:	f01b fae4 	bl	801d12c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001b64:	480b      	ldr	r0, [pc, #44]	; (8001b94 <SystemApp_Init+0x4c>)
 8001b66:	f01b fb8f 	bl	801d288 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <SystemApp_Init+0x50>)
 8001b6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b70:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001b72:	2002      	movs	r0, #2
 8001b74:	f01b fb96 	bl	801d2a4 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001b78:	f7ff fa8c 	bl	8001094 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001b7c:	f000 f9f8 	bl	8001f70 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001b80:	f01a fb4a 	bl	801c218 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001b84:	2101      	movs	r1, #1
 8001b86:	2001      	movs	r0, #1
 8001b88:	f01a fb86 	bl	801c298 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000284 	.word	0x20000284
 8001b94:	08001d55 	.word	0x08001d55
 8001b98:	58004000 	.word	0x58004000

08001b9c <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001ba6:	f7ff fa83 	bl	80010b0 <SYS_GetBatteryLevel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001bae:	88bb      	ldrh	r3, [r7, #4]
 8001bb0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d902      	bls.n	8001bbe <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001bb8:	23fe      	movs	r3, #254	; 0xfe
 8001bba:	71fb      	strb	r3, [r7, #7]
 8001bbc:	e014      	b.n	8001be8 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001bbe:	88bb      	ldrh	r3, [r7, #4]
 8001bc0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001bc4:	d202      	bcs.n	8001bcc <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e00d      	b.n	8001be8 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001bcc:	88bb      	ldrh	r3, [r7, #4]
 8001bce:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <GetBatteryLevel+0x58>)
 8001be0:	fba3 2302 	umull	r2, r3, r3, r2
 8001be4:	09db      	lsrs	r3, r3, #7
 8001be6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001be8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	1b4e81b5 	.word	0x1b4e81b5

08001bf8 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f989 	bl	8001f1c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe ffd9 	bl	8000bc4 <__aeabi_f2iz>
 8001c12:	4603      	mov	r3, r0
 8001c14:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001c16:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001c22:	b590      	push	{r4, r7, lr}
 8001c24:	b087      	sub	sp, #28
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001c2e:	f7ff ff69 	bl	8001b04 <LL_FLASH_GetUDN>
 8001c32:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d138      	bne.n	8001cae <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001c3c:	f001 f812 	bl	8002c64 <HAL_GetUIDw0>
 8001c40:	4604      	mov	r4, r0
 8001c42:	f001 f823 	bl	8002c8c <HAL_GetUIDw2>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4423      	add	r3, r4
 8001c4a:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001c4c:	f001 f814 	bl	8002c78 <HAL_GetUIDw1>
 8001c50:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	0e1a      	lsrs	r2, r3, #24
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3307      	adds	r3, #7
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	0c1a      	lsrs	r2, r3, #16
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3306      	adds	r3, #6
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	0a1a      	lsrs	r2, r3, #8
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3305      	adds	r3, #5
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	0e1a      	lsrs	r2, r3, #24
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3303      	adds	r3, #3
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	0c1a      	lsrs	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3302      	adds	r3, #2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	0a1a      	lsrs	r2, r3, #8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001cac:	e031      	b.n	8001d12 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3307      	adds	r3, #7
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	0a1a      	lsrs	r2, r3, #8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3306      	adds	r3, #6
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	0c1a      	lsrs	r2, r3, #16
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3305      	adds	r3, #5
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	0e1a      	lsrs	r2, r3, #24
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001cdc:	f7ff ff1c 	bl	8001b18 <LL_FLASH_GetDeviceID>
 8001ce0:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3303      	adds	r3, #3
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001cec:	f7ff ff20 	bl	8001b30 <LL_FLASH_GetSTCompanyID>
 8001cf0:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	0a1a      	lsrs	r2, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	701a      	strb	r2, [r3, #0]
}
 8001d12:	bf00      	nop
 8001d14:	371c      	adds	r7, #28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd90      	pop	{r4, r7, pc}

08001d1a <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001d1a:	b590      	push	{r4, r7, lr}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001d24:	f7ff feee 	bl	8001b04 <LL_FLASH_GetUDN>
 8001d28:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d10b      	bne.n	8001d4a <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001d32:	f000 ff97 	bl	8002c64 <HAL_GetUIDw0>
 8001d36:	4604      	mov	r4, r0
 8001d38:	f000 ff9e 	bl	8002c78 <HAL_GetUIDw1>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	405c      	eors	r4, r3
 8001d40:	f000 ffa4 	bl	8002c8c <HAL_GetUIDw2>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4063      	eors	r3, r4
 8001d48:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001d4a:	687b      	ldr	r3, [r7, #4]

}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd90      	pop	{r4, r7, pc}

08001d54 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001d5e:	f107 0308 	add.w	r3, r7, #8
 8001d62:	4618      	mov	r0, r3
 8001d64:	f01a fba2 	bl	801c4ac <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <TimestampNow+0x3c>)
 8001d72:	2110      	movs	r1, #16
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f81d 	bl	8001db4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fa00 	bl	8000180 <strlen>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	0801e0d4 	.word	0x0801e0d4

08001d94 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f01a fa4c 	bl	801c238 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001da8:	2100      	movs	r1, #0
 8001daa:	2002      	movs	r0, #2
 8001dac:	f01a fa44 	bl	801c238 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001db4:	b40c      	push	{r2, r3}
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001dc6:	6839      	ldr	r1, [r7, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f01a fd3f 	bl	801c850 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ddc:	b002      	add	sp, #8
 8001dde:	4770      	bx	lr

08001de0 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_GetTick+0x24>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001e06:	f000 f9b7 	bl	8002178 <TIMER_IF_GetTimerValue>
 8001e0a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000284 	.word	0x20000284

08001e1c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fa2d 	bl	8002286 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <LL_AHB2_GRP1_EnableClock>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4013      	ands	r3, r2
 8001e56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e58:	68fb      	ldr	r3, [r7, #12]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001e6a:	f000 ff19 	bl	8002ca0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001e6e:	f000 ff1d 	bl	8002cac <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001e72:	f000 ff21 	bl	8002cb8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff ffcf 	bl	8001e34 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff ffcc 	bl	8001e34 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001e9c:	2002      	movs	r0, #2
 8001e9e:	f7ff ffc9 	bl	8001e34 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	f7ff ffc6 	bl	8001e34 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f002 fee0 	bl	8004c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4815      	ldr	r0, [pc, #84]	; (8001f18 <DBG_Init+0xb4>)
 8001ec4:	f002 fed8 	bl	8004c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4811      	ldr	r0, [pc, #68]	; (8001f18 <DBG_Init+0xb4>)
 8001ed2:	f002 fed1 	bl	8004c78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001ed6:	2310      	movs	r3, #16
 8001ed8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	480e      	ldr	r0, [pc, #56]	; (8001f18 <DBG_Init+0xb4>)
 8001ee0:	f002 feca 	bl	8004c78 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f003 f8f2 	bl	80050d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <DBG_Init+0xb4>)
 8001ef8:	f003 f8ec 	bl	80050d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2108      	movs	r1, #8
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <DBG_Init+0xb4>)
 8001f02:	f003 f8e7 	bl	80050d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2110      	movs	r1, #16
 8001f0a:	4803      	ldr	r0, [pc, #12]	; (8001f18 <DBG_Init+0xb4>)
 8001f0c:	f003 f8e2 	bl	80050d4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	48000400 	.word	0x48000400

08001f1c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001f24:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <EnvSensors_Read+0x40>)
 8001f26:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <EnvSensors_Read+0x44>)
 8001f2a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001f2c:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <EnvSensors_Read+0x48>)
 8001f2e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a08      	ldr	r2, [pc, #32]	; (8001f68 <EnvSensors_Read+0x4c>)
 8001f46:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a08      	ldr	r2, [pc, #32]	; (8001f6c <EnvSensors_Read+0x50>)
 8001f4c:	611a      	str	r2, [r3, #16]

  return 0;
 8001f4e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	42480000 	.word	0x42480000
 8001f60:	41900000 	.word	0x41900000
 8001f64:	447a0000 	.word	0x447a0000
 8001f68:	003e090d 	.word	0x003e090d
 8001f6c:	000503ab 	.word	0x000503ab

08001f70 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001f7a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr
	...

08001f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f90:	4a14      	ldr	r2, [pc, #80]	; (8001fe4 <_sbrk+0x5c>)
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <_sbrk+0x60>)
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <_sbrk+0x64>)
 8001fa6:	4a12      	ldr	r2, [pc, #72]	; (8001ff0 <_sbrk+0x68>)
 8001fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <_sbrk+0x64>)
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d207      	bcs.n	8001fc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb8:	f01b fb5e 	bl	801d678 <__errno>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc6:	e009      	b.n	8001fdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <_sbrk+0x64>)
 8001fd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20010000 	.word	0x20010000
 8001fe8:	00000400 	.word	0x00000400
 8001fec:	20000288 	.word	0x20000288
 8001ff0:	200022a0 	.word	0x200022a0

08001ff4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <TIMER_IF_Init+0x5c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	f083 0301 	eor.w	r3, r3, #1
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <TIMER_IF_Init+0x60>)
 8002032:	f04f 32ff 	mov.w	r2, #4294967295
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002038:	f7ff fc0a 	bl	8001850 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 800203c:	f000 f856 	bl	80020ec <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002040:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <TIMER_IF_Init+0x60>)
 8002046:	f005 fa6f 	bl	8007528 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <TIMER_IF_Init+0x60>)
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002052:	4809      	ldr	r0, [pc, #36]	; (8002078 <TIMER_IF_Init+0x60>)
 8002054:	f005 fba6 	bl	80077a4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f9d3 	bl	8002404 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 800205e:	f000 f85f 	bl	8002120 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002062:	4b04      	ldr	r3, [pc, #16]	; (8002074 <TIMER_IF_Init+0x5c>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002068:	79fb      	ldrb	r3, [r7, #7]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000028c 	.word	0x2000028c
 8002078:	20000240 	.word	0x20000240

0800207c <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	222c      	movs	r2, #44	; 0x2c
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f01b fb1a 	bl	801d6cc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002098:	f000 f828 	bl	80020ec <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <TIMER_IF_StartTimer+0x68>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80020a6:	2300      	movs	r3, #0
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80020b4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80020b8:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80020ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80020c0:	f107 0308 	add.w	r3, r7, #8
 80020c4:	2201      	movs	r2, #1
 80020c6:	4619      	mov	r1, r3
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <TIMER_IF_StartTimer+0x6c>)
 80020ca:	f005 f921 	bl	8007310 <HAL_RTC_SetAlarm_IT>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80020d4:	f7ff fb8e 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80020d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3738      	adds	r7, #56	; 0x38
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000290 	.word	0x20000290
 80020e8:	20000240 	.word	0x20000240

080020ec <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <TIMER_IF_StopTimer+0x2c>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80020fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <TIMER_IF_StopTimer+0x30>)
 8002102:	f005 fa11 	bl	8007528 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002106:	4b05      	ldr	r3, [pc, #20]	; (800211c <TIMER_IF_StopTimer+0x30>)
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 800210e:	79fb      	ldrb	r3, [r7, #7]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40002800 	.word	0x40002800
 800211c:	20000240 	.word	0x20000240

08002120 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002124:	f000 f98e 	bl	8002444 <GetTimerTicks>
 8002128:	4603      	mov	r3, r0
 800212a:	4a03      	ldr	r2, [pc, #12]	; (8002138 <TIMER_IF_SetTimerContext+0x18>)
 800212c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 800212e:	4b02      	ldr	r3, [pc, #8]	; (8002138 <TIMER_IF_SetTimerContext+0x18>)
 8002130:	681b      	ldr	r3, [r3, #0]
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000290 	.word	0x20000290

0800213c <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <TIMER_IF_GetTimerContext+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	20000290 	.word	0x20000290

08002150 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800215a:	f000 f973 	bl	8002444 <GetTimerTicks>
 800215e:	4602      	mov	r2, r0
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000290 	.word	0x20000290

08002178 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <TIMER_IF_GetTimerValue+0x24>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800218a:	f000 f95b 	bl	8002444 <GetTimerTicks>
 800218e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002190:	687b      	ldr	r3, [r7, #4]
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000028c 	.word	0x2000028c

080021a0 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80021aa:	2303      	movs	r3, #3
 80021ac:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bc80      	pop	{r7}
 80021b8:	4770      	bx	lr

080021ba <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80021ba:	b5b0      	push	{r4, r5, r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80021c2:	2100      	movs	r1, #0
 80021c4:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	2000      	movs	r0, #0
 80021ca:	460a      	mov	r2, r1
 80021cc:	4603      	mov	r3, r0
 80021ce:	0d95      	lsrs	r5, r2, #22
 80021d0:	0294      	lsls	r4, r2, #10
 80021d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021d6:	f04f 0300 	mov.w	r3, #0
 80021da:	4620      	mov	r0, r4
 80021dc:	4629      	mov	r1, r5
 80021de:	f7fe fd37 	bl	8000c50 <__aeabi_uldivmod>
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	4613      	mov	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bdb0      	pop	{r4, r5, r7, pc}

080021f4 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 80021f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80021fe:	2100      	movs	r1, #0
 8002200:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	2000      	movs	r0, #0
 8002206:	460c      	mov	r4, r1
 8002208:	4605      	mov	r5, r0
 800220a:	4620      	mov	r0, r4
 800220c:	4629      	mov	r1, r5
 800220e:	f04f 0a00 	mov.w	sl, #0
 8002212:	f04f 0b00 	mov.w	fp, #0
 8002216:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800221a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800221e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002222:	4650      	mov	r0, sl
 8002224:	4659      	mov	r1, fp
 8002226:	1b02      	subs	r2, r0, r4
 8002228:	eb61 0305 	sbc.w	r3, r1, r5
 800222c:	f04f 0000 	mov.w	r0, #0
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	0099      	lsls	r1, r3, #2
 8002236:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800223a:	0090      	lsls	r0, r2, #2
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	eb12 0804 	adds.w	r8, r2, r4
 8002244:	eb43 0905 	adc.w	r9, r3, r5
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002254:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002258:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225c:	4690      	mov	r8, r2
 800225e:	4699      	mov	r9, r3
 8002260:	4640      	mov	r0, r8
 8002262:	4649      	mov	r1, r9
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	0a82      	lsrs	r2, r0, #10
 800226e:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002272:	0a8b      	lsrs	r3, r1, #10
 8002274:	4613      	mov	r3, r2
 8002276:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002278:	68fb      	ldr	r3, [r7, #12]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002284:	4770      	bx	lr

08002286 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff93 	bl	80021ba <TIMER_IF_Convert_ms2Tick>
 8002294:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002296:	f000 f8d5 	bl	8002444 <GetTimerTicks>
 800229a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800229c:	e000      	b.n	80022a0 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800229e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80022a0:	f000 f8d0 	bl	8002444 <GetTimerTicks>
 80022a4:	4602      	mov	r2, r0
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d8f6      	bhi.n	800229e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80022c2:	f01a fdf1 	bl	801cea8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80022d6:	f000 f8a5 	bl	8002424 <TIMER_IF_BkUp_Read_MSBticks>
 80022da:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f88f 	bl	8002404 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 80022ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f2:	b08c      	sub	sp, #48	; 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 80022fc:	f000 f8a2 	bl	8002444 <GetTimerTicks>
 8002300:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002302:	f000 f88f 	bl	8002424 <TIMER_IF_BkUp_Read_MSBticks>
 8002306:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	2200      	movs	r2, #0
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	60fa      	str	r2, [r7, #12]
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	000b      	movs	r3, r1
 800231c:	2200      	movs	r2, #0
 800231e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002320:	2000      	movs	r0, #0
 8002322:	460c      	mov	r4, r1
 8002324:	4605      	mov	r5, r0
 8002326:	eb12 0804 	adds.w	r8, r2, r4
 800232a:	eb43 0905 	adc.w	r9, r3, r5
 800232e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002332:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	f04f 0300 	mov.w	r3, #0
 800233e:	0a82      	lsrs	r2, r0, #10
 8002340:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002344:	0a8b      	lsrs	r3, r1, #10
 8002346:	4613      	mov	r3, r2
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2200      	movs	r2, #0
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002358:	f04f 0b00 	mov.w	fp, #0
 800235c:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff46 	bl	80021f4 <TIMER_IF_Convert_Tick2ms>
 8002368:	4603      	mov	r3, r0
 800236a:	b29a      	uxth	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002372:	4618      	mov	r0, r3
 8002374:	3730      	adds	r7, #48	; 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800237c <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	2100      	movs	r1, #0
 8002388:	4803      	ldr	r0, [pc, #12]	; (8002398 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800238a:	f005 fa9d 	bl	80078c8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800238e:	bf00      	nop
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000240 	.word	0x20000240

0800239c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4803      	ldr	r0, [pc, #12]	; (80023b8 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80023aa:	f005 fa8d 	bl	80078c8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000240 	.word	0x20000240

080023bc <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80023c6:	2100      	movs	r1, #0
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80023ca:	f005 fa95 	bl	80078f8 <HAL_RTCEx_BKUPRead>
 80023ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000240 	.word	0x20000240

080023e0 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80023ea:	2101      	movs	r1, #1
 80023ec:	4804      	ldr	r0, [pc, #16]	; (8002400 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 80023ee:	f005 fa83 	bl	80078f8 <HAL_RTCEx_BKUPRead>
 80023f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 80023f4:	687b      	ldr	r3, [r7, #4]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000240 	.word	0x20000240

08002404 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	2102      	movs	r1, #2
 8002410:	4803      	ldr	r0, [pc, #12]	; (8002420 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002412:	f005 fa59 	bl	80078c8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000240 	.word	0x20000240

08002424 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800242a:	2102      	movs	r1, #2
 800242c:	4804      	ldr	r0, [pc, #16]	; (8002440 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 800242e:	f005 fa63 	bl	80078f8 <HAL_RTCEx_BKUPRead>
 8002432:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002434:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000240 	.word	0x20000240

08002444 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800244a:	480b      	ldr	r0, [pc, #44]	; (8002478 <GetTimerTicks+0x34>)
 800244c:	f7ff fdd8 	bl	8002000 <LL_RTC_TIME_GetSubSecond>
 8002450:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002452:	e003      	b.n	800245c <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002454:	4808      	ldr	r0, [pc, #32]	; (8002478 <GetTimerTicks+0x34>)
 8002456:	f7ff fdd3 	bl	8002000 <LL_RTC_TIME_GetSubSecond>
 800245a:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800245c:	4806      	ldr	r0, [pc, #24]	; (8002478 <GetTimerTicks+0x34>)
 800245e:	f7ff fdcf 	bl	8002000 <LL_RTC_TIME_GetSubSecond>
 8002462:	4602      	mov	r2, r0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4293      	cmp	r3, r2
 8002468:	d1f4      	bne.n	8002454 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40002800 	.word	0x40002800

0800247c <LL_AHB2_GRP1_EnableClock>:
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800248a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4313      	orrs	r3, r2
 8002492:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024a0:	68fb      	ldr	r3, [r7, #12]
}
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <LL_APB1_GRP1_EnableClock>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <LL_APB1_GRP1_DisableClock>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80024e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024f2:	4013      	ands	r3, r2
 80024f4:	658b      	str	r3, [r1, #88]	; 0x58
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <LL_APB2_GRP1_EnableClock>:
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800250e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4313      	orrs	r3, r2
 8002516:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002524:	68fb      	ldr	r3, [r7, #12]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr

08002530 <MX_USART1_IRDA_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_IRDA_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 8002536:	4a12      	ldr	r2, [pc, #72]	; (8002580 <MX_USART1_IRDA_Init+0x50>)
 8002538:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 57600;
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 800253c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002540:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 8002544:	2200      	movs	r2, #0
 8002546:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 800254a:	2200      	movs	r2, #0
 800254c:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 8002550:	220c      	movs	r2, #12
 8002552:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 10;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 8002556:	220a      	movs	r2, #10
 8002558:	751a      	strb	r2, [r3, #20]
  hirda1.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 800255c:	2200      	movs	r2, #0
 800255e:	82da      	strh	r2, [r3, #22]
  hirda1.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_USART1_IRDA_Init+0x4c>)
 8002568:	f002 fdf6 	bl	8005158 <HAL_IRDA_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_USART1_IRDA_Init+0x46>
  {
    Error_Handler();
 8002572:	f7ff f93f 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000294 	.word	0x20000294
 8002580:	40013800 	.word	0x40013800

08002584 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <MX_USART2_UART_Init+0x90>)
 800258a:	4a23      	ldr	r2, [pc, #140]	; (8002618 <MX_USART2_UART_Init+0x94>)
 800258c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <MX_USART2_UART_Init+0x90>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <MX_USART2_UART_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_USART2_UART_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b16      	ldr	r3, [pc, #88]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c6:	4b13      	ldr	r3, [pc, #76]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025cc:	4811      	ldr	r0, [pc, #68]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025ce:	f005 fe7e 	bl	80082ce <HAL_UART_Init>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025d8:	f7ff f90c 	bl	80017f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025dc:	2100      	movs	r1, #0
 80025de:	480d      	ldr	r0, [pc, #52]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025e0:	f007 fef2 	bl	800a3c8 <HAL_UARTEx_SetTxFifoThreshold>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80025ea:	f7ff f903 	bl	80017f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ee:	2100      	movs	r1, #0
 80025f0:	4808      	ldr	r0, [pc, #32]	; (8002614 <MX_USART2_UART_Init+0x90>)
 80025f2:	f007 ff27 	bl	800a444 <HAL_UARTEx_SetRxFifoThreshold>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80025fc:	f7ff f8fa 	bl	80017f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_USART2_UART_Init+0x90>)
 8002602:	f007 fea9 	bl	800a358 <HAL_UARTEx_DisableFifoMode>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800260c:	f7ff f8f2 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200002dc 	.word	0x200002dc
 8002618:	40004400 	.word	0x40004400

0800261c <HAL_IRDA_MspInit>:

void HAL_IRDA_MspInit(IRDA_HandleTypeDef* irdaHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b096      	sub	sp, #88	; 0x58
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002634:	f107 030c 	add.w	r3, r7, #12
 8002638:	2238      	movs	r2, #56	; 0x38
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f01b f845 	bl	801d6cc <memset>
  if(irdaHandle->Instance==USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2f      	ldr	r2, [pc, #188]	; (8002704 <HAL_IRDA_MspInit+0xe8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d156      	bne.n	80026fa <HAL_IRDA_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800264c:	2301      	movs	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002650:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002654:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4618      	mov	r0, r3
 800265c:	f004 fcc4 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <HAL_IRDA_MspInit+0x4e>
    {
      Error_Handler();
 8002666:	f7ff f8c5 	bl	80017f4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800266a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800266e:	f7ff ff47 	bl	8002500 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	2002      	movs	r0, #2
 8002674:	f7ff ff02 	bl	800247c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RX_IrDA_Pin|USARTx_TX_Pin;
 8002678:	23c0      	movs	r3, #192	; 0xc0
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002688:	2307      	movs	r3, #7
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002690:	4619      	mov	r1, r3
 8002692:	481d      	ldr	r0, [pc, #116]	; (8002708 <HAL_IRDA_MspInit+0xec>)
 8002694:	f002 faf0 	bl	8004c78 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002698:	4b1c      	ldr	r3, [pc, #112]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 800269a:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_IRDA_MspInit+0xf4>)
 800269c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800269e:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026a0:	2212      	movs	r2, #18
 80026a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026a6:	2210      	movs	r2, #16
 80026a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026aa:	4b18      	ldr	r3, [pc, #96]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026b2:	2280      	movs	r2, #128	; 0x80
 80026b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b6:	4b15      	ldr	r3, [pc, #84]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026c8:	4b10      	ldr	r3, [pc, #64]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026ce:	480f      	ldr	r0, [pc, #60]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026d0:	f001 fc86 	bl	8003fe0 <HAL_DMA_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_IRDA_MspInit+0xc2>
    {
      Error_Handler();
 80026da:	f7ff f88b 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(irdaHandle,hdmatx,hdma_usart1_tx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <HAL_IRDA_MspInit+0xf0>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2102      	movs	r1, #2
 80026ee:	2024      	movs	r0, #36	; 0x24
 80026f0:	f001 fc3f 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026f4:	2024      	movs	r0, #36	; 0x24
 80026f6:	f001 fc56 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026fa:	bf00      	nop
 80026fc:	3758      	adds	r7, #88	; 0x58
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40013800 	.word	0x40013800
 8002708:	48000400 	.word	0x48000400
 800270c:	2000036c 	.word	0x2000036c
 8002710:	40020008 	.word	0x40020008

08002714 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b096      	sub	sp, #88	; 0x58
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800272c:	f107 030c 	add.w	r3, r7, #12
 8002730:	2238      	movs	r2, #56	; 0x38
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f01a ffc9 	bl	801d6cc <memset>
  if(uartHandle->Instance==USART2)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <HAL_UART_MspInit+0xe8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d157      	bne.n	80027f4 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002744:	2302      	movs	r3, #2
 8002746:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002748:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800274c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	4618      	mov	r0, r3
 8002754:	f004 fc48 	bl	8006fe8 <HAL_RCCEx_PeriphCLKConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800275e:	f7ff f849 	bl	80017f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002762:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002766:	f7ff fea1 	bl	80024ac <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2001      	movs	r0, #1
 800276c:	f7ff fe86 	bl	800247c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002770:	230c      	movs	r3, #12
 8002772:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002774:	2302      	movs	r3, #2
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277c:	2300      	movs	r3, #0
 800277e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002780:	2307      	movs	r3, #7
 8002782:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002788:	4619      	mov	r1, r3
 800278a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278e:	f002 fa73 	bl	8004c78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002792:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <HAL_UART_MspInit+0xec>)
 8002794:	4a1b      	ldr	r2, [pc, #108]	; (8002804 <HAL_UART_MspInit+0xf0>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_UART_MspInit+0xec>)
 800279a:	2214      	movs	r2, #20
 800279c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800279e:	4b18      	ldr	r3, [pc, #96]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027a0:	2210      	movs	r2, #16
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b16      	ldr	r3, [pc, #88]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027b0:	4b13      	ldr	r3, [pc, #76]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b6:	4b12      	ldr	r3, [pc, #72]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027bc:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027c8:	480d      	ldr	r0, [pc, #52]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027ca:	f001 fc09 	bl	8003fe0 <HAL_DMA_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80027d4:	f7ff f80e 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027dc:	679a      	str	r2, [r3, #120]	; 0x78
 80027de:	4a08      	ldr	r2, [pc, #32]	; (8002800 <HAL_UART_MspInit+0xec>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027e4:	2200      	movs	r2, #0
 80027e6:	2100      	movs	r1, #0
 80027e8:	2025      	movs	r0, #37	; 0x25
 80027ea:	f001 fbc2 	bl	8003f72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027ee:	2025      	movs	r0, #37	; 0x25
 80027f0:	f001 fbd9 	bl	8003fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027f4:	bf00      	nop
 80027f6:	3758      	adds	r7, #88	; 0x58
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40004400 	.word	0x40004400
 8002800:	200003cc 	.word	0x200003cc
 8002804:	4002001c 	.word	0x4002001c

08002808 <HAL_UART_MspDeInit>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_UART_MspDeInit+0x3c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d110      	bne.n	800283c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800281a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800281e:	f7ff fe5d 	bl	80024dc <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002822:	210c      	movs	r1, #12
 8002824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002828:	f002 fb86 	bl	8004f38 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002830:	4618      	mov	r0, r3
 8002832:	f001 fc7d 	bl	8004130 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002836:	2025      	movs	r0, #37	; 0x25
 8002838:	f001 fbc3 	bl	8003fc2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40004400 	.word	0x40004400

08002848 <LL_APB1_GRP1_ForceReset>:
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4313      	orrs	r3, r2
 800285e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <LL_APB1_GRP1_ReleaseReset>:
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	43db      	mvns	r3, r3
 800287c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002880:	4013      	ands	r3, r2
 8002882:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <LL_EXTI_EnableIT_0_31+0x24>)
 800289a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800289e:	4905      	ldr	r1, [pc, #20]	; (80028b4 <LL_EXTI_EnableIT_0_31+0x24>)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	58000800 	.word	0x58000800

080028b8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80028c0:	4a07      	ldr	r2, [pc, #28]	; (80028e0 <vcom_Init+0x28>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80028c6:	f7fe fc85 	bl	80011d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80028ca:	f7ff fe5b 	bl	8002584 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80028ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80028d2:	f7ff ffdd 	bl	8002890 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80028d6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000430 	.word	0x20000430

080028e4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80028e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80028ec:	f7ff ffac 	bl	8002848 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80028f0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80028f4:	f7ff ffb9 	bl	800286a <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80028f8:	4804      	ldr	r0, [pc, #16]	; (800290c <vcom_DeInit+0x28>)
 80028fa:	f7ff ff85 	bl	8002808 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80028fe:	200f      	movs	r0, #15
 8002900:	f001 fb5f 	bl	8003fc2 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002904:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002906:	4618      	mov	r0, r3
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	200002dc 	.word	0x200002dc

08002910 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 800291c:	887b      	ldrh	r3, [r7, #2]
 800291e:	461a      	mov	r2, r3
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4804      	ldr	r0, [pc, #16]	; (8002934 <vcom_Trace_DMA+0x24>)
 8002924:	f005 fd7a 	bl	800841c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002928:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200002dc 	.word	0x200002dc

08002938 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <vcom_ReceiveInit+0x70>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002946:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800294a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002954:	4815      	ldr	r0, [pc, #84]	; (80029ac <vcom_ReceiveInit+0x74>)
 8002956:	f007 fc72 	bl	800a23e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800295a:	bf00      	nop
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <vcom_ReceiveInit+0x74>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296a:	d0f7      	beq.n	800295c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800296c:	bf00      	nop
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <vcom_ReceiveInit+0x74>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297c:	d1f7      	bne.n	800296e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <vcom_ReceiveInit+0x74>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <vcom_ReceiveInit+0x74>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800298c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800298e:	4807      	ldr	r0, [pc, #28]	; (80029ac <vcom_ReceiveInit+0x74>)
 8002990:	f007 fcb0 	bl	800a2f4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002994:	2201      	movs	r2, #1
 8002996:	4906      	ldr	r1, [pc, #24]	; (80029b0 <vcom_ReceiveInit+0x78>)
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <vcom_ReceiveInit+0x74>)
 800299a:	f005 fce9 	bl	8008370 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800299e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20000434 	.word	0x20000434
 80029ac:	200002dc 	.word	0x200002dc
 80029b0:	2000042c 	.word	0x2000042c

080029b4 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <HAL_UART_TxCpltCallback+0x24>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d103      	bne.n	80029ce <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_UART_TxCpltCallback+0x28>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2000      	movs	r0, #0
 80029cc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40004400 	.word	0x40004400
 80029dc:	20000430 	.word	0x20000430

080029e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <HAL_UART_RxCpltCallback+0x44>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d113      	bne.n	8002a1a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80029f2:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <HAL_UART_RxCpltCallback+0x48>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_UART_RxCpltCallback+0x30>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d105      	bne.n	8002a10 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_UART_RxCpltCallback+0x48>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	4807      	ldr	r0, [pc, #28]	; (8002a2c <HAL_UART_RxCpltCallback+0x4c>)
 8002a0e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002a10:	2201      	movs	r2, #1
 8002a12:	4906      	ldr	r1, [pc, #24]	; (8002a2c <HAL_UART_RxCpltCallback+0x4c>)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f005 fcab 	bl	8008370 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40004400 	.word	0x40004400
 8002a28:	20000434 	.word	0x20000434
 8002a2c:	2000042c 	.word	0x2000042c

08002a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a30:	480d      	ldr	r0, [pc, #52]	; (8002a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a32:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a34:	f7ff fade 	bl	8001ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a38:	480c      	ldr	r0, [pc, #48]	; (8002a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8002a3a:	490d      	ldr	r1, [pc, #52]	; (8002a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <LoopForever+0xe>)
  movs r3, #0
 8002a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a40:	e002      	b.n	8002a48 <LoopCopyDataInit>

08002a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a46:	3304      	adds	r3, #4

08002a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a4c:	d3f9      	bcc.n	8002a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a50:	4c0a      	ldr	r4, [pc, #40]	; (8002a7c <LoopForever+0x16>)
  movs r3, #0
 8002a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a54:	e001      	b.n	8002a5a <LoopFillZerobss>

08002a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a58:	3204      	adds	r2, #4

08002a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a5c:	d3fb      	bcc.n	8002a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a5e:	f01a fe11 	bl	801d684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a62:	f7fe fe1b 	bl	800169c <main>

08002a66 <LoopForever>:

LoopForever:
    b LoopForever
 8002a66:	e7fe      	b.n	8002a66 <LoopForever>
  ldr   r0, =_estack
 8002a68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a70:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8002a74:	0801f144 	.word	0x0801f144
  ldr r2, =_sbss
 8002a78:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002a7c:	200022a0 	.word	0x200022a0

08002a80 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a80:	e7fe      	b.n	8002a80 <ADC_IRQHandler>

08002a82 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002a96:	2310      	movs	r3, #16
 8002a98:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aae:	f002 f8e3 	bl	8004c78 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002abe:	f002 f8db 	bl	8004c78 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2120      	movs	r1, #32
 8002ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aca:	f002 fb03 	bl	80050d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2110      	movs	r1, #16
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f002 fafd 	bl	80050d4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d83f      	bhi.n	8002b74 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b0d 	.word	0x08002b0d
 8002b00:	08002b27 	.word	0x08002b27
 8002b04:	08002b41 	.word	0x08002b41
 8002b08:	08002b5b 	.word	0x08002b5b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2110      	movs	r1, #16
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f002 fade 	bl	80050d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b20:	f002 fad8 	bl	80050d4 <HAL_GPIO_WritePin>
      break;      
 8002b24:	e027      	b.n	8002b76 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002b26:	2201      	movs	r2, #1
 8002b28:	2110      	movs	r1, #16
 8002b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2e:	f002 fad1 	bl	80050d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002b32:	2200      	movs	r2, #0
 8002b34:	2120      	movs	r1, #32
 8002b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b3a:	f002 facb 	bl	80050d4 <HAL_GPIO_WritePin>
      break;
 8002b3e:	e01a      	b.n	8002b76 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002b40:	2201      	movs	r2, #1
 8002b42:	2110      	movs	r1, #16
 8002b44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b48:	f002 fac4 	bl	80050d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2120      	movs	r1, #32
 8002b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b54:	f002 fabe 	bl	80050d4 <HAL_GPIO_WritePin>
      break;
 8002b58:	e00d      	b.n	8002b76 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b62:	f002 fab7 	bl	80050d4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002b66:	2201      	movs	r2, #1
 8002b68:	2120      	movs	r1, #32
 8002b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6e:	f002 fab1 	bl	80050d4 <HAL_GPIO_WritePin>
      break;
 8002b72:	e000      	b.n	8002b76 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002b74:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002b84:	2302      	movs	r3, #2
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002b92:	2301      	movs	r3, #1
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bc80      	pop	{r7}
 8002b9a:	4770      	bx	lr

08002b9c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002ba0:	2301      	movs	r3, #1
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002bba:	230f      	movs	r3, #15
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e001      	b.n	8002bc4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002bc0:	2316      	movs	r3, #22
 8002bc2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6053      	str	r3, [r2, #4]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr
 8002be8:	e0042000 	.word	0xe0042000

08002bec <LL_DBGMCU_DisableDBGStopMode>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002bf6:	f023 0302 	bic.w	r3, r3, #2
 8002bfa:	6053      	str	r3, [r2, #4]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr
 8002c04:	e0042000 	.word	0xe0042000

08002c08 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a03      	ldr	r2, [pc, #12]	; (8002c20 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6053      	str	r3, [r2, #4]
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	e0042000 	.word	0xe0042000

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c2e:	2003      	movs	r0, #3
 8002c30:	f001 f994 	bl	8003f5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002c34:	f003 fffa 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_Init+0x3c>)
 8002c3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c3e:	200f      	movs	r0, #15
 8002c40:	f7ff f8ce 	bl	8001de0 <HAL_InitTick>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	e001      	b.n	8002c54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c50:	f7fe fe8c 	bl	800196c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c54:	79fb      	ldrb	r3, [r7, #7]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000000 	.word	0x20000000

08002c64 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002c68:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <HAL_GetUIDw0+0x10>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	1fff7590 	.word	0x1fff7590

08002c78 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002c7c:	4b02      	ldr	r3, [pc, #8]	; (8002c88 <HAL_GetUIDw1+0x10>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr
 8002c88:	1fff7594 	.word	0x1fff7594

08002c8c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_GetUIDw2+0x10>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	1fff7598 	.word	0x1fff7598

08002ca0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002ca4:	f7ff ff94 	bl	8002bd0 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002cb0:	f7ff ff9c 	bl	8002bec <LL_DBGMCU_DisableDBGStopMode>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002cbc:	f7ff ffa4 	bl	8002c08 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002cc0:	bf00      	nop
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	601a      	str	r2, [r3, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2107      	movs	r1, #7
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	401a      	ands	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2107      	movs	r1, #7
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr

08002d6e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	210f      	movs	r1, #15
 8002daa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	401a      	ands	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0e9b      	lsrs	r3, r3, #26
 8002db6:	f003 010f 	and.w	r1, r3, #15
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002dca:	bf00      	nop
 8002dcc:	3714      	adds	r7, #20
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	401a      	ands	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr

08002e1e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b085      	sub	sp, #20
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	43db      	mvns	r3, r3
 8002e34:	401a      	ands	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	0219      	lsls	r1, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	400b      	ands	r3, r1
 8002e3e:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e46:	431a      	orrs	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr

08002e56 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e66:	f023 0317 	bic.w	r3, r3, #23
 8002e6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e8c:	f023 0317 	bic.w	r3, r3, #23
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6093      	str	r3, [r2, #8]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eb2:	d101      	bne.n	8002eb8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ed4:	f023 0317 	bic.w	r3, r3, #23
 8002ed8:	f043 0201 	orr.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bc80      	pop	{r7}
 8002ee8:	4770      	bx	lr

08002eea <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002efa:	f023 0317 	bic.w	r3, r3, #23
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_IsEnabled+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_IsEnabled+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d101      	bne.n	8002f4c <LL_ADC_IsDisableOngoing+0x18>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <LL_ADC_IsDisableOngoing+0x1a>
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f68:	f023 0317 	bic.w	r3, r3, #23
 8002f6c:	f043 0204 	orr.w	r2, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	f023 0317 	bic.w	r3, r3, #23
 8002f92:	f043 0210 	orr.w	r2, r3, #16
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bc80      	pop	{r7}
 8002fa2:	4770      	bx	lr

08002fa4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d101      	bne.n	8002fbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e19e      	b.n	8003328 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fe f823 	bl	8001044 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff44 	bl	8002e9e <LL_ADC_IsInternalRegulatorEnabled>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d115      	bne.n	8003048 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff ff18 	bl	8002e56 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003026:	4b99      	ldr	r3, [pc, #612]	; (800328c <HAL_ADC_Init+0x2c4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	099b      	lsrs	r3, r3, #6
 800302c:	4a98      	ldr	r2, [pc, #608]	; (8003290 <HAL_ADC_Init+0x2c8>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	099b      	lsrs	r3, r3, #6
 8003034:	3301      	adds	r3, #1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800303a:	e002      	b.n	8003042 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	3b01      	subs	r3, #1
 8003040:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f9      	bne.n	800303c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff26 	bl	8002e9e <LL_ADC_IsInternalRegulatorEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10d      	bne.n	8003074 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff93 	bl	8002fa4 <LL_ADC_REG_IsConversionOngoing>
 800307e:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	f040 8144 	bne.w	8003316 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8140 	bne.w	8003316 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800309e:	f043 0202 	orr.w	r2, r3, #2
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff30 	bl	8002f10 <LL_ADC_IsEnabled>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 80a7 	bne.w	8003206 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7e1b      	ldrb	r3, [r3, #24]
 80030c0:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80030c2:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	7e5b      	ldrb	r3, [r3, #25]
 80030c8:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80030ca:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7e9b      	ldrb	r3, [r3, #26]
 80030d0:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80030d2:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030d8:	2a00      	cmp	r2, #0
 80030da:	d002      	beq.n	80030e2 <HAL_ADC_Init+0x11a>
 80030dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e0:	e000      	b.n	80030e4 <HAL_ADC_Init+0x11c>
 80030e2:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80030e4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80030ea:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da04      	bge.n	80030fe <HAL_ADC_Init+0x136>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030fc:	e001      	b.n	8003102 <HAL_ADC_Init+0x13a>
 80030fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003102:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800310a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800310c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4313      	orrs	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d114      	bne.n	8003148 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7e9b      	ldrb	r3, [r3, #26]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d104      	bne.n	8003130 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e00b      	b.n	8003148 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	2b00      	cmp	r3, #0
 800314e:	d009      	beq.n	8003164 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800315c:	4313      	orrs	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800316e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	430b      	orrs	r3, r1
 800317a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003188:	4313      	orrs	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d111      	bne.n	80031be <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80031a6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80031ac:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80031b2:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	4b33      	ldr	r3, [pc, #204]	; (8003294 <HAL_ADC_Init+0x2cc>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	6979      	ldr	r1, [r7, #20]
 80031ce:	430b      	orrs	r3, r1
 80031d0:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80031da:	d014      	beq.n	8003206 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e4:	d00f      	beq.n	8003206 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ee:	d00a      	beq.n	8003206 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80031f0:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_ADC_Init+0x2d0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003200:	4925      	ldr	r1, [pc, #148]	; (8003298 <HAL_ADC_Init+0x2d0>)
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	461a      	mov	r2, r3
 8003210:	2100      	movs	r1, #0
 8003212:	f7ff fd76 	bl	8002d02 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	461a      	mov	r2, r3
 8003220:	491e      	ldr	r1, [pc, #120]	; (800329c <HAL_ADC_Init+0x2d4>)
 8003222:	f7ff fd6e 	bl	8002d02 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f062 020f 	orn	r2, r2, #15
 800323c:	629a      	str	r2, [r3, #40]	; 0x28
 800323e:	e042      	b.n	80032c6 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003248:	d13d      	bne.n	80032c6 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800324a:	2300      	movs	r3, #0
 800324c:	613b      	str	r3, [r7, #16]
 800324e:	e00c      	b.n	800326a <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d006      	beq.n	8003272 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	3301      	adds	r3, #1
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b07      	cmp	r3, #7
 800326e:	d9ef      	bls.n	8003250 <HAL_ADC_Init+0x288>
 8003270:	e000      	b.n	8003274 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8003272:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d112      	bne.n	80032a0 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f062 020f 	orn	r2, r2, #15
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
 800328a:	e01c      	b.n	80032c6 <HAL_ADC_Init+0x2fe>
 800328c:	20000000 	.word	0x20000000
 8003290:	053e2d63 	.word	0x053e2d63
 8003294:	1ffffc02 	.word	0x1ffffc02
 8003298:	40012708 	.word	0x40012708
 800329c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f003 031c 	and.w	r3, r3, #28
 80032b2:	f06f 020f 	mvn.w	r2, #15
 80032b6:	fa02 f103 	lsl.w	r1, r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fd36 	bl	8002d3e <LL_ADC_GetSamplingTimeCommonChannels>
 80032d2:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032d8:	429a      	cmp	r2, r3
 80032da:	d10b      	bne.n	80032f4 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	f023 0303 	bic.w	r3, r3, #3
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80032f2:	e018      	b.n	8003326 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	f023 0312 	bic.w	r3, r3, #18
 80032fc:	f043 0210 	orr.w	r2, r3, #16
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003314:	e007      	b.n	8003326 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003326:	7ffb      	ldrb	r3, [r7, #31]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3720      	adds	r7, #32
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06a      	b.n	8003418 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fabe 	bl	80038d0 <ADC_ConversionStop>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10f      	bne.n	800337e <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 fb82 	bl	8003a68 <ADC_Disable>
 8003364:	4603      	mov	r3, r0
 8003366:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003368:	7bfb      	ldrb	r3, [r7, #15]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fd7f 	bl	8002e7c <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800338c:	f023 0303 	bic.w	r3, r3, #3
 8003390:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f240 329f 	movw	r2, #927	; 0x39f
 800339a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68d9      	ldr	r1, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <HAL_ADC_DeInit+0xf0>)
 80033a8:	400b      	ands	r3, r1
 80033aa:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80033ba:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0207 	bic.w	r2, r2, #7
 80033ca:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80033da:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_ADC_DeInit+0xf4>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <HAL_ADC_DeInit+0xf4>)
 80033f0:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80033f4:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fe38 	bl	800106c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	833e0200 	.word	0x833e0200
 8003424:	40012708 	.word	0x40012708

08003428 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fdb5 	bl	8002fa4 <LL_ADC_REG_IsConversionOngoing>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d132      	bne.n	80034a6 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ADC_Start+0x26>
 800344a:	2302      	movs	r3, #2
 800344c:	e02e      	b.n	80034ac <HAL_ADC_Start+0x84>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa80 	bl	800395c <ADC_Enable>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11a      	bne.n	800349c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	221c      	movs	r2, #28
 8003486:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fd5f 	bl	8002f58 <LL_ADC_REG_StartConversion>
 800349a:	e006      	b.n	80034aa <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80034a4:	e001      	b.n	80034aa <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034a6:	2302      	movs	r3, #2
 80034a8:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_Stop+0x16>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e022      	b.n	8003510 <HAL_ADC_Stop+0x5c>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9fc 	bl	80038d0 <ADC_ConversionStop>
 80034d8:	4603      	mov	r3, r0
 80034da:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d111      	bne.n	8003506 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fac0 	bl	8003a68 <ADC_Disable>
 80034e8:	4603      	mov	r3, r0
 80034ea:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b08      	cmp	r3, #8
 8003528:	d102      	bne.n	8003530 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800352a:	2308      	movs	r3, #8
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	e010      	b.n	8003552 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	f043 0220 	orr.w	r2, r3, #32
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e077      	b.n	800363e <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800354e:	2304      	movs	r3, #4
 8003550:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003552:	f7fe fc4f 	bl	8001df4 <HAL_GetTick>
 8003556:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003558:	e021      	b.n	800359e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d01d      	beq.n	800359e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003562:	f7fe fc47 	bl	8001df4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <HAL_ADC_PollForConversion+0x60>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d112      	bne.n	800359e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	f043 0204 	orr.w	r2, r3, #4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e04f      	b.n	800363e <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0d6      	beq.n	800355a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff fbd6 	bl	8002d6e <LL_ADC_REG_IsTriggerSourceSWStart>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d031      	beq.n	800362c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	7e9b      	ldrb	r3, [r3, #26]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d12d      	bne.n	800362c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d126      	bne.n	800362c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fcde 	bl	8002fa4 <LL_ADC_REG_IsConversionOngoing>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d112      	bne.n	8003614 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 020c 	bic.w	r2, r2, #12
 80035fc:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003606:	f023 0301 	bic.w	r3, r3, #1
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	659a      	str	r2, [r3, #88]	; 0x58
 8003612:	e00b      	b.n	800362c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7e1b      	ldrb	r3, [r3, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	220c      	movs	r2, #12
 800363a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
	...

08003660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b088      	sub	sp, #32
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800366e:	2300      	movs	r3, #0
 8003670:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003680:	2b01      	cmp	r3, #1
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x28>
 8003684:	2302      	movs	r3, #2
 8003686:	e110      	b.n	80038aa <HAL_ADC_ConfigChannel+0x24a>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fc85 	bl	8002fa4 <LL_ADC_REG_IsConversionOngoing>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	f040 80f7 	bne.w	8003890 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	f000 80b1 	beq.w	800380e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036ba:	4a7e      	ldr	r2, [pc, #504]	; (80038b4 <HAL_ADC_ConfigChannel+0x254>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f7ff fb82 	bl	8002dd4 <LL_ADC_REG_SetSequencerChAdd>
 80036d0:	e041      	b.n	8003756 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	210f      	movs	r1, #15
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	401a      	ands	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d105      	bne.n	8003700 <HAL_ADC_ConfigChannel+0xa0>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	e011      	b.n	8003724 <HAL_ADC_ConfigChannel+0xc4>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	fa93 f3a3 	rbit	r3, r3
 800370c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003718:	2320      	movs	r3, #32
 800371a:	e003      	b.n	8003724 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fab3 f383 	clz	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	6839      	ldr	r1, [r7, #0]
 8003726:	6849      	ldr	r1, [r1, #4]
 8003728:	f001 011f 	and.w	r1, r1, #31
 800372c:	408b      	lsls	r3, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	089b      	lsrs	r3, r3, #2
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	429a      	cmp	r2, r3
 8003742:	d808      	bhi.n	8003756 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6818      	ldr	r0, [r3, #0]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	f7ff fb1e 	bl	8002d92 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	461a      	mov	r2, r3
 8003764:	f7ff fb5b 	bl	8002e1e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	f280 8097 	bge.w	80038a0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003772:	4851      	ldr	r0, [pc, #324]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 8003774:	f7ff fab8 	bl	8002ce8 <LL_ADC_GetCommonPathInternalCh>
 8003778:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4f      	ldr	r2, [pc, #316]	; (80038bc <HAL_ADC_ConfigChannel+0x25c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d120      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d11b      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003794:	4619      	mov	r1, r3
 8003796:	4848      	ldr	r0, [pc, #288]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 8003798:	f7ff fa94 	bl	8002cc4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <HAL_ADC_ConfigChannel+0x260>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	099b      	lsrs	r3, r3, #6
 80037a2:	4a48      	ldr	r2, [pc, #288]	; (80038c4 <HAL_ADC_ConfigChannel+0x264>)
 80037a4:	fba2 2303 	umull	r2, r3, r2, r3
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037b6:	e002      	b.n	80037be <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f9      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80037c4:	e06c      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a3f      	ldr	r2, [pc, #252]	; (80038c8 <HAL_ADC_ConfigChannel+0x268>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d10c      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x18a>
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e0:	4619      	mov	r1, r3
 80037e2:	4835      	ldr	r0, [pc, #212]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 80037e4:	f7ff fa6e 	bl	8002cc4 <LL_ADC_SetCommonPathInternalCh>
 80037e8:	e05a      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a37      	ldr	r2, [pc, #220]	; (80038cc <HAL_ADC_ConfigChannel+0x26c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d155      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d150      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003804:	4619      	mov	r1, r3
 8003806:	482c      	ldr	r0, [pc, #176]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 8003808:	f7ff fa5c 	bl	8002cc4 <LL_ADC_SetCommonPathInternalCh>
 800380c:	e048      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003816:	d004      	beq.n	8003822 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800381c:	4a25      	ldr	r2, [pc, #148]	; (80038b4 <HAL_ADC_ConfigChannel+0x254>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d107      	bne.n	8003832 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4619      	mov	r1, r3
 800382c:	4610      	mov	r0, r2
 800382e:	f7ff fae3 	bl	8002df8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	da32      	bge.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800383a:	481f      	ldr	r0, [pc, #124]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 800383c:	f7ff fa54 	bl	8002ce8 <LL_ADC_GetCommonPathInternalCh>
 8003840:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1d      	ldr	r2, [pc, #116]	; (80038bc <HAL_ADC_ConfigChannel+0x25c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d107      	bne.n	800385c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003852:	4619      	mov	r1, r3
 8003854:	4818      	ldr	r0, [pc, #96]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 8003856:	f7ff fa35 	bl	8002cc4 <LL_ADC_SetCommonPathInternalCh>
 800385a:	e021      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_ADC_ConfigChannel+0x268>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d107      	bne.n	8003876 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386c:	4619      	mov	r1, r3
 800386e:	4812      	ldr	r0, [pc, #72]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 8003870:	f7ff fa28 	bl	8002cc4 <LL_ADC_SetCommonPathInternalCh>
 8003874:	e014      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_ADC_ConfigChannel+0x26c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10f      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003886:	4619      	mov	r1, r3
 8003888:	480b      	ldr	r0, [pc, #44]	; (80038b8 <HAL_ADC_ConfigChannel+0x258>)
 800388a:	f7ff fa1b 	bl	8002cc4 <LL_ADC_SetCommonPathInternalCh>
 800388e:	e007      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80038a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	80000004 	.word	0x80000004
 80038b8:	40012708 	.word	0x40012708
 80038bc:	b0001000 	.word	0xb0001000
 80038c0:	20000000 	.word	0x20000000
 80038c4:	053e2d63 	.word	0x053e2d63
 80038c8:	b8004000 	.word	0xb8004000
 80038cc:	b4002000 	.word	0xb4002000

080038d0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff fb61 	bl	8002fa4 <LL_ADC_REG_IsConversionOngoing>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d033      	beq.n	8003950 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fb21 	bl	8002f34 <LL_ADC_IsDisableOngoing>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fb3e 	bl	8002f7e <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003902:	f7fe fa77 	bl	8001df4 <HAL_GetTick>
 8003906:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003908:	e01b      	b.n	8003942 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800390a:	f7fe fa73 	bl	8001df4 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d914      	bls.n	8003942 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800392a:	f043 0210 	orr.w	r2, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	f043 0201 	orr.w	r2, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e007      	b.n	8003952 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1dc      	bne.n	800390a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003964:	2300      	movs	r3, #0
 8003966:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff facf 	bl	8002f10 <LL_ADC_IsEnabled>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d169      	bne.n	8003a4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <ADC_Enable+0xfc>)
 8003980:	4013      	ands	r3, r2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	f043 0210 	orr.w	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e055      	b.n	8003a4e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fa8c 	bl	8002ec4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039ac:	482b      	ldr	r0, [pc, #172]	; (8003a5c <ADC_Enable+0x100>)
 80039ae:	f7ff f99b 	bl	8002ce8 <LL_ADC_GetCommonPathInternalCh>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00f      	beq.n	80039dc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039bc:	4b28      	ldr	r3, [pc, #160]	; (8003a60 <ADC_Enable+0x104>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	099b      	lsrs	r3, r3, #6
 80039c2:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <ADC_Enable+0x108>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	099b      	lsrs	r3, r3, #6
 80039ca:	3301      	adds	r3, #1
 80039cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039ce:	e002      	b.n	80039d6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f9      	bne.n	80039d0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7e5b      	ldrb	r3, [r3, #25]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d033      	beq.n	8003a4c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80039e4:	f7fe fa06 	bl	8001df4 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ea:	e028      	b.n	8003a3e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fa8d 	bl	8002f10 <LL_ADC_IsEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff fa5f 	bl	8002ec4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a06:	f7fe f9f5 	bl	8001df4 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d914      	bls.n	8003a3e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00d      	beq.n	8003a3e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f043 0210 	orr.w	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e007      	b.n	8003a4e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d1cf      	bne.n	80039ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	80000017 	.word	0x80000017
 8003a5c:	40012708 	.word	0x40012708
 8003a60:	20000000 	.word	0x20000000
 8003a64:	053e2d63 	.word	0x053e2d63

08003a68 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fa5d 	bl	8002f34 <LL_ADC_IsDisableOngoing>
 8003a7a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fa45 	bl	8002f10 <LL_ADC_IsEnabled>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d047      	beq.n	8003b1c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d144      	bne.n	8003b1c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0305 	and.w	r3, r3, #5
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10c      	bne.n	8003aba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fa20 	bl	8002eea <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2203      	movs	r2, #3
 8003ab0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ab2:	f7fe f99f 	bl	8001df4 <HAL_GetTick>
 8003ab6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ab8:	e029      	b.n	8003b0e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f043 0210 	orr.w	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e023      	b.n	8003b1e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ad6:	f7fe f98d 	bl	8001df4 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d914      	bls.n	8003b0e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00d      	beq.n	8003b0e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	f043 0210 	orr.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	f043 0201 	orr.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e007      	b.n	8003b1e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1dc      	bne.n	8003ad6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <LL_ADC_SetCalibrationFactor>:
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b36:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <LL_ADC_GetCalibrationFactor>:
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_Enable>:
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	f023 0317 	bic.w	r3, r3, #23
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	609a      	str	r2, [r3, #8]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_Disable>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ba0:	f023 0317 	bic.w	r3, r3, #23
 8003ba4:	f043 0202 	orr.w	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <LL_ADC_IsEnabled>:
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <LL_ADC_IsEnabled+0x18>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <LL_ADC_IsEnabled+0x1a>
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr

08003bda <LL_ADC_StartCalibration>:
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bea:	f023 0317 	bic.w	r3, r3, #23
 8003bee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	609a      	str	r2, [r3, #8]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <LL_ADC_IsCalibrationOnGoing>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c14:	d101      	bne.n	8003c1a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr

08003c26 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b088      	sub	sp, #32
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADCEx_Calibration_Start+0x1e>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e0b9      	b.n	8003db8 <HAL_ADCEx_Calibration_Start+0x192>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff0b 	bl	8003a68 <ADC_Disable>
 8003c52:	4603      	mov	r3, r0
 8003c54:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff ffab 	bl	8003bb6 <LL_ADC_IsEnabled>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f040 809d 	bne.w	8003da2 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003c70:	f043 0202 	orr.w	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	f248 0303 	movw	r3, #32771	; 0x8003
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c94:	f023 0303 	bic.w	r3, r3, #3
 8003c98:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e02e      	b.n	8003cfe <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff ff98 	bl	8003bda <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003caa:	e014      	b.n	8003cd6 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003cb8:	d30d      	bcc.n	8003cd6 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbe:	f023 0312 	bic.w	r3, r3, #18
 8003cc2:	f043 0210 	orr.w	r2, r3, #16
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e070      	b.n	8003db8 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7ff ff90 	bl	8003c00 <LL_ADC_IsCalibrationOnGoing>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e2      	bne.n	8003cac <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff ff2f 	bl	8003b4e <LL_ADC_GetCalibrationFactor>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b07      	cmp	r3, #7
 8003d02:	d9cd      	bls.n	8003ca0 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff ff29 	bl	8003b6a <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69b9      	ldr	r1, [r7, #24]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff ff01 	bl	8003b26 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff ff31 	bl	8003b90 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d2e:	f7fe f861 	bl	8001df4 <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d34:	e01c      	b.n	8003d70 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d36:	f7fe f85d 	bl	8001df4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d915      	bls.n	8003d70 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff34 	bl	8003bb6 <LL_ADC_IsEnabled>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f043 0210 	orr.w	r2, r3, #16
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	f043 0201 	orr.w	r2, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e023      	b.n	8003db8 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff ff1e 	bl	8003bb6 <LL_ADC_IsEnabled>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1da      	bne.n	8003d36 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68d9      	ldr	r1, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f023 0303 	bic.w	r3, r3, #3
 8003d98:	f043 0201 	orr.w	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8003da0:	e005      	b.n	8003dae <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f043 0210 	orr.w	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3720      	adds	r7, #32
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003df2:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <__NVIC_SetPriorityGrouping+0x44>)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	60d3      	str	r3, [r2, #12]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e0c:	4b04      	ldr	r3, [pc, #16]	; (8003e20 <__NVIC_GetPriorityGrouping+0x18>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0a1b      	lsrs	r3, r3, #8
 8003e12:	f003 0307 	and.w	r3, r3, #7
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	e000ed00 	.word	0xe000ed00

08003e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	db0b      	blt.n	8003e4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	f003 021f 	and.w	r2, r3, #31
 8003e3c:	4906      	ldr	r1, [pc, #24]	; (8003e58 <__NVIC_EnableIRQ+0x34>)
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2001      	movs	r0, #1
 8003e46:	fa00 f202 	lsl.w	r2, r0, r2
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bc80      	pop	{r7}
 8003e56:	4770      	bx	lr
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	db12      	blt.n	8003e94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	f003 021f 	and.w	r2, r3, #31
 8003e74:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <__NVIC_DisableIRQ+0x44>)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e82:	3320      	adds	r3, #32
 8003e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003e88:	f3bf 8f4f 	dsb	sy
}
 8003e8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e8e:	f3bf 8f6f 	isb	sy
}
 8003e92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	e000e100 	.word	0xe000e100

08003ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	6039      	str	r1, [r7, #0]
 8003eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	db0a      	blt.n	8003ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	490c      	ldr	r1, [pc, #48]	; (8003ef0 <__NVIC_SetPriority+0x4c>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	0112      	lsls	r2, r2, #4
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ecc:	e00a      	b.n	8003ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	4908      	ldr	r1, [pc, #32]	; (8003ef4 <__NVIC_SetPriority+0x50>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	3b04      	subs	r3, #4
 8003edc:	0112      	lsls	r2, r2, #4
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	761a      	strb	r2, [r3, #24]
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000e100 	.word	0xe000e100
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	; 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f1c3 0307 	rsb	r3, r3, #7
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	bf28      	it	cs
 8003f16:	2304      	movcs	r3, #4
 8003f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d902      	bls.n	8003f28 <NVIC_EncodePriority+0x30>
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	3b03      	subs	r3, #3
 8003f26:	e000      	b.n	8003f2a <NVIC_EncodePriority+0x32>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f40:	f04f 31ff 	mov.w	r1, #4294967295
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4a:	43d9      	mvns	r1, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f50:	4313      	orrs	r3, r2
         );
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3724      	adds	r7, #36	; 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr

08003f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff ff2b 	bl	8003dc0 <__NVIC_SetPriorityGrouping>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b086      	sub	sp, #24
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	4603      	mov	r3, r0
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
 8003f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f80:	f7ff ff42 	bl	8003e08 <__NVIC_GetPriorityGrouping>
 8003f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff ffb4 	bl	8003ef8 <NVIC_EncodePriority>
 8003f90:	4602      	mov	r2, r0
 8003f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff83 	bl	8003ea4 <__NVIC_SetPriority>
}
 8003f9e:	bf00      	nop
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	4603      	mov	r3, r0
 8003fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff35 	bl	8003e24 <__NVIC_EnableIRQ>
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	4603      	mov	r3, r0
 8003fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ff43 	bl	8003e5c <__NVIC_DisableIRQ>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e08e      	b.n	8004110 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4b47      	ldr	r3, [pc, #284]	; (8004118 <HAL_DMA_Init+0x138>)
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d80f      	bhi.n	800401e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	4b45      	ldr	r3, [pc, #276]	; (800411c <HAL_DMA_Init+0x13c>)
 8004006:	4413      	add	r3, r2
 8004008:	4a45      	ldr	r2, [pc, #276]	; (8004120 <HAL_DMA_Init+0x140>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	009a      	lsls	r2, r3, #2
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a42      	ldr	r2, [pc, #264]	; (8004124 <HAL_DMA_Init+0x144>)
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
 800401c:	e00e      	b.n	800403c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_DMA_Init+0x148>)
 8004026:	4413      	add	r3, r2
 8004028:	4a3d      	ldr	r2, [pc, #244]	; (8004120 <HAL_DMA_Init+0x140>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	009a      	lsls	r2, r3, #2
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a3c      	ldr	r2, [pc, #240]	; (800412c <HAL_DMA_Init+0x14c>)
 800403a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004056:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fb24 	bl	80046dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800409c:	d102      	bne.n	80040a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d010      	beq.n	80040e6 <HAL_DMA_Init+0x106>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d80c      	bhi.n	80040e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fb4d 	bl	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040e2:	605a      	str	r2, [r3, #4]
 80040e4:	e008      	b.n	80040f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3708      	adds	r7, #8
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40020407 	.word	0x40020407
 800411c:	bffdfff8 	.word	0xbffdfff8
 8004120:	cccccccd 	.word	0xcccccccd
 8004124:	40020000 	.word	0x40020000
 8004128:	bffdfbf8 	.word	0xbffdfbf8
 800412c:	40020400 	.word	0x40020400

08004130 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e07b      	b.n	800423a <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <HAL_DMA_DeInit+0x114>)
 800415a:	429a      	cmp	r2, r3
 800415c:	d80f      	bhi.n	800417e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	4b38      	ldr	r3, [pc, #224]	; (8004248 <HAL_DMA_DeInit+0x118>)
 8004166:	4413      	add	r3, r2
 8004168:	4a38      	ldr	r2, [pc, #224]	; (800424c <HAL_DMA_DeInit+0x11c>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	009a      	lsls	r2, r3, #2
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a35      	ldr	r2, [pc, #212]	; (8004250 <HAL_DMA_DeInit+0x120>)
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
 800417c:	e00e      	b.n	800419c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	461a      	mov	r2, r3
 8004184:	4b33      	ldr	r3, [pc, #204]	; (8004254 <HAL_DMA_DeInit+0x124>)
 8004186:	4413      	add	r3, r2
 8004188:	4a30      	ldr	r2, [pc, #192]	; (800424c <HAL_DMA_DeInit+0x11c>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	009a      	lsls	r2, r3, #2
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <HAL_DMA_DeInit+0x128>)
 800419a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f003 021c 	and.w	r2, r3, #28
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	2101      	movs	r1, #1
 80041b2:	fa01 f202 	lsl.w	r2, r1, r2
 80041b6:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fa8f 	bl	80046dc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041ce:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00f      	beq.n	80041f8 <HAL_DMA_DeInit+0xc8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d80b      	bhi.n	80041f8 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fac3 	bl	800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041f6:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40020407 	.word	0x40020407
 8004248:	bffdfff8 	.word	0xbffdfff8
 800424c:	cccccccd 	.word	0xcccccccd
 8004250:	40020000 	.word	0x40020000
 8004254:	bffdfbf8 	.word	0xbffdfbf8
 8004258:	40020400 	.word	0x40020400

0800425c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_DMA_Start_IT+0x20>
 8004278:	2302      	movs	r3, #2
 800427a:	e069      	b.n	8004350 <HAL_DMA_Start_IT+0xf4>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	d155      	bne.n	800433c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2202      	movs	r2, #2
 8004294:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0201 	bic.w	r2, r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f9d3 	bl	8004660 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 020e 	orr.w	r2, r2, #14
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	e00f      	b.n	80042f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0204 	bic.w	r2, r2, #4
 80042e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 020a 	orr.w	r2, r2, #10
 80042f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d007      	beq.n	8004312 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004310:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004328:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0201 	orr.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	e008      	b.n	800434e <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e04f      	b.n	800440a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d008      	beq.n	8004388 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e040      	b.n	800440a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020e 	bic.w	r2, r2, #14
 8004396:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0201 	bic.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043bc:	f003 021c 	and.w	r2, r3, #28
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	2101      	movs	r1, #1
 80043c6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d005      	beq.n	8004438 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	e047      	b.n	80044c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 020e 	bic.w	r2, r2, #14
 8004446:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0201 	bic.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	f003 021c 	and.w	r2, r3, #28
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	2101      	movs	r1, #1
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004484:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00c      	beq.n	80044a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800449c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
    }
  }
  return status;
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f003 031c 	and.w	r3, r3, #28
 80044f4:	2204      	movs	r2, #4
 80044f6:	409a      	lsls	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d027      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7c>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0304 	and.w	r3, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	d022      	beq.n	8004550 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d107      	bne.n	8004528 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0204 	bic.w	r2, r2, #4
 8004526:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	f003 021c 	and.w	r2, r3, #28
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2104      	movs	r1, #4
 8004536:	fa01 f202 	lsl.w	r2, r1, r2
 800453a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8081 	beq.w	8004648 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800454e:	e07b      	b.n	8004648 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004554:	f003 031c 	and.w	r3, r3, #28
 8004558:	2202      	movs	r2, #2
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d03d      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x10c>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d038      	beq.n	80045e0 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 020a 	bic.w	r2, r2, #10
 800458a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <HAL_DMA_IRQHandler+0x180>)
 800459c:	429a      	cmp	r2, r3
 800459e:	d909      	bls.n	80045b4 <HAL_DMA_IRQHandler+0xe0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	f003 031c 	and.w	r3, r3, #28
 80045a8:	4a2b      	ldr	r2, [pc, #172]	; (8004658 <HAL_DMA_IRQHandler+0x184>)
 80045aa:	2102      	movs	r1, #2
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	6053      	str	r3, [r2, #4]
 80045b2:	e008      	b.n	80045c6 <HAL_DMA_IRQHandler+0xf2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b8:	f003 031c 	and.w	r3, r3, #28
 80045bc:	4a27      	ldr	r2, [pc, #156]	; (800465c <HAL_DMA_IRQHandler+0x188>)
 80045be:	2102      	movs	r1, #2
 80045c0:	fa01 f303 	lsl.w	r3, r1, r3
 80045c4:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d038      	beq.n	8004648 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80045de:	e033      	b.n	8004648 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e4:	f003 031c 	and.w	r3, r3, #28
 80045e8:	2208      	movs	r2, #8
 80045ea:	409a      	lsls	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02a      	beq.n	800464a <HAL_DMA_IRQHandler+0x176>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d025      	beq.n	800464a <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 020e 	bic.w	r2, r2, #14
 800460c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f003 021c 	and.w	r2, r3, #28
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	2101      	movs	r1, #1
 800461c:	fa01 f202 	lsl.w	r2, r1, r2
 8004620:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463c:	2b00      	cmp	r3, #0
 800463e:	d004      	beq.n	800464a <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004648:	bf00      	nop
 800464a:	bf00      	nop
}
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40020080 	.word	0x40020080
 8004658:	40020400 	.word	0x40020400
 800465c:	40020000 	.word	0x40020000

08004660 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004676:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	2b00      	cmp	r3, #0
 800467e:	d004      	beq.n	800468a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	f003 021c 	and.w	r2, r3, #28
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d108      	bne.n	80046c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046be:	e007      	b.n	80046d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	60da      	str	r2, [r3, #12]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr
	...

080046dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	4b1c      	ldr	r3, [pc, #112]	; (800475c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d813      	bhi.n	8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046fc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	3b08      	subs	r3, #8
 800470c:	4a14      	ldr	r2, [pc, #80]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800470e:	fba2 2303 	umull	r2, r3, r2, r3
 8004712:	091b      	lsrs	r3, r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e011      	b.n	800473c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	009a      	lsls	r2, r3, #2
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004722:	4413      	add	r3, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3b08      	subs	r3, #8
 8004730:	4a0b      	ldr	r2, [pc, #44]	; (8004760 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	3307      	adds	r3, #7
 800473a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004740:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2201      	movs	r2, #1
 800474a:	409a      	lsls	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	bc80      	pop	{r7}
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40020407 	.word	0x40020407
 8004760:	cccccccd 	.word	0xcccccccd
 8004764:	4002081c 	.word	0x4002081c
 8004768:	40020880 	.word	0x40020880

0800476c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800477c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	461a      	mov	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a08      	ldr	r2, [pc, #32]	; (80047b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004790:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3b01      	subs	r3, #1
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2201      	movs	r2, #1
 800479c:	409a      	lsls	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr
 80047ac:	1000823f 	.word	0x1000823f
 80047b0:	40020940 	.word	0x40020940

080047b4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047c2:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <HAL_FLASH_Program+0x80>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_FLASH_Program+0x1a>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e02d      	b.n	800482a <HAL_FLASH_Program+0x76>
 80047ce:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_FLASH_Program+0x80>)
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_FLASH_Program+0x80>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047de:	f000 f869 	bl	80048b4 <FLASH_WaitForLastOperation>
 80047e2:	4603      	mov	r3, r0
 80047e4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11a      	bne.n	8004822 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d105      	bne.n	80047fe <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80047f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047f6:	68b8      	ldr	r0, [r7, #8]
 80047f8:	f000 f8be 	bl	8004978 <FLASH_Program_DoubleWord>
 80047fc:	e004      	b.n	8004808 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	68b8      	ldr	r0, [r7, #8]
 8004804:	f000 f8de 	bl	80049c4 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800480c:	f000 f852 	bl	80048b4 <FLASH_WaitForLastOperation>
 8004810:	4603      	mov	r3, r0
 8004812:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_FLASH_Program+0x84>)
 8004816:	695a      	ldr	r2, [r3, #20]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	43db      	mvns	r3, r3
 800481c:	4906      	ldr	r1, [pc, #24]	; (8004838 <HAL_FLASH_Program+0x84>)
 800481e:	4013      	ands	r3, r2
 8004820:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004822:	4b04      	ldr	r3, [pc, #16]	; (8004834 <HAL_FLASH_Program+0x80>)
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004828:	7dfb      	ldrb	r3, [r7, #23]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	20000438 	.word	0x20000438
 8004838:	58004000 	.word	0x58004000

0800483c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004842:	2300      	movs	r3, #0
 8004844:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_FLASH_Unlock+0x38>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	da0b      	bge.n	8004866 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_FLASH_Unlock+0x38>)
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <HAL_FLASH_Unlock+0x3c>)
 8004852:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <HAL_FLASH_Unlock+0x38>)
 8004856:	4a09      	ldr	r2, [pc, #36]	; (800487c <HAL_FLASH_Unlock+0x40>)
 8004858:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800485a:	4b06      	ldr	r3, [pc, #24]	; (8004874 <HAL_FLASH_Unlock+0x38>)
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	2b00      	cmp	r3, #0
 8004860:	da01      	bge.n	8004866 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004866:	79fb      	ldrb	r3, [r7, #7]
}
 8004868:	4618      	mov	r0, r3
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	bc80      	pop	{r7}
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	58004000 	.word	0x58004000
 8004878:	45670123 	.word	0x45670123
 800487c:	cdef89ab 	.word	0xcdef89ab

08004880 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_FLASH_Lock+0x30>)
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <HAL_FLASH_Lock+0x30>)
 8004890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004894:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_FLASH_Lock+0x30>)
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	2b00      	cmp	r3, #0
 800489c:	db01      	blt.n	80048a2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80048a2:	79fb      	ldrb	r3, [r7, #7]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bc80      	pop	{r7}
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	58004000 	.word	0x58004000

080048b4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80048bc:	f7fd fa9a 	bl	8001df4 <HAL_GetTick>
 80048c0:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80048c2:	e009      	b.n	80048d8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80048c4:	f7fd fa96 	bl	8001df4 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d801      	bhi.n	80048d8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e047      	b.n	8004968 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80048d8:	4b25      	ldr	r3, [pc, #148]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d0ee      	beq.n	80048c4 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 80048e6:	4b22      	ldr	r3, [pc, #136]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80048f6:	4b1e      	ldr	r3, [pc, #120]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004902:	4013      	ands	r3, r2
 8004904:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <FLASH_WaitForLastOperation+0x6c>
 8004910:	4b17      	ldr	r3, [pc, #92]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 8004912:	699a      	ldr	r2, [r3, #24]
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800491a:	4915      	ldr	r1, [pc, #84]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 800491c:	4313      	orrs	r3, r2
 800491e:	618b      	str	r3, [r1, #24]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <FLASH_WaitForLastOperation+0x80>
 800492a:	4a11      	ldr	r2, [pc, #68]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004932:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00e      	beq.n	8004958 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800493a:	4a0e      	ldr	r2, [pc, #56]	; (8004974 <FLASH_WaitForLastOperation+0xc0>)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e011      	b.n	8004968 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004944:	f7fd fa56 	bl	8001df4 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	429a      	cmp	r2, r3
 8004952:	d801      	bhi.n	8004958 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e007      	b.n	8004968 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <FLASH_WaitForLastOperation+0xbc>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004960:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004964:	d0ee      	beq.n	8004944 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	58004000 	.word	0x58004000
 8004974:	20000438 	.word	0x20000438

08004978 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <FLASH_Program_DoubleWord+0x48>)
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <FLASH_Program_DoubleWord+0x48>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004996:	f3bf 8f6f 	isb	sy
}
 800499a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800499c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a0:	f04f 0200 	mov.w	r2, #0
 80049a4:	f04f 0300 	mov.w	r3, #0
 80049a8:	000a      	movs	r2, r1
 80049aa:	2300      	movs	r3, #0
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	3104      	adds	r1, #4
 80049b0:	4613      	mov	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
}
 80049b4:	bf00      	nop
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	58004000 	.word	0x58004000

080049c4 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	; 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80049ce:	2340      	movs	r3, #64	; 0x40
 80049d0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80049da:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <FLASH_Program_Fast+0x78>)
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <FLASH_Program_Fast+0x78>)
 80049e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80049ec:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 80049ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80049f0:	b672      	cpsid	i
}
 80049f2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	3304      	adds	r3, #4
 8004a00:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3304      	adds	r3, #4
 8004a06:	617b      	str	r3, [r7, #20]
    row_index--;
 8004a08:	7ffb      	ldrb	r3, [r7, #31]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004a0e:	7ffb      	ldrb	r3, [r7, #31]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ef      	bne.n	80049f4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004a14:	bf00      	nop
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <FLASH_Program_Fast+0x78>)
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a22:	d0f8      	beq.n	8004a16 <FLASH_Program_Fast+0x52>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f383 8810 	msr	PRIMASK, r3
}
 8004a2e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004a30:	bf00      	nop
 8004a32:	3724      	adds	r7, #36	; 0x24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bc80      	pop	{r7}
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	58004000 	.word	0x58004000

08004a40 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004a4a:	4b28      	ldr	r3, [pc, #160]	; (8004aec <HAL_FLASHEx_Erase+0xac>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_FLASHEx_Erase+0x16>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e046      	b.n	8004ae4 <HAL_FLASHEx_Erase+0xa4>
 8004a56:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_FLASHEx_Erase+0xac>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004a5c:	4b23      	ldr	r3, [pc, #140]	; (8004aec <HAL_FLASHEx_Erase+0xac>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a66:	f7ff ff25 	bl	80048b4 <FLASH_WaitForLastOperation>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d133      	bne.n	8004adc <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d108      	bne.n	8004a8e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004a7c:	f000 f880 	bl	8004b80 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004a80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a84:	f7ff ff16 	bl	80048b4 <FLASH_WaitForLastOperation>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e024      	b.n	8004ad8 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	e012      	b.n	8004ac4 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004a9e:	68b8      	ldr	r0, [r7, #8]
 8004aa0:	f000 f87e 	bl	8004ba0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aa8:	f7ff ff04 	bl	80048b4 <FLASH_WaitForLastOperation>
 8004aac:	4603      	mov	r3, r0
 8004aae:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	601a      	str	r2, [r3, #0]
          break;
 8004abc:	e00a      	b.n	8004ad4 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60bb      	str	r3, [r7, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	4413      	add	r3, r2
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d3e4      	bcc.n	8004a9e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004ad4:	f000 f8c0 	bl	8004c58 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004ad8:	f000 f87a 	bl	8004bd0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_FLASHEx_Erase+0xac>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]

  return status;
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	20000438 	.word	0x20000438

08004af0 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004af8:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_FLASHEx_Erase_IT+0x14>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e034      	b.n	8004b6e <HAL_FLASHEx_Erase_IT+0x7e>
 8004b04:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004b0a:	4b1b      	ldr	r3, [pc, #108]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a18      	ldr	r2, [pc, #96]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b16:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004b18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b1c:	f7ff feca 	bl	80048b4 <FLASH_WaitForLastOperation>
 8004b20:	4603      	mov	r3, r0
 8004b22:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004b24:	7bfb      	ldrb	r3, [r7, #15]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004b2a:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e01c      	b.n	8004b6c <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x8c>)
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <HAL_FLASHEx_Erase_IT+0x8c>)
 8004b38:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004b3c:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d105      	bne.n	8004b52 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004b4c:	f000 f818 	bl	8004b80 <FLASH_MassErase>
 8004b50:	e00c      	b.n	8004b6c <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b58:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a06      	ldr	r2, [pc, #24]	; (8004b78 <HAL_FLASHEx_Erase_IT+0x88>)
 8004b60:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f81a 	bl	8004ba0 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000438 	.word	0x20000438
 8004b7c:	58004000 	.word	0x58004000

08004b80 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <FLASH_MassErase+0x1c>)
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <FLASH_MassErase+0x1c>)
 8004b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6153      	str	r3, [r2, #20]
#endif
}
 8004b94:	bf00      	nop
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	58004000 	.word	0x58004000

08004ba0 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004ba8:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <FLASH_PageErase+0x2c>)
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	4a05      	ldr	r2, [pc, #20]	; (8004bcc <FLASH_PageErase+0x2c>)
 8004bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	6153      	str	r3, [r2, #20]
#endif
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	58004000 	.word	0x58004000

08004bd0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004bd4:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d117      	bne.n	8004c10 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004be0:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004be6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004bec:	4b19      	ldr	r3, [pc, #100]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a18      	ldr	r2, [pc, #96]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004bf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c02:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a12      	ldr	r2, [pc, #72]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c0e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004c10:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d117      	bne.n	8004c4c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c1c:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a0c      	ldr	r2, [pc, #48]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c26:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004c28:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a06      	ldr	r2, [pc, #24]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c3e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004c40:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <FLASH_FlushCaches+0x84>)
 8004c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c4a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr
 8004c54:	58004000 	.word	0x58004000

08004c58 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <FLASH_AcknowledgePageErase+0x1c>)
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <FLASH_AcknowledgePageErase+0x1c>)
 8004c62:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004c66:	f023 0302 	bic.w	r3, r3, #2
 8004c6a:	6153      	str	r3, [r2, #20]
#endif
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bc80      	pop	{r7}
 8004c72:	4770      	bx	lr
 8004c74:	58004000 	.word	0x58004000

08004c78 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c86:	e140      	b.n	8004f0a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	2101      	movs	r1, #1
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	fa01 f303 	lsl.w	r3, r1, r3
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8132 	beq.w	8004f04 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d005      	beq.n	8004cb8 <HAL_GPIO_Init+0x40>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d130      	bne.n	8004d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cee:	2201      	movs	r2, #1
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	43db      	mvns	r3, r3
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0201 	and.w	r2, r3, #1
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d017      	beq.n	8004d56 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	005b      	lsls	r3, r3, #1
 8004d30:	2203      	movs	r2, #3
 8004d32:	fa02 f303 	lsl.w	r3, r2, r3
 8004d36:	43db      	mvns	r3, r3
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d123      	bne.n	8004daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	08da      	lsrs	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	3208      	adds	r2, #8
 8004d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	08da      	lsrs	r2, r3, #3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3208      	adds	r2, #8
 8004da4:	6939      	ldr	r1, [r7, #16]
 8004da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	2203      	movs	r2, #3
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0203 	and.w	r2, r3, #3
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 808c 	beq.w	8004f04 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004dec:	4a4e      	ldr	r2, [pc, #312]	; (8004f28 <HAL_GPIO_Init+0x2b0>)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	089b      	lsrs	r3, r3, #2
 8004df2:	3302      	adds	r3, #2
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	2207      	movs	r2, #7
 8004e04:	fa02 f303 	lsl.w	r3, r2, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e16:	d00d      	beq.n	8004e34 <HAL_GPIO_Init+0x1bc>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a44      	ldr	r2, [pc, #272]	; (8004f2c <HAL_GPIO_Init+0x2b4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <HAL_GPIO_Init+0x1b8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a43      	ldr	r2, [pc, #268]	; (8004f30 <HAL_GPIO_Init+0x2b8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d101      	bne.n	8004e2c <HAL_GPIO_Init+0x1b4>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e004      	b.n	8004e36 <HAL_GPIO_Init+0x1be>
 8004e2c:	2307      	movs	r3, #7
 8004e2e:	e002      	b.n	8004e36 <HAL_GPIO_Init+0x1be>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <HAL_GPIO_Init+0x1be>
 8004e34:	2300      	movs	r3, #0
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	693a      	ldr	r2, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e46:	4938      	ldr	r1, [pc, #224]	; (8004f28 <HAL_GPIO_Init+0x2b0>)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e54:	4b37      	ldr	r3, [pc, #220]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	4013      	ands	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e78:	4a2e      	ldr	r2, [pc, #184]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	43db      	mvns	r3, r3
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ea2:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eae:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004ece:	4a19      	ldr	r2, [pc, #100]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004efc:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <HAL_GPIO_Init+0x2bc>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3301      	adds	r3, #1
 8004f08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f aeb7 	bne.w	8004c88 <HAL_GPIO_Init+0x10>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	371c      	adds	r7, #28
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	48000400 	.word	0x48000400
 8004f30:	48000800 	.word	0x48000800
 8004f34:	58000800 	.word	0x58000800

08004f38 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b087      	sub	sp, #28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004f46:	e0af      	b.n	80050a8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004f48:	2201      	movs	r2, #1
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	4013      	ands	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 80a2 	beq.w	80050a2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004f5e:	4a59      	ldr	r2, [pc, #356]	; (80050c4 <HAL_GPIO_DeInit+0x18c>)
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	089b      	lsrs	r3, r3, #2
 8004f64:	3302      	adds	r3, #2
 8004f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f6a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	2207      	movs	r2, #7
 8004f76:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f86:	d00d      	beq.n	8004fa4 <HAL_GPIO_DeInit+0x6c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a4f      	ldr	r2, [pc, #316]	; (80050c8 <HAL_GPIO_DeInit+0x190>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <HAL_GPIO_DeInit+0x68>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a4e      	ldr	r2, [pc, #312]	; (80050cc <HAL_GPIO_DeInit+0x194>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d101      	bne.n	8004f9c <HAL_GPIO_DeInit+0x64>
 8004f98:	2302      	movs	r3, #2
 8004f9a:	e004      	b.n	8004fa6 <HAL_GPIO_DeInit+0x6e>
 8004f9c:	2307      	movs	r3, #7
 8004f9e:	e002      	b.n	8004fa6 <HAL_GPIO_DeInit+0x6e>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_GPIO_DeInit+0x6e>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	f002 0203 	and.w	r2, r2, #3
 8004fac:	0092      	lsls	r2, r2, #2
 8004fae:	4093      	lsls	r3, r2
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d136      	bne.n	8005024 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004fb6:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fb8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	43db      	mvns	r3, r3
 8004fc0:	4943      	ldr	r1, [pc, #268]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004fc8:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	493f      	ldr	r1, [pc, #252]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	493b      	ldr	r1, [pc, #236]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004fe8:	4b39      	ldr	r3, [pc, #228]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	4937      	ldr	r1, [pc, #220]	; (80050d0 <HAL_GPIO_DeInit+0x198>)
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	2207      	movs	r2, #7
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005006:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <HAL_GPIO_DeInit+0x18c>)
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	43da      	mvns	r2, r3
 8005016:	482b      	ldr	r0, [pc, #172]	; (80050c4 <HAL_GPIO_DeInit+0x18c>)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	400a      	ands	r2, r1
 800501e:	3302      	adds	r3, #2
 8005020:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	2103      	movs	r1, #3
 800502e:	fa01 f303 	lsl.w	r3, r1, r3
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	08da      	lsrs	r2, r3, #3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3208      	adds	r2, #8
 8005040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	220f      	movs	r2, #15
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	08d2      	lsrs	r2, r2, #3
 8005058:	4019      	ands	r1, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3208      	adds	r2, #8
 800505e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2103      	movs	r1, #3
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	401a      	ands	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	2101      	movs	r1, #1
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	fa01 f303 	lsl.w	r3, r1, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	401a      	ands	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	2103      	movs	r1, #3
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	401a      	ands	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60da      	str	r2, [r3, #12]
    }

    position++;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	3301      	adds	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f47f af49 	bne.w	8004f48 <HAL_GPIO_DeInit+0x10>
  }
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	bc80      	pop	{r7}
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	48000400 	.word	0x48000400
 80050cc:	48000800 	.word	0x48000800
 80050d0:	58000800 	.word	0x58000800

080050d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
 80050e0:	4613      	mov	r3, r2
 80050e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050e4:	787b      	ldrb	r3, [r7, #1]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ea:	887a      	ldrh	r2, [r7, #2]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050f0:	e002      	b.n	80050f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050f2:	887a      	ldrh	r2, [r7, #2]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr
	...

08005104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	88fb      	ldrh	r3, [r7, #6]
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d006      	beq.n	8005128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800511a:	4a05      	ldr	r2, [pc, #20]	; (8005130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	4618      	mov	r0, r3
 8005124:	f005 fb4a 	bl	800a7bc <HAL_GPIO_EXTI_Callback>
  }
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	58000800 	.word	0x58000800

08005134 <LL_RCC_GetUSARTClockSource>:
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	401a      	ands	r2, r3
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	041b      	lsls	r3, r3, #16
 800514c:	4313      	orrs	r3, r2
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <HAL_IRDA_Init>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e041      	b.n	80051ee <HAL_IRDA_Init+0x96>
  }

  /* Check the USART/UART associated to the IRDA handle */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_IRDA_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fd fa4e 	bl	800261c <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	; 0x24
 8005184:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable the Peripheral to update the configuration registers */
  __HAL_IRDA_DISABLE(hirda);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Set the IRDA Communication parameters */
  if (IRDA_SetConfig(hirda) == HAL_ERROR)
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa5e 	bl	8005658 <IRDA_SetConfig>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d101      	bne.n	80051a6 <HAL_IRDA_Init+0x4e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e023      	b.n	80051ee <HAL_IRDA_Init+0x96>
  }

  /* In IRDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80051b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0228 	bic.w	r2, r2, #40	; 0x28
 80051c4:	609a      	str	r2, [r3, #8]

  /* set the UART/USART in IRDA mode */
  hirda->Instance->CR3 |= USART_CR3_IREN;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0202 	orr.w	r2, r2, #2
 80051d4:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_IRDA_ENABLE(hirda);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hirda->gState and hirda->RxState to Ready */
  return (IRDA_CheckIdleState(hirda));
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fb90 	bl	800590c <IRDA_CheckIdleState>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_IRDA_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  */
#endif /* CORE_CM0PLUS */
HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08a      	sub	sp, #40	; 0x28
 80051fa:	af02      	add	r7, sp, #8
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (hirda->gState == HAL_IRDA_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800520a:	2b20      	cmp	r3, #32
 800520c:	d17a      	bne.n	8005304 <HAL_IRDA_Transmit+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <HAL_IRDA_Transmit+0x24>
 8005214:	88fb      	ldrh	r3, [r7, #6]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_IRDA_Transmit+0x28>
    {
      return  HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e073      	b.n	8005306 <HAL_IRDA_Transmit+0x110>
      }
    }
#endif /* CORE_CM0PLUS */

    /* Process Locked */
    __HAL_LOCK(hirda);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_IRDA_Transmit+0x36>
 8005228:	2302      	movs	r3, #2
 800522a:	e06c      	b.n	8005306 <HAL_IRDA_Transmit+0x110>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	645a      	str	r2, [r3, #68]	; 0x44
    hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2221      	movs	r2, #33	; 0x21
 800523e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005240:	f7fc fdd8 	bl	8001df4 <HAL_GetTick>
 8005244:	6178      	str	r0, [r7, #20]

    hirda->TxXferSize = Size;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	841a      	strh	r2, [r3, #32]
    hirda->TxXferCount = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	845a      	strh	r2, [r3, #34]	; 0x22

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800525a:	d108      	bne.n	800526e <HAL_IRDA_Transmit+0x78>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <HAL_IRDA_Transmit+0x78>
    {
      pdata8bits  = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData; /* Derogation R.11.3 */
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e003      	b.n	8005276 <HAL_IRDA_Transmit+0x80>
    }
    else
    {
      pdata8bits  = pData;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	61bb      	str	r3, [r7, #24]
    }

    while (hirda->TxXferCount > 0U)
 8005276:	e02a      	b.n	80052ce <HAL_IRDA_Transmit+0xd8>
    {
      hirda->TxXferCount--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	845a      	strh	r2, [r3, #34]	; 0x22

      if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fb80 	bl	8005996 <IRDA_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_IRDA_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e032      	b.n	8005306 <HAL_IRDA_Transmit+0x110>
      }
      if (pdata8bits == NULL)
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10b      	bne.n	80052be <HAL_IRDA_Transmit+0xc8>
      {
        hirda->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	881b      	ldrh	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	3302      	adds	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e007      	b.n	80052ce <HAL_IRDA_Transmit+0xd8>
      }
      else
      {
        hirda->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	781a      	ldrb	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
    while (hirda->TxXferCount > 0U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1cf      	bne.n	8005278 <HAL_IRDA_Transmit+0x82>
      }
    }

    if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2200      	movs	r2, #0
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 fb57 	bl	8005996 <IRDA_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <HAL_IRDA_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e009      	b.n	8005306 <HAL_IRDA_Transmit+0x110>
    }

    /* At end of Tx process, restore hirda->gState to Ready */
    hirda->gState = HAL_IRDA_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hirda);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <HAL_IRDA_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_IRDA_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  */
#endif /* CORE_CM0PLUS */
HAL_StatusTypeDef HAL_IRDA_Receive_IT(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b20      	cmp	r3, #32
 8005322:	d17a      	bne.n	800541a <HAL_IRDA_Receive_IT+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_IRDA_Receive_IT+0x22>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d101      	bne.n	8005334 <HAL_IRDA_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e073      	b.n	800541c <HAL_IRDA_Receive_IT+0x10e>
      }
    }
#endif /* CORE_CM0PLUS */

    /* Process Locked */
    __HAL_LOCK(hirda);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_IRDA_Receive_IT+0x34>
 800533e:	2302      	movs	r3, #2
 8005340:	e06c      	b.n	800541c <HAL_IRDA_Receive_IT+0x10e>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    hirda->pRxBuffPtr = pData;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	625a      	str	r2, [r3, #36]	; 0x24
    hirda->RxXferSize = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	851a      	strh	r2, [r3, #40]	; 0x28
    hirda->RxXferCount = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Computation of the mask to apply to the RDR register
       of the UART associated to the IRDA */
    IRDA_MASK_COMPUTATION(hirda);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005364:	d10c      	bne.n	8005380 <HAL_IRDA_Receive_IT+0x72>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <HAL_IRDA_Receive_IT+0x6a>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005374:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005376:	e027      	b.n	80053c8 <HAL_IRDA_Receive_IT+0xba>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	22ff      	movs	r2, #255	; 0xff
 800537c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800537e:	e023      	b.n	80053c8 <HAL_IRDA_Receive_IT+0xba>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <HAL_IRDA_Receive_IT+0x92>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d103      	bne.n	8005398 <HAL_IRDA_Receive_IT+0x8a>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	22ff      	movs	r2, #255	; 0xff
 8005394:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005396:	e017      	b.n	80053c8 <HAL_IRDA_Receive_IT+0xba>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	227f      	movs	r2, #127	; 0x7f
 800539c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800539e:	e013      	b.n	80053c8 <HAL_IRDA_Receive_IT+0xba>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053a8:	d10b      	bne.n	80053c2 <HAL_IRDA_Receive_IT+0xb4>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <HAL_IRDA_Receive_IT+0xac>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	227f      	movs	r2, #127	; 0x7f
 80053b6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80053b8:	e006      	b.n	80053c8 <HAL_IRDA_Receive_IT+0xba>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	223f      	movs	r2, #63	; 0x3f
 80053be:	859a      	strh	r2, [r3, #44]	; 0x2c
 80053c0:	e002      	b.n	80053c8 <HAL_IRDA_Receive_IT+0xba>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	859a      	strh	r2, [r3, #44]	; 0x2c

    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	645a      	str	r2, [r3, #68]	; 0x44
    hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2222      	movs	r2, #34	; 0x22
 80053d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hirda);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if (hirda->Init.Parity != IRDA_PARITY_NONE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d008      	beq.n	80053f6 <HAL_IRDA_Receive_IT+0xe8>
    {
      /* Enable the IRDA Parity Error and Data Register not empty Interrupts */
      SET_BIT(hirda->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e007      	b.n	8005406 <HAL_IRDA_Receive_IT+0xf8>
    }
    else
    {
      /* Enable the IRDA Data Register not empty Interrupts */
      SET_BIT(hirda->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0220 	orr.w	r2, r2, #32
 8005404:	601a      	str	r2, [r3, #0]
    }

    /* Enable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e000      	b.n	800541c <HAL_IRDA_Receive_IT+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800541a:	2302      	movs	r3, #2
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	bc80      	pop	{r7}
 8005424:	4770      	bx	lr
	...

08005428 <HAL_IRDA_IRQHandler>:
  * @param hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b088      	sub	sp, #32
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(hirda->Instance->ISR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its;
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	617b      	str	r3, [r7, #20]
  if (errorflags == 0U)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10d      	bne.n	800546a <HAL_IRDA_IRQHandler+0x42>
  {
    /* IRDA in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d008      	beq.n	800546a <HAL_IRDA_IRQHandler+0x42>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	f003 0320 	and.w	r3, r3, #32
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_IRDA_IRQHandler+0x42>
    {
      IRDA_Receive_IT(hirda);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fb74 	bl	8005b50 <IRDA_Receive_IT>
      return;
 8005468:	e0df      	b.n	800562a <HAL_IRDA_IRQHandler+0x202>
    }
  }

  /* If some errors occur */
  cr3its = READ_REG(hirda->Instance->CR3);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	613b      	str	r3, [r7, #16]
  if ((errorflags != 0U)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80bb 	beq.w	80055f0 <HAL_IRDA_IRQHandler+0x1c8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d105      	bne.n	8005490 <HAL_IRDA_IRQHandler+0x68>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800548a:	2b00      	cmp	r3, #0
 800548c:	f000 80b0 	beq.w	80055f0 <HAL_IRDA_IRQHandler+0x1c8>
  {
    /* IRDA parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00e      	beq.n	80054b8 <HAL_IRDA_IRQHandler+0x90>
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <HAL_IRDA_IRQHandler+0x90>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_PEF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2201      	movs	r2, #1
 80054aa:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0201 	orr.w	r2, r3, #1
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00e      	beq.n	80054e0 <HAL_IRDA_IRQHandler+0xb8>
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_IRDA_IRQHandler+0xb8>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_FEF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2202      	movs	r2, #2
 80054d2:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	f043 0204 	orr.w	r2, r3, #4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00e      	beq.n	8005508 <HAL_IRDA_IRQHandler+0xe0>
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_IRDA_IRQHandler+0xe0>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_NEF);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2204      	movs	r2, #4
 80054fa:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	f043 0202 	orr.w	r2, r3, #2
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d013      	beq.n	800553a <HAL_IRDA_IRQHandler+0x112>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0320 	and.w	r3, r3, #32
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <HAL_IRDA_IRQHandler+0xfe>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_IRDA_IRQHandler+0x112>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_OREF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2208      	movs	r2, #8
 800552c:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005532:	f043 0208 	orr.w	r2, r3, #8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call IRDA Error Call back function if need be --------------------------*/
    if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553e:	2b00      	cmp	r3, #0
 8005540:	d072      	beq.n	8005628 <HAL_IRDA_IRQHandler+0x200>
    {
      /* IRDA in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d007      	beq.n	800555c <HAL_IRDA_IRQHandler+0x134>
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <HAL_IRDA_IRQHandler+0x134>
      {
        IRDA_Receive_IT(hirda);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fafa 	bl	8005b50 <IRDA_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = hirda->ErrorCode;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005560:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d004      	beq.n	800557a <HAL_IRDA_IRQHandler+0x152>
          ((errorcode & HAL_IRDA_ERROR_ORE) != 0U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8005576:	2b00      	cmp	r3, #0
 8005578:	d031      	beq.n	80055de <HAL_IRDA_IRQHandler+0x1b6>
      {
        /* Blocking error : transfer is aborted
           Set the IRDA state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        IRDA_EndRxTransfer(hirda);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 fa53 	bl	8005a26 <IRDA_EndRxTransfer>

        /* Disable the IRDA DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558a:	2b40      	cmp	r3, #64	; 0x40
 800558c:	d123      	bne.n	80055d6 <HAL_IRDA_IRQHandler+0x1ae>
        {
          CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800559c:	609a      	str	r2, [r3, #8]

          /* Abort the IRDA DMA Rx channel */
          if (hirda->hdmarx != NULL)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d013      	beq.n	80055ce <HAL_IRDA_IRQHandler+0x1a6>
          {
            /* Set the IRDA DMA Abort callback :
               will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
            hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055aa:	4a21      	ldr	r2, [pc, #132]	; (8005630 <HAL_IRDA_IRQHandler+0x208>)
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe ff2e 	bl	8004414 <HAL_DMA_Abort_IT>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d016      	beq.n	80055ec <HAL_IRDA_IRQHandler+0x1c4>
            {
              /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
              hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80055cc:	e00e      	b.n	80055ec <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
            /* Call registered user error callback */
            hirda->ErrorCallback(hirda);
#else
            /* Call legacy weak user error callback */
            HAL_IRDA_ErrorCallback(hirda);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f839 	bl	8005646 <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80055d4:	e00a      	b.n	80055ec <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
          /* Call registered user error callback */
          hirda->ErrorCallback(hirda);
#else
          /* Call legacy weak user error callback */
          HAL_IRDA_ErrorCallback(hirda);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f835 	bl	8005646 <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80055dc:	e006      	b.n	80055ec <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
        /* Call registered user error callback */
        hirda->ErrorCallback(hirda);
#else
        /* Call legacy weak user error callback */
        HAL_IRDA_ErrorCallback(hirda);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f831 	bl	8005646 <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80055ea:	e01d      	b.n	8005628 <HAL_IRDA_IRQHandler+0x200>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 80055ec:	bf00      	nop
    return;
 80055ee:	e01b      	b.n	8005628 <HAL_IRDA_IRQHandler+0x200>

  } /* End if some error occurs */

  /* IRDA in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_IRDA_IRQHandler+0x1e4>
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_IRDA_IRQHandler+0x1e4>
  {
    IRDA_Transmit_IT(hirda);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fa3e 	bl	8005a86 <IRDA_Transmit_IT>
    return;
 800560a:	e00e      	b.n	800562a <HAL_IRDA_IRQHandler+0x202>
  }

  /* IRDA in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_IRDA_IRQHandler+0x202>
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_IRDA_IRQHandler+0x202>
  {
    IRDA_EndTransmit_IT(hirda);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fa7f 	bl	8005b24 <IRDA_EndTransmit_IT>
    return;
 8005626:	e000      	b.n	800562a <HAL_IRDA_IRQHandler+0x202>
    return;
 8005628:	bf00      	nop
  }

}
 800562a:	3720      	adds	r7, #32
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	08005a5f 	.word	0x08005a5f

08005634 <HAL_IRDA_TxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxCpltCallback can be implemented in the user file.
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	bc80      	pop	{r7}
 8005644:	4770      	bx	lr

08005646 <HAL_IRDA_ErrorCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_ErrorCallback can be implemented in the user file.
   */
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <IRDA_SetConfig>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  IRDA_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	74bb      	strb	r3, [r7, #18]
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the IRDA Word Length, Parity and transfer Mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	431a      	orrs	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b9e      	ldr	r3, [pc, #632]	; (80058f8 <IRDA_SetConfig+0x2a0>)
 800567e:	4013      	ands	r3, r2
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	6979      	ldr	r1, [r7, #20]
 8005686:	430b      	orrs	r3, r1
 8005688:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f023 0204 	bic.w	r2, r3, #4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8adb      	ldrh	r3, [r3, #22]
 8005698:	4619      	mov	r1, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]

  /*--------------------- USART clock PRESC Configuration ----------------*/
  /* Configure
  * - IRDA Clock Prescaler: set PRESCALER according to hirda->Init.ClockPrescaler value */
  MODIFY_REG(hirda->Instance->PRESC, USART_PRESC_PRESCALER, hirda->Init.ClockPrescaler);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	f023 010f 	bic.w	r1, r3, #15
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699a      	ldr	r2, [r3, #24]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART GTPR Configuration ----------------------*/
  MODIFY_REG(hirda->Instance->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)hirda->Init.Prescaler);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	7d1b      	ldrb	r3, [r3, #20]
 80056c6:	4619      	mov	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	430a      	orrs	r2, r1
 80056ce:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART BRR Configuration -----------------------*/
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a89      	ldr	r2, [pc, #548]	; (80058fc <IRDA_SetConfig+0x2a4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d121      	bne.n	800571e <IRDA_SetConfig+0xc6>
 80056da:	2003      	movs	r0, #3
 80056dc:	f7ff fd2a 	bl	8005134 <LL_RCC_GetUSARTClockSource>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d816      	bhi.n	8005718 <IRDA_SetConfig+0xc0>
 80056ea:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <IRDA_SetConfig+0x98>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005701 	.word	0x08005701
 80056f4:	0800570d 	.word	0x0800570d
 80056f8:	08005707 	.word	0x08005707
 80056fc:	08005713 	.word	0x08005713
 8005700:	2301      	movs	r3, #1
 8005702:	74fb      	strb	r3, [r7, #19]
 8005704:	e047      	b.n	8005796 <IRDA_SetConfig+0x13e>
 8005706:	2302      	movs	r3, #2
 8005708:	74fb      	strb	r3, [r7, #19]
 800570a:	e044      	b.n	8005796 <IRDA_SetConfig+0x13e>
 800570c:	2304      	movs	r3, #4
 800570e:	74fb      	strb	r3, [r7, #19]
 8005710:	e041      	b.n	8005796 <IRDA_SetConfig+0x13e>
 8005712:	2310      	movs	r3, #16
 8005714:	74fb      	strb	r3, [r7, #19]
 8005716:	e03e      	b.n	8005796 <IRDA_SetConfig+0x13e>
 8005718:	2320      	movs	r3, #32
 800571a:	74fb      	strb	r3, [r7, #19]
 800571c:	e03b      	b.n	8005796 <IRDA_SetConfig+0x13e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a77      	ldr	r2, [pc, #476]	; (8005900 <IRDA_SetConfig+0x2a8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d134      	bne.n	8005792 <IRDA_SetConfig+0x13a>
 8005728:	200c      	movs	r0, #12
 800572a:	f7ff fd03 	bl	8005134 <LL_RCC_GetUSARTClockSource>
 800572e:	4603      	mov	r3, r0
 8005730:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005734:	2b0c      	cmp	r3, #12
 8005736:	d829      	bhi.n	800578c <IRDA_SetConfig+0x134>
 8005738:	a201      	add	r2, pc, #4	; (adr r2, 8005740 <IRDA_SetConfig+0xe8>)
 800573a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573e:	bf00      	nop
 8005740:	08005775 	.word	0x08005775
 8005744:	0800578d 	.word	0x0800578d
 8005748:	0800578d 	.word	0x0800578d
 800574c:	0800578d 	.word	0x0800578d
 8005750:	08005781 	.word	0x08005781
 8005754:	0800578d 	.word	0x0800578d
 8005758:	0800578d 	.word	0x0800578d
 800575c:	0800578d 	.word	0x0800578d
 8005760:	0800577b 	.word	0x0800577b
 8005764:	0800578d 	.word	0x0800578d
 8005768:	0800578d 	.word	0x0800578d
 800576c:	0800578d 	.word	0x0800578d
 8005770:	08005787 	.word	0x08005787
 8005774:	2300      	movs	r3, #0
 8005776:	74fb      	strb	r3, [r7, #19]
 8005778:	e00d      	b.n	8005796 <IRDA_SetConfig+0x13e>
 800577a:	2302      	movs	r3, #2
 800577c:	74fb      	strb	r3, [r7, #19]
 800577e:	e00a      	b.n	8005796 <IRDA_SetConfig+0x13e>
 8005780:	2304      	movs	r3, #4
 8005782:	74fb      	strb	r3, [r7, #19]
 8005784:	e007      	b.n	8005796 <IRDA_SetConfig+0x13e>
 8005786:	2310      	movs	r3, #16
 8005788:	74fb      	strb	r3, [r7, #19]
 800578a:	e004      	b.n	8005796 <IRDA_SetConfig+0x13e>
 800578c:	2320      	movs	r3, #32
 800578e:	74fb      	strb	r3, [r7, #19]
 8005790:	e001      	b.n	8005796 <IRDA_SetConfig+0x13e>
 8005792:	2320      	movs	r3, #32
 8005794:	74fb      	strb	r3, [r7, #19]
  tmpreg =   0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
  switch (clocksource)
 800579a:	7cfb      	ldrb	r3, [r7, #19]
 800579c:	2b10      	cmp	r3, #16
 800579e:	f200 8094 	bhi.w	80058ca <IRDA_SetConfig+0x272>
 80057a2:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <IRDA_SetConfig+0x150>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057ed 	.word	0x080057ed
 80057ac:	0800581b 	.word	0x0800581b
 80057b0:	08005849 	.word	0x08005849
 80057b4:	080058cb 	.word	0x080058cb
 80057b8:	08005871 	.word	0x08005871
 80057bc:	080058cb 	.word	0x080058cb
 80057c0:	080058cb 	.word	0x080058cb
 80057c4:	080058cb 	.word	0x080058cb
 80057c8:	080058cb 	.word	0x080058cb
 80057cc:	080058cb 	.word	0x080058cb
 80057d0:	080058cb 	.word	0x080058cb
 80057d4:	080058cb 	.word	0x080058cb
 80057d8:	080058cb 	.word	0x080058cb
 80057dc:	080058cb 	.word	0x080058cb
 80057e0:	080058cb 	.word	0x080058cb
 80057e4:	080058cb 	.word	0x080058cb
 80057e8:	0800589f 	.word	0x0800589f
  {
    case IRDA_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f001 fa32 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 80057f0:	60f8      	str	r0, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	4a43      	ldr	r2, [pc, #268]	; (8005904 <IRDA_SetConfig+0x2ac>)
 80057f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057fc:	461a      	mov	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	fbb3 f2f2 	udiv	r2, r3, r2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	441a      	add	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	fbb2 f3f3 	udiv	r3, r2, r3
 8005814:	b29b      	uxth	r3, r3
 8005816:	617b      	str	r3, [r7, #20]
      break;
 8005818:	e05a      	b.n	80058d0 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800581a:	f001 fa2d 	bl	8006c78 <HAL_RCC_GetPCLK2Freq>
 800581e:	60f8      	str	r0, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	4a37      	ldr	r2, [pc, #220]	; (8005904 <IRDA_SetConfig+0x2ac>)
 8005826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800582a:	461a      	mov	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005842:	b29b      	uxth	r3, r3
 8005844:	617b      	str	r3, [r7, #20]
      break;
 8005846:	e043      	b.n	80058d0 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_HSI:
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(HSI_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	4a2d      	ldr	r2, [pc, #180]	; (8005904 <IRDA_SetConfig+0x2ac>)
 800584e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005852:	461a      	mov	r2, r3
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <IRDA_SetConfig+0x2b0>)
 8005856:	fbb3 f2f2 	udiv	r2, r3, r2
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	441a      	add	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	fbb2 f3f3 	udiv	r3, r2, r3
 800586a:	b29b      	uxth	r3, r3
 800586c:	617b      	str	r3, [r7, #20]
      break;
 800586e:	e02f      	b.n	80058d0 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005870:	f001 f93c 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8005874:	60f8      	str	r0, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	4a22      	ldr	r2, [pc, #136]	; (8005904 <IRDA_SetConfig+0x2ac>)
 800587c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005880:	461a      	mov	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	fbb3 f2f2 	udiv	r2, r3, r2
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	441a      	add	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	fbb2 f3f3 	udiv	r3, r2, r3
 8005898:	b29b      	uxth	r3, r3
 800589a:	617b      	str	r3, [r7, #20]
      break;
 800589c:	e018      	b.n	80058d0 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_LSE:
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16((uint32_t)LSE_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	4a18      	ldr	r2, [pc, #96]	; (8005904 <IRDA_SetConfig+0x2ac>)
 80058a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80058ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	441a      	add	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	617b      	str	r3, [r7, #20]
      break;
 80058c8:	e002      	b.n	80058d0 <IRDA_SetConfig+0x278>
    default:
      ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	74bb      	strb	r3, [r7, #18]
      break;
 80058ce:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d908      	bls.n	80058e8 <IRDA_SetConfig+0x290>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d204      	bcs.n	80058e8 <IRDA_SetConfig+0x290>
  {
    hirda->Instance->BRR = tmpreg;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	60da      	str	r2, [r3, #12]
 80058e6:	e001      	b.n	80058ec <IRDA_SetConfig+0x294>
  }
  else
  {
    ret = HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	74bb      	strb	r3, [r7, #18]
  }

  return ret;
 80058ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	efffe9f3 	.word	0xefffe9f3
 80058fc:	40013800 	.word	0x40013800
 8005900:	40004400 	.word	0x40004400
 8005904:	0801eaec 	.word	0x0801eaec
 8005908:	00f42400 	.word	0x00f42400

0800590c <IRDA_CheckIdleState>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_CheckIdleState(IRDA_HandleTypeDef *hirda)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af02      	add	r7, sp, #8
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the IRDA ErrorCode */
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800591a:	f7fc fa6b 	bl	8001df4 <HAL_GetTick>
 800591e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b08      	cmp	r3, #8
 800592c:	d10e      	bne.n	800594c <IRDA_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_TEACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 800592e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f82a 	bl	8005996 <IRDA_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <IRDA_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e020      	b.n	800598e <IRDA_CheckIdleState+0x82>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0304 	and.w	r3, r3, #4
 8005956:	2b04      	cmp	r3, #4
 8005958:	d10e      	bne.n	8005978 <IRDA_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_REACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 800595a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f814 	bl	8005996 <IRDA_WaitOnFlagUntilTimeout>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <IRDA_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e00a      	b.n	800598e <IRDA_CheckIdleState+0x82>
    }
  }

  /* Initialize the IRDA state*/
  hirda->gState  = HAL_IRDA_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c
  hirda->RxState = HAL_IRDA_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Process Unlocked */
  __HAL_UNLOCK(hirda);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <IRDA_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 80059a6:	e02a      	b.n	80059fe <IRDA_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d026      	beq.n	80059fe <IRDA_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b0:	f7fc fa20 	bl	8001df4 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	69ba      	ldr	r2, [r7, #24]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <IRDA_WaitOnFlagUntilTimeout+0x30>
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d11b      	bne.n	80059fe <IRDA_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	609a      	str	r2, [r3, #8]

        hirda->gState  = HAL_IRDA_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	63da      	str	r2, [r3, #60]	; 0x3c
        hirda->RxState = HAL_IRDA_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hirda);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e00f      	b.n	8005a1e <IRDA_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4013      	ands	r3, r2
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	bf0c      	ite	eq
 8005a0e:	2301      	moveq	r3, #1
 8005a10:	2300      	movne	r3, #0
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d0c5      	beq.n	80059a8 <IRDA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <IRDA_EndRxTransfer>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a3c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore hirda->RxState to Ready */
  hirda->RxState = HAL_IRDA_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <IRDA_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b084      	sub	sp, #16
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)(hdma->Parent);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	60fb      	str	r3, [r7, #12]
  hirda->RxXferCount = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	855a      	strh	r2, [r3, #42]	; 0x2a
  hirda->TxXferCount = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	845a      	strh	r2, [r3, #34]	; 0x22
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered user error callback */
  hirda->ErrorCallback(hirda);
#else
  /* Call legacy weak user error callback */
  HAL_IRDA_ErrorCallback(hirda);
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff fde4 	bl	8005646 <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <IRDA_Transmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b085      	sub	sp, #20
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a92:	2b21      	cmp	r3, #33	; 0x21
 8005a94:	d141      	bne.n	8005b1a <IRDA_Transmit_IT+0x94>
  {
    if (hirda->TxXferCount == 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d110      	bne.n	8005ac2 <IRDA_Transmit_IT+0x3c>
    {
      /* Disable the IRDA Transmit Data Register Empty Interrupt */
      CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aae:	601a      	str	r2, [r3, #0]

      /* Enable the IRDA Transmit Complete Interrupt */
      SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005abe:	601a      	str	r2, [r3, #0]
        hirda->pTxBuffPtr++;
      }
      hirda->TxXferCount--;
    }
  }
}
 8005ac0:	e02b      	b.n	8005b1a <IRDA_Transmit_IT+0x94>
      if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aca:	d114      	bne.n	8005af6 <IRDA_Transmit_IT+0x70>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d110      	bne.n	8005af6 <IRDA_Transmit_IT+0x70>
        tmp = (const uint16_t *) hirda->pTxBuffPtr; /* Derogation R.11.3 */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	60fb      	str	r3, [r7, #12]
        hirda->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae8:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr += 2U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	61da      	str	r2, [r3, #28]
 8005af4:	e00a      	b.n	8005b0c <IRDA_Transmit_IT+0x86>
        hirda->Instance->TDR = (uint8_t)(*hirda->pTxBuffPtr & 0xFFU);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	781a      	ldrb	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	61da      	str	r2, [r3, #28]
      hirda->TxXferCount--;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	3b01      	subs	r3, #1
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bc80      	pop	{r7}
 8005b22:	4770      	bx	lr

08005b24 <IRDA_EndTransmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Disable the IRDA Transmit Complete Interrupt */
  CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore hirda->gState to Ready */
  hirda->gState = HAL_IRDA_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered Tx complete callback */
  hirda->TxCpltCallback(hirda);
#else
  /* Call legacy weak Tx complete callback */
  HAL_IRDA_TxCpltCallback(hirda);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fd76 	bl	8005634 <HAL_IRDA_TxCpltCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <IRDA_Receive_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = hirda->Mask;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b5c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	2b22      	cmp	r3, #34	; 0x22
 8005b64:	d14c      	bne.n	8005c00 <IRDA_Receive_IT+0xb0>
  {
    uhdata = (uint16_t) READ_REG(hirda->Instance->RDR);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	81bb      	strh	r3, [r7, #12]
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b76:	d112      	bne.n	8005b9e <IRDA_Receive_IT+0x4e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10e      	bne.n	8005b9e <IRDA_Receive_IT+0x4e>
    {
      tmp = (uint16_t *) hirda->pRxBuffPtr; /* Derogation R.11.3 */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b86:	89ba      	ldrh	r2, [r7, #12]
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	801a      	strh	r2, [r3, #0]
      hirda->pRxBuffPtr  += 2U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c9a      	adds	r2, r3, #2
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b9c:	e00d      	b.n	8005bba <IRDA_Receive_IT+0x6a>
    }
    else
    {
      *hirda->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b9e:	89bb      	ldrh	r3, [r7, #12]
 8005ba0:	b2d9      	uxtb	r1, r3
 8005ba2:	89fb      	ldrh	r3, [r7, #14]
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	400a      	ands	r2, r1
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
      hirda->pRxBuffPtr++;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	1c5a      	adds	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    hirda->RxXferCount--;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hirda->RxXferCount == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d11e      	bne.n	8005c10 <IRDA_Receive_IT+0xc0>
    {
      /* Disable the IRDA Parity Error Interrupt and RXNE interrupt */
      CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005be0:	601a      	str	r2, [r3, #0]

      /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0201 	bic.w	r2, r2, #1
 8005bf0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore hirda->RxState to Ready */
      hirda->RxState = HAL_IRDA_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
      /* Call registered Rx complete callback */
      hirda->RxCpltCallback(hirda);
#else
      /* Call legacy weak Rx complete callback */
      HAL_IRDA_RxCpltCallback(hirda);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fb fde9 	bl	80017d0 <HAL_IRDA_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
  }
}
 8005bfe:	e007      	b.n	8005c10 <IRDA_Receive_IT+0xc0>
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0208 	orr.w	r2, r2, #8
 8005c0e:	619a      	str	r2, [r3, #24]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a03      	ldr	r2, [pc, #12]	; (8005c30 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr
 8005c30:	58000400 	.word	0x58000400

08005c34 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <HAL_PWREx_GetVoltageRange+0x14>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc80      	pop	{r7}
 8005c46:	4770      	bx	lr
 8005c48:	58000400 	.word	0x58000400

08005c4c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c5c:	d101      	bne.n	8005c62 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bc80      	pop	{r7}
 8005c6a:	4770      	bx	lr
 8005c6c:	58000400 	.word	0x58000400

08005c70 <LL_RCC_HSE_EnableTcxo>:
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c82:	6013      	str	r3, [r2, #0]
}
 8005c84:	bf00      	nop
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <LL_RCC_HSE_DisableTcxo>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c9e:	6013      	str	r3, [r2, #0]
}
 8005ca0:	bf00      	nop
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005ca8:	b480      	push	{r7}
 8005caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cba:	d101      	bne.n	8005cc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e000      	b.n	8005cc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <LL_RCC_HSE_Enable>:
{
 8005cca:	b480      	push	{r7}
 8005ccc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cdc:	6013      	str	r3, [r2, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <LL_RCC_HSE_Disable>:
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf8:	6013      	str	r3, [r2, #0]
}
 8005cfa:	bf00      	nop
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr

08005d02 <LL_RCC_HSE_IsReady>:
{
 8005d02:	b480      	push	{r7}
 8005d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d14:	d101      	bne.n	8005d1a <LL_RCC_HSE_IsReady+0x18>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <LL_RCC_HSE_IsReady+0x1a>
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <LL_RCC_HSI_Enable>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bc80      	pop	{r7}
 8005d3e:	4770      	bx	lr

08005d40 <LL_RCC_HSI_Disable>:
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d52:	6013      	str	r3, [r2, #0]
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr

08005d5c <LL_RCC_HSI_IsReady>:
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6e:	d101      	bne.n	8005d74 <LL_RCC_HSI_IsReady+0x18>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <LL_RCC_HSI_IsReady+0x1a>
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <LL_RCC_HSI_SetCalibTrimming>:
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	061b      	lsls	r3, r3, #24
 8005d94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	604b      	str	r3, [r1, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <LL_RCC_LSE_IsReady>:
{
 8005da6:	b480      	push	{r7}
 8005da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d101      	bne.n	8005dbe <LL_RCC_LSE_IsReady+0x18>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <LL_RCC_LSE_IsReady+0x1a>
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bc80      	pop	{r7}
 8005dc6:	4770      	bx	lr

08005dc8 <LL_RCC_LSI_Enable>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dd8:	f043 0301 	orr.w	r3, r3, #1
 8005ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005de0:	bf00      	nop
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_LSI_Disable>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df8:	f023 0301 	bic.w	r3, r3, #1
 8005dfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e00:	bf00      	nop
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bc80      	pop	{r7}
 8005e06:	4770      	bx	lr

08005e08 <LL_RCC_LSI_IsReady>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8005e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d101      	bne.n	8005e20 <LL_RCC_LSI_IsReady+0x18>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <LL_RCC_LSI_IsReady+0x1a>
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <LL_RCC_MSI_Enable>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e38:	f043 0301 	orr.w	r3, r3, #1
 8005e3c:	6013      	str	r3, [r2, #0]
}
 8005e3e:	bf00      	nop
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bc80      	pop	{r7}
 8005e44:	4770      	bx	lr

08005e46 <LL_RCC_MSI_Disable>:
{
 8005e46:	b480      	push	{r7}
 8005e48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e54:	f023 0301 	bic.w	r3, r3, #1
 8005e58:	6013      	str	r3, [r2, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr

08005e62 <LL_RCC_MSI_IsReady>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0302 	and.w	r3, r3, #2
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d101      	bne.n	8005e78 <LL_RCC_MSI_IsReady+0x16>
 8005e74:	2301      	movs	r3, #1
 8005e76:	e000      	b.n	8005e7a <LL_RCC_MSI_IsReady+0x18>
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005e82:	b480      	push	{r7}
 8005e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d101      	bne.n	8005e98 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr

08005ea2 <LL_RCC_MSI_GetRange>:
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr

08005eb8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <LL_RCC_SetSysClkSource>:
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f023 0203 	bic.w	r2, r3, #3
 8005f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	608b      	str	r3, [r1, #8]
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bc80      	pop	{r7}
 8005f1c:	4770      	bx	lr

08005f1e <LL_RCC_GetSysClkSource>:
{
 8005f1e:	b480      	push	{r7}
 8005f20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 030c 	and.w	r3, r3, #12
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <LL_RCC_SetAHBPrescaler>:
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	608b      	str	r3, [r1, #8]
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <LL_RCC_SetAHB3Prescaler>:
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005f6a:	f023 020f 	bic.w	r2, r3, #15
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	091b      	lsrs	r3, r3, #4
 8005f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <LL_RCC_SetAPB1Prescaler>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	608b      	str	r3, [r1, #8]
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <LL_RCC_SetAPB2Prescaler>:
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	608b      	str	r3, [r1, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bc80      	pop	{r7}
 8005fd0:	4770      	bx	lr

08005fd2 <LL_RCC_GetAHBPrescaler>:
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <LL_RCC_GetAHB3Prescaler>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <LL_RCC_GetAPB1Prescaler>:
{
 8006002:	b480      	push	{r7}
 8006004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006010:	4618      	mov	r0, r3
 8006012:	46bd      	mov	sp, r7
 8006014:	bc80      	pop	{r7}
 8006016:	4770      	bx	lr

08006018 <LL_RCC_GetAPB2Prescaler>:
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800601c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006026:	4618      	mov	r0, r3
 8006028:	46bd      	mov	sp, r7
 800602a:	bc80      	pop	{r7}
 800602c:	4770      	bx	lr

0800602e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800603c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006040:	6013      	str	r3, [r2, #0]
}
 8006042:	bf00      	nop
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr

0800604a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800604a:	b480      	push	{r7}
 800604c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800604e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006058:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800605c:	6013      	str	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006066:	b480      	push	{r7}
 8006068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800606a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006078:	d101      	bne.n	800607e <LL_RCC_PLL_IsReady+0x18>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <LL_RCC_PLL_IsReady+0x1a>
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800608c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006098:	4618      	mov	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	bc80      	pop	{r7}
 800609e:	4770      	bx	lr

080060a0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80060a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bc80      	pop	{r7}
 80060b4:	4770      	bx	lr

080060b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80060b6:	b480      	push	{r7}
 80060b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80060ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f003 0303 	and.w	r3, r3, #3
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	bc80      	pop	{r7}
 80060e0:	4770      	bx	lr

080060e2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80060e2:	b480      	push	{r7}
 80060e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80060e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060f4:	d101      	bne.n	80060fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800610c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006118:	d101      	bne.n	800611e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800612c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800613a:	d101      	bne.n	8006140 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800614a:	b480      	push	{r7}
 800614c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800614e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800615c:	d101      	bne.n	8006162 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr

0800616c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e38b      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617e:	f7ff fece 	bl	8005f1e <LL_RCC_GetSysClkSource>
 8006182:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006184:	f7ff ffa2 	bl	80060cc <LL_RCC_PLL_GetMainSource>
 8006188:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 80c9 	beq.w	800632a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_RCC_OscConfig+0x3e>
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b0c      	cmp	r3, #12
 80061a2:	d17b      	bne.n	800629c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d178      	bne.n	800629c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061aa:	f7ff fe5a 	bl	8005e62 <LL_RCC_MSI_IsReady>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <HAL_RCC_OscConfig+0x54>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e36a      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0308 	and.w	r3, r3, #8
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_RCC_OscConfig+0x72>
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061dc:	e006      	b.n	80061ec <HAL_RCC_OscConfig+0x80>
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e6:	091b      	lsrs	r3, r3, #4
 80061e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d222      	bcs.n	8006236 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fd51 	bl	8006c9c <RCC_SetFlashLatencyFromMSIRange>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e348      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800620e:	f043 0308 	orr.w	r3, r3, #8
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006226:	4313      	orrs	r3, r2
 8006228:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fe4e 	bl	8005ed0 <LL_RCC_MSI_SetCalibTrimming>
 8006234:	e021      	b.n	800627a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006240:	f043 0308 	orr.w	r3, r3, #8
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006258:	4313      	orrs	r3, r2
 800625a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fe35 	bl	8005ed0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	4618      	mov	r0, r3
 800626c:	f000 fd16 	bl	8006c9c <RCC_SetFlashLatencyFromMSIRange>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e30d      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800627a:	f000 fcd7 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 800627e:	4603      	mov	r3, r0
 8006280:	4aa1      	ldr	r2, [pc, #644]	; (8006508 <HAL_RCC_OscConfig+0x39c>)
 8006282:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006284:	4ba1      	ldr	r3, [pc, #644]	; (800650c <HAL_RCC_OscConfig+0x3a0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f7fb fda9 	bl	8001de0 <HAL_InitTick>
 800628e:	4603      	mov	r3, r0
 8006290:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8006292:	7cfb      	ldrb	r3, [r7, #19]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d047      	beq.n	8006328 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8006298:	7cfb      	ldrb	r3, [r7, #19]
 800629a:	e2fc      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d02c      	beq.n	80062fe <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80062a4:	f7ff fdc1 	bl	8005e2a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80062a8:	f7fb fda4 	bl	8001df4 <HAL_GetTick>
 80062ac:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80062ae:	e008      	b.n	80062c2 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80062b0:	f7fb fda0 	bl	8001df4 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e2e9      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80062c2:	f7ff fdce 	bl	8005e62 <LL_RCC_MSI_IsReady>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0f1      	beq.n	80062b0 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80062cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062d6:	f043 0308 	orr.w	r3, r3, #8
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ee:	4313      	orrs	r3, r2
 80062f0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff fdea 	bl	8005ed0 <LL_RCC_MSI_SetCalibTrimming>
 80062fc:	e015      	b.n	800632a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80062fe:	f7ff fda2 	bl	8005e46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006302:	f7fb fd77 	bl	8001df4 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800630a:	f7fb fd73 	bl	8001df4 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e2bc      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 800631c:	f7ff fda1 	bl	8005e62 <LL_RCC_MSI_IsReady>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f1      	bne.n	800630a <HAL_RCC_OscConfig+0x19e>
 8006326:	e000      	b.n	800632a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006328:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d05f      	beq.n	80063f6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d005      	beq.n	8006348 <HAL_RCC_OscConfig+0x1dc>
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	2b0c      	cmp	r3, #12
 8006340:	d10d      	bne.n	800635e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d10a      	bne.n	800635e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006348:	f7ff fcdb 	bl	8005d02 <LL_RCC_HSE_IsReady>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d050      	beq.n	80063f4 <HAL_RCC_OscConfig+0x288>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d14c      	bne.n	80063f4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e29b      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800635e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637c:	d102      	bne.n	8006384 <HAL_RCC_OscConfig+0x218>
 800637e:	f7ff fca4 	bl	8005cca <LL_RCC_HSE_Enable>
 8006382:	e00d      	b.n	80063a0 <HAL_RCC_OscConfig+0x234>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800638c:	d104      	bne.n	8006398 <HAL_RCC_OscConfig+0x22c>
 800638e:	f7ff fc6f 	bl	8005c70 <LL_RCC_HSE_EnableTcxo>
 8006392:	f7ff fc9a 	bl	8005cca <LL_RCC_HSE_Enable>
 8006396:	e003      	b.n	80063a0 <HAL_RCC_OscConfig+0x234>
 8006398:	f7ff fca5 	bl	8005ce6 <LL_RCC_HSE_Disable>
 800639c:	f7ff fc76 	bl	8005c8c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d012      	beq.n	80063ce <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a8:	f7fb fd24 	bl	8001df4 <HAL_GetTick>
 80063ac:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80063ae:	e008      	b.n	80063c2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b0:	f7fb fd20 	bl	8001df4 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b64      	cmp	r3, #100	; 0x64
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e269      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80063c2:	f7ff fc9e 	bl	8005d02 <LL_RCC_HSE_IsReady>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f1      	beq.n	80063b0 <HAL_RCC_OscConfig+0x244>
 80063cc:	e013      	b.n	80063f6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ce:	f7fb fd11 	bl	8001df4 <HAL_GetTick>
 80063d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80063d4:	e008      	b.n	80063e8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d6:	f7fb fd0d 	bl	8001df4 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b64      	cmp	r3, #100	; 0x64
 80063e2:	d901      	bls.n	80063e8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e256      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80063e8:	f7ff fc8b 	bl	8005d02 <LL_RCC_HSE_IsReady>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f1      	bne.n	80063d6 <HAL_RCC_OscConfig+0x26a>
 80063f2:	e000      	b.n	80063f6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d04b      	beq.n	800649a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b04      	cmp	r3, #4
 8006406:	d005      	beq.n	8006414 <HAL_RCC_OscConfig+0x2a8>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d113      	bne.n	8006436 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d110      	bne.n	8006436 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006414:	f7ff fca2 	bl	8005d5c <LL_RCC_HSI_IsReady>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCC_OscConfig+0x2be>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e235      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fca5 	bl	8005d7e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006434:	e031      	b.n	800649a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d019      	beq.n	8006472 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800643e:	f7ff fc71 	bl	8005d24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fb fcd7 	bl	8001df4 <HAL_GetTick>
 8006446:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800644a:	f7fb fcd3 	bl	8001df4 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e21c      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800645c:	f7ff fc7e 	bl	8005d5c <LL_RCC_HSI_IsReady>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d0f1      	beq.n	800644a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fc87 	bl	8005d7e <LL_RCC_HSI_SetCalibTrimming>
 8006470:	e013      	b.n	800649a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006472:	f7ff fc65 	bl	8005d40 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006476:	f7fb fcbd 	bl	8001df4 <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800647c:	e008      	b.n	8006490 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647e:	f7fb fcb9 	bl	8001df4 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e202      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006490:	f7ff fc64 	bl	8005d5c <LL_RCC_HSI_IsReady>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1f1      	bne.n	800647e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d06f      	beq.n	8006586 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d057      	beq.n	800655e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80064ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b6:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d036      	beq.n	8006534 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d006      	beq.n	80064de <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e1db      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d018      	beq.n	800651a <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80064e8:	f7ff fc7e 	bl	8005de8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064ec:	f7fb fc82 	bl	8001df4 <HAL_GetTick>
 80064f0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80064f2:	e00d      	b.n	8006510 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f4:	f7fb fc7e 	bl	8001df4 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b11      	cmp	r3, #17
 8006500:	d906      	bls.n	8006510 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e1c7      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
 8006506:	bf00      	nop
 8006508:	20000000 	.word	0x20000000
 800650c:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8006510:	f7ff fc7a 	bl	8005e08 <LL_RCC_LSI_IsReady>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1ec      	bne.n	80064f4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800651a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006522:	f023 0210 	bic.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006534:	f7ff fc48 	bl	8005dc8 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fb fc5c 	bl	8001df4 <HAL_GetTick>
 800653c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006540:	f7fb fc58 	bl	8001df4 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b11      	cmp	r3, #17
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e1a1      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006552:	f7ff fc59 	bl	8005e08 <LL_RCC_LSI_IsReady>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d0f1      	beq.n	8006540 <HAL_RCC_OscConfig+0x3d4>
 800655c:	e013      	b.n	8006586 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800655e:	f7ff fc43 	bl	8005de8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006562:	f7fb fc47 	bl	8001df4 <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800656a:	f7fb fc43 	bl	8001df4 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b11      	cmp	r3, #17
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e18c      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800657c:	f7ff fc44 	bl	8005e08 <LL_RCC_LSI_IsReady>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f1      	bne.n	800656a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80d8 	beq.w	8006744 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006594:	f7ff fb5a 	bl	8005c4c <LL_PWR_IsEnabledBkUpAccess>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d113      	bne.n	80065c6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800659e:	f7ff fb3b 	bl	8005c18 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a2:	f7fb fc27 	bl	8001df4 <HAL_GetTick>
 80065a6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065aa:	f7fb fc23 	bl	8001df4 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e16c      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80065bc:	f7ff fb46 	bl	8005c4c <LL_PWR_IsEnabledBkUpAccess>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f1      	beq.n	80065aa <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d07b      	beq.n	80066c6 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	2b85      	cmp	r3, #133	; 0x85
 80065d4:	d003      	beq.n	80065de <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	2b05      	cmp	r3, #5
 80065dc:	d109      	bne.n	80065f2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80065de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065ea:	f043 0304 	orr.w	r3, r3, #4
 80065ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f2:	f7fb fbff 	bl	8001df4 <HAL_GetTick>
 80065f6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80065f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006604:	f043 0301 	orr.w	r3, r3, #1
 8006608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800660c:	e00a      	b.n	8006624 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800660e:	f7fb fbf1 	bl	8001df4 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f241 3288 	movw	r2, #5000	; 0x1388
 800661c:	4293      	cmp	r3, r2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e138      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006624:	f7ff fbbf 	bl	8005da6 <LL_RCC_LSE_IsReady>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b81      	cmp	r3, #129	; 0x81
 8006634:	d003      	beq.n	800663e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	2b85      	cmp	r3, #133	; 0x85
 800663c:	d121      	bne.n	8006682 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663e:	f7fb fbd9 	bl	8001df4 <HAL_GetTick>
 8006642:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006658:	e00a      	b.n	8006670 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665a:	f7fb fbcb 	bl	8001df4 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	f241 3288 	movw	r2, #5000	; 0x1388
 8006668:	4293      	cmp	r3, r2
 800666a:	d901      	bls.n	8006670 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 800666c:	2303      	movs	r3, #3
 800666e:	e112      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ec      	beq.n	800665a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006680:	e060      	b.n	8006744 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fb fbb7 	bl	8001df4 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800668c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fb fba9 	bl	8001df4 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e0f0      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80066b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ec      	bne.n	800669e <HAL_RCC_OscConfig+0x532>
 80066c4:	e03e      	b.n	8006744 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c6:	f7fb fb95 	bl	8001df4 <HAL_GetTick>
 80066ca:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80066cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80066e0:	e00a      	b.n	80066f8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066e2:	f7fb fb87 	bl	8001df4 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e0ce      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80066f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006704:	2b00      	cmp	r3, #0
 8006706:	d1ec      	bne.n	80066e2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fb fb74 	bl	8001df4 <HAL_GetTick>
 800670c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800670e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006722:	e00a      	b.n	800673a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006724:	f7fb fb66 	bl	8001df4 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006732:	4293      	cmp	r3, r2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e0ad      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 800673a:	f7ff fb34 	bl	8005da6 <LL_RCC_LSE_IsReady>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1ef      	bne.n	8006724 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 80a3 	beq.w	8006894 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d076      	beq.n	8006842 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006758:	2b02      	cmp	r3, #2
 800675a:	d14b      	bne.n	80067f4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800675c:	f7ff fc75 	bl	800604a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006760:	f7fb fb48 	bl	8001df4 <HAL_GetTick>
 8006764:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006768:	f7fb fb44 	bl	8001df4 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b0a      	cmp	r3, #10
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e08d      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800677a:	f7ff fc74 	bl	8006066 <LL_RCC_PLL_IsReady>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1f1      	bne.n	8006768 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006788:	68da      	ldr	r2, [r3, #12]
 800678a:	4b45      	ldr	r3, [pc, #276]	; (80068a0 <HAL_RCC_OscConfig+0x734>)
 800678c:	4013      	ands	r3, r2
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006796:	4311      	orrs	r1, r2
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800679c:	0212      	lsls	r2, r2, #8
 800679e:	4311      	orrs	r1, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80067a4:	4311      	orrs	r1, r2
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80067aa:	4311      	orrs	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80067b0:	430a      	orrs	r2, r1
 80067b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ba:	f7ff fc38 	bl	800602e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067cc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ce:	f7fb fb11 	bl	8001df4 <HAL_GetTick>
 80067d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80067d4:	e008      	b.n	80067e8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d6:	f7fb fb0d 	bl	8001df4 <HAL_GetTick>
 80067da:	4602      	mov	r2, r0
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	2b0a      	cmp	r3, #10
 80067e2:	d901      	bls.n	80067e8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e056      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80067e8:	f7ff fc3d 	bl	8006066 <LL_RCC_PLL_IsReady>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0f1      	beq.n	80067d6 <HAL_RCC_OscConfig+0x66a>
 80067f2:	e04f      	b.n	8006894 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f4:	f7ff fc29 	bl	800604a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80067f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006812:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681a:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fb faea 	bl	8001df4 <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006824:	f7fb fae6 	bl	8001df4 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b0a      	cmp	r3, #10
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e02f      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006836:	f7ff fc16 	bl	8006066 <LL_RCC_PLL_IsReady>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f1      	bne.n	8006824 <HAL_RCC_OscConfig+0x6b8>
 8006840:	e028      	b.n	8006894 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006846:	2b01      	cmp	r3, #1
 8006848:	d101      	bne.n	800684e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e023      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800684e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f003 0203 	and.w	r2, r3, #3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006860:	429a      	cmp	r2, r3
 8006862:	d115      	bne.n	8006890 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006864:	69bb      	ldr	r3, [r7, #24]
 8006866:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686e:	429a      	cmp	r2, r3
 8006870:	d10e      	bne.n	8006890 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	429a      	cmp	r2, r3
 8006880:	d106      	bne.n	8006890 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	429a      	cmp	r2, r3
 800688e:	d001      	beq.n	8006894 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e000      	b.n	8006896 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3720      	adds	r7, #32
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	11c1808c 	.word	0x11c1808c

080068a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e10f      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b8:	4b89      	ldr	r3, [pc, #548]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d91b      	bls.n	80068fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c6:	4b86      	ldr	r3, [pc, #536]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f023 0207 	bic.w	r2, r3, #7
 80068ce:	4984      	ldr	r1, [pc, #528]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068d6:	f7fb fa8d 	bl	8001df4 <HAL_GetTick>
 80068da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80068de:	f7fb fa89 	bl	8001df4 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e0f3      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f0:	4b7b      	ldr	r3, [pc, #492]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d1ef      	bne.n	80068de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d016      	beq.n	8006938 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff fb10 	bl	8005f34 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006914:	f7fb fa6e 	bl	8001df4 <HAL_GetTick>
 8006918:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800691a:	e008      	b.n	800692e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800691c:	f7fb fa6a 	bl	8001df4 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b02      	cmp	r3, #2
 8006928:	d901      	bls.n	800692e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e0d4      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800692e:	f7ff fbd8 	bl	80060e2 <LL_RCC_IsActiveFlag_HPRE>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0f1      	beq.n	800691c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d016      	beq.n	8006972 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fb06 	bl	8005f5a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800694e:	f7fb fa51 	bl	8001df4 <HAL_GetTick>
 8006952:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006954:	e008      	b.n	8006968 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006956:	f7fb fa4d 	bl	8001df4 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e0b7      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006968:	f7ff fbcc 	bl	8006104 <LL_RCC_IsActiveFlag_SHDHPRE>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0f1      	beq.n	8006956 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	4618      	mov	r0, r3
 8006984:	f7ff faff 	bl	8005f86 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006988:	f7fb fa34 	bl	8001df4 <HAL_GetTick>
 800698c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006990:	f7fb fa30 	bl	8001df4 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b02      	cmp	r3, #2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e09a      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80069a2:	f7ff fbc1 	bl	8006128 <LL_RCC_IsActiveFlag_PPRE1>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f1      	beq.n	8006990 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d017      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff faf4 	bl	8005fac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80069c4:	f7fb fa16 	bl	8001df4 <HAL_GetTick>
 80069c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80069ca:	e008      	b.n	80069de <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80069cc:	f7fb fa12 	bl	8001df4 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e07c      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80069de:	f7ff fbb4 	bl	800614a <LL_RCC_IsActiveFlag_PPRE2>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f1      	beq.n	80069cc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d043      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d106      	bne.n	8006a0a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80069fc:	f7ff f981 	bl	8005d02 <LL_RCC_HSE_IsReady>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11e      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e066      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d106      	bne.n	8006a20 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006a12:	f7ff fb28 	bl	8006066 <LL_RCC_PLL_IsReady>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d113      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e05b      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d106      	bne.n	8006a36 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006a28:	f7ff fa1b 	bl	8005e62 <LL_RCC_MSI_IsReady>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d108      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e050      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006a36:	f7ff f991 	bl	8005d5c <LL_RCC_HSI_IsReady>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e049      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff fa55 	bl	8005ef8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a4e:	f7fb f9d1 	bl	8001df4 <HAL_GetTick>
 8006a52:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a54:	e00a      	b.n	8006a6c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a56:	f7fb f9cd 	bl	8001df4 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e035      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a6c:	f7ff fa57 	bl	8005f1e <LL_RCC_GetSysClkSource>
 8006a70:	4602      	mov	r2, r0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d1ec      	bne.n	8006a56 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a7c:	4b18      	ldr	r3, [pc, #96]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d21b      	bcs.n	8006ac2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8a:	4b15      	ldr	r3, [pc, #84]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 0207 	bic.w	r2, r3, #7
 8006a92:	4913      	ldr	r1, [pc, #76]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a9a:	f7fb f9ab 	bl	8001df4 <HAL_GetTick>
 8006a9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006aa2:	f7fb f9a7 	bl	8001df4 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e011      	b.n	8006ad8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <HAL_RCC_ClockConfig+0x23c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d1ef      	bne.n	8006aa2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006ac2:	f000 f8b3 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	4a06      	ldr	r2, [pc, #24]	; (8006ae4 <HAL_RCC_ClockConfig+0x240>)
 8006aca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <HAL_RCC_ClockConfig+0x244>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fb f985 	bl	8001de0 <HAL_InitTick>
 8006ad6:	4603      	mov	r3, r0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	58004000 	.word	0x58004000
 8006ae4:	20000000 	.word	0x20000000
 8006ae8:	20000004 	.word	0x20000004

08006aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8006af6:	2300      	movs	r3, #0
 8006af8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006afa:	f7ff fa10 	bl	8005f1e <LL_RCC_GetSysClkSource>
 8006afe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b00:	f7ff fae4 	bl	80060cc <LL_RCC_PLL_GetMainSource>
 8006b04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_RCC_GetSysClockFreq+0x2c>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b0c      	cmp	r3, #12
 8006b10:	d139      	bne.n	8006b86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d136      	bne.n	8006b86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006b18:	f7ff f9b3 	bl	8005e82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d115      	bne.n	8006b4e <HAL_RCC_GetSysClockFreq+0x62>
 8006b22:	f7ff f9ae 	bl	8005e82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d106      	bne.n	8006b3a <HAL_RCC_GetSysClockFreq+0x4e>
 8006b2c:	f7ff f9b9 	bl	8005ea2 <LL_RCC_MSI_GetRange>
 8006b30:	4603      	mov	r3, r0
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	e005      	b.n	8006b46 <HAL_RCC_GetSysClockFreq+0x5a>
 8006b3a:	f7ff f9bd 	bl	8005eb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	0a1b      	lsrs	r3, r3, #8
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	4a36      	ldr	r2, [pc, #216]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x134>)
 8006b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4c:	e014      	b.n	8006b78 <HAL_RCC_GetSysClockFreq+0x8c>
 8006b4e:	f7ff f998 	bl	8005e82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d106      	bne.n	8006b66 <HAL_RCC_GetSysClockFreq+0x7a>
 8006b58:	f7ff f9a3 	bl	8005ea2 <LL_RCC_MSI_GetRange>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	e005      	b.n	8006b72 <HAL_RCC_GetSysClockFreq+0x86>
 8006b66:	f7ff f9a7 	bl	8005eb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	091b      	lsrs	r3, r3, #4
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	4a2b      	ldr	r2, [pc, #172]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x134>)
 8006b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d115      	bne.n	8006bac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b84:	e012      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2b04      	cmp	r3, #4
 8006b8a:	d102      	bne.n	8006b92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b8c:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e00c      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d109      	bne.n	8006bac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006b98:	f7ff f886 	bl	8005ca8 <LL_RCC_HSE_IsEnabledDiv2>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006ba2:	4b20      	ldr	r3, [pc, #128]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	e001      	b.n	8006bac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006ba8:	4b1f      	ldr	r3, [pc, #124]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006baa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bac:	f7ff f9b7 	bl	8005f1e <LL_RCC_GetSysClkSource>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b0c      	cmp	r3, #12
 8006bb4:	d12f      	bne.n	8006c16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006bb6:	f7ff fa89 	bl	80060cc <LL_RCC_PLL_GetMainSource>
 8006bba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d003      	beq.n	8006bca <HAL_RCC_GetSysClockFreq+0xde>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d003      	beq.n	8006bd0 <HAL_RCC_GetSysClockFreq+0xe4>
 8006bc8:	e00d      	b.n	8006be6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006bca:	4b16      	ldr	r3, [pc, #88]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006bcc:	60fb      	str	r3, [r7, #12]
        break;
 8006bce:	e00d      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006bd0:	f7ff f86a 	bl	8005ca8 <LL_RCC_HSE_IsEnabledDiv2>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d102      	bne.n	8006be0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006bda:	4b12      	ldr	r3, [pc, #72]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x138>)
 8006bdc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006bde:	e005      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006be0:	4b11      	ldr	r3, [pc, #68]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006be2:	60fb      	str	r3, [r7, #12]
        break;
 8006be4:	e002      	b.n	8006bec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	60fb      	str	r3, [r7, #12]
        break;
 8006bea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006bec:	f7ff fa4c 	bl	8006088 <LL_RCC_PLL_GetN>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	fb03 f402 	mul.w	r4, r3, r2
 8006bf8:	f7ff fa5d 	bl	80060b6 <LL_RCC_PLL_GetDivider>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	3301      	adds	r3, #1
 8006c02:	fbb4 f4f3 	udiv	r4, r4, r3
 8006c06:	f7ff fa4b 	bl	80060a0 <LL_RCC_PLL_GetR>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	0f5b      	lsrs	r3, r3, #29
 8006c0e:	3301      	adds	r3, #1
 8006c10:	fbb4 f3f3 	udiv	r3, r4, r3
 8006c14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006c16:	697b      	ldr	r3, [r7, #20]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	371c      	adds	r7, #28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd90      	pop	{r4, r7, pc}
 8006c20:	0801ea5c 	.word	0x0801ea5c
 8006c24:	00f42400 	.word	0x00f42400
 8006c28:	01e84800 	.word	0x01e84800

08006c2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c2c:	b598      	push	{r3, r4, r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006c30:	f7ff ff5c 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8006c34:	4604      	mov	r4, r0
 8006c36:	f7ff f9cc 	bl	8005fd2 <LL_RCC_GetAHBPrescaler>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	091b      	lsrs	r3, r3, #4
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	4a03      	ldr	r2, [pc, #12]	; (8006c50 <HAL_RCC_GetHCLKFreq+0x24>)
 8006c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd98      	pop	{r3, r4, r7, pc}
 8006c50:	0801e9fc 	.word	0x0801e9fc

08006c54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c54:	b598      	push	{r3, r4, r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006c58:	f7ff ffe8 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	f7ff f9d0 	bl	8006002 <LL_RCC_GetAPB1Prescaler>
 8006c62:	4603      	mov	r3, r0
 8006c64:	0a1b      	lsrs	r3, r3, #8
 8006c66:	4a03      	ldr	r2, [pc, #12]	; (8006c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	bd98      	pop	{r3, r4, r7, pc}
 8006c74:	0801ea3c 	.word	0x0801ea3c

08006c78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c78:	b598      	push	{r3, r4, r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006c7c:	f7ff ffd6 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8006c80:	4604      	mov	r4, r0
 8006c82:	f7ff f9c9 	bl	8006018 <LL_RCC_GetAPB2Prescaler>
 8006c86:	4603      	mov	r3, r0
 8006c88:	0adb      	lsrs	r3, r3, #11
 8006c8a:	4a03      	ldr	r2, [pc, #12]	; (8006c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	bd98      	pop	{r3, r4, r7, pc}
 8006c98:	0801ea3c 	.word	0x0801ea3c

08006c9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	4a10      	ldr	r2, [pc, #64]	; (8006cf0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006cb4:	f7ff f998 	bl	8005fe8 <LL_RCC_GetAHB3Prescaler>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	4a0c      	ldr	r2, [pc, #48]	; (8006cf4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ccc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8006cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd6:	0c9c      	lsrs	r4, r3, #18
 8006cd8:	f7fe ffac 	bl	8005c34 <HAL_PWREx_GetVoltageRange>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	f000 f80b 	bl	8006cfc <RCC_SetFlashLatency>
 8006ce6:	4603      	mov	r3, r0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd90      	pop	{r4, r7, pc}
 8006cf0:	0801ea5c 	.word	0x0801ea5c
 8006cf4:	0801e9fc 	.word	0x0801e9fc
 8006cf8:	431bde83 	.word	0x431bde83

08006cfc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	; 0x38
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006d06:	4a3a      	ldr	r2, [pc, #232]	; (8006df0 <RCC_SetFlashLatency+0xf4>)
 8006d08:	f107 0320 	add.w	r3, r7, #32
 8006d0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d10:	6018      	str	r0, [r3, #0]
 8006d12:	3304      	adds	r3, #4
 8006d14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006d16:	4a37      	ldr	r2, [pc, #220]	; (8006df4 <RCC_SetFlashLatency+0xf8>)
 8006d18:	f107 0318 	add.w	r3, r7, #24
 8006d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d20:	6018      	str	r0, [r3, #0]
 8006d22:	3304      	adds	r3, #4
 8006d24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006d26:	4a34      	ldr	r2, [pc, #208]	; (8006df8 <RCC_SetFlashLatency+0xfc>)
 8006d28:	f107 030c 	add.w	r3, r7, #12
 8006d2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006d32:	2300      	movs	r3, #0
 8006d34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3c:	d11b      	bne.n	8006d76 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
 8006d42:	e014      	b.n	8006d6e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	3338      	adds	r3, #56	; 0x38
 8006d4a:	443b      	add	r3, r7
 8006d4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006d50:	461a      	mov	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d807      	bhi.n	8006d68 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	3338      	adds	r3, #56	; 0x38
 8006d5e:	443b      	add	r3, r7
 8006d60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d66:	e021      	b.n	8006dac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d9e7      	bls.n	8006d44 <RCC_SetFlashLatency+0x48>
 8006d74:	e01a      	b.n	8006dac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d7a:	e014      	b.n	8006da6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	3338      	adds	r3, #56	; 0x38
 8006d82:	443b      	add	r3, r7
 8006d84:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d807      	bhi.n	8006da0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	3338      	adds	r3, #56	; 0x38
 8006d96:	443b      	add	r3, r7
 8006d98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d9e:	e005      	b.n	8006dac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da2:	3301      	adds	r3, #1
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d9e7      	bls.n	8006d7c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006dac:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <RCC_SetFlashLatency+0x100>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f023 0207 	bic.w	r2, r3, #7
 8006db4:	4911      	ldr	r1, [pc, #68]	; (8006dfc <RCC_SetFlashLatency+0x100>)
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	4313      	orrs	r3, r2
 8006dba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006dbc:	f7fb f81a 	bl	8001df4 <HAL_GetTick>
 8006dc0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006dc2:	e008      	b.n	8006dd6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006dc4:	f7fb f816 	bl	8001df4 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d901      	bls.n	8006dd6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e007      	b.n	8006de6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <RCC_SetFlashLatency+0x100>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d1ef      	bne.n	8006dc4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3738      	adds	r7, #56	; 0x38
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	0801e0e0 	.word	0x0801e0e0
 8006df4:	0801e0e8 	.word	0x0801e0e8
 8006df8:	0801e0f0 	.word	0x0801e0f0
 8006dfc:	58004000 	.word	0x58004000

08006e00 <LL_RCC_LSE_IsReady>:
{
 8006e00:	b480      	push	{r7}
 8006e02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d101      	bne.n	8006e18 <LL_RCC_LSE_IsReady+0x18>
 8006e14:	2301      	movs	r3, #1
 8006e16:	e000      	b.n	8006e1a <LL_RCC_LSE_IsReady+0x1a>
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr

08006e22 <LL_RCC_SetUSARTClockSource>:
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8006e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0c1b      	lsrs	r3, r3, #16
 8006e36:	43db      	mvns	r3, r3
 8006e38:	401a      	ands	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bc80      	pop	{r7}
 8006e50:	4770      	bx	lr

08006e52 <LL_RCC_SetI2SClockSource>:
{
 8006e52:	b480      	push	{r7}
 8006e54:	b083      	sub	sp, #12
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e72:	bf00      	nop
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr

08006e7c <LL_RCC_SetLPUARTClockSource>:
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006e9c:	bf00      	nop
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bc80      	pop	{r7}
 8006ea4:	4770      	bx	lr

08006ea6 <LL_RCC_SetI2CClockSource>:
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b083      	sub	sp, #12
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	091b      	lsrs	r3, r3, #4
 8006eba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006ebe:	43db      	mvns	r3, r3
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	011b      	lsls	r3, r3, #4
 8006ec6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <LL_RCC_SetLPTIMClockSource>:
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	0c1b      	lsrs	r3, r3, #16
 8006ef2:	041b      	lsls	r3, r3, #16
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	401a      	ands	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	041b      	lsls	r3, r3, #16
 8006efc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bc80      	pop	{r7}
 8006f0e:	4770      	bx	lr

08006f10 <LL_RCC_SetRNGClockSource>:
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f20:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr

08006f3a <LL_RCC_SetADCClockSource>:
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <LL_RCC_SetRTCClockSource>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bc80      	pop	{r7}
 8006f8c:	4770      	bx	lr

08006f8e <LL_RCC_GetRTCClockSource>:
{
 8006f8e:	b480      	push	{r7}
 8006f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bc80      	pop	{r7}
 8006fa4:	4770      	bx	lr

08006fa6 <LL_RCC_ForceBackupDomainReset>:
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr

08006fc6 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006fde:	bf00      	nop
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bc80      	pop	{r7}
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d058      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007008:	f7fe fe06 	bl	8005c18 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800700c:	f7fa fef2 	bl	8001df4 <HAL_GetTick>
 8007010:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007012:	e009      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007014:	f7fa feee 	bl	8001df4 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d902      	bls.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	74fb      	strb	r3, [r7, #19]
        break;
 8007026:	e006      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007028:	4b7b      	ldr	r3, [pc, #492]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007034:	d1ee      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007036:	7cfb      	ldrb	r3, [r7, #19]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d13c      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800703c:	f7ff ffa7 	bl	8006f8e <LL_RCC_GetRTCClockSource>
 8007040:	4602      	mov	r2, r0
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	429a      	cmp	r2, r3
 8007048:	d00f      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800704a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800704e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007056:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007058:	f7ff ffa5 	bl	8006fa6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800705c:	f7ff ffb3 	bl	8006fc6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b00      	cmp	r3, #0
 8007072:	d014      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fa febe 	bl	8001df4 <HAL_GetTick>
 8007078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800707a:	e00b      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800707c:	f7fa feba 	bl	8001df4 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	f241 3288 	movw	r2, #5000	; 0x1388
 800708a:	4293      	cmp	r3, r2
 800708c:	d902      	bls.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	74fb      	strb	r3, [r7, #19]
            break;
 8007092:	e004      	b.n	800709e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007094:	f7ff feb4 	bl	8006e00 <LL_RCC_LSE_IsReady>
 8007098:	4603      	mov	r3, r0
 800709a:	2b01      	cmp	r3, #1
 800709c:	d1ee      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800709e:	7cfb      	ldrb	r3, [r7, #19]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff ff5b 	bl	8006f64 <LL_RCC_SetRTCClockSource>
 80070ae:	e004      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070b0:	7cfb      	ldrb	r3, [r7, #19]
 80070b2:	74bb      	strb	r3, [r7, #18]
 80070b4:	e001      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b6:	7cfb      	ldrb	r3, [r7, #19]
 80070b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d004      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fea9 	bl	8006e22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fe9e 	bl	8006e22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fec0 	bl	8006e7c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fee6 	bl	8006ede <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fedb 	bl	8006ede <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fed0 	bl	8006ede <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff fea9 	bl	8006ea6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff fe9e 	bl	8006ea6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d004      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fe93 	bl	8006ea6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b00      	cmp	r3, #0
 800718a:	d011      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4618      	mov	r0, r3
 8007192:	f7ff fe5e 	bl	8006e52 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800719e:	d107      	bne.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80071a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fea5 	bl	8006f10 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d107      	bne.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80071ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d011      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7ff fea3 	bl	8006f3a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fc:	d107      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800720c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800720e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	58000400 	.word	0x58000400

0800721c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d068      	beq.n	8007300 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d106      	bne.n	8007248 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fa fb56 	bl	80018f4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007250:	4b2e      	ldr	r3, [pc, #184]	; (800730c <HAL_RTC_Init+0xf0>)
 8007252:	22ca      	movs	r2, #202	; 0xca
 8007254:	625a      	str	r2, [r3, #36]	; 0x24
 8007256:	4b2d      	ldr	r3, [pc, #180]	; (800730c <HAL_RTC_Init+0xf0>)
 8007258:	2253      	movs	r2, #83	; 0x53
 800725a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa0f 	bl	8007680 <RTC_EnterInitMode>
 8007262:	4603      	mov	r3, r0
 8007264:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d13f      	bne.n	80072ec <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800726c:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RTC_Init+0xf0>)
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	4a26      	ldr	r2, [pc, #152]	; (800730c <HAL_RTC_Init+0xf0>)
 8007272:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800727c:	4b23      	ldr	r3, [pc, #140]	; (800730c <HAL_RTC_Init+0xf0>)
 800727e:	699a      	ldr	r2, [r3, #24]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6859      	ldr	r1, [r3, #4]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	4319      	orrs	r1, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	430b      	orrs	r3, r1
 8007290:	491e      	ldr	r1, [pc, #120]	; (800730c <HAL_RTC_Init+0xf0>)
 8007292:	4313      	orrs	r3, r2
 8007294:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	041b      	lsls	r3, r3, #16
 80072a0:	491a      	ldr	r1, [pc, #104]	; (800730c <HAL_RTC_Init+0xf0>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80072a6:	4b19      	ldr	r3, [pc, #100]	; (800730c <HAL_RTC_Init+0xf0>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	430b      	orrs	r3, r1
 80072b8:	4914      	ldr	r1, [pc, #80]	; (800730c <HAL_RTC_Init+0xf0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa12 	bl	80076e8 <RTC_ExitInitMode>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10e      	bne.n	80072ec <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80072ce:	4b0f      	ldr	r3, [pc, #60]	; (800730c <HAL_RTC_Init+0xf0>)
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a19      	ldr	r1, [r3, #32]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	4319      	orrs	r1, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	430b      	orrs	r3, r1
 80072e6:	4909      	ldr	r1, [pc, #36]	; (800730c <HAL_RTC_Init+0xf0>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ec:	4b07      	ldr	r3, [pc, #28]	; (800730c <HAL_RTC_Init+0xf0>)
 80072ee:	22ff      	movs	r2, #255	; 0xff
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	40002800 	.word	0x40002800

08007310 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007326:	2b01      	cmp	r3, #1
 8007328:	d101      	bne.n	800732e <HAL_RTC_SetAlarm_IT+0x1e>
 800732a:	2302      	movs	r3, #2
 800732c:	e0f3      	b.n	8007516 <HAL_RTC_SetAlarm_IT+0x206>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2202      	movs	r2, #2
 800733a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800733e:	4b78      	ldr	r3, [pc, #480]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007346:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800734e:	d06a      	beq.n	8007426 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d13a      	bne.n	80073cc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007356:	4b72      	ldr	r3, [pc, #456]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b00      	cmp	r3, #0
 8007360:	d102      	bne.n	8007368 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2200      	movs	r2, #0
 8007366:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 f9f5 	bl	8007764 <RTC_ByteToBcd2>
 800737a:	4603      	mov	r3, r0
 800737c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f9ee 	bl	8007764 <RTC_ByteToBcd2>
 8007388:	4603      	mov	r3, r0
 800738a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800738c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	789b      	ldrb	r3, [r3, #2]
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f9e6 	bl	8007764 <RTC_ByteToBcd2>
 8007398:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800739a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	78db      	ldrb	r3, [r3, #3]
 80073a2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80073a4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f9d8 	bl	8007764 <RTC_ByteToBcd2>
 80073b4:	4603      	mov	r3, r0
 80073b6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80073b8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80073c0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
 80073ca:	e02c      	b.n	8007426 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80073d4:	d00d      	beq.n	80073f2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073de:	d008      	beq.n	80073f2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80073e0:	4b4f      	ldr	r3, [pc, #316]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d102      	bne.n	80073f2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	785b      	ldrb	r3, [r3, #1]
 80073fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80073fe:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007404:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	78db      	ldrb	r3, [r3, #3]
 800740a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800740c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007414:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007416:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800741c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007426:	4b3e      	ldr	r3, [pc, #248]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007428:	22ca      	movs	r2, #202	; 0xca
 800742a:	625a      	str	r2, [r3, #36]	; 0x24
 800742c:	4b3c      	ldr	r3, [pc, #240]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800742e:	2253      	movs	r2, #83	; 0x53
 8007430:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800743a:	d12c      	bne.n	8007496 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800743c:	4b38      	ldr	r3, [pc, #224]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	4a37      	ldr	r2, [pc, #220]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007442:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007446:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007448:	4b35      	ldr	r3, [pc, #212]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800744a:	2201      	movs	r2, #1
 800744c:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007454:	d107      	bne.n	8007466 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	4930      	ldr	r1, [pc, #192]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007460:	4313      	orrs	r3, r2
 8007462:	644b      	str	r3, [r1, #68]	; 0x44
 8007464:	e006      	b.n	8007474 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007466:	4a2e      	ldr	r2, [pc, #184]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800746c:	4a2c      	ldr	r2, [pc, #176]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007474:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007480:	f043 0201 	orr.w	r2, r3, #1
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	4a24      	ldr	r2, [pc, #144]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800748e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8007492:	6193      	str	r3, [r2, #24]
 8007494:	e02b      	b.n	80074ee <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007496:	4b22      	ldr	r3, [pc, #136]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	4a21      	ldr	r2, [pc, #132]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 800749c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80074a0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80074a2:	4b1f      	ldr	r3, [pc, #124]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074a4:	2202      	movs	r2, #2
 80074a6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ae:	d107      	bne.n	80074c0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	69db      	ldr	r3, [r3, #28]
 80074b8:	4919      	ldr	r1, [pc, #100]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074be:	e006      	b.n	80074ce <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80074c0:	4a17      	ldr	r2, [pc, #92]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80074c6:	4a16      	ldr	r2, [pc, #88]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80074ce:	4a14      	ldr	r2, [pc, #80]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	f043 0202 	orr.w	r2, r3, #2
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80074e2:	4b0f      	ldr	r3, [pc, #60]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 80074e8:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80074ec:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80074ee:	4b0d      	ldr	r3, [pc, #52]	; (8007524 <HAL_RTC_SetAlarm_IT+0x214>)
 80074f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f4:	4a0b      	ldr	r2, [pc, #44]	; (8007524 <HAL_RTC_SetAlarm_IT+0x214>)
 80074f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_RTC_SetAlarm_IT+0x210>)
 8007500:	22ff      	movs	r2, #255	; 0xff
 8007502:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	371c      	adds	r7, #28
 800751a:	46bd      	mov	sp, r7
 800751c:	bd90      	pop	{r4, r7, pc}
 800751e:	bf00      	nop
 8007520:	40002800 	.word	0x40002800
 8007524:	58000800 	.word	0x58000800

08007528 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d101      	bne.n	8007540 <HAL_RTC_DeactivateAlarm+0x18>
 800753c:	2302      	movs	r3, #2
 800753e:	e048      	b.n	80075d2 <HAL_RTC_DeactivateAlarm+0xaa>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2202      	movs	r2, #2
 800754c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007550:	4b22      	ldr	r3, [pc, #136]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007552:	22ca      	movs	r2, #202	; 0xca
 8007554:	625a      	str	r2, [r3, #36]	; 0x24
 8007556:	4b21      	ldr	r3, [pc, #132]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007558:	2253      	movs	r2, #83	; 0x53
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007562:	d115      	bne.n	8007590 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007564:	4b1d      	ldr	r3, [pc, #116]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	4a1c      	ldr	r2, [pc, #112]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 800756a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800756e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007574:	4a19      	ldr	r2, [pc, #100]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007576:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800757a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	f023 0201 	bic.w	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007588:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 800758a:	2201      	movs	r2, #1
 800758c:	65da      	str	r2, [r3, #92]	; 0x5c
 800758e:	e014      	b.n	80075ba <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007590:	4b12      	ldr	r3, [pc, #72]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 8007596:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800759a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800759c:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 800759e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075a0:	4a0e      	ldr	r2, [pc, #56]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 80075a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075a6:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	f023 0202 	bic.w	r2, r3, #2
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80075b4:	4b09      	ldr	r3, [pc, #36]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 80075b6:	2202      	movs	r2, #2
 80075b8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075ba:	4b08      	ldr	r3, [pc, #32]	; (80075dc <HAL_RTC_DeactivateAlarm+0xb4>)
 80075bc:	22ff      	movs	r2, #255	; 0xff
 80075be:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bc80      	pop	{r7}
 80075da:	4770      	bx	lr
 80075dc:	40002800 	.word	0x40002800

080075e0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80075e8:	4b11      	ldr	r3, [pc, #68]	; (8007630 <HAL_RTC_AlarmIRQHandler+0x50>)
 80075ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	4013      	ands	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80075fe:	4b0c      	ldr	r3, [pc, #48]	; (8007630 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007600:	2201      	movs	r2, #1
 8007602:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7fa fe58 	bl	80022ba <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007614:	4b06      	ldr	r3, [pc, #24]	; (8007630 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007616:	2202      	movs	r2, #2
 8007618:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f94a 	bl	80078b4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40002800 	.word	0x40002800

08007634 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <HAL_RTC_WaitForSynchro+0x48>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	4a0e      	ldr	r2, [pc, #56]	; (800767c <HAL_RTC_WaitForSynchro+0x48>)
 8007642:	f023 0320 	bic.w	r3, r3, #32
 8007646:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007648:	f7fa fbd4 	bl	8001df4 <HAL_GetTick>
 800764c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800764e:	e009      	b.n	8007664 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007650:	f7fa fbd0 	bl	8001df4 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800765e:	d901      	bls.n	8007664 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007660:	2303      	movs	r3, #3
 8007662:	e006      	b.n	8007672 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <HAL_RTC_WaitForSynchro+0x48>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d0ef      	beq.n	8007650 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40002800 	.word	0x40002800

08007680 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800768c:	4b15      	ldr	r3, [pc, #84]	; (80076e4 <RTC_EnterInitMode+0x64>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	d120      	bne.n	80076da <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007698:	4b12      	ldr	r3, [pc, #72]	; (80076e4 <RTC_EnterInitMode+0x64>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <RTC_EnterInitMode+0x64>)
 800769e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80076a4:	f7fa fba6 	bl	8001df4 <HAL_GetTick>
 80076a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80076aa:	e00d      	b.n	80076c8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80076ac:	f7fa fba2 	bl	8001df4 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ba:	d905      	bls.n	80076c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2203      	movs	r2, #3
 80076c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80076c8:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <RTC_EnterInitMode+0x64>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <RTC_EnterInitMode+0x5a>
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d1e8      	bne.n	80076ac <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40002800 	.word	0x40002800

080076e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80076f4:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <RTC_ExitInitMode+0x78>)
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <RTC_ExitInitMode+0x78>)
 80076fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076fe:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007700:	4b17      	ldr	r3, [pc, #92]	; (8007760 <RTC_ExitInitMode+0x78>)
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10c      	bne.n	8007726 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f7ff ff91 	bl	8007634 <HAL_RTC_WaitForSynchro>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	d01e      	beq.n	8007756 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2203      	movs	r2, #3
 800771c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	73fb      	strb	r3, [r7, #15]
 8007724:	e017      	b.n	8007756 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007726:	4b0e      	ldr	r3, [pc, #56]	; (8007760 <RTC_ExitInitMode+0x78>)
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	4a0d      	ldr	r2, [pc, #52]	; (8007760 <RTC_ExitInitMode+0x78>)
 800772c:	f023 0320 	bic.w	r3, r3, #32
 8007730:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f7ff ff7e 	bl	8007634 <HAL_RTC_WaitForSynchro>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2203      	movs	r2, #3
 8007742:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800774a:	4b05      	ldr	r3, [pc, #20]	; (8007760 <RTC_ExitInitMode+0x78>)
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	4a04      	ldr	r2, [pc, #16]	; (8007760 <RTC_ExitInitMode+0x78>)
 8007750:	f043 0320 	orr.w	r3, r3, #32
 8007754:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007756:	7bfb      	ldrb	r3, [r7, #15]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40002800 	.word	0x40002800

08007764 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	4603      	mov	r3, r0
 800776c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007776:	e005      	b.n	8007784 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3301      	adds	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800777e:	7afb      	ldrb	r3, [r7, #11]
 8007780:	3b0a      	subs	r3, #10
 8007782:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007784:	7afb      	ldrb	r3, [r7, #11]
 8007786:	2b09      	cmp	r3, #9
 8007788:	d8f6      	bhi.n	8007778 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	b2db      	uxtb	r3, r3
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	b2da      	uxtb	r2, r3
 8007792:	7afb      	ldrb	r3, [r7, #11]
 8007794:	4313      	orrs	r3, r2
 8007796:	b2db      	uxtb	r3, r3
}
 8007798:	4618      	mov	r0, r3
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr
	...

080077a4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d101      	bne.n	80077ba <HAL_RTCEx_EnableBypassShadow+0x16>
 80077b6:	2302      	movs	r3, #2
 80077b8:	e01f      	b.n	80077fa <HAL_RTCEx_EnableBypassShadow+0x56>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077ca:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80077cc:	22ca      	movs	r2, #202	; 0xca
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24
 80077d0:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80077d2:	2253      	movs	r2, #83	; 0x53
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80077d6:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	4a0a      	ldr	r2, [pc, #40]	; (8007804 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80077dc:	f043 0320 	orr.w	r3, r3, #32
 80077e0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e2:	4b08      	ldr	r3, [pc, #32]	; (8007804 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80077e4:	22ff      	movs	r2, #255	; 0xff
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr
 8007804:	40002800 	.word	0x40002800

08007808 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d101      	bne.n	800781e <HAL_RTCEx_SetSSRU_IT+0x16>
 800781a:	2302      	movs	r3, #2
 800781c:	e027      	b.n	800786e <HAL_RTCEx_SetSSRU_IT+0x66>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800782e:	4b12      	ldr	r3, [pc, #72]	; (8007878 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007830:	22ca      	movs	r2, #202	; 0xca
 8007832:	625a      	str	r2, [r3, #36]	; 0x24
 8007834:	4b10      	ldr	r3, [pc, #64]	; (8007878 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007836:	2253      	movs	r2, #83	; 0x53
 8007838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800783a:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	4a0e      	ldr	r2, [pc, #56]	; (8007878 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007844:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007846:	4b0d      	ldr	r3, [pc, #52]	; (800787c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800784c:	4a0b      	ldr	r2, [pc, #44]	; (800787c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800784e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007852:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007856:	4b08      	ldr	r3, [pc, #32]	; (8007878 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007858:	22ff      	movs	r2, #255	; 0xff
 800785a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	40002800 	.word	0x40002800
 800787c:	58000800 	.word	0x58000800

08007880 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800788a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007896:	2240      	movs	r2, #64	; 0x40
 8007898:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fa fd17 	bl	80022ce <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40002800 	.word	0x40002800

080078b4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bc80      	pop	{r7}
 80078c4:	4770      	bx	lr
	...

080078c8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80078d4:	4b07      	ldr	r3, [pc, #28]	; (80078f4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80078d6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4413      	add	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	601a      	str	r2, [r3, #0]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	4000b100 	.word	0x4000b100

080078f8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007902:	4b07      	ldr	r3, [pc, #28]	; (8007920 <HAL_RTCEx_BKUPRead+0x28>)
 8007904:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bc80      	pop	{r7}
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	4000b100 	.word	0x4000b100

08007924 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007934:	4904      	ldr	r1, [pc, #16]	; (8007948 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	4313      	orrs	r3, r2
 800793a:	608b      	str	r3, [r1, #8]
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	58000400 	.word	0x58000400

0800794c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007956:	4a04      	ldr	r2, [pc, #16]	; (8007968 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007960:	bf00      	nop
 8007962:	46bd      	mov	sp, r7
 8007964:	bc80      	pop	{r7}
 8007966:	4770      	bx	lr
 8007968:	58000400 	.word	0x58000400

0800796c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007976:	4a04      	ldr	r2, [pc, #16]	; (8007988 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007978:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800797c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007980:	bf00      	nop
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	58000400 	.word	0x58000400

0800798c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007996:	619a      	str	r2, [r3, #24]
}
 8007998:	bf00      	nop
 800799a:	46bd      	mov	sp, r7
 800799c:	bc80      	pop	{r7}
 800799e:	4770      	bx	lr
 80079a0:	58000400 	.word	0x58000400

080079a4 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 80079a4:	b480      	push	{r7}
 80079a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	f003 0302 	and.w	r3, r3, #2
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d101      	bne.n	80079b8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 80079b4:	2301      	movs	r3, #1
 80079b6:	e000      	b.n	80079ba <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	58000400 	.word	0x58000400

080079c8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80079cc:	4b06      	ldr	r3, [pc, #24]	; (80079e8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	f003 0304 	and.w	r3, r3, #4
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d101      	bne.n	80079dc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bc80      	pop	{r7}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	58000400 	.word	0x58000400

080079ec <LL_RCC_RF_DisableReset>:
{
 80079ec:	b480      	push	{r7}
 80079ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007a04:	bf00      	nop
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bc80      	pop	{r7}
 8007a0a:	4770      	bx	lr

08007a0c <LL_RCC_IsRFUnderReset>:
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a20:	d101      	bne.n	8007a26 <LL_RCC_IsRFUnderReset+0x1a>
 8007a22:	2301      	movs	r3, #1
 8007a24:	e000      	b.n	8007a28 <LL_RCC_IsRFUnderReset+0x1c>
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007a38:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <LL_EXTI_EnableIT_32_63+0x24>)
 8007a3a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007a3e:	4905      	ldr	r1, [pc, #20]	; (8007a54 <LL_EXTI_EnableIT_32_63+0x24>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	58000800 	.word	0x58000800

08007a58 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	73fb      	strb	r3, [r7, #15]
    return status;
 8007a6a:	7bfb      	ldrb	r3, [r7, #15]
 8007a6c:	e04b      	b.n	8007b06 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	799b      	ldrb	r3, [r3, #6]
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d105      	bne.n	8007a88 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7fa f818 	bl	8001ab8 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007a8e:	f7ff ffad 	bl	80079ec <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007a92:	4b1f      	ldr	r3, [pc, #124]	; (8007b10 <HAL_SUBGHZ_Init+0xb8>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	4613      	mov	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	0cdb      	lsrs	r3, r3, #19
 8007aa0:	2264      	movs	r2, #100	; 0x64
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d105      	bne.n	8007aba <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	609a      	str	r2, [r3, #8]
      break;
 8007ab8:	e007      	b.n	8007aca <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007ac0:	f7ff ffa4 	bl	8007a0c <LL_RCC_IsRFUnderReset>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1ee      	bne.n	8007aa8 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007aca:	f7ff ff3f 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007ace:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007ad2:	f7ff ffad 	bl	8007a30 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007ad6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ada:	f7ff ff23 	bl	8007924 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8007ade:	f7ff ff55 	bl	800798c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 faad 	bl	800804c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	719a      	strb	r2, [r3, #6]

  return status;
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000000 	.word	0x20000000

08007b14 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	460b      	mov	r3, r1
 8007b22:	817b      	strh	r3, [r7, #10]
 8007b24:	4613      	mov	r3, r2
 8007b26:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	799b      	ldrb	r3, [r3, #6]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d14a      	bne.n	8007bc8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	795b      	ldrb	r3, [r3, #5]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d101      	bne.n	8007b3e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	e045      	b.n	8007bca <HAL_SUBGHZ_WriteRegisters+0xb6>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2201      	movs	r2, #1
 8007b42:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2202      	movs	r2, #2
 8007b48:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fb4c 	bl	80081e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007b50:	f7ff ff0c 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007b54:	210d      	movs	r1, #13
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fa98 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007b5c:	897b      	ldrh	r3, [r7, #10]
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	4619      	mov	r1, r3
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fa90 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007b6c:	897b      	ldrh	r3, [r7, #10]
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	4619      	mov	r1, r3
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fa8a 	bl	800808c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	82bb      	strh	r3, [r7, #20]
 8007b7c:	e00a      	b.n	8007b94 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007b7e:	8abb      	ldrh	r3, [r7, #20]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	4413      	add	r3, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	4619      	mov	r1, r3
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fa7f 	bl	800808c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007b8e:	8abb      	ldrh	r3, [r7, #20]
 8007b90:	3301      	adds	r3, #1
 8007b92:	82bb      	strh	r3, [r7, #20]
 8007b94:	8aba      	ldrh	r2, [r7, #20]
 8007b96:	893b      	ldrh	r3, [r7, #8]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3f0      	bcc.n	8007b7e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007b9c:	f7ff fed6 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f000 fb45 	bl	8008230 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
 8007bb2:	e001      	b.n	8007bb8 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	715a      	strb	r2, [r3, #5]

    return status;
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
 8007bc6:	e000      	b.n	8007bca <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007bc8:	2302      	movs	r3, #2
  }
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b088      	sub	sp, #32
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	460b      	mov	r3, r1
 8007be0:	817b      	strh	r3, [r7, #10]
 8007be2:	4613      	mov	r3, r2
 8007be4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	799b      	ldrb	r3, [r3, #6]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d14a      	bne.n	8007c8a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	795b      	ldrb	r3, [r3, #5]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d101      	bne.n	8007c00 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	e045      	b.n	8007c8c <HAL_SUBGHZ_ReadRegisters+0xba>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 faee 	bl	80081e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007c0c:	f7ff feae 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007c10:	211d      	movs	r1, #29
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 fa3a 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007c18:	897b      	ldrh	r3, [r7, #10]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	4619      	mov	r1, r3
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 fa32 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007c28:	897b      	ldrh	r3, [r7, #10]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	68f8      	ldr	r0, [r7, #12]
 8007c30:	f000 fa2c 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007c34:	2100      	movs	r1, #0
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 fa28 	bl	800808c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	82fb      	strh	r3, [r7, #22]
 8007c40:	e009      	b.n	8007c56 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007c42:	69b9      	ldr	r1, [r7, #24]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fa77 	bl	8008138 <SUBGHZSPI_Receive>
      pData++;
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007c50:	8afb      	ldrh	r3, [r7, #22]
 8007c52:	3301      	adds	r3, #1
 8007c54:	82fb      	strh	r3, [r7, #22]
 8007c56:	8afa      	ldrh	r2, [r7, #22]
 8007c58:	893b      	ldrh	r3, [r7, #8]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d3f1      	bcc.n	8007c42 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007c5e:	f7ff fe75 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	f000 fae4 	bl	8008230 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e001      	b.n	8007c7a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007c76:	2300      	movs	r3, #0
 8007c78:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2200      	movs	r2, #0
 8007c84:	715a      	strb	r2, [r3, #5]

    return status;
 8007c86:	7ffb      	ldrb	r3, [r7, #31]
 8007c88:	e000      	b.n	8007c8c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3720      	adds	r7, #32
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	72fb      	strb	r3, [r7, #11]
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	799b      	ldrb	r3, [r3, #6]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d14a      	bne.n	8007d48 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	795b      	ldrb	r3, [r3, #5]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e045      	b.n	8007d4a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 fa8f 	bl	80081e8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	2b84      	cmp	r3, #132	; 0x84
 8007cce:	d002      	beq.n	8007cd6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007cd0:	7afb      	ldrb	r3, [r7, #11]
 8007cd2:	2b94      	cmp	r3, #148	; 0x94
 8007cd4:	d103      	bne.n	8007cde <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	711a      	strb	r2, [r3, #4]
 8007cdc:	e002      	b.n	8007ce4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007ce4:	f7ff fe42 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007ce8:	7afb      	ldrb	r3, [r7, #11]
 8007cea:	4619      	mov	r1, r3
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 f9cd 	bl	800808c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	82bb      	strh	r3, [r7, #20]
 8007cf6:	e00a      	b.n	8007d0e <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007cf8:	8abb      	ldrh	r3, [r7, #20]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	4619      	mov	r1, r3
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f000 f9c2 	bl	800808c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007d08:	8abb      	ldrh	r3, [r7, #20]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	82bb      	strh	r3, [r7, #20]
 8007d0e:	8aba      	ldrh	r2, [r7, #20]
 8007d10:	893b      	ldrh	r3, [r7, #8]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d3f0      	bcc.n	8007cf8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007d16:	f7ff fe19 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8007d1a:	7afb      	ldrb	r3, [r7, #11]
 8007d1c:	2b84      	cmp	r3, #132	; 0x84
 8007d1e:	d002      	beq.n	8007d26 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 fa85 	bl	8008230 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
 8007d32:	e001      	b.n	8007d38 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	715a      	strb	r2, [r3, #5]

    return status;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	e000      	b.n	8007d4a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007d48:	2302      	movs	r3, #2
  }
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3718      	adds	r7, #24
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b088      	sub	sp, #32
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	460b      	mov	r3, r1
 8007d60:	72fb      	strb	r3, [r7, #11]
 8007d62:	4613      	mov	r3, r2
 8007d64:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	799b      	ldrb	r3, [r3, #6]
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d13d      	bne.n	8007df0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	795b      	ldrb	r3, [r3, #5]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d101      	bne.n	8007d80 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e038      	b.n	8007df2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fa2e 	bl	80081e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007d8c:	f7ff fdee 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007d90:	7afb      	ldrb	r3, [r7, #11]
 8007d92:	4619      	mov	r1, r3
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f979 	bl	800808c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f000 f975 	bl	800808c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	82fb      	strh	r3, [r7, #22]
 8007da6:	e009      	b.n	8007dbc <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007da8:	69b9      	ldr	r1, [r7, #24]
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f9c4 	bl	8008138 <SUBGHZSPI_Receive>
      pData++;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	3301      	adds	r3, #1
 8007db4:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007db6:	8afb      	ldrh	r3, [r7, #22]
 8007db8:	3301      	adds	r3, #1
 8007dba:	82fb      	strh	r3, [r7, #22]
 8007dbc:	8afa      	ldrh	r2, [r7, #22]
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d3f1      	bcc.n	8007da8 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007dc4:	f7ff fdc2 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 fa31 	bl	8008230 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	77fb      	strb	r3, [r7, #31]
 8007dda:	e001      	b.n	8007de0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2201      	movs	r2, #1
 8007de4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	715a      	strb	r2, [r3, #5]

    return status;
 8007dec:	7ffb      	ldrb	r3, [r7, #31]
 8007dee:	e000      	b.n	8007df2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007df0:	2302      	movs	r3, #2
  }
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3720      	adds	r7, #32
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	461a      	mov	r2, r3
 8007e06:	460b      	mov	r3, r1
 8007e08:	72fb      	strb	r3, [r7, #11]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	799b      	ldrb	r3, [r3, #6]
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d13e      	bne.n	8007e96 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	795b      	ldrb	r3, [r3, #5]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d101      	bne.n	8007e24 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007e20:	2302      	movs	r3, #2
 8007e22:	e039      	b.n	8007e98 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f9dc 	bl	80081e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007e30:	f7ff fd9c 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007e34:	210e      	movs	r1, #14
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 f928 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f923 	bl	800808c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007e46:	2300      	movs	r3, #0
 8007e48:	82bb      	strh	r3, [r7, #20]
 8007e4a:	e00a      	b.n	8007e62 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007e4c:	8abb      	ldrh	r3, [r7, #20]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	4413      	add	r3, r2
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	4619      	mov	r1, r3
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 f918 	bl	800808c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007e5c:	8abb      	ldrh	r3, [r7, #20]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	82bb      	strh	r3, [r7, #20]
 8007e62:	8aba      	ldrh	r2, [r7, #20]
 8007e64:	893b      	ldrh	r3, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d3f0      	bcc.n	8007e4c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007e6a:	f7ff fd6f 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007e6e:	68f8      	ldr	r0, [r7, #12]
 8007e70:	f000 f9de 	bl	8008230 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
 8007e80:	e001      	b.n	8007e86 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	715a      	strb	r2, [r3, #5]

    return status;
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	e000      	b.n	8007e98 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007e96:	2302      	movs	r3, #2
  }
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b088      	sub	sp, #32
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	607a      	str	r2, [r7, #4]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	460b      	mov	r3, r1
 8007eae:	72fb      	strb	r3, [r7, #11]
 8007eb0:	4613      	mov	r3, r2
 8007eb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	799b      	ldrb	r3, [r3, #6]
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d141      	bne.n	8007f46 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	795b      	ldrb	r3, [r3, #5]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d101      	bne.n	8007ece <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e03c      	b.n	8007f48 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 f987 	bl	80081e8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007eda:	f7ff fd47 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007ede:	211e      	movs	r1, #30
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f8d3 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007ee6:	7afb      	ldrb	r3, [r7, #11]
 8007ee8:	4619      	mov	r1, r3
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 f8ce 	bl	800808c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f000 f8ca 	bl	800808c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007ef8:	2300      	movs	r3, #0
 8007efa:	82fb      	strh	r3, [r7, #22]
 8007efc:	e009      	b.n	8007f12 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007efe:	69b9      	ldr	r1, [r7, #24]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f919 	bl	8008138 <SUBGHZSPI_Receive>
      pData++;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007f0c:	8afb      	ldrh	r3, [r7, #22]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	82fb      	strh	r3, [r7, #22]
 8007f12:	8afa      	ldrh	r2, [r7, #22]
 8007f14:	893b      	ldrh	r3, [r7, #8]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d3f1      	bcc.n	8007efe <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007f1a:	f7ff fd17 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f986 	bl	8008230 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	77fb      	strb	r3, [r7, #31]
 8007f30:	e001      	b.n	8007f36 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	715a      	strb	r2, [r3, #5]

    return status;
 8007f42:	7ffb      	ldrb	r3, [r7, #31]
 8007f44:	e000      	b.n	8007f48 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007f46:	2302      	movs	r3, #2
  }
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007f58:	2300      	movs	r3, #0
 8007f5a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007f5c:	f107 020c 	add.w	r2, r7, #12
 8007f60:	2302      	movs	r3, #2
 8007f62:	2112      	movs	r1, #18
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fef4 	bl	8007d52 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007f6a:	7b3b      	ldrb	r3, [r7, #12]
 8007f6c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007f6e:	89fb      	ldrh	r3, [r7, #14]
 8007f70:	021b      	lsls	r3, r3, #8
 8007f72:	b21a      	sxth	r2, r3
 8007f74:	7b7b      	ldrb	r3, [r7, #13]
 8007f76:	b21b      	sxth	r3, r3
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	b21b      	sxth	r3, r3
 8007f7c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007f7e:	89fb      	ldrh	r3, [r7, #14]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f013 ff79 	bl	801be80 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	085b      	lsrs	r3, r3, #1
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f013 ff7e 	bl	801be9c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007fa0:	89fb      	ldrh	r3, [r7, #14]
 8007fa2:	089b      	lsrs	r3, r3, #2
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f013 ffcd 	bl	801bf4c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007fb2:	89fb      	ldrh	r3, [r7, #14]
 8007fb4:	08db      	lsrs	r3, r3, #3
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f013 ffd2 	bl	801bf68 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	091b      	lsrs	r3, r3, #4
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d002      	beq.n	8007fd6 <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f013 ffd7 	bl	801bf84 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007fd6:	89fb      	ldrh	r3, [r7, #14]
 8007fd8:	095b      	lsrs	r3, r3, #5
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f013 ffa4 	bl	801bf30 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	099b      	lsrs	r3, r3, #6
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d002      	beq.n	8007ffa <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f013 ff5f 	bl	801beb8 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007ffa:	89fb      	ldrh	r3, [r7, #14]
 8007ffc:	09db      	lsrs	r3, r3, #7
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8008006:	89fb      	ldrh	r3, [r7, #14]
 8008008:	0a1b      	lsrs	r3, r3, #8
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d004      	beq.n	800801c <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008012:	2101      	movs	r1, #1
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f013 ff5d 	bl	801bed4 <HAL_SUBGHZ_CADStatusCallback>
 800801a:	e003      	b.n	8008024 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800801c:	2100      	movs	r1, #0
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f013 ff58 	bl	801bed4 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008024:	89fb      	ldrh	r3, [r7, #14]
 8008026:	0a5b      	lsrs	r3, r3, #9
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f013 ff6d 	bl	801bf10 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 8008036:	f107 020c 	add.w	r2, r7, #12
 800803a:	2302      	movs	r3, #2
 800803c:	2102      	movs	r1, #2
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fe28 	bl	8007c94 <HAL_SUBGHZ_ExecSetCmd>
}
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008054:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <SUBGHZSPI_Init+0x3c>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a0b      	ldr	r2, [pc, #44]	; (8008088 <SUBGHZSPI_Init+0x3c>)
 800805a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008060:	4a09      	ldr	r2, [pc, #36]	; (8008088 <SUBGHZSPI_Init+0x3c>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008068:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <SUBGHZSPI_Init+0x3c>)
 800806c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008070:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <SUBGHZSPI_Init+0x3c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a04      	ldr	r2, [pc, #16]	; (8008088 <SUBGHZSPI_Init+0x3c>)
 8008078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800807c:	6013      	str	r3, [r2, #0]
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr
 8008088:	58010000 	.word	0x58010000

0800808c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	460b      	mov	r3, r1
 8008096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800809c:	4b23      	ldr	r3, [pc, #140]	; (800812c <SUBGHZSPI_Transmit+0xa0>)
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	0cdb      	lsrs	r3, r3, #19
 80080aa:	2264      	movs	r2, #100	; 0x64
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d105      	bne.n	80080c4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	609a      	str	r2, [r3, #8]
      break;
 80080c2:	e008      	b.n	80080d6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3b01      	subs	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80080ca:	4b19      	ldr	r3, [pc, #100]	; (8008130 <SUBGHZSPI_Transmit+0xa4>)
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d1ed      	bne.n	80080b2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80080d6:	4b17      	ldr	r3, [pc, #92]	; (8008134 <SUBGHZSPI_Transmit+0xa8>)
 80080d8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80080e0:	4b12      	ldr	r3, [pc, #72]	; (800812c <SUBGHZSPI_Transmit+0xa0>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4613      	mov	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	1a9b      	subs	r3, r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	0cdb      	lsrs	r3, r3, #19
 80080ee:	2264      	movs	r2, #100	; 0x64
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d105      	bne.n	8008108 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	609a      	str	r2, [r3, #8]
      break;
 8008106:	e008      	b.n	800811a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3b01      	subs	r3, #1
 800810c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800810e:	4b08      	ldr	r3, [pc, #32]	; (8008130 <SUBGHZSPI_Transmit+0xa4>)
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b01      	cmp	r3, #1
 8008118:	d1ed      	bne.n	80080f6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800811a:	4b05      	ldr	r3, [pc, #20]	; (8008130 <SUBGHZSPI_Transmit+0xa4>)
 800811c:	68db      	ldr	r3, [r3, #12]

  return status;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008120:	4618      	mov	r0, r3
 8008122:	371c      	adds	r7, #28
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000000 	.word	0x20000000
 8008130:	58010000 	.word	0x58010000
 8008134:	5801000c 	.word	0x5801000c

08008138 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008146:	4b25      	ldr	r3, [pc, #148]	; (80081dc <SUBGHZSPI_Receive+0xa4>)
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	4613      	mov	r3, r2
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	0cdb      	lsrs	r3, r3, #19
 8008154:	2264      	movs	r2, #100	; 0x64
 8008156:	fb02 f303 	mul.w	r3, r2, r3
 800815a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d105      	bne.n	800816e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	609a      	str	r2, [r3, #8]
      break;
 800816c:	e008      	b.n	8008180 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3b01      	subs	r3, #1
 8008172:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008174:	4b1a      	ldr	r3, [pc, #104]	; (80081e0 <SUBGHZSPI_Receive+0xa8>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 0302 	and.w	r3, r3, #2
 800817c:	2b02      	cmp	r3, #2
 800817e:	d1ed      	bne.n	800815c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008180:	4b18      	ldr	r3, [pc, #96]	; (80081e4 <SUBGHZSPI_Receive+0xac>)
 8008182:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	22ff      	movs	r2, #255	; 0xff
 8008188:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800818a:	4b14      	ldr	r3, [pc, #80]	; (80081dc <SUBGHZSPI_Receive+0xa4>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	0cdb      	lsrs	r3, r3, #19
 8008198:	2264      	movs	r2, #100	; 0x64
 800819a:	fb02 f303 	mul.w	r3, r2, r3
 800819e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	609a      	str	r2, [r3, #8]
      break;
 80081b0:	e008      	b.n	80081c4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80081b8:	4b09      	ldr	r3, [pc, #36]	; (80081e0 <SUBGHZSPI_Receive+0xa8>)
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d1ed      	bne.n	80081a0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80081c4:	4b06      	ldr	r3, [pc, #24]	; (80081e0 <SUBGHZSPI_Receive+0xa8>)
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	701a      	strb	r2, [r3, #0]

  return status;
 80081ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	371c      	adds	r7, #28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bc80      	pop	{r7}
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20000000 	.word	0x20000000
 80081e0:	58010000 	.word	0x58010000
 80081e4:	5801000c 	.word	0x5801000c

080081e8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	791b      	ldrb	r3, [r3, #4]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d111      	bne.n	800821c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80081f8:	4b0c      	ldr	r3, [pc, #48]	; (800822c <SUBGHZ_CheckDeviceReady+0x44>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	4413      	add	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008208:	f7ff fbb0 	bl	800796c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3b01      	subs	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1f9      	bne.n	800820c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008218:	f7ff fb98 	bl	800794c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f807 	bl	8008230 <SUBGHZ_WaitOnBusy>
 8008222:	4603      	mov	r3, r0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000000 	.word	0x20000000

08008230 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <SUBGHZ_WaitOnBusy+0x58>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	4413      	add	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	0d1b      	lsrs	r3, r3, #20
 800824a:	2264      	movs	r2, #100	; 0x64
 800824c:	fb02 f303 	mul.w	r3, r2, r3
 8008250:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008252:	f7ff fbb9 	bl	80079c8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8008256:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d105      	bne.n	800826a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2202      	movs	r2, #2
 8008266:	609a      	str	r2, [r3, #8]
      break;
 8008268:	e009      	b.n	800827e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3b01      	subs	r3, #1
 800826e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008270:	f7ff fb98 	bl	80079a4 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008274:	4602      	mov	r2, r0
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	4013      	ands	r3, r2
 800827a:	2b01      	cmp	r3, #1
 800827c:	d0e9      	beq.n	8008252 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800827e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3718      	adds	r7, #24
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20000000 	.word	0x20000000

0800828c <LL_RCC_GetUSARTClockSource>:
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008298:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	401a      	ands	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	4313      	orrs	r3, r2
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bc80      	pop	{r7}
 80082ae:	4770      	bx	lr

080082b0 <LL_RCC_GetLPUARTClockSource>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80082b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4013      	ands	r3, r2
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b082      	sub	sp, #8
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e042      	b.n	8008366 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7fa fa0e 	bl	8002714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2224      	movs	r2, #36	; 0x24
 80082fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0201 	bic.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 fc4b 	bl	8008bac <UART_SetConfig>
 8008316:	4603      	mov	r3, r0
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e022      	b.n	8008366 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	2b00      	cmp	r3, #0
 8008326:	d002      	beq.n	800832e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 feb3 	bl	8009094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	685a      	ldr	r2, [r3, #4]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800833c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800834c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f042 0201 	orr.w	r2, r2, #1
 800835c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 ff39 	bl	80091d6 <UART_CheckIdleState>
 8008364:	4603      	mov	r3, r0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	4613      	mov	r3, r2
 800837c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008384:	2b20      	cmp	r3, #32
 8008386:	d142      	bne.n	800840e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <HAL_UART_Receive_IT+0x24>
 800838e:	88fb      	ldrh	r3, [r7, #6]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e03b      	b.n	8008410 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d101      	bne.n	80083a6 <HAL_UART_Receive_IT+0x36>
 80083a2:	2302      	movs	r3, #2
 80083a4:	e034      	b.n	8008410 <HAL_UART_Receive_IT+0xa0>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a17      	ldr	r2, [pc, #92]	; (8008418 <HAL_UART_Receive_IT+0xa8>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d01f      	beq.n	80083fe <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d018      	beq.n	80083fe <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	613b      	str	r3, [r7, #16]
   return(result);
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	623b      	str	r3, [r7, #32]
 80083ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	69f9      	ldr	r1, [r7, #28]
 80083f0:	6a3a      	ldr	r2, [r7, #32]
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e6      	bne.n	80083cc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	461a      	mov	r2, r3
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 fff9 	bl	80093fc <UART_Start_Receive_IT>
 800840a:	4603      	mov	r3, r0
 800840c:	e000      	b.n	8008410 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800840e:	2302      	movs	r3, #2
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3728      	adds	r7, #40	; 0x28
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	40008000 	.word	0x40008000

0800841c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008430:	2b20      	cmp	r3, #32
 8008432:	d17a      	bne.n	800852a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d002      	beq.n	8008440 <HAL_UART_Transmit_DMA+0x24>
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e073      	b.n	800852c <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_UART_Transmit_DMA+0x36>
 800844e:	2302      	movs	r3, #2
 8008450:	e06c      	b.n	800852c <HAL_UART_Transmit_DMA+0x110>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2201      	movs	r2, #1
 8008456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	88fa      	ldrh	r2, [r7, #6]
 800846c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2221      	movs	r2, #33	; 0x21
 800847c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008484:	2b00      	cmp	r3, #0
 8008486:	d02c      	beq.n	80084e2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800848c:	4a29      	ldr	r2, [pc, #164]	; (8008534 <HAL_UART_Transmit_DMA+0x118>)
 800848e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008494:	4a28      	ldr	r2, [pc, #160]	; (8008538 <HAL_UART_Transmit_DMA+0x11c>)
 8008496:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800849c:	4a27      	ldr	r2, [pc, #156]	; (800853c <HAL_UART_Transmit_DMA+0x120>)
 800849e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084a4:	2200      	movs	r2, #0
 80084a6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	4619      	mov	r1, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3328      	adds	r3, #40	; 0x28
 80084b8:	461a      	mov	r2, r3
 80084ba:	88fb      	ldrh	r3, [r7, #6]
 80084bc:	f7fb fece 	bl	800425c <HAL_DMA_Start_IT>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00d      	beq.n	80084e2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2210      	movs	r2, #16
 80084ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2220      	movs	r2, #32
 80084da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e024      	b.n	800852c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2240      	movs	r2, #64	; 0x40
 80084e8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3308      	adds	r3, #8
 80084f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	e853 3f00 	ldrex	r3, [r3]
 8008500:	613b      	str	r3, [r7, #16]
   return(result);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008508:	627b      	str	r3, [r7, #36]	; 0x24
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008512:	623a      	str	r2, [r7, #32]
 8008514:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008516:	69f9      	ldr	r1, [r7, #28]
 8008518:	6a3a      	ldr	r2, [r7, #32]
 800851a:	e841 2300 	strex	r3, r2, [r1]
 800851e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1e5      	bne.n	80084f2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3728      	adds	r7, #40	; 0x28
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	08009797 	.word	0x08009797
 8008538:	08009831 	.word	0x08009831
 800853c:	0800984d 	.word	0x0800984d

08008540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b0ba      	sub	sp, #232	; 0xe8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800856a:	f640 030f 	movw	r3, #2063	; 0x80f
 800856e:	4013      	ands	r3, r2
 8008570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008578:	2b00      	cmp	r3, #0
 800857a:	d11b      	bne.n	80085b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800857c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008580:	f003 0320 	and.w	r3, r3, #32
 8008584:	2b00      	cmp	r3, #0
 8008586:	d015      	beq.n	80085b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d105      	bne.n	80085a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d009      	beq.n	80085b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 82d6 	beq.w	8008b56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
      }
      return;
 80085b2:	e2d0      	b.n	8008b56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 811f 	beq.w	80087fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085c2:	4b8b      	ldr	r3, [pc, #556]	; (80087f0 <HAL_UART_IRQHandler+0x2b0>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80085ce:	4b89      	ldr	r3, [pc, #548]	; (80087f4 <HAL_UART_IRQHandler+0x2b4>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8112 	beq.w	80087fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d011      	beq.n	8008608 <HAL_UART_IRQHandler+0xc8>
 80085e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2201      	movs	r2, #1
 80085f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fe:	f043 0201 	orr.w	r2, r3, #1
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <HAL_UART_IRQHandler+0xf8>
 8008614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008618:	f003 0301 	and.w	r3, r3, #1
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00b      	beq.n	8008638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2202      	movs	r2, #2
 8008626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800862e:	f043 0204 	orr.w	r2, r3, #4
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d011      	beq.n	8008668 <HAL_UART_IRQHandler+0x128>
 8008644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00b      	beq.n	8008668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2204      	movs	r2, #4
 8008656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800865e:	f043 0202 	orr.w	r2, r3, #2
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d017      	beq.n	80086a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008678:	f003 0320 	and.w	r3, r3, #32
 800867c:	2b00      	cmp	r3, #0
 800867e:	d105      	bne.n	800868c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008684:	4b5a      	ldr	r3, [pc, #360]	; (80087f0 <HAL_UART_IRQHandler+0x2b0>)
 8008686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00b      	beq.n	80086a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2208      	movs	r2, #8
 8008692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800869a:	f043 0208 	orr.w	r2, r3, #8
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d012      	beq.n	80086d6 <HAL_UART_IRQHandler+0x196>
 80086b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00c      	beq.n	80086d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086cc:	f043 0220 	orr.w	r2, r3, #32
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f000 823c 	beq.w	8008b5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d013      	beq.n	8008716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d105      	bne.n	8008706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800871c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872a:	2b40      	cmp	r3, #64	; 0x40
 800872c:	d005      	beq.n	800873a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800872e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008732:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04f      	beq.n	80087da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 ffc6 	bl	80096cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874a:	2b40      	cmp	r3, #64	; 0x40
 800874c:	d141      	bne.n	80087d2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800877a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800877e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1d9      	bne.n	800874e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d013      	beq.n	80087ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a6:	4a14      	ldr	r2, [pc, #80]	; (80087f8 <HAL_UART_IRQHandler+0x2b8>)
 80087a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fb fe30 	bl	8004414 <HAL_DMA_Abort_IT>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d017      	beq.n	80087ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80087c4:	4610      	mov	r0, r2
 80087c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	e00f      	b.n	80087ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 f9d9 	bl	8008b82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d0:	e00b      	b.n	80087ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 f9d5 	bl	8008b82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087d8:	e007      	b.n	80087ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f9d1 	bl	8008b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80087e8:	e1b7      	b.n	8008b5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ea:	bf00      	nop
    return;
 80087ec:	e1b5      	b.n	8008b5a <HAL_UART_IRQHandler+0x61a>
 80087ee:	bf00      	nop
 80087f0:	10000001 	.word	0x10000001
 80087f4:	04000120 	.word	0x04000120
 80087f8:	080098cd 	.word	0x080098cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008800:	2b01      	cmp	r3, #1
 8008802:	f040 814a 	bne.w	8008a9a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 8143 	beq.w	8008a9a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 813c 	beq.w	8008a9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2210      	movs	r2, #16
 8008828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	f040 80b5 	bne.w	80089a4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800884a:	2b00      	cmp	r3, #0
 800884c:	f000 8187 	beq.w	8008b5e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800885a:	429a      	cmp	r2, r3
 800885c:	f080 817f 	bcs.w	8008b5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008866:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 0320 	and.w	r3, r3, #32
 8008876:	2b00      	cmp	r3, #0
 8008878:	f040 8086 	bne.w	8008988 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008888:	e853 3f00 	ldrex	r3, [r3]
 800888c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1da      	bne.n	800887c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088f6:	e841 2300 	strex	r3, r2, [r1]
 80088fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1e1      	bne.n	80088c6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3308      	adds	r3, #8
 8008908:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3308      	adds	r3, #8
 8008922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008928:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800892c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e3      	bne.n	8008902 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008958:	f023 0310 	bic.w	r3, r3, #16
 800895c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800896a:	65bb      	str	r3, [r7, #88]	; 0x58
 800896c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e4      	bne.n	8008948 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008982:	4618      	mov	r0, r3
 8008984:	f7fb fce8 	bl	8004358 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008994:	b29b      	uxth	r3, r3
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	b29b      	uxth	r3, r3
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f8f9 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80089a2:	e0dc      	b.n	8008b5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089be:	b29b      	uxth	r3, r3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f000 80ce 	beq.w	8008b62 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 80089c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f000 80c9 	beq.w	8008b62 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80089f2:	647b      	str	r3, [r7, #68]	; 0x44
 80089f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80089f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e4      	bne.n	80089d0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	623b      	str	r3, [r7, #32]
   return(result);
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	f023 0301 	bic.w	r3, r3, #1
 8008a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3308      	adds	r3, #8
 8008a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8008a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e1      	bne.n	8008a06 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2220      	movs	r2, #32
 8008a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f023 0310 	bic.w	r3, r3, #16
 8008a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a78:	61fb      	str	r3, [r7, #28]
 8008a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7c:	69b9      	ldr	r1, [r7, #24]
 8008a7e:	69fa      	ldr	r2, [r7, #28]
 8008a80:	e841 2300 	strex	r3, r2, [r1]
 8008a84:	617b      	str	r3, [r7, #20]
   return(result);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e4      	bne.n	8008a56 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 f87e 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008a98:	e063      	b.n	8008b62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00e      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x584>
 8008aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d008      	beq.n	8008ac4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008aba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f001 fba3 	bl	800a208 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ac2:	e051      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d014      	beq.n	8008afa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d105      	bne.n	8008ae8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d008      	beq.n	8008afa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d03a      	beq.n	8008b66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
    }
    return;
 8008af8:	e035      	b.n	8008b66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <HAL_UART_IRQHandler+0x5da>
 8008b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d003      	beq.n	8008b1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fef0 	bl	80098f8 <UART_EndTransmit_IT>
    return;
 8008b18:	e026      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d009      	beq.n	8008b3a <HAL_UART_IRQHandler+0x5fa>
 8008b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fb7a 	bl	800a22c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b38:	e016      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d010      	beq.n	8008b68 <HAL_UART_IRQHandler+0x628>
 8008b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	da0c      	bge.n	8008b68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fb63 	bl	800a21a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b54:	e008      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
      return;
 8008b56:	bf00      	nop
 8008b58:	e006      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
    return;
 8008b5a:	bf00      	nop
 8008b5c:	e004      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
      return;
 8008b5e:	bf00      	nop
 8008b60:	e002      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
      return;
 8008b62:	bf00      	nop
 8008b64:	e000      	b.n	8008b68 <HAL_UART_IRQHandler+0x628>
    return;
 8008b66:	bf00      	nop
  }
}
 8008b68:	37e8      	adds	r7, #232	; 0xe8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr

08008b82 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba0:	bf00      	nop
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr
	...

08008bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bb0:	b08c      	sub	sp, #48	; 0x30
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	4b94      	ldr	r3, [pc, #592]	; (8008e2c <UART_SetConfig+0x280>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	697a      	ldr	r2, [r7, #20]
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be4:	430b      	orrs	r3, r1
 8008be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	68da      	ldr	r2, [r3, #12]
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	430a      	orrs	r2, r1
 8008bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a89      	ldr	r2, [pc, #548]	; (8008e30 <UART_SetConfig+0x284>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d004      	beq.n	8008c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c14:	4313      	orrs	r3, r2
 8008c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008c22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	6812      	ldr	r2, [r2, #0]
 8008c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c2c:	430b      	orrs	r3, r1
 8008c2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	f023 010f 	bic.w	r1, r3, #15
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	430a      	orrs	r2, r1
 8008c44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a7a      	ldr	r2, [pc, #488]	; (8008e34 <UART_SetConfig+0x288>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d127      	bne.n	8008ca0 <UART_SetConfig+0xf4>
 8008c50:	2003      	movs	r0, #3
 8008c52:	f7ff fb1b 	bl	800828c <LL_RCC_GetUSARTClockSource>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d81b      	bhi.n	8008c98 <UART_SetConfig+0xec>
 8008c60:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <UART_SetConfig+0xbc>)
 8008c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c66:	bf00      	nop
 8008c68:	08008c79 	.word	0x08008c79
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c81 	.word	0x08008c81
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	2301      	movs	r3, #1
 8008c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c7e:	e080      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008c80:	2302      	movs	r3, #2
 8008c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c86:	e07c      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c8e:	e078      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c96:	e074      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c9e:	e070      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a64      	ldr	r2, [pc, #400]	; (8008e38 <UART_SetConfig+0x28c>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d138      	bne.n	8008d1c <UART_SetConfig+0x170>
 8008caa:	200c      	movs	r0, #12
 8008cac:	f7ff faee 	bl	800828c <LL_RCC_GetUSARTClockSource>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008cb6:	2b0c      	cmp	r3, #12
 8008cb8:	d82c      	bhi.n	8008d14 <UART_SetConfig+0x168>
 8008cba:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <UART_SetConfig+0x114>)
 8008cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc0:	08008cf5 	.word	0x08008cf5
 8008cc4:	08008d15 	.word	0x08008d15
 8008cc8:	08008d15 	.word	0x08008d15
 8008ccc:	08008d15 	.word	0x08008d15
 8008cd0:	08008d05 	.word	0x08008d05
 8008cd4:	08008d15 	.word	0x08008d15
 8008cd8:	08008d15 	.word	0x08008d15
 8008cdc:	08008d15 	.word	0x08008d15
 8008ce0:	08008cfd 	.word	0x08008cfd
 8008ce4:	08008d15 	.word	0x08008d15
 8008ce8:	08008d15 	.word	0x08008d15
 8008cec:	08008d15 	.word	0x08008d15
 8008cf0:	08008d0d 	.word	0x08008d0d
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008cfa:	e042      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008cfc:	2302      	movs	r3, #2
 8008cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d02:	e03e      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d04:	2304      	movs	r3, #4
 8008d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d0a:	e03a      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d0c:	2308      	movs	r3, #8
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d12:	e036      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d14:	2310      	movs	r3, #16
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1a:	e032      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a43      	ldr	r2, [pc, #268]	; (8008e30 <UART_SetConfig+0x284>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d12a      	bne.n	8008d7c <UART_SetConfig+0x1d0>
 8008d26:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008d2a:	f7ff fac1 	bl	80082b0 <LL_RCC_GetLPUARTClockSource>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d34:	d01a      	beq.n	8008d6c <UART_SetConfig+0x1c0>
 8008d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d3a:	d81b      	bhi.n	8008d74 <UART_SetConfig+0x1c8>
 8008d3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d40:	d00c      	beq.n	8008d5c <UART_SetConfig+0x1b0>
 8008d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d46:	d815      	bhi.n	8008d74 <UART_SetConfig+0x1c8>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <UART_SetConfig+0x1a8>
 8008d4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d50:	d008      	beq.n	8008d64 <UART_SetConfig+0x1b8>
 8008d52:	e00f      	b.n	8008d74 <UART_SetConfig+0x1c8>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d5a:	e012      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d62:	e00e      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d64:	2304      	movs	r3, #4
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d6a:	e00a      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d72:	e006      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d74:	2310      	movs	r3, #16
 8008d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d7a:	e002      	b.n	8008d82 <UART_SetConfig+0x1d6>
 8008d7c:	2310      	movs	r3, #16
 8008d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a2a      	ldr	r2, [pc, #168]	; (8008e30 <UART_SetConfig+0x284>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	f040 80a4 	bne.w	8008ed6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d92:	2b08      	cmp	r3, #8
 8008d94:	d823      	bhi.n	8008dde <UART_SetConfig+0x232>
 8008d96:	a201      	add	r2, pc, #4	; (adr r2, 8008d9c <UART_SetConfig+0x1f0>)
 8008d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008ddf 	.word	0x08008ddf
 8008da4:	08008dc9 	.word	0x08008dc9
 8008da8:	08008ddf 	.word	0x08008ddf
 8008dac:	08008dcf 	.word	0x08008dcf
 8008db0:	08008ddf 	.word	0x08008ddf
 8008db4:	08008ddf 	.word	0x08008ddf
 8008db8:	08008ddf 	.word	0x08008ddf
 8008dbc:	08008dd7 	.word	0x08008dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dc0:	f7fd ff48 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 8008dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dc6:	e010      	b.n	8008dea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008dc8:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <UART_SetConfig+0x290>)
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008dcc:	e00d      	b.n	8008dea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dce:	f7fd fe8d 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8008dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008dd4:	e009      	b.n	8008dea <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ddc:	e005      	b.n	8008dea <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008dde:	2300      	movs	r3, #0
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 8137 	beq.w	8009060 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df6:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <UART_SetConfig+0x294>)
 8008df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	005b      	lsls	r3, r3, #1
 8008e0e:	4413      	add	r3, r2
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d305      	bcc.n	8008e22 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d910      	bls.n	8008e44 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e28:	e11a      	b.n	8009060 <UART_SetConfig+0x4b4>
 8008e2a:	bf00      	nop
 8008e2c:	cfff69f3 	.word	0xcfff69f3
 8008e30:	40008000 	.word	0x40008000
 8008e34:	40013800 	.word	0x40013800
 8008e38:	40004400 	.word	0x40004400
 8008e3c:	00f42400 	.word	0x00f42400
 8008e40:	0801eb04 	.word	0x0801eb04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	2200      	movs	r2, #0
 8008e48:	60bb      	str	r3, [r7, #8]
 8008e4a:	60fa      	str	r2, [r7, #12]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	4a8e      	ldr	r2, [pc, #568]	; (800908c <UART_SetConfig+0x4e0>)
 8008e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2200      	movs	r2, #0
 8008e5a:	603b      	str	r3, [r7, #0]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e66:	f7f7 fef3 	bl	8000c50 <__aeabi_uldivmod>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4610      	mov	r0, r2
 8008e70:	4619      	mov	r1, r3
 8008e72:	f04f 0200 	mov.w	r2, #0
 8008e76:	f04f 0300 	mov.w	r3, #0
 8008e7a:	020b      	lsls	r3, r1, #8
 8008e7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008e80:	0202      	lsls	r2, r0, #8
 8008e82:	6979      	ldr	r1, [r7, #20]
 8008e84:	6849      	ldr	r1, [r1, #4]
 8008e86:	0849      	lsrs	r1, r1, #1
 8008e88:	2000      	movs	r0, #0
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	eb12 0804 	adds.w	r8, r2, r4
 8008e92:	eb43 0905 	adc.w	r9, r3, r5
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	469a      	mov	sl, r3
 8008e9e:	4693      	mov	fp, r2
 8008ea0:	4652      	mov	r2, sl
 8008ea2:	465b      	mov	r3, fp
 8008ea4:	4640      	mov	r0, r8
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	f7f7 fed2 	bl	8000c50 <__aeabi_uldivmod>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008eb4:	6a3b      	ldr	r3, [r7, #32]
 8008eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008eba:	d308      	bcc.n	8008ece <UART_SetConfig+0x322>
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ec2:	d204      	bcs.n	8008ece <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6a3a      	ldr	r2, [r7, #32]
 8008eca:	60da      	str	r2, [r3, #12]
 8008ecc:	e0c8      	b.n	8009060 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ed4:	e0c4      	b.n	8009060 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ede:	d168      	bne.n	8008fb2 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008ee0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d828      	bhi.n	8008f3a <UART_SetConfig+0x38e>
 8008ee8:	a201      	add	r2, pc, #4	; (adr r2, 8008ef0 <UART_SetConfig+0x344>)
 8008eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eee:	bf00      	nop
 8008ef0:	08008f15 	.word	0x08008f15
 8008ef4:	08008f1d 	.word	0x08008f1d
 8008ef8:	08008f25 	.word	0x08008f25
 8008efc:	08008f3b 	.word	0x08008f3b
 8008f00:	08008f2b 	.word	0x08008f2b
 8008f04:	08008f3b 	.word	0x08008f3b
 8008f08:	08008f3b 	.word	0x08008f3b
 8008f0c:	08008f3b 	.word	0x08008f3b
 8008f10:	08008f33 	.word	0x08008f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f14:	f7fd fe9e 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 8008f18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f1a:	e014      	b.n	8008f46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f1c:	f7fd feac 	bl	8006c78 <HAL_RCC_GetPCLK2Freq>
 8008f20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f22:	e010      	b.n	8008f46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f24:	4b5a      	ldr	r3, [pc, #360]	; (8009090 <UART_SetConfig+0x4e4>)
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f28:	e00d      	b.n	8008f46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f2a:	f7fd fddf 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8008f2e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f30:	e009      	b.n	8008f46 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f38:	e005      	b.n	8008f46 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f000 8089 	beq.w	8009060 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	4a4e      	ldr	r2, [pc, #312]	; (800908c <UART_SetConfig+0x4e0>)
 8008f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f60:	005a      	lsls	r2, r3, #1
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	085b      	lsrs	r3, r3, #1
 8008f68:	441a      	add	r2, r3
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	2b0f      	cmp	r3, #15
 8008f7a:	d916      	bls.n	8008faa <UART_SetConfig+0x3fe>
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f82:	d212      	bcs.n	8008faa <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	f023 030f 	bic.w	r3, r3, #15
 8008f8c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	085b      	lsrs	r3, r3, #1
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	8bfb      	ldrh	r3, [r7, #30]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	8bfa      	ldrh	r2, [r7, #30]
 8008fa6:	60da      	str	r2, [r3, #12]
 8008fa8:	e05a      	b.n	8009060 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008fb0:	e056      	b.n	8009060 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fb6:	2b08      	cmp	r3, #8
 8008fb8:	d827      	bhi.n	800900a <UART_SetConfig+0x45e>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <UART_SetConfig+0x414>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fe5 	.word	0x08008fe5
 8008fc4:	08008fed 	.word	0x08008fed
 8008fc8:	08008ff5 	.word	0x08008ff5
 8008fcc:	0800900b 	.word	0x0800900b
 8008fd0:	08008ffb 	.word	0x08008ffb
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	0800900b 	.word	0x0800900b
 8008fdc:	0800900b 	.word	0x0800900b
 8008fe0:	08009003 	.word	0x08009003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fe4:	f7fd fe36 	bl	8006c54 <HAL_RCC_GetPCLK1Freq>
 8008fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008fea:	e014      	b.n	8009016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fec:	f7fd fe44 	bl	8006c78 <HAL_RCC_GetPCLK2Freq>
 8008ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ff2:	e010      	b.n	8009016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ff4:	4b26      	ldr	r3, [pc, #152]	; (8009090 <UART_SetConfig+0x4e4>)
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ff8:	e00d      	b.n	8009016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ffa:	f7fd fd77 	bl	8006aec <HAL_RCC_GetSysClockFreq>
 8008ffe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009000:	e009      	b.n	8009016 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009008:	e005      	b.n	8009016 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009014:	bf00      	nop
    }

    if (pclk != 0U)
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	2b00      	cmp	r3, #0
 800901a:	d021      	beq.n	8009060 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	4a1a      	ldr	r2, [pc, #104]	; (800908c <UART_SetConfig+0x4e0>)
 8009022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009026:	461a      	mov	r2, r3
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	fbb3 f2f2 	udiv	r2, r3, r2
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	441a      	add	r2, r3
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	fbb2 f3f3 	udiv	r3, r2, r3
 800903e:	b29b      	uxth	r3, r3
 8009040:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	2b0f      	cmp	r3, #15
 8009046:	d908      	bls.n	800905a <UART_SetConfig+0x4ae>
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800904e:	d204      	bcs.n	800905a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6a3a      	ldr	r2, [r7, #32]
 8009056:	60da      	str	r2, [r3, #12]
 8009058:	e002      	b.n	8009060 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2201      	movs	r2, #1
 8009064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2201      	movs	r2, #1
 800906c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2200      	movs	r2, #0
 8009074:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2200      	movs	r2, #0
 800907a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800907c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009080:	4618      	mov	r0, r3
 8009082:	3730      	adds	r7, #48	; 0x30
 8009084:	46bd      	mov	sp, r7
 8009086:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800908a:	bf00      	nop
 800908c:	0801eb04 	.word	0x0801eb04
 8009090:	00f42400 	.word	0x00f42400

08009094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00a      	beq.n	80090be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	430a      	orrs	r2, r1
 80090bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00a      	beq.n	80090e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	430a      	orrs	r2, r1
 80090de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e4:	f003 0304 	and.w	r3, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00a      	beq.n	8009102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009106:	f003 0308 	and.w	r3, r3, #8
 800910a:	2b00      	cmp	r3, #0
 800910c:	d00a      	beq.n	8009124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009128:	f003 0310 	and.w	r3, r3, #16
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00a      	beq.n	8009146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	430a      	orrs	r2, r1
 8009144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00a      	beq.n	8009168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009170:	2b00      	cmp	r3, #0
 8009172:	d01a      	beq.n	80091aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009192:	d10a      	bne.n	80091aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	605a      	str	r2, [r3, #4]
  }
}
 80091cc:	bf00      	nop
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bc80      	pop	{r7}
 80091d4:	4770      	bx	lr

080091d6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b086      	sub	sp, #24
 80091da:	af02      	add	r7, sp, #8
 80091dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80091e6:	f7f8 fe05 	bl	8001df4 <HAL_GetTick>
 80091ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b08      	cmp	r3, #8
 80091f8:	d10e      	bne.n	8009218 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80091fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f82f 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e025      	b.n	8009264 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b04      	cmp	r3, #4
 8009224:	d10e      	bne.n	8009244 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f819 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	e00f      	b.n	8009264 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2220      	movs	r2, #32
 8009248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}

0800926c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b09c      	sub	sp, #112	; 0x70
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	4613      	mov	r3, r2
 800927a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800927c:	e0a9      	b.n	80093d2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	f000 80a5 	beq.w	80093d2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009288:	f7f8 fdb4 	bl	8001df4 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009294:	429a      	cmp	r2, r3
 8009296:	d302      	bcc.n	800929e <UART_WaitOnFlagUntilTimeout+0x32>
 8009298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800929a:	2b00      	cmp	r3, #0
 800929c:	d140      	bne.n	8009320 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a6:	e853 3f00 	ldrex	r3, [r3]
 80092aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80092ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80092b2:	667b      	str	r3, [r7, #100]	; 0x64
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	461a      	mov	r2, r3
 80092ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092c4:	e841 2300 	strex	r3, r2, [r1]
 80092c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80092ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1e6      	bne.n	800929e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3308      	adds	r3, #8
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092da:	e853 3f00 	ldrex	r3, [r3]
 80092de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e2:	f023 0301 	bic.w	r3, r3, #1
 80092e6:	663b      	str	r3, [r7, #96]	; 0x60
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3308      	adds	r3, #8
 80092ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092f0:	64ba      	str	r2, [r7, #72]	; 0x48
 80092f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e5      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2220      	movs	r2, #32
 8009308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800931c:	2303      	movs	r3, #3
 800931e:	e069      	b.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d051      	beq.n	80093d2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800933c:	d149      	bne.n	80093d2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009346:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	e853 3f00 	ldrex	r3, [r3]
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800935c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	461a      	mov	r2, r3
 8009364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009366:	637b      	str	r3, [r7, #52]	; 0x34
 8009368:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800936c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e6      	bne.n	8009348 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3308      	adds	r3, #8
 8009380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	613b      	str	r3, [r7, #16]
   return(result);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	f023 0301 	bic.w	r3, r3, #1
 8009390:	66bb      	str	r3, [r7, #104]	; 0x68
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3308      	adds	r3, #8
 8009398:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800939a:	623a      	str	r2, [r7, #32]
 800939c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	69f9      	ldr	r1, [r7, #28]
 80093a0:	6a3a      	ldr	r2, [r7, #32]
 80093a2:	e841 2300 	strex	r3, r2, [r1]
 80093a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e5      	bne.n	800937a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2220      	movs	r2, #32
 80093b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2220      	movs	r2, #32
 80093ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2220      	movs	r2, #32
 80093c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e010      	b.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	69da      	ldr	r2, [r3, #28]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	4013      	ands	r3, r2
 80093dc:	68ba      	ldr	r2, [r7, #8]
 80093de:	429a      	cmp	r2, r3
 80093e0:	bf0c      	ite	eq
 80093e2:	2301      	moveq	r3, #1
 80093e4:	2300      	movne	r3, #0
 80093e6:	b2db      	uxtb	r3, r3
 80093e8:	461a      	mov	r2, r3
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	f43f af46 	beq.w	800927e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80093f2:	2300      	movs	r3, #0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3770      	adds	r7, #112	; 0x70
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b0a3      	sub	sp, #140	; 0x8c
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	88fa      	ldrh	r2, [r7, #6]
 800941c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800942e:	d10e      	bne.n	800944e <UART_Start_Receive_IT+0x52>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d105      	bne.n	8009444 <UART_Start_Receive_IT+0x48>
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800943e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009442:	e02d      	b.n	80094a0 <UART_Start_Receive_IT+0xa4>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	22ff      	movs	r2, #255	; 0xff
 8009448:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800944c:	e028      	b.n	80094a0 <UART_Start_Receive_IT+0xa4>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10d      	bne.n	8009472 <UART_Start_Receive_IT+0x76>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d104      	bne.n	8009468 <UART_Start_Receive_IT+0x6c>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	22ff      	movs	r2, #255	; 0xff
 8009462:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009466:	e01b      	b.n	80094a0 <UART_Start_Receive_IT+0xa4>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	227f      	movs	r2, #127	; 0x7f
 800946c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009470:	e016      	b.n	80094a0 <UART_Start_Receive_IT+0xa4>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800947a:	d10d      	bne.n	8009498 <UART_Start_Receive_IT+0x9c>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d104      	bne.n	800948e <UART_Start_Receive_IT+0x92>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	227f      	movs	r2, #127	; 0x7f
 8009488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800948c:	e008      	b.n	80094a0 <UART_Start_Receive_IT+0xa4>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	223f      	movs	r2, #63	; 0x3f
 8009492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009496:	e003      	b.n	80094a0 <UART_Start_Receive_IT+0xa4>
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2222      	movs	r2, #34	; 0x22
 80094ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3308      	adds	r3, #8
 80094b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80094c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094c2:	f043 0301 	orr.w	r3, r3, #1
 80094c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80094d4:	673a      	str	r2, [r7, #112]	; 0x70
 80094d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80094da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80094e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e3      	bne.n	80094b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094f0:	d153      	bne.n	800959a <UART_Start_Receive_IT+0x19e>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d34d      	bcc.n	800959a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009506:	d107      	bne.n	8009518 <UART_Start_Receive_IT+0x11c>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4a4a      	ldr	r2, [pc, #296]	; (800963c <UART_Start_Receive_IT+0x240>)
 8009514:	671a      	str	r2, [r3, #112]	; 0x70
 8009516:	e002      	b.n	800951e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	4a49      	ldr	r2, [pc, #292]	; (8009640 <UART_Start_Receive_IT+0x244>)
 800951c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d01a      	beq.n	8009564 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800953c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009552:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009556:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800955e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e4      	bne.n	800952e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800957a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009584:	64ba      	str	r2, [r7, #72]	; 0x48
 8009586:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800958a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_Start_Receive_IT+0x168>
 8009598:	e04a      	b.n	8009630 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095a2:	d107      	bne.n	80095b4 <UART_Start_Receive_IT+0x1b8>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d103      	bne.n	80095b4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	4a25      	ldr	r2, [pc, #148]	; (8009644 <UART_Start_Receive_IT+0x248>)
 80095b0:	671a      	str	r2, [r3, #112]	; 0x70
 80095b2:	e002      	b.n	80095ba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4a24      	ldr	r2, [pc, #144]	; (8009648 <UART_Start_Receive_IT+0x24c>)
 80095b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d019      	beq.n	80095fe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	e853 3f00 	ldrex	r3, [r3]
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80095de:	677b      	str	r3, [r7, #116]	; 0x74
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80095e8:	637b      	str	r3, [r7, #52]	; 0x34
 80095ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f0:	e841 2300 	strex	r3, r2, [r1]
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1e6      	bne.n	80095ca <UART_Start_Receive_IT+0x1ce>
 80095fc:	e018      	b.n	8009630 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	e853 3f00 	ldrex	r3, [r3]
 800960a:	613b      	str	r3, [r7, #16]
   return(result);
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	f043 0320 	orr.w	r3, r3, #32
 8009612:	67bb      	str	r3, [r7, #120]	; 0x78
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	461a      	mov	r2, r3
 800961a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800961c:	623b      	str	r3, [r7, #32]
 800961e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009620:	69f9      	ldr	r1, [r7, #28]
 8009622:	6a3a      	ldr	r2, [r7, #32]
 8009624:	e841 2300 	strex	r3, r2, [r1]
 8009628:	61bb      	str	r3, [r7, #24]
   return(result);
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e6      	bne.n	80095fe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	378c      	adds	r7, #140	; 0x8c
 8009636:	46bd      	mov	sp, r7
 8009638:	bc80      	pop	{r7}
 800963a:	4770      	bx	lr
 800963c:	08009f09 	.word	0x08009f09
 8009640:	08009c11 	.word	0x08009c11
 8009644:	08009aaf 	.word	0x08009aaf
 8009648:	0800994f 	.word	0x0800994f

0800964c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800964c:	b480      	push	{r7}
 800964e:	b08f      	sub	sp, #60	; 0x3c
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	61fb      	str	r3, [r7, #28]
   return(result);
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009668:	637b      	str	r3, [r7, #52]	; 0x34
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009674:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e6      	bne.n	8009654 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3308      	adds	r3, #8
 800968c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	60bb      	str	r3, [r7, #8]
   return(result);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800969c:	633b      	str	r3, [r7, #48]	; 0x30
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096a6:	61ba      	str	r2, [r7, #24]
 80096a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6979      	ldr	r1, [r7, #20]
 80096ac:	69ba      	ldr	r2, [r7, #24]
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	613b      	str	r3, [r7, #16]
   return(result);
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80096c2:	bf00      	nop
 80096c4:	373c      	adds	r7, #60	; 0x3c
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr

080096cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b095      	sub	sp, #84	; 0x54
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f2:	643b      	str	r3, [r7, #64]	; 0x40
 80096f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e6      	bne.n	80096d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	61fb      	str	r3, [r7, #28]
   return(result);
 8009716:	69fb      	ldr	r3, [r7, #28]
 8009718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	64bb      	str	r3, [r7, #72]	; 0x48
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	3308      	adds	r3, #8
 8009728:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800972a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009732:	e841 2300 	strex	r3, r2, [r1]
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1e3      	bne.n	8009706 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d118      	bne.n	8009778 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	e853 3f00 	ldrex	r3, [r3]
 8009752:	60bb      	str	r3, [r7, #8]
   return(result);
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f023 0310 	bic.w	r3, r3, #16
 800975a:	647b      	str	r3, [r7, #68]	; 0x44
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009764:	61bb      	str	r3, [r7, #24]
 8009766:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009768:	6979      	ldr	r1, [r7, #20]
 800976a:	69ba      	ldr	r2, [r7, #24]
 800976c:	e841 2300 	strex	r3, r2, [r1]
 8009770:	613b      	str	r3, [r7, #16]
   return(result);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1e6      	bne.n	8009746 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800978c:	bf00      	nop
 800978e:	3754      	adds	r7, #84	; 0x54
 8009790:	46bd      	mov	sp, r7
 8009792:	bc80      	pop	{r7}
 8009794:	4770      	bx	lr

08009796 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b090      	sub	sp, #64	; 0x40
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0320 	and.w	r3, r3, #32
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d137      	bne.n	8009822 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80097b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80097ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3308      	adds	r3, #8
 80097c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	623b      	str	r3, [r7, #32]
   return(result);
 80097ca:	6a3b      	ldr	r3, [r7, #32]
 80097cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80097d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3308      	adds	r3, #8
 80097d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097da:	633a      	str	r2, [r7, #48]	; 0x30
 80097dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e5      	bne.n	80097ba <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009802:	637b      	str	r3, [r7, #52]	; 0x34
 8009804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800980c:	61fb      	str	r3, [r7, #28]
 800980e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	69b9      	ldr	r1, [r7, #24]
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	617b      	str	r3, [r7, #20]
   return(result);
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009820:	e002      	b.n	8009828 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009822:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009824:	f7f9 f8c6 	bl	80029b4 <HAL_UART_TxCpltCallback>
}
 8009828:	bf00      	nop
 800982a:	3740      	adds	r7, #64	; 0x40
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7ff f996 	bl	8008b70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009844:	bf00      	nop
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009858:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009860:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009868:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009874:	2b80      	cmp	r3, #128	; 0x80
 8009876:	d109      	bne.n	800988c <UART_DMAError+0x40>
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2b21      	cmp	r3, #33	; 0x21
 800987c:	d106      	bne.n	800988c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2200      	movs	r2, #0
 8009882:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009886:	6978      	ldr	r0, [r7, #20]
 8009888:	f7ff fee0 	bl	800964c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009896:	2b40      	cmp	r3, #64	; 0x40
 8009898:	d109      	bne.n	80098ae <UART_DMAError+0x62>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b22      	cmp	r3, #34	; 0x22
 800989e:	d106      	bne.n	80098ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80098a8:	6978      	ldr	r0, [r7, #20]
 80098aa:	f7ff ff0f 	bl	80096cc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b4:	f043 0210 	orr.w	r2, r3, #16
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098be:	6978      	ldr	r0, [r7, #20]
 80098c0:	f7ff f95f 	bl	8008b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098c4:	bf00      	nop
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f7ff f949 	bl	8008b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098f0:	bf00      	nop
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b088      	sub	sp, #32
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	e853 3f00 	ldrex	r3, [r3]
 800990c:	60bb      	str	r3, [r7, #8]
   return(result);
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	461a      	mov	r2, r3
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	61bb      	str	r3, [r7, #24]
 8009920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009922:	6979      	ldr	r1, [r7, #20]
 8009924:	69ba      	ldr	r2, [r7, #24]
 8009926:	e841 2300 	strex	r3, r2, [r1]
 800992a:	613b      	str	r3, [r7, #16]
   return(result);
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1e6      	bne.n	8009900 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2220      	movs	r2, #32
 8009936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7f9 f837 	bl	80029b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009946:	bf00      	nop
 8009948:	3720      	adds	r7, #32
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b096      	sub	sp, #88	; 0x58
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800995c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009966:	2b22      	cmp	r3, #34	; 0x22
 8009968:	f040 8095 	bne.w	8009a96 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009972:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009976:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800997a:	b2d9      	uxtb	r1, r3
 800997c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009980:	b2da      	uxtb	r2, r3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009986:	400a      	ands	r2, r1
 8009988:	b2d2      	uxtb	r2, r2
 800998a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009990:	1c5a      	adds	r2, r3, #1
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800999c:	b29b      	uxth	r3, r3
 800999e:	3b01      	subs	r3, #1
 80099a0:	b29a      	uxth	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d178      	bne.n	8009aa6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	e853 3f00 	ldrex	r3, [r3]
 80099c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099c8:	653b      	str	r3, [r7, #80]	; 0x50
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099d2:	647b      	str	r3, [r7, #68]	; 0x44
 80099d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e6      	bne.n	80099b4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3308      	adds	r3, #8
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	e853 3f00 	ldrex	r3, [r3]
 80099f4:	623b      	str	r3, [r7, #32]
   return(result);
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	f023 0301 	bic.w	r3, r3, #1
 80099fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3308      	adds	r3, #8
 8009a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a06:	633a      	str	r2, [r7, #48]	; 0x30
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0e:	e841 2300 	strex	r3, r2, [r1]
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1e5      	bne.n	80099e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2220      	movs	r2, #32
 8009a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d12e      	bne.n	8009a8e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f023 0310 	bic.w	r3, r3, #16
 8009a4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a54:	61fb      	str	r3, [r7, #28]
 8009a56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	69b9      	ldr	r1, [r7, #24]
 8009a5a:	69fa      	ldr	r2, [r7, #28]
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	617b      	str	r3, [r7, #20]
   return(result);
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e6      	bne.n	8009a36 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	69db      	ldr	r3, [r3, #28]
 8009a6e:	f003 0310 	and.w	r3, r3, #16
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d103      	bne.n	8009a7e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2210      	movs	r2, #16
 8009a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff f884 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a8c:	e00b      	b.n	8009aa6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7f8 ffa6 	bl	80029e0 <HAL_UART_RxCpltCallback>
}
 8009a94:	e007      	b.n	8009aa6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	699a      	ldr	r2, [r3, #24]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0208 	orr.w	r2, r2, #8
 8009aa4:	619a      	str	r2, [r3, #24]
}
 8009aa6:	bf00      	nop
 8009aa8:	3758      	adds	r7, #88	; 0x58
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b096      	sub	sp, #88	; 0x58
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009abc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac6:	2b22      	cmp	r3, #34	; 0x22
 8009ac8:	f040 8095 	bne.w	8009bf6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ada:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009adc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009ae0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009af0:	1c9a      	adds	r2, r3, #2
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b01      	subs	r3, #1
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d178      	bne.n	8009c06 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1c:	e853 3f00 	ldrex	r3, [r3]
 8009b20:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	461a      	mov	r2, r3
 8009b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b32:	643b      	str	r3, [r7, #64]	; 0x40
 8009b34:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b3a:	e841 2300 	strex	r3, r2, [r1]
 8009b3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1e6      	bne.n	8009b14 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	f023 0301 	bic.w	r3, r3, #1
 8009b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	3308      	adds	r3, #8
 8009b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b68:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b6e:	e841 2300 	strex	r3, r2, [r1]
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d1e5      	bne.n	8009b46 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d12e      	bne.n	8009bee <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	e853 3f00 	ldrex	r3, [r3]
 8009ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f023 0310 	bic.w	r3, r3, #16
 8009baa:	647b      	str	r3, [r7, #68]	; 0x44
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bb4:	61bb      	str	r3, [r7, #24]
 8009bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb8:	6979      	ldr	r1, [r7, #20]
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	e841 2300 	strex	r3, r2, [r1]
 8009bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e6      	bne.n	8009b96 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d103      	bne.n	8009bde <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2210      	movs	r2, #16
 8009bdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f7fe ffd4 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009bec:	e00b      	b.n	8009c06 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7f8 fef6 	bl	80029e0 <HAL_UART_RxCpltCallback>
}
 8009bf4:	e007      	b.n	8009c06 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	699a      	ldr	r2, [r3, #24]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f042 0208 	orr.w	r2, r2, #8
 8009c04:	619a      	str	r2, [r3, #24]
}
 8009c06:	bf00      	nop
 8009c08:	3758      	adds	r7, #88	; 0x58
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
	...

08009c10 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b0a6      	sub	sp, #152	; 0x98
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c1e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c46:	2b22      	cmp	r3, #34	; 0x22
 8009c48:	f040 814f 	bne.w	8009eea <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c52:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009c56:	e0f6      	b.n	8009e46 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c62:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009c66:	b2d9      	uxtb	r1, r3
 8009c68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c72:	400a      	ands	r2, r1
 8009c74:	b2d2      	uxtb	r2, r2
 8009c76:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009c9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d053      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d011      	beq.n	8009cda <UART_RxISR_8BIT_FIFOEN+0xca>
 8009cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d00b      	beq.n	8009cda <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cd0:	f043 0201 	orr.w	r2, r3, #1
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d011      	beq.n	8009d0a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00b      	beq.n	8009d0a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d00:	f043 0204 	orr.w	r2, r3, #4
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d0e:	f003 0304 	and.w	r3, r3, #4
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d011      	beq.n	8009d3a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00b      	beq.n	8009d3a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2204      	movs	r2, #4
 8009d28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d30:	f043 0202 	orr.w	r2, r3, #2
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d006      	beq.n	8009d52 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f7fe ff1c 	bl	8008b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d173      	bne.n	8009e46 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d66:	e853 3f00 	ldrex	r3, [r3]
 8009d6a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009d80:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d82:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d84:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d88:	e841 2300 	strex	r3, r2, [r1]
 8009d8c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1e4      	bne.n	8009d5e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	3308      	adds	r3, #8
 8009d9a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d9e:	e853 3f00 	ldrex	r3, [r3]
 8009da2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009daa:	f023 0301 	bic.w	r3, r3, #1
 8009dae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3308      	adds	r3, #8
 8009db6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009db8:	657a      	str	r2, [r7, #84]	; 0x54
 8009dba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dc0:	e841 2300 	strex	r3, r2, [r1]
 8009dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1e3      	bne.n	8009d94 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2220      	movs	r2, #32
 8009dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dde:	2b01      	cmp	r3, #1
 8009de0:	d12e      	bne.n	8009e40 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009df0:	e853 3f00 	ldrex	r3, [r3]
 8009df4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	f023 0310 	bic.w	r3, r3, #16
 8009dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e06:	643b      	str	r3, [r7, #64]	; 0x40
 8009e08:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e0e:	e841 2300 	strex	r3, r2, [r1]
 8009e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1e6      	bne.n	8009de8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b10      	cmp	r3, #16
 8009e26:	d103      	bne.n	8009e30 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2210      	movs	r2, #16
 8009e2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7fe feab 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
 8009e3e:	e002      	b.n	8009e46 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7f8 fdcd 	bl	80029e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009e46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d006      	beq.n	8009e5c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009e4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e52:	f003 0320 	and.w	r3, r3, #32
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	f47f aefe 	bne.w	8009c58 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e62:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009e66:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d045      	beq.n	8009efa <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d23e      	bcs.n	8009efa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	3308      	adds	r3, #8
 8009e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e84:	6a3b      	ldr	r3, [r7, #32]
 8009e86:	e853 3f00 	ldrex	r3, [r3]
 8009e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e92:	673b      	str	r3, [r7, #112]	; 0x70
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3308      	adds	r3, #8
 8009e9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ea4:	e841 2300 	strex	r3, r2, [r1]
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1e5      	bne.n	8009e7c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a14      	ldr	r2, [pc, #80]	; (8009f04 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009eb4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	e853 3f00 	ldrex	r3, [r3]
 8009ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f043 0320 	orr.w	r3, r3, #32
 8009eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed4:	61bb      	str	r3, [r7, #24]
 8009ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed8:	6979      	ldr	r1, [r7, #20]
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	e841 2300 	strex	r3, r2, [r1]
 8009ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e6      	bne.n	8009eb6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ee8:	e007      	b.n	8009efa <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	699a      	ldr	r2, [r3, #24]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f042 0208 	orr.w	r2, r2, #8
 8009ef8:	619a      	str	r2, [r3, #24]
}
 8009efa:	bf00      	nop
 8009efc:	3798      	adds	r7, #152	; 0x98
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	0800994f 	.word	0x0800994f

08009f08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b0a8      	sub	sp, #160	; 0xa0
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f16:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3e:	2b22      	cmp	r3, #34	; 0x22
 8009f40:	f040 8153 	bne.w	800a1ea <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f4a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f4e:	e0fa      	b.n	800a146 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009f62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009f66:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f78:	1c9a      	adds	r2, r3, #2
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	3b01      	subs	r3, #1
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f9e:	f003 0307 	and.w	r3, r3, #7
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d053      	beq.n	800a04e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009fa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d011      	beq.n	8009fd6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009fb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fcc:	f043 0201 	orr.w	r2, r3, #1
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d011      	beq.n	800a006 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00b      	beq.n	800a006 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ffc:	f043 0204 	orr.w	r2, r3, #4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a006:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d011      	beq.n	800a036 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a016:	f003 0301 	and.w	r3, r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d00b      	beq.n	800a036 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2204      	movs	r2, #4
 800a024:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a02c:	f043 0202 	orr.w	r2, r3, #2
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d006      	beq.n	800a04e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7fe fd9e 	bl	8008b82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a054:	b29b      	uxth	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d175      	bne.n	800a146 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a06a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a07c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a07e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a082:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a08a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e4      	bne.n	800a05a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3308      	adds	r3, #8
 800a096:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0a6:	f023 0301 	bic.w	r3, r3, #1
 800a0aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0b8:	65ba      	str	r2, [r7, #88]	; 0x58
 800a0ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a0be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a0c0:	e841 2300 	strex	r3, r2, [r1]
 800a0c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1e1      	bne.n	800a090 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2220      	movs	r2, #32
 800a0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d12e      	bne.n	800a140 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0f8:	f023 0310 	bic.w	r3, r3, #16
 800a0fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a106:	647b      	str	r3, [r7, #68]	; 0x44
 800a108:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a10c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e6      	bne.n	800a0e8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b10      	cmp	r3, #16
 800a126:	d103      	bne.n	800a130 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2210      	movs	r2, #16
 800a12e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7fe fd2b 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
 800a13e:	e002      	b.n	800a146 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f7f8 fc4d 	bl	80029e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a146:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d006      	beq.n	800a15c <UART_RxISR_16BIT_FIFOEN+0x254>
 800a14e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a152:	f003 0320 	and.w	r3, r3, #32
 800a156:	2b00      	cmp	r3, #0
 800a158:	f47f aefa 	bne.w	8009f50 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a162:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a166:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d045      	beq.n	800a1fa <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a174:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a178:	429a      	cmp	r2, r3
 800a17a:	d23e      	bcs.n	800a1fa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	3308      	adds	r3, #8
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a186:	e853 3f00 	ldrex	r3, [r3]
 800a18a:	623b      	str	r3, [r7, #32]
   return(result);
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a192:	677b      	str	r3, [r7, #116]	; 0x74
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3308      	adds	r3, #8
 800a19a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a19c:	633a      	str	r2, [r7, #48]	; 0x30
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1a4:	e841 2300 	strex	r3, r2, [r1]
 800a1a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1e5      	bne.n	800a17c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a14      	ldr	r2, [pc, #80]	; (800a204 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a1b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f043 0320 	orr.w	r3, r3, #32
 800a1ca:	673b      	str	r3, [r7, #112]	; 0x70
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1d4:	61fb      	str	r3, [r7, #28]
 800a1d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	69b9      	ldr	r1, [r7, #24]
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e6      	bne.n	800a1b6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a1e8:	e007      	b.n	800a1fa <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	699a      	ldr	r2, [r3, #24]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f042 0208 	orr.w	r2, r2, #8
 800a1f8:	619a      	str	r2, [r3, #24]
}
 800a1fa:	bf00      	nop
 800a1fc:	37a0      	adds	r7, #160	; 0xa0
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	08009aaf 	.word	0x08009aaf

0800a208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	bc80      	pop	{r7}
 800a218:	4770      	bx	lr

0800a21a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	bc80      	pop	{r7}
 800a22a:	4770      	bx	lr

0800a22c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	bc80      	pop	{r7}
 800a23c:	4770      	bx	lr

0800a23e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b088      	sub	sp, #32
 800a242:	af02      	add	r7, sp, #8
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	1d3b      	adds	r3, r7, #4
 800a248:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e046      	b.n	800a2ec <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2224      	movs	r2, #36	; 0x24
 800a26a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f022 0201 	bic.w	r2, r2, #1
 800a27c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a298:	1d3b      	adds	r3, r7, #4
 800a29a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f000 f90e 	bl	800a4c0 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f042 0201 	orr.w	r2, r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2b4:	f7f7 fd9e 	bl	8001df4 <HAL_GetTick>
 800a2b8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f7fe ffcf 	bl	800926c <UART_WaitOnFlagUntilTimeout>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	75fb      	strb	r3, [r7, #23]
 800a2d8:	e003      	b.n	800a2e2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2220      	movs	r2, #32
 800a2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b089      	sub	sp, #36	; 0x24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a302:	2b01      	cmp	r3, #1
 800a304:	d101      	bne.n	800a30a <HAL_UARTEx_EnableStopMode+0x16>
 800a306:	2302      	movs	r3, #2
 800a308:	e021      	b.n	800a34e <HAL_UARTEx_EnableStopMode+0x5a>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f043 0302 	orr.w	r3, r3, #2
 800a326:	61fb      	str	r3, [r7, #28]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6979      	ldr	r1, [r7, #20]
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	613b      	str	r3, [r7, #16]
   return(result);
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e6      	bne.n	800a312 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3724      	adds	r7, #36	; 0x24
 800a352:	46bd      	mov	sp, r7
 800a354:	bc80      	pop	{r7}
 800a356:	4770      	bx	lr

0800a358 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_UARTEx_DisableFifoMode+0x16>
 800a36a:	2302      	movs	r3, #2
 800a36c:	e027      	b.n	800a3be <HAL_UARTEx_DisableFifoMode+0x66>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2201      	movs	r2, #1
 800a372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2224      	movs	r2, #36	; 0x24
 800a37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f022 0201 	bic.w	r2, r2, #1
 800a394:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a39c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bc80      	pop	{r7}
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d101      	bne.n	800a3e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3dc:	2302      	movs	r3, #2
 800a3de:	e02d      	b.n	800a43c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2224      	movs	r2, #36	; 0x24
 800a3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 0201 	bic.w	r2, r2, #1
 800a406:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f871 	bl	800a504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2220      	movs	r2, #32
 800a42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a454:	2b01      	cmp	r3, #1
 800a456:	d101      	bne.n	800a45c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a458:	2302      	movs	r3, #2
 800a45a:	e02d      	b.n	800a4b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2224      	movs	r2, #36	; 0x24
 800a468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0201 	bic.w	r2, r2, #1
 800a482:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	683a      	ldr	r2, [r7, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f833 	bl	800a504 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	1d3b      	adds	r3, r7, #4
 800a4ca:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f023 0210 	bic.w	r2, r3, #16
 800a4d8:	893b      	ldrh	r3, [r7, #8]
 800a4da:	4619      	mov	r1, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a4ee:	7abb      	ldrb	r3, [r7, #10]
 800a4f0:	061a      	lsls	r2, r3, #24
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	605a      	str	r2, [r3, #4]
}
 800a4fa:	bf00      	nop
 800a4fc:	3714      	adds	r7, #20
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bc80      	pop	{r7}
 800a502:	4770      	bx	lr

0800a504 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a510:	2b00      	cmp	r3, #0
 800a512:	d108      	bne.n	800a526 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a524:	e031      	b.n	800a58a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a526:	2308      	movs	r3, #8
 800a528:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a52a:	2308      	movs	r3, #8
 800a52c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	0e5b      	lsrs	r3, r3, #25
 800a536:	b2db      	uxtb	r3, r3
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	689b      	ldr	r3, [r3, #8]
 800a544:	0f5b      	lsrs	r3, r3, #29
 800a546:	b2db      	uxtb	r3, r3
 800a548:	f003 0307 	and.w	r3, r3, #7
 800a54c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a54e:	7bbb      	ldrb	r3, [r7, #14]
 800a550:	7b3a      	ldrb	r2, [r7, #12]
 800a552:	4910      	ldr	r1, [pc, #64]	; (800a594 <UARTEx_SetNbDataToProcess+0x90>)
 800a554:	5c8a      	ldrb	r2, [r1, r2]
 800a556:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a55a:	7b3a      	ldrb	r2, [r7, #12]
 800a55c:	490e      	ldr	r1, [pc, #56]	; (800a598 <UARTEx_SetNbDataToProcess+0x94>)
 800a55e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a560:	fb93 f3f2 	sdiv	r3, r3, r2
 800a564:	b29a      	uxth	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	7b7a      	ldrb	r2, [r7, #13]
 800a570:	4908      	ldr	r1, [pc, #32]	; (800a594 <UARTEx_SetNbDataToProcess+0x90>)
 800a572:	5c8a      	ldrb	r2, [r1, r2]
 800a574:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a578:	7b7a      	ldrb	r2, [r7, #13]
 800a57a:	4907      	ldr	r1, [pc, #28]	; (800a598 <UARTEx_SetNbDataToProcess+0x94>)
 800a57c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a57e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a582:	b29a      	uxth	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a58a:	bf00      	nop
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	bc80      	pop	{r7}
 800a592:	4770      	bx	lr
 800a594:	0801eb1c 	.word	0x0801eb1c
 800a598:	0801eb24 	.word	0x0801eb24

0800a59c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800a5a0:	f7f7 fad2 	bl	8001b48 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800a5a4:	f000 f818 	bl	800a5d8 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800a5a8:	bf00      	nop
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a5b0:	f3bf 8f4f 	dsb	sy
}
 800a5b4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a5b6:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <__NVIC_SystemReset+0x24>)
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a5be:	4904      	ldr	r1, [pc, #16]	; (800a5d0 <__NVIC_SystemReset+0x24>)
 800a5c0:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <__NVIC_SystemReset+0x28>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a5c6:	f3bf 8f4f 	dsb	sy
}
 800a5ca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a5cc:	bf00      	nop
 800a5ce:	e7fd      	b.n	800a5cc <__NVIC_SystemReset+0x20>
 800a5d0:	e000ed00 	.word	0xe000ed00
 800a5d4:	05fa0004 	.word	0x05fa0004

0800a5d8 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	9302      	str	r3, [sp, #8]
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4b5a      	ldr	r3, [pc, #360]	; (800a758 <LoRaWAN_Init+0x180>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	2002      	movs	r0, #2
 800a5f6:	f012 fdc7 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9302      	str	r3, [sp, #8]
 800a5fe:	2304      	movs	r3, #4
 800a600:	9301      	str	r3, [sp, #4]
 800a602:	2302      	movs	r3, #2
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	4b55      	ldr	r3, [pc, #340]	; (800a75c <LoRaWAN_Init+0x184>)
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	2002      	movs	r0, #2
 800a60e:	f012 fdbb 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800a612:	2300      	movs	r3, #0
 800a614:	9302      	str	r3, [sp, #8]
 800a616:	2302      	movs	r3, #2
 800a618:	9301      	str	r3, [sp, #4]
 800a61a:	2301      	movs	r3, #1
 800a61c:	9300      	str	r3, [sp, #0]
 800a61e:	4b50      	ldr	r3, [pc, #320]	; (800a760 <LoRaWAN_Init+0x188>)
 800a620:	2200      	movs	r2, #0
 800a622:	2100      	movs	r1, #0
 800a624:	2002      	movs	r0, #2
 800a626:	f012 fdaf 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800a62a:	1d3b      	adds	r3, r7, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	2000      	movs	r0, #0
 800a630:	f003 f98a 	bl	800d948 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	0e1b      	lsrs	r3, r3, #24
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	461a      	mov	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	0c1b      	lsrs	r3, r3, #16
 800a640:	b2db      	uxtb	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	9302      	str	r3, [sp, #8]
 800a64c:	9101      	str	r1, [sp, #4]
 800a64e:	9200      	str	r2, [sp, #0]
 800a650:	4b44      	ldr	r3, [pc, #272]	; (800a764 <LoRaWAN_Init+0x18c>)
 800a652:	2200      	movs	r2, #0
 800a654:	2100      	movs	r1, #0
 800a656:	2002      	movs	r0, #2
 800a658:	f012 fd96 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800a65c:	1d3b      	adds	r3, r7, #4
 800a65e:	4619      	mov	r1, r3
 800a660:	2001      	movs	r0, #1
 800a662:	f003 f971 	bl	800d948 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	0e1b      	lsrs	r3, r3, #24
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	461a      	mov	r2, r3
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	0c1b      	lsrs	r3, r3, #16
 800a672:	b2db      	uxtb	r3, r3
 800a674:	4619      	mov	r1, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	0a1b      	lsrs	r3, r3, #8
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	b2c0      	uxtb	r0, r0
 800a680:	9003      	str	r0, [sp, #12]
 800a682:	9302      	str	r3, [sp, #8]
 800a684:	9101      	str	r1, [sp, #4]
 800a686:	9200      	str	r2, [sp, #0]
 800a688:	4b37      	ldr	r3, [pc, #220]	; (800a768 <LoRaWAN_Init+0x190>)
 800a68a:	2200      	movs	r2, #0
 800a68c:	2100      	movs	r1, #0
 800a68e:	2002      	movs	r0, #2
 800a690:	f012 fd7a 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800a694:	2300      	movs	r3, #0
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	4b34      	ldr	r3, [pc, #208]	; (800a76c <LoRaWAN_Init+0x194>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6a0:	4833      	ldr	r0, [pc, #204]	; (800a770 <LoRaWAN_Init+0x198>)
 800a6a2:	f012 fac3 	bl	801cc2c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4b32      	ldr	r3, [pc, #200]	; (800a774 <LoRaWAN_Init+0x19c>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6b2:	4831      	ldr	r0, [pc, #196]	; (800a778 <LoRaWAN_Init+0x1a0>)
 800a6b4:	f012 faba 	bl	801cc2c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	4b2f      	ldr	r3, [pc, #188]	; (800a77c <LoRaWAN_Init+0x1a4>)
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800a6c4:	482e      	ldr	r0, [pc, #184]	; (800a780 <LoRaWAN_Init+0x1a8>)
 800a6c6:	f012 fab1 	bl	801cc2c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	9300      	str	r3, [sp, #0]
 800a6ce:	4b2d      	ldr	r3, [pc, #180]	; (800a784 <LoRaWAN_Init+0x1ac>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800a6d6:	482c      	ldr	r0, [pc, #176]	; (800a788 <LoRaWAN_Init+0x1b0>)
 800a6d8:	f012 faa8 	bl	801cc2c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800a6dc:	4a2b      	ldr	r2, [pc, #172]	; (800a78c <LoRaWAN_Init+0x1b4>)
 800a6de:	2100      	movs	r1, #0
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	f012 fa0b 	bl	801cafc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	; (800a790 <LoRaWAN_Init+0x1b8>)
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	2002      	movs	r0, #2
 800a6ec:	f012 fa06 	bl	801cafc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800a6f0:	4a28      	ldr	r2, [pc, #160]	; (800a794 <LoRaWAN_Init+0x1bc>)
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	2004      	movs	r0, #4
 800a6f6:	f012 fa01 	bl	801cafc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800a6fa:	4a27      	ldr	r2, [pc, #156]	; (800a798 <LoRaWAN_Init+0x1c0>)
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	2008      	movs	r0, #8
 800a700:	f012 f9fc 	bl	801cafc <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800a704:	f000 fd3c 	bl	800b180 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800a708:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800a70c:	4823      	ldr	r0, [pc, #140]	; (800a79c <LoRaWAN_Init+0x1c4>)
 800a70e:	f002 f9ff 	bl	800cb10 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800a712:	4823      	ldr	r0, [pc, #140]	; (800a7a0 <LoRaWAN_Init+0x1c8>)
 800a714:	f002 fa5a 	bl	800cbcc <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800a718:	4819      	ldr	r0, [pc, #100]	; (800a780 <LoRaWAN_Init+0x1a8>)
 800a71a:	f012 fabd 	bl	801cc98 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800a71e:	4b21      	ldr	r3, [pc, #132]	; (800a7a4 <LoRaWAN_Init+0x1cc>)
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	4a21      	ldr	r2, [pc, #132]	; (800a7a8 <LoRaWAN_Init+0x1d0>)
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	4611      	mov	r1, r2
 800a728:	4618      	mov	r0, r3
 800a72a:	f002 fbc9 	bl	800cec0 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800a72e:	4b1f      	ldr	r3, [pc, #124]	; (800a7ac <LoRaWAN_Init+0x1d4>)
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d10b      	bne.n	800a74e <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800a736:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <LoRaWAN_Init+0x1d8>)
 800a738:	6819      	ldr	r1, [r3, #0]
 800a73a:	2300      	movs	r3, #0
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	4b1d      	ldr	r3, [pc, #116]	; (800a7b4 <LoRaWAN_Init+0x1dc>)
 800a740:	2200      	movs	r2, #0
 800a742:	481d      	ldr	r0, [pc, #116]	; (800a7b8 <LoRaWAN_Init+0x1e0>)
 800a744:	f012 fa72 	bl	801cc2c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800a748:	481b      	ldr	r0, [pc, #108]	; (800a7b8 <LoRaWAN_Init+0x1e0>)
 800a74a:	f012 faa5 	bl	801cc98 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	0801e11c 	.word	0x0801e11c
 800a75c:	0801e140 	.word	0x0801e140
 800a760:	0801e164 	.word	0x0801e164
 800a764:	0801e188 	.word	0x0801e188
 800a768:	0801e1ac 	.word	0x0801e1ac
 800a76c:	0800ac71 	.word	0x0800ac71
 800a770:	20000578 	.word	0x20000578
 800a774:	0800ac83 	.word	0x0800ac83
 800a778:	20000590 	.word	0x20000590
 800a77c:	0800ac95 	.word	0x0800ac95
 800a780:	200005a8 	.word	0x200005a8
 800a784:	0800b049 	.word	0x0800b049
 800a788:	2000046c 	.word	0x2000046c
 800a78c:	0800ce55 	.word	0x0800ce55
 800a790:	0800a931 	.word	0x0800a931
 800a794:	0800b06d 	.word	0x0800b06d
 800a798:	0800afc9 	.word	0x0800afc9
 800a79c:	20000024 	.word	0x20000024
 800a7a0:	20000070 	.word	0x20000070
 800a7a4:	20000020 	.word	0x20000020
 800a7a8:	20000021 	.word	0x20000021
 800a7ac:	20000450 	.word	0x20000450
 800a7b0:	20000084 	.word	0x20000084
 800a7b4:	0800ac4d 	.word	0x0800ac4d
 800a7b8:	20000454 	.word	0x20000454

0800a7bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7cc:	d104      	bne.n	800a7d8 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	2002      	movs	r0, #2
 800a7d2:	f012 f9b5 	bl	801cb40 <UTIL_SEQ_SetTask>
      }
      break;
 800a7d6:	e000      	b.n	800a7da <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800a7d8:	bf00      	nop
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3708      	adds	r7, #8
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800a7e4:	b5b0      	push	{r4, r5, r7, lr}
 800a7e6:	b08a      	sub	sp, #40	; 0x28
 800a7e8:	af06      	add	r7, sp, #24
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 8088 	beq.w	800a90a <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800a7fa:	4846      	ldr	r0, [pc, #280]	; (800a914 <OnRxData+0x130>)
 800a7fc:	f012 fa4c 	bl	801cc98 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	781b      	ldrb	r3, [r3, #0]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d057      	beq.n	800a8b8 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d054      	beq.n	800a8b8 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d04d      	beq.n	800a8b8 <OnRxData+0xd4>
        {
          switch (appData->Port)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d021      	beq.n	800a868 <OnRxData+0x84>
 800a824:	2b03      	cmp	r3, #3
 800a826:	d149      	bne.n	800a8bc <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	785b      	ldrb	r3, [r3, #1]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d117      	bne.n	800a860 <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d00e      	beq.n	800a858 <OnRxData+0x74>
 800a83a:	2b02      	cmp	r3, #2
 800a83c:	dc12      	bgt.n	800a864 <OnRxData+0x80>
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <OnRxData+0x64>
 800a842:	2b01      	cmp	r3, #1
 800a844:	d004      	beq.n	800a850 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800a846:	e00d      	b.n	800a864 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800a848:	2000      	movs	r0, #0
 800a84a:	f002 fcc5 	bl	800d1d8 <LmHandlerRequestClass>
                    break;
 800a84e:	e00a      	b.n	800a866 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800a850:	2001      	movs	r0, #1
 800a852:	f002 fcc1 	bl	800d1d8 <LmHandlerRequestClass>
                    break;
 800a856:	e006      	b.n	800a866 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800a858:	2002      	movs	r0, #2
 800a85a:	f002 fcbd 	bl	800d1d8 <LmHandlerRequestClass>
                    break;
 800a85e:	e002      	b.n	800a866 <OnRxData+0x82>
                }
              }
 800a860:	bf00      	nop
 800a862:	e02e      	b.n	800a8c2 <OnRxData+0xde>
                    break;
 800a864:	bf00      	nop
              break;
 800a866:	e02c      	b.n	800a8c2 <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	785b      	ldrb	r3, [r3, #1]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d127      	bne.n	800a8c0 <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	b2da      	uxtb	r2, r3
 800a87c:	4b26      	ldr	r3, [pc, #152]	; (800a918 <OnRxData+0x134>)
 800a87e:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800a880:	4b25      	ldr	r3, [pc, #148]	; (800a918 <OnRxData+0x134>)
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10b      	bne.n	800a8a0 <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800a888:	4b24      	ldr	r3, [pc, #144]	; (800a91c <OnRxData+0x138>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	2100      	movs	r1, #0
 800a88e:	2003      	movs	r0, #3
 800a890:	f012 fc7a 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800a894:	2201      	movs	r2, #1
 800a896:	2120      	movs	r1, #32
 800a898:	4821      	ldr	r0, [pc, #132]	; (800a920 <OnRxData+0x13c>)
 800a89a:	f7fa fc1b 	bl	80050d4 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800a89e:	e00f      	b.n	800a8c0 <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800a8a0:	4b20      	ldr	r3, [pc, #128]	; (800a924 <OnRxData+0x140>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	2003      	movs	r0, #3
 800a8a8:	f012 fc6e 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	2120      	movs	r1, #32
 800a8b0:	481b      	ldr	r0, [pc, #108]	; (800a920 <OnRxData+0x13c>)
 800a8b2:	f7fa fc0f 	bl	80050d4 <HAL_GPIO_WritePin>
              break;
 800a8b6:	e003      	b.n	800a8c0 <OnRxData+0xdc>

            default:

              break;
          }
        }
 800a8b8:	bf00      	nop
 800a8ba:	e002      	b.n	800a8c2 <OnRxData+0xde>
              break;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <OnRxData+0xde>
              break;
 800a8c0:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	7c1b      	ldrb	r3, [r3, #16]
 800a8c6:	2b05      	cmp	r3, #5
 800a8c8:	d81f      	bhi.n	800a90a <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	7bfa      	ldrb	r2, [r7, #15]
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	7c09      	ldrb	r1, [r1, #16]
 800a8dc:	4608      	mov	r0, r1
 800a8de:	4912      	ldr	r1, [pc, #72]	; (800a928 <OnRxData+0x144>)
 800a8e0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a8e4:	6838      	ldr	r0, [r7, #0]
 800a8e6:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	6838      	ldr	r0, [r7, #0]
 800a8ee:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800a8f2:	9005      	str	r0, [sp, #20]
 800a8f4:	9504      	str	r5, [sp, #16]
 800a8f6:	9103      	str	r1, [sp, #12]
 800a8f8:	9402      	str	r4, [sp, #8]
 800a8fa:	9201      	str	r2, [sp, #4]
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	4b0b      	ldr	r3, [pc, #44]	; (800a92c <OnRxData+0x148>)
 800a900:	2200      	movs	r2, #0
 800a902:	2100      	movs	r1, #0
 800a904:	2003      	movs	r0, #3
 800a906:	f012 fc3f 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bdb0      	pop	{r4, r5, r7, pc}
 800a912:	bf00      	nop
 800a914:	20000590 	.word	0x20000590
 800a918:	20000576 	.word	0x20000576
 800a91c:	0801e1d0 	.word	0x0801e1d0
 800a920:	48000400 	.word	0x48000400
 800a924:	0801e1dc 	.word	0x0801e1dc
 800a928:	20000008 	.word	0x20000008
 800a92c:	0801e1e8 	.word	0x0801e1e8

0800a930 <SendTxData>:

static void SendTxData(void)
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b091      	sub	sp, #68	; 0x44
 800a934:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a936:	23ff      	movs	r3, #255	; 0xff
 800a938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800a93c:	f7f7 f92e 	bl	8001b9c <GetBatteryLevel>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800a956:	2300      	movs	r3, #0
 800a958:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800a962:	2300      	movs	r3, #0
 800a964:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800a966:	1d3b      	adds	r3, r7, #4
 800a968:	4618      	mov	r0, r3
 800a96a:	f7f7 fad7 	bl	8001f1c <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800a96e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	4b8f      	ldr	r3, [pc, #572]	; (800abb4 <SendTxData+0x284>)
 800a976:	2201      	movs	r2, #1
 800a978:	2100      	movs	r1, #0
 800a97a:	2002      	movs	r0, #2
 800a97c:	f012 fc04 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	4618      	mov	r0, r3
 800a984:	f7f6 f91e 	bl	8000bc4 <__aeabi_f2iz>
 800a988:	4603      	mov	r3, r0
 800a98a:	b21b      	sxth	r3, r3
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	4b8a      	ldr	r3, [pc, #552]	; (800abb8 <SendTxData+0x288>)
 800a990:	2201      	movs	r2, #1
 800a992:	2100      	movs	r1, #0
 800a994:	2002      	movs	r0, #2
 800a996:	f012 fbf7 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800a99a:	4b88      	ldr	r3, [pc, #544]	; (800abbc <SendTxData+0x28c>)
 800a99c:	2202      	movs	r2, #2
 800a99e:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4987      	ldr	r1, [pc, #540]	; (800abc0 <SendTxData+0x290>)
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f5 ffbd 	bl	8000924 <__aeabi_fmul>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7f6 f92f 	bl	8000c10 <__aeabi_f2uiz>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7f6 f903 	bl	8000bc4 <__aeabi_f2iz>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	497f      	ldr	r1, [pc, #508]	; (800abc4 <SendTxData+0x294>)
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7f5 ffac 	bl	8000924 <__aeabi_fmul>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	497c      	ldr	r1, [pc, #496]	; (800abc0 <SendTxData+0x290>)
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7f6 f85b 	bl	8000a8c <__aeabi_fdiv>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7f6 f919 	bl	8000c10 <__aeabi_f2uiz>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800a9e2:	4b76      	ldr	r3, [pc, #472]	; (800abbc <SendTxData+0x28c>)
 800a9e4:	685a      	ldr	r2, [r3, #4]
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	1c59      	adds	r1, r3, #1
 800a9ea:	6339      	str	r1, [r7, #48]	; 0x30
 800a9ec:	4413      	add	r3, r2
 800a9ee:	4a76      	ldr	r2, [pc, #472]	; (800abc8 <SendTxData+0x298>)
 800a9f0:	7812      	ldrb	r2, [r2, #0]
 800a9f2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800a9f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a9f6:	0a1b      	lsrs	r3, r3, #8
 800a9f8:	b298      	uxth	r0, r3
 800a9fa:	4b70      	ldr	r3, [pc, #448]	; (800abbc <SendTxData+0x28c>)
 800a9fc:	685a      	ldr	r2, [r3, #4]
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	1c59      	adds	r1, r3, #1
 800aa02:	6339      	str	r1, [r7, #48]	; 0x30
 800aa04:	4413      	add	r3, r2
 800aa06:	b2c2      	uxtb	r2, r0
 800aa08:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800aa0a:	4b6c      	ldr	r3, [pc, #432]	; (800abbc <SendTxData+0x28c>)
 800aa0c:	685a      	ldr	r2, [r3, #4]
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	1c59      	adds	r1, r3, #1
 800aa12:	6339      	str	r1, [r7, #48]	; 0x30
 800aa14:	4413      	add	r3, r2
 800aa16:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aa18:	b2d2      	uxtb	r2, r2
 800aa1a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800aa1c:	4b67      	ldr	r3, [pc, #412]	; (800abbc <SendTxData+0x28c>)
 800aa1e:	685a      	ldr	r2, [r3, #4]
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	1c59      	adds	r1, r3, #1
 800aa24:	6339      	str	r1, [r7, #48]	; 0x30
 800aa26:	4413      	add	r3, r2
 800aa28:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800aa2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aa30:	0a1b      	lsrs	r3, r3, #8
 800aa32:	b298      	uxth	r0, r3
 800aa34:	4b61      	ldr	r3, [pc, #388]	; (800abbc <SendTxData+0x28c>)
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3a:	1c59      	adds	r1, r3, #1
 800aa3c:	6339      	str	r1, [r7, #48]	; 0x30
 800aa3e:	4413      	add	r3, r2
 800aa40:	b2c2      	uxtb	r2, r0
 800aa42:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800aa44:	4b5d      	ldr	r3, [pc, #372]	; (800abbc <SendTxData+0x28c>)
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4a:	1c59      	adds	r1, r3, #1
 800aa4c:	6339      	str	r1, [r7, #48]	; 0x30
 800aa4e:	4413      	add	r3, r2
 800aa50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800aa52:	b2d2      	uxtb	r2, r2
 800aa54:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800aa56:	4b5d      	ldr	r3, [pc, #372]	; (800abcc <SendTxData+0x29c>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	2b08      	cmp	r3, #8
 800aa5c:	d007      	beq.n	800aa6e <SendTxData+0x13e>
 800aa5e:	4b5b      	ldr	r3, [pc, #364]	; (800abcc <SendTxData+0x29c>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d003      	beq.n	800aa6e <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800aa66:	4b59      	ldr	r3, [pc, #356]	; (800abcc <SendTxData+0x29c>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d120      	bne.n	800aab0 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800aa6e:	4b53      	ldr	r3, [pc, #332]	; (800abbc <SendTxData+0x28c>)
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	1c59      	adds	r1, r3, #1
 800aa76:	6339      	str	r1, [r7, #48]	; 0x30
 800aa78:	4413      	add	r3, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800aa7e:	4b4f      	ldr	r3, [pc, #316]	; (800abbc <SendTxData+0x28c>)
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	1c59      	adds	r1, r3, #1
 800aa86:	6339      	str	r1, [r7, #48]	; 0x30
 800aa88:	4413      	add	r3, r2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800aa8e:	4b4b      	ldr	r3, [pc, #300]	; (800abbc <SendTxData+0x28c>)
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	1c59      	adds	r1, r3, #1
 800aa96:	6339      	str	r1, [r7, #48]	; 0x30
 800aa98:	4413      	add	r3, r2
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800aa9e:	4b47      	ldr	r3, [pc, #284]	; (800abbc <SendTxData+0x28c>)
 800aaa0:	685a      	ldr	r2, [r3, #4]
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	1c59      	adds	r1, r3, #1
 800aaa6:	6339      	str	r1, [r7, #48]	; 0x30
 800aaa8:	4413      	add	r3, r2
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	e05b      	b.n	800ab68 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800aab8:	4b40      	ldr	r3, [pc, #256]	; (800abbc <SendTxData+0x28c>)
 800aaba:	685a      	ldr	r2, [r3, #4]
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	1c59      	adds	r1, r3, #1
 800aac0:	6339      	str	r1, [r7, #48]	; 0x30
 800aac2:	18d4      	adds	r4, r2, r3
 800aac4:	f7f7 f86a 	bl	8001b9c <GetBatteryLevel>
 800aac8:	4603      	mov	r3, r0
 800aaca:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	1418      	asrs	r0, r3, #16
 800aad0:	4b3a      	ldr	r3, [pc, #232]	; (800abbc <SendTxData+0x28c>)
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad6:	1c59      	adds	r1, r3, #1
 800aad8:	6339      	str	r1, [r7, #48]	; 0x30
 800aada:	4413      	add	r3, r2
 800aadc:	b2c2      	uxtb	r2, r0
 800aade:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	1218      	asrs	r0, r3, #8
 800aae4:	4b35      	ldr	r3, [pc, #212]	; (800abbc <SendTxData+0x28c>)
 800aae6:	685a      	ldr	r2, [r3, #4]
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	1c59      	adds	r1, r3, #1
 800aaec:	6339      	str	r1, [r7, #48]	; 0x30
 800aaee:	4413      	add	r3, r2
 800aaf0:	b2c2      	uxtb	r2, r0
 800aaf2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800aaf4:	4b31      	ldr	r3, [pc, #196]	; (800abbc <SendTxData+0x28c>)
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	1c59      	adds	r1, r3, #1
 800aafc:	6339      	str	r1, [r7, #48]	; 0x30
 800aafe:	4413      	add	r3, r2
 800ab00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab02:	b2d2      	uxtb	r2, r2
 800ab04:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	1418      	asrs	r0, r3, #16
 800ab0a:	4b2c      	ldr	r3, [pc, #176]	; (800abbc <SendTxData+0x28c>)
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	1c59      	adds	r1, r3, #1
 800ab12:	6339      	str	r1, [r7, #48]	; 0x30
 800ab14:	4413      	add	r3, r2
 800ab16:	b2c2      	uxtb	r2, r0
 800ab18:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	1218      	asrs	r0, r3, #8
 800ab1e:	4b27      	ldr	r3, [pc, #156]	; (800abbc <SendTxData+0x28c>)
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	1c59      	adds	r1, r3, #1
 800ab26:	6339      	str	r1, [r7, #48]	; 0x30
 800ab28:	4413      	add	r3, r2
 800ab2a:	b2c2      	uxtb	r2, r0
 800ab2c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800ab2e:	4b23      	ldr	r3, [pc, #140]	; (800abbc <SendTxData+0x28c>)
 800ab30:	685a      	ldr	r2, [r3, #4]
 800ab32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab34:	1c59      	adds	r1, r3, #1
 800ab36:	6339      	str	r1, [r7, #48]	; 0x30
 800ab38:	4413      	add	r3, r2
 800ab3a:	6a3a      	ldr	r2, [r7, #32]
 800ab3c:	b2d2      	uxtb	r2, r2
 800ab3e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800ab40:	8bfb      	ldrh	r3, [r7, #30]
 800ab42:	0a1b      	lsrs	r3, r3, #8
 800ab44:	b298      	uxth	r0, r3
 800ab46:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <SendTxData+0x28c>)
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	1c59      	adds	r1, r3, #1
 800ab4e:	6339      	str	r1, [r7, #48]	; 0x30
 800ab50:	4413      	add	r3, r2
 800ab52:	b2c2      	uxtb	r2, r0
 800ab54:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800ab56:	4b19      	ldr	r3, [pc, #100]	; (800abbc <SendTxData+0x28c>)
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	1c59      	adds	r1, r3, #1
 800ab5e:	6339      	str	r1, [r7, #48]	; 0x30
 800ab60:	4413      	add	r3, r2
 800ab62:	8bfa      	ldrh	r2, [r7, #30]
 800ab64:	b2d2      	uxtb	r2, r2
 800ab66:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	4b13      	ldr	r3, [pc, #76]	; (800abbc <SendTxData+0x28c>)
 800ab6e:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800ab70:	4b17      	ldr	r3, [pc, #92]	; (800abd0 <SendTxData+0x2a0>)
 800ab72:	7a5b      	ldrb	r3, [r3, #9]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d007      	beq.n	800ab88 <SendTxData+0x258>
 800ab78:	f002 fa24 	bl	800cfc4 <LmHandlerJoinStatus>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d102      	bne.n	800ab88 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800ab82:	4813      	ldr	r0, [pc, #76]	; (800abd0 <SendTxData+0x2a0>)
 800ab84:	f012 f8f6 	bl	801cd74 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800ab88:	4b10      	ldr	r3, [pc, #64]	; (800abcc <SendTxData+0x29c>)
 800ab8a:	78db      	ldrb	r3, [r3, #3]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	4619      	mov	r1, r3
 800ab90:	480a      	ldr	r0, [pc, #40]	; (800abbc <SendTxData+0x28c>)
 800ab92:	f002 fa33 	bl	800cffc <LmHandlerSend>
 800ab96:	4603      	mov	r3, r0
 800ab98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800ab9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d119      	bne.n	800abd8 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800aba4:	4b0b      	ldr	r3, [pc, #44]	; (800abd4 <SendTxData+0x2a4>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	2100      	movs	r1, #0
 800abaa:	2001      	movs	r0, #1
 800abac:	f012 faec 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800abb0:	e029      	b.n	800ac06 <SendTxData+0x2d6>
 800abb2:	bf00      	nop
 800abb4:	0801e230 	.word	0x0801e230
 800abb8:	0801e23c 	.word	0x0801e23c
 800abbc:	20000088 	.word	0x20000088
 800abc0:	41200000 	.word	0x41200000
 800abc4:	42c80000 	.word	0x42c80000
 800abc8:	20000576 	.word	0x20000576
 800abcc:	20000070 	.word	0x20000070
 800abd0:	200005a8 	.word	0x200005a8
 800abd4:	0801e248 	.word	0x0801e248
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800abd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800abdc:	f113 0f06 	cmn.w	r3, #6
 800abe0:	d111      	bne.n	800ac06 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800abe2:	f002 f963 	bl	800ceac <LmHandlerGetDutyCycleWaitTime>
 800abe6:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800abe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800abee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf0:	4a11      	ldr	r2, [pc, #68]	; (800ac38 <SendTxData+0x308>)
 800abf2:	fba2 2303 	umull	r2, r3, r2, r3
 800abf6:	099b      	lsrs	r3, r3, #6
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	4b10      	ldr	r3, [pc, #64]	; (800ac3c <SendTxData+0x30c>)
 800abfc:	2201      	movs	r2, #1
 800abfe:	2100      	movs	r1, #0
 800ac00:	2001      	movs	r0, #1
 800ac02:	f012 fac1 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800ac06:	4b0e      	ldr	r3, [pc, #56]	; (800ac40 <SendTxData+0x310>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10f      	bne.n	800ac2e <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800ac0e:	480d      	ldr	r0, [pc, #52]	; (800ac44 <SendTxData+0x314>)
 800ac10:	f012 f8b0 	bl	801cd74 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800ac14:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <SendTxData+0x318>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	bf38      	it	cc
 800ac1e:	4613      	movcc	r3, r2
 800ac20:	4619      	mov	r1, r3
 800ac22:	4808      	ldr	r0, [pc, #32]	; (800ac44 <SendTxData+0x314>)
 800ac24:	f012 f916 	bl	801ce54 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800ac28:	4806      	ldr	r0, [pc, #24]	; (800ac44 <SendTxData+0x314>)
 800ac2a:	f012 f835 	bl	801cc98 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800ac2e:	bf00      	nop
 800ac30:	373c      	adds	r7, #60	; 0x3c
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd90      	pop	{r4, r7, pc}
 800ac36:	bf00      	nop
 800ac38:	10624dd3 	.word	0x10624dd3
 800ac3c:	0801e258 	.word	0x0801e258
 800ac40:	20000450 	.word	0x20000450
 800ac44:	20000454 	.word	0x20000454
 800ac48:	20000084 	.word	0x20000084

0800ac4c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800ac54:	2100      	movs	r1, #0
 800ac56:	2002      	movs	r0, #2
 800ac58:	f011 ff72 	bl	801cb40 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800ac5c:	4803      	ldr	r0, [pc, #12]	; (800ac6c <OnTxTimerEvent+0x20>)
 800ac5e:	f012 f81b 	bl	801cc98 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000454 	.word	0x20000454

0800ac70 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bc80      	pop	{r7}
 800ac80:	4770      	bx	lr

0800ac82 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800ac8a:	bf00      	nop
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bc80      	pop	{r7}
 800ac92:	4770      	bx	lr

0800ac94 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bc80      	pop	{r7}
 800aca4:	4770      	bx	lr
	...

0800aca8 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af04      	add	r7, sp, #16
 800acae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d041      	beq.n	800ad3a <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d03d      	beq.n	800ad3a <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800acbe:	4821      	ldr	r0, [pc, #132]	; (800ad44 <OnTxData+0x9c>)
 800acc0:	f011 ffea 	bl	801cc98 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800acc4:	4b20      	ldr	r3, [pc, #128]	; (800ad48 <OnTxData+0xa0>)
 800acc6:	2200      	movs	r2, #0
 800acc8:	2100      	movs	r1, #0
 800acca:	2002      	movs	r0, #2
 800accc:	f012 fa5c 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	7c12      	ldrb	r2, [r2, #16]
 800acd8:	4611      	mov	r1, r2
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800ace0:	4610      	mov	r0, r2
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800ace8:	9203      	str	r2, [sp, #12]
 800acea:	9002      	str	r0, [sp, #8]
 800acec:	9101      	str	r1, [sp, #4]
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	4b16      	ldr	r3, [pc, #88]	; (800ad4c <OnTxData+0xa4>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	2003      	movs	r0, #3
 800acf8:	f012 fa46 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800acfc:	4b14      	ldr	r3, [pc, #80]	; (800ad50 <OnTxData+0xa8>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	2100      	movs	r1, #0
 800ad02:	2003      	movs	r0, #3
 800ad04:	f012 fa40 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	7a1b      	ldrb	r3, [r3, #8]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10e      	bne.n	800ad2e <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	7a5b      	ldrb	r3, [r3, #9]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <OnTxData+0x74>
 800ad18:	4b0e      	ldr	r3, [pc, #56]	; (800ad54 <OnTxData+0xac>)
 800ad1a:	e000      	b.n	800ad1e <OnTxData+0x76>
 800ad1c:	4b0e      	ldr	r3, [pc, #56]	; (800ad58 <OnTxData+0xb0>)
 800ad1e:	9300      	str	r3, [sp, #0]
 800ad20:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <OnTxData+0xb4>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	2100      	movs	r1, #0
 800ad26:	2003      	movs	r0, #3
 800ad28:	f012 fa2e 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800ad2c:	e005      	b.n	800ad3a <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <OnTxData+0xb8>)
 800ad30:	2200      	movs	r2, #0
 800ad32:	2100      	movs	r1, #0
 800ad34:	2003      	movs	r0, #3
 800ad36:	f012 fa27 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	20000578 	.word	0x20000578
 800ad48:	0801e278 	.word	0x0801e278
 800ad4c:	0801e2ac 	.word	0x0801e2ac
 800ad50:	0801e2e0 	.word	0x0801e2e0
 800ad54:	0801e2f0 	.word	0x0801e2f0
 800ad58:	0801e2f4 	.word	0x0801e2f4
 800ad5c:	0801e2fc 	.word	0x0801e2fc
 800ad60:	0801e310 	.word	0x0801e310

0800ad64 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d039      	beq.n	800ade6 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11e      	bne.n	800adba <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	2004      	movs	r0, #4
 800ad80:	f011 fede 	bl	801cb40 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800ad84:	481a      	ldr	r0, [pc, #104]	; (800adf0 <OnJoinRequest+0x8c>)
 800ad86:	f011 fff5 	bl	801cd74 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800ad8a:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <OnJoinRequest+0x90>)
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2100      	movs	r1, #0
 800ad90:	2002      	movs	r0, #2
 800ad92:	f012 f9f9 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	799b      	ldrb	r3, [r3, #6]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d106      	bne.n	800adac <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800ad9e:	4b16      	ldr	r3, [pc, #88]	; (800adf8 <OnJoinRequest+0x94>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	2100      	movs	r1, #0
 800ada4:	2002      	movs	r0, #2
 800ada6:	f012 f9ef 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800adaa:	e01c      	b.n	800ade6 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800adac:	4b13      	ldr	r3, [pc, #76]	; (800adfc <OnJoinRequest+0x98>)
 800adae:	2200      	movs	r2, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	2002      	movs	r0, #2
 800adb4:	f012 f9e8 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800adb8:	e015      	b.n	800ade6 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800adba:	4b11      	ldr	r3, [pc, #68]	; (800ae00 <OnJoinRequest+0x9c>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	2100      	movs	r1, #0
 800adc0:	2002      	movs	r0, #2
 800adc2:	f012 f9e1 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	799b      	ldrb	r3, [r3, #6]
 800adca:	2b02      	cmp	r3, #2
 800adcc:	d10b      	bne.n	800ade6 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800adce:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <OnJoinRequest+0xa0>)
 800add0:	2200      	movs	r2, #0
 800add2:	2100      	movs	r1, #0
 800add4:	2002      	movs	r0, #2
 800add6:	f012 f9d7 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800adda:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <OnJoinRequest+0xa4>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2101      	movs	r1, #1
 800ade0:	4618      	mov	r0, r3
 800ade2:	f002 f86d 	bl	800cec0 <LmHandlerJoin>
}
 800ade6:	bf00      	nop
 800ade8:	3708      	adds	r7, #8
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	200005a8 	.word	0x200005a8
 800adf4:	0801e320 	.word	0x0801e320
 800adf8:	0801e338 	.word	0x0801e338
 800adfc:	0801e358 	.word	0x0801e358
 800ae00:	0801e378 	.word	0x0801e378
 800ae04:	0801e394 	.word	0x0801e394
 800ae08:	20000020 	.word	0x20000020

0800ae0c <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800ae0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae0e:	b093      	sub	sp, #76	; 0x4c
 800ae10:	af0c      	add	r7, sp, #48	; 0x30
 800ae12:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d056      	beq.n	800aec8 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	785b      	ldrb	r3, [r3, #1]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d008      	beq.n	800ae34 <OnBeaconStatusChange+0x28>
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d049      	beq.n	800aeba <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800ae26:	4b2b      	ldr	r3, [pc, #172]	; (800aed4 <OnBeaconStatusChange+0xc8>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	2002      	movs	r0, #2
 800ae2e:	f012 f9ab 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ae32:	e04a      	b.n	800aeca <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	7c1b      	ldrb	r3, [r3, #16]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ae40:	461c      	mov	r4, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800ae48:	461d      	mov	r5, r3
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	697a      	ldr	r2, [r7, #20]
 800ae50:	6852      	ldr	r2, [r2, #4]
 800ae52:	6979      	ldr	r1, [r7, #20]
 800ae54:	7d89      	ldrb	r1, [r1, #22]
 800ae56:	460e      	mov	r6, r1
 800ae58:	6979      	ldr	r1, [r7, #20]
 800ae5a:	7dc9      	ldrb	r1, [r1, #23]
 800ae5c:	6139      	str	r1, [r7, #16]
 800ae5e:	6979      	ldr	r1, [r7, #20]
 800ae60:	7e09      	ldrb	r1, [r1, #24]
 800ae62:	60f9      	str	r1, [r7, #12]
 800ae64:	6979      	ldr	r1, [r7, #20]
 800ae66:	7e49      	ldrb	r1, [r1, #25]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	6979      	ldr	r1, [r7, #20]
 800ae6c:	7e89      	ldrb	r1, [r1, #26]
 800ae6e:	6079      	str	r1, [r7, #4]
 800ae70:	6979      	ldr	r1, [r7, #20]
 800ae72:	7ec9      	ldrb	r1, [r1, #27]
 800ae74:	6039      	str	r1, [r7, #0]
 800ae76:	6979      	ldr	r1, [r7, #20]
 800ae78:	7f09      	ldrb	r1, [r1, #28]
 800ae7a:	910b      	str	r1, [sp, #44]	; 0x2c
 800ae7c:	f8d7 c000 	ldr.w	ip, [r7]
 800ae80:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800ae84:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800ae88:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800ae8c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800ae90:	f8cd c020 	str.w	ip, [sp, #32]
 800ae94:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800ae98:	f8cd c01c 	str.w	ip, [sp, #28]
 800ae9c:	6939      	ldr	r1, [r7, #16]
 800ae9e:	9106      	str	r1, [sp, #24]
 800aea0:	9605      	str	r6, [sp, #20]
 800aea2:	9204      	str	r2, [sp, #16]
 800aea4:	9303      	str	r3, [sp, #12]
 800aea6:	9502      	str	r5, [sp, #8]
 800aea8:	9401      	str	r4, [sp, #4]
 800aeaa:	9000      	str	r0, [sp, #0]
 800aeac:	4b0a      	ldr	r3, [pc, #40]	; (800aed8 <OnBeaconStatusChange+0xcc>)
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	2002      	movs	r0, #2
 800aeb4:	f012 f968 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800aeb8:	e007      	b.n	800aeca <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800aeba:	4b08      	ldr	r3, [pc, #32]	; (800aedc <OnBeaconStatusChange+0xd0>)
 800aebc:	2200      	movs	r2, #0
 800aebe:	2100      	movs	r1, #0
 800aec0:	2002      	movs	r0, #2
 800aec2:	f012 f961 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800aec6:	e000      	b.n	800aeca <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800aec8:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800aeca:	bf00      	nop
 800aecc:	371c      	adds	r7, #28
 800aece:	46bd      	mov	sp, r7
 800aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aed2:	bf00      	nop
 800aed4:	0801e3b8 	.word	0x0801e3b8
 800aed8:	0801e3d0 	.word	0x0801e3d0
 800aedc:	0801e444 	.word	0x0801e444

0800aee0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	4603      	mov	r3, r0
 800aee8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	4a06      	ldr	r2, [pc, #24]	; (800af08 <OnClassChange+0x28>)
 800aeee:	5cd3      	ldrb	r3, [r2, r3]
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	4b06      	ldr	r3, [pc, #24]	; (800af0c <OnClassChange+0x2c>)
 800aef4:	2200      	movs	r2, #0
 800aef6:	2100      	movs	r1, #0
 800aef8:	2002      	movs	r0, #2
 800aefa:	f012 f945 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	0801e480 	.word	0x0801e480
 800af0c:	0801e464 	.word	0x0801e464

0800af10 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800af14:	2100      	movs	r1, #0
 800af16:	2001      	movs	r0, #1
 800af18:	f011 fe12 	bl	801cb40 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800af1c:	bf00      	nop
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800af28:	4a0d      	ldr	r2, [pc, #52]	; (800af60 <OnTxPeriodicityChanged+0x40>)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800af2e:	4b0c      	ldr	r3, [pc, #48]	; (800af60 <OnTxPeriodicityChanged+0x40>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d103      	bne.n	800af3e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <OnTxPeriodicityChanged+0x40>)
 800af38:	f242 7210 	movw	r2, #10000	; 0x2710
 800af3c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800af3e:	4809      	ldr	r0, [pc, #36]	; (800af64 <OnTxPeriodicityChanged+0x44>)
 800af40:	f011 ff18 	bl	801cd74 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800af44:	4b06      	ldr	r3, [pc, #24]	; (800af60 <OnTxPeriodicityChanged+0x40>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4619      	mov	r1, r3
 800af4a:	4806      	ldr	r0, [pc, #24]	; (800af64 <OnTxPeriodicityChanged+0x44>)
 800af4c:	f011 ff82 	bl	801ce54 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800af50:	4804      	ldr	r0, [pc, #16]	; (800af64 <OnTxPeriodicityChanged+0x44>)
 800af52:	f011 fea1 	bl	801cc98 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800af56:	bf00      	nop
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20000084 	.word	0x20000084
 800af64:	20000454 	.word	0x20000454

0800af68 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800af72:	4a04      	ldr	r2, [pc, #16]	; (800af84 <OnTxFrameCtrlChanged+0x1c>)
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000070 	.word	0x20000070

0800af88 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800af92:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <OnPingSlotPeriodicityChanged+0x1c>)
 800af94:	79fb      	ldrb	r3, [r7, #7]
 800af96:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bc80      	pop	{r7}
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000070 	.word	0x20000070

0800afa8 <OnSystemReset>:

static void OnSystemReset(void)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800afac:	f002 fcfd 	bl	800d9aa <LmHandlerHalt>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d106      	bne.n	800afc4 <OnSystemReset+0x1c>
 800afb6:	f002 f805 	bl	800cfc4 <LmHandlerJoinStatus>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d101      	bne.n	800afc4 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800afc0:	f7ff faf4 	bl	800a5ac <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800afc4:	bf00      	nop
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <StopJoin>:

static void StopJoin(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800afcc:	4817      	ldr	r0, [pc, #92]	; (800b02c <StopJoin+0x64>)
 800afce:	f011 fed1 	bl	801cd74 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800afd2:	f002 fcdd 	bl	800d990 <LmHandlerStop>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d006      	beq.n	800afea <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800afdc:	4b14      	ldr	r3, [pc, #80]	; (800b030 <StopJoin+0x68>)
 800afde:	2200      	movs	r2, #0
 800afe0:	2100      	movs	r1, #0
 800afe2:	2002      	movs	r0, #2
 800afe4:	f012 f8d0 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800afe8:	e01a      	b.n	800b020 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800afea:	4b12      	ldr	r3, [pc, #72]	; (800b034 <StopJoin+0x6c>)
 800afec:	2200      	movs	r2, #0
 800afee:	2100      	movs	r1, #0
 800aff0:	2002      	movs	r0, #2
 800aff2:	f012 f8c9 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <StopJoin+0x70>)
 800aff8:	2201      	movs	r2, #1
 800affa:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800affc:	4b0f      	ldr	r3, [pc, #60]	; (800b03c <StopJoin+0x74>)
 800affe:	2200      	movs	r2, #0
 800b000:	2100      	movs	r1, #0
 800b002:	2002      	movs	r0, #2
 800b004:	f012 f8c0 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b008:	480d      	ldr	r0, [pc, #52]	; (800b040 <StopJoin+0x78>)
 800b00a:	f001 fddf 	bl	800cbcc <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b00e:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <StopJoin+0x70>)
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	2101      	movs	r1, #1
 800b014:	4618      	mov	r0, r3
 800b016:	f001 ff53 	bl	800cec0 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b01a:	4804      	ldr	r0, [pc, #16]	; (800b02c <StopJoin+0x64>)
 800b01c:	f011 fe3c 	bl	801cc98 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b020:	4808      	ldr	r0, [pc, #32]	; (800b044 <StopJoin+0x7c>)
 800b022:	f011 fe39 	bl	801cc98 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b026:	bf00      	nop
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000454 	.word	0x20000454
 800b030:	0801e484 	.word	0x0801e484
 800b034:	0801e4a4 	.word	0x0801e4a4
 800b038:	20000020 	.word	0x20000020
 800b03c:	0801e4b8 	.word	0x0801e4b8
 800b040:	20000070 	.word	0x20000070
 800b044:	2000046c 	.word	0x2000046c

0800b048 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b050:	4b05      	ldr	r3, [pc, #20]	; (800b068 <OnStopJoinTimerEvent+0x20>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d103      	bne.n	800b060 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b058:	2100      	movs	r1, #0
 800b05a:	2008      	movs	r0, #8
 800b05c:	f011 fd70 	bl	801cb40 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b060:	bf00      	nop
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}
 800b068:	20000020 	.word	0x20000020

0800b06c <StoreContext>:

static void StoreContext(void)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b072:	23ff      	movs	r3, #255	; 0xff
 800b074:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800b076:	f002 fca5 	bl	800d9c4 <LmHandlerNvmDataStore>
 800b07a:	4603      	mov	r3, r0
 800b07c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800b07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b082:	f113 0f08 	cmn.w	r3, #8
 800b086:	d106      	bne.n	800b096 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800b088:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <StoreContext+0x48>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	2100      	movs	r1, #0
 800b08e:	2002      	movs	r0, #2
 800b090:	f012 f87a 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800b094:	e00a      	b.n	800b0ac <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800b096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b09e:	d105      	bne.n	800b0ac <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <StoreContext+0x4c>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	2002      	movs	r0, #2
 800b0a8:	f012 f86e 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	0801e4d8 	.word	0x0801e4d8
 800b0b8:	0801e4f0 	.word	0x0801e4f0

0800b0bc <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d106      	bne.n	800b0da <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800b0cc:	4b08      	ldr	r3, [pc, #32]	; (800b0f0 <OnNvmDataChange+0x34>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	2002      	movs	r0, #2
 800b0d4:	f012 f858 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800b0d8:	e005      	b.n	800b0e6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800b0da:	4b06      	ldr	r3, [pc, #24]	; (800b0f4 <OnNvmDataChange+0x38>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2100      	movs	r1, #0
 800b0e0:	2002      	movs	r0, #2
 800b0e2:	f012 f851 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	0801e508 	.word	0x0801e508
 800b0f4:	0801e51c 	.word	0x0801e51c

0800b0f8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800b102:	f7f9 fb9b 	bl	800483c <HAL_FLASH_Unlock>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d11c      	bne.n	800b146 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800b10c:	4b10      	ldr	r3, [pc, #64]	; (800b150 <OnStoreContextRequest+0x58>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	029a      	lsls	r2, r3, #10
 800b112:	4b10      	ldr	r3, [pc, #64]	; (800b154 <OnStoreContextRequest+0x5c>)
 800b114:	4013      	ands	r3, r2
 800b116:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800b11a:	fbb2 f1f3 	udiv	r1, r2, r3
 800b11e:	fb01 f303 	mul.w	r3, r1, r3
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	0adb      	lsrs	r3, r3, #11
 800b126:	2200      	movs	r2, #0
 800b128:	2101      	movs	r1, #1
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7f6 f95f 	bl	80013ee <FLASH_IF_EraseByPages>
 800b130:	4603      	mov	r3, r0
 800b132:	2b00      	cmp	r3, #0
 800b134:	d105      	bne.n	800b142 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800b136:	2300      	movs	r3, #0
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	6879      	ldr	r1, [r7, #4]
 800b13c:	4806      	ldr	r0, [pc, #24]	; (800b158 <OnStoreContextRequest+0x60>)
 800b13e:	f7f6 f875 	bl	800122c <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800b142:	f7f9 fb9d 	bl	8004880 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	1fff75e0 	.word	0x1fff75e0
 800b154:	03fffc00 	.word	0x03fffc00
 800b158:	0803f000 	.word	0x0803f000

0800b15c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	4903      	ldr	r1, [pc, #12]	; (800b17c <OnRestoreContextRequest+0x20>)
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f011 f8c2 	bl	801c2f8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800b174:	bf00      	nop
 800b176:	3708      	adds	r7, #8
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	0803f000 	.word	0x0803f000

0800b180 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800b184:	4b18      	ldr	r3, [pc, #96]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b18a:	4b17      	ldr	r3, [pc, #92]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b190:	4b15      	ldr	r3, [pc, #84]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b192:	2200      	movs	r2, #0
 800b194:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800b196:	4b14      	ldr	r3, [pc, #80]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b198:	2200      	movs	r2, #0
 800b19a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800b19c:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f043 0320 	orr.w	r3, r3, #32
 800b1a4:	4a10      	ldr	r2, [pc, #64]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b1a6:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800b1a8:	4b0f      	ldr	r3, [pc, #60]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1b0:	4a0d      	ldr	r2, [pc, #52]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b1b2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800b1b4:	4b0c      	ldr	r3, [pc, #48]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10c      	bne.n	800b1d6 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800b1bc:	4b0b      	ldr	r3, [pc, #44]	; (800b1ec <LoraInfo_Init+0x6c>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	f011 ffe0 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b1c8:	bf00      	nop
 800b1ca:	f011 ffcb 	bl	801d164 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d1fa      	bne.n	800b1ca <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800b1d4:	e7fe      	b.n	800b1d4 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800b1d6:	4b04      	ldr	r3, [pc, #16]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <LoraInfo_Init+0x68>)
 800b1de:	2203      	movs	r2, #3
 800b1e0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800b1e2:	bf00      	nop
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	200005c0 	.word	0x200005c0
 800b1ec:	0801e530 	.word	0x0801e530

0800b1f0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800b1f4:	4b02      	ldr	r3, [pc, #8]	; (800b200 <LoraInfo_GetPtr+0x10>)
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bc80      	pop	{r7}
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	200005c0 	.word	0x200005c0

0800b204 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b208:	f7f7 fc3b 	bl	8002a82 <BSP_RADIO_Init>
 800b20c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b20e:	4618      	mov	r0, r3
 800b210:	bd80      	pop	{r7, pc}

0800b212 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	4603      	mov	r3, r0
 800b21a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	4618      	mov	r0, r3
 800b220:	f7f7 fc60 	bl	8002ae4 <BSP_RADIO_ConfigRFSwitch>
 800b224:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b226:	4618      	mov	r0, r3
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b232:	f7f7 fca5 	bl	8002b80 <BSP_RADIO_GetTxConfig>
 800b236:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b238:	4618      	mov	r0, r3
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b240:	f7f7 fca5 	bl	8002b8e <BSP_RADIO_IsTCXO>
 800b244:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b246:	4618      	mov	r0, r3
 800b248:	bd80      	pop	{r7, pc}

0800b24a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b24e:	f7f7 fca5 	bl	8002b9c <BSP_RADIO_IsDCDC>
 800b252:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b254:	4618      	mov	r0, r3
 800b256:	bd80      	pop	{r7, pc}

0800b258 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	4603      	mov	r3, r0
 800b260:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	4618      	mov	r0, r3
 800b266:	f7f7 fca0 	bl	8002baa <BSP_RADIO_GetRFOMaxPowerConfig>
 800b26a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	33f1      	adds	r3, #241	; 0xf1
 800b280:	2210      	movs	r2, #16
 800b282:	2100      	movs	r1, #0
 800b284:	4618      	mov	r0, r3
 800b286:	f00d fda3 	bl	8018dd0 <memset1>
    ctx->M_n = 0;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	22f0      	movs	r2, #240	; 0xf0
 800b296:	2100      	movs	r1, #0
 800b298:	4618      	mov	r0, r3
 800b29a:	f00d fd99 	bl	8018dd0 <memset1>
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
 800b2ae:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	2110      	movs	r1, #16
 800b2b6:	6838      	ldr	r0, [r7, #0]
 800b2b8:	f000 fe5c 	bl	800bf74 <lorawan_aes_set_key>
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b08c      	sub	sp, #48	; 0x30
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	60b9      	str	r1, [r7, #8]
 800b2ce:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f000 80a1 	beq.w	800b41e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b2e2:	f1c3 0310 	rsb	r3, r3, #16
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	bf28      	it	cs
 800b2ec:	4613      	movcs	r3, r2
 800b2ee:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b2fc:	4413      	add	r3, r2
 800b2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b300:	b292      	uxth	r2, r2
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	4618      	mov	r0, r3
 800b306:	f00d fd28 	bl	8018d5a <memcpy1>
        ctx->M_n += mlen;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	441a      	add	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b320:	2b0f      	cmp	r3, #15
 800b322:	f240 808d 	bls.w	800b440 <AES_CMAC_Update+0x17c>
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32a:	429a      	cmp	r2, r3
 800b32c:	f000 8088 	beq.w	800b440 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b330:	2300      	movs	r3, #0
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b334:	e015      	b.n	800b362 <AES_CMAC_Update+0x9e>
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33a:	4413      	add	r3, r2
 800b33c:	33f1      	adds	r3, #241	; 0xf1
 800b33e:	781a      	ldrb	r2, [r3, #0]
 800b340:	68f9      	ldr	r1, [r7, #12]
 800b342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b344:	440b      	add	r3, r1
 800b346:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	4053      	eors	r3, r2
 800b34e:	b2d9      	uxtb	r1, r3
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	4413      	add	r3, r2
 800b356:	33f1      	adds	r3, #241	; 0xf1
 800b358:	460a      	mov	r2, r1
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	3301      	adds	r3, #1
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	2b0f      	cmp	r3, #15
 800b366:	dde6      	ble.n	800b336 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b36e:	f107 0314 	add.w	r3, r7, #20
 800b372:	2210      	movs	r2, #16
 800b374:	4618      	mov	r0, r3
 800b376:	f00d fcf0 	bl	8018d5a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	f107 0114 	add.w	r1, r7, #20
 800b380:	f107 0314 	add.w	r3, r7, #20
 800b384:	4618      	mov	r0, r3
 800b386:	f000 fed3 	bl	800c130 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	33f1      	adds	r3, #241	; 0xf1
 800b38e:	f107 0114 	add.w	r1, r7, #20
 800b392:	2210      	movs	r2, #16
 800b394:	4618      	mov	r0, r3
 800b396:	f00d fce0 	bl	8018d5a <memcpy1>

        data += mlen;
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39e:	4413      	add	r3, r2
 800b3a0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a6:	1ad3      	subs	r3, r2, r3
 800b3a8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b3aa:	e038      	b.n	800b41e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3b0:	e013      	b.n	800b3da <AES_CMAC_Update+0x116>
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b6:	4413      	add	r3, r2
 800b3b8:	33f1      	adds	r3, #241	; 0xf1
 800b3ba:	781a      	ldrb	r2, [r3, #0]
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	68b9      	ldr	r1, [r7, #8]
 800b3c0:	440b      	add	r3, r1
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	4053      	eors	r3, r2
 800b3c6:	b2d9      	uxtb	r1, r3
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3cc:	4413      	add	r3, r2
 800b3ce:	33f1      	adds	r3, #241	; 0xf1
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	701a      	strb	r2, [r3, #0]
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	2b0f      	cmp	r3, #15
 800b3de:	dde8      	ble.n	800b3b2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b3e6:	f107 0314 	add.w	r3, r7, #20
 800b3ea:	2210      	movs	r2, #16
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f00d fcb4 	bl	8018d5a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	f107 0114 	add.w	r1, r7, #20
 800b3f8:	f107 0314 	add.w	r3, r7, #20
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fe97 	bl	800c130 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	33f1      	adds	r3, #241	; 0xf1
 800b406:	f107 0114 	add.w	r1, r7, #20
 800b40a:	2210      	movs	r2, #16
 800b40c:	4618      	mov	r0, r3
 800b40e:	f00d fca4 	bl	8018d5a <memcpy1>

        data += 16;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	3310      	adds	r3, #16
 800b416:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	3b10      	subs	r3, #16
 800b41c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b10      	cmp	r3, #16
 800b422:	d8c3      	bhi.n	800b3ac <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	b292      	uxth	r2, r2
 800b42e:	68b9      	ldr	r1, [r7, #8]
 800b430:	4618      	mov	r0, r3
 800b432:	f00d fc92 	bl	8018d5a <memcpy1>
    ctx->M_n = len;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b43e:	e000      	b.n	800b442 <AES_CMAC_Update+0x17e>
            return;
 800b440:	bf00      	nop
}
 800b442:	3730      	adds	r7, #48	; 0x30
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b092      	sub	sp, #72	; 0x48
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b452:	f107 031c 	add.w	r3, r7, #28
 800b456:	2210      	movs	r2, #16
 800b458:	2100      	movs	r1, #0
 800b45a:	4618      	mov	r0, r3
 800b45c:	f00d fcb8 	bl	8018dd0 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	f107 011c 	add.w	r1, r7, #28
 800b466:	f107 031c 	add.w	r3, r7, #28
 800b46a:	4618      	mov	r0, r3
 800b46c:	f000 fe60 	bl	800c130 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b470:	7f3b      	ldrb	r3, [r7, #28]
 800b472:	b25b      	sxtb	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	da30      	bge.n	800b4da <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b478:	2300      	movs	r3, #0
 800b47a:	647b      	str	r3, [r7, #68]	; 0x44
 800b47c:	e01b      	b.n	800b4b6 <AES_CMAC_Final+0x6e>
 800b47e:	f107 021c 	add.w	r2, r7, #28
 800b482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b484:	4413      	add	r3, r2
 800b486:	781b      	ldrb	r3, [r3, #0]
 800b488:	005b      	lsls	r3, r3, #1
 800b48a:	b25a      	sxtb	r2, r3
 800b48c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b48e:	3301      	adds	r3, #1
 800b490:	3348      	adds	r3, #72	; 0x48
 800b492:	443b      	add	r3, r7
 800b494:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b498:	09db      	lsrs	r3, r3, #7
 800b49a:	b2db      	uxtb	r3, r3
 800b49c:	b25b      	sxtb	r3, r3
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	b25b      	sxtb	r3, r3
 800b4a2:	b2d9      	uxtb	r1, r3
 800b4a4:	f107 021c 	add.w	r2, r7, #28
 800b4a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4aa:	4413      	add	r3, r2
 800b4ac:	460a      	mov	r2, r1
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b8:	2b0e      	cmp	r3, #14
 800b4ba:	dde0      	ble.n	800b47e <AES_CMAC_Final+0x36>
 800b4bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b4c0:	005b      	lsls	r3, r3, #1
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800b4c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b4cc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b4d0:	43db      	mvns	r3, r3
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b4d8:	e027      	b.n	800b52a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b4da:	2300      	movs	r3, #0
 800b4dc:	643b      	str	r3, [r7, #64]	; 0x40
 800b4de:	e01b      	b.n	800b518 <AES_CMAC_Final+0xd0>
 800b4e0:	f107 021c 	add.w	r2, r7, #28
 800b4e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e6:	4413      	add	r3, r2
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	b25a      	sxtb	r2, r3
 800b4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	3348      	adds	r3, #72	; 0x48
 800b4f4:	443b      	add	r3, r7
 800b4f6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b4fa:	09db      	lsrs	r3, r3, #7
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	b25b      	sxtb	r3, r3
 800b500:	4313      	orrs	r3, r2
 800b502:	b25b      	sxtb	r3, r3
 800b504:	b2d9      	uxtb	r1, r3
 800b506:	f107 021c 	add.w	r2, r7, #28
 800b50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b50c:	4413      	add	r3, r2
 800b50e:	460a      	mov	r2, r1
 800b510:	701a      	strb	r2, [r3, #0]
 800b512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b514:	3301      	adds	r3, #1
 800b516:	643b      	str	r3, [r7, #64]	; 0x40
 800b518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b51a:	2b0e      	cmp	r3, #14
 800b51c:	dde0      	ble.n	800b4e0 <AES_CMAC_Final+0x98>
 800b51e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b522:	005b      	lsls	r3, r3, #1
 800b524:	b2db      	uxtb	r3, r3
 800b526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b530:	2b10      	cmp	r3, #16
 800b532:	d11d      	bne.n	800b570 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800b534:	2300      	movs	r3, #0
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b538:	e016      	b.n	800b568 <AES_CMAC_Final+0x120>
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53e:	4413      	add	r3, r2
 800b540:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	f107 011c 	add.w	r1, r7, #28
 800b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54c:	440b      	add	r3, r1
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	4053      	eors	r3, r2
 800b552:	b2d9      	uxtb	r1, r3
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b558:	4413      	add	r3, r2
 800b55a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b55e:	460a      	mov	r2, r1
 800b560:	701a      	strb	r2, [r3, #0]
 800b562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b564:	3301      	adds	r3, #1
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56a:	2b0f      	cmp	r3, #15
 800b56c:	dde5      	ble.n	800b53a <AES_CMAC_Final+0xf2>
 800b56e:	e096      	b.n	800b69e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800b570:	7f3b      	ldrb	r3, [r7, #28]
 800b572:	b25b      	sxtb	r3, r3
 800b574:	2b00      	cmp	r3, #0
 800b576:	da30      	bge.n	800b5da <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800b578:	2300      	movs	r3, #0
 800b57a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b57c:	e01b      	b.n	800b5b6 <AES_CMAC_Final+0x16e>
 800b57e:	f107 021c 	add.w	r2, r7, #28
 800b582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b584:	4413      	add	r3, r2
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	b25a      	sxtb	r2, r3
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	3301      	adds	r3, #1
 800b590:	3348      	adds	r3, #72	; 0x48
 800b592:	443b      	add	r3, r7
 800b594:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b598:	09db      	lsrs	r3, r3, #7
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	b2d9      	uxtb	r1, r3
 800b5a4:	f107 021c 	add.w	r2, r7, #28
 800b5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5aa:	4413      	add	r3, r2
 800b5ac:	460a      	mov	r2, r1
 800b5ae:	701a      	strb	r2, [r3, #0]
 800b5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b8:	2b0e      	cmp	r3, #14
 800b5ba:	dde0      	ble.n	800b57e <AES_CMAC_Final+0x136>
 800b5bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800b5c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5cc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b5d0:	43db      	mvns	r3, r3
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b5d8:	e027      	b.n	800b62a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800b5da:	2300      	movs	r3, #0
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5de:	e01b      	b.n	800b618 <AES_CMAC_Final+0x1d0>
 800b5e0:	f107 021c 	add.w	r2, r7, #28
 800b5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e6:	4413      	add	r3, r2
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	005b      	lsls	r3, r3, #1
 800b5ec:	b25a      	sxtb	r2, r3
 800b5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	3348      	adds	r3, #72	; 0x48
 800b5f4:	443b      	add	r3, r7
 800b5f6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b5fa:	09db      	lsrs	r3, r3, #7
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	b25b      	sxtb	r3, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	b25b      	sxtb	r3, r3
 800b604:	b2d9      	uxtb	r1, r3
 800b606:	f107 021c 	add.w	r2, r7, #28
 800b60a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60c:	4413      	add	r3, r2
 800b60e:	460a      	mov	r2, r1
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b614:	3301      	adds	r3, #1
 800b616:	637b      	str	r3, [r7, #52]	; 0x34
 800b618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b61a:	2b0e      	cmp	r3, #14
 800b61c:	dde0      	ble.n	800b5e0 <AES_CMAC_Final+0x198>
 800b61e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	b2db      	uxtb	r3, r3
 800b626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	4413      	add	r3, r2
 800b634:	2280      	movs	r2, #128	; 0x80
 800b636:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b63a:	e007      	b.n	800b64c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b642:	683a      	ldr	r2, [r7, #0]
 800b644:	4413      	add	r3, r2
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b660:	2b0f      	cmp	r3, #15
 800b662:	d9eb      	bls.n	800b63c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800b664:	2300      	movs	r3, #0
 800b666:	633b      	str	r3, [r7, #48]	; 0x30
 800b668:	e016      	b.n	800b698 <AES_CMAC_Final+0x250>
 800b66a:	683a      	ldr	r2, [r7, #0]
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	4413      	add	r3, r2
 800b670:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b674:	781a      	ldrb	r2, [r3, #0]
 800b676:	f107 011c 	add.w	r1, r7, #28
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	440b      	add	r3, r1
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	4053      	eors	r3, r2
 800b682:	b2d9      	uxtb	r1, r3
 800b684:	683a      	ldr	r2, [r7, #0]
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	4413      	add	r3, r2
 800b68a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b68e:	460a      	mov	r2, r1
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b694:	3301      	adds	r3, #1
 800b696:	633b      	str	r3, [r7, #48]	; 0x30
 800b698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69a:	2b0f      	cmp	r3, #15
 800b69c:	dde5      	ble.n	800b66a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800b69e:	2300      	movs	r3, #0
 800b6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6a2:	e015      	b.n	800b6d0 <AES_CMAC_Final+0x288>
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a8:	4413      	add	r3, r2
 800b6aa:	33f1      	adds	r3, #241	; 0xf1
 800b6ac:	781a      	ldrb	r2, [r3, #0]
 800b6ae:	6839      	ldr	r1, [r7, #0]
 800b6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	4053      	eors	r3, r2
 800b6bc:	b2d9      	uxtb	r1, r3
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c2:	4413      	add	r3, r2
 800b6c4:	33f1      	adds	r3, #241	; 0xf1
 800b6c6:	460a      	mov	r2, r1
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d2:	2b0f      	cmp	r3, #15
 800b6d4:	dde6      	ble.n	800b6a4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b6dc:	f107 030c 	add.w	r3, r7, #12
 800b6e0:	2210      	movs	r2, #16
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f00d fb39 	bl	8018d5a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	f107 030c 	add.w	r3, r7, #12
 800b6ee:	6879      	ldr	r1, [r7, #4]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fd1d 	bl	800c130 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800b6f6:	f107 031c 	add.w	r3, r7, #28
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f00d fb66 	bl	8018dd0 <memset1>
}
 800b704:	bf00      	nop
 800b706:	3748      	adds	r7, #72	; 0x48
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	781a      	ldrb	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3301      	adds	r3, #1
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	7852      	ldrb	r2, [r2, #1]
 800b726:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3302      	adds	r3, #2
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	7892      	ldrb	r2, [r2, #2]
 800b730:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3303      	adds	r3, #3
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	78d2      	ldrb	r2, [r2, #3]
 800b73a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	3304      	adds	r3, #4
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	7912      	ldrb	r2, [r2, #4]
 800b744:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3305      	adds	r3, #5
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	7952      	ldrb	r2, [r2, #5]
 800b74e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	3306      	adds	r3, #6
 800b754:	683a      	ldr	r2, [r7, #0]
 800b756:	7992      	ldrb	r2, [r2, #6]
 800b758:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3307      	adds	r3, #7
 800b75e:	683a      	ldr	r2, [r7, #0]
 800b760:	79d2      	ldrb	r2, [r2, #7]
 800b762:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	3308      	adds	r3, #8
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	7a12      	ldrb	r2, [r2, #8]
 800b76c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3309      	adds	r3, #9
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	7a52      	ldrb	r2, [r2, #9]
 800b776:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	330a      	adds	r3, #10
 800b77c:	683a      	ldr	r2, [r7, #0]
 800b77e:	7a92      	ldrb	r2, [r2, #10]
 800b780:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	330b      	adds	r3, #11
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	7ad2      	ldrb	r2, [r2, #11]
 800b78a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	330c      	adds	r3, #12
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	7b12      	ldrb	r2, [r2, #12]
 800b794:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	330d      	adds	r3, #13
 800b79a:	683a      	ldr	r2, [r7, #0]
 800b79c:	7b52      	ldrb	r2, [r2, #13]
 800b79e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	330e      	adds	r3, #14
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	7b92      	ldrb	r2, [r2, #14]
 800b7a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	330f      	adds	r3, #15
 800b7ae:	683a      	ldr	r2, [r7, #0]
 800b7b0:	7bd2      	ldrb	r2, [r2, #15]
 800b7b2:	701a      	strb	r2, [r3, #0]
#endif
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bc80      	pop	{r7}
 800b7bc:	4770      	bx	lr

0800b7be <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b085      	sub	sp, #20
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	60b9      	str	r1, [r7, #8]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800b7cc:	e007      	b.n	800b7de <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800b7ce:	68ba      	ldr	r2, [r7, #8]
 800b7d0:	1c53      	adds	r3, r2, #1
 800b7d2:	60bb      	str	r3, [r7, #8]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	1c59      	adds	r1, r3, #1
 800b7d8:	60f9      	str	r1, [r7, #12]
 800b7da:	7812      	ldrb	r2, [r2, #0]
 800b7dc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	1e5a      	subs	r2, r3, #1
 800b7e2:	71fa      	strb	r2, [r7, #7]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d1f2      	bne.n	800b7ce <copy_block_nn+0x10>
}
 800b7e8:	bf00      	nop
 800b7ea:	bf00      	nop
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bc80      	pop	{r7}
 800b7f2:	4770      	bx	lr

0800b7f4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	781a      	ldrb	r2, [r3, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	4053      	eors	r3, r2
 800b808:	b2da      	uxtb	r2, r3
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3301      	adds	r3, #1
 800b812:	7819      	ldrb	r1, [r3, #0]
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	3301      	adds	r3, #1
 800b818:	781a      	ldrb	r2, [r3, #0]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	3301      	adds	r3, #1
 800b81e:	404a      	eors	r2, r1
 800b820:	b2d2      	uxtb	r2, r2
 800b822:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	3302      	adds	r3, #2
 800b828:	7819      	ldrb	r1, [r3, #0]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	3302      	adds	r3, #2
 800b82e:	781a      	ldrb	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3302      	adds	r3, #2
 800b834:	404a      	eors	r2, r1
 800b836:	b2d2      	uxtb	r2, r2
 800b838:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	3303      	adds	r3, #3
 800b83e:	7819      	ldrb	r1, [r3, #0]
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	3303      	adds	r3, #3
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3303      	adds	r3, #3
 800b84a:	404a      	eors	r2, r1
 800b84c:	b2d2      	uxtb	r2, r2
 800b84e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	3304      	adds	r3, #4
 800b854:	7819      	ldrb	r1, [r3, #0]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	3304      	adds	r3, #4
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	3304      	adds	r3, #4
 800b860:	404a      	eors	r2, r1
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3305      	adds	r3, #5
 800b86a:	7819      	ldrb	r1, [r3, #0]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	3305      	adds	r3, #5
 800b870:	781a      	ldrb	r2, [r3, #0]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	3305      	adds	r3, #5
 800b876:	404a      	eors	r2, r1
 800b878:	b2d2      	uxtb	r2, r2
 800b87a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3306      	adds	r3, #6
 800b880:	7819      	ldrb	r1, [r3, #0]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	3306      	adds	r3, #6
 800b886:	781a      	ldrb	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	3306      	adds	r3, #6
 800b88c:	404a      	eors	r2, r1
 800b88e:	b2d2      	uxtb	r2, r2
 800b890:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	3307      	adds	r3, #7
 800b896:	7819      	ldrb	r1, [r3, #0]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	3307      	adds	r3, #7
 800b89c:	781a      	ldrb	r2, [r3, #0]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3307      	adds	r3, #7
 800b8a2:	404a      	eors	r2, r1
 800b8a4:	b2d2      	uxtb	r2, r2
 800b8a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3308      	adds	r3, #8
 800b8ac:	7819      	ldrb	r1, [r3, #0]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	781a      	ldrb	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	404a      	eors	r2, r1
 800b8ba:	b2d2      	uxtb	r2, r2
 800b8bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3309      	adds	r3, #9
 800b8c2:	7819      	ldrb	r1, [r3, #0]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	3309      	adds	r3, #9
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3309      	adds	r3, #9
 800b8ce:	404a      	eors	r2, r1
 800b8d0:	b2d2      	uxtb	r2, r2
 800b8d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	330a      	adds	r3, #10
 800b8d8:	7819      	ldrb	r1, [r3, #0]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	330a      	adds	r3, #10
 800b8de:	781a      	ldrb	r2, [r3, #0]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	330a      	adds	r3, #10
 800b8e4:	404a      	eors	r2, r1
 800b8e6:	b2d2      	uxtb	r2, r2
 800b8e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	330b      	adds	r3, #11
 800b8ee:	7819      	ldrb	r1, [r3, #0]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	330b      	adds	r3, #11
 800b8f4:	781a      	ldrb	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	330b      	adds	r3, #11
 800b8fa:	404a      	eors	r2, r1
 800b8fc:	b2d2      	uxtb	r2, r2
 800b8fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	330c      	adds	r3, #12
 800b904:	7819      	ldrb	r1, [r3, #0]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	330c      	adds	r3, #12
 800b90a:	781a      	ldrb	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	330c      	adds	r3, #12
 800b910:	404a      	eors	r2, r1
 800b912:	b2d2      	uxtb	r2, r2
 800b914:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	330d      	adds	r3, #13
 800b91a:	7819      	ldrb	r1, [r3, #0]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	330d      	adds	r3, #13
 800b920:	781a      	ldrb	r2, [r3, #0]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	330d      	adds	r3, #13
 800b926:	404a      	eors	r2, r1
 800b928:	b2d2      	uxtb	r2, r2
 800b92a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	330e      	adds	r3, #14
 800b930:	7819      	ldrb	r1, [r3, #0]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	330e      	adds	r3, #14
 800b936:	781a      	ldrb	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	330e      	adds	r3, #14
 800b93c:	404a      	eors	r2, r1
 800b93e:	b2d2      	uxtb	r2, r2
 800b940:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	330f      	adds	r3, #15
 800b946:	7819      	ldrb	r1, [r3, #0]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	330f      	adds	r3, #15
 800b94c:	781a      	ldrb	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	330f      	adds	r3, #15
 800b952:	404a      	eors	r2, r1
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	701a      	strb	r2, [r3, #0]
#endif
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bc80      	pop	{r7}
 800b960:	4770      	bx	lr

0800b962 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	60f8      	str	r0, [r7, #12]
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	781a      	ldrb	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	4053      	eors	r3, r2
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	3301      	adds	r3, #1
 800b982:	7819      	ldrb	r1, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3301      	adds	r3, #1
 800b988:	781a      	ldrb	r2, [r3, #0]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3301      	adds	r3, #1
 800b98e:	404a      	eors	r2, r1
 800b990:	b2d2      	uxtb	r2, r2
 800b992:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	3302      	adds	r3, #2
 800b998:	7819      	ldrb	r1, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3302      	adds	r3, #2
 800b99e:	781a      	ldrb	r2, [r3, #0]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3302      	adds	r3, #2
 800b9a4:	404a      	eors	r2, r1
 800b9a6:	b2d2      	uxtb	r2, r2
 800b9a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	3303      	adds	r3, #3
 800b9ae:	7819      	ldrb	r1, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	3303      	adds	r3, #3
 800b9b4:	781a      	ldrb	r2, [r3, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	3303      	adds	r3, #3
 800b9ba:	404a      	eors	r2, r1
 800b9bc:	b2d2      	uxtb	r2, r2
 800b9be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	3304      	adds	r3, #4
 800b9c4:	7819      	ldrb	r1, [r3, #0]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	781a      	ldrb	r2, [r3, #0]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3304      	adds	r3, #4
 800b9d0:	404a      	eors	r2, r1
 800b9d2:	b2d2      	uxtb	r2, r2
 800b9d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	3305      	adds	r3, #5
 800b9da:	7819      	ldrb	r1, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3305      	adds	r3, #5
 800b9e0:	781a      	ldrb	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3305      	adds	r3, #5
 800b9e6:	404a      	eors	r2, r1
 800b9e8:	b2d2      	uxtb	r2, r2
 800b9ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	3306      	adds	r3, #6
 800b9f0:	7819      	ldrb	r1, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3306      	adds	r3, #6
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3306      	adds	r3, #6
 800b9fc:	404a      	eors	r2, r1
 800b9fe:	b2d2      	uxtb	r2, r2
 800ba00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	3307      	adds	r3, #7
 800ba06:	7819      	ldrb	r1, [r3, #0]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3307      	adds	r3, #7
 800ba0c:	781a      	ldrb	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	3307      	adds	r3, #7
 800ba12:	404a      	eors	r2, r1
 800ba14:	b2d2      	uxtb	r2, r2
 800ba16:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	7819      	ldrb	r1, [r3, #0]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3308      	adds	r3, #8
 800ba22:	781a      	ldrb	r2, [r3, #0]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	3308      	adds	r3, #8
 800ba28:	404a      	eors	r2, r1
 800ba2a:	b2d2      	uxtb	r2, r2
 800ba2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	3309      	adds	r3, #9
 800ba32:	7819      	ldrb	r1, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	3309      	adds	r3, #9
 800ba38:	781a      	ldrb	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3309      	adds	r3, #9
 800ba3e:	404a      	eors	r2, r1
 800ba40:	b2d2      	uxtb	r2, r2
 800ba42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	330a      	adds	r3, #10
 800ba48:	7819      	ldrb	r1, [r3, #0]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	330a      	adds	r3, #10
 800ba4e:	781a      	ldrb	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	330a      	adds	r3, #10
 800ba54:	404a      	eors	r2, r1
 800ba56:	b2d2      	uxtb	r2, r2
 800ba58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	330b      	adds	r3, #11
 800ba5e:	7819      	ldrb	r1, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	330b      	adds	r3, #11
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	330b      	adds	r3, #11
 800ba6a:	404a      	eors	r2, r1
 800ba6c:	b2d2      	uxtb	r2, r2
 800ba6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	330c      	adds	r3, #12
 800ba74:	7819      	ldrb	r1, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	330c      	adds	r3, #12
 800ba7a:	781a      	ldrb	r2, [r3, #0]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	330c      	adds	r3, #12
 800ba80:	404a      	eors	r2, r1
 800ba82:	b2d2      	uxtb	r2, r2
 800ba84:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	330d      	adds	r3, #13
 800ba8a:	7819      	ldrb	r1, [r3, #0]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	330d      	adds	r3, #13
 800ba90:	781a      	ldrb	r2, [r3, #0]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	330d      	adds	r3, #13
 800ba96:	404a      	eors	r2, r1
 800ba98:	b2d2      	uxtb	r2, r2
 800ba9a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	330e      	adds	r3, #14
 800baa0:	7819      	ldrb	r1, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	330e      	adds	r3, #14
 800baa6:	781a      	ldrb	r2, [r3, #0]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	330e      	adds	r3, #14
 800baac:	404a      	eors	r2, r1
 800baae:	b2d2      	uxtb	r2, r2
 800bab0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	330f      	adds	r3, #15
 800bab6:	7819      	ldrb	r1, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	330f      	adds	r3, #15
 800babc:	781a      	ldrb	r2, [r3, #0]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	330f      	adds	r3, #15
 800bac2:	404a      	eors	r2, r1
 800bac4:	b2d2      	uxtb	r2, r2
 800bac6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800bac8:	bf00      	nop
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	bc80      	pop	{r7}
 800bad0:	4770      	bx	lr

0800bad2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f7ff fe88 	bl	800b7f4 <xor_block>
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	461a      	mov	r2, r3
 800bafa:	4b48      	ldr	r3, [pc, #288]	; (800bc1c <shift_sub_rows+0x130>)
 800bafc:	5c9a      	ldrb	r2, [r3, r2]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	3304      	adds	r3, #4
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	4619      	mov	r1, r3
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	4a43      	ldr	r2, [pc, #268]	; (800bc1c <shift_sub_rows+0x130>)
 800bb10:	5c52      	ldrb	r2, [r2, r1]
 800bb12:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3308      	adds	r3, #8
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	3308      	adds	r3, #8
 800bb20:	4a3e      	ldr	r2, [pc, #248]	; (800bc1c <shift_sub_rows+0x130>)
 800bb22:	5c52      	ldrb	r2, [r2, r1]
 800bb24:	701a      	strb	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	330c      	adds	r3, #12
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	330c      	adds	r3, #12
 800bb32:	4a3a      	ldr	r2, [pc, #232]	; (800bc1c <shift_sub_rows+0x130>)
 800bb34:	5c52      	ldrb	r2, [r2, r1]
 800bb36:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	785b      	ldrb	r3, [r3, #1]
 800bb3c:	73fb      	strb	r3, [r7, #15]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	3305      	adds	r3, #5
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	4619      	mov	r1, r3
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	4a34      	ldr	r2, [pc, #208]	; (800bc1c <shift_sub_rows+0x130>)
 800bb4c:	5c52      	ldrb	r2, [r2, r1]
 800bb4e:	701a      	strb	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	3309      	adds	r3, #9
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	4619      	mov	r1, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3305      	adds	r3, #5
 800bb5c:	4a2f      	ldr	r2, [pc, #188]	; (800bc1c <shift_sub_rows+0x130>)
 800bb5e:	5c52      	ldrb	r2, [r2, r1]
 800bb60:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	330d      	adds	r3, #13
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	3309      	adds	r3, #9
 800bb6e:	4a2b      	ldr	r2, [pc, #172]	; (800bc1c <shift_sub_rows+0x130>)
 800bb70:	5c52      	ldrb	r2, [r2, r1]
 800bb72:	701a      	strb	r2, [r3, #0]
 800bb74:	7bfa      	ldrb	r2, [r7, #15]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	330d      	adds	r3, #13
 800bb7a:	4928      	ldr	r1, [pc, #160]	; (800bc1c <shift_sub_rows+0x130>)
 800bb7c:	5c8a      	ldrb	r2, [r1, r2]
 800bb7e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	789b      	ldrb	r3, [r3, #2]
 800bb84:	73fb      	strb	r3, [r7, #15]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	330a      	adds	r3, #10
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	3302      	adds	r3, #2
 800bb92:	4a22      	ldr	r2, [pc, #136]	; (800bc1c <shift_sub_rows+0x130>)
 800bb94:	5c52      	ldrb	r2, [r2, r1]
 800bb96:	701a      	strb	r2, [r3, #0]
 800bb98:	7bfa      	ldrb	r2, [r7, #15]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	330a      	adds	r3, #10
 800bb9e:	491f      	ldr	r1, [pc, #124]	; (800bc1c <shift_sub_rows+0x130>)
 800bba0:	5c8a      	ldrb	r2, [r1, r2]
 800bba2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	799b      	ldrb	r3, [r3, #6]
 800bba8:	73fb      	strb	r3, [r7, #15]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	330e      	adds	r3, #14
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	3306      	adds	r3, #6
 800bbb6:	4a19      	ldr	r2, [pc, #100]	; (800bc1c <shift_sub_rows+0x130>)
 800bbb8:	5c52      	ldrb	r2, [r2, r1]
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	7bfa      	ldrb	r2, [r7, #15]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	330e      	adds	r3, #14
 800bbc2:	4916      	ldr	r1, [pc, #88]	; (800bc1c <shift_sub_rows+0x130>)
 800bbc4:	5c8a      	ldrb	r2, [r1, r2]
 800bbc6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	7bdb      	ldrb	r3, [r3, #15]
 800bbcc:	73fb      	strb	r3, [r7, #15]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	330b      	adds	r3, #11
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	330f      	adds	r3, #15
 800bbda:	4a10      	ldr	r2, [pc, #64]	; (800bc1c <shift_sub_rows+0x130>)
 800bbdc:	5c52      	ldrb	r2, [r2, r1]
 800bbde:	701a      	strb	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3307      	adds	r3, #7
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	4619      	mov	r1, r3
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	330b      	adds	r3, #11
 800bbec:	4a0b      	ldr	r2, [pc, #44]	; (800bc1c <shift_sub_rows+0x130>)
 800bbee:	5c52      	ldrb	r2, [r2, r1]
 800bbf0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3303      	adds	r3, #3
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	3307      	adds	r3, #7
 800bbfe:	4a07      	ldr	r2, [pc, #28]	; (800bc1c <shift_sub_rows+0x130>)
 800bc00:	5c52      	ldrb	r2, [r2, r1]
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	7bfa      	ldrb	r2, [r7, #15]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	3303      	adds	r3, #3
 800bc0a:	4904      	ldr	r1, [pc, #16]	; (800bc1c <shift_sub_rows+0x130>)
 800bc0c:	5c8a      	ldrb	r2, [r1, r2]
 800bc0e:	701a      	strb	r2, [r3, #0]
}
 800bc10:	bf00      	nop
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr
 800bc1a:	bf00      	nop
 800bc1c:	0801eb2c 	.word	0x0801eb2c

0800bc20 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800bc28:	f107 0308 	add.w	r3, r7, #8
 800bc2c:	6879      	ldr	r1, [r7, #4]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fd6c 	bl	800b70c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800bc34:	7a3b      	ldrb	r3, [r7, #8]
 800bc36:	461a      	mov	r2, r3
 800bc38:	4b9a      	ldr	r3, [pc, #616]	; (800bea4 <mix_sub_columns+0x284>)
 800bc3a:	5c9a      	ldrb	r2, [r3, r2]
 800bc3c:	7b7b      	ldrb	r3, [r7, #13]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	4b99      	ldr	r3, [pc, #612]	; (800bea8 <mix_sub_columns+0x288>)
 800bc42:	5c5b      	ldrb	r3, [r3, r1]
 800bc44:	4053      	eors	r3, r2
 800bc46:	b2da      	uxtb	r2, r3
 800bc48:	7cbb      	ldrb	r3, [r7, #18]
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	4b97      	ldr	r3, [pc, #604]	; (800beac <mix_sub_columns+0x28c>)
 800bc4e:	5c5b      	ldrb	r3, [r3, r1]
 800bc50:	4053      	eors	r3, r2
 800bc52:	b2da      	uxtb	r2, r3
 800bc54:	7dfb      	ldrb	r3, [r7, #23]
 800bc56:	4619      	mov	r1, r3
 800bc58:	4b94      	ldr	r3, [pc, #592]	; (800beac <mix_sub_columns+0x28c>)
 800bc5a:	5c5b      	ldrb	r3, [r3, r1]
 800bc5c:	4053      	eors	r3, r2
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800bc64:	7a3b      	ldrb	r3, [r7, #8]
 800bc66:	461a      	mov	r2, r3
 800bc68:	4b90      	ldr	r3, [pc, #576]	; (800beac <mix_sub_columns+0x28c>)
 800bc6a:	5c9a      	ldrb	r2, [r3, r2]
 800bc6c:	7b7b      	ldrb	r3, [r7, #13]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	4b8c      	ldr	r3, [pc, #560]	; (800bea4 <mix_sub_columns+0x284>)
 800bc72:	5c5b      	ldrb	r3, [r3, r1]
 800bc74:	4053      	eors	r3, r2
 800bc76:	b2da      	uxtb	r2, r3
 800bc78:	7cbb      	ldrb	r3, [r7, #18]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	4b8a      	ldr	r3, [pc, #552]	; (800bea8 <mix_sub_columns+0x288>)
 800bc7e:	5c5b      	ldrb	r3, [r3, r1]
 800bc80:	4053      	eors	r3, r2
 800bc82:	b2d9      	uxtb	r1, r3
 800bc84:	7dfb      	ldrb	r3, [r7, #23]
 800bc86:	461a      	mov	r2, r3
 800bc88:	4b88      	ldr	r3, [pc, #544]	; (800beac <mix_sub_columns+0x28c>)
 800bc8a:	5c9a      	ldrb	r2, [r3, r2]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	404a      	eors	r2, r1
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800bc96:	7a3b      	ldrb	r3, [r7, #8]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	4b84      	ldr	r3, [pc, #528]	; (800beac <mix_sub_columns+0x28c>)
 800bc9c:	5c9a      	ldrb	r2, [r3, r2]
 800bc9e:	7b7b      	ldrb	r3, [r7, #13]
 800bca0:	4619      	mov	r1, r3
 800bca2:	4b82      	ldr	r3, [pc, #520]	; (800beac <mix_sub_columns+0x28c>)
 800bca4:	5c5b      	ldrb	r3, [r3, r1]
 800bca6:	4053      	eors	r3, r2
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	7cbb      	ldrb	r3, [r7, #18]
 800bcac:	4619      	mov	r1, r3
 800bcae:	4b7d      	ldr	r3, [pc, #500]	; (800bea4 <mix_sub_columns+0x284>)
 800bcb0:	5c5b      	ldrb	r3, [r3, r1]
 800bcb2:	4053      	eors	r3, r2
 800bcb4:	b2d9      	uxtb	r1, r3
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
 800bcb8:	461a      	mov	r2, r3
 800bcba:	4b7b      	ldr	r3, [pc, #492]	; (800bea8 <mix_sub_columns+0x288>)
 800bcbc:	5c9a      	ldrb	r2, [r3, r2]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	3302      	adds	r3, #2
 800bcc2:	404a      	eors	r2, r1
 800bcc4:	b2d2      	uxtb	r2, r2
 800bcc6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800bcc8:	7a3b      	ldrb	r3, [r7, #8]
 800bcca:	461a      	mov	r2, r3
 800bccc:	4b76      	ldr	r3, [pc, #472]	; (800bea8 <mix_sub_columns+0x288>)
 800bcce:	5c9a      	ldrb	r2, [r3, r2]
 800bcd0:	7b7b      	ldrb	r3, [r7, #13]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	4b75      	ldr	r3, [pc, #468]	; (800beac <mix_sub_columns+0x28c>)
 800bcd6:	5c5b      	ldrb	r3, [r3, r1]
 800bcd8:	4053      	eors	r3, r2
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	7cbb      	ldrb	r3, [r7, #18]
 800bcde:	4619      	mov	r1, r3
 800bce0:	4b72      	ldr	r3, [pc, #456]	; (800beac <mix_sub_columns+0x28c>)
 800bce2:	5c5b      	ldrb	r3, [r3, r1]
 800bce4:	4053      	eors	r3, r2
 800bce6:	b2d9      	uxtb	r1, r3
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	461a      	mov	r2, r3
 800bcec:	4b6d      	ldr	r3, [pc, #436]	; (800bea4 <mix_sub_columns+0x284>)
 800bcee:	5c9a      	ldrb	r2, [r3, r2]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	3303      	adds	r3, #3
 800bcf4:	404a      	eors	r2, r1
 800bcf6:	b2d2      	uxtb	r2, r2
 800bcf8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800bcfa:	7b3b      	ldrb	r3, [r7, #12]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	4b69      	ldr	r3, [pc, #420]	; (800bea4 <mix_sub_columns+0x284>)
 800bd00:	5c9a      	ldrb	r2, [r3, r2]
 800bd02:	7c7b      	ldrb	r3, [r7, #17]
 800bd04:	4619      	mov	r1, r3
 800bd06:	4b68      	ldr	r3, [pc, #416]	; (800bea8 <mix_sub_columns+0x288>)
 800bd08:	5c5b      	ldrb	r3, [r3, r1]
 800bd0a:	4053      	eors	r3, r2
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	7dbb      	ldrb	r3, [r7, #22]
 800bd10:	4619      	mov	r1, r3
 800bd12:	4b66      	ldr	r3, [pc, #408]	; (800beac <mix_sub_columns+0x28c>)
 800bd14:	5c5b      	ldrb	r3, [r3, r1]
 800bd16:	4053      	eors	r3, r2
 800bd18:	b2d9      	uxtb	r1, r3
 800bd1a:	7afb      	ldrb	r3, [r7, #11]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4b63      	ldr	r3, [pc, #396]	; (800beac <mix_sub_columns+0x28c>)
 800bd20:	5c9a      	ldrb	r2, [r3, r2]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	3304      	adds	r3, #4
 800bd26:	404a      	eors	r2, r1
 800bd28:	b2d2      	uxtb	r2, r2
 800bd2a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800bd2c:	7b3b      	ldrb	r3, [r7, #12]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	4b5e      	ldr	r3, [pc, #376]	; (800beac <mix_sub_columns+0x28c>)
 800bd32:	5c9a      	ldrb	r2, [r3, r2]
 800bd34:	7c7b      	ldrb	r3, [r7, #17]
 800bd36:	4619      	mov	r1, r3
 800bd38:	4b5a      	ldr	r3, [pc, #360]	; (800bea4 <mix_sub_columns+0x284>)
 800bd3a:	5c5b      	ldrb	r3, [r3, r1]
 800bd3c:	4053      	eors	r3, r2
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	7dbb      	ldrb	r3, [r7, #22]
 800bd42:	4619      	mov	r1, r3
 800bd44:	4b58      	ldr	r3, [pc, #352]	; (800bea8 <mix_sub_columns+0x288>)
 800bd46:	5c5b      	ldrb	r3, [r3, r1]
 800bd48:	4053      	eors	r3, r2
 800bd4a:	b2d9      	uxtb	r1, r3
 800bd4c:	7afb      	ldrb	r3, [r7, #11]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	4b56      	ldr	r3, [pc, #344]	; (800beac <mix_sub_columns+0x28c>)
 800bd52:	5c9a      	ldrb	r2, [r3, r2]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	3305      	adds	r3, #5
 800bd58:	404a      	eors	r2, r1
 800bd5a:	b2d2      	uxtb	r2, r2
 800bd5c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800bd5e:	7b3b      	ldrb	r3, [r7, #12]
 800bd60:	461a      	mov	r2, r3
 800bd62:	4b52      	ldr	r3, [pc, #328]	; (800beac <mix_sub_columns+0x28c>)
 800bd64:	5c9a      	ldrb	r2, [r3, r2]
 800bd66:	7c7b      	ldrb	r3, [r7, #17]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	4b50      	ldr	r3, [pc, #320]	; (800beac <mix_sub_columns+0x28c>)
 800bd6c:	5c5b      	ldrb	r3, [r3, r1]
 800bd6e:	4053      	eors	r3, r2
 800bd70:	b2da      	uxtb	r2, r3
 800bd72:	7dbb      	ldrb	r3, [r7, #22]
 800bd74:	4619      	mov	r1, r3
 800bd76:	4b4b      	ldr	r3, [pc, #300]	; (800bea4 <mix_sub_columns+0x284>)
 800bd78:	5c5b      	ldrb	r3, [r3, r1]
 800bd7a:	4053      	eors	r3, r2
 800bd7c:	b2d9      	uxtb	r1, r3
 800bd7e:	7afb      	ldrb	r3, [r7, #11]
 800bd80:	461a      	mov	r2, r3
 800bd82:	4b49      	ldr	r3, [pc, #292]	; (800bea8 <mix_sub_columns+0x288>)
 800bd84:	5c9a      	ldrb	r2, [r3, r2]
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	3306      	adds	r3, #6
 800bd8a:	404a      	eors	r2, r1
 800bd8c:	b2d2      	uxtb	r2, r2
 800bd8e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800bd90:	7b3b      	ldrb	r3, [r7, #12]
 800bd92:	461a      	mov	r2, r3
 800bd94:	4b44      	ldr	r3, [pc, #272]	; (800bea8 <mix_sub_columns+0x288>)
 800bd96:	5c9a      	ldrb	r2, [r3, r2]
 800bd98:	7c7b      	ldrb	r3, [r7, #17]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	4b43      	ldr	r3, [pc, #268]	; (800beac <mix_sub_columns+0x28c>)
 800bd9e:	5c5b      	ldrb	r3, [r3, r1]
 800bda0:	4053      	eors	r3, r2
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	7dbb      	ldrb	r3, [r7, #22]
 800bda6:	4619      	mov	r1, r3
 800bda8:	4b40      	ldr	r3, [pc, #256]	; (800beac <mix_sub_columns+0x28c>)
 800bdaa:	5c5b      	ldrb	r3, [r3, r1]
 800bdac:	4053      	eors	r3, r2
 800bdae:	b2d9      	uxtb	r1, r3
 800bdb0:	7afb      	ldrb	r3, [r7, #11]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	4b3b      	ldr	r3, [pc, #236]	; (800bea4 <mix_sub_columns+0x284>)
 800bdb6:	5c9a      	ldrb	r2, [r3, r2]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	3307      	adds	r3, #7
 800bdbc:	404a      	eors	r2, r1
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800bdc2:	7c3b      	ldrb	r3, [r7, #16]
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4b37      	ldr	r3, [pc, #220]	; (800bea4 <mix_sub_columns+0x284>)
 800bdc8:	5c9a      	ldrb	r2, [r3, r2]
 800bdca:	7d7b      	ldrb	r3, [r7, #21]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4b36      	ldr	r3, [pc, #216]	; (800bea8 <mix_sub_columns+0x288>)
 800bdd0:	5c5b      	ldrb	r3, [r3, r1]
 800bdd2:	4053      	eors	r3, r2
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	7abb      	ldrb	r3, [r7, #10]
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4b34      	ldr	r3, [pc, #208]	; (800beac <mix_sub_columns+0x28c>)
 800bddc:	5c5b      	ldrb	r3, [r3, r1]
 800bdde:	4053      	eors	r3, r2
 800bde0:	b2d9      	uxtb	r1, r3
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	461a      	mov	r2, r3
 800bde6:	4b31      	ldr	r3, [pc, #196]	; (800beac <mix_sub_columns+0x28c>)
 800bde8:	5c9a      	ldrb	r2, [r3, r2]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	3308      	adds	r3, #8
 800bdee:	404a      	eors	r2, r1
 800bdf0:	b2d2      	uxtb	r2, r2
 800bdf2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800bdf4:	7c3b      	ldrb	r3, [r7, #16]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	4b2c      	ldr	r3, [pc, #176]	; (800beac <mix_sub_columns+0x28c>)
 800bdfa:	5c9a      	ldrb	r2, [r3, r2]
 800bdfc:	7d7b      	ldrb	r3, [r7, #21]
 800bdfe:	4619      	mov	r1, r3
 800be00:	4b28      	ldr	r3, [pc, #160]	; (800bea4 <mix_sub_columns+0x284>)
 800be02:	5c5b      	ldrb	r3, [r3, r1]
 800be04:	4053      	eors	r3, r2
 800be06:	b2da      	uxtb	r2, r3
 800be08:	7abb      	ldrb	r3, [r7, #10]
 800be0a:	4619      	mov	r1, r3
 800be0c:	4b26      	ldr	r3, [pc, #152]	; (800bea8 <mix_sub_columns+0x288>)
 800be0e:	5c5b      	ldrb	r3, [r3, r1]
 800be10:	4053      	eors	r3, r2
 800be12:	b2d9      	uxtb	r1, r3
 800be14:	7bfb      	ldrb	r3, [r7, #15]
 800be16:	461a      	mov	r2, r3
 800be18:	4b24      	ldr	r3, [pc, #144]	; (800beac <mix_sub_columns+0x28c>)
 800be1a:	5c9a      	ldrb	r2, [r3, r2]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	3309      	adds	r3, #9
 800be20:	404a      	eors	r2, r1
 800be22:	b2d2      	uxtb	r2, r2
 800be24:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800be26:	7c3b      	ldrb	r3, [r7, #16]
 800be28:	461a      	mov	r2, r3
 800be2a:	4b20      	ldr	r3, [pc, #128]	; (800beac <mix_sub_columns+0x28c>)
 800be2c:	5c9a      	ldrb	r2, [r3, r2]
 800be2e:	7d7b      	ldrb	r3, [r7, #21]
 800be30:	4619      	mov	r1, r3
 800be32:	4b1e      	ldr	r3, [pc, #120]	; (800beac <mix_sub_columns+0x28c>)
 800be34:	5c5b      	ldrb	r3, [r3, r1]
 800be36:	4053      	eors	r3, r2
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	7abb      	ldrb	r3, [r7, #10]
 800be3c:	4619      	mov	r1, r3
 800be3e:	4b19      	ldr	r3, [pc, #100]	; (800bea4 <mix_sub_columns+0x284>)
 800be40:	5c5b      	ldrb	r3, [r3, r1]
 800be42:	4053      	eors	r3, r2
 800be44:	b2d9      	uxtb	r1, r3
 800be46:	7bfb      	ldrb	r3, [r7, #15]
 800be48:	461a      	mov	r2, r3
 800be4a:	4b17      	ldr	r3, [pc, #92]	; (800bea8 <mix_sub_columns+0x288>)
 800be4c:	5c9a      	ldrb	r2, [r3, r2]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	330a      	adds	r3, #10
 800be52:	404a      	eors	r2, r1
 800be54:	b2d2      	uxtb	r2, r2
 800be56:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800be58:	7c3b      	ldrb	r3, [r7, #16]
 800be5a:	461a      	mov	r2, r3
 800be5c:	4b12      	ldr	r3, [pc, #72]	; (800bea8 <mix_sub_columns+0x288>)
 800be5e:	5c9a      	ldrb	r2, [r3, r2]
 800be60:	7d7b      	ldrb	r3, [r7, #21]
 800be62:	4619      	mov	r1, r3
 800be64:	4b11      	ldr	r3, [pc, #68]	; (800beac <mix_sub_columns+0x28c>)
 800be66:	5c5b      	ldrb	r3, [r3, r1]
 800be68:	4053      	eors	r3, r2
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	7abb      	ldrb	r3, [r7, #10]
 800be6e:	4619      	mov	r1, r3
 800be70:	4b0e      	ldr	r3, [pc, #56]	; (800beac <mix_sub_columns+0x28c>)
 800be72:	5c5b      	ldrb	r3, [r3, r1]
 800be74:	4053      	eors	r3, r2
 800be76:	b2d9      	uxtb	r1, r3
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	461a      	mov	r2, r3
 800be7c:	4b09      	ldr	r3, [pc, #36]	; (800bea4 <mix_sub_columns+0x284>)
 800be7e:	5c9a      	ldrb	r2, [r3, r2]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	330b      	adds	r3, #11
 800be84:	404a      	eors	r2, r1
 800be86:	b2d2      	uxtb	r2, r2
 800be88:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800be8a:	7d3b      	ldrb	r3, [r7, #20]
 800be8c:	461a      	mov	r2, r3
 800be8e:	4b05      	ldr	r3, [pc, #20]	; (800bea4 <mix_sub_columns+0x284>)
 800be90:	5c9a      	ldrb	r2, [r3, r2]
 800be92:	7a7b      	ldrb	r3, [r7, #9]
 800be94:	4619      	mov	r1, r3
 800be96:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <mix_sub_columns+0x288>)
 800be98:	5c5b      	ldrb	r3, [r3, r1]
 800be9a:	4053      	eors	r3, r2
 800be9c:	b2da      	uxtb	r2, r3
 800be9e:	7bbb      	ldrb	r3, [r7, #14]
 800bea0:	4619      	mov	r1, r3
 800bea2:	e005      	b.n	800beb0 <mix_sub_columns+0x290>
 800bea4:	0801ec2c 	.word	0x0801ec2c
 800bea8:	0801ed2c 	.word	0x0801ed2c
 800beac:	0801eb2c 	.word	0x0801eb2c
 800beb0:	4b2d      	ldr	r3, [pc, #180]	; (800bf68 <mix_sub_columns+0x348>)
 800beb2:	5c5b      	ldrb	r3, [r3, r1]
 800beb4:	4053      	eors	r3, r2
 800beb6:	b2d9      	uxtb	r1, r3
 800beb8:	7cfb      	ldrb	r3, [r7, #19]
 800beba:	461a      	mov	r2, r3
 800bebc:	4b2a      	ldr	r3, [pc, #168]	; (800bf68 <mix_sub_columns+0x348>)
 800bebe:	5c9a      	ldrb	r2, [r3, r2]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	330c      	adds	r3, #12
 800bec4:	404a      	eors	r2, r1
 800bec6:	b2d2      	uxtb	r2, r2
 800bec8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800beca:	7d3b      	ldrb	r3, [r7, #20]
 800becc:	461a      	mov	r2, r3
 800bece:	4b26      	ldr	r3, [pc, #152]	; (800bf68 <mix_sub_columns+0x348>)
 800bed0:	5c9a      	ldrb	r2, [r3, r2]
 800bed2:	7a7b      	ldrb	r3, [r7, #9]
 800bed4:	4619      	mov	r1, r3
 800bed6:	4b25      	ldr	r3, [pc, #148]	; (800bf6c <mix_sub_columns+0x34c>)
 800bed8:	5c5b      	ldrb	r3, [r3, r1]
 800beda:	4053      	eors	r3, r2
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	7bbb      	ldrb	r3, [r7, #14]
 800bee0:	4619      	mov	r1, r3
 800bee2:	4b23      	ldr	r3, [pc, #140]	; (800bf70 <mix_sub_columns+0x350>)
 800bee4:	5c5b      	ldrb	r3, [r3, r1]
 800bee6:	4053      	eors	r3, r2
 800bee8:	b2d9      	uxtb	r1, r3
 800beea:	7cfb      	ldrb	r3, [r7, #19]
 800beec:	461a      	mov	r2, r3
 800beee:	4b1e      	ldr	r3, [pc, #120]	; (800bf68 <mix_sub_columns+0x348>)
 800bef0:	5c9a      	ldrb	r2, [r3, r2]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	330d      	adds	r3, #13
 800bef6:	404a      	eors	r2, r1
 800bef8:	b2d2      	uxtb	r2, r2
 800befa:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800befc:	7d3b      	ldrb	r3, [r7, #20]
 800befe:	461a      	mov	r2, r3
 800bf00:	4b19      	ldr	r3, [pc, #100]	; (800bf68 <mix_sub_columns+0x348>)
 800bf02:	5c9a      	ldrb	r2, [r3, r2]
 800bf04:	7a7b      	ldrb	r3, [r7, #9]
 800bf06:	4619      	mov	r1, r3
 800bf08:	4b17      	ldr	r3, [pc, #92]	; (800bf68 <mix_sub_columns+0x348>)
 800bf0a:	5c5b      	ldrb	r3, [r3, r1]
 800bf0c:	4053      	eors	r3, r2
 800bf0e:	b2da      	uxtb	r2, r3
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	4619      	mov	r1, r3
 800bf14:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <mix_sub_columns+0x34c>)
 800bf16:	5c5b      	ldrb	r3, [r3, r1]
 800bf18:	4053      	eors	r3, r2
 800bf1a:	b2d9      	uxtb	r1, r3
 800bf1c:	7cfb      	ldrb	r3, [r7, #19]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	4b13      	ldr	r3, [pc, #76]	; (800bf70 <mix_sub_columns+0x350>)
 800bf22:	5c9a      	ldrb	r2, [r3, r2]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	330e      	adds	r3, #14
 800bf28:	404a      	eors	r2, r1
 800bf2a:	b2d2      	uxtb	r2, r2
 800bf2c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800bf2e:	7d3b      	ldrb	r3, [r7, #20]
 800bf30:	461a      	mov	r2, r3
 800bf32:	4b0f      	ldr	r3, [pc, #60]	; (800bf70 <mix_sub_columns+0x350>)
 800bf34:	5c9a      	ldrb	r2, [r3, r2]
 800bf36:	7a7b      	ldrb	r3, [r7, #9]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4b0b      	ldr	r3, [pc, #44]	; (800bf68 <mix_sub_columns+0x348>)
 800bf3c:	5c5b      	ldrb	r3, [r3, r1]
 800bf3e:	4053      	eors	r3, r2
 800bf40:	b2da      	uxtb	r2, r3
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
 800bf44:	4619      	mov	r1, r3
 800bf46:	4b08      	ldr	r3, [pc, #32]	; (800bf68 <mix_sub_columns+0x348>)
 800bf48:	5c5b      	ldrb	r3, [r3, r1]
 800bf4a:	4053      	eors	r3, r2
 800bf4c:	b2d9      	uxtb	r1, r3
 800bf4e:	7cfb      	ldrb	r3, [r7, #19]
 800bf50:	461a      	mov	r2, r3
 800bf52:	4b06      	ldr	r3, [pc, #24]	; (800bf6c <mix_sub_columns+0x34c>)
 800bf54:	5c9a      	ldrb	r2, [r3, r2]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	330f      	adds	r3, #15
 800bf5a:	404a      	eors	r2, r1
 800bf5c:	b2d2      	uxtb	r2, r2
 800bf5e:	701a      	strb	r2, [r3, #0]
  }
 800bf60:	bf00      	nop
 800bf62:	3718      	adds	r7, #24
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	0801eb2c 	.word	0x0801eb2c
 800bf6c:	0801ec2c 	.word	0x0801ec2c
 800bf70:	0801ed2c 	.word	0x0801ed2c

0800bf74 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800bf82:	7afb      	ldrb	r3, [r7, #11]
 800bf84:	3b10      	subs	r3, #16
 800bf86:	2b10      	cmp	r3, #16
 800bf88:	bf8c      	ite	hi
 800bf8a:	2201      	movhi	r2, #1
 800bf8c:	2200      	movls	r2, #0
 800bf8e:	b2d2      	uxtb	r2, r2
 800bf90:	2a00      	cmp	r2, #0
 800bf92:	d10d      	bne.n	800bfb0 <lorawan_aes_set_key+0x3c>
 800bf94:	2201      	movs	r2, #1
 800bf96:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800bf9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	bf14      	ite	ne
 800bfa6:	2301      	movne	r3, #1
 800bfa8:	2300      	moveq	r3, #0
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d105      	bne.n	800bfbc <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800bfb8:	23ff      	movs	r3, #255	; 0xff
 800bfba:	e0b2      	b.n	800c122 <lorawan_aes_set_key+0x1ae>
        break;
 800bfbc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	7afa      	ldrb	r2, [r7, #11]
 800bfc2:	68f9      	ldr	r1, [r7, #12]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff fbfa 	bl	800b7be <copy_block_nn>
    hi = (keylen + 28) << 2;
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	331c      	adds	r3, #28
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800bfd4:	7c7b      	ldrb	r3, [r7, #17]
 800bfd6:	091b      	lsrs	r3, r3, #4
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	3b01      	subs	r3, #1
 800bfdc:	b2da      	uxtb	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800bfe4:	7afb      	ldrb	r3, [r7, #11]
 800bfe6:	75fb      	strb	r3, [r7, #23]
 800bfe8:	2301      	movs	r3, #1
 800bfea:	75bb      	strb	r3, [r7, #22]
 800bfec:	e093      	b.n	800c116 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800bfee:	7dfb      	ldrb	r3, [r7, #23]
 800bff0:	3b04      	subs	r3, #4
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	5cd3      	ldrb	r3, [r2, r3]
 800bff6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800bff8:	7dfb      	ldrb	r3, [r7, #23]
 800bffa:	3b03      	subs	r3, #3
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	5cd3      	ldrb	r3, [r2, r3]
 800c000:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c002:	7dfb      	ldrb	r3, [r7, #23]
 800c004:	3b02      	subs	r3, #2
 800c006:	687a      	ldr	r2, [r7, #4]
 800c008:	5cd3      	ldrb	r3, [r2, r3]
 800c00a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	3b01      	subs	r3, #1
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	5cd3      	ldrb	r3, [r2, r3]
 800c014:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c016:	7dfb      	ldrb	r3, [r7, #23]
 800c018:	7afa      	ldrb	r2, [r7, #11]
 800c01a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c01e:	fb01 f202 	mul.w	r2, r1, r2
 800c022:	1a9b      	subs	r3, r3, r2
 800c024:	b2db      	uxtb	r3, r3
 800c026:	2b00      	cmp	r3, #0
 800c028:	d127      	bne.n	800c07a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800c02a:	7d7b      	ldrb	r3, [r7, #21]
 800c02c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c02e:	7d3b      	ldrb	r3, [r7, #20]
 800c030:	4a3e      	ldr	r2, [pc, #248]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c032:	5cd2      	ldrb	r2, [r2, r3]
 800c034:	7dbb      	ldrb	r3, [r7, #22]
 800c036:	4053      	eors	r3, r2
 800c038:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c03a:	7cfb      	ldrb	r3, [r7, #19]
 800c03c:	4a3b      	ldr	r2, [pc, #236]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c03e:	5cd3      	ldrb	r3, [r2, r3]
 800c040:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c042:	7cbb      	ldrb	r3, [r7, #18]
 800c044:	4a39      	ldr	r2, [pc, #228]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c046:	5cd3      	ldrb	r3, [r2, r3]
 800c048:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c04a:	7c3b      	ldrb	r3, [r7, #16]
 800c04c:	4a37      	ldr	r2, [pc, #220]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c04e:	5cd3      	ldrb	r3, [r2, r3]
 800c050:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c052:	7dbb      	ldrb	r3, [r7, #22]
 800c054:	005b      	lsls	r3, r3, #1
 800c056:	b25a      	sxtb	r2, r3
 800c058:	7dbb      	ldrb	r3, [r7, #22]
 800c05a:	09db      	lsrs	r3, r3, #7
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	4619      	mov	r1, r3
 800c060:	0049      	lsls	r1, r1, #1
 800c062:	440b      	add	r3, r1
 800c064:	4619      	mov	r1, r3
 800c066:	00c8      	lsls	r0, r1, #3
 800c068:	4619      	mov	r1, r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	440b      	add	r3, r1
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	b25b      	sxtb	r3, r3
 800c072:	4053      	eors	r3, r2
 800c074:	b25b      	sxtb	r3, r3
 800c076:	75bb      	strb	r3, [r7, #22]
 800c078:	e01c      	b.n	800c0b4 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	2b18      	cmp	r3, #24
 800c07e:	d919      	bls.n	800c0b4 <lorawan_aes_set_key+0x140>
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	7afa      	ldrb	r2, [r7, #11]
 800c084:	fbb3 f1f2 	udiv	r1, r3, r2
 800c088:	fb01 f202 	mul.w	r2, r1, r2
 800c08c:	1a9b      	subs	r3, r3, r2
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	2b10      	cmp	r3, #16
 800c092:	d10f      	bne.n	800c0b4 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800c094:	7d7b      	ldrb	r3, [r7, #21]
 800c096:	4a25      	ldr	r2, [pc, #148]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c098:	5cd3      	ldrb	r3, [r2, r3]
 800c09a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c09c:	7d3b      	ldrb	r3, [r7, #20]
 800c09e:	4a23      	ldr	r2, [pc, #140]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c0a0:	5cd3      	ldrb	r3, [r2, r3]
 800c0a2:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c0a4:	7cfb      	ldrb	r3, [r7, #19]
 800c0a6:	4a21      	ldr	r2, [pc, #132]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c0a8:	5cd3      	ldrb	r3, [r2, r3]
 800c0aa:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c0ac:	7cbb      	ldrb	r3, [r7, #18]
 800c0ae:	4a1f      	ldr	r2, [pc, #124]	; (800c12c <lorawan_aes_set_key+0x1b8>)
 800c0b0:	5cd3      	ldrb	r3, [r2, r3]
 800c0b2:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c0b4:	7dfa      	ldrb	r2, [r7, #23]
 800c0b6:	7afb      	ldrb	r3, [r7, #11]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c0bc:	7c3b      	ldrb	r3, [r7, #16]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	5cd1      	ldrb	r1, [r2, r3]
 800c0c2:	7dfb      	ldrb	r3, [r7, #23]
 800c0c4:	7d7a      	ldrb	r2, [r7, #21]
 800c0c6:	404a      	eors	r2, r1
 800c0c8:	b2d1      	uxtb	r1, r2
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c0ce:	7c3b      	ldrb	r3, [r7, #16]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	5cd1      	ldrb	r1, [r2, r3]
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	7d3a      	ldrb	r2, [r7, #20]
 800c0dc:	404a      	eors	r2, r1
 800c0de:	b2d1      	uxtb	r1, r2
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c0e4:	7c3b      	ldrb	r3, [r7, #16]
 800c0e6:	3302      	adds	r3, #2
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	5cd1      	ldrb	r1, [r2, r3]
 800c0ec:	7dfb      	ldrb	r3, [r7, #23]
 800c0ee:	3302      	adds	r3, #2
 800c0f0:	7cfa      	ldrb	r2, [r7, #19]
 800c0f2:	404a      	eors	r2, r1
 800c0f4:	b2d1      	uxtb	r1, r2
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c0fa:	7c3b      	ldrb	r3, [r7, #16]
 800c0fc:	3303      	adds	r3, #3
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	5cd1      	ldrb	r1, [r2, r3]
 800c102:	7dfb      	ldrb	r3, [r7, #23]
 800c104:	3303      	adds	r3, #3
 800c106:	7cba      	ldrb	r2, [r7, #18]
 800c108:	404a      	eors	r2, r1
 800c10a:	b2d1      	uxtb	r1, r2
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	3304      	adds	r3, #4
 800c114:	75fb      	strb	r3, [r7, #23]
 800c116:	7dfa      	ldrb	r2, [r7, #23]
 800c118:	7c7b      	ldrb	r3, [r7, #17]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	f4ff af67 	bcc.w	800bfee <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800c120:	2300      	movs	r3, #0
}
 800c122:	4618      	mov	r0, r3
 800c124:	3718      	adds	r7, #24
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	0801eb2c 	.word	0x0801eb2c

0800c130 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b08a      	sub	sp, #40	; 0x28
 800c134:	af00      	add	r7, sp, #0
 800c136:	60f8      	str	r0, [r7, #12]
 800c138:	60b9      	str	r1, [r7, #8]
 800c13a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d038      	beq.n	800c1b8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	f107 0314 	add.w	r3, r7, #20
 800c14c:	68f9      	ldr	r1, [r7, #12]
 800c14e:	4618      	mov	r0, r3
 800c150:	f7ff fc07 	bl	800b962 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c15a:	e014      	b.n	800c186 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c15c:	f107 0314 	add.w	r3, r7, #20
 800c160:	4618      	mov	r0, r3
 800c162:	f7ff fd5d 	bl	800bc20 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c16c:	0112      	lsls	r2, r2, #4
 800c16e:	441a      	add	r2, r3
 800c170:	f107 0314 	add.w	r3, r7, #20
 800c174:	4611      	mov	r1, r2
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff fcab 	bl	800bad2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c180:	3301      	adds	r3, #1
 800c182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c18c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c190:	429a      	cmp	r2, r3
 800c192:	d3e3      	bcc.n	800c15c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c194:	f107 0314 	add.w	r3, r7, #20
 800c198:	4618      	mov	r0, r3
 800c19a:	f7ff fca7 	bl	800baec <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c1a4:	0112      	lsls	r2, r2, #4
 800c1a6:	441a      	add	r2, r3
 800c1a8:	f107 0314 	add.w	r3, r7, #20
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	68b8      	ldr	r0, [r7, #8]
 800c1b0:	f7ff fbd7 	bl	800b962 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	e000      	b.n	800c1ba <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c1b8:	23ff      	movs	r3, #255	; 0xff
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3728      	adds	r7, #40	; 0x28
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800c1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1c6:	b09d      	sub	sp, #116	; 0x74
 800c1c8:	af10      	add	r7, sp, #64	; 0x40
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c1d0:	2306      	movs	r3, #6
 800c1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800c1d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1de:	4611      	mov	r1, r2
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f000 f9af 	bl	800c544 <SecureElementGetKeyByID>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800c1ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f040 80b0 	bne.w	800c356 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800c1f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d106      	bne.n	800c20c <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800c1fe:	4b58      	ldr	r3, [pc, #352]	; (800c360 <PrintKey+0x19c>)
 800c200:	2200      	movs	r2, #0
 800c202:	2100      	movs	r1, #0
 800c204:	2002      	movs	r0, #2
 800c206:	f010 ffbf 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c20a:	e056      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800c20c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c210:	2b01      	cmp	r3, #1
 800c212:	d106      	bne.n	800c222 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800c214:	4b53      	ldr	r3, [pc, #332]	; (800c364 <PrintKey+0x1a0>)
 800c216:	2200      	movs	r2, #0
 800c218:	2100      	movs	r1, #0
 800c21a:	2002      	movs	r0, #2
 800c21c:	f010 ffb4 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c220:	e04b      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800c222:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c226:	2b03      	cmp	r3, #3
 800c228:	d106      	bne.n	800c238 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800c22a:	4b4f      	ldr	r3, [pc, #316]	; (800c368 <PrintKey+0x1a4>)
 800c22c:	2200      	movs	r2, #0
 800c22e:	2100      	movs	r1, #0
 800c230:	2002      	movs	r0, #2
 800c232:	f010 ffa9 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c236:	e040      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800c238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d106      	bne.n	800c24e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800c240:	4b4a      	ldr	r3, [pc, #296]	; (800c36c <PrintKey+0x1a8>)
 800c242:	2200      	movs	r2, #0
 800c244:	2100      	movs	r1, #0
 800c246:	2002      	movs	r0, #2
 800c248:	f010 ff9e 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c24c:	e035      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800c24e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c252:	2b04      	cmp	r3, #4
 800c254:	d106      	bne.n	800c264 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800c256:	4b46      	ldr	r3, [pc, #280]	; (800c370 <PrintKey+0x1ac>)
 800c258:	2200      	movs	r2, #0
 800c25a:	2100      	movs	r1, #0
 800c25c:	2002      	movs	r0, #2
 800c25e:	f010 ff93 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c262:	e02a      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800c264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c268:	2b7f      	cmp	r3, #127	; 0x7f
 800c26a:	d106      	bne.n	800c27a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800c26c:	4b41      	ldr	r3, [pc, #260]	; (800c374 <PrintKey+0x1b0>)
 800c26e:	2200      	movs	r2, #0
 800c270:	2100      	movs	r1, #0
 800c272:	2002      	movs	r0, #2
 800c274:	f010 ff88 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c278:	e01f      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800c27a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d106      	bne.n	800c290 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800c282:	4b3d      	ldr	r3, [pc, #244]	; (800c378 <PrintKey+0x1b4>)
 800c284:	2200      	movs	r2, #0
 800c286:	2100      	movs	r1, #0
 800c288:	2002      	movs	r0, #2
 800c28a:	f010 ff7d 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c28e:	e014      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800c290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c294:	2b81      	cmp	r3, #129	; 0x81
 800c296:	d106      	bne.n	800c2a6 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800c298:	4b38      	ldr	r3, [pc, #224]	; (800c37c <PrintKey+0x1b8>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	2100      	movs	r1, #0
 800c29e:	2002      	movs	r0, #2
 800c2a0:	f010 ff72 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 800c2a4:	e009      	b.n	800c2ba <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800c2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2aa:	2b82      	cmp	r3, #130	; 0x82
 800c2ac:	d105      	bne.n	800c2ba <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800c2ae:	4b34      	ldr	r3, [pc, #208]	; (800c380 <PrintKey+0x1bc>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	2002      	movs	r0, #2
 800c2b6:	f010 ff67 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2bc:	785b      	ldrb	r3, [r3, #1]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	789b      	ldrb	r3, [r3, #2]
 800c2c4:	461c      	mov	r4, r3
 800c2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c8:	78db      	ldrb	r3, [r3, #3]
 800c2ca:	461d      	mov	r5, r3
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ce:	791b      	ldrb	r3, [r3, #4]
 800c2d0:	461e      	mov	r6, r3
 800c2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d4:	795b      	ldrb	r3, [r3, #5]
 800c2d6:	623b      	str	r3, [r7, #32]
 800c2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2da:	799b      	ldrb	r3, [r3, #6]
 800c2dc:	61fb      	str	r3, [r7, #28]
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	79db      	ldrb	r3, [r3, #7]
 800c2e2:	61bb      	str	r3, [r7, #24]
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	7a1b      	ldrb	r3, [r3, #8]
 800c2e8:	617b      	str	r3, [r7, #20]
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	7a5b      	ldrb	r3, [r3, #9]
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	7a9b      	ldrb	r3, [r3, #10]
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f8:	7adb      	ldrb	r3, [r3, #11]
 800c2fa:	60bb      	str	r3, [r7, #8]
 800c2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fe:	7b1b      	ldrb	r3, [r3, #12]
 800c300:	607b      	str	r3, [r7, #4]
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	7b5b      	ldrb	r3, [r3, #13]
 800c306:	603b      	str	r3, [r7, #0]
 800c308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c30a:	7b9b      	ldrb	r3, [r3, #14]
 800c30c:	4619      	mov	r1, r3
 800c30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c310:	7bdb      	ldrb	r3, [r3, #15]
 800c312:	461a      	mov	r2, r3
 800c314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c316:	7c1b      	ldrb	r3, [r3, #16]
 800c318:	930f      	str	r3, [sp, #60]	; 0x3c
 800c31a:	920e      	str	r2, [sp, #56]	; 0x38
 800c31c:	910d      	str	r1, [sp, #52]	; 0x34
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	920c      	str	r2, [sp, #48]	; 0x30
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	920b      	str	r2, [sp, #44]	; 0x2c
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	920a      	str	r2, [sp, #40]	; 0x28
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	9209      	str	r2, [sp, #36]	; 0x24
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	9208      	str	r2, [sp, #32]
 800c332:	697a      	ldr	r2, [r7, #20]
 800c334:	9207      	str	r2, [sp, #28]
 800c336:	69ba      	ldr	r2, [r7, #24]
 800c338:	9206      	str	r2, [sp, #24]
 800c33a:	69fa      	ldr	r2, [r7, #28]
 800c33c:	9205      	str	r2, [sp, #20]
 800c33e:	6a3b      	ldr	r3, [r7, #32]
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	9603      	str	r6, [sp, #12]
 800c344:	9502      	str	r5, [sp, #8]
 800c346:	9401      	str	r4, [sp, #4]
 800c348:	9000      	str	r0, [sp, #0]
 800c34a:	4b0e      	ldr	r3, [pc, #56]	; (800c384 <PrintKey+0x1c0>)
 800c34c:	2200      	movs	r2, #0
 800c34e:	2100      	movs	r1, #0
 800c350:	2002      	movs	r0, #2
 800c352:	f010 ff19 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800c356:	bf00      	nop
 800c358:	3734      	adds	r7, #52	; 0x34
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c35e:	bf00      	nop
 800c360:	0801e580 	.word	0x0801e580
 800c364:	0801e598 	.word	0x0801e598
 800c368:	0801e5b0 	.word	0x0801e5b0
 800c36c:	0801e5c8 	.word	0x0801e5c8
 800c370:	0801e5e0 	.word	0x0801e5e0
 800c374:	0801e5f8 	.word	0x0801e5f8
 800c378:	0801e610 	.word	0x0801e610
 800c37c:	0801e628 	.word	0x0801e628
 800c380:	0801e640 	.word	0x0801e640
 800c384:	0801e658 	.word	0x0801e658

0800c388 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	4603      	mov	r3, r0
 800c390:	6039      	str	r1, [r7, #0]
 800c392:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c394:	2300      	movs	r3, #0
 800c396:	73fb      	strb	r3, [r7, #15]
 800c398:	e01a      	b.n	800c3d0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c39a:	4b12      	ldr	r3, [pc, #72]	; (800c3e4 <GetKeyByID+0x5c>)
 800c39c:	6819      	ldr	r1, [r3, #0]
 800c39e:	7bfa      	ldrb	r2, [r7, #15]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	4413      	add	r3, r2
 800c3a6:	440b      	add	r3, r1
 800c3a8:	3310      	adds	r3, #16
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	79fa      	ldrb	r2, [r7, #7]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d10b      	bne.n	800c3ca <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c3b2:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <GetKeyByID+0x5c>)
 800c3b4:	6819      	ldr	r1, [r3, #0]
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	011b      	lsls	r3, r3, #4
 800c3bc:	4413      	add	r3, r2
 800c3be:	3310      	adds	r3, #16
 800c3c0:	18ca      	adds	r2, r1, r3
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e006      	b.n	800c3d8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	73fb      	strb	r3, [r7, #15]
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	2b09      	cmp	r3, #9
 800c3d4:	d9e1      	bls.n	800c39a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c3d6:	2303      	movs	r3, #3
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bc80      	pop	{r7}
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	200005d0 	.word	0x200005d0

0800c3e8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800c3e8:	b590      	push	{r4, r7, lr}
 800c3ea:	b0d1      	sub	sp, #324	; 0x144
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800c3f2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800c3f6:	6020      	str	r0, [r4, #0]
 800c3f8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c3fc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c400:	6001      	str	r1, [r0, #0]
 800c402:	4619      	mov	r1, r3
 800c404:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c408:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800c40c:	801a      	strh	r2, [r3, #0]
 800c40e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c412:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800c416:	460a      	mov	r2, r1
 800c418:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c41a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c41e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d003      	beq.n	800c430 <ComputeCmac+0x48>
 800c428:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c430:	2302      	movs	r3, #2
 800c432:	e05c      	b.n	800c4ee <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c434:	f107 0314 	add.w	r3, r7, #20
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fe ff1b 	bl	800b274 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c43e:	f107 0210 	add.w	r2, r7, #16
 800c442:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c446:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800c44a:	781b      	ldrb	r3, [r3, #0]
 800c44c:	4611      	mov	r1, r2
 800c44e:	4618      	mov	r0, r3
 800c450:	f7ff ff9a 	bl	800c388 <GetKeyByID>
 800c454:	4603      	mov	r3, r0
 800c456:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c45a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d143      	bne.n	800c4ea <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c462:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	1c5a      	adds	r2, r3, #1
 800c46e:	f107 0314 	add.w	r3, r7, #20
 800c472:	4611      	mov	r1, r2
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe ff16 	bl	800b2a6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c47a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c47e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d009      	beq.n	800c49c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800c488:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c48c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c490:	f107 0014 	add.w	r0, r7, #20
 800c494:	2210      	movs	r2, #16
 800c496:	6819      	ldr	r1, [r3, #0]
 800c498:	f7fe ff14 	bl	800b2c4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c49c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c4a0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800c4a4:	881a      	ldrh	r2, [r3, #0]
 800c4a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c4aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c4ae:	f107 0014 	add.w	r0, r7, #20
 800c4b2:	6819      	ldr	r1, [r3, #0]
 800c4b4:	f7fe ff06 	bl	800b2c4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c4b8:	f107 0214 	add.w	r2, r7, #20
 800c4bc:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fe ffc0 	bl	800b448 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c4c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800c4cc:	061a      	lsls	r2, r3, #24
 800c4ce:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800c4d2:	041b      	lsls	r3, r3, #16
 800c4d4:	431a      	orrs	r2, r3
 800c4d6:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800c4da:	021b      	lsls	r3, r3, #8
 800c4dc:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800c4de:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c4e2:	431a      	orrs	r2, r3
 800c4e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c4e8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800c4ea:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd90      	pop	{r4, r7, pc}

0800c4f8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d101      	bne.n	800c50c <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c508:	2302      	movs	r3, #2
 800c50a:	e013      	b.n	800c534 <SecureElementInit+0x3c>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800c50c:	4a0b      	ldr	r2, [pc, #44]	; (800c53c <SecureElementInit+0x44>)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800c512:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <SecureElementInit+0x44>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	22c0      	movs	r2, #192	; 0xc0
 800c518:	4909      	ldr	r1, [pc, #36]	; (800c540 <SecureElementInit+0x48>)
 800c51a:	4618      	mov	r0, r3
 800c51c:	f00c fc1d 	bl	8018d5a <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d005      	beq.n	800c532 <SecureElementInit+0x3a>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800c526:	4b05      	ldr	r3, [pc, #20]	; (800c53c <SecureElementInit+0x44>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	461a      	mov	r2, r3
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	4610      	mov	r0, r2
 800c530:	4798      	blx	r3
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	200005d0 	.word	0x200005d0
 800c540:	0801f074 	.word	0x0801f074

0800c544 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
 800c54a:	4603      	mov	r3, r0
 800c54c:	6039      	str	r1, [r7, #0]
 800c54e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c550:	2300      	movs	r3, #0
 800c552:	73fb      	strb	r3, [r7, #15]
 800c554:	e01a      	b.n	800c58c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800c556:	4b12      	ldr	r3, [pc, #72]	; (800c5a0 <SecureElementGetKeyByID+0x5c>)
 800c558:	6819      	ldr	r1, [r3, #0]
 800c55a:	7bfa      	ldrb	r2, [r7, #15]
 800c55c:	4613      	mov	r3, r2
 800c55e:	011b      	lsls	r3, r3, #4
 800c560:	4413      	add	r3, r2
 800c562:	440b      	add	r3, r1
 800c564:	3310      	adds	r3, #16
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	79fa      	ldrb	r2, [r7, #7]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d10b      	bne.n	800c586 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800c56e:	4b0c      	ldr	r3, [pc, #48]	; (800c5a0 <SecureElementGetKeyByID+0x5c>)
 800c570:	6819      	ldr	r1, [r3, #0]
 800c572:	7bfa      	ldrb	r2, [r7, #15]
 800c574:	4613      	mov	r3, r2
 800c576:	011b      	lsls	r3, r3, #4
 800c578:	4413      	add	r3, r2
 800c57a:	3310      	adds	r3, #16
 800c57c:	18ca      	adds	r2, r1, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c582:	2300      	movs	r3, #0
 800c584:	e006      	b.n	800c594 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800c586:	7bfb      	ldrb	r3, [r7, #15]
 800c588:	3301      	adds	r3, #1
 800c58a:	73fb      	strb	r3, [r7, #15]
 800c58c:	7bfb      	ldrb	r3, [r7, #15]
 800c58e:	2b09      	cmp	r3, #9
 800c590:	d9e1      	bls.n	800c556 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c592:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800c594:	4618      	mov	r0, r3
 800c596:	3714      	adds	r7, #20
 800c598:	46bd      	mov	sp, r7
 800c59a:	bc80      	pop	{r7}
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop
 800c5a0:	200005d0 	.word	0x200005d0

0800c5a4 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a6:	b08b      	sub	sp, #44	; 0x2c
 800c5a8:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800c5aa:	4b3f      	ldr	r3, [pc, #252]	; (800c6a8 <SecureElementPrintKeys+0x104>)
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	2002      	movs	r0, #2
 800c5b2:	f010 fde9 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800c5b6:	2000      	movs	r0, #0
 800c5b8:	f7ff fe04 	bl	800c1c4 <PrintKey>
    PrintKey(NWK_KEY);
 800c5bc:	2001      	movs	r0, #1
 800c5be:	f7ff fe01 	bl	800c1c4 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800c5c2:	4b3a      	ldr	r3, [pc, #232]	; (800c6ac <SecureElementPrintKeys+0x108>)
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	2002      	movs	r0, #2
 800c5ca:	f010 fddd 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800c5ce:	2003      	movs	r0, #3
 800c5d0:	f7ff fdf8 	bl	800c1c4 <PrintKey>
    PrintKey(NWK_S_KEY);
 800c5d4:	2002      	movs	r0, #2
 800c5d6:	f7ff fdf5 	bl	800c1c4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800c5da:	4b35      	ldr	r3, [pc, #212]	; (800c6b0 <SecureElementPrintKeys+0x10c>)
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2100      	movs	r1, #0
 800c5e0:	2002      	movs	r0, #2
 800c5e2:	f010 fdd1 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c5e6:	4b33      	ldr	r3, [pc, #204]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4b31      	ldr	r3, [pc, #196]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	785b      	ldrb	r3, [r3, #1]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	4b2f      	ldr	r3, [pc, #188]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	789b      	ldrb	r3, [r3, #2]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	4b2d      	ldr	r3, [pc, #180]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	78db      	ldrb	r3, [r3, #3]
 800c604:	461c      	mov	r4, r3
 800c606:	4b2b      	ldr	r3, [pc, #172]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	791b      	ldrb	r3, [r3, #4]
 800c60c:	461d      	mov	r5, r3
 800c60e:	4b29      	ldr	r3, [pc, #164]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	795b      	ldrb	r3, [r3, #5]
 800c614:	461e      	mov	r6, r3
 800c616:	4b27      	ldr	r3, [pc, #156]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	799b      	ldrb	r3, [r3, #6]
 800c61c:	607b      	str	r3, [r7, #4]
 800c61e:	4b25      	ldr	r3, [pc, #148]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	79db      	ldrb	r3, [r3, #7]
 800c624:	9307      	str	r3, [sp, #28]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	9306      	str	r3, [sp, #24]
 800c62a:	9605      	str	r6, [sp, #20]
 800c62c:	9504      	str	r5, [sp, #16]
 800c62e:	9403      	str	r4, [sp, #12]
 800c630:	9002      	str	r0, [sp, #8]
 800c632:	9101      	str	r1, [sp, #4]
 800c634:	9200      	str	r2, [sp, #0]
 800c636:	4b20      	ldr	r3, [pc, #128]	; (800c6b8 <SecureElementPrintKeys+0x114>)
 800c638:	2200      	movs	r2, #0
 800c63a:	2100      	movs	r1, #0
 800c63c:	2002      	movs	r0, #2
 800c63e:	f010 fda3 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c642:	4b1c      	ldr	r3, [pc, #112]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	7a1b      	ldrb	r3, [r3, #8]
 800c648:	461a      	mov	r2, r3
 800c64a:	4b1a      	ldr	r3, [pc, #104]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	7a5b      	ldrb	r3, [r3, #9]
 800c650:	4619      	mov	r1, r3
 800c652:	4b18      	ldr	r3, [pc, #96]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	7a9b      	ldrb	r3, [r3, #10]
 800c658:	4618      	mov	r0, r3
 800c65a:	4b16      	ldr	r3, [pc, #88]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	7adb      	ldrb	r3, [r3, #11]
 800c660:	461c      	mov	r4, r3
 800c662:	4b14      	ldr	r3, [pc, #80]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	7b1b      	ldrb	r3, [r3, #12]
 800c668:	461d      	mov	r5, r3
 800c66a:	4b12      	ldr	r3, [pc, #72]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	7b5b      	ldrb	r3, [r3, #13]
 800c670:	461e      	mov	r6, r3
 800c672:	4b10      	ldr	r3, [pc, #64]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	7b9b      	ldrb	r3, [r3, #14]
 800c678:	607b      	str	r3, [r7, #4]
 800c67a:	4b0e      	ldr	r3, [pc, #56]	; (800c6b4 <SecureElementPrintKeys+0x110>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	7bdb      	ldrb	r3, [r3, #15]
 800c680:	9307      	str	r3, [sp, #28]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	9306      	str	r3, [sp, #24]
 800c686:	9605      	str	r6, [sp, #20]
 800c688:	9504      	str	r5, [sp, #16]
 800c68a:	9403      	str	r4, [sp, #12]
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	9101      	str	r1, [sp, #4]
 800c690:	9200      	str	r2, [sp, #0]
 800c692:	4b0a      	ldr	r3, [pc, #40]	; (800c6bc <SecureElementPrintKeys+0x118>)
 800c694:	2200      	movs	r2, #0
 800c696:	2100      	movs	r1, #0
 800c698:	2002      	movs	r0, #2
 800c69a:	f010 fd75 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800c69e:	2300      	movs	r3, #0
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a8:	0801e6ac 	.word	0x0801e6ac
 800c6ac:	0801e6c4 	.word	0x0801e6c4
 800c6b0:	0801e6dc 	.word	0x0801e6dc
 800c6b4:	200005d0 	.word	0x200005d0
 800c6b8:	0801e6f4 	.word	0x0801e6f4
 800c6bc:	0801e734 	.word	0x0801e734

0800c6c0 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800c6c4:	2004      	movs	r0, #4
 800c6c6:	f7ff fd7d 	bl	800c1c4 <PrintKey>
    PrintKey(MC_KE_KEY);
 800c6ca:	207f      	movs	r0, #127	; 0x7f
 800c6cc:	f7ff fd7a 	bl	800c1c4 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800c6d0:	2002      	movs	r0, #2
 800c6d2:	f7ff fd77 	bl	800c1c4 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800c6d6:	2003      	movs	r0, #3
 800c6d8:	f7ff fd74 	bl	800c1c4 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	bd80      	pop	{r7, pc}
	...

0800c6e4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b088      	sub	sp, #32
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	6039      	str	r1, [r7, #0]
 800c6ee:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d101      	bne.n	800c6fa <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	e04c      	b.n	800c794 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	77fb      	strb	r3, [r7, #31]
 800c6fe:	e045      	b.n	800c78c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c700:	4b26      	ldr	r3, [pc, #152]	; (800c79c <SecureElementSetKey+0xb8>)
 800c702:	6819      	ldr	r1, [r3, #0]
 800c704:	7ffa      	ldrb	r2, [r7, #31]
 800c706:	4613      	mov	r3, r2
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	4413      	add	r3, r2
 800c70c:	440b      	add	r3, r1
 800c70e:	3310      	adds	r3, #16
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	79fa      	ldrb	r2, [r7, #7]
 800c714:	429a      	cmp	r2, r3
 800c716:	d136      	bne.n	800c786 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800c718:	79fb      	ldrb	r3, [r7, #7]
 800c71a:	2b80      	cmp	r3, #128	; 0x80
 800c71c:	d123      	bne.n	800c766 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800c71e:	2306      	movs	r3, #6
 800c720:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800c722:	2300      	movs	r3, #0
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	f107 0310 	add.w	r3, r7, #16
 800c72a:	2200      	movs	r2, #0
 800c72c:	601a      	str	r2, [r3, #0]
 800c72e:	605a      	str	r2, [r3, #4]
 800c730:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800c732:	f107 030c 	add.w	r3, r7, #12
 800c736:	227f      	movs	r2, #127	; 0x7f
 800c738:	2110      	movs	r1, #16
 800c73a:	6838      	ldr	r0, [r7, #0]
 800c73c:	f000 f87d 	bl	800c83a <SecureElementAesEncrypt>
 800c740:	4603      	mov	r3, r0
 800c742:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800c744:	4b15      	ldr	r3, [pc, #84]	; (800c79c <SecureElementSetKey+0xb8>)
 800c746:	6819      	ldr	r1, [r3, #0]
 800c748:	7ffa      	ldrb	r2, [r7, #31]
 800c74a:	4613      	mov	r3, r2
 800c74c:	011b      	lsls	r3, r3, #4
 800c74e:	4413      	add	r3, r2
 800c750:	3310      	adds	r3, #16
 800c752:	440b      	add	r3, r1
 800c754:	3301      	adds	r3, #1
 800c756:	f107 010c 	add.w	r1, r7, #12
 800c75a:	2210      	movs	r2, #16
 800c75c:	4618      	mov	r0, r3
 800c75e:	f00c fafc 	bl	8018d5a <memcpy1>
                return retval;
 800c762:	7fbb      	ldrb	r3, [r7, #30]
 800c764:	e016      	b.n	800c794 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800c766:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <SecureElementSetKey+0xb8>)
 800c768:	6819      	ldr	r1, [r3, #0]
 800c76a:	7ffa      	ldrb	r2, [r7, #31]
 800c76c:	4613      	mov	r3, r2
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	4413      	add	r3, r2
 800c772:	3310      	adds	r3, #16
 800c774:	440b      	add	r3, r1
 800c776:	3301      	adds	r3, #1
 800c778:	2210      	movs	r2, #16
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f00c faec 	bl	8018d5a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800c782:	2300      	movs	r3, #0
 800c784:	e006      	b.n	800c794 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c786:	7ffb      	ldrb	r3, [r7, #31]
 800c788:	3301      	adds	r3, #1
 800c78a:	77fb      	strb	r3, [r7, #31]
 800c78c:	7ffb      	ldrb	r3, [r7, #31]
 800c78e:	2b09      	cmp	r3, #9
 800c790:	d9b6      	bls.n	800c700 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c792:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c794:	4618      	mov	r0, r3
 800c796:	3720      	adds	r7, #32
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200005d0 	.word	0x200005d0

0800c7a0 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	80fb      	strh	r3, [r7, #6]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800c7b6:	797b      	ldrb	r3, [r7, #5]
 800c7b8:	2b7e      	cmp	r3, #126	; 0x7e
 800c7ba:	d901      	bls.n	800c7c0 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e009      	b.n	800c7d4 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800c7c0:	7979      	ldrb	r1, [r7, #5]
 800c7c2:	88fa      	ldrh	r2, [r7, #6]
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7ff fe0b 	bl	800c3e8 <ComputeCmac>
 800c7d2:	4603      	mov	r3, r0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af02      	add	r7, sp, #8
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	607a      	str	r2, [r7, #4]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	817b      	strh	r3, [r7, #10]
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d101      	bne.n	800c7fa <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	e01b      	b.n	800c832 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800c7fa:	2306      	movs	r3, #6
 800c7fc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800c802:	7a79      	ldrb	r1, [r7, #9]
 800c804:	897a      	ldrh	r2, [r7, #10]
 800c806:	f107 0310 	add.w	r3, r7, #16
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	460b      	mov	r3, r1
 800c80e:	68f9      	ldr	r1, [r7, #12]
 800c810:	2000      	movs	r0, #0
 800c812:	f7ff fde9 	bl	800c3e8 <ComputeCmac>
 800c816:	4603      	mov	r3, r0
 800c818:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c81a:	7dfb      	ldrb	r3, [r7, #23]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	e006      	b.n	800c832 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d001      	beq.n	800c830 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800c82c:	2301      	movs	r3, #1
 800c82e:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800c830:	7dfb      	ldrb	r3, [r7, #23]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3718      	adds	r7, #24
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b0c2      	sub	sp, #264	; 0x108
 800c83e:	af00      	add	r7, sp, #0
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	4608      	mov	r0, r1
 800c844:	4611      	mov	r1, r2
 800c846:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c84a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	4603      	mov	r3, r0
 800c852:	817b      	strh	r3, [r7, #10]
 800c854:	460b      	mov	r3, r1
 800c856:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d006      	beq.n	800c86c <SecureElementAesEncrypt+0x32>
 800c85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d101      	bne.n	800c870 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c86c:	2302      	movs	r3, #2
 800c86e:	e046      	b.n	800c8fe <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800c870:	897b      	ldrh	r3, [r7, #10]
 800c872:	f003 030f 	and.w	r3, r3, #15
 800c876:	b29b      	uxth	r3, r3
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c87c:	2305      	movs	r3, #5
 800c87e:	e03e      	b.n	800c8fe <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800c880:	f107 0314 	add.w	r3, r7, #20
 800c884:	22f0      	movs	r2, #240	; 0xf0
 800c886:	2100      	movs	r1, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	f00c faa1 	bl	8018dd0 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800c88e:	f107 0210 	add.w	r2, r7, #16
 800c892:	7a7b      	ldrb	r3, [r7, #9]
 800c894:	4611      	mov	r1, r2
 800c896:	4618      	mov	r0, r3
 800c898:	f7ff fd76 	bl	800c388 <GetKeyByID>
 800c89c:	4603      	mov	r3, r0
 800c89e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c8a2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d127      	bne.n	800c8fa <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	f107 0214 	add.w	r2, r7, #20
 800c8b2:	2110      	movs	r1, #16
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7ff fb5d 	bl	800bf74 <lorawan_aes_set_key>

        uint8_t block = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800c8c0:	e018      	b.n	800c8f4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800c8c2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	18d0      	adds	r0, r2, r3
 800c8ca:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c8ce:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800c8d2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800c8d6:	6812      	ldr	r2, [r2, #0]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f107 0214 	add.w	r2, r7, #20
 800c8de:	4619      	mov	r1, r3
 800c8e0:	f7ff fc26 	bl	800c130 <lorawan_aes_encrypt>
            block = block + 16;
 800c8e4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800c8e8:	3310      	adds	r3, #16
 800c8ea:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800c8ee:	897b      	ldrh	r3, [r7, #10]
 800c8f0:	3b10      	subs	r3, #16
 800c8f2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800c8f4:	897b      	ldrh	r3, [r7, #10]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1e3      	bne.n	800c8c2 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800c8fa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b088      	sub	sp, #32
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	460b      	mov	r3, r1
 800c912:	70fb      	strb	r3, [r7, #3]
 800c914:	4613      	mov	r3, r2
 800c916:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c91e:	2302      	movs	r3, #2
 800c920:	e02e      	b.n	800c980 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800c922:	2306      	movs	r3, #6
 800c924:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800c926:	78bb      	ldrb	r3, [r7, #2]
 800c928:	2b7f      	cmp	r3, #127	; 0x7f
 800c92a:	d104      	bne.n	800c936 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800c92c:	78fb      	ldrb	r3, [r7, #3]
 800c92e:	2b04      	cmp	r3, #4
 800c930:	d001      	beq.n	800c936 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c932:	2303      	movs	r3, #3
 800c934:	e024      	b.n	800c980 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800c936:	2300      	movs	r3, #0
 800c938:	60fb      	str	r3, [r7, #12]
 800c93a:	f107 0310 	add.w	r3, r7, #16
 800c93e:	2200      	movs	r2, #0
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	605a      	str	r2, [r3, #4]
 800c944:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800c946:	f107 030c 	add.w	r3, r7, #12
 800c94a:	78fa      	ldrb	r2, [r7, #3]
 800c94c:	2110      	movs	r1, #16
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff ff73 	bl	800c83a <SecureElementAesEncrypt>
 800c954:	4603      	mov	r3, r0
 800c956:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c958:	7ffb      	ldrb	r3, [r7, #31]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d001      	beq.n	800c962 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800c95e:	7ffb      	ldrb	r3, [r7, #31]
 800c960:	e00e      	b.n	800c980 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800c962:	f107 020c 	add.w	r2, r7, #12
 800c966:	78bb      	ldrb	r3, [r7, #2]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff feba 	bl	800c6e4 <SecureElementSetKey>
 800c970:	4603      	mov	r3, r0
 800c972:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800c974:	7ffb      	ldrb	r3, [r7, #31]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800c97a:	7ffb      	ldrb	r3, [r7, #31]
 800c97c:	e000      	b.n	800c980 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800c97e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800c980:	4618      	mov	r0, r3
 800c982:	3720      	adds	r7, #32
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60b9      	str	r1, [r7, #8]
 800c990:	607b      	str	r3, [r7, #4]
 800c992:	4603      	mov	r3, r0
 800c994:	73fb      	strb	r3, [r7, #15]
 800c996:	4613      	mov	r3, r2
 800c998:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d005      	beq.n	800c9ac <SecureElementProcessJoinAccept+0x24>
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <SecureElementProcessJoinAccept+0x24>
 800c9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d101      	bne.n	800c9b0 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	e064      	b.n	800ca7a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800c9b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9b4:	2b21      	cmp	r3, #33	; 0x21
 800c9b6:	d901      	bls.n	800c9bc <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800c9b8:	2305      	movs	r3, #5
 800c9ba:	e05e      	b.n	800ca7a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800c9c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9c4:	b29b      	uxth	r3, r3
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	6879      	ldr	r1, [r7, #4]
 800c9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9cc:	f00c f9c5 	bl	8018d5a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	1c58      	adds	r0, r3, #1
 800c9d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	b299      	uxth	r1, r3
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	7dfa      	ldrb	r2, [r7, #23]
 800c9e4:	f7ff ff29 	bl	800c83a <SecureElementAesEncrypt>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800c9ee:	2307      	movs	r3, #7
 800c9f0:	e043      	b.n	800ca7a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	330b      	adds	r3, #11
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	09db      	lsrs	r3, r3, #7
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800ca00:	2300      	movs	r3, #0
 800ca02:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800ca04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca08:	3b04      	subs	r3, #4
 800ca0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca0c:	4413      	add	r3, r2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800ca12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca16:	3b03      	subs	r3, #3
 800ca18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca1a:	4413      	add	r3, r2
 800ca1c:	781b      	ldrb	r3, [r3, #0]
 800ca1e:	021b      	lsls	r3, r3, #8
 800ca20:	693a      	ldr	r2, [r7, #16]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800ca26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca2a:	3b02      	subs	r3, #2
 800ca2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2e:	4413      	add	r3, r2
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	041b      	lsls	r3, r3, #16
 800ca34:	693a      	ldr	r2, [r7, #16]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800ca3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca3e:	3b01      	subs	r3, #1
 800ca40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca42:	4413      	add	r3, r2
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	061b      	lsls	r3, r3, #24
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800ca4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d10e      	bne.n	800ca74 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800ca56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	3b04      	subs	r3, #4
 800ca5e:	b299      	uxth	r1, r3
 800ca60:	2301      	movs	r3, #1
 800ca62:	693a      	ldr	r2, [r7, #16]
 800ca64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca66:	f7ff feb9 	bl	800c7dc <SecureElementVerifyAesCmac>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d003      	beq.n	800ca78 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e002      	b.n	800ca7a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800ca74:	2304      	movs	r3, #4
 800ca76:	e000      	b.n	800ca7a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
	...

0800ca84 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ca92:	2302      	movs	r3, #2
 800ca94:	e007      	b.n	800caa6 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800ca96:	4b06      	ldr	r3, [pc, #24]	; (800cab0 <SecureElementSetDevEui+0x2c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2208      	movs	r2, #8
 800ca9c:	6879      	ldr	r1, [r7, #4]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f00c f95b 	bl	8018d5a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	200005d0 	.word	0x200005d0

0800cab4 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800cab4:	b480      	push	{r7}
 800cab6:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800cab8:	4b02      	ldr	r3, [pc, #8]	; (800cac4 <SecureElementGetDevEui+0x10>)
 800caba:	681b      	ldr	r3, [r3, #0]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bc80      	pop	{r7}
 800cac2:	4770      	bx	lr
 800cac4:	200005d0 	.word	0x200005d0

0800cac8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b082      	sub	sp, #8
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d101      	bne.n	800cada <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cad6:	2302      	movs	r3, #2
 800cad8:	e008      	b.n	800caec <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800cada:	4b06      	ldr	r3, [pc, #24]	; (800caf4 <SecureElementSetJoinEui+0x2c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	3308      	adds	r3, #8
 800cae0:	2208      	movs	r2, #8
 800cae2:	6879      	ldr	r1, [r7, #4]
 800cae4:	4618      	mov	r0, r3
 800cae6:	f00c f938 	bl	8018d5a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	3708      	adds	r7, #8
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	200005d0 	.word	0x200005d0

0800caf8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800cafc:	4b03      	ldr	r3, [pc, #12]	; (800cb0c <SecureElementGetJoinEui+0x14>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3308      	adds	r3, #8
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bc80      	pop	{r7}
 800cb08:	4770      	bx	lr
 800cb0a:	bf00      	nop
 800cb0c:	200005d0 	.word	0x200005d0

0800cb10 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800cb1a:	4a23      	ldr	r2, [pc, #140]	; (800cba8 <LmHandlerInit+0x98>)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800cb20:	4b22      	ldr	r3, [pc, #136]	; (800cbac <LmHandlerInit+0x9c>)
 800cb22:	4a23      	ldr	r2, [pc, #140]	; (800cbb0 <LmHandlerInit+0xa0>)
 800cb24:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800cb26:	4b21      	ldr	r3, [pc, #132]	; (800cbac <LmHandlerInit+0x9c>)
 800cb28:	4a22      	ldr	r2, [pc, #136]	; (800cbb4 <LmHandlerInit+0xa4>)
 800cb2a:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800cb2c:	4b1f      	ldr	r3, [pc, #124]	; (800cbac <LmHandlerInit+0x9c>)
 800cb2e:	4a22      	ldr	r2, [pc, #136]	; (800cbb8 <LmHandlerInit+0xa8>)
 800cb30:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800cb32:	4b1e      	ldr	r3, [pc, #120]	; (800cbac <LmHandlerInit+0x9c>)
 800cb34:	4a21      	ldr	r2, [pc, #132]	; (800cbbc <LmHandlerInit+0xac>)
 800cb36:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800cb38:	4b1b      	ldr	r3, [pc, #108]	; (800cba8 <LmHandlerInit+0x98>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a20      	ldr	r2, [pc, #128]	; (800cbc0 <LmHandlerInit+0xb0>)
 800cb40:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800cb42:	4b19      	ldr	r3, [pc, #100]	; (800cba8 <LmHandlerInit+0x98>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	4a1d      	ldr	r2, [pc, #116]	; (800cbc0 <LmHandlerInit+0xb0>)
 800cb4a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800cb4c:	4b16      	ldr	r3, [pc, #88]	; (800cba8 <LmHandlerInit+0x98>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <LmHandlerInit+0xb0>)
 800cb54:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800cb56:	4b1a      	ldr	r3, [pc, #104]	; (800cbc0 <LmHandlerInit+0xb0>)
 800cb58:	4a1a      	ldr	r2, [pc, #104]	; (800cbc4 <LmHandlerInit+0xb4>)
 800cb5a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800cb5c:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <LmHandlerInit+0x98>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	4a17      	ldr	r2, [pc, #92]	; (800cbc0 <LmHandlerInit+0xb0>)
 800cb64:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800cb66:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <LmHandlerInit+0xb8>)
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800cb6c:	4b0e      	ldr	r3, [pc, #56]	; (800cba8 <LmHandlerInit+0x98>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb72:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <LmHandlerInit+0xb8>)
 800cb74:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800cb76:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <LmHandlerInit+0x98>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb7c:	4a12      	ldr	r2, [pc, #72]	; (800cbc8 <LmHandlerInit+0xb8>)
 800cb7e:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800cb80:	4b09      	ldr	r3, [pc, #36]	; (800cba8 <LmHandlerInit+0x98>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb86:	4a10      	ldr	r2, [pc, #64]	; (800cbc8 <LmHandlerInit+0xb8>)
 800cb88:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800cb8a:	490f      	ldr	r1, [pc, #60]	; (800cbc8 <LmHandlerInit+0xb8>)
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	f000 fd87 	bl	800d6a0 <LmHandlerPackageRegister>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800cb98:	f04f 33ff 	mov.w	r3, #4294967295
 800cb9c:	e000      	b.n	800cba0 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}
 800cba8:	2000060c 	.word	0x2000060c
 800cbac:	20000610 	.word	0x20000610
 800cbb0:	0800d3ad 	.word	0x0800d3ad
 800cbb4:	0800d415 	.word	0x0800d415
 800cbb8:	0800d4e1 	.word	0x0800d4e1
 800cbbc:	0800d5f9 	.word	0x0800d5f9
 800cbc0:	20000620 	.word	0x20000620
 800cbc4:	0800da75 	.word	0x0800da75
 800cbc8:	200005d4 	.word	0x200005d4

0800cbcc <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b094      	sub	sp, #80	; 0x50
 800cbd0:	af04      	add	r7, sp, #16
 800cbd2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800cbd4:	2214      	movs	r2, #20
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	4890      	ldr	r0, [pc, #576]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cbda:	f00f fb8d 	bl	801c2f8 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800cbde:	4b90      	ldr	r3, [pc, #576]	; (800ce20 <LmHandlerConfigure+0x254>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800cbe4:	f7fe fb04 	bl	800b1f0 <LoraInfo_GetPtr>
 800cbe8:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800cbea:	4b8c      	ldr	r3, [pc, #560]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	4093      	lsls	r3, r2
 800cbf4:	461a      	mov	r2, r3
 800cbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d106      	bne.n	800cc0e <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800cc00:	4b88      	ldr	r3, [pc, #544]	; (800ce24 <LmHandlerConfigure+0x258>)
 800cc02:	2201      	movs	r2, #1
 800cc04:	2100      	movs	r1, #0
 800cc06:	2000      	movs	r0, #0
 800cc08:	f010 fabe 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800cc0c:	e7fe      	b.n	800cc0c <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800cc0e:	4b83      	ldr	r3, [pc, #524]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	4984      	ldr	r1, [pc, #528]	; (800ce28 <LmHandlerConfigure+0x25c>)
 800cc16:	4885      	ldr	r0, [pc, #532]	; (800ce2c <LmHandlerConfigure+0x260>)
 800cc18:	f004 fe8c 	bl	8011934 <LoRaMacInitialization>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800cc22:	f04f 33ff 	mov.w	r3, #4294967295
 800cc26:	e0f5      	b.n	800ce14 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800cc28:	2327      	movs	r3, #39	; 0x27
 800cc2a:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cc2c:	f107 0318 	add.w	r3, r7, #24
 800cc30:	4618      	mov	r0, r3
 800cc32:	f005 fbcf 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d103      	bne.n	800cc44 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800cc3c:	4b7c      	ldr	r3, [pc, #496]	; (800ce30 <LmHandlerConfigure+0x264>)
 800cc3e:	2201      	movs	r2, #1
 800cc40:	701a      	strb	r2, [r3, #0]
 800cc42:	e02a      	b.n	800cc9a <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800cc44:	2328      	movs	r3, #40	; 0x28
 800cc46:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800cc48:	4b7a      	ldr	r3, [pc, #488]	; (800ce34 <LmHandlerConfigure+0x268>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	691b      	ldr	r3, [r3, #16]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00c      	beq.n	800cc6c <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cc52:	f107 0318 	add.w	r3, r7, #24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f005 fa16 	bl	8012088 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800cc5c:	4b75      	ldr	r3, [pc, #468]	; (800ce34 <LmHandlerConfigure+0x268>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	69fa      	ldr	r2, [r7, #28]
 800cc64:	f240 518c 	movw	r1, #1420	; 0x58c
 800cc68:	4610      	mov	r0, r2
 800cc6a:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800cc6c:	2327      	movs	r3, #39	; 0x27
 800cc6e:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800cc70:	f107 0318 	add.w	r3, r7, #24
 800cc74:	4618      	mov	r0, r3
 800cc76:	f005 fbad 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10c      	bne.n	800cc9a <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cc80:	2301      	movs	r3, #1
 800cc82:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800cc84:	f107 0318 	add.w	r3, r7, #24
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f005 f9fd 	bl	8012088 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800cc8e:	7f3b      	ldrb	r3, [r7, #28]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d002      	beq.n	800cc9a <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800cc94:	4b66      	ldr	r3, [pc, #408]	; (800ce30 <LmHandlerConfigure+0x264>)
 800cc96:	2201      	movs	r2, #1
 800cc98:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800cc9a:	4b65      	ldr	r3, [pc, #404]	; (800ce30 <LmHandlerConfigure+0x264>)
 800cc9c:	781b      	ldrb	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d02a      	beq.n	800ccf8 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800cca2:	4b64      	ldr	r3, [pc, #400]	; (800ce34 <LmHandlerConfigure+0x268>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	69db      	ldr	r3, [r3, #28]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d004      	beq.n	800ccb6 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800ccac:	4b61      	ldr	r3, [pc, #388]	; (800ce34 <LmHandlerConfigure+0x268>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	69db      	ldr	r3, [r3, #28]
 800ccb2:	2000      	movs	r0, #0
 800ccb4:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800ccb6:	2306      	movs	r3, #6
 800ccb8:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ccba:	f107 0318 	add.w	r3, r7, #24
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f005 f9e2 	bl	8012088 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ccc4:	69fb      	ldr	r3, [r7, #28]
 800ccc6:	4a5c      	ldr	r2, [pc, #368]	; (800ce38 <LmHandlerConfigure+0x26c>)
 800ccc8:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800ccca:	2327      	movs	r3, #39	; 0x27
 800cccc:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800ccce:	f107 0318 	add.w	r3, r7, #24
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f005 f9d8 	bl	8012088 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ccde:	4b4f      	ldr	r3, [pc, #316]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cce0:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800cce2:	69fb      	ldr	r3, [r7, #28]
 800cce4:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800cce8:	4b4c      	ldr	r3, [pc, #304]	; (800ce1c <LmHandlerConfigure+0x250>)
 800ccea:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800ccf2:	4b4a      	ldr	r3, [pc, #296]	; (800ce1c <LmHandlerConfigure+0x250>)
 800ccf4:	709a      	strb	r2, [r3, #2]
 800ccf6:	e019      	b.n	800cd2c <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800ccf8:	2305      	movs	r3, #5
 800ccfa:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800cd00:	f107 0318 	add.w	r3, r7, #24
 800cd04:	4618      	mov	r0, r3
 800cd06:	f005 fb65 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800cd0a:	4b4a      	ldr	r3, [pc, #296]	; (800ce34 <LmHandlerConfigure+0x268>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	4798      	blx	r3
 800cd12:	4603      	mov	r3, r0
 800cd14:	4a48      	ldr	r2, [pc, #288]	; (800ce38 <LmHandlerConfigure+0x26c>)
 800cd16:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800cd18:	2306      	movs	r3, #6
 800cd1a:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800cd1c:	4b46      	ldr	r3, [pc, #280]	; (800ce38 <LmHandlerConfigure+0x26c>)
 800cd1e:	695b      	ldr	r3, [r3, #20]
 800cd20:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800cd22:	f107 0318 	add.w	r3, r7, #24
 800cd26:	4618      	mov	r0, r3
 800cd28:	f005 fb54 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cd30:	f107 0318 	add.w	r3, r7, #24
 800cd34:	4618      	mov	r0, r3
 800cd36:	f005 f9a7 	bl	8012088 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	2208      	movs	r2, #8
 800cd3e:	4619      	mov	r1, r3
 800cd40:	483d      	ldr	r0, [pc, #244]	; (800ce38 <LmHandlerConfigure+0x26c>)
 800cd42:	f00c f80a 	bl	8018d5a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800cd46:	2303      	movs	r3, #3
 800cd48:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800cd4a:	f107 0318 	add.w	r3, r7, #24
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f005 f99a 	bl	8012088 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	2208      	movs	r2, #8
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4838      	ldr	r0, [pc, #224]	; (800ce3c <LmHandlerConfigure+0x270>)
 800cd5c:	f00b fffd 	bl	8018d5a <memcpy1>

    SecureElementPrintKeys();
 800cd60:	f7ff fc20 	bl	800c5a4 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800cd64:	4b36      	ldr	r3, [pc, #216]	; (800ce40 <LmHandlerConfigure+0x274>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	4b36      	ldr	r3, [pc, #216]	; (800ce44 <LmHandlerConfigure+0x278>)
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	4b35      	ldr	r3, [pc, #212]	; (800ce48 <LmHandlerConfigure+0x27c>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	4618      	mov	r0, r3
 800cd76:	4b35      	ldr	r3, [pc, #212]	; (800ce4c <LmHandlerConfigure+0x280>)
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	9303      	str	r3, [sp, #12]
 800cd7c:	9002      	str	r0, [sp, #8]
 800cd7e:	9101      	str	r1, [sp, #4]
 800cd80:	9200      	str	r2, [sp, #0]
 800cd82:	4b33      	ldr	r3, [pc, #204]	; (800ce50 <LmHandlerConfigure+0x284>)
 800cd84:	2200      	movs	r2, #0
 800cd86:	2100      	movs	r1, #0
 800cd88:	2002      	movs	r0, #2
 800cd8a:	f010 f9fd 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800cd8e:	230f      	movs	r3, #15
 800cd90:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800cd92:	2301      	movs	r3, #1
 800cd94:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800cd96:	f107 0318 	add.w	r3, r7, #24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f005 fb1a 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800cda0:	2310      	movs	r3, #16
 800cda2:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800cda4:	2300      	movs	r3, #0
 800cda6:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cda8:	f107 0318 	add.w	r3, r7, #24
 800cdac:	4618      	mov	r0, r3
 800cdae:	f005 fb11 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800cdb2:	2304      	movs	r3, #4
 800cdb4:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800cdb6:	4b19      	ldr	r3, [pc, #100]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cdbc:	f107 0318 	add.w	r3, r7, #24
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f005 fb07 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800cdc6:	2338      	movs	r3, #56	; 0x38
 800cdc8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800cdca:	4b14      	ldr	r3, [pc, #80]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800cdd0:	f107 0318 	add.w	r3, r7, #24
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f005 fafd 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800cdda:	230f      	movs	r3, #15
 800cddc:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800cdde:	4b0f      	ldr	r3, [pc, #60]	; (800ce1c <LmHandlerConfigure+0x250>)
 800cde0:	781b      	ldrb	r3, [r3, #0]
 800cde2:	f107 0210 	add.w	r2, r7, #16
 800cde6:	4611      	mov	r1, r2
 800cde8:	4618      	mov	r0, r3
 800cdea:	f008 f9b8 	bl	801515e <RegionGetPhyParam>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	bf14      	ite	ne
 800cdf8:	2301      	movne	r3, #1
 800cdfa:	2300      	moveq	r3, #0
 800cdfc:	b2da      	uxtb	r2, r3
 800cdfe:	4b07      	ldr	r3, [pc, #28]	; (800ce1c <LmHandlerConfigure+0x250>)
 800ce00:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800ce02:	2014      	movs	r0, #20
 800ce04:	f000 faba 	bl	800d37c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800ce08:	4b04      	ldr	r3, [pc, #16]	; (800ce1c <LmHandlerConfigure+0x250>)
 800ce0a:	799b      	ldrb	r3, [r3, #6]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f006 f90f 	bl	8013030 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3740      	adds	r7, #64	; 0x40
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	200005f8 	.word	0x200005f8
 800ce20:	20000638 	.word	0x20000638
 800ce24:	0801e774 	.word	0x0801e774
 800ce28:	20000620 	.word	0x20000620
 800ce2c:	20000610 	.word	0x20000610
 800ce30:	2000072e 	.word	0x2000072e
 800ce34:	2000060c 	.word	0x2000060c
 800ce38:	20000090 	.word	0x20000090
 800ce3c:	20000098 	.word	0x20000098
 800ce40:	200000a7 	.word	0x200000a7
 800ce44:	200000a6 	.word	0x200000a6
 800ce48:	200000a5 	.word	0x200000a5
 800ce4c:	200000a4 	.word	0x200000a4
 800ce50:	0801e7c0 	.word	0x0801e7c0

0800ce54 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800ce5a:	f002 fd49 	bl	800f8f0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800ce5e:	f000 fd3f 	bl	800d8e0 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800ce62:	f000 fd13 	bl	800d88c <LmHandlerPackageIsTxPending>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d117      	bne.n	800ce9c <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800ce6c:	4b0d      	ldr	r3, [pc, #52]	; (800cea4 <LmHandlerProcess+0x50>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d014      	beq.n	800ce9e <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800ce74:	2300      	movs	r3, #0
 800ce76:	703b      	strb	r3, [r7, #0]
 800ce78:	2300      	movs	r3, #0
 800ce7a:	707b      	strb	r3, [r7, #1]
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800ce80:	4b09      	ldr	r3, [pc, #36]	; (800cea8 <LmHandlerProcess+0x54>)
 800ce82:	78d9      	ldrb	r1, [r3, #3]
 800ce84:	463b      	mov	r3, r7
 800ce86:	2200      	movs	r2, #0
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 f8b7 	bl	800cffc <LmHandlerSend>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d104      	bne.n	800ce9e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800ce94:	4b03      	ldr	r3, [pc, #12]	; (800cea4 <LmHandlerProcess+0x50>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	701a      	strb	r2, [r3, #0]
 800ce9a:	e000      	b.n	800ce9e <LmHandlerProcess+0x4a>
        return;
 800ce9c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800ce9e:	3708      	adds	r7, #8
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20000638 	.word	0x20000638
 800cea8:	200005f8 	.word	0x200005f8

0800ceac <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800ceb0:	4b02      	ldr	r3, [pc, #8]	; (800cebc <LmHandlerGetDutyCycleWaitTime+0x10>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bc80      	pop	{r7}
 800ceba:	4770      	bx	lr
 800cebc:	20000634 	.word	0x20000634

0800cec0 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b090      	sub	sp, #64	; 0x40
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	460a      	mov	r2, r1
 800ceca:	71fb      	strb	r3, [r7, #7]
 800cecc:	4613      	mov	r3, r2
 800cece:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800ced0:	2301      	movs	r3, #1
 800ced2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800ced6:	4b36      	ldr	r3, [pc, #216]	; (800cfb0 <LmHandlerJoin+0xf0>)
 800ced8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800cee2:	79fb      	ldrb	r3, [r7, #7]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d10b      	bne.n	800cf00 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cee8:	2302      	movs	r3, #2
 800ceea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800ceee:	4b31      	ldr	r3, [pc, #196]	; (800cfb4 <LmHandlerJoin+0xf4>)
 800cef0:	2202      	movs	r2, #2
 800cef2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cef4:	4a2f      	ldr	r2, [pc, #188]	; (800cfb4 <LmHandlerJoin+0xf4>)
 800cef6:	79bb      	ldrb	r3, [r7, #6]
 800cef8:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800cefa:	f004 ffd3 	bl	8011ea4 <LoRaMacStart>
 800cefe:	e041      	b.n	800cf84 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cf00:	2301      	movs	r3, #1
 800cf02:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cf06:	4b2b      	ldr	r3, [pc, #172]	; (800cfb4 <LmHandlerJoin+0xf4>)
 800cf08:	2201      	movs	r2, #1
 800cf0a:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cf0c:	4b28      	ldr	r3, [pc, #160]	; (800cfb0 <LmHandlerJoin+0xf0>)
 800cf0e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cf12:	4b28      	ldr	r3, [pc, #160]	; (800cfb4 <LmHandlerJoin+0xf4>)
 800cf14:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cf16:	4b27      	ldr	r3, [pc, #156]	; (800cfb4 <LmHandlerJoin+0xf4>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800cf1c:	4a25      	ldr	r2, [pc, #148]	; (800cfb4 <LmHandlerJoin+0xf4>)
 800cf1e:	79bb      	ldrb	r3, [r7, #6]
 800cf20:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800cf22:	4b25      	ldr	r3, [pc, #148]	; (800cfb8 <LmHandlerJoin+0xf8>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	f083 0301 	eor.w	r3, r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d01e      	beq.n	800cf6e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800cf30:	231f      	movs	r3, #31
 800cf32:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800cf34:	4b1e      	ldr	r3, [pc, #120]	; (800cfb0 <LmHandlerJoin+0xf0>)
 800cf36:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cf3a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	4618      	mov	r0, r3
 800cf42:	f005 fa47 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cf46:	2320      	movs	r3, #32
 800cf48:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800cf4a:	4b19      	ldr	r3, [pc, #100]	; (800cfb0 <LmHandlerJoin+0xf0>)
 800cf4c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cf50:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cf52:	f107 0308 	add.w	r3, r7, #8
 800cf56:	4618      	mov	r0, r3
 800cf58:	f005 fa3c 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cf5c:	2329      	movs	r3, #41	; 0x29
 800cf5e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cf60:	4b16      	ldr	r3, [pc, #88]	; (800cfbc <LmHandlerJoin+0xfc>)
 800cf62:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800cf64:	f107 0308 	add.w	r3, r7, #8
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f005 fa33 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800cf6e:	f004 ff99 	bl	8011ea4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cf72:	2301      	movs	r3, #1
 800cf74:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cf76:	2301      	movs	r3, #1
 800cf78:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cf7a:	f107 0308 	add.w	r3, r7, #8
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f005 fa28 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800cf84:	4b0c      	ldr	r3, [pc, #48]	; (800cfb8 <LmHandlerJoin+0xf8>)
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	f083 0301 	eor.w	r3, r3, #1
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d102      	bne.n	800cf98 <LmHandlerJoin+0xd8>
 800cf92:	79bb      	ldrb	r3, [r7, #6]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800cf98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f005 fd89 	bl	8012ab4 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa4:	4a06      	ldr	r2, [pc, #24]	; (800cfc0 <LmHandlerJoin+0x100>)
 800cfa6:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800cfa8:	bf00      	nop
 800cfaa:	3740      	adds	r7, #64	; 0x40
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	200005f8 	.word	0x200005f8
 800cfb4:	200000a8 	.word	0x200000a8
 800cfb8:	2000072e 	.word	0x2000072e
 800cfbc:	01000400 	.word	0x01000400
 800cfc0:	20000634 	.word	0x20000634

0800cfc4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b08a      	sub	sp, #40	; 0x28
 800cfc8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cfca:	2301      	movs	r3, #1
 800cfcc:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800cfce:	463b      	mov	r3, r7
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f005 f859 	bl	8012088 <LoRaMacMibGetRequestConfirm>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800cfdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d106      	bne.n	800cff2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cfe4:	793b      	ldrb	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e002      	b.n	800cff4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e000      	b.n	800cff4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800cff2:	2300      	movs	r3, #0
    }
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3728      	adds	r7, #40	; 0x28
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b08a      	sub	sp, #40	; 0x28
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	460b      	mov	r3, r1
 800d006:	70fb      	strb	r3, [r7, #3]
 800d008:	4613      	mov	r3, r2
 800d00a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d00c:	23ff      	movs	r3, #255	; 0xff
 800d00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d012:	f002 f9cd 	bl	800f3b0 <LoRaMacIsBusy>
 800d016:	4603      	mov	r3, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d01c:	f06f 0301 	mvn.w	r3, #1
 800d020:	e0a3      	b.n	800d16a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d022:	f7ff ffcf 	bl	800cfc4 <LmHandlerJoinStatus>
 800d026:	4603      	mov	r3, r0
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d00a      	beq.n	800d042 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d02c:	4b51      	ldr	r3, [pc, #324]	; (800d174 <LmHandlerSend+0x178>)
 800d02e:	799b      	ldrb	r3, [r3, #6]
 800d030:	4a50      	ldr	r2, [pc, #320]	; (800d174 <LmHandlerSend+0x178>)
 800d032:	79d2      	ldrb	r2, [r2, #7]
 800d034:	4611      	mov	r1, r2
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff ff42 	bl	800cec0 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d03c:	f06f 0302 	mvn.w	r3, #2
 800d040:	e093      	b.n	800d16a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d042:	4a4d      	ldr	r2, [pc, #308]	; (800d178 <LmHandlerSend+0x17c>)
 800d044:	78fb      	ldrb	r3, [r7, #3]
 800d046:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d048:	78fb      	ldrb	r3, [r7, #3]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bf14      	ite	ne
 800d04e:	2301      	movne	r3, #1
 800d050:	2300      	moveq	r3, #0
 800d052:	b2db      	uxtb	r3, r3
 800d054:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d056:	4b49      	ldr	r3, [pc, #292]	; (800d17c <LmHandlerSend+0x180>)
 800d058:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d05c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	785b      	ldrb	r3, [r3, #1]
 800d062:	f107 020c 	add.w	r2, r7, #12
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f004 ff7d 	bl	8011f68 <LoRaMacQueryTxPossible>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d009      	beq.n	800d088 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d074:	2300      	movs	r3, #0
 800d076:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d078:	2300      	movs	r3, #0
 800d07a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d080:	23f9      	movs	r3, #249	; 0xf9
 800d082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d086:	e009      	b.n	800d09c <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	785b      	ldrb	r3, [r3, #1]
 800d092:	b29b      	uxth	r3, r3
 800d094:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d09c:	4b36      	ldr	r3, [pc, #216]	; (800d178 <LmHandlerSend+0x17c>)
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	3310      	adds	r3, #16
 800d0a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d0a6:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d0aa:	4b34      	ldr	r3, [pc, #208]	; (800d17c <LmHandlerSend+0x180>)
 800d0ac:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d0b0:	4b31      	ldr	r3, [pc, #196]	; (800d178 <LmHandlerSend+0x17c>)
 800d0b2:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d0b4:	78ba      	ldrb	r2, [r7, #2]
 800d0b6:	f107 0310 	add.w	r3, r7, #16
 800d0ba:	4611      	mov	r1, r2
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f005 fe7f 	bl	8012dc0 <LoRaMacMcpsRequest>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d0c8:	6a3b      	ldr	r3, [r7, #32]
 800d0ca:	4a2d      	ldr	r2, [pc, #180]	; (800d180 <LmHandlerSend+0x184>)
 800d0cc:	6013      	str	r3, [r2, #0]

    switch (status)
 800d0ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0d2:	2b11      	cmp	r3, #17
 800d0d4:	d842      	bhi.n	800d15c <LmHandlerSend+0x160>
 800d0d6:	a201      	add	r2, pc, #4	; (adr r2, 800d0dc <LmHandlerSend+0xe0>)
 800d0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0dc:	0800d125 	.word	0x0800d125
 800d0e0:	0800d13d 	.word	0x0800d13d
 800d0e4:	0800d15d 	.word	0x0800d15d
 800d0e8:	0800d15d 	.word	0x0800d15d
 800d0ec:	0800d15d 	.word	0x0800d15d
 800d0f0:	0800d15d 	.word	0x0800d15d
 800d0f4:	0800d15d 	.word	0x0800d15d
 800d0f8:	0800d145 	.word	0x0800d145
 800d0fc:	0800d15d 	.word	0x0800d15d
 800d100:	0800d15d 	.word	0x0800d15d
 800d104:	0800d15d 	.word	0x0800d15d
 800d108:	0800d155 	.word	0x0800d155
 800d10c:	0800d15d 	.word	0x0800d15d
 800d110:	0800d15d 	.word	0x0800d15d
 800d114:	0800d13d 	.word	0x0800d13d
 800d118:	0800d13d 	.word	0x0800d13d
 800d11c:	0800d13d 	.word	0x0800d13d
 800d120:	0800d14d 	.word	0x0800d14d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800d124:	4b17      	ldr	r3, [pc, #92]	; (800d184 <LmHandlerSend+0x188>)
 800d126:	2200      	movs	r2, #0
 800d128:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800d12a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d12e:	f113 0f07 	cmn.w	r3, #7
 800d132:	d017      	beq.n	800d164 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d134:	2300      	movs	r3, #0
 800d136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800d13a:	e013      	b.n	800d164 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d13c:	23fe      	movs	r3, #254	; 0xfe
 800d13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d142:	e010      	b.n	800d166 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d144:	23fd      	movs	r3, #253	; 0xfd
 800d146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d14a:	e00c      	b.n	800d166 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d14c:	23fb      	movs	r3, #251	; 0xfb
 800d14e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d152:	e008      	b.n	800d166 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d154:	23fa      	movs	r3, #250	; 0xfa
 800d156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d15a:	e004      	b.n	800d166 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d15c:	23ff      	movs	r3, #255	; 0xff
 800d15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d162:	e000      	b.n	800d166 <LmHandlerSend+0x16a>
            break;
 800d164:	bf00      	nop
    }

    return lmhStatus;
 800d166:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3728      	adds	r7, #40	; 0x28
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	200000a8 	.word	0x200000a8
 800d178:	200000b0 	.word	0x200000b0
 800d17c:	200005f8 	.word	0x200005f8
 800d180:	20000634 	.word	0x20000634
 800d184:	20000638 	.word	0x20000638

0800d188 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d18e:	2309      	movs	r3, #9
 800d190:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d192:	463b      	mov	r3, r7
 800d194:	4618      	mov	r0, r3
 800d196:	f005 fc8d 	bl	8012ab4 <LoRaMacMlmeRequest>
 800d19a:	4603      	mov	r3, r0
 800d19c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	4a06      	ldr	r2, [pc, #24]	; (800d1bc <LmHandlerDeviceTimeReq+0x34>)
 800d1a2:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e001      	b.n	800d1b2 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d1ae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3718      	adds	r7, #24
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	20000634 	.word	0x20000634

0800d1c0 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d1ca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	370c      	adds	r7, #12
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bc80      	pop	{r7}
 800d1d6:	4770      	bx	lr

0800d1d8 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08c      	sub	sp, #48	; 0x30
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800d1e8:	f002 f8e2 	bl	800f3b0 <LoRaMacIsBusy>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d1f2:	f06f 0301 	mvn.w	r3, #1
 800d1f6:	e073      	b.n	800d2e0 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d1f8:	f7ff fee4 	bl	800cfc4 <LmHandlerJoinStatus>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b01      	cmp	r3, #1
 800d200:	d002      	beq.n	800d208 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d202:	f06f 0302 	mvn.w	r3, #2
 800d206:	e06b      	b.n	800d2e0 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d208:	2300      	movs	r3, #0
 800d20a:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d20c:	f107 0308 	add.w	r3, r7, #8
 800d210:	4618      	mov	r0, r3
 800d212:	f004 ff39 	bl	8012088 <LoRaMacMibGetRequestConfirm>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d21c:	f04f 33ff 	mov.w	r3, #4294967295
 800d220:	e05e      	b.n	800d2e0 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800d222:	7b3b      	ldrb	r3, [r7, #12]
 800d224:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800d228:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d22c:	79fb      	ldrb	r3, [r7, #7]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d04d      	beq.n	800d2ce <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d028      	beq.n	800d28a <LmHandlerRequestClass+0xb2>
 800d238:	2b02      	cmp	r3, #2
 800d23a:	dc4a      	bgt.n	800d2d2 <LmHandlerRequestClass+0xfa>
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <LmHandlerRequestClass+0x6e>
 800d240:	2b01      	cmp	r3, #1
 800d242:	d01e      	beq.n	800d282 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800d244:	e045      	b.n	800d2d2 <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800d246:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d043      	beq.n	800d2d6 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d252:	f107 0308 	add.w	r3, r7, #8
 800d256:	4618      	mov	r0, r3
 800d258:	f005 f8bc 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d10b      	bne.n	800d27a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d262:	4b21      	ldr	r3, [pc, #132]	; (800d2e8 <LmHandlerRequestClass+0x110>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d034      	beq.n	800d2d6 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d26c:	4b1e      	ldr	r3, [pc, #120]	; (800d2e8 <LmHandlerRequestClass+0x110>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d272:	79fa      	ldrb	r2, [r7, #7]
 800d274:	4610      	mov	r0, r2
 800d276:	4798      	blx	r3
            break;
 800d278:	e02d      	b.n	800d2d6 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d27a:	23ff      	movs	r3, #255	; 0xff
 800d27c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d280:	e029      	b.n	800d2d6 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800d282:	23ff      	movs	r3, #255	; 0xff
 800d284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d288:	e028      	b.n	800d2dc <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800d28a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d292:	23ff      	movs	r3, #255	; 0xff
 800d294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d298:	e01f      	b.n	800d2da <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800d29a:	79fb      	ldrb	r3, [r7, #7]
 800d29c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d29e:	f107 0308 	add.w	r3, r7, #8
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f005 f896 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d10b      	bne.n	800d2c6 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d2ae:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <LmHandlerRequestClass+0x110>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d010      	beq.n	800d2da <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d2b8:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <LmHandlerRequestClass+0x110>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2be:	79fa      	ldrb	r2, [r7, #7]
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	4798      	blx	r3
            break;
 800d2c4:	e009      	b.n	800d2da <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d2c6:	23ff      	movs	r3, #255	; 0xff
 800d2c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d2cc:	e005      	b.n	800d2da <LmHandlerRequestClass+0x102>
        }
    }
 800d2ce:	bf00      	nop
 800d2d0:	e004      	b.n	800d2dc <LmHandlerRequestClass+0x104>
            break;
 800d2d2:	bf00      	nop
 800d2d4:	e002      	b.n	800d2dc <LmHandlerRequestClass+0x104>
            break;
 800d2d6:	bf00      	nop
 800d2d8:	e000      	b.n	800d2dc <LmHandlerRequestClass+0x104>
            break;
 800d2da:	bf00      	nop
    return errorStatus;
 800d2dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3730      	adds	r7, #48	; 0x30
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	2000060c 	.word	0x2000060c

0800d2ec <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b08c      	sub	sp, #48	; 0x30
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d102      	bne.n	800d300 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800d2fe:	e010      	b.n	800d322 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d300:	2300      	movs	r3, #0
 800d302:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800d304:	f107 030c 	add.w	r3, r7, #12
 800d308:	4618      	mov	r0, r3
 800d30a:	f004 febd 	bl	8012088 <LoRaMacMibGetRequestConfirm>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d314:	f04f 33ff 	mov.w	r3, #4294967295
 800d318:	e003      	b.n	800d322 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d31a:	7c3a      	ldrb	r2, [r7, #16]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d320:	2300      	movs	r3, #0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3730      	adds	r7, #48	; 0x30
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
	...

0800d32c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08c      	sub	sp, #48	; 0x30
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d102      	bne.n	800d340 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d33a:	f04f 33ff 	mov.w	r3, #4294967295
 800d33e:	e016      	b.n	800d36e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d340:	2320      	movs	r3, #32
 800d342:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800d344:	f107 030c 	add.w	r3, r7, #12
 800d348:	4618      	mov	r0, r3
 800d34a:	f004 fe9d 	bl	8012088 <LoRaMacMibGetRequestConfirm>
 800d34e:	4603      	mov	r3, r0
 800d350:	2b00      	cmp	r3, #0
 800d352:	d002      	beq.n	800d35a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d354:	f04f 33ff 	mov.w	r3, #4294967295
 800d358:	e009      	b.n	800d36e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d35a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f993 2000 	ldrsb.w	r2, [r3]
 800d368:	4b03      	ldr	r3, [pc, #12]	; (800d378 <LmHandlerGetTxDatarate+0x4c>)
 800d36a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3730      	adds	r7, #48	; 0x30
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	200005f8 	.word	0x200005f8

0800d37c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b08c      	sub	sp, #48	; 0x30
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d384:	2323      	movs	r3, #35	; 0x23
 800d386:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d38c:	f107 030c 	add.w	r3, r7, #12
 800d390:	4618      	mov	r0, r3
 800d392:	f005 f81f 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d39c:	f04f 33ff 	mov.w	r3, #4294967295
 800d3a0:	e000      	b.n	800d3a4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d3a2:	2300      	movs	r3, #0
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3730      	adds	r7, #48	; 0x30
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d3b4:	4b15      	ldr	r3, [pc, #84]	; (800d40c <McpsConfirm+0x60>)
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	785a      	ldrb	r2, [r3, #1]
 800d3be:	4b13      	ldr	r3, [pc, #76]	; (800d40c <McpsConfirm+0x60>)
 800d3c0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	789b      	ldrb	r3, [r3, #2]
 800d3c6:	b25a      	sxtb	r2, r3
 800d3c8:	4b10      	ldr	r3, [pc, #64]	; (800d40c <McpsConfirm+0x60>)
 800d3ca:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	4a0e      	ldr	r2, [pc, #56]	; (800d40c <McpsConfirm+0x60>)
 800d3d2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d3da:	4b0c      	ldr	r3, [pc, #48]	; (800d40c <McpsConfirm+0x60>)
 800d3dc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	4b09      	ldr	r3, [pc, #36]	; (800d40c <McpsConfirm+0x60>)
 800d3e6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	791b      	ldrb	r3, [r3, #4]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	4b07      	ldr	r3, [pc, #28]	; (800d40c <McpsConfirm+0x60>)
 800d3f0:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800d3f2:	4b07      	ldr	r3, [pc, #28]	; (800d410 <McpsConfirm+0x64>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f8:	4804      	ldr	r0, [pc, #16]	; (800d40c <McpsConfirm+0x60>)
 800d3fa:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d3fc:	6879      	ldr	r1, [r7, #4]
 800d3fe:	2000      	movs	r0, #0
 800d400:	f000 f9c6 	bl	800d790 <LmHandlerPackagesNotify>
}
 800d404:	bf00      	nop
 800d406:	3708      	adds	r7, #8
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	200000b0 	.word	0x200000b0
 800d410:	2000060c 	.word	0x2000060c

0800d414 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d422:	4b2c      	ldr	r3, [pc, #176]	; (800d4d4 <McpsIndication+0xc0>)
 800d424:	2201      	movs	r2, #1
 800d426:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	785a      	ldrb	r2, [r3, #1]
 800d42c:	4b29      	ldr	r3, [pc, #164]	; (800d4d4 <McpsIndication+0xc0>)
 800d42e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d430:	4b28      	ldr	r3, [pc, #160]	; (800d4d4 <McpsIndication+0xc0>)
 800d432:	785b      	ldrb	r3, [r3, #1]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d149      	bne.n	800d4cc <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	791b      	ldrb	r3, [r3, #4]
 800d43c:	b25a      	sxtb	r2, r3
 800d43e:	4b25      	ldr	r3, [pc, #148]	; (800d4d4 <McpsIndication+0xc0>)
 800d440:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d448:	b25a      	sxtb	r2, r3
 800d44a:	4b22      	ldr	r3, [pc, #136]	; (800d4d4 <McpsIndication+0xc0>)
 800d44c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d454:	4b1f      	ldr	r3, [pc, #124]	; (800d4d4 <McpsIndication+0xc0>)
 800d456:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	78da      	ldrb	r2, [r3, #3]
 800d45c:	4b1d      	ldr	r3, [pc, #116]	; (800d4d4 <McpsIndication+0xc0>)
 800d45e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	691b      	ldr	r3, [r3, #16]
 800d464:	4a1b      	ldr	r2, [pc, #108]	; (800d4d4 <McpsIndication+0xc0>)
 800d466:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	78db      	ldrb	r3, [r3, #3]
 800d46c:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7b1b      	ldrb	r3, [r3, #12]
 800d472:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d47a:	4b17      	ldr	r3, [pc, #92]	; (800d4d8 <McpsIndication+0xc4>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d480:	f107 0210 	add.w	r2, r7, #16
 800d484:	4913      	ldr	r1, [pc, #76]	; (800d4d4 <McpsIndication+0xc0>)
 800d486:	4610      	mov	r0, r2
 800d488:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800d48a:	4b13      	ldr	r3, [pc, #76]	; (800d4d8 <McpsIndication+0xc4>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d490:	2b00      	cmp	r3, #0
 800d492:	d007      	beq.n	800d4a4 <McpsIndication+0x90>
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7e1b      	ldrb	r3, [r3, #24]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d49c:	4b0e      	ldr	r3, [pc, #56]	; (800d4d8 <McpsIndication+0xc4>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a2:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d4a4:	6879      	ldr	r1, [r7, #4]
 800d4a6:	2001      	movs	r0, #1
 800d4a8:	f000 f972 	bl	800d790 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d4ac:	f107 030f 	add.w	r3, r7, #15
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff ff1b 	bl	800d2ec <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	795b      	ldrb	r3, [r3, #5]
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d107      	bne.n	800d4ce <McpsIndication+0xba>
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d104      	bne.n	800d4ce <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800d4c4:	4b05      	ldr	r3, [pc, #20]	; (800d4dc <McpsIndication+0xc8>)
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	701a      	strb	r2, [r3, #0]
 800d4ca:	e000      	b.n	800d4ce <McpsIndication+0xba>
        return;
 800d4cc:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	200000cc 	.word	0x200000cc
 800d4d8:	2000060c 	.word	0x2000060c
 800d4dc:	20000638 	.word	0x20000638

0800d4e0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08c      	sub	sp, #48	; 0x30
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800d4e8:	4b3c      	ldr	r3, [pc, #240]	; (800d5dc <MlmeConfirm+0xfc>)
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	785a      	ldrb	r2, [r3, #1]
 800d4f2:	4b3a      	ldr	r3, [pc, #232]	; (800d5dc <MlmeConfirm+0xfc>)
 800d4f4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800d4f6:	4b3a      	ldr	r3, [pc, #232]	; (800d5e0 <MlmeConfirm+0x100>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fc:	4837      	ldr	r0, [pc, #220]	; (800d5dc <MlmeConfirm+0xfc>)
 800d4fe:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d500:	6879      	ldr	r1, [r7, #4]
 800d502:	2002      	movs	r0, #2
 800d504:	f000 f944 	bl	800d790 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	3b01      	subs	r3, #1
 800d50e:	2b0b      	cmp	r3, #11
 800d510:	d85c      	bhi.n	800d5cc <MlmeConfirm+0xec>
 800d512:	a201      	add	r2, pc, #4	; (adr r2, 800d518 <MlmeConfirm+0x38>)
 800d514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d518:	0800d549 	.word	0x0800d549
 800d51c:	0800d5cd 	.word	0x0800d5cd
 800d520:	0800d5cd 	.word	0x0800d5cd
 800d524:	0800d59b 	.word	0x0800d59b
 800d528:	0800d5cd 	.word	0x0800d5cd
 800d52c:	0800d5cd 	.word	0x0800d5cd
 800d530:	0800d5cd 	.word	0x0800d5cd
 800d534:	0800d5cd 	.word	0x0800d5cd
 800d538:	0800d5cd 	.word	0x0800d5cd
 800d53c:	0800d5cd 	.word	0x0800d5cd
 800d540:	0800d5b3 	.word	0x0800d5b3
 800d544:	0800d5cd 	.word	0x0800d5cd
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800d548:	2306      	movs	r3, #6
 800d54a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d54c:	f107 030c 	add.w	r3, r7, #12
 800d550:	4618      	mov	r0, r3
 800d552:	f004 fd99 	bl	8012088 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	4a22      	ldr	r2, [pc, #136]	; (800d5e4 <MlmeConfirm+0x104>)
 800d55a:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d55c:	4822      	ldr	r0, [pc, #136]	; (800d5e8 <MlmeConfirm+0x108>)
 800d55e:	f7ff fee5 	bl	800d32c <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	785b      	ldrb	r3, [r3, #1]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d108      	bne.n	800d57c <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d56a:	4b20      	ldr	r3, [pc, #128]	; (800d5ec <MlmeConfirm+0x10c>)
 800d56c:	2200      	movs	r2, #0
 800d56e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800d570:	4b1f      	ldr	r3, [pc, #124]	; (800d5f0 <MlmeConfirm+0x110>)
 800d572:	785b      	ldrb	r3, [r3, #1]
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fe2f 	bl	800d1d8 <LmHandlerRequestClass>
 800d57a:	e002      	b.n	800d582 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d57c:	4b1b      	ldr	r3, [pc, #108]	; (800d5ec <MlmeConfirm+0x10c>)
 800d57e:	22ff      	movs	r2, #255	; 0xff
 800d580:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d582:	4b17      	ldr	r3, [pc, #92]	; (800d5e0 <MlmeConfirm+0x100>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d588:	4818      	ldr	r0, [pc, #96]	; (800d5ec <MlmeConfirm+0x10c>)
 800d58a:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	785b      	ldrb	r3, [r3, #1]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d11d      	bne.n	800d5d0 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800d594:	f7ff f894 	bl	800c6c0 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800d598:	e01a      	b.n	800d5d0 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800d59a:	4b16      	ldr	r3, [pc, #88]	; (800d5f4 <MlmeConfirm+0x114>)
 800d59c:	2201      	movs	r2, #1
 800d59e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7a1a      	ldrb	r2, [r3, #8]
 800d5a4:	4b13      	ldr	r3, [pc, #76]	; (800d5f4 <MlmeConfirm+0x114>)
 800d5a6:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	7a5a      	ldrb	r2, [r3, #9]
 800d5ac:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <MlmeConfirm+0x114>)
 800d5ae:	74da      	strb	r2, [r3, #19]
        }
        break;
 800d5b0:	e00f      	b.n	800d5d2 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	785b      	ldrb	r3, [r3, #1]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d105      	bne.n	800d5c6 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800d5ba:	4b0d      	ldr	r3, [pc, #52]	; (800d5f0 <MlmeConfirm+0x110>)
 800d5bc:	7b1b      	ldrb	r3, [r3, #12]
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7ff fdfe 	bl	800d1c0 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800d5c4:	e005      	b.n	800d5d2 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800d5c6:	f7ff fddf 	bl	800d188 <LmHandlerDeviceTimeReq>
        break;
 800d5ca:	e002      	b.n	800d5d2 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d5cc:	bf00      	nop
 800d5ce:	e000      	b.n	800d5d2 <MlmeConfirm+0xf2>
        break;
 800d5d0:	bf00      	nop
    }
}
 800d5d2:	bf00      	nop
 800d5d4:	3730      	adds	r7, #48	; 0x30
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	200000b0 	.word	0x200000b0
 800d5e0:	2000060c 	.word	0x2000060c
 800d5e4:	20000090 	.word	0x20000090
 800d5e8:	200000ac 	.word	0x200000ac
 800d5ec:	200000a8 	.word	0x200000a8
 800d5f0:	200005f8 	.word	0x200005f8
 800d5f4:	200000cc 	.word	0x200000cc

0800d5f8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800d602:	4b24      	ldr	r3, [pc, #144]	; (800d694 <MlmeIndication+0x9c>)
 800d604:	2200      	movs	r2, #0
 800d606:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	785a      	ldrb	r2, [r3, #1]
 800d60c:	4b21      	ldr	r3, [pc, #132]	; (800d694 <MlmeIndication+0x9c>)
 800d60e:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	789b      	ldrb	r3, [r3, #2]
 800d614:	b25a      	sxtb	r2, r3
 800d616:	4b1f      	ldr	r3, [pc, #124]	; (800d694 <MlmeIndication+0x9c>)
 800d618:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d620:	b25a      	sxtb	r2, r3
 800d622:	4b1c      	ldr	r3, [pc, #112]	; (800d694 <MlmeIndication+0x9c>)
 800d624:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d62c:	4b19      	ldr	r3, [pc, #100]	; (800d694 <MlmeIndication+0x9c>)
 800d62e:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	78da      	ldrb	r2, [r3, #3]
 800d634:	4b17      	ldr	r3, [pc, #92]	; (800d694 <MlmeIndication+0x9c>)
 800d636:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	4a15      	ldr	r2, [pc, #84]	; (800d694 <MlmeIndication+0x9c>)
 800d63e:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	2b0a      	cmp	r3, #10
 800d646:	d009      	beq.n	800d65c <MlmeIndication+0x64>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	2b0e      	cmp	r3, #14
 800d64e:	d005      	beq.n	800d65c <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800d650:	4b11      	ldr	r3, [pc, #68]	; (800d698 <MlmeIndication+0xa0>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d656:	490f      	ldr	r1, [pc, #60]	; (800d694 <MlmeIndication+0x9c>)
 800d658:	2000      	movs	r0, #0
 800d65a:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800d65c:	6879      	ldr	r1, [r7, #4]
 800d65e:	2003      	movs	r0, #3
 800d660:	f000 f896 	bl	800d790 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	2b0e      	cmp	r3, #14
 800d66a:	d00a      	beq.n	800d682 <MlmeIndication+0x8a>
 800d66c:	2b0e      	cmp	r3, #14
 800d66e:	dc0a      	bgt.n	800d686 <MlmeIndication+0x8e>
 800d670:	2b06      	cmp	r3, #6
 800d672:	d002      	beq.n	800d67a <MlmeIndication+0x82>
 800d674:	2b0a      	cmp	r3, #10
 800d676:	d008      	beq.n	800d68a <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800d678:	e005      	b.n	800d686 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800d67a:	4b08      	ldr	r3, [pc, #32]	; (800d69c <MlmeIndication+0xa4>)
 800d67c:	2201      	movs	r2, #1
 800d67e:	701a      	strb	r2, [r3, #0]
        break;
 800d680:	e004      	b.n	800d68c <MlmeIndication+0x94>
        break;
 800d682:	bf00      	nop
 800d684:	e002      	b.n	800d68c <MlmeIndication+0x94>
        break;
 800d686:	bf00      	nop
 800d688:	e000      	b.n	800d68c <MlmeIndication+0x94>
        break;
 800d68a:	bf00      	nop
    }
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	200000cc 	.word	0x200000cc
 800d698:	2000060c 	.word	0x2000060c
 800d69c:	20000638 	.word	0x20000638

0800d6a0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	6039      	str	r1, [r7, #0]
 800d6aa:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60fb      	str	r3, [r7, #12]
    switch( id )
 800d6b0:	79fb      	ldrb	r3, [r7, #7]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d103      	bne.n	800d6be <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800d6b6:	f000 fa1f 	bl	800daf8 <LmhpCompliancePackageFactory>
 800d6ba:	60f8      	str	r0, [r7, #12]
            break;
 800d6bc:	e000      	b.n	800d6c0 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800d6be:	bf00      	nop
        }
    }
    if( package != NULL )
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d035      	beq.n	800d732 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	491d      	ldr	r1, [pc, #116]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d6ca:	68fa      	ldr	r2, [r7, #12]
 800d6cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d6d0:	79fb      	ldrb	r3, [r7, #7]
 800d6d2:	4a1b      	ldr	r2, [pc, #108]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d6d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6d8:	4a1a      	ldr	r2, [pc, #104]	; (800d744 <LmHandlerPackageRegister+0xa4>)
 800d6da:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d6dc:	4b1a      	ldr	r3, [pc, #104]	; (800d748 <LmHandlerPackageRegister+0xa8>)
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	4917      	ldr	r1, [pc, #92]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d6e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d6e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d6ea:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d6ec:	4b16      	ldr	r3, [pc, #88]	; (800d748 <LmHandlerPackageRegister+0xa8>)
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	79fb      	ldrb	r3, [r7, #7]
 800d6f2:	4913      	ldr	r1, [pc, #76]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d6f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d6f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d6fa:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d6fc:	79fb      	ldrb	r3, [r7, #7]
 800d6fe:	4a10      	ldr	r2, [pc, #64]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d704:	4a11      	ldr	r2, [pc, #68]	; (800d74c <LmHandlerPackageRegister+0xac>)
 800d706:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d708:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <LmHandlerPackageRegister+0xa8>)
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	79fb      	ldrb	r3, [r7, #7]
 800d70e:	490c      	ldr	r1, [pc, #48]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d714:	6992      	ldr	r2, [r2, #24]
 800d716:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	4a09      	ldr	r2, [pc, #36]	; (800d740 <LmHandlerPackageRegister+0xa0>)
 800d71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	4a0b      	ldr	r2, [pc, #44]	; (800d750 <LmHandlerPackageRegister+0xb0>)
 800d724:	6851      	ldr	r1, [r2, #4]
 800d726:	4a0a      	ldr	r2, [pc, #40]	; (800d750 <LmHandlerPackageRegister+0xb0>)
 800d728:	7852      	ldrb	r2, [r2, #1]
 800d72a:	6838      	ldr	r0, [r7, #0]
 800d72c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800d72e:	2300      	movs	r3, #0
 800d730:	e001      	b.n	800d736 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d732:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	200005e4 	.word	0x200005e4
 800d744:	0800cec1 	.word	0x0800cec1
 800d748:	2000060c 	.word	0x2000060c
 800d74c:	0800d189 	.word	0x0800d189
 800d750:	200000e0 	.word	0x200000e0

0800d754 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	4603      	mov	r3, r0
 800d75c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800d75e:	79fb      	ldrb	r3, [r7, #7]
 800d760:	2b04      	cmp	r3, #4
 800d762:	d80e      	bhi.n	800d782 <LmHandlerPackageIsInitialized+0x2e>
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	4a09      	ldr	r2, [pc, #36]	; (800d78c <LmHandlerPackageIsInitialized+0x38>)
 800d768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d007      	beq.n	800d782 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800d772:	79fb      	ldrb	r3, [r7, #7]
 800d774:	4a05      	ldr	r2, [pc, #20]	; (800d78c <LmHandlerPackageIsInitialized+0x38>)
 800d776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	4798      	blx	r3
 800d77e:	4603      	mov	r3, r0
 800d780:	e000      	b.n	800d784 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800d782:	2300      	movs	r3, #0
    }
}
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	200005e4 	.word	0x200005e4

0800d790 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b084      	sub	sp, #16
 800d794:	af00      	add	r7, sp, #0
 800d796:	4603      	mov	r3, r0
 800d798:	6039      	str	r1, [r7, #0]
 800d79a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d79c:	2300      	movs	r3, #0
 800d79e:	73fb      	strb	r3, [r7, #15]
 800d7a0:	e069      	b.n	800d876 <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800d7a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7a6:	4a38      	ldr	r2, [pc, #224]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d7a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d051      	beq.n	800d854 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800d7b0:	79fb      	ldrb	r3, [r7, #7]
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d850      	bhi.n	800d858 <LmHandlerPackagesNotify+0xc8>
 800d7b6:	a201      	add	r2, pc, #4	; (adr r2, 800d7bc <LmHandlerPackagesNotify+0x2c>)
 800d7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7bc:	0800d7cd 	.word	0x0800d7cd
 800d7c0:	0800d7ef 	.word	0x0800d7ef
 800d7c4:	0800d811 	.word	0x0800d811
 800d7c8:	0800d833 	.word	0x0800d833
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800d7cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7d0:	4a2d      	ldr	r2, [pc, #180]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d7d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7d6:	699b      	ldr	r3, [r3, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d03f      	beq.n	800d85c <LmHandlerPackagesNotify+0xcc>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800d7dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7e0:	4a29      	ldr	r2, [pc, #164]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e6:	699b      	ldr	r3, [r3, #24]
 800d7e8:	6838      	ldr	r0, [r7, #0]
 800d7ea:	4798      	blx	r3
                    }
                    break;
 800d7ec:	e036      	b.n	800d85c <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800d7ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7f2:	4a25      	ldr	r2, [pc, #148]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7f8:	69db      	ldr	r3, [r3, #28]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d030      	beq.n	800d860 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800d7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d802:	4a21      	ldr	r2, [pc, #132]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	6838      	ldr	r0, [r7, #0]
 800d80c:	4798      	blx	r3
                    }
                    break;
 800d80e:	e027      	b.n	800d860 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800d810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d814:	4a1c      	ldr	r2, [pc, #112]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d81a:	6a1b      	ldr	r3, [r3, #32]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d021      	beq.n	800d864 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800d820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d824:	4a18      	ldr	r2, [pc, #96]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d82a:	6a1b      	ldr	r3, [r3, #32]
 800d82c:	6838      	ldr	r0, [r7, #0]
 800d82e:	4798      	blx	r3
                    }
                    break;
 800d830:	e018      	b.n	800d864 <LmHandlerPackagesNotify+0xd4>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800d832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d836:	4a14      	ldr	r2, [pc, #80]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d012      	beq.n	800d868 <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800d842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d846:	4a10      	ldr	r2, [pc, #64]	; (800d888 <LmHandlerPackagesNotify+0xf8>)
 800d848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d84e:	6838      	ldr	r0, [r7, #0]
 800d850:	4798      	blx	r3
                    }
                    break;
 800d852:	e009      	b.n	800d868 <LmHandlerPackagesNotify+0xd8>
                default:
                {
                    break;
                }
            }
        }
 800d854:	bf00      	nop
 800d856:	e008      	b.n	800d86a <LmHandlerPackagesNotify+0xda>
                    break;
 800d858:	bf00      	nop
 800d85a:	e006      	b.n	800d86a <LmHandlerPackagesNotify+0xda>
                    break;
 800d85c:	bf00      	nop
 800d85e:	e004      	b.n	800d86a <LmHandlerPackagesNotify+0xda>
                    break;
 800d860:	bf00      	nop
 800d862:	e002      	b.n	800d86a <LmHandlerPackagesNotify+0xda>
                    break;
 800d864:	bf00      	nop
 800d866:	e000      	b.n	800d86a <LmHandlerPackagesNotify+0xda>
                    break;
 800d868:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	3301      	adds	r3, #1
 800d872:	b2db      	uxtb	r3, r3
 800d874:	73fb      	strb	r3, [r7, #15]
 800d876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d87a:	2b04      	cmp	r3, #4
 800d87c:	dd91      	ble.n	800d7a2 <LmHandlerPackagesNotify+0x12>
    }
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	200005e4 	.word	0x200005e4

0800d88c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d892:	2300      	movs	r3, #0
 800d894:	71fb      	strb	r3, [r7, #7]
 800d896:	e018      	b.n	800d8ca <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800d898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d89c:	4a0f      	ldr	r2, [pc, #60]	; (800d8dc <LmHandlerPackageIsTxPending+0x50>)
 800d89e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00b      	beq.n	800d8be <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800d8a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8aa:	4a0c      	ldr	r2, [pc, #48]	; (800d8dc <LmHandlerPackageIsTxPending+0x50>)
 800d8ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	4798      	blx	r3
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	e00a      	b.n	800d8d4 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d8be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	71fb      	strb	r3, [r7, #7]
 800d8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8ce:	2b04      	cmp	r3, #4
 800d8d0:	dde2      	ble.n	800d898 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800d8d2:	2300      	movs	r3, #0
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	200005e4 	.word	0x200005e4

0800d8e0 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	71fb      	strb	r3, [r7, #7]
 800d8ea:	e022      	b.n	800d932 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d8ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8f0:	4a14      	ldr	r2, [pc, #80]	; (800d944 <LmHandlerPackagesProcess+0x64>)
 800d8f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d015      	beq.n	800d926 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d8fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d8fe:	4a11      	ldr	r2, [pc, #68]	; (800d944 <LmHandlerPackagesProcess+0x64>)
 800d900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d904:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00d      	beq.n	800d926 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800d90a:	79fb      	ldrb	r3, [r7, #7]
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff ff21 	bl	800d754 <LmHandlerPackageIsInitialized>
 800d912:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800d914:	2b00      	cmp	r3, #0
 800d916:	d006      	beq.n	800d926 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800d918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d91c:	4a09      	ldr	r2, [pc, #36]	; (800d944 <LmHandlerPackagesProcess+0x64>)
 800d91e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800d926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	3301      	adds	r3, #1
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	71fb      	strb	r3, [r7, #7]
 800d932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d936:	2b04      	cmp	r3, #4
 800d938:	ddd8      	ble.n	800d8ec <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800d93a:	bf00      	nop
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	200005e4 	.word	0x200005e4

0800d948 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	4603      	mov	r3, r0
 800d950:	6039      	str	r1, [r7, #0]
 800d952:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d102      	bne.n	800d960 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800d95a:	f04f 33ff 	mov.w	r3, #4294967295
 800d95e:	e00e      	b.n	800d97e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800d960:	79fb      	ldrb	r3, [r7, #7]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d002      	beq.n	800d96c <LmHandlerGetVersion+0x24>
 800d966:	2b01      	cmp	r3, #1
 800d968:	d004      	beq.n	800d974 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800d96a:	e007      	b.n	800d97c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	4a06      	ldr	r2, [pc, #24]	; (800d988 <LmHandlerGetVersion+0x40>)
 800d970:	601a      	str	r2, [r3, #0]
            break;
 800d972:	e003      	b.n	800d97c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	4a05      	ldr	r2, [pc, #20]	; (800d98c <LmHandlerGetVersion+0x44>)
 800d978:	601a      	str	r2, [r3, #0]
            break;
 800d97a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	bc80      	pop	{r7}
 800d986:	4770      	bx	lr
 800d988:	01000400 	.word	0x01000400
 800d98c:	02010001 	.word	0x02010001

0800d990 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800d994:	f005 fb6a 	bl	801306c <LoRaMacDeInitialization>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d101      	bne.n	800d9a2 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e001      	b.n	800d9a6 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d9a2:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	bd80      	pop	{r7, pc}

0800d9aa <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800d9ae:	f004 faa3 	bl	8011ef8 <LoRaMacHalt>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e001      	b.n	800d9c0 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d9bc:	f06f 0301 	mvn.w	r3, #1
    }
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08e      	sub	sp, #56	; 0x38
 800d9c8:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800d9d4:	f7ff ffe9 	bl	800d9aa <LmHandlerHalt>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800d9de:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d12f      	bne.n	800da46 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800d9e6:	f000 f859 	bl	800da9c <NvmDataMgmtStoreBegin>
 800d9ea:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800d9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ee:	f113 0f02 	cmn.w	r3, #2
 800d9f2:	d103      	bne.n	800d9fc <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d9f4:	23f8      	movs	r3, #248	; 0xf8
 800d9f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d9fa:	e01c      	b.n	800da36 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d104      	bne.n	800da0c <LmHandlerNvmDataStore+0x48>
 800da02:	4b1b      	ldr	r3, [pc, #108]	; (800da70 <LmHandlerNvmDataStore+0xac>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	695b      	ldr	r3, [r3, #20]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800da0c:	23ff      	movs	r3, #255	; 0xff
 800da0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800da12:	e010      	b.n	800da36 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800da14:	2327      	movs	r3, #39	; 0x27
 800da16:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800da18:	1d3b      	adds	r3, r7, #4
 800da1a:	4618      	mov	r0, r3
 800da1c:	f004 fb34 	bl	8012088 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800da24:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 800da28:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800da2a:	4b11      	ldr	r3, [pc, #68]	; (800da70 <LmHandlerNvmDataStore+0xac>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	695b      	ldr	r3, [r3, #20]
 800da30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da34:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800da36:	f000 f847 	bl	800dac8 <NvmDataMgmtStoreEnd>
 800da3a:	4603      	mov	r3, r0
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d002      	beq.n	800da46 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800da40:	23ff      	movs	r3, #255	; 0xff
 800da42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800da46:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d109      	bne.n	800da62 <LmHandlerNvmDataStore+0x9e>
 800da4e:	4b08      	ldr	r3, [pc, #32]	; (800da70 <LmHandlerNvmDataStore+0xac>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	69db      	ldr	r3, [r3, #28]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d004      	beq.n	800da62 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800da58:	4b05      	ldr	r3, [pc, #20]	; (800da70 <LmHandlerNvmDataStore+0xac>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	2001      	movs	r0, #1
 800da60:	4798      	blx	r3
    }

    return lmhStatus;
 800da62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800da66:	4618      	mov	r0, r3
 800da68:	3738      	adds	r7, #56	; 0x38
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	2000060c 	.word	0x2000060c

0800da74 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	4603      	mov	r3, r0
 800da7c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800da7e:	4b06      	ldr	r3, [pc, #24]	; (800da98 <NvmDataMgmtEvent+0x24>)
 800da80:	881a      	ldrh	r2, [r3, #0]
 800da82:	88fb      	ldrh	r3, [r7, #6]
 800da84:	4313      	orrs	r3, r2
 800da86:	b29a      	uxth	r2, r3
 800da88:	4b03      	ldr	r3, [pc, #12]	; (800da98 <NvmDataMgmtEvent+0x24>)
 800da8a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800da8c:	bf00      	nop
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	bc80      	pop	{r7}
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	20000730 	.word	0x20000730

0800da9c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800daa0:	4b08      	ldr	r3, [pc, #32]	; (800dac4 <NvmDataMgmtStoreBegin+0x28>)
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800daa8:	f06f 0301 	mvn.w	r3, #1
 800daac:	e008      	b.n	800dac0 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800daae:	f004 fa07 	bl	8011ec0 <LoRaMacStop>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800dab8:	f06f 0302 	mvn.w	r3, #2
 800dabc:	e000      	b.n	800dac0 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800dabe:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	20000730 	.word	0x20000730

0800dac8 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800dacc:	4b03      	ldr	r3, [pc, #12]	; (800dadc <NvmDataMgmtStoreEnd+0x14>)
 800dace:	2200      	movs	r2, #0
 800dad0:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800dad2:	f004 f9e7 	bl	8011ea4 <LoRaMacStart>
    return NVM_DATA_OK;
 800dad6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dad8:	4618      	mov	r0, r3
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20000730 	.word	0x20000730

0800dae0 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800dae4:	2220      	movs	r2, #32
 800dae6:	2100      	movs	r1, #0
 800dae8:	4802      	ldr	r0, [pc, #8]	; (800daf4 <ClassBStatusReset+0x14>)
 800daea:	f00b f971 	bl	8018dd0 <memset1>
}
 800daee:	bf00      	nop
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	bf00      	nop
 800daf4:	20000748 	.word	0x20000748

0800daf8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800daf8:	b480      	push	{r7}
 800dafa:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800dafc:	4b02      	ldr	r3, [pc, #8]	; (800db08 <LmhpCompliancePackageFactory+0x10>)
}
 800dafe:	4618      	mov	r0, r3
 800db00:	46bd      	mov	sp, r7
 800db02:	bc80      	pop	{r7}
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	200000e8 	.word	0x200000e8

0800db0c <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af02      	add	r7, sp, #8
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	4613      	mov	r3, r2
 800db18:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d018      	beq.n	800db52 <LmhpComplianceInit+0x46>
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d015      	beq.n	800db52 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800db26:	4a19      	ldr	r2, [pc, #100]	; (800db8c <LmhpComplianceInit+0x80>)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800db2c:	4a18      	ldr	r2, [pc, #96]	; (800db90 <LmhpComplianceInit+0x84>)
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800db32:	4a17      	ldr	r2, [pc, #92]	; (800db90 <LmhpComplianceInit+0x84>)
 800db34:	79fb      	ldrb	r3, [r7, #7]
 800db36:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800db38:	4b15      	ldr	r3, [pc, #84]	; (800db90 <LmhpComplianceInit+0x84>)
 800db3a:	2201      	movs	r2, #1
 800db3c:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800db3e:	2300      	movs	r3, #0
 800db40:	9300      	str	r3, [sp, #0]
 800db42:	4b14      	ldr	r3, [pc, #80]	; (800db94 <LmhpComplianceInit+0x88>)
 800db44:	2200      	movs	r2, #0
 800db46:	f04f 31ff 	mov.w	r1, #4294967295
 800db4a:	4813      	ldr	r0, [pc, #76]	; (800db98 <LmhpComplianceInit+0x8c>)
 800db4c:	f00f f86e 	bl	801cc2c <UTIL_TIMER_Create>
 800db50:	e005      	b.n	800db5e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800db52:	4b0e      	ldr	r3, [pc, #56]	; (800db8c <LmhpComplianceInit+0x80>)
 800db54:	2200      	movs	r2, #0
 800db56:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800db58:	4b0d      	ldr	r3, [pc, #52]	; (800db90 <LmhpComplianceInit+0x84>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800db5e:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <LmhpComplianceInit+0x84>)
 800db60:	2200      	movs	r2, #0
 800db62:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800db64:	f7ff ffbc 	bl	800dae0 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800db68:	4b09      	ldr	r3, [pc, #36]	; (800db90 <LmhpComplianceInit+0x84>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800db6e:	4b08      	ldr	r3, [pc, #32]	; (800db90 <LmhpComplianceInit+0x84>)
 800db70:	2200      	movs	r2, #0
 800db72:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800db74:	4b06      	ldr	r3, [pc, #24]	; (800db90 <LmhpComplianceInit+0x84>)
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800db7c:	4b04      	ldr	r3, [pc, #16]	; (800db90 <LmhpComplianceInit+0x84>)
 800db7e:	2200      	movs	r2, #0
 800db80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800db84:	bf00      	nop
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}
 800db8c:	2000076c 	.word	0x2000076c
 800db90:	20000734 	.word	0x20000734
 800db94:	0800e481 	.word	0x0800e481
 800db98:	20000770 	.word	0x20000770

0800db9c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800dba0:	4b02      	ldr	r3, [pc, #8]	; (800dbac <LmhpComplianceIsInitialized+0x10>)
 800dba2:	781b      	ldrb	r3, [r3, #0]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bc80      	pop	{r7}
 800dbaa:	4770      	bx	lr
 800dbac:	20000734 	.word	0x20000734

0800dbb0 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800dbb4:	4b02      	ldr	r3, [pc, #8]	; (800dbc0 <LmhpComplianceIsTxPending+0x10>)
 800dbb6:	785b      	ldrb	r3, [r3, #1]
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bc80      	pop	{r7}
 800dbbe:	4770      	bx	lr
 800dbc0:	20000734 	.word	0x20000734

0800dbc4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800dbc4:	b590      	push	{r4, r7, lr}
 800dbc6:	b085      	sub	sp, #20
 800dbc8:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800dbca:	4b33      	ldr	r3, [pc, #204]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dbcc:	785b      	ldrb	r3, [r3, #1]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d03f      	beq.n	800dc52 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800dbd2:	f00f f9e9 	bl	801cfa8 <UTIL_TIMER_GetCurrentTime>
 800dbd6:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800dbd8:	4b2f      	ldr	r3, [pc, #188]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dbda:	685c      	ldr	r4, [r3, #4]
 800dbdc:	f7ff f966 	bl	800ceac <LmHandlerGetDutyCycleWaitTime>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	4423      	add	r3, r4
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d942      	bls.n	800dc70 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800dbea:	4b2b      	ldr	r3, [pc, #172]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dbec:	7a9b      	ldrb	r3, [r3, #10]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d03e      	beq.n	800dc70 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800dbf2:	23e0      	movs	r3, #224	; 0xe0
 800dbf4:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800dbf6:	4b28      	ldr	r3, [pc, #160]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dbf8:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800dbfa:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800dbfc:	4b26      	ldr	r3, [pc, #152]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dbfe:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800dc00:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800dc02:	23ff      	movs	r3, #255	; 0xff
 800dc04:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800dc06:	4b24      	ldr	r3, [pc, #144]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc08:	7a19      	ldrb	r1, [r3, #8]
 800dc0a:	463b      	mov	r3, r7
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f7ff f9f4 	bl	800cffc <LmHandlerSend>
 800dc14:	4603      	mov	r3, r0
 800dc16:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800dc18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc1c:	f113 0f02 	cmn.w	r3, #2
 800dc20:	d004      	beq.n	800dc2c <LmhpComplianceProcess+0x68>
 800dc22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc26:	f113 0f06 	cmn.w	r3, #6
 800dc2a:	d108      	bne.n	800dc3e <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800dc2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800dc30:	481a      	ldr	r0, [pc, #104]	; (800dc9c <LmhpComplianceProcess+0xd8>)
 800dc32:	f00f f90f 	bl	801ce54 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800dc36:	4819      	ldr	r0, [pc, #100]	; (800dc9c <LmhpComplianceProcess+0xd8>)
 800dc38:	f00f f82e 	bl	801cc98 <UTIL_TIMER_Start>
 800dc3c:	e005      	b.n	800dc4a <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800dc3e:	4b16      	ldr	r3, [pc, #88]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800dc44:	4b14      	ldr	r3, [pc, #80]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc46:	2200      	movs	r2, #0
 800dc48:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800dc4a:	4a13      	ldr	r2, [pc, #76]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6053      	str	r3, [r2, #4]
 800dc50:	e00e      	b.n	800dc70 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800dc52:	4b11      	ldr	r3, [pc, #68]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d009      	beq.n	800dc70 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800dc5c:	4b0e      	ldr	r3, [pc, #56]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800dc64:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc66:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff fab4 	bl	800d1d8 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800dc70:	4b09      	ldr	r3, [pc, #36]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800dc7a:	4b07      	ldr	r3, [pc, #28]	; (800dc98 <LmhpComplianceProcess+0xd4>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800dc82:	4b07      	ldr	r3, [pc, #28]	; (800dca0 <LmhpComplianceProcess+0xdc>)
 800dc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800dc8a:	4b05      	ldr	r3, [pc, #20]	; (800dca0 <LmhpComplianceProcess+0xdc>)
 800dc8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8e:	4798      	blx	r3
        }
    }
}
 800dc90:	bf00      	nop
 800dc92:	3714      	adds	r7, #20
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd90      	pop	{r4, r7, pc}
 800dc98:	20000734 	.word	0x20000734
 800dc9c:	20000770 	.word	0x20000770
 800dca0:	200000e8 	.word	0x200000e8

0800dca4 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800dca4:	b5b0      	push	{r4, r5, r7, lr}
 800dca6:	b0a4      	sub	sp, #144	; 0x90
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800dcb2:	4bce      	ldr	r3, [pc, #824]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	f083 0301 	eor.w	r3, r3, #1
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	f040 83b5 	bne.w	800e42c <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	78db      	ldrb	r3, [r3, #3]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d103      	bne.n	800dcd2 <LmhpComplianceOnMcpsIndication+0x2e>
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7b9b      	ldrb	r3, [r3, #14]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d005      	beq.n	800dcde <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800dcd2:	4bc6      	ldr	r3, [pc, #792]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800dcd4:	8a1b      	ldrh	r3, [r3, #16]
 800dcd6:	3301      	adds	r3, #1
 800dcd8:	b29a      	uxth	r2, r3
 800dcda:	4bc4      	ldr	r3, [pc, #784]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800dcdc:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	7b5b      	ldrb	r3, [r3, #13]
 800dce2:	f083 0301 	eor.w	r3, r3, #1
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f040 83a1 	bne.w	800e430 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	78db      	ldrb	r3, [r3, #3]
 800dcf2:	2be0      	cmp	r3, #224	; 0xe0
 800dcf4:	f040 839e 	bne.w	800e434 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800dcf8:	4bbc      	ldr	r3, [pc, #752]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	689a      	ldr	r2, [r3, #8]
 800dd02:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dd06:	1c59      	adds	r1, r3, #1
 800dd08:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dd0c:	4413      	add	r3, r2
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	2b7f      	cmp	r3, #127	; 0x7f
 800dd12:	f200 836e 	bhi.w	800e3f2 <LmhpComplianceOnMcpsIndication+0x74e>
 800dd16:	a201      	add	r2, pc, #4	; (adr r2, 800dd1c <LmhpComplianceOnMcpsIndication+0x78>)
 800dd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1c:	0800df1d 	.word	0x0800df1d
 800dd20:	0800df61 	.word	0x0800df61
 800dd24:	0800df6b 	.word	0x0800df6b
 800dd28:	0800df77 	.word	0x0800df77
 800dd2c:	0800df99 	.word	0x0800df99
 800dd30:	0800dfc7 	.word	0x0800dfc7
 800dd34:	0800dff5 	.word	0x0800dff5
 800dd38:	0800e053 	.word	0x0800e053
 800dd3c:	0800e0ab 	.word	0x0800e0ab
 800dd40:	0800e117 	.word	0x0800e117
 800dd44:	0800e167 	.word	0x0800e167
 800dd48:	0800e3f3 	.word	0x0800e3f3
 800dd4c:	0800e3f3 	.word	0x0800e3f3
 800dd50:	0800e3f3 	.word	0x0800e3f3
 800dd54:	0800e3f3 	.word	0x0800e3f3
 800dd58:	0800e3f3 	.word	0x0800e3f3
 800dd5c:	0800e3f3 	.word	0x0800e3f3
 800dd60:	0800e3f3 	.word	0x0800e3f3
 800dd64:	0800e3f3 	.word	0x0800e3f3
 800dd68:	0800e3f3 	.word	0x0800e3f3
 800dd6c:	0800e3f3 	.word	0x0800e3f3
 800dd70:	0800e3f3 	.word	0x0800e3f3
 800dd74:	0800e3f3 	.word	0x0800e3f3
 800dd78:	0800e3f3 	.word	0x0800e3f3
 800dd7c:	0800e3f3 	.word	0x0800e3f3
 800dd80:	0800e3f3 	.word	0x0800e3f3
 800dd84:	0800e3f3 	.word	0x0800e3f3
 800dd88:	0800e3f3 	.word	0x0800e3f3
 800dd8c:	0800e3f3 	.word	0x0800e3f3
 800dd90:	0800e3f3 	.word	0x0800e3f3
 800dd94:	0800e3f3 	.word	0x0800e3f3
 800dd98:	0800e3f3 	.word	0x0800e3f3
 800dd9c:	0800e16f 	.word	0x0800e16f
 800dda0:	0800e181 	.word	0x0800e181
 800dda4:	0800e189 	.word	0x0800e189
 800dda8:	0800e3f3 	.word	0x0800e3f3
 800ddac:	0800e3f3 	.word	0x0800e3f3
 800ddb0:	0800e3f3 	.word	0x0800e3f3
 800ddb4:	0800e3f3 	.word	0x0800e3f3
 800ddb8:	0800e3f3 	.word	0x0800e3f3
 800ddbc:	0800e3f3 	.word	0x0800e3f3
 800ddc0:	0800e3f3 	.word	0x0800e3f3
 800ddc4:	0800e3f3 	.word	0x0800e3f3
 800ddc8:	0800e3f3 	.word	0x0800e3f3
 800ddcc:	0800e3f3 	.word	0x0800e3f3
 800ddd0:	0800e3f3 	.word	0x0800e3f3
 800ddd4:	0800e3f3 	.word	0x0800e3f3
 800ddd8:	0800e3f3 	.word	0x0800e3f3
 800dddc:	0800e3f3 	.word	0x0800e3f3
 800dde0:	0800e3f3 	.word	0x0800e3f3
 800dde4:	0800e3f3 	.word	0x0800e3f3
 800dde8:	0800e3f3 	.word	0x0800e3f3
 800ddec:	0800e3f3 	.word	0x0800e3f3
 800ddf0:	0800e3f3 	.word	0x0800e3f3
 800ddf4:	0800e3f3 	.word	0x0800e3f3
 800ddf8:	0800e3f3 	.word	0x0800e3f3
 800ddfc:	0800e3f3 	.word	0x0800e3f3
 800de00:	0800e3f3 	.word	0x0800e3f3
 800de04:	0800e3f3 	.word	0x0800e3f3
 800de08:	0800e3f3 	.word	0x0800e3f3
 800de0c:	0800e3f3 	.word	0x0800e3f3
 800de10:	0800e3f3 	.word	0x0800e3f3
 800de14:	0800e3f3 	.word	0x0800e3f3
 800de18:	0800e3f3 	.word	0x0800e3f3
 800de1c:	0800e3f3 	.word	0x0800e3f3
 800de20:	0800e3f3 	.word	0x0800e3f3
 800de24:	0800e3f3 	.word	0x0800e3f3
 800de28:	0800e3f3 	.word	0x0800e3f3
 800de2c:	0800e3f3 	.word	0x0800e3f3
 800de30:	0800e3f3 	.word	0x0800e3f3
 800de34:	0800e3f3 	.word	0x0800e3f3
 800de38:	0800e3f3 	.word	0x0800e3f3
 800de3c:	0800e3f3 	.word	0x0800e3f3
 800de40:	0800e3f3 	.word	0x0800e3f3
 800de44:	0800e3f3 	.word	0x0800e3f3
 800de48:	0800e3f3 	.word	0x0800e3f3
 800de4c:	0800e3f3 	.word	0x0800e3f3
 800de50:	0800e3f3 	.word	0x0800e3f3
 800de54:	0800e3f3 	.word	0x0800e3f3
 800de58:	0800e3f3 	.word	0x0800e3f3
 800de5c:	0800e3f3 	.word	0x0800e3f3
 800de60:	0800e3f3 	.word	0x0800e3f3
 800de64:	0800e3f3 	.word	0x0800e3f3
 800de68:	0800e3f3 	.word	0x0800e3f3
 800de6c:	0800e3f3 	.word	0x0800e3f3
 800de70:	0800e3f3 	.word	0x0800e3f3
 800de74:	0800e3f3 	.word	0x0800e3f3
 800de78:	0800e3f3 	.word	0x0800e3f3
 800de7c:	0800e3f3 	.word	0x0800e3f3
 800de80:	0800e3f3 	.word	0x0800e3f3
 800de84:	0800e3f3 	.word	0x0800e3f3
 800de88:	0800e3f3 	.word	0x0800e3f3
 800de8c:	0800e3f3 	.word	0x0800e3f3
 800de90:	0800e3f3 	.word	0x0800e3f3
 800de94:	0800e3f3 	.word	0x0800e3f3
 800de98:	0800e3f3 	.word	0x0800e3f3
 800de9c:	0800e3f3 	.word	0x0800e3f3
 800dea0:	0800e3f3 	.word	0x0800e3f3
 800dea4:	0800e3f3 	.word	0x0800e3f3
 800dea8:	0800e3f3 	.word	0x0800e3f3
 800deac:	0800e3f3 	.word	0x0800e3f3
 800deb0:	0800e3f3 	.word	0x0800e3f3
 800deb4:	0800e3f3 	.word	0x0800e3f3
 800deb8:	0800e3f3 	.word	0x0800e3f3
 800debc:	0800e3f3 	.word	0x0800e3f3
 800dec0:	0800e3f3 	.word	0x0800e3f3
 800dec4:	0800e3f3 	.word	0x0800e3f3
 800dec8:	0800e3f3 	.word	0x0800e3f3
 800decc:	0800e3f3 	.word	0x0800e3f3
 800ded0:	0800e3f3 	.word	0x0800e3f3
 800ded4:	0800e3f3 	.word	0x0800e3f3
 800ded8:	0800e3f3 	.word	0x0800e3f3
 800dedc:	0800e3f3 	.word	0x0800e3f3
 800dee0:	0800e3f3 	.word	0x0800e3f3
 800dee4:	0800e3f3 	.word	0x0800e3f3
 800dee8:	0800e3f3 	.word	0x0800e3f3
 800deec:	0800e3f3 	.word	0x0800e3f3
 800def0:	0800e3f3 	.word	0x0800e3f3
 800def4:	0800e3f3 	.word	0x0800e3f3
 800def8:	0800e3f3 	.word	0x0800e3f3
 800defc:	0800e3f3 	.word	0x0800e3f3
 800df00:	0800e3f3 	.word	0x0800e3f3
 800df04:	0800e3f3 	.word	0x0800e3f3
 800df08:	0800e3f3 	.word	0x0800e3f3
 800df0c:	0800e3f3 	.word	0x0800e3f3
 800df10:	0800e1bb 	.word	0x0800e1bb
 800df14:	0800e26b 	.word	0x0800e26b
 800df18:	0800e29d 	.word	0x0800e29d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800df1c:	4b33      	ldr	r3, [pc, #204]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df1e:	68da      	ldr	r2, [r3, #12]
 800df20:	4b32      	ldr	r3, [pc, #200]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df22:	7a9b      	ldrb	r3, [r3, #10]
 800df24:	1c59      	adds	r1, r3, #1
 800df26:	b2c8      	uxtb	r0, r1
 800df28:	4930      	ldr	r1, [pc, #192]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df2a:	7288      	strb	r0, [r1, #10]
 800df2c:	4413      	add	r3, r2
 800df2e:	2200      	movs	r2, #0
 800df30:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800df32:	4b2e      	ldr	r3, [pc, #184]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df34:	68da      	ldr	r2, [r3, #12]
 800df36:	4b2d      	ldr	r3, [pc, #180]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df38:	7a9b      	ldrb	r3, [r3, #10]
 800df3a:	1c59      	adds	r1, r3, #1
 800df3c:	b2c8      	uxtb	r0, r1
 800df3e:	492b      	ldr	r1, [pc, #172]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df40:	7288      	strb	r0, [r1, #10]
 800df42:	4413      	add	r3, r2
 800df44:	2206      	movs	r2, #6
 800df46:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800df48:	4b28      	ldr	r3, [pc, #160]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df4a:	68da      	ldr	r2, [r3, #12]
 800df4c:	4b27      	ldr	r3, [pc, #156]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df4e:	7a9b      	ldrb	r3, [r3, #10]
 800df50:	1c59      	adds	r1, r3, #1
 800df52:	b2c8      	uxtb	r0, r1
 800df54:	4925      	ldr	r1, [pc, #148]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df56:	7288      	strb	r0, [r1, #10]
 800df58:	4413      	add	r3, r2
 800df5a:	2201      	movs	r2, #1
 800df5c:	701a      	strb	r2, [r3, #0]
        break;
 800df5e:	e251      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800df60:	4b22      	ldr	r3, [pc, #136]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df62:	2201      	movs	r2, #1
 800df64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800df68:	e24c      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800df6a:	4b21      	ldr	r3, [pc, #132]	; (800dff0 <LmhpComplianceOnMcpsIndication+0x34c>)
 800df6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df6e:	2101      	movs	r1, #1
 800df70:	2002      	movs	r0, #2
 800df72:	4798      	blx	r3
        break;
 800df74:	e246      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689a      	ldr	r2, [r3, #8]
 800df7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800df7e:	1c59      	adds	r1, r3, #1
 800df80:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800df84:	4413      	add	r3, r2
 800df86:	781a      	ldrb	r2, [r3, #0]
 800df88:	4b18      	ldr	r3, [pc, #96]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df8a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800df8e:	4b17      	ldr	r3, [pc, #92]	; (800dfec <LmhpComplianceOnMcpsIndication+0x348>)
 800df90:	2201      	movs	r2, #1
 800df92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800df96:	e235      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800df98:	2304      	movs	r3, #4
 800df9a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	689a      	ldr	r2, [r3, #8]
 800dfa0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfa4:	1c59      	adds	r1, r3, #1
 800dfa6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dfaa:	4413      	add	r3, r2
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	bf14      	ite	ne
 800dfb2:	2301      	movne	r3, #1
 800dfb4:	2300      	moveq	r3, #0
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800dfba:	f107 030c 	add.w	r3, r7, #12
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f004 fa08 	bl	80123d4 <LoRaMacMibSetRequestConfirm>
        break;
 800dfc4:	e21e      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	689a      	ldr	r2, [r3, #8]
 800dfca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800dfce:	1c59      	adds	r1, r3, #1
 800dfd0:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800dfd4:	4413      	add	r3, r2
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	bf14      	ite	ne
 800dfdc:	2301      	movne	r3, #1
 800dfde:	2300      	moveq	r3, #0
 800dfe0:	b2db      	uxtb	r3, r3
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f005 f824 	bl	8013030 <LoRaMacTestSetDutyCycleOn>
        break;
 800dfe8:	e20c      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
 800dfea:	bf00      	nop
 800dfec:	20000734 	.word	0x20000734
 800dff0:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800dff4:	4ba5      	ldr	r3, [pc, #660]	; (800e28c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800dff6:	f107 040c 	add.w	r4, r7, #12
 800dffa:	461d      	mov	r5, r3
 800dffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e004:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e008:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e014:	1c59      	adds	r1, r3, #1
 800e016:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e01a:	4413      	add	r3, r2
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800e022:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e026:	2b0a      	cmp	r3, #10
 800e028:	f200 81e5 	bhi.w	800e3f6 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800e02c:	4b98      	ldr	r3, [pc, #608]	; (800e290 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 81df 	beq.w	800e3f6 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800e038:	4b95      	ldr	r3, [pc, #596]	; (800e290 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	685a      	ldr	r2, [r3, #4]
 800e03e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	3390      	adds	r3, #144	; 0x90
 800e046:	443b      	add	r3, r7
 800e048:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800e04c:	4618      	mov	r0, r3
 800e04e:	4790      	blx	r2
            }
        }
        break;
 800e050:	e1d1      	b.n	800e3f6 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	689a      	ldr	r2, [r3, #8]
 800e056:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e05a:	1c59      	adds	r1, r3, #1
 800e05c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e060:	4413      	add	r3, r2
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800e068:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d004      	beq.n	800e07a <LmhpComplianceOnMcpsIndication+0x3d6>
 800e070:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e074:	2b02      	cmp	r3, #2
 800e076:	f040 81c0 	bne.w	800e3fa <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e07a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e07e:	2b01      	cmp	r3, #1
 800e080:	bf14      	ite	ne
 800e082:	2301      	movne	r3, #1
 800e084:	2300      	moveq	r3, #0
 800e086:	b2db      	uxtb	r3, r3
 800e088:	461a      	mov	r2, r3
 800e08a:	4b82      	ldr	r3, [pc, #520]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e08c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800e08e:	4b80      	ldr	r3, [pc, #512]	; (800e290 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	689b      	ldr	r3, [r3, #8]
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 81b0 	beq.w	800e3fa <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800e09a:	4b7d      	ldr	r3, [pc, #500]	; (800e290 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	4a7c      	ldr	r2, [pc, #496]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0a2:	7a12      	ldrb	r2, [r2, #8]
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	4798      	blx	r3
            }
        }
        break;
 800e0a8:	e1a7      	b.n	800e3fa <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800e0aa:	4b7a      	ldr	r3, [pc, #488]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0ac:	68da      	ldr	r2, [r3, #12]
 800e0ae:	4b79      	ldr	r3, [pc, #484]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0b0:	7a9b      	ldrb	r3, [r3, #10]
 800e0b2:	1c59      	adds	r1, r3, #1
 800e0b4:	b2c8      	uxtb	r0, r1
 800e0b6:	4977      	ldr	r1, [pc, #476]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0b8:	7288      	strb	r0, [r1, #10]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	2208      	movs	r2, #8
 800e0be:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800e0c6:	e019      	b.n	800e0fc <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	689a      	ldr	r2, [r3, #8]
 800e0cc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e0d0:	1c59      	adds	r1, r3, #1
 800e0d2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e0d6:	4413      	add	r3, r2
 800e0d8:	781a      	ldrb	r2, [r3, #0]
 800e0da:	4b6e      	ldr	r3, [pc, #440]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0dc:	68d9      	ldr	r1, [r3, #12]
 800e0de:	4b6d      	ldr	r3, [pc, #436]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0e0:	7a9b      	ldrb	r3, [r3, #10]
 800e0e2:	1c58      	adds	r0, r3, #1
 800e0e4:	b2c4      	uxtb	r4, r0
 800e0e6:	486b      	ldr	r0, [pc, #428]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0e8:	7284      	strb	r4, [r0, #10]
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3201      	adds	r2, #1
 800e0ee:	b2d2      	uxtb	r2, r2
 800e0f0:	701a      	strb	r2, [r3, #0]
             i++ )
 800e0f2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e0fc:	4b65      	ldr	r3, [pc, #404]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e0fe:	7a5a      	ldrb	r2, [r3, #9]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	7b1b      	ldrb	r3, [r3, #12]
 800e104:	4293      	cmp	r3, r2
 800e106:	bf28      	it	cs
 800e108:	4613      	movcs	r3, r2
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800e110:	429a      	cmp	r2, r3
 800e112:	d3d9      	bcc.n	800e0c8 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800e114:	e176      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800e116:	4b5f      	ldr	r3, [pc, #380]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e118:	68da      	ldr	r2, [r3, #12]
 800e11a:	4b5e      	ldr	r3, [pc, #376]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e11c:	7a9b      	ldrb	r3, [r3, #10]
 800e11e:	1c59      	adds	r1, r3, #1
 800e120:	b2c8      	uxtb	r0, r1
 800e122:	495c      	ldr	r1, [pc, #368]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e124:	7288      	strb	r0, [r1, #10]
 800e126:	4413      	add	r3, r2
 800e128:	2209      	movs	r2, #9
 800e12a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e12c:	4b59      	ldr	r3, [pc, #356]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e12e:	8a18      	ldrh	r0, [r3, #16]
 800e130:	4b58      	ldr	r3, [pc, #352]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e132:	68da      	ldr	r2, [r3, #12]
 800e134:	4b57      	ldr	r3, [pc, #348]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e136:	7a9b      	ldrb	r3, [r3, #10]
 800e138:	1c59      	adds	r1, r3, #1
 800e13a:	b2cc      	uxtb	r4, r1
 800e13c:	4955      	ldr	r1, [pc, #340]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e13e:	728c      	strb	r4, [r1, #10]
 800e140:	4413      	add	r3, r2
 800e142:	b2c2      	uxtb	r2, r0
 800e144:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e146:	4b53      	ldr	r3, [pc, #332]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e148:	8a1b      	ldrh	r3, [r3, #16]
 800e14a:	0a1b      	lsrs	r3, r3, #8
 800e14c:	b298      	uxth	r0, r3
 800e14e:	4b51      	ldr	r3, [pc, #324]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e150:	68da      	ldr	r2, [r3, #12]
 800e152:	4b50      	ldr	r3, [pc, #320]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e154:	7a9b      	ldrb	r3, [r3, #10]
 800e156:	1c59      	adds	r1, r3, #1
 800e158:	b2cc      	uxtb	r4, r1
 800e15a:	494e      	ldr	r1, [pc, #312]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e15c:	728c      	strb	r4, [r1, #10]
 800e15e:	4413      	add	r3, r2
 800e160:	b2c2      	uxtb	r2, r0
 800e162:	701a      	strb	r2, [r3, #0]
        break;
 800e164:	e14e      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800e166:	4b4b      	ldr	r3, [pc, #300]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e168:	2200      	movs	r2, #0
 800e16a:	821a      	strh	r2, [r3, #16]
        break;
 800e16c:	e14a      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800e16e:	2304      	movs	r3, #4
 800e170:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800e174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e178:	4618      	mov	r0, r3
 800e17a:	f004 fc9b 	bl	8012ab4 <LoRaMacMlmeRequest>
        break;
 800e17e:	e141      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800e180:	4b45      	ldr	r3, [pc, #276]	; (800e298 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	4798      	blx	r3
        break;
 800e186:	e13d      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	689a      	ldr	r2, [r3, #8]
 800e18c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e190:	1c59      	adds	r1, r3, #1
 800e192:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e196:	4413      	add	r3, r2
 800e198:	781a      	ldrb	r2, [r3, #0]
 800e19a:	4b3e      	ldr	r3, [pc, #248]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e19c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e19e:	4b3c      	ldr	r3, [pc, #240]	; (800e290 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 812a 	beq.w	800e3fe <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e1aa:	4b39      	ldr	r3, [pc, #228]	; (800e290 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	4a38      	ldr	r2, [pc, #224]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e1b2:	7d52      	ldrb	r2, [r2, #21]
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	4798      	blx	r3
        }
        break;
 800e1b8:	e121      	b.n	800e3fe <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	7b1b      	ldrb	r3, [r3, #12]
 800e1be:	2b07      	cmp	r3, #7
 800e1c0:	f040 811f 	bne.w	800e402 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800e1c4:	2305      	movs	r3, #5
 800e1c6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	689a      	ldr	r2, [r3, #8]
 800e1ce:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e1d2:	4413      	add	r3, r2
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	b21a      	sxth	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6899      	ldr	r1, [r3, #8]
 800e1dc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	440b      	add	r3, r1
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	021b      	lsls	r3, r3, #8
 800e1e8:	b21b      	sxth	r3, r3
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	b21b      	sxth	r3, r3
 800e1ee:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800e1f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800e1f4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e1f8:	3302      	adds	r3, #2
 800e1fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	689a      	ldr	r2, [r3, #8]
 800e202:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e206:	4413      	add	r3, r2
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	4619      	mov	r1, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e214:	3301      	adds	r3, #1
 800e216:	4413      	add	r3, r2
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	021b      	lsls	r3, r3, #8
 800e21c:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6899      	ldr	r1, [r3, #8]
 800e224:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e228:	3302      	adds	r3, #2
 800e22a:	440b      	add	r3, r1
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e230:	4313      	orrs	r3, r2
 800e232:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e234:	2364      	movs	r3, #100	; 0x64
 800e236:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800e23a:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800e23c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e240:	3303      	adds	r3, #3
 800e242:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	689a      	ldr	r2, [r3, #8]
 800e24a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e24e:	1c59      	adds	r1, r3, #1
 800e250:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e254:	4413      	add	r3, r2
 800e256:	781b      	ldrb	r3, [r3, #0]
 800e258:	b25b      	sxtb	r3, r3
 800e25a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800e25e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e262:	4618      	mov	r0, r3
 800e264:	f004 fc26 	bl	8012ab4 <LoRaMacMlmeRequest>
        }
        break;
 800e268:	e0cb      	b.n	800e402 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e26a:	2339      	movs	r3, #57	; 0x39
 800e26c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800e270:	2300      	movs	r3, #0
 800e272:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e276:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e27a:	4618      	mov	r0, r3
 800e27c:	f004 f8aa 	bl	80123d4 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800e280:	4b04      	ldr	r3, [pc, #16]	; (800e294 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e282:	2201      	movs	r2, #1
 800e284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800e288:	e0bc      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
 800e28a:	bf00      	nop
 800e28c:	0801e7ec 	.word	0x0801e7ec
 800e290:	2000076c 	.word	0x2000076c
 800e294:	20000734 	.word	0x20000734
 800e298:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800e29c:	232a      	movs	r3, #42	; 0x2a
 800e29e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800e2a0:	f107 030c 	add.w	r3, r7, #12
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f003 feef 	bl	8012088 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e2b2:	4b62      	ldr	r3, [pc, #392]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2b4:	68da      	ldr	r2, [r3, #12]
 800e2b6:	4b61      	ldr	r3, [pc, #388]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2b8:	7a9b      	ldrb	r3, [r3, #10]
 800e2ba:	1c59      	adds	r1, r3, #1
 800e2bc:	b2c8      	uxtb	r0, r1
 800e2be:	495f      	ldr	r1, [pc, #380]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2c0:	7288      	strb	r0, [r1, #10]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	227f      	movs	r2, #127	; 0x7f
 800e2c6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e2c8:	4b5d      	ldr	r3, [pc, #372]	; (800e440 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	4b5b      	ldr	r3, [pc, #364]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2ce:	68d9      	ldr	r1, [r3, #12]
 800e2d0:	4b5a      	ldr	r3, [pc, #360]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2d2:	7a9b      	ldrb	r3, [r3, #10]
 800e2d4:	1c58      	adds	r0, r3, #1
 800e2d6:	b2c4      	uxtb	r4, r0
 800e2d8:	4858      	ldr	r0, [pc, #352]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2da:	7284      	strb	r4, [r0, #10]
 800e2dc:	440b      	add	r3, r1
 800e2de:	78d2      	ldrb	r2, [r2, #3]
 800e2e0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e2e2:	4b57      	ldr	r3, [pc, #348]	; (800e440 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	4b55      	ldr	r3, [pc, #340]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2e8:	68d9      	ldr	r1, [r3, #12]
 800e2ea:	4b54      	ldr	r3, [pc, #336]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2ec:	7a9b      	ldrb	r3, [r3, #10]
 800e2ee:	1c58      	adds	r0, r3, #1
 800e2f0:	b2c4      	uxtb	r4, r0
 800e2f2:	4852      	ldr	r0, [pc, #328]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e2f4:	7284      	strb	r4, [r0, #10]
 800e2f6:	440b      	add	r3, r1
 800e2f8:	7892      	ldrb	r2, [r2, #2]
 800e2fa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e2fc:	4b50      	ldr	r3, [pc, #320]	; (800e440 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	4b4e      	ldr	r3, [pc, #312]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e302:	68d9      	ldr	r1, [r3, #12]
 800e304:	4b4d      	ldr	r3, [pc, #308]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e306:	7a9b      	ldrb	r3, [r3, #10]
 800e308:	1c58      	adds	r0, r3, #1
 800e30a:	b2c4      	uxtb	r4, r0
 800e30c:	484b      	ldr	r0, [pc, #300]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e30e:	7284      	strb	r4, [r0, #10]
 800e310:	440b      	add	r3, r1
 800e312:	7852      	ldrb	r2, [r2, #1]
 800e314:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e316:	4b4a      	ldr	r3, [pc, #296]	; (800e440 <LmhpComplianceOnMcpsIndication+0x79c>)
 800e318:	681a      	ldr	r2, [r3, #0]
 800e31a:	4b48      	ldr	r3, [pc, #288]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e31c:	68d9      	ldr	r1, [r3, #12]
 800e31e:	4b47      	ldr	r3, [pc, #284]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e320:	7a9b      	ldrb	r3, [r3, #10]
 800e322:	1c58      	adds	r0, r3, #1
 800e324:	b2c4      	uxtb	r4, r0
 800e326:	4845      	ldr	r0, [pc, #276]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e328:	7284      	strb	r4, [r0, #10]
 800e32a:	440b      	add	r3, r1
 800e32c:	7812      	ldrb	r2, [r2, #0]
 800e32e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e330:	4b42      	ldr	r3, [pc, #264]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e332:	68da      	ldr	r2, [r3, #12]
 800e334:	4b41      	ldr	r3, [pc, #260]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e336:	7a9b      	ldrb	r3, [r3, #10]
 800e338:	1c59      	adds	r1, r3, #1
 800e33a:	b2c8      	uxtb	r0, r1
 800e33c:	493f      	ldr	r1, [pc, #252]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e33e:	7288      	strb	r0, [r1, #10]
 800e340:	4413      	add	r3, r2
 800e342:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e346:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e348:	4b3c      	ldr	r3, [pc, #240]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e34a:	68da      	ldr	r2, [r3, #12]
 800e34c:	4b3b      	ldr	r3, [pc, #236]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e34e:	7a9b      	ldrb	r3, [r3, #10]
 800e350:	1c59      	adds	r1, r3, #1
 800e352:	b2c8      	uxtb	r0, r1
 800e354:	4939      	ldr	r1, [pc, #228]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e356:	7288      	strb	r0, [r1, #10]
 800e358:	4413      	add	r3, r2
 800e35a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e35e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e360:	4b36      	ldr	r3, [pc, #216]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e362:	68da      	ldr	r2, [r3, #12]
 800e364:	4b35      	ldr	r3, [pc, #212]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e366:	7a9b      	ldrb	r3, [r3, #10]
 800e368:	1c59      	adds	r1, r3, #1
 800e36a:	b2c8      	uxtb	r0, r1
 800e36c:	4933      	ldr	r1, [pc, #204]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e36e:	7288      	strb	r0, [r1, #10]
 800e370:	4413      	add	r3, r2
 800e372:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800e376:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e378:	4b30      	ldr	r3, [pc, #192]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e37a:	68da      	ldr	r2, [r3, #12]
 800e37c:	4b2f      	ldr	r3, [pc, #188]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e37e:	7a9b      	ldrb	r3, [r3, #10]
 800e380:	1c59      	adds	r1, r3, #1
 800e382:	b2c8      	uxtb	r0, r1
 800e384:	492d      	ldr	r1, [pc, #180]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e386:	7288      	strb	r0, [r1, #10]
 800e388:	4413      	add	r3, r2
 800e38a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800e38e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e390:	4b2a      	ldr	r3, [pc, #168]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e392:	68da      	ldr	r2, [r3, #12]
 800e394:	4b29      	ldr	r3, [pc, #164]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e396:	7a9b      	ldrb	r3, [r3, #10]
 800e398:	1c59      	adds	r1, r3, #1
 800e39a:	b2c8      	uxtb	r0, r1
 800e39c:	4927      	ldr	r1, [pc, #156]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e39e:	7288      	strb	r0, [r1, #10]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e3a6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e3a8:	4b24      	ldr	r3, [pc, #144]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3aa:	68da      	ldr	r2, [r3, #12]
 800e3ac:	4b23      	ldr	r3, [pc, #140]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3ae:	7a9b      	ldrb	r3, [r3, #10]
 800e3b0:	1c59      	adds	r1, r3, #1
 800e3b2:	b2c8      	uxtb	r0, r1
 800e3b4:	4921      	ldr	r1, [pc, #132]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3b6:	7288      	strb	r0, [r1, #10]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800e3be:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e3c0:	4b1e      	ldr	r3, [pc, #120]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3c2:	68da      	ldr	r2, [r3, #12]
 800e3c4:	4b1d      	ldr	r3, [pc, #116]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3c6:	7a9b      	ldrb	r3, [r3, #10]
 800e3c8:	1c59      	adds	r1, r3, #1
 800e3ca:	b2c8      	uxtb	r0, r1
 800e3cc:	491b      	ldr	r1, [pc, #108]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3ce:	7288      	strb	r0, [r1, #10]
 800e3d0:	4413      	add	r3, r2
 800e3d2:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e3d6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e3d8:	4b18      	ldr	r3, [pc, #96]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3da:	68da      	ldr	r2, [r3, #12]
 800e3dc:	4b17      	ldr	r3, [pc, #92]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3de:	7a9b      	ldrb	r3, [r3, #10]
 800e3e0:	1c59      	adds	r1, r3, #1
 800e3e2:	b2c8      	uxtb	r0, r1
 800e3e4:	4915      	ldr	r1, [pc, #84]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e3e6:	7288      	strb	r0, [r1, #10]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e3ee:	701a      	strb	r2, [r3, #0]
        break;
 800e3f0:	e008      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800e3f2:	bf00      	nop
 800e3f4:	e006      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e3f6:	bf00      	nop
 800e3f8:	e004      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e3fa:	bf00      	nop
 800e3fc:	e002      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e3fe:	bf00      	nop
 800e400:	e000      	b.n	800e404 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e402:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e404:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e406:	7a9b      	ldrb	r3, [r3, #10]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d008      	beq.n	800e41e <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800e40c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e410:	480c      	ldr	r0, [pc, #48]	; (800e444 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e412:	f00e fd1f 	bl	801ce54 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800e416:	480b      	ldr	r0, [pc, #44]	; (800e444 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e418:	f00e fc3e 	bl	801cc98 <UTIL_TIMER_Start>
 800e41c:	e00b      	b.n	800e436 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800e41e:	4809      	ldr	r0, [pc, #36]	; (800e444 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e420:	f00e fca8 	bl	801cd74 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e424:	4b05      	ldr	r3, [pc, #20]	; (800e43c <LmhpComplianceOnMcpsIndication+0x798>)
 800e426:	2200      	movs	r2, #0
 800e428:	705a      	strb	r2, [r3, #1]
 800e42a:	e004      	b.n	800e436 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e42c:	bf00      	nop
 800e42e:	e002      	b.n	800e436 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e430:	bf00      	nop
 800e432:	e000      	b.n	800e436 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e434:	bf00      	nop
    }
}
 800e436:	3790      	adds	r7, #144	; 0x90
 800e438:	46bd      	mov	sp, r7
 800e43a:	bdb0      	pop	{r4, r5, r7, pc}
 800e43c:	20000734 	.word	0x20000734
 800e440:	2000076c 	.word	0x2000076c
 800e444:	20000770 	.word	0x20000770

0800e448 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e448:	b480      	push	{r7}
 800e44a:	b083      	sub	sp, #12
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800e450:	bf00      	nop
    }
}
 800e452:	bf00      	nop
 800e454:	370c      	adds	r7, #12
 800e456:	46bd      	mov	sp, r7
 800e458:	bc80      	pop	{r7}
 800e45a:	4770      	bx	lr

0800e45c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e464:	4b05      	ldr	r3, [pc, #20]	; (800e47c <LmhpComplianceOnMlmeIndication+0x20>)
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	f083 0301 	eor.w	r3, r3, #1
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
    {
        return;
 800e470:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	bc80      	pop	{r7}
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	20000734 	.word	0x20000734

0800e480 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b082      	sub	sp, #8
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800e488:	4b04      	ldr	r3, [pc, #16]	; (800e49c <OnProcessTimer+0x1c>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800e48e:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <OnProcessTimer+0x20>)
 800e490:	695b      	ldr	r3, [r3, #20]
 800e492:	4798      	blx	r3
}
 800e494:	bf00      	nop
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	20000734 	.word	0x20000734
 800e4a0:	200000e8 	.word	0x200000e8

0800e4a4 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e4a4:	b590      	push	{r4, r7, lr}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e4aa:	f00e fd7d 	bl	801cfa8 <UTIL_TIMER_GetCurrentTime>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	4a16      	ldr	r2, [pc, #88]	; (800e50c <OnRadioTxDone+0x68>)
 800e4b2:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e4b4:	4c16      	ldr	r4, [pc, #88]	; (800e510 <OnRadioTxDone+0x6c>)
 800e4b6:	463b      	mov	r3, r7
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f00d fff7 	bl	801c4ac <SysTimeGet>
 800e4be:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e4c2:	463a      	mov	r2, r7
 800e4c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4c8:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e4cc:	4a11      	ldr	r2, [pc, #68]	; (800e514 <OnRadioTxDone+0x70>)
 800e4ce:	7813      	ldrb	r3, [r2, #0]
 800e4d0:	f043 0320 	orr.w	r3, r3, #32
 800e4d4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e4d6:	4b0e      	ldr	r3, [pc, #56]	; (800e510 <OnRadioTxDone+0x6c>)
 800e4d8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00a      	beq.n	800e4f6 <OnRadioTxDone+0x52>
 800e4e0:	4b0b      	ldr	r3, [pc, #44]	; (800e510 <OnRadioTxDone+0x6c>)
 800e4e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e4e6:	691b      	ldr	r3, [r3, #16]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d004      	beq.n	800e4f6 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e4ec:	4b08      	ldr	r3, [pc, #32]	; (800e510 <OnRadioTxDone+0x6c>)
 800e4ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e4f2:	691b      	ldr	r3, [r3, #16]
 800e4f4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800e4f6:	4b08      	ldr	r3, [pc, #32]	; (800e518 <OnRadioTxDone+0x74>)
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	2002      	movs	r0, #2
 800e4fe:	f00e fe43 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800e502:	bf00      	nop
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	bd90      	pop	{r4, r7, pc}
 800e50a:	bf00      	nop
 800e50c:	20001854 	.word	0x20001854
 800e510:	20000788 	.word	0x20000788
 800e514:	20001850 	.word	0x20001850
 800e518:	0801e818 	.word	0x0801e818

0800e51c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	4608      	mov	r0, r1
 800e526:	4611      	mov	r1, r2
 800e528:	461a      	mov	r2, r3
 800e52a:	4603      	mov	r3, r0
 800e52c:	817b      	strh	r3, [r7, #10]
 800e52e:	460b      	mov	r3, r1
 800e530:	813b      	strh	r3, [r7, #8]
 800e532:	4613      	mov	r3, r2
 800e534:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800e536:	f00e fd37 	bl	801cfa8 <UTIL_TIMER_GetCurrentTime>
 800e53a:	4603      	mov	r3, r0
 800e53c:	4a18      	ldr	r2, [pc, #96]	; (800e5a0 <OnRadioRxDone+0x84>)
 800e53e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800e540:	4a17      	ldr	r2, [pc, #92]	; (800e5a0 <OnRadioRxDone+0x84>)
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800e546:	4a16      	ldr	r2, [pc, #88]	; (800e5a0 <OnRadioRxDone+0x84>)
 800e548:	897b      	ldrh	r3, [r7, #10]
 800e54a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800e54c:	4a14      	ldr	r2, [pc, #80]	; (800e5a0 <OnRadioRxDone+0x84>)
 800e54e:	893b      	ldrh	r3, [r7, #8]
 800e550:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800e552:	4a13      	ldr	r2, [pc, #76]	; (800e5a0 <OnRadioRxDone+0x84>)
 800e554:	79fb      	ldrb	r3, [r7, #7]
 800e556:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800e558:	4a12      	ldr	r2, [pc, #72]	; (800e5a4 <OnRadioRxDone+0x88>)
 800e55a:	7813      	ldrb	r3, [r2, #0]
 800e55c:	f043 0310 	orr.w	r3, r3, #16
 800e560:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800e562:	4a10      	ldr	r2, [pc, #64]	; (800e5a4 <OnRadioRxDone+0x88>)
 800e564:	7813      	ldrb	r3, [r2, #0]
 800e566:	f043 0301 	orr.w	r3, r3, #1
 800e56a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e56c:	4b0e      	ldr	r3, [pc, #56]	; (800e5a8 <OnRadioRxDone+0x8c>)
 800e56e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <OnRadioRxDone+0x70>
 800e576:	4b0c      	ldr	r3, [pc, #48]	; (800e5a8 <OnRadioRxDone+0x8c>)
 800e578:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d004      	beq.n	800e58c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e582:	4b09      	ldr	r3, [pc, #36]	; (800e5a8 <OnRadioRxDone+0x8c>)
 800e584:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800e58c:	4b07      	ldr	r3, [pc, #28]	; (800e5ac <OnRadioRxDone+0x90>)
 800e58e:	2201      	movs	r2, #1
 800e590:	2100      	movs	r1, #0
 800e592:	2002      	movs	r0, #2
 800e594:	f00e fdf8 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800e598:	bf00      	nop
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	20001858 	.word	0x20001858
 800e5a4:	20001850 	.word	0x20001850
 800e5a8:	20000788 	.word	0x20000788
 800e5ac:	0801e828 	.word	0x0801e828

0800e5b0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800e5b4:	4a0e      	ldr	r2, [pc, #56]	; (800e5f0 <OnRadioTxTimeout+0x40>)
 800e5b6:	7813      	ldrb	r3, [r2, #0]
 800e5b8:	f043 0308 	orr.w	r3, r3, #8
 800e5bc:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e5be:	4b0d      	ldr	r3, [pc, #52]	; (800e5f4 <OnRadioTxTimeout+0x44>)
 800e5c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d00a      	beq.n	800e5de <OnRadioTxTimeout+0x2e>
 800e5c8:	4b0a      	ldr	r3, [pc, #40]	; (800e5f4 <OnRadioTxTimeout+0x44>)
 800e5ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e5ce:	691b      	ldr	r3, [r3, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d004      	beq.n	800e5de <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e5d4:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <OnRadioTxTimeout+0x44>)
 800e5d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800e5de:	4b06      	ldr	r3, [pc, #24]	; (800e5f8 <OnRadioTxTimeout+0x48>)
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	2002      	movs	r0, #2
 800e5e6:	f00e fdcf 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800e5ea:	bf00      	nop
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	20001850 	.word	0x20001850
 800e5f4:	20000788 	.word	0x20000788
 800e5f8:	0801e838 	.word	0x0801e838

0800e5fc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800e600:	4a0b      	ldr	r2, [pc, #44]	; (800e630 <OnRadioRxError+0x34>)
 800e602:	7813      	ldrb	r3, [r2, #0]
 800e604:	f043 0304 	orr.w	r3, r3, #4
 800e608:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e60a:	4b0a      	ldr	r3, [pc, #40]	; (800e634 <OnRadioRxError+0x38>)
 800e60c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00a      	beq.n	800e62a <OnRadioRxError+0x2e>
 800e614:	4b07      	ldr	r3, [pc, #28]	; (800e634 <OnRadioRxError+0x38>)
 800e616:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e61a:	691b      	ldr	r3, [r3, #16]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d004      	beq.n	800e62a <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e620:	4b04      	ldr	r3, [pc, #16]	; (800e634 <OnRadioRxError+0x38>)
 800e622:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	4798      	blx	r3
    }
}
 800e62a:	bf00      	nop
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	20001850 	.word	0x20001850
 800e634:	20000788 	.word	0x20000788

0800e638 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800e63c:	4a0e      	ldr	r2, [pc, #56]	; (800e678 <OnRadioRxTimeout+0x40>)
 800e63e:	7813      	ldrb	r3, [r2, #0]
 800e640:	f043 0302 	orr.w	r3, r3, #2
 800e644:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e646:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <OnRadioRxTimeout+0x44>)
 800e648:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d00a      	beq.n	800e666 <OnRadioRxTimeout+0x2e>
 800e650:	4b0a      	ldr	r3, [pc, #40]	; (800e67c <OnRadioRxTimeout+0x44>)
 800e652:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d004      	beq.n	800e666 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800e65c:	4b07      	ldr	r3, [pc, #28]	; (800e67c <OnRadioRxTimeout+0x44>)
 800e65e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800e666:	4b06      	ldr	r3, [pc, #24]	; (800e680 <OnRadioRxTimeout+0x48>)
 800e668:	2201      	movs	r2, #1
 800e66a:	2100      	movs	r1, #0
 800e66c:	2002      	movs	r0, #2
 800e66e:	f00e fd8b 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 800e672:	bf00      	nop
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20001850 	.word	0x20001850
 800e67c:	20000788 	.word	0x20000788
 800e680:	0801e848 	.word	0x0801e848

0800e684 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800e684:	b480      	push	{r7}
 800e686:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e688:	4b08      	ldr	r3, [pc, #32]	; (800e6ac <UpdateRxSlotIdleState+0x28>)
 800e68a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e68e:	2b02      	cmp	r3, #2
 800e690:	d004      	beq.n	800e69c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800e692:	4b07      	ldr	r3, [pc, #28]	; (800e6b0 <UpdateRxSlotIdleState+0x2c>)
 800e694:	2206      	movs	r2, #6
 800e696:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800e69a:	e003      	b.n	800e6a4 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e69c:	4b04      	ldr	r3, [pc, #16]	; (800e6b0 <UpdateRxSlotIdleState+0x2c>)
 800e69e:	2202      	movs	r2, #2
 800e6a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800e6a4:	bf00      	nop
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bc80      	pop	{r7}
 800e6aa:	4770      	bx	lr
 800e6ac:	20000ca8 	.word	0x20000ca8
 800e6b0:	20000788 	.word	0x20000788

0800e6b4 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08e      	sub	sp, #56	; 0x38
 800e6b8:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e6ba:	4b3e      	ldr	r3, [pc, #248]	; (800e7b4 <ProcessRadioTxDone+0x100>)
 800e6bc:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d002      	beq.n	800e6ca <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800e6c4:	4b3c      	ldr	r3, [pc, #240]	; (800e7b8 <ProcessRadioTxDone+0x104>)
 800e6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c8:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800e6ca:	4b3c      	ldr	r3, [pc, #240]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e6cc:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	483b      	ldr	r0, [pc, #236]	; (800e7c0 <ProcessRadioTxDone+0x10c>)
 800e6d4:	f00e fbbe 	bl	801ce54 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800e6d8:	4839      	ldr	r0, [pc, #228]	; (800e7c0 <ProcessRadioTxDone+0x10c>)
 800e6da:	f00e fadd 	bl	801cc98 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800e6de:	4b37      	ldr	r3, [pc, #220]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e6e0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	4837      	ldr	r0, [pc, #220]	; (800e7c4 <ProcessRadioTxDone+0x110>)
 800e6e8:	f00e fbb4 	bl	801ce54 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800e6ec:	4835      	ldr	r0, [pc, #212]	; (800e7c4 <ProcessRadioTxDone+0x110>)
 800e6ee:	f00e fad3 	bl	801cc98 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800e6f2:	4b32      	ldr	r3, [pc, #200]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e6f4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01a      	beq.n	800e732 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800e6fc:	2315      	movs	r3, #21
 800e6fe:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e702:	4b2c      	ldr	r3, [pc, #176]	; (800e7b4 <ProcessRadioTxDone+0x100>)
 800e704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e708:	f107 0220 	add.w	r2, r7, #32
 800e70c:	4611      	mov	r1, r2
 800e70e:	4618      	mov	r0, r3
 800e710:	f006 fd25 	bl	801515e <RegionGetPhyParam>
 800e714:	4603      	mov	r3, r0
 800e716:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800e718:	4b28      	ldr	r3, [pc, #160]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e71a:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800e71e:	69fb      	ldr	r3, [r7, #28]
 800e720:	4413      	add	r3, r2
 800e722:	4619      	mov	r1, r3
 800e724:	4828      	ldr	r0, [pc, #160]	; (800e7c8 <ProcessRadioTxDone+0x114>)
 800e726:	f00e fb95 	bl	801ce54 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800e72a:	4827      	ldr	r0, [pc, #156]	; (800e7c8 <ProcessRadioTxDone+0x114>)
 800e72c:	f00e fab4 	bl	801cc98 <UTIL_TIMER_Start>
 800e730:	e003      	b.n	800e73a <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e732:	4b22      	ldr	r3, [pc, #136]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e734:	2200      	movs	r2, #0
 800e736:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800e73a:	4b24      	ldr	r3, [pc, #144]	; (800e7cc <ProcessRadioTxDone+0x118>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	4a1d      	ldr	r2, [pc, #116]	; (800e7b4 <ProcessRadioTxDone+0x100>)
 800e740:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800e742:	4b1e      	ldr	r3, [pc, #120]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e744:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800e748:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800e74a:	4b20      	ldr	r3, [pc, #128]	; (800e7cc <ProcessRadioTxDone+0x118>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800e750:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e754:	4618      	mov	r0, r3
 800e756:	f00d fee1 	bl	801c51c <SysTimeGetMcuTime>
 800e75a:	4638      	mov	r0, r7
 800e75c:	4b15      	ldr	r3, [pc, #84]	; (800e7b4 <ProcessRadioTxDone+0x100>)
 800e75e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800e762:	9200      	str	r2, [sp, #0]
 800e764:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800e768:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e76c:	ca06      	ldmia	r2, {r1, r2}
 800e76e:	f00d fe36 	bl	801c3de <SysTimeSub>
 800e772:	f107 0314 	add.w	r3, r7, #20
 800e776:	463a      	mov	r2, r7
 800e778:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e77c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800e780:	4b0e      	ldr	r3, [pc, #56]	; (800e7bc <ProcessRadioTxDone+0x108>)
 800e782:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800e786:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800e788:	2301      	movs	r3, #1
 800e78a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800e78c:	4b09      	ldr	r3, [pc, #36]	; (800e7b4 <ProcessRadioTxDone+0x100>)
 800e78e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e792:	2b00      	cmp	r3, #0
 800e794:	d101      	bne.n	800e79a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800e796:	2300      	movs	r3, #0
 800e798:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800e79a:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <ProcessRadioTxDone+0x100>)
 800e79c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7a0:	f107 0208 	add.w	r2, r7, #8
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f006 fcfa 	bl	80151a0 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800e7ac:	bf00      	nop
 800e7ae:	3730      	adds	r7, #48	; 0x30
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	20000ca8 	.word	0x20000ca8
 800e7b8:	0801eef8 	.word	0x0801eef8
 800e7bc:	20000788 	.word	0x20000788
 800e7c0:	20000b08 	.word	0x20000b08
 800e7c4:	20000b20 	.word	0x20000b20
 800e7c8:	20000b8c 	.word	0x20000b8c
 800e7cc:	20001854 	.word	0x20001854

0800e7d0 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800e7d4:	4b10      	ldr	r3, [pc, #64]	; (800e818 <PrepareRxDoneAbort+0x48>)
 800e7d6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e7da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7de:	4a0e      	ldr	r2, [pc, #56]	; (800e818 <PrepareRxDoneAbort+0x48>)
 800e7e0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <PrepareRxDoneAbort+0x48>)
 800e7e6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d002      	beq.n	800e7f4 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	f001 f99c 	bl	800fb2c <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800e7f4:	4a08      	ldr	r2, [pc, #32]	; (800e818 <PrepareRxDoneAbort+0x48>)
 800e7f6:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e7fa:	f043 0302 	orr.w	r3, r3, #2
 800e7fe:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e802:	4a05      	ldr	r2, [pc, #20]	; (800e818 <PrepareRxDoneAbort+0x48>)
 800e804:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e808:	f043 0320 	orr.w	r3, r3, #32
 800e80c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800e810:	f7ff ff38 	bl	800e684 <UpdateRxSlotIdleState>
}
 800e814:	bf00      	nop
 800e816:	bd80      	pop	{r7, pc}
 800e818:	20000788 	.word	0x20000788

0800e81c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800e81c:	b590      	push	{r4, r7, lr}
 800e81e:	b0a7      	sub	sp, #156	; 0x9c
 800e820:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800e822:	2312      	movs	r3, #18
 800e824:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800e828:	4bbd      	ldr	r3, [pc, #756]	; (800eb20 <ProcessRadioRxDone+0x304>)
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800e830:	4bbb      	ldr	r3, [pc, #748]	; (800eb20 <ProcessRadioRxDone+0x304>)
 800e832:	891b      	ldrh	r3, [r3, #8]
 800e834:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800e838:	4bb9      	ldr	r3, [pc, #740]	; (800eb20 <ProcessRadioRxDone+0x304>)
 800e83a:	895b      	ldrh	r3, [r3, #10]
 800e83c:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800e840:	4bb7      	ldr	r3, [pc, #732]	; (800eb20 <ProcessRadioRxDone+0x304>)
 800e842:	7b1b      	ldrb	r3, [r3, #12]
 800e844:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800e848:	2300      	movs	r3, #0
 800e84a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e852:	4bb4      	ldr	r3, [pc, #720]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800e854:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800e858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800e85c:	2300      	movs	r3, #0
 800e85e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e862:	2301      	movs	r3, #1
 800e864:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e868:	4aaf      	ldr	r2, [pc, #700]	; (800eb28 <ProcessRadioRxDone+0x30c>)
 800e86a:	7813      	ldrb	r3, [r2, #0]
 800e86c:	f36f 0300 	bfc	r3, #0, #1
 800e870:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800e872:	4bae      	ldr	r3, [pc, #696]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e874:	2200      	movs	r2, #0
 800e876:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800e87a:	4aac      	ldr	r2, [pc, #688]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e87c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800e880:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800e884:	4aa9      	ldr	r2, [pc, #676]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e88a:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e88e:	4ba7      	ldr	r3, [pc, #668]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e890:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800e894:	4ba5      	ldr	r3, [pc, #660]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e896:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800e89a:	4ba4      	ldr	r3, [pc, #656]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800e8a2:	4ba2      	ldr	r3, [pc, #648]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800e8aa:	4ba0      	ldr	r3, [pc, #640]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800e8b2:	4b9e      	ldr	r3, [pc, #632]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800e8ba:	4b9c      	ldr	r3, [pc, #624]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800e8c2:	4b9a      	ldr	r3, [pc, #616]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800e8ca:	4b98      	ldr	r3, [pc, #608]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e8d2:	4b96      	ldr	r3, [pc, #600]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8d4:	2200      	movs	r2, #0
 800e8d6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e8da:	4b94      	ldr	r3, [pc, #592]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800e8e2:	4b92      	ldr	r3, [pc, #584]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8e4:	2200      	movs	r2, #0
 800e8e6:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e8ea:	4b90      	ldr	r3, [pc, #576]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e8f2:	4b8e      	ldr	r3, [pc, #568]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800e8fa:	4b8d      	ldr	r3, [pc, #564]	; (800eb30 <ProcessRadioRxDone+0x314>)
 800e8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8fe:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e900:	4b8a      	ldr	r3, [pc, #552]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e902:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e906:	2b00      	cmp	r3, #0
 800e908:	d102      	bne.n	800e910 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e90a:	488a      	ldr	r0, [pc, #552]	; (800eb34 <ProcessRadioRxDone+0x318>)
 800e90c:	f00e fa32 	bl	801cd74 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e910:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e914:	4619      	mov	r1, r3
 800e916:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800e91a:	f004 fccf 	bl	80132bc <LoRaMacClassBRxBeacon>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00b      	beq.n	800e93c <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e924:	4a81      	ldr	r2, [pc, #516]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e926:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800e92a:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e92e:	4a7f      	ldr	r2, [pc, #508]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e930:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e934:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800e938:	f000 bc22 	b.w	800f180 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e93c:	4b79      	ldr	r3, [pc, #484]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800e93e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e942:	2b01      	cmp	r3, #1
 800e944:	d11e      	bne.n	800e984 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e946:	f004 fccc 	bl	80132e2 <LoRaMacClassBIsPingExpected>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00a      	beq.n	800e966 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e950:	2000      	movs	r0, #0
 800e952:	f004 fc7d 	bl	8013250 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e956:	2000      	movs	r0, #0
 800e958:	f004 fc9e 	bl	8013298 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e95c:	4b73      	ldr	r3, [pc, #460]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e95e:	2204      	movs	r2, #4
 800e960:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800e964:	e00e      	b.n	800e984 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e966:	f004 fcc3 	bl	80132f0 <LoRaMacClassBIsMulticastExpected>
 800e96a:	4603      	mov	r3, r0
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d009      	beq.n	800e984 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e970:	2000      	movs	r0, #0
 800e972:	f004 fc77 	bl	8013264 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e976:	2000      	movs	r0, #0
 800e978:	f004 fc97 	bl	80132aa <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e97c:	4b6b      	ldr	r3, [pc, #428]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e97e:	2205      	movs	r2, #5
 800e980:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800e984:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e988:	1c5a      	adds	r2, r3, #1
 800e98a:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800e98e:	461a      	mov	r2, r3
 800e990:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e994:	4413      	add	r3, r2
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800e99c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e9a0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	2b06      	cmp	r3, #6
 800e9aa:	f200 83bd 	bhi.w	800f128 <ProcessRadioRxDone+0x90c>
 800e9ae:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <ProcessRadioRxDone+0x198>)
 800e9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b4:	0800e9d1 	.word	0x0800e9d1
 800e9b8:	0800f129 	.word	0x0800f129
 800e9bc:	0800eb65 	.word	0x0800eb65
 800e9c0:	0800f129 	.word	0x0800f129
 800e9c4:	0800eb5d 	.word	0x0800eb5d
 800e9c8:	0800f129 	.word	0x0800f129
 800e9cc:	0800f0bb 	.word	0x0800f0bb
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e9d0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e9d4:	2b10      	cmp	r3, #16
 800e9d6:	d806      	bhi.n	800e9e6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9d8:	4b54      	ldr	r3, [pc, #336]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800e9da:	2201      	movs	r2, #1
 800e9dc:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e9e0:	f7ff fef6 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800e9e4:	e3cc      	b.n	800f180 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800e9e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e9ea:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800e9ec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e9f0:	b2db      	uxtb	r3, r3
 800e9f2:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e9f4:	4b4b      	ldr	r3, [pc, #300]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800e9f6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d006      	beq.n	800ea0c <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e9fe:	4b4b      	ldr	r3, [pc, #300]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800ea00:	2201      	movs	r2, #1
 800ea02:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ea06:	f7ff fee3 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800ea0a:	e3b9      	b.n	800f180 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ea0c:	f7fe f874 	bl	800caf8 <SecureElementGetJoinEui>
 800ea10:	4601      	mov	r1, r0
 800ea12:	f107 030c 	add.w	r3, r7, #12
 800ea16:	461a      	mov	r2, r3
 800ea18:	20ff      	movs	r0, #255	; 0xff
 800ea1a:	f005 fe1f 	bl	801465c <LoRaMacCryptoHandleJoinAccept>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ea24:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f040 8085 	bne.w	800eb38 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ea2e:	7d7b      	ldrb	r3, [r7, #21]
 800ea30:	461a      	mov	r2, r3
 800ea32:	4b3c      	ldr	r3, [pc, #240]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea34:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ea38:	4b3a      	ldr	r3, [pc, #232]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea3a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ea3e:	7dbb      	ldrb	r3, [r7, #22]
 800ea40:	021b      	lsls	r3, r3, #8
 800ea42:	4313      	orrs	r3, r2
 800ea44:	4a37      	ldr	r2, [pc, #220]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea46:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ea4a:	4b36      	ldr	r3, [pc, #216]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea4c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	041b      	lsls	r3, r3, #16
 800ea54:	4313      	orrs	r3, r2
 800ea56:	4a33      	ldr	r2, [pc, #204]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea58:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	4a31      	ldr	r2, [pc, #196]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea60:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ea64:	7f3b      	ldrb	r3, [r7, #28]
 800ea66:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	4b2d      	ldr	r3, [pc, #180]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea70:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ea74:	7f3b      	ldrb	r3, [r7, #28]
 800ea76:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea7a:	b2db      	uxtb	r3, r3
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4b29      	ldr	r3, [pc, #164]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea80:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ea84:	7f3b      	ldrb	r3, [r7, #28]
 800ea86:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	4b25      	ldr	r3, [pc, #148]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800ea94:	7f7b      	ldrb	r3, [r7, #29]
 800ea96:	461a      	mov	r2, r3
 800ea98:	4b22      	ldr	r3, [pc, #136]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea9a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800ea9c:	4b21      	ldr	r3, [pc, #132]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800ea9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d102      	bne.n	800eaaa <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800eaa4:	4b1f      	ldr	r3, [pc, #124]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800eaaa:	4b1e      	ldr	r3, [pc, #120]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eaac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eaae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eab2:	fb02 f303 	mul.w	r3, r2, r3
 800eab6:	4a1b      	ldr	r2, [pc, #108]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eab8:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800eaba:	4b1a      	ldr	r3, [pc, #104]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eabe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800eac2:	4a18      	ldr	r2, [pc, #96]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eac4:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800eac6:	4b17      	ldr	r3, [pc, #92]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800eace:	f107 030c 	add.w	r3, r7, #12
 800ead2:	3312      	adds	r3, #18
 800ead4:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ead6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	3b11      	subs	r3, #17
 800eade:	b2db      	uxtb	r3, r3
 800eae0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800eae4:	4b11      	ldr	r3, [pc, #68]	; (800eb2c <ProcessRadioRxDone+0x310>)
 800eae6:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800eaea:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800eaee:	4b0d      	ldr	r3, [pc, #52]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eaf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eaf4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800eaf8:	4611      	mov	r1, r2
 800eafa:	4618      	mov	r0, r3
 800eafc:	f006 fba0 	bl	8015240 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800eb00:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <ProcessRadioRxDone+0x308>)
 800eb02:	2202      	movs	r2, #2
 800eb04:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eb08:	2001      	movs	r0, #1
 800eb0a:	f005 f8cf 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d01b      	beq.n	800eb4c <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800eb14:	2101      	movs	r1, #1
 800eb16:	2000      	movs	r0, #0
 800eb18:	f005 f83c 	bl	8013b94 <LoRaMacConfirmQueueSetStatus>
 800eb1c:	e016      	b.n	800eb4c <ProcessRadioRxDone+0x330>
 800eb1e:	bf00      	nop
 800eb20:	20001858 	.word	0x20001858
 800eb24:	20000ca8 	.word	0x20000ca8
 800eb28:	20001850 	.word	0x20001850
 800eb2c:	20000788 	.word	0x20000788
 800eb30:	0801eef8 	.word	0x0801eef8
 800eb34:	20000b20 	.word	0x20000b20
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eb38:	2001      	movs	r0, #1
 800eb3a:	f005 f8b7 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800eb44:	2101      	movs	r1, #1
 800eb46:	2007      	movs	r0, #7
 800eb48:	f005 f824 	bl	8013b94 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800eb4c:	4ab9      	ldr	r2, [pc, #740]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800eb4e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800eb52:	f043 0308 	orr.w	r3, r3, #8
 800eb56:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800eb5a:	e2ec      	b.n	800f136 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800eb5c:	4bb5      	ldr	r3, [pc, #724]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eb64:	4bb4      	ldr	r3, [pc, #720]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800eb66:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800eb6a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800eb6e:	4bb1      	ldr	r3, [pc, #708]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800eb70:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800eb74:	b25b      	sxtb	r3, r3
 800eb76:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800eb7a:	230d      	movs	r3, #13
 800eb7c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800eb80:	4bad      	ldr	r3, [pc, #692]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800eb82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d002      	beq.n	800eb90 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800eb8a:	230e      	movs	r3, #14
 800eb8c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb90:	4ba9      	ldr	r3, [pc, #676]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800eb92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eb96:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800eb9a:	4611      	mov	r1, r2
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	f006 fade 	bl	801515e <RegionGetPhyParam>
 800eba2:	4603      	mov	r3, r0
 800eba4:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800eba6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ebaa:	3b0d      	subs	r3, #13
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	b21b      	sxth	r3, r3
 800ebb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ebb4:	b21a      	sxth	r2, r3
 800ebb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ebb8:	b21b      	sxth	r3, r3
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	dc03      	bgt.n	800ebc6 <ProcessRadioRxDone+0x3aa>
 800ebbe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ebc2:	2b0b      	cmp	r3, #11
 800ebc4:	d806      	bhi.n	800ebd4 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ebc6:	4b9b      	ldr	r3, [pc, #620]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ebc8:	2201      	movs	r2, #1
 800ebca:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ebce:	f7ff fdff 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800ebd2:	e2d5      	b.n	800f180 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800ebd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ebd8:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800ebda:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800ebe4:	4b95      	ldr	r3, [pc, #596]	; (800ee3c <ProcessRadioRxDone+0x620>)
 800ebe6:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ebe8:	23ff      	movs	r3, #255	; 0xff
 800ebea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ebee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f006 f831 	bl	8014c5a <LoRaMacParserData>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d006      	beq.n	800ec0c <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ebfe:	4b8d      	ldr	r3, [pc, #564]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ec00:	2201      	movs	r2, #1
 800ec02:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ec06:	f7ff fde3 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800ec0a:	e2b9      	b.n	800f180 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec0c:	4b8a      	ldr	r3, [pc, #552]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ec0e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d132      	bne.n	800ec7c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ec16:	f004 fb64 	bl	80132e2 <LoRaMacClassBIsPingExpected>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d014      	beq.n	800ec4a <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec20:	2000      	movs	r0, #0
 800ec22:	f004 fb15 	bl	8013250 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ec26:	2000      	movs	r0, #0
 800ec28:	f004 fb36 	bl	8013298 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ec2c:	4b81      	ldr	r3, [pc, #516]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ec2e:	2204      	movs	r2, #4
 800ec30:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ec34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ec3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	4619      	mov	r1, r3
 800ec42:	4610      	mov	r0, r2
 800ec44:	f004 fbd6 	bl	80133f4 <LoRaMacClassBSetFPendingBit>
 800ec48:	e018      	b.n	800ec7c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec4a:	f004 fb51 	bl	80132f0 <LoRaMacClassBIsMulticastExpected>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d013      	beq.n	800ec7c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec54:	2000      	movs	r0, #0
 800ec56:	f004 fb05 	bl	8013264 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	f004 fb25 	bl	80132aa <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ec60:	4b74      	ldr	r3, [pc, #464]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ec62:	2205      	movs	r2, #5
 800ec64:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ec68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ec6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ec6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	4619      	mov	r1, r3
 800ec76:	4610      	mov	r0, r2
 800ec78:	f004 fbbc 	bl	80133f4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ec7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec7e:	4a6d      	ldr	r2, [pc, #436]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ec80:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ec84:	1dba      	adds	r2, r7, #6
 800ec86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ec8a:	4611      	mov	r1, r2
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f002 fd13 	bl	80116b8 <DetermineFrameType>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d006      	beq.n	800eca6 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ec98:	4b66      	ldr	r3, [pc, #408]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800eca0:	f7ff fd96 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800eca4:	e26c      	b.n	800f180 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800ecb6:	e049      	b.n	800ed4c <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ecb8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ecbc:	4a5e      	ldr	r2, [pc, #376]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ecbe:	212c      	movs	r1, #44	; 0x2c
 800ecc0:	fb01 f303 	mul.w	r3, r1, r3
 800ecc4:	4413      	add	r3, r2
 800ecc6:	33dc      	adds	r3, #220	; 0xdc
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d138      	bne.n	800ed42 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ecd0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ecd4:	4a58      	ldr	r2, [pc, #352]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ecd6:	212c      	movs	r1, #44	; 0x2c
 800ecd8:	fb01 f303 	mul.w	r3, r1, r3
 800ecdc:	4413      	add	r3, r2
 800ecde:	33da      	adds	r3, #218	; 0xda
 800ece0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d02d      	beq.n	800ed42 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800ece6:	2301      	movs	r3, #1
 800ece8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800ecec:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ecf0:	4a51      	ldr	r2, [pc, #324]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ecf2:	212c      	movs	r1, #44	; 0x2c
 800ecf4:	fb01 f303 	mul.w	r3, r1, r3
 800ecf8:	4413      	add	r3, r2
 800ecfa:	33db      	adds	r3, #219	; 0xdb
 800ecfc:	781b      	ldrb	r3, [r3, #0]
 800ecfe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800ed02:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ed06:	4a4c      	ldr	r2, [pc, #304]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ed08:	212c      	movs	r1, #44	; 0x2c
 800ed0a:	fb01 f303 	mul.w	r3, r1, r3
 800ed0e:	4413      	add	r3, r2
 800ed10:	33f8      	adds	r3, #248	; 0xf8
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800ed18:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ed1c:	4a46      	ldr	r2, [pc, #280]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ed1e:	212c      	movs	r1, #44	; 0x2c
 800ed20:	fb01 f303 	mul.w	r3, r1, r3
 800ed24:	4413      	add	r3, r2
 800ed26:	33dc      	adds	r3, #220	; 0xdc
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800ed2e:	4b42      	ldr	r3, [pc, #264]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ed30:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d10e      	bne.n	800ed56 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ed38:	4b3e      	ldr	r3, [pc, #248]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ed3a:	2203      	movs	r2, #3
 800ed3c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800ed40:	e009      	b.n	800ed56 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ed42:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ed46:	3301      	adds	r3, #1
 800ed48:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800ed4c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d0b1      	beq.n	800ecb8 <ProcessRadioRxDone+0x49c>
 800ed54:	e000      	b.n	800ed58 <ProcessRadioRxDone+0x53c>
                    break;
 800ed56:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed58:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d117      	bne.n	800ed90 <ProcessRadioRxDone+0x574>
 800ed60:	79bb      	ldrb	r3, [r7, #6]
 800ed62:	2b03      	cmp	r3, #3
 800ed64:	d10d      	bne.n	800ed82 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed66:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ed6a:	f003 0320 	and.w	r3, r3, #32
 800ed6e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d106      	bne.n	800ed82 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800ed74:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ed78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed7c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d006      	beq.n	800ed90 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ed82:	4b2c      	ldr	r3, [pc, #176]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ed84:	2201      	movs	r2, #1
 800ed86:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ed8a:	f7ff fd21 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800ed8e:	e1f7      	b.n	800f180 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800ed90:	79b9      	ldrb	r1, [r7, #6]
 800ed92:	4c29      	ldr	r4, [pc, #164]	; (800ee38 <ProcessRadioRxDone+0x61c>)
 800ed94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ed98:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800ed9c:	f107 0308 	add.w	r3, r7, #8
 800eda0:	9301      	str	r3, [sp, #4]
 800eda2:	1dfb      	adds	r3, r7, #7
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800edaa:	f000 fee7 	bl	800fb7c <GetFCntDown>
 800edae:	4603      	mov	r3, r0
 800edb0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800edb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d017      	beq.n	800edec <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800edbc:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800edc0:	2b07      	cmp	r3, #7
 800edc2:	d104      	bne.n	800edce <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800edc4:	4b1b      	ldr	r3, [pc, #108]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800edc6:	2208      	movs	r2, #8
 800edc8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800edcc:	e003      	b.n	800edd6 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800edce:	4b19      	ldr	r3, [pc, #100]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800edd0:	2201      	movs	r2, #1
 800edd2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	4a16      	ldr	r2, [pc, #88]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800edda:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	4a14      	ldr	r2, [pc, #80]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ede2:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800ede6:	f7ff fcf3 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800edea:	e1c9      	b.n	800f180 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800edec:	79fa      	ldrb	r2, [r7, #7]
 800edee:	68b9      	ldr	r1, [r7, #8]
 800edf0:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800edf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800edf8:	9300      	str	r3, [sp, #0]
 800edfa:	460b      	mov	r3, r1
 800edfc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ee00:	f005 fd78 	bl	80148f4 <LoRaMacCryptoUnsecureMessage>
 800ee04:	4603      	mov	r3, r0
 800ee06:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ee0a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d016      	beq.n	800ee40 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800ee12:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d104      	bne.n	800ee24 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800ee1a:	4b06      	ldr	r3, [pc, #24]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ee1c:	220a      	movs	r2, #10
 800ee1e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800ee22:	e003      	b.n	800ee2c <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ee24:	4b03      	ldr	r3, [pc, #12]	; (800ee34 <ProcessRadioRxDone+0x618>)
 800ee26:	220b      	movs	r2, #11
 800ee28:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800ee2c:	f7ff fcd0 	bl	800e7d0 <PrepareRxDoneAbort>
                return;
 800ee30:	e1a6      	b.n	800f180 <ProcessRadioRxDone+0x964>
 800ee32:	bf00      	nop
 800ee34:	20000788 	.word	0x20000788
 800ee38:	20000ca8 	.word	0x20000ca8
 800ee3c:	200009c0 	.word	0x200009c0
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee40:	4bb5      	ldr	r3, [pc, #724]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800ee48:	4ab3      	ldr	r2, [pc, #716]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee4a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800ee4e:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ee52:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ee56:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	4bae      	ldr	r3, [pc, #696]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee60:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800ee64:	4bac      	ldr	r3, [pc, #688]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800ee6c:	4baa      	ldr	r3, [pc, #680]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee6e:	2200      	movs	r2, #0
 800ee70:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	4aa8      	ldr	r2, [pc, #672]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee78:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	4aa6      	ldr	r2, [pc, #664]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee80:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ee84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ee88:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	bf14      	ite	ne
 800ee92:	2301      	movne	r3, #1
 800ee94:	2300      	moveq	r3, #0
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	4b9f      	ldr	r3, [pc, #636]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ee9a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ee9e:	4b9e      	ldr	r3, [pc, #632]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800eea0:	2200      	movs	r2, #0
 800eea2:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800eea6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800eeaa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	bf14      	ite	ne
 800eeb4:	2301      	movne	r3, #1
 800eeb6:	2300      	moveq	r3, #0
 800eeb8:	b2da      	uxtb	r2, r3
 800eeba:	4b97      	ldr	r3, [pc, #604]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800eebc:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eec0:	4b95      	ldr	r3, [pc, #596]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800eec2:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d004      	beq.n	800eed4 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800eeca:	4b93      	ldr	r3, [pc, #588]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800eecc:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d106      	bne.n	800eee2 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800eed4:	4b91      	ldr	r3, [pc, #580]	; (800f11c <ProcessRadioRxDone+0x900>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800eeda:	4b90      	ldr	r3, [pc, #576]	; (800f11c <ProcessRadioRxDone+0x900>)
 800eedc:	2201      	movs	r2, #1
 800eede:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800eee2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800eee6:	2b01      	cmp	r3, #1
 800eee8:	d104      	bne.n	800eef4 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800eeea:	4b8b      	ldr	r3, [pc, #556]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800eeec:	2202      	movs	r2, #2
 800eeee:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800eef2:	e034      	b.n	800ef5e <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800eef4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800eef8:	f023 031f 	bic.w	r3, r3, #31
 800eefc:	b2db      	uxtb	r3, r3
 800eefe:	2ba0      	cmp	r3, #160	; 0xa0
 800ef00:	d125      	bne.n	800ef4e <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800ef02:	4b86      	ldr	r3, [pc, #536]	; (800f11c <ProcessRadioRxDone+0x900>)
 800ef04:	2201      	movs	r2, #1
 800ef06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ef0a:	4b84      	ldr	r3, [pc, #528]	; (800f11c <ProcessRadioRxDone+0x900>)
 800ef0c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800ef14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ef16:	4a81      	ldr	r2, [pc, #516]	; (800f11c <ProcessRadioRxDone+0x900>)
 800ef18:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ef1a:	4b7f      	ldr	r3, [pc, #508]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ef22:	4b7d      	ldr	r3, [pc, #500]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef24:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d018      	beq.n	800ef5e <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800ef2c:	4b7a      	ldr	r3, [pc, #488]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef2e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d013      	beq.n	800ef5e <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800ef36:	4b79      	ldr	r3, [pc, #484]	; (800f11c <ProcessRadioRxDone+0x900>)
 800ef38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef3c:	4a76      	ldr	r2, [pc, #472]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef3e:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ef42:	4b77      	ldr	r3, [pc, #476]	; (800f120 <ProcessRadioRxDone+0x904>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a74      	ldr	r2, [pc, #464]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef48:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800ef4c:	e007      	b.n	800ef5e <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800ef4e:	4b73      	ldr	r3, [pc, #460]	; (800f11c <ProcessRadioRxDone+0x900>)
 800ef50:	2200      	movs	r2, #0
 800ef52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ef56:	4b70      	ldr	r3, [pc, #448]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ef5e:	4b6e      	ldr	r3, [pc, #440]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef60:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800ef64:	4a6c      	ldr	r2, [pc, #432]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef66:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800ef6a:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f001 ff88 	bl	8010e84 <RemoveMacCommands>

            switch( fType )
 800ef74:	79bb      	ldrb	r3, [r7, #6]
 800ef76:	2b03      	cmp	r3, #3
 800ef78:	d873      	bhi.n	800f062 <ProcessRadioRxDone+0x846>
 800ef7a:	a201      	add	r2, pc, #4	; (adr r2, 800ef80 <ProcessRadioRxDone+0x764>)
 800ef7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef80:	0800ef91 	.word	0x0800ef91
 800ef84:	0800efe1 	.word	0x0800efe1
 800ef88:	0800f017 	.word	0x0800f017
 800ef8c:	0800f03d 	.word	0x0800f03d
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ef90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ef94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	461c      	mov	r4, r3
 800ef9c:	4b5e      	ldr	r3, [pc, #376]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800ef9e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800efa2:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800efa6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800efaa:	f102 0010 	add.w	r0, r2, #16
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	460b      	mov	r3, r1
 800efb2:	4622      	mov	r2, r4
 800efb4:	2100      	movs	r1, #0
 800efb6:	f000 ff45 	bl	800fe44 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800efba:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800efbe:	4b56      	ldr	r3, [pc, #344]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800efc0:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800efc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efc6:	4a54      	ldr	r2, [pc, #336]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800efc8:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800efcc:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800efd0:	4b51      	ldr	r3, [pc, #324]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800efd2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800efd6:	4b50      	ldr	r3, [pc, #320]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800efde:	e047      	b.n	800f070 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800efe0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800efe4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	461c      	mov	r4, r3
 800efec:	4b4a      	ldr	r3, [pc, #296]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800efee:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800eff2:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800eff6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800effa:	f102 0010 	add.w	r0, r2, #16
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	460b      	mov	r3, r1
 800f002:	4622      	mov	r2, r4
 800f004:	2100      	movs	r1, #0
 800f006:	f000 ff1d 	bl	800fe44 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f00a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f00e:	4b42      	ldr	r3, [pc, #264]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f010:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800f014:	e02c      	b.n	800f070 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f016:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f018:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f01c:	4b3e      	ldr	r3, [pc, #248]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f01e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f022:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	460b      	mov	r3, r1
 800f02a:	2100      	movs	r1, #0
 800f02c:	f000 ff0a 	bl	800fe44 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f030:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f034:	4b38      	ldr	r3, [pc, #224]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f036:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800f03a:	e019      	b.n	800f070 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f03c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f040:	4b35      	ldr	r3, [pc, #212]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f042:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f048:	4a33      	ldr	r2, [pc, #204]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f04a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f04e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f052:	4b31      	ldr	r3, [pc, #196]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f054:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f058:	4b2f      	ldr	r3, [pc, #188]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f05a:	2201      	movs	r2, #1
 800f05c:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800f060:	e006      	b.n	800f070 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f062:	4b2d      	ldr	r3, [pc, #180]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f064:	2201      	movs	r2, #1
 800f066:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800f06a:	f7ff fbb1 	bl	800e7d0 <PrepareRxDoneAbort>
                    break;
 800f06e:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f070:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f074:	2be0      	cmp	r3, #224	; 0xe0
 800f076:	d118      	bne.n	800f0aa <ProcessRadioRxDone+0x88e>
 800f078:	4b28      	ldr	r3, [pc, #160]	; (800f11c <ProcessRadioRxDone+0x900>)
 800f07a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800f07e:	f083 0301 	eor.w	r3, r3, #1
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b00      	cmp	r3, #0
 800f086:	d010      	beq.n	800f0aa <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f088:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f08c:	4b22      	ldr	r3, [pc, #136]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f08e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800f092:	4b21      	ldr	r3, [pc, #132]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f094:	2200      	movs	r2, #0
 800f096:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800f09a:	4b1f      	ldr	r3, [pc, #124]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f09c:	2200      	movs	r2, #0
 800f09e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800f0a2:	4b1d      	ldr	r3, [pc, #116]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f0aa:	4a1b      	ldr	r2, [pc, #108]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f0ac:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f0b0:	f043 0302 	orr.w	r3, r3, #2
 800f0b4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 800f0b8:	e03d      	b.n	800f136 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f0ba:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f0be:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f0c2:	18d1      	adds	r1, r2, r3
 800f0c4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800f0ce:	1ad3      	subs	r3, r2, r3
 800f0d0:	b29b      	uxth	r3, r3
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	4813      	ldr	r0, [pc, #76]	; (800f124 <ProcessRadioRxDone+0x908>)
 800f0d6:	f009 fe40 	bl	8018d5a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f0da:	4b0f      	ldr	r3, [pc, #60]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f0dc:	2203      	movs	r2, #3
 800f0de:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f0e2:	4b0d      	ldr	r3, [pc, #52]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f0ea:	4b0b      	ldr	r3, [pc, #44]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f0ec:	4a0d      	ldr	r2, [pc, #52]	; (800f124 <ProcessRadioRxDone+0x908>)
 800f0ee:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f0f2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	b2da      	uxtb	r2, r3
 800f100:	4b05      	ldr	r3, [pc, #20]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f102:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f106:	4a04      	ldr	r2, [pc, #16]	; (800f118 <ProcessRadioRxDone+0x8fc>)
 800f108:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f10c:	f043 0302 	orr.w	r3, r3, #2
 800f110:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800f114:	e00f      	b.n	800f136 <ProcessRadioRxDone+0x91a>
 800f116:	bf00      	nop
 800f118:	20000788 	.word	0x20000788
 800f11c:	20000ca8 	.word	0x20000ca8
 800f120:	20001858 	.word	0x20001858
 800f124:	200009c0 	.word	0x200009c0
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f128:	4b17      	ldr	r3, [pc, #92]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f12a:	2201      	movs	r2, #1
 800f12c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800f130:	f7ff fb4e 	bl	800e7d0 <PrepareRxDoneAbort>
            break;
 800f134:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f136:	4b14      	ldr	r3, [pc, #80]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f138:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d004      	beq.n	800f14a <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f140:	4b11      	ldr	r3, [pc, #68]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f142:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f146:	2b01      	cmp	r3, #1
 800f148:	d10c      	bne.n	800f164 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800f14a:	4b0f      	ldr	r3, [pc, #60]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f14c:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f150:	2b00      	cmp	r3, #0
 800f152:	d007      	beq.n	800f164 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f154:	4b0c      	ldr	r3, [pc, #48]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f156:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d002      	beq.n	800f164 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f15e:	2000      	movs	r0, #0
 800f160:	f000 fce4 	bl	800fb2c <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f164:	4b08      	ldr	r3, [pc, #32]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f166:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f16a:	2b02      	cmp	r3, #2
 800f16c:	d006      	beq.n	800f17c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f16e:	4a06      	ldr	r2, [pc, #24]	; (800f188 <ProcessRadioRxDone+0x96c>)
 800f170:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f174:	f043 0320 	orr.w	r3, r3, #32
 800f178:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f17c:	f7ff fa82 	bl	800e684 <UpdateRxSlotIdleState>
}
 800f180:	3794      	adds	r7, #148	; 0x94
 800f182:	46bd      	mov	sp, r7
 800f184:	bd90      	pop	{r4, r7, pc}
 800f186:	bf00      	nop
 800f188:	20000788 	.word	0x20000788

0800f18c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f190:	4b11      	ldr	r3, [pc, #68]	; (800f1d8 <ProcessRadioTxTimeout+0x4c>)
 800f192:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f196:	2b02      	cmp	r3, #2
 800f198:	d002      	beq.n	800f1a0 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f19a:	4b10      	ldr	r3, [pc, #64]	; (800f1dc <ProcessRadioTxTimeout+0x50>)
 800f19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f19e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f1a0:	f7ff fa70 	bl	800e684 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f1a4:	4b0e      	ldr	r3, [pc, #56]	; (800f1e0 <ProcessRadioTxTimeout+0x54>)
 800f1a6:	2202      	movs	r2, #2
 800f1a8:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f1ac:	2002      	movs	r0, #2
 800f1ae:	f004 fd49 	bl	8013c44 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f1b2:	4b0b      	ldr	r3, [pc, #44]	; (800f1e0 <ProcessRadioTxTimeout+0x54>)
 800f1b4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d003      	beq.n	800f1c4 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800f1bc:	4b08      	ldr	r3, [pc, #32]	; (800f1e0 <ProcessRadioTxTimeout+0x54>)
 800f1be:	2201      	movs	r2, #1
 800f1c0:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f1c4:	4a06      	ldr	r2, [pc, #24]	; (800f1e0 <ProcessRadioTxTimeout+0x54>)
 800f1c6:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f1ca:	f043 0320 	orr.w	r3, r3, #32
 800f1ce:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800f1d2:	bf00      	nop
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	20000ca8 	.word	0x20000ca8
 800f1dc:	0801eef8 	.word	0x0801eef8
 800f1e0:	20000788 	.word	0x20000788

0800f1e4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b084      	sub	sp, #16
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	460a      	mov	r2, r1
 800f1ee:	71fb      	strb	r3, [r7, #7]
 800f1f0:	4613      	mov	r3, r2
 800f1f2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f1f8:	4b3d      	ldr	r3, [pc, #244]	; (800f2f0 <HandleRadioRxErrorTimeout+0x10c>)
 800f1fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f1fe:	2b02      	cmp	r3, #2
 800f200:	d002      	beq.n	800f208 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f202:	4b3c      	ldr	r3, [pc, #240]	; (800f2f4 <HandleRadioRxErrorTimeout+0x110>)
 800f204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f206:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f208:	f004 f864 	bl	80132d4 <LoRaMacClassBIsBeaconExpected>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d007      	beq.n	800f222 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f212:	2002      	movs	r0, #2
 800f214:	f004 f812 	bl	801323c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f218:	2000      	movs	r0, #0
 800f21a:	f004 f834 	bl	8013286 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f21e:	2301      	movs	r3, #1
 800f220:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f222:	4b33      	ldr	r3, [pc, #204]	; (800f2f0 <HandleRadioRxErrorTimeout+0x10c>)
 800f224:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d119      	bne.n	800f260 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f22c:	f004 f859 	bl	80132e2 <LoRaMacClassBIsPingExpected>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d007      	beq.n	800f246 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f236:	2000      	movs	r0, #0
 800f238:	f004 f80a 	bl	8013250 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f23c:	2000      	movs	r0, #0
 800f23e:	f004 f82b 	bl	8013298 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f242:	2301      	movs	r3, #1
 800f244:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f246:	f004 f853 	bl	80132f0 <LoRaMacClassBIsMulticastExpected>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d007      	beq.n	800f260 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f250:	2000      	movs	r0, #0
 800f252:	f004 f807 	bl	8013264 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f256:	2000      	movs	r0, #0
 800f258:	f004 f827 	bl	80132aa <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f25c:	2301      	movs	r3, #1
 800f25e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	f083 0301 	eor.w	r3, r3, #1
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d03b      	beq.n	800f2e4 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f26c:	4b22      	ldr	r3, [pc, #136]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f26e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f272:	2b00      	cmp	r3, #0
 800f274:	d122      	bne.n	800f2bc <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f276:	4b20      	ldr	r3, [pc, #128]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f278:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f280:	4a1d      	ldr	r2, [pc, #116]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f282:	79fb      	ldrb	r3, [r7, #7]
 800f284:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f288:	79fb      	ldrb	r3, [r7, #7]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f004 fcda 	bl	8013c44 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f290:	4b17      	ldr	r3, [pc, #92]	; (800f2f0 <HandleRadioRxErrorTimeout+0x10c>)
 800f292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f294:	4618      	mov	r0, r3
 800f296:	f00d fe99 	bl	801cfcc <UTIL_TIMER_GetElapsedTime>
 800f29a:	4602      	mov	r2, r0
 800f29c:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f29e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d31e      	bcc.n	800f2e4 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f2a6:	4815      	ldr	r0, [pc, #84]	; (800f2fc <HandleRadioRxErrorTimeout+0x118>)
 800f2a8:	f00d fd64 	bl	801cd74 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f2ac:	4a12      	ldr	r2, [pc, #72]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f2ae:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f2b2:	f043 0320 	orr.w	r3, r3, #32
 800f2b6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800f2ba:	e013      	b.n	800f2e4 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f2bc:	4b0e      	ldr	r3, [pc, #56]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f2be:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d003      	beq.n	800f2ce <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f2c6:	4a0c      	ldr	r2, [pc, #48]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f2c8:	79bb      	ldrb	r3, [r7, #6]
 800f2ca:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f2ce:	79bb      	ldrb	r3, [r7, #6]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f004 fcb7 	bl	8013c44 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f2d6:	4a08      	ldr	r2, [pc, #32]	; (800f2f8 <HandleRadioRxErrorTimeout+0x114>)
 800f2d8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f2dc:	f043 0320 	orr.w	r3, r3, #32
 800f2e0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f2e4:	f7ff f9ce 	bl	800e684 <UpdateRxSlotIdleState>
}
 800f2e8:	bf00      	nop
 800f2ea:	3710      	adds	r7, #16
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}
 800f2f0:	20000ca8 	.word	0x20000ca8
 800f2f4:	0801eef8 	.word	0x0801eef8
 800f2f8:	20000788 	.word	0x20000788
 800f2fc:	20000b20 	.word	0x20000b20

0800f300 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f300:	b580      	push	{r7, lr}
 800f302:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f304:	2106      	movs	r1, #6
 800f306:	2005      	movs	r0, #5
 800f308:	f7ff ff6c 	bl	800f1e4 <HandleRadioRxErrorTimeout>
}
 800f30c:	bf00      	nop
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f314:	2104      	movs	r1, #4
 800f316:	2003      	movs	r0, #3
 800f318:	f7ff ff64 	bl	800f1e4 <HandleRadioRxErrorTimeout>
}
 800f31c:	bf00      	nop
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f326:	f3ef 8310 	mrs	r3, PRIMASK
 800f32a:	607b      	str	r3, [r7, #4]
  return(result);
 800f32c:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f32e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f330:	b672      	cpsid	i
}
 800f332:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f334:	4b1d      	ldr	r3, [pc, #116]	; (800f3ac <LoRaMacHandleIrqEvents+0x8c>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f33a:	4b1c      	ldr	r3, [pc, #112]	; (800f3ac <LoRaMacHandleIrqEvents+0x8c>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	f383 8810 	msr	PRIMASK, r3
}
 800f34a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d027      	beq.n	800f3a2 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f352:	783b      	ldrb	r3, [r7, #0]
 800f354:	f003 0320 	and.w	r3, r3, #32
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d001      	beq.n	800f362 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f35e:	f7ff f9a9 	bl	800e6b4 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f362:	783b      	ldrb	r3, [r7, #0]
 800f364:	f003 0310 	and.w	r3, r3, #16
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d001      	beq.n	800f372 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f36e:	f7ff fa55 	bl	800e81c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f372:	783b      	ldrb	r3, [r7, #0]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f37e:	f7ff ff05 	bl	800f18c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f382:	783b      	ldrb	r3, [r7, #0]
 800f384:	f003 0304 	and.w	r3, r3, #4
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d001      	beq.n	800f392 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f38e:	f7ff ffb7 	bl	800f300 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f392:	783b      	ldrb	r3, [r7, #0]
 800f394:	f003 0302 	and.w	r3, r3, #2
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f39e:	f7ff ffb7 	bl	800f310 <ProcessRadioRxTimeout>
        }
    }
}
 800f3a2:	bf00      	nop
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
 800f3aa:	bf00      	nop
 800f3ac:	20001850 	.word	0x20001850

0800f3b0 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f3b4:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <LoRaMacIsBusy+0x38>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	b2db      	uxtb	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d001      	beq.n	800f3c6 <LoRaMacIsBusy+0x16>
    {
        return true;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	e00c      	b.n	800f3e0 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f3c6:	4b09      	ldr	r3, [pc, #36]	; (800f3ec <LoRaMacIsBusy+0x3c>)
 800f3c8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d106      	bne.n	800f3de <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f3d0:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <LoRaMacIsBusy+0x3c>)
 800f3d2:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d101      	bne.n	800f3de <LoRaMacIsBusy+0x2e>
    {
        return false;
 800f3da:	2300      	movs	r3, #0
 800f3dc:	e000      	b.n	800f3e0 <LoRaMacIsBusy+0x30>
    }
    return true;
 800f3de:	2301      	movs	r3, #1
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bc80      	pop	{r7}
 800f3e6:	4770      	bx	lr
 800f3e8:	20001850 	.word	0x20001850
 800f3ec:	20000788 	.word	0x20000788

0800f3f0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f3fa:	4a04      	ldr	r2, [pc, #16]	; (800f40c <LoRaMacEnableRequests+0x1c>)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 800f402:	bf00      	nop
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	bc80      	pop	{r7}
 800f40a:	4770      	bx	lr
 800f40c:	20000788 	.word	0x20000788

0800f410 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f416:	4b2c      	ldr	r3, [pc, #176]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f418:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f41c:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f41e:	4b2a      	ldr	r3, [pc, #168]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f420:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f424:	2b00      	cmp	r3, #0
 800f426:	d14a      	bne.n	800f4be <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f428:	4b27      	ldr	r3, [pc, #156]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f42a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b00      	cmp	r3, #0
 800f436:	d006      	beq.n	800f446 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f438:	4a23      	ldr	r2, [pc, #140]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f43a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f43e:	f36f 0300 	bfc	r3, #0, #1
 800f442:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f446:	4b20      	ldr	r3, [pc, #128]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f448:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f44c:	f003 0304 	and.w	r3, r3, #4
 800f450:	b2db      	uxtb	r3, r3
 800f452:	2b00      	cmp	r3, #0
 800f454:	d006      	beq.n	800f464 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f456:	4a1c      	ldr	r2, [pc, #112]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f458:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f45c:	f36f 0382 	bfc	r3, #2, #1
 800f460:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f464:	2001      	movs	r0, #1
 800f466:	f7ff ffc3 	bl	800f3f0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f46a:	793b      	ldrb	r3, [r7, #4]
 800f46c:	f003 0301 	and.w	r3, r3, #1
 800f470:	b2db      	uxtb	r3, r3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d005      	beq.n	800f482 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f476:	4b14      	ldr	r3, [pc, #80]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f478:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4813      	ldr	r0, [pc, #76]	; (800f4cc <LoRaMacHandleRequestEvents+0xbc>)
 800f480:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f482:	793b      	ldrb	r3, [r7, #4]
 800f484:	f003 0304 	and.w	r3, r3, #4
 800f488:	b2db      	uxtb	r3, r3
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00e      	beq.n	800f4ac <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f48e:	4810      	ldr	r0, [pc, #64]	; (800f4d0 <LoRaMacHandleRequestEvents+0xc0>)
 800f490:	f004 fc26 	bl	8013ce0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f494:	f004 fc70 	bl	8013d78 <LoRaMacConfirmQueueGetCnt>
 800f498:	4603      	mov	r3, r0
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d006      	beq.n	800f4ac <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f49e:	4a0a      	ldr	r2, [pc, #40]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f4a0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f4a4:	f043 0304 	orr.w	r3, r3, #4
 800f4a8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f4ac:	f003 ff3e 	bl	801332c <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f4b0:	4a05      	ldr	r2, [pc, #20]	; (800f4c8 <LoRaMacHandleRequestEvents+0xb8>)
 800f4b2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f4b6:	f36f 1345 	bfc	r3, #5, #1
 800f4ba:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 800f4be:	bf00      	nop
 800f4c0:	3708      	adds	r7, #8
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	20000788 	.word	0x20000788
 800f4cc:	20000bcc 	.word	0x20000bcc
 800f4d0:	20000be0 	.word	0x20000be0

0800f4d4 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f4da:	4b07      	ldr	r3, [pc, #28]	; (800f4f8 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800f4dc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d105      	bne.n	800f4f0 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800f4e8:	1dfb      	adds	r3, r7, #7
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f004 f9de 	bl	80138ac <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800f4f0:	bf00      	nop
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}
 800f4f8:	20000788 	.word	0x20000788

0800f4fc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800f500:	4b16      	ldr	r3, [pc, #88]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f502:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f506:	f003 0308 	and.w	r3, r3, #8
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d00d      	beq.n	800f52c <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800f510:	4a12      	ldr	r2, [pc, #72]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f512:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f516:	f36f 03c3 	bfc	r3, #3, #1
 800f51a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800f51e:	4b0f      	ldr	r3, [pc, #60]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f520:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f524:	68db      	ldr	r3, [r3, #12]
 800f526:	490e      	ldr	r1, [pc, #56]	; (800f560 <LoRaMacHandleIndicationEvents+0x64>)
 800f528:	480e      	ldr	r0, [pc, #56]	; (800f564 <LoRaMacHandleIndicationEvents+0x68>)
 800f52a:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800f52c:	4b0b      	ldr	r3, [pc, #44]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f52e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f532:	f003 0302 	and.w	r3, r3, #2
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00d      	beq.n	800f558 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800f53c:	4a07      	ldr	r2, [pc, #28]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f53e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f542:	f36f 0341 	bfc	r3, #1, #1
 800f546:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800f54a:	4b04      	ldr	r3, [pc, #16]	; (800f55c <LoRaMacHandleIndicationEvents+0x60>)
 800f54c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	4903      	ldr	r1, [pc, #12]	; (800f560 <LoRaMacHandleIndicationEvents+0x64>)
 800f554:	4804      	ldr	r0, [pc, #16]	; (800f568 <LoRaMacHandleIndicationEvents+0x6c>)
 800f556:	4798      	blx	r3
    }
}
 800f558:	bf00      	nop
 800f55a:	bd80      	pop	{r7, pc}
 800f55c:	20000788 	.word	0x20000788
 800f560:	20000c18 	.word	0x20000c18
 800f564:	20000bf4 	.word	0x20000bf4
 800f568:	20000bac 	.word	0x20000bac

0800f56c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f572:	4b2a      	ldr	r3, [pc, #168]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f574:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d048      	beq.n	800f614 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800f582:	2300      	movs	r3, #0
 800f584:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800f586:	2300      	movs	r3, #0
 800f588:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f58a:	4b24      	ldr	r3, [pc, #144]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f58c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800f590:	2b00      	cmp	r3, #0
 800f592:	d004      	beq.n	800f59e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800f594:	4b21      	ldr	r3, [pc, #132]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f596:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f59a:	2b03      	cmp	r3, #3
 800f59c:	d104      	bne.n	800f5a8 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f59e:	f002 f8ed 	bl	801177c <CheckRetransUnconfirmedUplink>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
 800f5a6:	e010      	b.n	800f5ca <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f5a8:	4b1c      	ldr	r3, [pc, #112]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5aa:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d10b      	bne.n	800f5ca <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f5b2:	4b1a      	ldr	r3, [pc, #104]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5b4:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d004      	beq.n	800f5c6 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f5bc:	f002 f90a 	bl	80117d4 <CheckRetransConfirmedUplink>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	71fb      	strb	r3, [r7, #7]
 800f5c4:	e001      	b.n	800f5ca <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800f5ca:	79fb      	ldrb	r3, [r7, #7]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d00d      	beq.n	800f5ec <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800f5d0:	4813      	ldr	r0, [pc, #76]	; (800f620 <LoRaMacHandleMcpsRequest+0xb4>)
 800f5d2:	f00d fbcf 	bl	801cd74 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f5d6:	4b11      	ldr	r3, [pc, #68]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5d8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f5dc:	f023 0320 	bic.w	r3, r3, #32
 800f5e0:	4a0e      	ldr	r2, [pc, #56]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5e2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800f5e6:	f002 f92f 	bl	8011848 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800f5ea:	e013      	b.n	800f614 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800f5ec:	79bb      	ldrb	r3, [r7, #6]
 800f5ee:	f083 0301 	eor.w	r3, r3, #1
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d00d      	beq.n	800f614 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f5f8:	4a08      	ldr	r2, [pc, #32]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f5fa:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f5fe:	f36f 1345 	bfc	r3, #5, #1
 800f602:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800f606:	4b05      	ldr	r3, [pc, #20]	; (800f61c <LoRaMacHandleMcpsRequest+0xb0>)
 800f608:	2200      	movs	r2, #0
 800f60a:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800f60e:	2000      	movs	r0, #0
 800f610:	f000 f9c8 	bl	800f9a4 <OnTxDelayedTimerEvent>
}
 800f614:	bf00      	nop
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20000788 	.word	0x20000788
 800f620:	20000af0 	.word	0x20000af0

0800f624 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f628:	4b18      	ldr	r3, [pc, #96]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f62a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f62e:	f003 0304 	and.w	r3, r3, #4
 800f632:	b2db      	uxtb	r3, r3
 800f634:	2b00      	cmp	r3, #0
 800f636:	d026      	beq.n	800f686 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f638:	2001      	movs	r0, #1
 800f63a:	f004 fb37 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d012      	beq.n	800f66a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800f644:	2001      	movs	r0, #1
 800f646:	f004 fad3 	bl	8013bf0 <LoRaMacConfirmQueueGetStatus>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800f650:	4b0e      	ldr	r3, [pc, #56]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f652:	2200      	movs	r2, #0
 800f654:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f658:	4b0c      	ldr	r3, [pc, #48]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f65a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f65e:	f023 0302 	bic.w	r3, r3, #2
 800f662:	4a0a      	ldr	r2, [pc, #40]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f664:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800f668:	e00d      	b.n	800f686 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800f66a:	2005      	movs	r0, #5
 800f66c:	f004 fb1e 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d007      	beq.n	800f686 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f676:	4b05      	ldr	r3, [pc, #20]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f678:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f67c:	f023 0302 	bic.w	r3, r3, #2
 800f680:	4a02      	ldr	r2, [pc, #8]	; (800f68c <LoRaMacHandleMlmeRequest+0x68>)
 800f682:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800f686:	bf00      	nop
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	20000788 	.word	0x20000788

0800f690 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800f690:	b580      	push	{r7, lr}
 800f692:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f694:	200b      	movs	r0, #11
 800f696:	f004 fb09 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 800f69a:	4603      	mov	r3, r0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d019      	beq.n	800f6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800f6a0:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d111      	bne.n	800f6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f6b0:	4b0a      	ldr	r3, [pc, #40]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f6b6:	f003 0304 	and.w	r3, r3, #4
 800f6ba:	b2db      	uxtb	r3, r3
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d009      	beq.n	800f6d4 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f6c0:	4b06      	ldr	r3, [pc, #24]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f6c6:	f023 0302 	bic.w	r3, r3, #2
 800f6ca:	4a04      	ldr	r2, [pc, #16]	; (800f6dc <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800f6cc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	e000      	b.n	800f6d6 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	bd80      	pop	{r7, pc}
 800f6da:	bf00      	nop
 800f6dc:	20000788 	.word	0x20000788

0800f6e0 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	71fb      	strb	r3, [r7, #7]
 800f6ea:	460b      	mov	r3, r1
 800f6ec:	71bb      	strb	r3, [r7, #6]
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800f6f2:	79fb      	ldrb	r3, [r7, #7]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00a      	beq.n	800f70e <CheckForMinimumAbpDatarate+0x2e>
 800f6f8:	79bb      	ldrb	r3, [r7, #6]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d107      	bne.n	800f70e <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800f6fe:	797b      	ldrb	r3, [r7, #5]
 800f700:	f083 0301 	eor.w	r3, r3, #1
 800f704:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800f706:	2b00      	cmp	r3, #0
 800f708:	d001      	beq.n	800f70e <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800f70a:	2301      	movs	r3, #1
 800f70c:	e000      	b.n	800f710 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800f70e:	2300      	movs	r3, #0
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	bc80      	pop	{r7}
 800f718:	4770      	bx	lr
	...

0800f71c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800f71c:	b480      	push	{r7}
 800f71e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800f720:	4b0d      	ldr	r3, [pc, #52]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f722:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00f      	beq.n	800f74e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800f72e:	4b0a      	ldr	r3, [pc, #40]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f730:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f738:	4a07      	ldr	r2, [pc, #28]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f73a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800f73e:	4b06      	ldr	r3, [pc, #24]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f740:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f744:	f023 0302 	bic.w	r3, r3, #2
 800f748:	4a03      	ldr	r2, [pc, #12]	; (800f758 <LoRaMacCheckForRxAbort+0x3c>)
 800f74a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800f74e:	bf00      	nop
 800f750:	46bd      	mov	sp, r7
 800f752:	bc80      	pop	{r7}
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	20000788 	.word	0x20000788

0800f75c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800f764:	2300      	movs	r3, #0
 800f766:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f768:	2300      	movs	r3, #0
 800f76a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800f76c:	4b50      	ldr	r3, [pc, #320]	; (800f8b0 <LoRaMacHandleNvm+0x154>)
 800f76e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f772:	2b00      	cmp	r3, #0
 800f774:	f040 8098 	bne.w	800f8a8 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2124      	movs	r1, #36	; 0x24
 800f77c:	4618      	mov	r0, r3
 800f77e:	f009 fb41 	bl	8018e04 <Crc32>
 800f782:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f788:	68ba      	ldr	r2, [r7, #8]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d006      	beq.n	800f79c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	68ba      	ldr	r2, [r7, #8]
 800f792:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f794:	89fb      	ldrh	r3, [r7, #14]
 800f796:	f043 0301 	orr.w	r3, r3, #1
 800f79a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3328      	adds	r3, #40	; 0x28
 800f7a0:	2114      	movs	r1, #20
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f009 fb2e 	bl	8018e04 <Crc32>
 800f7a8:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7ae:	68ba      	ldr	r2, [r7, #8]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d006      	beq.n	800f7c2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	68ba      	ldr	r2, [r7, #8]
 800f7b8:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f7ba:	89fb      	ldrh	r3, [r7, #14]
 800f7bc:	f043 0302 	orr.w	r3, r3, #2
 800f7c0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	3340      	adds	r3, #64	; 0x40
 800f7c6:	21e0      	movs	r1, #224	; 0xe0
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f009 fb1b 	bl	8018e04 <Crc32>
 800f7ce:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d007      	beq.n	800f7ec <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	68ba      	ldr	r2, [r7, #8]
 800f7e0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f7e4:	89fb      	ldrh	r3, [r7, #14]
 800f7e6:	f043 0304 	orr.w	r3, r3, #4
 800f7ea:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800f7f2:	21bc      	movs	r1, #188	; 0xbc
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f009 fb05 	bl	8018e04 <Crc32>
 800f7fa:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	429a      	cmp	r2, r3
 800f806:	d007      	beq.n	800f818 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	68ba      	ldr	r2, [r7, #8]
 800f80c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f810:	89fb      	ldrh	r3, [r7, #14]
 800f812:	f043 0308 	orr.w	r3, r3, #8
 800f816:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f81e:	2110      	movs	r1, #16
 800f820:	4618      	mov	r0, r3
 800f822:	f009 faef 	bl	8018e04 <Crc32>
 800f826:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	429a      	cmp	r2, r3
 800f832:	d007      	beq.n	800f844 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	68ba      	ldr	r2, [r7, #8]
 800f838:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f83c:	89fb      	ldrh	r3, [r7, #14]
 800f83e:	f043 0310 	orr.w	r3, r3, #16
 800f842:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f84a:	f44f 715e 	mov.w	r1, #888	; 0x378
 800f84e:	4618      	mov	r0, r3
 800f850:	f009 fad8 	bl	8018e04 <Crc32>
 800f854:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d007      	beq.n	800f872 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	68ba      	ldr	r2, [r7, #8]
 800f866:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f86a:	89fb      	ldrh	r3, [r7, #14]
 800f86c:	f043 0320 	orr.w	r3, r3, #32
 800f870:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800f878:	2114      	movs	r1, #20
 800f87a:	4618      	mov	r0, r3
 800f87c:	f009 fac2 	bl	8018e04 <Crc32>
 800f880:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 800f888:	68ba      	ldr	r2, [r7, #8]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d007      	beq.n	800f89e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68ba      	ldr	r2, [r7, #8]
 800f892:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f896:	89fb      	ldrh	r3, [r7, #14]
 800f898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f89c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800f89e:	89fb      	ldrh	r3, [r7, #14]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f002 f80d 	bl	80118c0 <CallNvmDataChangeCallback>
 800f8a6:	e000      	b.n	800f8aa <LoRaMacHandleNvm+0x14e>
        return;
 800f8a8:	bf00      	nop
}
 800f8aa:	3710      	adds	r7, #16
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	20000788 	.word	0x20000788

0800f8b4 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d00d      	beq.n	800f8e0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800f8c4:	6838      	ldr	r0, [r7, #0]
 800f8c6:	f00d fb81 	bl	801cfcc <UTIL_TIMER_GetElapsedTime>
 800f8ca:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800f8cc:	68fa      	ldr	r2, [r7, #12]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d905      	bls.n	800f8e0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800f8d4:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <LoRaMacHandleResponseTimeout+0x38>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	e000      	b.n	800f8e2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3710      	adds	r7, #16
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}
 800f8ea:	bf00      	nop
 800f8ec:	20000ca8 	.word	0x20000ca8

0800f8f0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800f8fa:	f7ff fd11 	bl	800f320 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800f8fe:	f003 fd84 	bl	801340a <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800f902:	4b26      	ldr	r3, [pc, #152]	; (800f99c <LoRaMacProcess+0xac>)
 800f904:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f908:	f003 0320 	and.w	r3, r3, #32
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d025      	beq.n	800f95e <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800f912:	2000      	movs	r0, #0
 800f914:	f7ff fd6c 	bl	800f3f0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800f918:	f7ff ff00 	bl	800f71c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800f91c:	f001 ffee 	bl	80118fc <IsRequestPending>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d006      	beq.n	800f934 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800f926:	f7ff feb3 	bl	800f690 <LoRaMacCheckForBeaconAcquisition>
 800f92a:	4603      	mov	r3, r0
 800f92c:	461a      	mov	r2, r3
 800f92e:	79fb      	ldrb	r3, [r7, #7]
 800f930:	4313      	orrs	r3, r2
 800f932:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800f934:	79fb      	ldrb	r3, [r7, #7]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d103      	bne.n	800f942 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800f93a:	f7ff fe73 	bl	800f624 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800f93e:	f7ff fe15 	bl	800f56c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800f942:	f7ff fd65 	bl	800f410 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800f946:	f7ff fdc5 	bl	800f4d4 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f94a:	2001      	movs	r0, #1
 800f94c:	f7ff fd50 	bl	800f3f0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f950:	4a12      	ldr	r2, [pc, #72]	; (800f99c <LoRaMacProcess+0xac>)
 800f952:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f95a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800f95e:	f7ff fdcd 	bl	800f4fc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800f962:	4b0e      	ldr	r3, [pc, #56]	; (800f99c <LoRaMacProcess+0xac>)
 800f964:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f968:	2b02      	cmp	r3, #2
 800f96a:	d101      	bne.n	800f970 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800f96c:	f001 fbe0 	bl	8011130 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800f970:	4b0a      	ldr	r3, [pc, #40]	; (800f99c <LoRaMacProcess+0xac>)
 800f972:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d009      	beq.n	800f994 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800f980:	4a06      	ldr	r2, [pc, #24]	; (800f99c <LoRaMacProcess+0xac>)
 800f982:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f986:	f36f 1386 	bfc	r3, #6, #1
 800f98a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800f98e:	4804      	ldr	r0, [pc, #16]	; (800f9a0 <LoRaMacProcess+0xb0>)
 800f990:	f7ff fee4 	bl	800f75c <LoRaMacHandleNvm>
    }
}
 800f994:	bf00      	nop
 800f996:	3708      	adds	r7, #8
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	20000788 	.word	0x20000788
 800f9a0:	20000ca8 	.word	0x20000ca8

0800f9a4 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b082      	sub	sp, #8
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800f9ac:	481e      	ldr	r0, [pc, #120]	; (800fa28 <OnTxDelayedTimerEvent+0x84>)
 800f9ae:	f00d f9e1 	bl	801cd74 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f9b2:	4b1e      	ldr	r3, [pc, #120]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9b4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9b8:	f023 0320 	bic.w	r3, r3, #32
 800f9bc:	4a1b      	ldr	r2, [pc, #108]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9be:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f9c2:	4b1b      	ldr	r3, [pc, #108]	; (800fa30 <OnTxDelayedTimerEvent+0x8c>)
 800f9c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9c8:	4a18      	ldr	r2, [pc, #96]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9ca:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7ff ff6f 	bl	800f8b4 <LoRaMacHandleResponseTimeout>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d11e      	bne.n	800fa1a <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800f9dc:	2001      	movs	r0, #1
 800f9de:	f001 f92d 	bl	8010c3c <ScheduleTx>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d01a      	beq.n	800fa1e <OnTxDelayedTimerEvent+0x7a>
 800f9e8:	2b0b      	cmp	r3, #11
 800f9ea:	d018      	beq.n	800fa1e <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f9ec:	4b10      	ldr	r3, [pc, #64]	; (800fa30 <OnTxDelayedTimerEvent+0x8c>)
 800f9ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	4b0d      	ldr	r3, [pc, #52]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9f6:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f9fa:	4b0c      	ldr	r3, [pc, #48]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800f9fc:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800fa00:	4b0a      	ldr	r3, [pc, #40]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800fa02:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800fa06:	4b09      	ldr	r3, [pc, #36]	; (800fa2c <OnTxDelayedTimerEvent+0x88>)
 800fa08:	2209      	movs	r2, #9
 800fa0a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800fa0e:	2009      	movs	r0, #9
 800fa10:	f004 f918 	bl	8013c44 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800fa14:	f001 ff18 	bl	8011848 <StopRetransmission>
            break;
 800fa18:	e002      	b.n	800fa20 <OnTxDelayedTimerEvent+0x7c>
        return;
 800fa1a:	bf00      	nop
 800fa1c:	e000      	b.n	800fa20 <OnTxDelayedTimerEvent+0x7c>
            break;
 800fa1e:	bf00      	nop
        }
    }
}
 800fa20:	3708      	adds	r7, #8
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
 800fa26:	bf00      	nop
 800fa28:	20000af0 	.word	0x20000af0
 800fa2c:	20000788 	.word	0x20000788
 800fa30:	20000ca8 	.word	0x20000ca8

0800fa34 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b082      	sub	sp, #8
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800fa3c:	4b17      	ldr	r3, [pc, #92]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa3e:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800fa42:	4b16      	ldr	r3, [pc, #88]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa44:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800fa48:	4b15      	ldr	r3, [pc, #84]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa4a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800fa4e:	b25a      	sxtb	r2, r3
 800fa50:	4b12      	ldr	r3, [pc, #72]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa52:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fa56:	4b12      	ldr	r3, [pc, #72]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa58:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fa5c:	4b0f      	ldr	r3, [pc, #60]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa5e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fa62:	4b0f      	ldr	r3, [pc, #60]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa64:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fa68:	4b0c      	ldr	r3, [pc, #48]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa6a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800fa6e:	4b0b      	ldr	r3, [pc, #44]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800fa76:	4b09      	ldr	r3, [pc, #36]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fa7e:	4b08      	ldr	r3, [pc, #32]	; (800faa0 <OnRxWindow1TimerEvent+0x6c>)
 800fa80:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800fa84:	4b05      	ldr	r3, [pc, #20]	; (800fa9c <OnRxWindow1TimerEvent+0x68>)
 800fa86:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800fa8a:	4906      	ldr	r1, [pc, #24]	; (800faa4 <OnRxWindow1TimerEvent+0x70>)
 800fa8c:	4806      	ldr	r0, [pc, #24]	; (800faa8 <OnRxWindow1TimerEvent+0x74>)
 800fa8e:	f001 fb1b 	bl	80110c8 <RxWindowSetup>
}
 800fa92:	bf00      	nop
 800fa94:	3708      	adds	r7, #8
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	20000788 	.word	0x20000788
 800faa0:	20000ca8 	.word	0x20000ca8
 800faa4:	20000b40 	.word	0x20000b40
 800faa8:	20000b08 	.word	0x20000b08

0800faac <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b082      	sub	sp, #8
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800fab4:	4b19      	ldr	r3, [pc, #100]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fab6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d029      	beq.n	800fb12 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800fabe:	4b17      	ldr	r3, [pc, #92]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fac0:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800fac4:	4b15      	ldr	r3, [pc, #84]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fac6:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800faca:	4b15      	ldr	r3, [pc, #84]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800facc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800face:	4a13      	ldr	r2, [pc, #76]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fad0:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fad4:	4b12      	ldr	r3, [pc, #72]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800fad6:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fada:	4b10      	ldr	r3, [pc, #64]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fadc:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fae0:	4b0f      	ldr	r3, [pc, #60]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800fae2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fae6:	4b0d      	ldr	r3, [pc, #52]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fae8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800faec:	4b0b      	ldr	r3, [pc, #44]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800faee:	2200      	movs	r2, #0
 800faf0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800faf4:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800faf6:	2201      	movs	r2, #1
 800faf8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800fafc:	4b08      	ldr	r3, [pc, #32]	; (800fb20 <OnRxWindow2TimerEvent+0x74>)
 800fafe:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800fb02:	4b06      	ldr	r3, [pc, #24]	; (800fb1c <OnRxWindow2TimerEvent+0x70>)
 800fb04:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800fb08:	4906      	ldr	r1, [pc, #24]	; (800fb24 <OnRxWindow2TimerEvent+0x78>)
 800fb0a:	4807      	ldr	r0, [pc, #28]	; (800fb28 <OnRxWindow2TimerEvent+0x7c>)
 800fb0c:	f001 fadc 	bl	80110c8 <RxWindowSetup>
 800fb10:	e000      	b.n	800fb14 <OnRxWindow2TimerEvent+0x68>
        return;
 800fb12:	bf00      	nop
}
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20000788 	.word	0x20000788
 800fb20:	20000ca8 	.word	0x20000ca8
 800fb24:	20000b58 	.word	0x20000b58
 800fb28:	20000b20 	.word	0x20000b20

0800fb2c <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b082      	sub	sp, #8
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800fb34:	480f      	ldr	r0, [pc, #60]	; (800fb74 <OnRetransmitTimeoutTimerEvent+0x48>)
 800fb36:	f00d f91d 	bl	801cd74 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800fb3a:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fb3c:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800fb44:	4b0c      	ldr	r3, [pc, #48]	; (800fb78 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	; (800fb78 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fb4e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00a      	beq.n	800fb6c <OnRetransmitTimeoutTimerEvent+0x40>
 800fb56:	4b08      	ldr	r3, [pc, #32]	; (800fb78 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fb58:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d004      	beq.n	800fb6c <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800fb62:	4b05      	ldr	r3, [pc, #20]	; (800fb78 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800fb64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800fb68:	691b      	ldr	r3, [r3, #16]
 800fb6a:	4798      	blx	r3
    }
}
 800fb6c:	bf00      	nop
 800fb6e:	3708      	adds	r7, #8
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	20000b8c 	.word	0x20000b8c
 800fb78:	20000788 	.word	0x20000788

0800fb7c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b084      	sub	sp, #16
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60ba      	str	r2, [r7, #8]
 800fb84:	607b      	str	r3, [r7, #4]
 800fb86:	4603      	mov	r3, r0
 800fb88:	73fb      	strb	r3, [r7, #15]
 800fb8a:	460b      	mov	r3, r1
 800fb8c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d005      	beq.n	800fba0 <GetFCntDown+0x24>
 800fb94:	69bb      	ldr	r3, [r7, #24]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d002      	beq.n	800fba0 <GetFCntDown+0x24>
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d101      	bne.n	800fba4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800fba0:	2309      	movs	r3, #9
 800fba2:	e028      	b.n	800fbf6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800fba4:	7bfb      	ldrb	r3, [r7, #15]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d016      	beq.n	800fbd8 <GetFCntDown+0x5c>
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d118      	bne.n	800fbe0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800fbae:	79bb      	ldrb	r3, [r7, #6]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d10d      	bne.n	800fbd0 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800fbb4:	7bbb      	ldrb	r3, [r7, #14]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d002      	beq.n	800fbc0 <GetFCntDown+0x44>
 800fbba:	7bbb      	ldrb	r3, [r7, #14]
 800fbbc:	2b03      	cmp	r3, #3
 800fbbe:	d103      	bne.n	800fbc8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	2202      	movs	r2, #2
 800fbc4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800fbc6:	e00d      	b.n	800fbe4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	2201      	movs	r2, #1
 800fbcc:	701a      	strb	r2, [r3, #0]
            break;
 800fbce:	e009      	b.n	800fbe4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	2203      	movs	r2, #3
 800fbd4:	701a      	strb	r2, [r3, #0]
            break;
 800fbd6:	e005      	b.n	800fbe4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800fbd8:	69bb      	ldr	r3, [r7, #24]
 800fbda:	2204      	movs	r2, #4
 800fbdc:	701a      	strb	r2, [r3, #0]
            break;
 800fbde:	e001      	b.n	800fbe4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800fbe0:	2305      	movs	r3, #5
 800fbe2:	e008      	b.n	800fbf6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800fbe4:	69bb      	ldr	r3, [r7, #24]
 800fbe6:	7818      	ldrb	r0, [r3, #0]
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	89db      	ldrh	r3, [r3, #14]
 800fbec:	69fa      	ldr	r2, [r7, #28]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	f004 fc52 	bl	8014498 <LoRaMacCryptoGetFCntDown>
 800fbf4:	4603      	mov	r3, r0
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}
	...

0800fc00 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800fc00:	b5b0      	push	{r4, r5, r7, lr}
 800fc02:	b084      	sub	sp, #16
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	4603      	mov	r3, r0
 800fc08:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800fc0e:	4b62      	ldr	r3, [pc, #392]	; (800fd98 <SwitchClass+0x198>)
 800fc10:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	f000 80a7 	beq.w	800fd68 <SwitchClass+0x168>
 800fc1a:	2b02      	cmp	r3, #2
 800fc1c:	f300 80b6 	bgt.w	800fd8c <SwitchClass+0x18c>
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d003      	beq.n	800fc2c <SwitchClass+0x2c>
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	f000 8091 	beq.w	800fd4c <SwitchClass+0x14c>
 800fc2a:	e0af      	b.n	800fd8c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800fc2c:	79fb      	ldrb	r3, [r7, #7]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d107      	bne.n	800fc42 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800fc32:	4b59      	ldr	r3, [pc, #356]	; (800fd98 <SwitchClass+0x198>)
 800fc34:	4a58      	ldr	r2, [pc, #352]	; (800fd98 <SwitchClass+0x198>)
 800fc36:	336c      	adds	r3, #108	; 0x6c
 800fc38:	3264      	adds	r2, #100	; 0x64
 800fc3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc3e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800fc42:	79fb      	ldrb	r3, [r7, #7]
 800fc44:	2b01      	cmp	r3, #1
 800fc46:	d10c      	bne.n	800fc62 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800fc48:	79fb      	ldrb	r3, [r7, #7]
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f003 fb74 	bl	8013338 <LoRaMacClassBSwitchClass>
 800fc50:	4603      	mov	r3, r0
 800fc52:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800fc54:	7bfb      	ldrb	r3, [r7, #15]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d103      	bne.n	800fc62 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc5a:	4a4f      	ldr	r2, [pc, #316]	; (800fd98 <SwitchClass+0x198>)
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	2b02      	cmp	r3, #2
 800fc66:	f040 808c 	bne.w	800fd82 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fc6a:	4a4b      	ldr	r2, [pc, #300]	; (800fd98 <SwitchClass+0x198>)
 800fc6c:	79fb      	ldrb	r3, [r7, #7]
 800fc6e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800fc72:	4a4a      	ldr	r2, [pc, #296]	; (800fd9c <SwitchClass+0x19c>)
 800fc74:	4b49      	ldr	r3, [pc, #292]	; (800fd9c <SwitchClass+0x19c>)
 800fc76:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800fc7a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800fc7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fc80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fc82:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fc86:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fc8a:	4b44      	ldr	r3, [pc, #272]	; (800fd9c <SwitchClass+0x19c>)
 800fc8c:	2202      	movs	r2, #2
 800fc8e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fc92:	2300      	movs	r3, #0
 800fc94:	73bb      	strb	r3, [r7, #14]
 800fc96:	e049      	b.n	800fd2c <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800fc98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc9c:	4a3e      	ldr	r2, [pc, #248]	; (800fd98 <SwitchClass+0x198>)
 800fc9e:	212c      	movs	r1, #44	; 0x2c
 800fca0:	fb01 f303 	mul.w	r3, r1, r3
 800fca4:	4413      	add	r3, r2
 800fca6:	33da      	adds	r3, #218	; 0xda
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d038      	beq.n	800fd20 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800fcae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcb2:	4a39      	ldr	r2, [pc, #228]	; (800fd98 <SwitchClass+0x198>)
 800fcb4:	212c      	movs	r1, #44	; 0x2c
 800fcb6:	fb01 f303 	mul.w	r3, r1, r3
 800fcba:	4413      	add	r3, r2
 800fcbc:	33f0      	adds	r3, #240	; 0xf0
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a35      	ldr	r2, [pc, #212]	; (800fd98 <SwitchClass+0x198>)
 800fcc2:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800fcc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcc8:	4a33      	ldr	r2, [pc, #204]	; (800fd98 <SwitchClass+0x198>)
 800fcca:	212c      	movs	r1, #44	; 0x2c
 800fccc:	fb01 f303 	mul.w	r3, r1, r3
 800fcd0:	4413      	add	r3, r2
 800fcd2:	33f4      	adds	r3, #244	; 0xf4
 800fcd4:	f993 3000 	ldrsb.w	r3, [r3]
 800fcd8:	b2da      	uxtb	r2, r3
 800fcda:	4b2f      	ldr	r3, [pc, #188]	; (800fd98 <SwitchClass+0x198>)
 800fcdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fce0:	4b2e      	ldr	r3, [pc, #184]	; (800fd9c <SwitchClass+0x19c>)
 800fce2:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800fce6:	4b2d      	ldr	r3, [pc, #180]	; (800fd9c <SwitchClass+0x19c>)
 800fce8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fcec:	4b2a      	ldr	r3, [pc, #168]	; (800fd98 <SwitchClass+0x198>)
 800fcee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcf0:	4a2a      	ldr	r2, [pc, #168]	; (800fd9c <SwitchClass+0x19c>)
 800fcf2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fcf6:	4b28      	ldr	r3, [pc, #160]	; (800fd98 <SwitchClass+0x198>)
 800fcf8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fcfc:	4b27      	ldr	r3, [pc, #156]	; (800fd9c <SwitchClass+0x19c>)
 800fcfe:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fd02:	4b25      	ldr	r3, [pc, #148]	; (800fd98 <SwitchClass+0x198>)
 800fd04:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800fd08:	4b24      	ldr	r3, [pc, #144]	; (800fd9c <SwitchClass+0x19c>)
 800fd0a:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800fd0e:	4b23      	ldr	r3, [pc, #140]	; (800fd9c <SwitchClass+0x19c>)
 800fd10:	2203      	movs	r2, #3
 800fd12:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800fd16:	4b21      	ldr	r3, [pc, #132]	; (800fd9c <SwitchClass+0x19c>)
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800fd1e:	e009      	b.n	800fd34 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800fd20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	3301      	adds	r3, #1
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	73bb      	strb	r3, [r7, #14]
 800fd2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	ddb1      	ble.n	800fc98 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800fd34:	4b19      	ldr	r3, [pc, #100]	; (800fd9c <SwitchClass+0x19c>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800fd3c:	4b18      	ldr	r3, [pc, #96]	; (800fda0 <SwitchClass+0x1a0>)
 800fd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd40:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800fd42:	f001 f9f5 	bl	8011130 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800fd46:	2300      	movs	r3, #0
 800fd48:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fd4a:	e01a      	b.n	800fd82 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f003 faf2 	bl	8013338 <LoRaMacClassBSwitchClass>
 800fd54:	4603      	mov	r3, r0
 800fd56:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800fd58:	7bfb      	ldrb	r3, [r7, #15]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d113      	bne.n	800fd86 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd5e:	4a0e      	ldr	r2, [pc, #56]	; (800fd98 <SwitchClass+0x198>)
 800fd60:	79fb      	ldrb	r3, [r7, #7]
 800fd62:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800fd66:	e00e      	b.n	800fd86 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800fd68:	79fb      	ldrb	r3, [r7, #7]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d10d      	bne.n	800fd8a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800fd6e:	4a0a      	ldr	r2, [pc, #40]	; (800fd98 <SwitchClass+0x198>)
 800fd70:	79fb      	ldrb	r3, [r7, #7]
 800fd72:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800fd76:	4b0a      	ldr	r3, [pc, #40]	; (800fda0 <SwitchClass+0x1a0>)
 800fd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800fd80:	e003      	b.n	800fd8a <SwitchClass+0x18a>
            break;
 800fd82:	bf00      	nop
 800fd84:	e002      	b.n	800fd8c <SwitchClass+0x18c>
            break;
 800fd86:	bf00      	nop
 800fd88:	e000      	b.n	800fd8c <SwitchClass+0x18c>
            break;
 800fd8a:	bf00      	nop
        }
    }

    return status;
 800fd8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bdb0      	pop	{r4, r5, r7, pc}
 800fd96:	bf00      	nop
 800fd98:	20000ca8 	.word	0x20000ca8
 800fd9c:	20000788 	.word	0x20000788
 800fda0:	0801eef8 	.word	0x0801eef8

0800fda4 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b086      	sub	sp, #24
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	4603      	mov	r3, r0
 800fdac:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fdae:	4b10      	ldr	r3, [pc, #64]	; (800fdf0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fdb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fdb4:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800fdb6:	79fb      	ldrb	r3, [r7, #7]
 800fdb8:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800fdba:	230d      	movs	r3, #13
 800fdbc:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800fdbe:	4b0c      	ldr	r3, [pc, #48]	; (800fdf0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fdc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d001      	beq.n	800fdcc <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800fdc8:	230e      	movs	r3, #14
 800fdca:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fdcc:	4b08      	ldr	r3, [pc, #32]	; (800fdf0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800fdce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdd2:	f107 0210 	add.w	r2, r7, #16
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f005 f9c0 	bl	801515e <RegionGetPhyParam>
 800fdde:	4603      	mov	r3, r0
 800fde0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	b2db      	uxtb	r3, r3
}
 800fde6:	4618      	mov	r0, r3
 800fde8:	3718      	adds	r7, #24
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	20000ca8 	.word	0x20000ca8

0800fdf4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	71fb      	strb	r3, [r7, #7]
 800fdfe:	460b      	mov	r3, r1
 800fe00:	71bb      	strb	r3, [r7, #6]
 800fe02:	4613      	mov	r3, r2
 800fe04:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800fe06:	2300      	movs	r3, #0
 800fe08:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800fe0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7ff ffc6 	bl	800fda4 <GetMaxAppPayloadWithoutFOptsLength>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800fe1c:	79fb      	ldrb	r3, [r7, #7]
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	797b      	ldrb	r3, [r7, #5]
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	4413      	add	r3, r2
 800fe26:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800fe28:	89ba      	ldrh	r2, [r7, #12]
 800fe2a:	89fb      	ldrh	r3, [r7, #14]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d804      	bhi.n	800fe3a <ValidatePayloadLength+0x46>
 800fe30:	89bb      	ldrh	r3, [r7, #12]
 800fe32:	2bff      	cmp	r3, #255	; 0xff
 800fe34:	d801      	bhi.n	800fe3a <ValidatePayloadLength+0x46>
    {
        return true;
 800fe36:	2301      	movs	r3, #1
 800fe38:	e000      	b.n	800fe3c <ValidatePayloadLength+0x48>
    }
    return false;
 800fe3a:	2300      	movs	r3, #0
}
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	3710      	adds	r7, #16
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800fe44:	b590      	push	{r4, r7, lr}
 800fe46:	b0a5      	sub	sp, #148	; 0x94
 800fe48:	af02      	add	r7, sp, #8
 800fe4a:	6078      	str	r0, [r7, #4]
 800fe4c:	4608      	mov	r0, r1
 800fe4e:	4611      	mov	r1, r2
 800fe50:	461a      	mov	r2, r3
 800fe52:	4603      	mov	r3, r0
 800fe54:	70fb      	strb	r3, [r7, #3]
 800fe56:	460b      	mov	r3, r1
 800fe58:	70bb      	strb	r3, [r7, #2]
 800fe5a:	4613      	mov	r3, r2
 800fe5c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800fe64:	2300      	movs	r3, #0
 800fe66:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800fe70:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	f000 84ab 	beq.w	80107d0 <ProcessMacCommands+0x98c>
 800fe7a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	f040 84ac 	bne.w	80107dc <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800fe84:	f000 bca4 	b.w	80107d0 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800fe88:	78fb      	ldrb	r3, [r7, #3]
 800fe8a:	687a      	ldr	r2, [r7, #4]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f003 fd33 	bl	80138fc <LoRaMacCommandsGetCmdSize>
 800fe96:	4603      	mov	r3, r0
 800fe98:	461a      	mov	r2, r3
 800fe9a:	78fb      	ldrb	r3, [r7, #3]
 800fe9c:	441a      	add	r2, r3
 800fe9e:	78bb      	ldrb	r3, [r7, #2]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	f300 849d 	bgt.w	80107e0 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800fea6:	78fb      	ldrb	r3, [r7, #3]
 800fea8:	1c5a      	adds	r2, r3, #1
 800feaa:	70fa      	strb	r2, [r7, #3]
 800feac:	461a      	mov	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	4413      	add	r3, r2
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	3b02      	subs	r3, #2
 800feb6:	2b11      	cmp	r3, #17
 800feb8:	f200 8494 	bhi.w	80107e4 <ProcessMacCommands+0x9a0>
 800febc:	a201      	add	r2, pc, #4	; (adr r2, 800fec4 <ProcessMacCommands+0x80>)
 800febe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec2:	bf00      	nop
 800fec4:	0800ff0d 	.word	0x0800ff0d
 800fec8:	0800ff4f 	.word	0x0800ff4f
 800fecc:	080100cb 	.word	0x080100cb
 800fed0:	08010109 	.word	0x08010109
 800fed4:	08010201 	.word	0x08010201
 800fed8:	08010251 	.word	0x08010251
 800fedc:	0801030d 	.word	0x0801030d
 800fee0:	08010363 	.word	0x08010363
 800fee4:	08010447 	.word	0x08010447
 800fee8:	080107e5 	.word	0x080107e5
 800feec:	080107e5 	.word	0x080107e5
 800fef0:	080104f1 	.word	0x080104f1
 800fef4:	080107e5 	.word	0x080107e5
 800fef8:	080107e5 	.word	0x080107e5
 800fefc:	08010611 	.word	0x08010611
 800ff00:	08010645 	.word	0x08010645
 800ff04:	080106d5 	.word	0x080106d5
 800ff08:	0801074b 	.word	0x0801074b
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800ff0c:	2004      	movs	r0, #4
 800ff0e:	f003 fecd 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 845b 	beq.w	80107d0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800ff1a:	2104      	movs	r1, #4
 800ff1c:	2000      	movs	r0, #0
 800ff1e:	f003 fe39 	bl	8013b94 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800ff22:	78fb      	ldrb	r3, [r7, #3]
 800ff24:	1c5a      	adds	r2, r3, #1
 800ff26:	70fa      	strb	r2, [r7, #3]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	781a      	ldrb	r2, [r3, #0]
 800ff30:	4bb0      	ldr	r3, [pc, #704]	; (80101f4 <ProcessMacCommands+0x3b0>)
 800ff32:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800ff36:	78fb      	ldrb	r3, [r7, #3]
 800ff38:	1c5a      	adds	r2, r3, #1
 800ff3a:	70fa      	strb	r2, [r7, #3]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	4413      	add	r3, r2
 800ff42:	781a      	ldrb	r2, [r3, #0]
 800ff44:	4bab      	ldr	r3, [pc, #684]	; (80101f4 <ProcessMacCommands+0x3b0>)
 800ff46:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 800ff4a:	f000 bc41 	b.w	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800ff4e:	2300      	movs	r3, #0
 800ff50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800ff60:	2300      	movs	r3, #0
 800ff62:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800ff66:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ff6a:	f083 0301 	eor.w	r3, r3, #1
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f000 80a5 	beq.w	80100c0 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800ff76:	2301      	movs	r3, #1
 800ff78:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800ff7c:	78fb      	ldrb	r3, [r7, #3]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	4413      	add	r3, r2
 800ff84:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800ff86:	4b9c      	ldr	r3, [pc, #624]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ff88:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800ff8c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ff90:	4b99      	ldr	r3, [pc, #612]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ff92:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ff96:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800ff9a:	4b97      	ldr	r3, [pc, #604]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ff9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ffa0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ffa4:	4b94      	ldr	r3, [pc, #592]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ffa6:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800ffaa:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800ffae:	4b92      	ldr	r3, [pc, #584]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ffb0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800ffb4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800ffb8:	4b8f      	ldr	r3, [pc, #572]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ffba:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ffbe:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800ffc0:	4b8d      	ldr	r3, [pc, #564]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ffc2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d008      	beq.n	800ffdc <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800ffca:	78ba      	ldrb	r2, [r7, #2]
 800ffcc:	78fb      	ldrb	r3, [r7, #3]
 800ffce:	1ad3      	subs	r3, r2, r3
 800ffd0:	b2db      	uxtb	r3, r3
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	b2db      	uxtb	r3, r3
 800ffd6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800ffda:	e002      	b.n	800ffe2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800ffdc:	2305      	movs	r3, #5
 800ffde:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800ffe2:	4b85      	ldr	r3, [pc, #532]	; (80101f8 <ProcessMacCommands+0x3b4>)
 800ffe4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ffe8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800ffec:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800fff0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fff4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fff8:	9301      	str	r3, [sp, #4]
 800fffa:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800fffe:	9300      	str	r3, [sp, #0]
 8010000:	4623      	mov	r3, r4
 8010002:	f005 f9b3 	bl	801536c <RegionLinkAdrReq>
 8010006:	4603      	mov	r3, r0
 8010008:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 801000c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010010:	f003 0307 	and.w	r3, r3, #7
 8010014:	2b07      	cmp	r3, #7
 8010016:	d119      	bne.n	801004c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010018:	4b77      	ldr	r3, [pc, #476]	; (80101f8 <ProcessMacCommands+0x3b4>)
 801001a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801001e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8010022:	429a      	cmp	r2, r3
 8010024:	da03      	bge.n	801002e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8010026:	4b74      	ldr	r3, [pc, #464]	; (80101f8 <ProcessMacCommands+0x3b4>)
 8010028:	2201      	movs	r2, #1
 801002a:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801002e:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8010032:	4b71      	ldr	r3, [pc, #452]	; (80101f8 <ProcessMacCommands+0x3b4>)
 8010034:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010038:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801003c:	4b6e      	ldr	r3, [pc, #440]	; (80101f8 <ProcessMacCommands+0x3b4>)
 801003e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8010042:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010046:	4b6c      	ldr	r3, [pc, #432]	; (80101f8 <ProcessMacCommands+0x3b4>)
 8010048:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801004c:	2300      	movs	r3, #0
 801004e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010052:	e00b      	b.n	801006c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010054:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8010058:	2201      	movs	r2, #1
 801005a:	4619      	mov	r1, r3
 801005c:	2003      	movs	r0, #3
 801005e:	f003 fafd 	bl	801365c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010062:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010066:	3301      	adds	r3, #1
 8010068:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801006c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8010070:	4a62      	ldr	r2, [pc, #392]	; (80101fc <ProcessMacCommands+0x3b8>)
 8010072:	fba2 2303 	umull	r2, r3, r2, r3
 8010076:	089b      	lsrs	r3, r3, #2
 8010078:	b2db      	uxtb	r3, r3
 801007a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801007e:	429a      	cmp	r2, r3
 8010080:	d3e8      	bcc.n	8010054 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 8010082:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8010086:	78fb      	ldrb	r3, [r7, #3]
 8010088:	4413      	add	r3, r2
 801008a:	b2db      	uxtb	r3, r3
 801008c:	3b01      	subs	r3, #1
 801008e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 8010090:	78fa      	ldrb	r2, [r7, #3]
 8010092:	78bb      	ldrb	r3, [r7, #2]
 8010094:	429a      	cmp	r2, r3
 8010096:	d20a      	bcs.n	80100ae <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8010098:	78fb      	ldrb	r3, [r7, #3]
 801009a:	1c5a      	adds	r2, r3, #1
 801009c:	70fa      	strb	r2, [r7, #3]
 801009e:	461a      	mov	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4413      	add	r3, r2
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	2b03      	cmp	r3, #3
 80100a8:	f43f af68 	beq.w	800ff7c <ProcessMacCommands+0x138>
 80100ac:	e000      	b.n	80100b0 <ProcessMacCommands+0x26c>
                            break;
 80100ae:	bf00      	nop

                    if( macIndex < commandsSize )
 80100b0:	78fa      	ldrb	r2, [r7, #3]
 80100b2:	78bb      	ldrb	r3, [r7, #2]
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d206      	bcs.n	80100c6 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80100b8:	78fb      	ldrb	r3, [r7, #3]
 80100ba:	3b01      	subs	r3, #1
 80100bc:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80100be:	e002      	b.n	80100c6 <ProcessMacCommands+0x282>
                    macIndex += 4;
 80100c0:	78fb      	ldrb	r3, [r7, #3]
 80100c2:	3304      	adds	r3, #4
 80100c4:	70fb      	strb	r3, [r7, #3]
                break;
 80100c6:	bf00      	nop
 80100c8:	e382      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80100ca:	78fb      	ldrb	r3, [r7, #3]
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	70fa      	strb	r2, [r7, #3]
 80100d0:	461a      	mov	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4413      	add	r3, r2
 80100d6:	781b      	ldrb	r3, [r3, #0]
 80100d8:	f003 030f 	and.w	r3, r3, #15
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	4b46      	ldr	r3, [pc, #280]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80100e0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80100e4:	4b44      	ldr	r3, [pc, #272]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80100e6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80100ea:	461a      	mov	r2, r3
 80100ec:	2301      	movs	r3, #1
 80100ee:	4093      	lsls	r3, r2
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	4b41      	ldr	r3, [pc, #260]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80100f4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 80100f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80100fc:	2200      	movs	r2, #0
 80100fe:	4619      	mov	r1, r3
 8010100:	2004      	movs	r0, #4
 8010102:	f003 faab 	bl	801365c <LoRaMacCommandsAddCmd>
                break;
 8010106:	e363      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010108:	2307      	movs	r3, #7
 801010a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801010e:	78fb      	ldrb	r3, [r7, #3]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	4413      	add	r3, r2
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	091b      	lsrs	r3, r3, #4
 8010118:	b2db      	uxtb	r3, r3
 801011a:	b25b      	sxtb	r3, r3
 801011c:	f003 0307 	and.w	r3, r3, #7
 8010120:	b25b      	sxtb	r3, r3
 8010122:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010126:	78fb      	ldrb	r3, [r7, #3]
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	4413      	add	r3, r2
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	b25b      	sxtb	r3, r3
 8010130:	f003 030f 	and.w	r3, r3, #15
 8010134:	b25b      	sxtb	r3, r3
 8010136:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801013a:	78fb      	ldrb	r3, [r7, #3]
 801013c:	3301      	adds	r3, #1
 801013e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8010140:	78fb      	ldrb	r3, [r7, #3]
 8010142:	1c5a      	adds	r2, r3, #1
 8010144:	70fa      	strb	r2, [r7, #3]
 8010146:	461a      	mov	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4413      	add	r3, r2
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	1c5a      	adds	r2, r3, #1
 8010154:	70fa      	strb	r2, [r7, #3]
 8010156:	461a      	mov	r2, r3
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4413      	add	r3, r2
 801015c:	781b      	ldrb	r3, [r3, #0]
 801015e:	021a      	lsls	r2, r3, #8
 8010160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010162:	4313      	orrs	r3, r2
 8010164:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010166:	78fb      	ldrb	r3, [r7, #3]
 8010168:	1c5a      	adds	r2, r3, #1
 801016a:	70fa      	strb	r2, [r7, #3]
 801016c:	461a      	mov	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4413      	add	r3, r2
 8010172:	781b      	ldrb	r3, [r3, #0]
 8010174:	041a      	lsls	r2, r3, #16
 8010176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010178:	4313      	orrs	r3, r2
 801017a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 801017c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017e:	2264      	movs	r2, #100	; 0x64
 8010180:	fb02 f303 	mul.w	r3, r2, r3
 8010184:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8010186:	4b1c      	ldr	r3, [pc, #112]	; (80101f8 <ProcessMacCommands+0x3b4>)
 8010188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801018c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8010190:	4611      	mov	r1, r2
 8010192:	4618      	mov	r0, r3
 8010194:	f005 f911 	bl	80153ba <RegionRxParamSetupReq>
 8010198:	4603      	mov	r3, r0
 801019a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 801019e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	2b07      	cmp	r3, #7
 80101a8:	d117      	bne.n	80101da <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80101aa:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80101ae:	b2da      	uxtb	r2, r3
 80101b0:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80101b2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80101b6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	4b0e      	ldr	r3, [pc, #56]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80101be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80101c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101c4:	4a0c      	ldr	r2, [pc, #48]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80101c6:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80101c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ca:	4a0b      	ldr	r2, [pc, #44]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80101cc:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80101ce:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80101d2:	b2da      	uxtb	r2, r3
 80101d4:	4b08      	ldr	r3, [pc, #32]	; (80101f8 <ProcessMacCommands+0x3b4>)
 80101d6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 80101da:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80101de:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80101e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80101e6:	2201      	movs	r2, #1
 80101e8:	4619      	mov	r1, r3
 80101ea:	2005      	movs	r0, #5
 80101ec:	f003 fa36 	bl	801365c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 80101f0:	bf00      	nop
 80101f2:	e2ed      	b.n	80107d0 <ProcessMacCommands+0x98c>
 80101f4:	20000788 	.word	0x20000788
 80101f8:	20000ca8 	.word	0x20000ca8
 80101fc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8010200:	23ff      	movs	r3, #255	; 0xff
 8010202:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010206:	4bb7      	ldr	r3, [pc, #732]	; (80104e4 <ProcessMacCommands+0x6a0>)
 8010208:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801020c:	2b00      	cmp	r3, #0
 801020e:	d00d      	beq.n	801022c <ProcessMacCommands+0x3e8>
 8010210:	4bb4      	ldr	r3, [pc, #720]	; (80104e4 <ProcessMacCommands+0x6a0>)
 8010212:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d007      	beq.n	801022c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 801021c:	4bb1      	ldr	r3, [pc, #708]	; (80104e4 <ProcessMacCommands+0x6a0>)
 801021e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	4798      	blx	r3
 8010226:	4603      	mov	r3, r0
 8010228:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 801022c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8010230:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010234:	787b      	ldrb	r3, [r7, #1]
 8010236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801023a:	b2db      	uxtb	r3, r3
 801023c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8010240:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010244:	2202      	movs	r2, #2
 8010246:	4619      	mov	r1, r3
 8010248:	2006      	movs	r0, #6
 801024a:	f003 fa07 	bl	801365c <LoRaMacCommandsAddCmd>
                break;
 801024e:	e2bf      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8010250:	2303      	movs	r3, #3
 8010252:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010256:	78fb      	ldrb	r3, [r7, #3]
 8010258:	1c5a      	adds	r2, r3, #1
 801025a:	70fa      	strb	r2, [r7, #3]
 801025c:	461a      	mov	r2, r3
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4413      	add	r3, r2
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	b25b      	sxtb	r3, r3
 8010266:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801026a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801026e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	70fa      	strb	r2, [r7, #3]
 8010276:	461a      	mov	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	4413      	add	r3, r2
 801027c:	781b      	ldrb	r3, [r3, #0]
 801027e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8010280:	78fb      	ldrb	r3, [r7, #3]
 8010282:	1c5a      	adds	r2, r3, #1
 8010284:	70fa      	strb	r2, [r7, #3]
 8010286:	461a      	mov	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4413      	add	r3, r2
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	021a      	lsls	r2, r3, #8
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	4313      	orrs	r3, r2
 8010294:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010296:	78fb      	ldrb	r3, [r7, #3]
 8010298:	1c5a      	adds	r2, r3, #1
 801029a:	70fa      	strb	r2, [r7, #3]
 801029c:	461a      	mov	r2, r3
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	4413      	add	r3, r2
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	041a      	lsls	r2, r3, #16
 80102a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a8:	4313      	orrs	r3, r2
 80102aa:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80102ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ae:	2264      	movs	r2, #100	; 0x64
 80102b0:	fb02 f303 	mul.w	r3, r2, r3
 80102b4:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80102b6:	2300      	movs	r3, #0
 80102b8:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80102ba:	78fb      	ldrb	r3, [r7, #3]
 80102bc:	1c5a      	adds	r2, r3, #1
 80102be:	70fa      	strb	r2, [r7, #3]
 80102c0:	461a      	mov	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	4413      	add	r3, r2
 80102c6:	781b      	ldrb	r3, [r3, #0]
 80102c8:	b25b      	sxtb	r3, r3
 80102ca:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80102ce:	4b86      	ldr	r3, [pc, #536]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80102d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102d4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f005 f888 	bl	80153f0 <RegionNewChannelReq>
 80102e0:	4603      	mov	r3, r0
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80102e8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80102ec:	b25b      	sxtb	r3, r3
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	db0a      	blt.n	8010308 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 80102f2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80102f6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 80102fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80102fe:	2201      	movs	r2, #1
 8010300:	4619      	mov	r1, r3
 8010302:	2007      	movs	r0, #7
 8010304:	f003 f9aa 	bl	801365c <LoRaMacCommandsAddCmd>
                }
                break;
 8010308:	bf00      	nop
 801030a:	e261      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 801030c:	78fb      	ldrb	r3, [r7, #3]
 801030e:	1c5a      	adds	r2, r3, #1
 8010310:	70fa      	strb	r2, [r7, #3]
 8010312:	461a      	mov	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	4413      	add	r3, r2
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	f003 030f 	and.w	r3, r3, #15
 801031e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8010322:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010326:	2b00      	cmp	r3, #0
 8010328:	d104      	bne.n	8010334 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 801032a:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801032e:	3301      	adds	r3, #1
 8010330:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010334:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801033c:	fb02 f303 	mul.w	r3, r2, r3
 8010340:	461a      	mov	r2, r3
 8010342:	4b69      	ldr	r3, [pc, #420]	; (80104e8 <ProcessMacCommands+0x6a4>)
 8010344:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010346:	4b68      	ldr	r3, [pc, #416]	; (80104e8 <ProcessMacCommands+0x6a4>)
 8010348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801034a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801034e:	4a66      	ldr	r2, [pc, #408]	; (80104e8 <ProcessMacCommands+0x6a4>)
 8010350:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8010352:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010356:	2200      	movs	r2, #0
 8010358:	4619      	mov	r1, r3
 801035a:	2008      	movs	r0, #8
 801035c:	f003 f97e 	bl	801365c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 8010360:	e236      	b.n	80107d0 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8010362:	78fb      	ldrb	r3, [r7, #3]
 8010364:	1c5a      	adds	r2, r3, #1
 8010366:	70fa      	strb	r2, [r7, #3]
 8010368:	461a      	mov	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	4413      	add	r3, r2
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010374:	2300      	movs	r3, #0
 8010376:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8010380:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010384:	f003 0320 	and.w	r3, r3, #32
 8010388:	2b00      	cmp	r3, #0
 801038a:	d002      	beq.n	8010392 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 801038c:	2301      	movs	r3, #1
 801038e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8010392:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8010396:	f003 0310 	and.w	r3, r3, #16
 801039a:	2b00      	cmp	r3, #0
 801039c:	d002      	beq.n	80103a4 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 801039e:	2301      	movs	r3, #1
 80103a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80103a4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80103a8:	f003 030f 	and.w	r3, r3, #15
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80103b2:	4b4d      	ldr	r3, [pc, #308]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80103b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80103bc:	4611      	mov	r1, r2
 80103be:	4618      	mov	r0, r3
 80103c0:	f005 f831 	bl	8015426 <RegionTxParamSetupReq>
 80103c4:	4603      	mov	r3, r0
 80103c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ca:	d03a      	beq.n	8010442 <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80103cc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80103d0:	4b45      	ldr	r3, [pc, #276]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80103d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80103d6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80103da:	4b43      	ldr	r3, [pc, #268]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80103dc:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80103e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80103e4:	461a      	mov	r2, r3
 80103e6:	4b41      	ldr	r3, [pc, #260]	; (80104ec <ProcessMacCommands+0x6a8>)
 80103e8:	5c9b      	ldrb	r3, [r3, r2]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f0 fa42 	bl	8000874 <__aeabi_ui2f>
 80103f0:	4603      	mov	r3, r0
 80103f2:	4a3d      	ldr	r2, [pc, #244]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80103f4:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80103f6:	2302      	movs	r3, #2
 80103f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80103fc:	4b3a      	ldr	r3, [pc, #232]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80103fe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010402:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010406:	4b38      	ldr	r3, [pc, #224]	; (80104e8 <ProcessMacCommands+0x6a4>)
 8010408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801040c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010410:	4611      	mov	r1, r2
 8010412:	4618      	mov	r0, r3
 8010414:	f004 fea3 	bl	801515e <RegionGetPhyParam>
 8010418:	4603      	mov	r3, r0
 801041a:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 801041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041e:	b25a      	sxtb	r2, r3
 8010420:	4b31      	ldr	r3, [pc, #196]	; (80104e8 <ProcessMacCommands+0x6a4>)
 8010422:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010426:	4293      	cmp	r3, r2
 8010428:	bfb8      	it	lt
 801042a:	4613      	movlt	r3, r2
 801042c:	b25a      	sxtb	r2, r3
 801042e:	4b2e      	ldr	r3, [pc, #184]	; (80104e8 <ProcessMacCommands+0x6a4>)
 8010430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010434:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010438:	2200      	movs	r2, #0
 801043a:	4619      	mov	r1, r3
 801043c:	2009      	movs	r0, #9
 801043e:	f003 f90d 	bl	801365c <LoRaMacCommandsAddCmd>
                }
                break;
 8010442:	bf00      	nop
 8010444:	e1c4      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010446:	2303      	movs	r3, #3
 8010448:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 801044c:	78fb      	ldrb	r3, [r7, #3]
 801044e:	1c5a      	adds	r2, r3, #1
 8010450:	70fa      	strb	r2, [r7, #3]
 8010452:	461a      	mov	r2, r3
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4413      	add	r3, r2
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801045e:	78fb      	ldrb	r3, [r7, #3]
 8010460:	1c5a      	adds	r2, r3, #1
 8010462:	70fa      	strb	r2, [r7, #3]
 8010464:	461a      	mov	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4413      	add	r3, r2
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801046e:	78fb      	ldrb	r3, [r7, #3]
 8010470:	1c5a      	adds	r2, r3, #1
 8010472:	70fa      	strb	r2, [r7, #3]
 8010474:	461a      	mov	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4413      	add	r3, r2
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	021a      	lsls	r2, r3, #8
 801047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010480:	4313      	orrs	r3, r2
 8010482:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010484:	78fb      	ldrb	r3, [r7, #3]
 8010486:	1c5a      	adds	r2, r3, #1
 8010488:	70fa      	strb	r2, [r7, #3]
 801048a:	461a      	mov	r2, r3
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	4413      	add	r3, r2
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	041a      	lsls	r2, r3, #16
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	4313      	orrs	r3, r2
 8010498:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 801049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801049c:	2264      	movs	r2, #100	; 0x64
 801049e:	fb02 f303 	mul.w	r3, r2, r3
 80104a2:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80104a4:	4b10      	ldr	r3, [pc, #64]	; (80104e8 <ProcessMacCommands+0x6a4>)
 80104a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104aa:	f107 0220 	add.w	r2, r7, #32
 80104ae:	4611      	mov	r1, r2
 80104b0:	4618      	mov	r0, r3
 80104b2:	f004 ffd3 	bl	801545c <RegionDlChannelReq>
 80104b6:	4603      	mov	r3, r0
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80104be:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80104c2:	b25b      	sxtb	r3, r3
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	db0a      	blt.n	80104de <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 80104c8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80104cc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80104d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80104d4:	2201      	movs	r2, #1
 80104d6:	4619      	mov	r1, r3
 80104d8:	200a      	movs	r0, #10
 80104da:	f003 f8bf 	bl	801365c <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 80104de:	bf00      	nop
 80104e0:	e176      	b.n	80107d0 <ProcessMacCommands+0x98c>
 80104e2:	bf00      	nop
 80104e4:	20000788 	.word	0x20000788
 80104e8:	20000ca8 	.word	0x20000ca8
 80104ec:	0801ee2c 	.word	0x0801ee2c
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80104f0:	2009      	movs	r0, #9
 80104f2:	f003 fbdb 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	f000 8084 	beq.w	8010606 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80104fe:	2109      	movs	r1, #9
 8010500:	2000      	movs	r0, #0
 8010502:	f003 fb47 	bl	8013b94 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010506:	f107 0318 	add.w	r3, r7, #24
 801050a:	2200      	movs	r2, #0
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010510:	f107 0310 	add.w	r3, r7, #16
 8010514:	2200      	movs	r2, #0
 8010516:	601a      	str	r2, [r3, #0]
 8010518:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 801051a:	f107 0308 	add.w	r3, r7, #8
 801051e:	2200      	movs	r2, #0
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010524:	78fb      	ldrb	r3, [r7, #3]
 8010526:	1c5a      	adds	r2, r3, #1
 8010528:	70fa      	strb	r2, [r7, #3]
 801052a:	461a      	mov	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4413      	add	r3, r2
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010534:	78fb      	ldrb	r3, [r7, #3]
 8010536:	1c5a      	adds	r2, r3, #1
 8010538:	70fa      	strb	r2, [r7, #3]
 801053a:	461a      	mov	r2, r3
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4413      	add	r3, r2
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	021a      	lsls	r2, r3, #8
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	4313      	orrs	r3, r2
 8010548:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 801054a:	78fb      	ldrb	r3, [r7, #3]
 801054c:	1c5a      	adds	r2, r3, #1
 801054e:	70fa      	strb	r2, [r7, #3]
 8010550:	461a      	mov	r2, r3
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	4413      	add	r3, r2
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	041a      	lsls	r2, r3, #16
 801055a:	69bb      	ldr	r3, [r7, #24]
 801055c:	4313      	orrs	r3, r2
 801055e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010560:	78fb      	ldrb	r3, [r7, #3]
 8010562:	1c5a      	adds	r2, r3, #1
 8010564:	70fa      	strb	r2, [r7, #3]
 8010566:	461a      	mov	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	4413      	add	r3, r2
 801056c:	781b      	ldrb	r3, [r3, #0]
 801056e:	061a      	lsls	r2, r3, #24
 8010570:	69bb      	ldr	r3, [r7, #24]
 8010572:	4313      	orrs	r3, r2
 8010574:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010576:	78fb      	ldrb	r3, [r7, #3]
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	70fa      	strb	r2, [r7, #3]
 801057c:	461a      	mov	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4413      	add	r3, r2
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	b21b      	sxth	r3, r3
 8010586:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010588:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 801058c:	461a      	mov	r2, r3
 801058e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010592:	fb02 f303 	mul.w	r3, r2, r3
 8010596:	121b      	asrs	r3, r3, #8
 8010598:	b21b      	sxth	r3, r3
 801059a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 801059c:	f107 0310 	add.w	r3, r7, #16
 80105a0:	f107 0218 	add.w	r2, r7, #24
 80105a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105a8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80105ac:	693a      	ldr	r2, [r7, #16]
 80105ae:	4b8f      	ldr	r3, [pc, #572]	; (80107ec <ProcessMacCommands+0x9a8>)
 80105b0:	4413      	add	r3, r2
 80105b2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 80105b4:	f107 0308 	add.w	r3, r7, #8
 80105b8:	4618      	mov	r0, r3
 80105ba:	f00b ff77 	bl	801c4ac <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80105be:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80105c2:	4b8b      	ldr	r3, [pc, #556]	; (80107f0 <ProcessMacCommands+0x9ac>)
 80105c4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 80105c8:	9200      	str	r2, [sp, #0]
 80105ca:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 80105ce:	f107 0210 	add.w	r2, r7, #16
 80105d2:	ca06      	ldmia	r2, {r1, r2}
 80105d4:	f00b ff03 	bl	801c3de <SysTimeSub>
 80105d8:	f107 0010 	add.w	r0, r7, #16
 80105dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80105e2:	f107 0208 	add.w	r2, r7, #8
 80105e6:	ca06      	ldmia	r2, {r1, r2}
 80105e8:	f00b fec0 	bl	801c36c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 80105ec:	f107 0310 	add.w	r3, r7, #16
 80105f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80105f4:	f00b ff2c 	bl	801c450 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 80105f8:	f002 fedc 	bl	80133b4 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 80105fc:	4b7c      	ldr	r3, [pc, #496]	; (80107f0 <ProcessMacCommands+0x9ac>)
 80105fe:	2201      	movs	r2, #1
 8010600:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8010604:	e0e4      	b.n	80107d0 <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010606:	4b7a      	ldr	r3, [pc, #488]	; (80107f0 <ProcessMacCommands+0x9ac>)
 8010608:	2200      	movs	r2, #0
 801060a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 801060e:	e0df      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010610:	200c      	movs	r0, #12
 8010612:	f003 fb4b 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	f000 80d9 	beq.w	80107d0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 801061e:	210c      	movs	r1, #12
 8010620:	2000      	movs	r0, #0
 8010622:	f003 fab7 	bl	8013b94 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010626:	4b72      	ldr	r3, [pc, #456]	; (80107f0 <ProcessMacCommands+0x9ac>)
 8010628:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 801062c:	2b04      	cmp	r3, #4
 801062e:	f000 80cf 	beq.w	80107d0 <ProcessMacCommands+0x98c>
 8010632:	4b6f      	ldr	r3, [pc, #444]	; (80107f0 <ProcessMacCommands+0x9ac>)
 8010634:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010638:	2b05      	cmp	r3, #5
 801063a:	f000 80c9 	beq.w	80107d0 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 801063e:	f002 fe9a 	bl	8013376 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010642:	e0c5      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010644:	2303      	movs	r3, #3
 8010646:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 801064e:	78fb      	ldrb	r3, [r7, #3]
 8010650:	1c5a      	adds	r2, r3, #1
 8010652:	70fa      	strb	r2, [r7, #3]
 8010654:	461a      	mov	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4413      	add	r3, r2
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 801065e:	78fb      	ldrb	r3, [r7, #3]
 8010660:	1c5a      	adds	r2, r3, #1
 8010662:	70fa      	strb	r2, [r7, #3]
 8010664:	461a      	mov	r2, r3
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	4413      	add	r3, r2
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	021b      	lsls	r3, r3, #8
 801066e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010670:	4313      	orrs	r3, r2
 8010672:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010674:	78fb      	ldrb	r3, [r7, #3]
 8010676:	1c5a      	adds	r2, r3, #1
 8010678:	70fa      	strb	r2, [r7, #3]
 801067a:	461a      	mov	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	4413      	add	r3, r2
 8010680:	781b      	ldrb	r3, [r3, #0]
 8010682:	041b      	lsls	r3, r3, #16
 8010684:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010686:	4313      	orrs	r3, r2
 8010688:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 801068a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801068c:	2264      	movs	r2, #100	; 0x64
 801068e:	fb02 f303 	mul.w	r3, r2, r3
 8010692:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010694:	78fb      	ldrb	r3, [r7, #3]
 8010696:	1c5a      	adds	r2, r3, #1
 8010698:	70fa      	strb	r2, [r7, #3]
 801069a:	461a      	mov	r2, r3
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	4413      	add	r3, r2
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	f003 030f 	and.w	r3, r3, #15
 80106a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80106aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80106ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80106b0:	4618      	mov	r0, r3
 80106b2:	f002 fe66 	bl	8013382 <LoRaMacClassBPingSlotChannelReq>
 80106b6:	4603      	mov	r3, r0
 80106b8:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 80106bc:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 80106c0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80106c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80106c8:	2201      	movs	r2, #1
 80106ca:	4619      	mov	r1, r3
 80106cc:	2011      	movs	r0, #17
 80106ce:	f002 ffc5 	bl	801365c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 80106d2:	e07d      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 80106d4:	200d      	movs	r0, #13
 80106d6:	f003 fae9 	bl	8013cac <LoRaMacConfirmQueueIsCmdActive>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d077      	beq.n	80107d0 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 80106e0:	210d      	movs	r1, #13
 80106e2:	2000      	movs	r0, #0
 80106e4:	f003 fa56 	bl	8013b94 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 80106e8:	2300      	movs	r3, #0
 80106ea:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 80106ee:	2300      	movs	r3, #0
 80106f0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80106f4:	78fb      	ldrb	r3, [r7, #3]
 80106f6:	1c5a      	adds	r2, r3, #1
 80106f8:	70fa      	strb	r2, [r7, #3]
 80106fa:	461a      	mov	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	4413      	add	r3, r2
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010706:	78fb      	ldrb	r3, [r7, #3]
 8010708:	1c5a      	adds	r2, r3, #1
 801070a:	70fa      	strb	r2, [r7, #3]
 801070c:	461a      	mov	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	4413      	add	r3, r2
 8010712:	781b      	ldrb	r3, [r3, #0]
 8010714:	021b      	lsls	r3, r3, #8
 8010716:	b21a      	sxth	r2, r3
 8010718:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 801071c:	4313      	orrs	r3, r2
 801071e:	b21b      	sxth	r3, r3
 8010720:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010724:	78fb      	ldrb	r3, [r7, #3]
 8010726:	1c5a      	adds	r2, r3, #1
 8010728:	70fa      	strb	r2, [r7, #3]
 801072a:	461a      	mov	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	4413      	add	r3, r2
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010736:	4b2f      	ldr	r3, [pc, #188]	; (80107f4 <ProcessMacCommands+0x9b0>)
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 801073e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010742:	4618      	mov	r0, r3
 8010744:	f002 fe29 	bl	801339a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010748:	e042      	b.n	80107d0 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 801074a:	2300      	movs	r3, #0
 801074c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010750:	78fb      	ldrb	r3, [r7, #3]
 8010752:	1c5a      	adds	r2, r3, #1
 8010754:	70fa      	strb	r2, [r7, #3]
 8010756:	461a      	mov	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	4413      	add	r3, r2
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010762:	78fb      	ldrb	r3, [r7, #3]
 8010764:	1c5a      	adds	r2, r3, #1
 8010766:	70fa      	strb	r2, [r7, #3]
 8010768:	461a      	mov	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4413      	add	r3, r2
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	021b      	lsls	r3, r3, #8
 8010772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010776:	4313      	orrs	r3, r2
 8010778:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 801077c:	78fb      	ldrb	r3, [r7, #3]
 801077e:	1c5a      	adds	r2, r3, #1
 8010780:	70fa      	strb	r2, [r7, #3]
 8010782:	461a      	mov	r2, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4413      	add	r3, r2
 8010788:	781b      	ldrb	r3, [r3, #0]
 801078a:	041b      	lsls	r3, r3, #16
 801078c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010790:	4313      	orrs	r3, r2
 8010792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010796:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801079a:	2264      	movs	r2, #100	; 0x64
 801079c:	fb02 f303 	mul.w	r3, r2, r3
 80107a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80107a4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80107a8:	f002 fe0a 	bl	80133c0 <LoRaMacClassBBeaconFreqReq>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d003      	beq.n	80107ba <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 80107b2:	2301      	movs	r3, #1
 80107b4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 80107b8:	e002      	b.n	80107c0 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 80107ba:	2300      	movs	r3, #0
 80107bc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80107c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80107c4:	2201      	movs	r2, #1
 80107c6:	4619      	mov	r1, r3
 80107c8:	2013      	movs	r0, #19
 80107ca:	f002 ff47 	bl	801365c <LoRaMacCommandsAddCmd>
                }
                break;
 80107ce:	bf00      	nop
    while( macIndex < commandsSize )
 80107d0:	78fa      	ldrb	r2, [r7, #3]
 80107d2:	78bb      	ldrb	r3, [r7, #2]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	f4ff ab57 	bcc.w	800fe88 <ProcessMacCommands+0x44>
 80107da:	e004      	b.n	80107e6 <ProcessMacCommands+0x9a2>
        return;
 80107dc:	bf00      	nop
 80107de:	e002      	b.n	80107e6 <ProcessMacCommands+0x9a2>
            return;
 80107e0:	bf00      	nop
 80107e2:	e000      	b.n	80107e6 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 80107e4:	bf00      	nop
        }
    }
}
 80107e6:	378c      	adds	r7, #140	; 0x8c
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd90      	pop	{r4, r7, pc}
 80107ec:	12d53d80 	.word	0x12d53d80
 80107f0:	20000788 	.word	0x20000788
 80107f4:	20001858 	.word	0x20001858

080107f8 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b08e      	sub	sp, #56	; 0x38
 80107fc:	af02      	add	r7, sp, #8
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	607a      	str	r2, [r7, #4]
 8010802:	461a      	mov	r2, r3
 8010804:	460b      	mov	r3, r1
 8010806:	72fb      	strb	r3, [r7, #11]
 8010808:	4613      	mov	r3, r2
 801080a:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801080c:	2303      	movs	r3, #3
 801080e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010812:	4b66      	ldr	r3, [pc, #408]	; (80109ac <Send+0x1b4>)
 8010814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010818:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 801081c:	4b63      	ldr	r3, [pc, #396]	; (80109ac <Send+0x1b4>)
 801081e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010822:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010826:	4b61      	ldr	r3, [pc, #388]	; (80109ac <Send+0x1b4>)
 8010828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801082a:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801082c:	4b5f      	ldr	r3, [pc, #380]	; (80109ac <Send+0x1b4>)
 801082e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010836:	2307      	movs	r3, #7
 8010838:	e0b4      	b.n	80109a4 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 801083a:	4b5c      	ldr	r3, [pc, #368]	; (80109ac <Send+0x1b4>)
 801083c:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010840:	2b00      	cmp	r3, #0
 8010842:	d102      	bne.n	801084a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010844:	4b59      	ldr	r3, [pc, #356]	; (80109ac <Send+0x1b4>)
 8010846:	2200      	movs	r2, #0
 8010848:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 801084a:	2300      	movs	r3, #0
 801084c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010850:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010854:	f36f 0303 	bfc	r3, #0, #4
 8010858:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 801085c:	4b53      	ldr	r3, [pc, #332]	; (80109ac <Send+0x1b4>)
 801085e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8010862:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010866:	f362 13c7 	bfi	r3, r2, #7, #1
 801086a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801086e:	4b4f      	ldr	r3, [pc, #316]	; (80109ac <Send+0x1b4>)
 8010870:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010874:	2b01      	cmp	r3, #1
 8010876:	d106      	bne.n	8010886 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010878:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801087c:	f043 0310 	orr.w	r3, r3, #16
 8010880:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010884:	e005      	b.n	8010892 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010886:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801088a:	f36f 1304 	bfc	r3, #4, #1
 801088e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010892:	4b46      	ldr	r3, [pc, #280]	; (80109ac <Send+0x1b4>)
 8010894:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010898:	2b00      	cmp	r3, #0
 801089a:	d005      	beq.n	80108a8 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 801089c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80108a0:	f043 0320 	orr.w	r3, r3, #32
 80108a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 80108a8:	2301      	movs	r3, #1
 80108aa:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80108ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80108b0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80108b4:	b2db      	uxtb	r3, r3
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	bf14      	ite	ne
 80108ba:	2301      	movne	r3, #1
 80108bc:	2300      	moveq	r3, #0
 80108be:	b2db      	uxtb	r3, r3
 80108c0:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80108c2:	4b3a      	ldr	r3, [pc, #232]	; (80109ac <Send+0x1b4>)
 80108c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108c6:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80108c8:	4b39      	ldr	r3, [pc, #228]	; (80109b0 <Send+0x1b8>)
 80108ca:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80108ce:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80108d0:	4b37      	ldr	r3, [pc, #220]	; (80109b0 <Send+0x1b8>)
 80108d2:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80108d6:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80108d8:	4b34      	ldr	r3, [pc, #208]	; (80109ac <Send+0x1b4>)
 80108da:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80108de:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80108e2:	4b32      	ldr	r3, [pc, #200]	; (80109ac <Send+0x1b4>)
 80108e4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80108e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80108ec:	4b2f      	ldr	r3, [pc, #188]	; (80109ac <Send+0x1b4>)
 80108ee:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80108f2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80108f6:	4b2d      	ldr	r3, [pc, #180]	; (80109ac <Send+0x1b4>)
 80108f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80108fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8010900:	4b2a      	ldr	r3, [pc, #168]	; (80109ac <Send+0x1b4>)
 8010902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010906:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 801090a:	f107 0014 	add.w	r0, r7, #20
 801090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010912:	9300      	str	r3, [sp, #0]
 8010914:	4b27      	ldr	r3, [pc, #156]	; (80109b4 <Send+0x1bc>)
 8010916:	4a28      	ldr	r2, [pc, #160]	; (80109b8 <Send+0x1c0>)
 8010918:	4928      	ldr	r1, [pc, #160]	; (80109bc <Send+0x1c4>)
 801091a:	f002 fbcb 	bl	80130b4 <LoRaMacAdrCalcNext>
 801091e:	4603      	mov	r3, r0
 8010920:	461a      	mov	r2, r3
 8010922:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010926:	f362 1386 	bfi	r3, r2, #6, #1
 801092a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801092e:	7afa      	ldrb	r2, [r7, #11]
 8010930:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010934:	893b      	ldrh	r3, [r7, #8]
 8010936:	9300      	str	r3, [sp, #0]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f000 fc42 	bl	80111c4 <PrepareFrame>
 8010940:	4603      	mov	r3, r0
 8010942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801094a:	2b00      	cmp	r3, #0
 801094c:	d003      	beq.n	8010956 <Send+0x15e>
 801094e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010952:	2b0a      	cmp	r3, #10
 8010954:	d107      	bne.n	8010966 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010956:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801095a:	4618      	mov	r0, r3
 801095c:	f000 f96e 	bl	8010c3c <ScheduleTx>
 8010960:	4603      	mov	r3, r0
 8010962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 801096e:	4a0f      	ldr	r2, [pc, #60]	; (80109ac <Send+0x1b4>)
 8010970:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010974:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010978:	4a0c      	ldr	r2, [pc, #48]	; (80109ac <Send+0x1b4>)
 801097a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801097e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010982:	e00d      	b.n	80109a0 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010984:	4b09      	ldr	r3, [pc, #36]	; (80109ac <Send+0x1b4>)
 8010986:	2200      	movs	r2, #0
 8010988:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 801098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801098e:	4a07      	ldr	r2, [pc, #28]	; (80109ac <Send+0x1b4>)
 8010990:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010992:	f002 fedb 	bl	801374c <LoRaMacCommandsRemoveNoneStickyCmds>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d001      	beq.n	80109a0 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801099c:	2313      	movs	r3, #19
 801099e:	e001      	b.n	80109a4 <Send+0x1ac>
        }
    }
    return status;
 80109a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3730      	adds	r7, #48	; 0x30
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}
 80109ac:	20000ca8 	.word	0x20000ca8
 80109b0:	20000788 	.word	0x20000788
 80109b4:	20000d08 	.word	0x20000d08
 80109b8:	20000ce0 	.word	0x20000ce0
 80109bc:	20000ce1 	.word	0x20000ce1

080109c0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	4603      	mov	r3, r0
 80109c8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 80109ce:	2300      	movs	r3, #0
 80109d0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 80109d2:	2301      	movs	r3, #1
 80109d4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 80109d6:	79fb      	ldrb	r3, [r7, #7]
 80109d8:	2bff      	cmp	r3, #255	; 0xff
 80109da:	d129      	bne.n	8010a30 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 80109dc:	2000      	movs	r0, #0
 80109de:	f7ff f90f 	bl	800fc00 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 80109e2:	4b1a      	ldr	r3, [pc, #104]	; (8010a4c <SendReJoinReq+0x8c>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 80109ea:	4b18      	ldr	r3, [pc, #96]	; (8010a4c <SendReJoinReq+0x8c>)
 80109ec:	4a18      	ldr	r2, [pc, #96]	; (8010a50 <SendReJoinReq+0x90>)
 80109ee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 80109f2:	4b16      	ldr	r3, [pc, #88]	; (8010a4c <SendReJoinReq+0x8c>)
 80109f4:	22ff      	movs	r2, #255	; 0xff
 80109f6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 80109fa:	7b3b      	ldrb	r3, [r7, #12]
 80109fc:	f36f 1347 	bfc	r3, #5, #3
 8010a00:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010a02:	7b3a      	ldrb	r2, [r7, #12]
 8010a04:	4b11      	ldr	r3, [pc, #68]	; (8010a4c <SendReJoinReq+0x8c>)
 8010a06:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010a0a:	f7fc f875 	bl	800caf8 <SecureElementGetJoinEui>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	2208      	movs	r2, #8
 8010a12:	4619      	mov	r1, r3
 8010a14:	480f      	ldr	r0, [pc, #60]	; (8010a54 <SendReJoinReq+0x94>)
 8010a16:	f008 f9a0 	bl	8018d5a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010a1a:	f7fc f84b 	bl	800cab4 <SecureElementGetDevEui>
 8010a1e:	4603      	mov	r3, r0
 8010a20:	2208      	movs	r2, #8
 8010a22:	4619      	mov	r1, r3
 8010a24:	480c      	ldr	r0, [pc, #48]	; (8010a58 <SendReJoinReq+0x98>)
 8010a26:	f008 f998 	bl	8018d5a <memcpy1>

            allowDelayedTx = false;
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	73fb      	strb	r3, [r7, #15]

            break;
 8010a2e:	e002      	b.n	8010a36 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010a30:	2302      	movs	r3, #2
 8010a32:	73bb      	strb	r3, [r7, #14]
            break;
 8010a34:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010a36:	7bfb      	ldrb	r3, [r7, #15]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f000 f8ff 	bl	8010c3c <ScheduleTx>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	73bb      	strb	r3, [r7, #14]
    return status;
 8010a42:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3710      	adds	r7, #16
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	20000788 	.word	0x20000788
 8010a50:	2000078a 	.word	0x2000078a
 8010a54:	20000896 	.word	0x20000896
 8010a58:	2000089e 	.word	0x2000089e

08010a5c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010a60:	f002 fc38 	bl	80132d4 <LoRaMacClassBIsBeaconExpected>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d001      	beq.n	8010a6e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010a6a:	230e      	movs	r3, #14
 8010a6c:	e013      	b.n	8010a96 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <CheckForClassBCollision+0x40>)
 8010a70:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010a74:	2b01      	cmp	r3, #1
 8010a76:	d10d      	bne.n	8010a94 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010a78:	f002 fc33 	bl	80132e2 <LoRaMacClassBIsPingExpected>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d001      	beq.n	8010a86 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010a82:	230f      	movs	r3, #15
 8010a84:	e007      	b.n	8010a96 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010a86:	f002 fc33 	bl	80132f0 <LoRaMacClassBIsMulticastExpected>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d001      	beq.n	8010a94 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010a90:	230f      	movs	r3, #15
 8010a92:	e000      	b.n	8010a96 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	20000ca8 	.word	0x20000ca8

08010aa0 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010aa0:	b590      	push	{r4, r7, lr}
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010aa6:	4b2d      	ldr	r3, [pc, #180]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010aa8:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010aac:	4b2b      	ldr	r3, [pc, #172]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010aae:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010ab2:	4b2a      	ldr	r3, [pc, #168]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010ab4:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010ab8:	4b28      	ldr	r3, [pc, #160]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010aba:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010abe:	4b27      	ldr	r3, [pc, #156]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010ac0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010ac4:	b25b      	sxtb	r3, r3
 8010ac6:	f004 fd2d 	bl	8015524 <RegionApplyDrOffset>
 8010aca:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010acc:	b259      	sxtb	r1, r3
 8010ace:	4b23      	ldr	r3, [pc, #140]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010ad0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010ad4:	4b21      	ldr	r3, [pc, #132]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad8:	4821      	ldr	r0, [pc, #132]	; (8010b60 <ComputeRxWindowParameters+0xc0>)
 8010ada:	9000      	str	r0, [sp, #0]
 8010adc:	4620      	mov	r0, r4
 8010ade:	f004 fbe2 	bl	80152a6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010ae2:	4b1e      	ldr	r3, [pc, #120]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010ae4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8010ae8:	4b1c      	ldr	r3, [pc, #112]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010aea:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010aee:	b259      	sxtb	r1, r3
 8010af0:	4b1a      	ldr	r3, [pc, #104]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010af2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010af6:	4b19      	ldr	r3, [pc, #100]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010afa:	4c1a      	ldr	r4, [pc, #104]	; (8010b64 <ComputeRxWindowParameters+0xc4>)
 8010afc:	9400      	str	r4, [sp, #0]
 8010afe:	f004 fbd2 	bl	80152a6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010b02:	4b16      	ldr	r3, [pc, #88]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b06:	4a18      	ldr	r2, [pc, #96]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b08:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010b0c:	4413      	add	r3, r2
 8010b0e:	4a16      	ldr	r2, [pc, #88]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b10:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010b14:	4b11      	ldr	r3, [pc, #68]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b18:	4a13      	ldr	r2, [pc, #76]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b1a:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010b1e:	4413      	add	r3, r2
 8010b20:	4a11      	ldr	r2, [pc, #68]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b22:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010b26:	4b0d      	ldr	r3, [pc, #52]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010b28:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d111      	bne.n	8010b54 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010b30:	4b0a      	ldr	r3, [pc, #40]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b34:	4a0c      	ldr	r2, [pc, #48]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b36:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8010b3a:	4413      	add	r3, r2
 8010b3c:	4a0a      	ldr	r2, [pc, #40]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b3e:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010b42:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <ComputeRxWindowParameters+0xbc>)
 8010b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b46:	4a08      	ldr	r2, [pc, #32]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b48:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8010b4c:	4413      	add	r3, r2
 8010b4e:	4a06      	ldr	r2, [pc, #24]	; (8010b68 <ComputeRxWindowParameters+0xc8>)
 8010b50:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010b54:	bf00      	nop
 8010b56:	3704      	adds	r7, #4
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd90      	pop	{r4, r7, pc}
 8010b5c:	20000ca8 	.word	0x20000ca8
 8010b60:	20000b40 	.word	0x20000b40
 8010b64:	20000b58 	.word	0x20000b58
 8010b68:	20000788 	.word	0x20000788

08010b6c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010b72:	2300      	movs	r3, #0
 8010b74:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010b76:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <VerifyTxFrame+0x58>)
 8010b78:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d01b      	beq.n	8010bb8 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010b80:	1d3b      	adds	r3, r7, #4
 8010b82:	4618      	mov	r0, r3
 8010b84:	f002 fe28 	bl	80137d8 <LoRaMacCommandsGetSizeSerializedCmds>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d001      	beq.n	8010b92 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010b8e:	2313      	movs	r3, #19
 8010b90:	e013      	b.n	8010bba <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010b92:	4b0d      	ldr	r3, [pc, #52]	; (8010bc8 <VerifyTxFrame+0x5c>)
 8010b94:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010b98:	4a0a      	ldr	r2, [pc, #40]	; (8010bc4 <VerifyTxFrame+0x58>)
 8010b9a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	b2d2      	uxtb	r2, r2
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f7ff f926 	bl	800fdf4 <ValidatePayloadLength>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	f083 0301 	eor.w	r3, r3, #1
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d001      	beq.n	8010bb8 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010bb4:	2308      	movs	r3, #8
 8010bb6:	e000      	b.n	8010bba <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3708      	adds	r7, #8
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	20000ca8 	.word	0x20000ca8
 8010bc8:	20000788 	.word	0x20000788

08010bcc <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010bd2:	4b18      	ldr	r3, [pc, #96]	; (8010c34 <SerializeTxFrame+0x68>)
 8010bd4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d002      	beq.n	8010be2 <SerializeTxFrame+0x16>
 8010bdc:	2b04      	cmp	r3, #4
 8010bde:	d011      	beq.n	8010c04 <SerializeTxFrame+0x38>
 8010be0:	e021      	b.n	8010c26 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010be2:	4815      	ldr	r0, [pc, #84]	; (8010c38 <SerializeTxFrame+0x6c>)
 8010be4:	f004 f92d 	bl	8014e42 <LoRaMacSerializerJoinRequest>
 8010be8:	4603      	mov	r3, r0
 8010bea:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010bec:	79fb      	ldrb	r3, [r7, #7]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d001      	beq.n	8010bf6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010bf2:	2311      	movs	r3, #17
 8010bf4:	e01a      	b.n	8010c2c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010bf6:	4b0f      	ldr	r3, [pc, #60]	; (8010c34 <SerializeTxFrame+0x68>)
 8010bf8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010bfc:	b29a      	uxth	r2, r3
 8010bfe:	4b0d      	ldr	r3, [pc, #52]	; (8010c34 <SerializeTxFrame+0x68>)
 8010c00:	801a      	strh	r2, [r3, #0]
            break;
 8010c02:	e012      	b.n	8010c2a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8010c04:	480c      	ldr	r0, [pc, #48]	; (8010c38 <SerializeTxFrame+0x6c>)
 8010c06:	f004 f99e 	bl	8014f46 <LoRaMacSerializerData>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8010c0e:	79fb      	ldrb	r3, [r7, #7]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d001      	beq.n	8010c18 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010c14:	2311      	movs	r3, #17
 8010c16:	e009      	b.n	8010c2c <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010c18:	4b06      	ldr	r3, [pc, #24]	; (8010c34 <SerializeTxFrame+0x68>)
 8010c1a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	4b04      	ldr	r3, [pc, #16]	; (8010c34 <SerializeTxFrame+0x68>)
 8010c22:	801a      	strh	r2, [r3, #0]
            break;
 8010c24:	e001      	b.n	8010c2a <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010c26:	2303      	movs	r3, #3
 8010c28:	e000      	b.n	8010c2c <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8010c2a:	2300      	movs	r3, #0
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3708      	adds	r7, #8
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}
 8010c34:	20000788 	.word	0x20000788
 8010c38:	20000890 	.word	0x20000890

08010c3c <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b090      	sub	sp, #64	; 0x40
 8010c40:	af02      	add	r7, sp, #8
 8010c42:	4603      	mov	r3, r0
 8010c44:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010c46:	2303      	movs	r3, #3
 8010c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010c4c:	f7ff ff06 	bl	8010a5c <CheckForClassBCollision>
 8010c50:	4603      	mov	r3, r0
 8010c52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010c56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d002      	beq.n	8010c64 <ScheduleTx+0x28>
    {
        return status;
 8010c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c62:	e08f      	b.n	8010d84 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010c64:	f000 f8f4 	bl	8010e50 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010c68:	f7ff ffb0 	bl	8010bcc <SerializeTxFrame>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010c72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d002      	beq.n	8010c80 <ScheduleTx+0x44>
    {
        return status;
 8010c7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c7e:	e081      	b.n	8010d84 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010c80:	4b42      	ldr	r3, [pc, #264]	; (8010d8c <ScheduleTx+0x150>)
 8010c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c84:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010c86:	4b41      	ldr	r3, [pc, #260]	; (8010d8c <ScheduleTx+0x150>)
 8010c88:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010c8c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8010c8e:	4b3f      	ldr	r3, [pc, #252]	; (8010d8c <ScheduleTx+0x150>)
 8010c90:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010c94:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f00b fc3e 	bl	801c51c <SysTimeGetMcuTime>
 8010ca0:	4638      	mov	r0, r7
 8010ca2:	4b3a      	ldr	r3, [pc, #232]	; (8010d8c <ScheduleTx+0x150>)
 8010ca4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8010ca8:	9200      	str	r2, [sp, #0]
 8010caa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8010cae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010cb2:	ca06      	ldmia	r2, {r1, r2}
 8010cb4:	f00b fb93 	bl	801c3de <SysTimeSub>
 8010cb8:	f107 0320 	add.w	r3, r7, #32
 8010cbc:	463a      	mov	r2, r7
 8010cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010cc2:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010cc6:	4b31      	ldr	r3, [pc, #196]	; (8010d8c <ScheduleTx+0x150>)
 8010cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cca:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010cd6:	4b2e      	ldr	r3, [pc, #184]	; (8010d90 <ScheduleTx+0x154>)
 8010cd8:	881b      	ldrh	r3, [r3, #0]
 8010cda:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010cdc:	4b2b      	ldr	r3, [pc, #172]	; (8010d8c <ScheduleTx+0x150>)
 8010cde:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d104      	bne.n	8010cf0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8010cec:	2300      	movs	r3, #0
 8010cee:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8010cf0:	4b26      	ldr	r3, [pc, #152]	; (8010d8c <ScheduleTx+0x150>)
 8010cf2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010cf6:	f107 0114 	add.w	r1, r7, #20
 8010cfa:	4b26      	ldr	r3, [pc, #152]	; (8010d94 <ScheduleTx+0x158>)
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	4b26      	ldr	r3, [pc, #152]	; (8010d98 <ScheduleTx+0x15c>)
 8010d00:	4a26      	ldr	r2, [pc, #152]	; (8010d9c <ScheduleTx+0x160>)
 8010d02:	f004 fbec 	bl	80154de <RegionNextChannel>
 8010d06:	4603      	mov	r3, r0
 8010d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8010d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d022      	beq.n	8010d5a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8010d14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d18:	2b0b      	cmp	r3, #11
 8010d1a:	d11b      	bne.n	8010d54 <ScheduleTx+0x118>
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d018      	beq.n	8010d54 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 8010d22:	4b1b      	ldr	r3, [pc, #108]	; (8010d90 <ScheduleTx+0x154>)
 8010d24:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d011      	beq.n	8010d50 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8010d2c:	4b18      	ldr	r3, [pc, #96]	; (8010d90 <ScheduleTx+0x154>)
 8010d2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d32:	f043 0320 	orr.w	r3, r3, #32
 8010d36:	4a16      	ldr	r2, [pc, #88]	; (8010d90 <ScheduleTx+0x154>)
 8010d38:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8010d3c:	4b14      	ldr	r3, [pc, #80]	; (8010d90 <ScheduleTx+0x154>)
 8010d3e:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8010d42:	4619      	mov	r1, r3
 8010d44:	4816      	ldr	r0, [pc, #88]	; (8010da0 <ScheduleTx+0x164>)
 8010d46:	f00c f885 	bl	801ce54 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010d4a:	4815      	ldr	r0, [pc, #84]	; (8010da0 <ScheduleTx+0x164>)
 8010d4c:	f00b ffa4 	bl	801cc98 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010d50:	2300      	movs	r3, #0
 8010d52:	e017      	b.n	8010d84 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010d54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d58:	e014      	b.n	8010d84 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010d5a:	f7ff fea1 	bl	8010aa0 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8010d5e:	f7ff ff05 	bl	8010b6c <VerifyTxFrame>
 8010d62:	4603      	mov	r3, r0
 8010d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010d68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <ScheduleTx+0x13a>
    {
        return status;
 8010d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d74:	e006      	b.n	8010d84 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010d76:	4b06      	ldr	r3, [pc, #24]	; (8010d90 <ScheduleTx+0x154>)
 8010d78:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	f000 fb3d 	bl	80113fc <SendFrameOnChannel>
 8010d82:	4603      	mov	r3, r0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3738      	adds	r7, #56	; 0x38
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}
 8010d8c:	20000ca8 	.word	0x20000ca8
 8010d90:	20000788 	.word	0x20000788
 8010d94:	20000cd8 	.word	0x20000cd8
 8010d98:	20000c20 	.word	0x20000c20
 8010d9c:	20000ba7 	.word	0x20000ba7
 8010da0:	20000af0 	.word	0x20000af0

08010da4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	4603      	mov	r3, r0
 8010dac:	460a      	mov	r2, r1
 8010dae:	71fb      	strb	r3, [r7, #7]
 8010db0:	4613      	mov	r3, r2
 8010db2:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010db4:	2312      	movs	r3, #18
 8010db6:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010db8:	2300      	movs	r3, #0
 8010dba:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010dbc:	4b22      	ldr	r3, [pc, #136]	; (8010e48 <SecureFrame+0xa4>)
 8010dbe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d002      	beq.n	8010dcc <SecureFrame+0x28>
 8010dc6:	2b04      	cmp	r3, #4
 8010dc8:	d011      	beq.n	8010dee <SecureFrame+0x4a>
 8010dca:	e036      	b.n	8010e3a <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010dcc:	481f      	ldr	r0, [pc, #124]	; (8010e4c <SecureFrame+0xa8>)
 8010dce:	f003 fc07 	bl	80145e0 <LoRaMacCryptoPrepareJoinRequest>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010dd6:	7bfb      	ldrb	r3, [r7, #15]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d001      	beq.n	8010de0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ddc:	2311      	movs	r3, #17
 8010dde:	e02f      	b.n	8010e40 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010de0:	4b19      	ldr	r3, [pc, #100]	; (8010e48 <SecureFrame+0xa4>)
 8010de2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	4b17      	ldr	r3, [pc, #92]	; (8010e48 <SecureFrame+0xa4>)
 8010dea:	801a      	strh	r2, [r3, #0]
            break;
 8010dec:	e027      	b.n	8010e3e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010dee:	f107 0308 	add.w	r3, r7, #8
 8010df2:	4618      	mov	r0, r3
 8010df4:	f003 fb38 	bl	8014468 <LoRaMacCryptoGetFCntUp>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d001      	beq.n	8010e02 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010dfe:	2312      	movs	r3, #18
 8010e00:	e01e      	b.n	8010e40 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 8010e02:	4b11      	ldr	r3, [pc, #68]	; (8010e48 <SecureFrame+0xa4>)
 8010e04:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8010e12:	68b8      	ldr	r0, [r7, #8]
 8010e14:	79ba      	ldrb	r2, [r7, #6]
 8010e16:	79f9      	ldrb	r1, [r7, #7]
 8010e18:	4b0c      	ldr	r3, [pc, #48]	; (8010e4c <SecureFrame+0xa8>)
 8010e1a:	f003 fcf3 	bl	8014804 <LoRaMacCryptoSecureMessage>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010e28:	2311      	movs	r3, #17
 8010e2a:	e009      	b.n	8010e40 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010e2c:	4b06      	ldr	r3, [pc, #24]	; (8010e48 <SecureFrame+0xa4>)
 8010e2e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8010e32:	b29a      	uxth	r2, r3
 8010e34:	4b04      	ldr	r3, [pc, #16]	; (8010e48 <SecureFrame+0xa4>)
 8010e36:	801a      	strh	r2, [r3, #0]
            break;
 8010e38:	e001      	b.n	8010e3e <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e3a:	2303      	movs	r3, #3
 8010e3c:	e000      	b.n	8010e40 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 8010e3e:	2300      	movs	r3, #0
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	20000788 	.word	0x20000788
 8010e4c:	20000890 	.word	0x20000890

08010e50 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010e50:	b480      	push	{r7}
 8010e52:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010e54:	4b09      	ldr	r3, [pc, #36]	; (8010e7c <CalculateBackOff+0x2c>)
 8010e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d10a      	bne.n	8010e72 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010e5c:	4b07      	ldr	r3, [pc, #28]	; (8010e7c <CalculateBackOff+0x2c>)
 8010e5e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8010e62:	3b01      	subs	r3, #1
 8010e64:	4a06      	ldr	r2, [pc, #24]	; (8010e80 <CalculateBackOff+0x30>)
 8010e66:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 8010e6a:	fb02 f303 	mul.w	r3, r2, r3
 8010e6e:	4a03      	ldr	r2, [pc, #12]	; (8010e7c <CalculateBackOff+0x2c>)
 8010e70:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010e72:	bf00      	nop
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bc80      	pop	{r7}
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	20000ca8 	.word	0x20000ca8
 8010e80:	20000788 	.word	0x20000788

08010e84 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	7139      	strb	r1, [r7, #4]
 8010e8e:	71fb      	strb	r3, [r7, #7]
 8010e90:	4613      	mov	r3, r2
 8010e92:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010e94:	79fb      	ldrb	r3, [r7, #7]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d002      	beq.n	8010ea0 <RemoveMacCommands+0x1c>
 8010e9a:	79fb      	ldrb	r3, [r7, #7]
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d10d      	bne.n	8010ebc <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010ea0:	79bb      	ldrb	r3, [r7, #6]
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d108      	bne.n	8010eb8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010ea6:	793b      	ldrb	r3, [r7, #4]
 8010ea8:	f003 0320 	and.w	r3, r3, #32
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d004      	beq.n	8010ebc <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010eb2:	f002 fc6f 	bl	8013794 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010eb6:	e001      	b.n	8010ebc <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010eb8:	f002 fc6c 	bl	8013794 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010ebc:	bf00      	nop
 8010ebe:	3708      	adds	r7, #8
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010ec4:	b5b0      	push	{r4, r5, r7, lr}
 8010ec6:	b090      	sub	sp, #64	; 0x40
 8010ec8:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010eca:	4b70      	ldr	r3, [pc, #448]	; (801108c <ResetMacParameters+0x1c8>)
 8010ecc:	2200      	movs	r2, #0
 8010ece:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010ed2:	4b6e      	ldr	r3, [pc, #440]	; (801108c <ResetMacParameters+0x1c8>)
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010ed8:	4b6d      	ldr	r3, [pc, #436]	; (8011090 <ResetMacParameters+0x1cc>)
 8010eda:	2200      	movs	r2, #0
 8010edc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010ee0:	4b6b      	ldr	r3, [pc, #428]	; (8011090 <ResetMacParameters+0x1cc>)
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8010ee8:	4b69      	ldr	r3, [pc, #420]	; (8011090 <ResetMacParameters+0x1cc>)
 8010eea:	2200      	movs	r2, #0
 8010eec:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8010ef0:	4b66      	ldr	r3, [pc, #408]	; (801108c <ResetMacParameters+0x1c8>)
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8010ef8:	4b64      	ldr	r3, [pc, #400]	; (801108c <ResetMacParameters+0x1c8>)
 8010efa:	2201      	movs	r2, #1
 8010efc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010f00:	4b62      	ldr	r3, [pc, #392]	; (801108c <ResetMacParameters+0x1c8>)
 8010f02:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8010f06:	4b61      	ldr	r3, [pc, #388]	; (801108c <ResetMacParameters+0x1c8>)
 8010f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010f0c:	4b5f      	ldr	r3, [pc, #380]	; (801108c <ResetMacParameters+0x1c8>)
 8010f0e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8010f12:	4b5e      	ldr	r3, [pc, #376]	; (801108c <ResetMacParameters+0x1c8>)
 8010f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8010f18:	4b5c      	ldr	r3, [pc, #368]	; (801108c <ResetMacParameters+0x1c8>)
 8010f1a:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 8010f1e:	4b5b      	ldr	r3, [pc, #364]	; (801108c <ResetMacParameters+0x1c8>)
 8010f20:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010f24:	4b59      	ldr	r3, [pc, #356]	; (801108c <ResetMacParameters+0x1c8>)
 8010f26:	4a59      	ldr	r2, [pc, #356]	; (801108c <ResetMacParameters+0x1c8>)
 8010f28:	3364      	adds	r3, #100	; 0x64
 8010f2a:	32a8      	adds	r2, #168	; 0xa8
 8010f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f30:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010f34:	4b55      	ldr	r3, [pc, #340]	; (801108c <ResetMacParameters+0x1c8>)
 8010f36:	4a55      	ldr	r2, [pc, #340]	; (801108c <ResetMacParameters+0x1c8>)
 8010f38:	336c      	adds	r3, #108	; 0x6c
 8010f3a:	32b0      	adds	r2, #176	; 0xb0
 8010f3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f40:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010f44:	4b51      	ldr	r3, [pc, #324]	; (801108c <ResetMacParameters+0x1c8>)
 8010f46:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8010f4a:	4b50      	ldr	r3, [pc, #320]	; (801108c <ResetMacParameters+0x1c8>)
 8010f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010f50:	4b4e      	ldr	r3, [pc, #312]	; (801108c <ResetMacParameters+0x1c8>)
 8010f52:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8010f56:	4b4d      	ldr	r3, [pc, #308]	; (801108c <ResetMacParameters+0x1c8>)
 8010f58:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010f5c:	4b4b      	ldr	r3, [pc, #300]	; (801108c <ResetMacParameters+0x1c8>)
 8010f5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010f62:	4a4a      	ldr	r2, [pc, #296]	; (801108c <ResetMacParameters+0x1c8>)
 8010f64:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010f66:	4b49      	ldr	r3, [pc, #292]	; (801108c <ResetMacParameters+0x1c8>)
 8010f68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010f6c:	4a47      	ldr	r2, [pc, #284]	; (801108c <ResetMacParameters+0x1c8>)
 8010f6e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8010f70:	4b47      	ldr	r3, [pc, #284]	; (8011090 <ResetMacParameters+0x1cc>)
 8010f72:	2200      	movs	r2, #0
 8010f74:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010f78:	4b44      	ldr	r3, [pc, #272]	; (801108c <ResetMacParameters+0x1c8>)
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010f80:	4b42      	ldr	r3, [pc, #264]	; (801108c <ResetMacParameters+0x1c8>)
 8010f82:	2200      	movs	r2, #0
 8010f84:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010f88:	4b40      	ldr	r3, [pc, #256]	; (801108c <ResetMacParameters+0x1c8>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010f90:	2301      	movs	r3, #1
 8010f92:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010f94:	4b3f      	ldr	r3, [pc, #252]	; (8011094 <ResetMacParameters+0x1d0>)
 8010f96:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010f98:	4b3f      	ldr	r3, [pc, #252]	; (8011098 <ResetMacParameters+0x1d4>)
 8010f9a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010f9c:	4b3f      	ldr	r3, [pc, #252]	; (801109c <ResetMacParameters+0x1d8>)
 8010f9e:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010fa0:	4b3a      	ldr	r3, [pc, #232]	; (801108c <ResetMacParameters+0x1c8>)
 8010fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fa6:	1d3a      	adds	r2, r7, #4
 8010fa8:	4611      	mov	r1, r2
 8010faa:	4618      	mov	r0, r3
 8010fac:	f004 f90f 	bl	80151ce <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010fb0:	4b37      	ldr	r3, [pc, #220]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010fb8:	4b35      	ldr	r3, [pc, #212]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fba:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010fbe:	4b34      	ldr	r3, [pc, #208]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fc0:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010fc4:	4b31      	ldr	r3, [pc, #196]	; (801108c <ResetMacParameters+0x1c8>)
 8010fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fc8:	4a31      	ldr	r2, [pc, #196]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fca:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010fce:	4b2f      	ldr	r3, [pc, #188]	; (801108c <ResetMacParameters+0x1c8>)
 8010fd0:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010fd4:	4b2e      	ldr	r3, [pc, #184]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fd6:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010fda:	4b2c      	ldr	r3, [pc, #176]	; (801108c <ResetMacParameters+0x1c8>)
 8010fdc:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010fe0:	4b2b      	ldr	r3, [pc, #172]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fe2:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010fe6:	4b2a      	ldr	r3, [pc, #168]	; (8011090 <ResetMacParameters+0x1cc>)
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010fee:	4b28      	ldr	r3, [pc, #160]	; (8011090 <ResetMacParameters+0x1cc>)
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010ff6:	4b25      	ldr	r3, [pc, #148]	; (801108c <ResetMacParameters+0x1c8>)
 8010ff8:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8010ffc:	4b24      	ldr	r3, [pc, #144]	; (8011090 <ResetMacParameters+0x1cc>)
 8010ffe:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8011002:	4a23      	ldr	r2, [pc, #140]	; (8011090 <ResetMacParameters+0x1cc>)
 8011004:	4b22      	ldr	r3, [pc, #136]	; (8011090 <ResetMacParameters+0x1cc>)
 8011006:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 801100a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801100e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011012:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011016:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801101a:	4b1d      	ldr	r3, [pc, #116]	; (8011090 <ResetMacParameters+0x1cc>)
 801101c:	2201      	movs	r2, #1
 801101e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011022:	4b1b      	ldr	r3, [pc, #108]	; (8011090 <ResetMacParameters+0x1cc>)
 8011024:	2202      	movs	r2, #2
 8011026:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801102a:	2300      	movs	r3, #0
 801102c:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 801102e:	2300      	movs	r3, #0
 8011030:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8011032:	4b17      	ldr	r3, [pc, #92]	; (8011090 <ResetMacParameters+0x1cc>)
 8011034:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011038:	2b00      	cmp	r3, #0
 801103a:	d009      	beq.n	8011050 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801103c:	4b14      	ldr	r3, [pc, #80]	; (8011090 <ResetMacParameters+0x1cc>)
 801103e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011046:	4b12      	ldr	r3, [pc, #72]	; (8011090 <ResetMacParameters+0x1cc>)
 8011048:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801104c:	691b      	ldr	r3, [r3, #16]
 801104e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011050:	4b13      	ldr	r3, [pc, #76]	; (80110a0 <ResetMacParameters+0x1dc>)
 8011052:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011054:	4b13      	ldr	r3, [pc, #76]	; (80110a4 <ResetMacParameters+0x1e0>)
 8011056:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011058:	4b13      	ldr	r3, [pc, #76]	; (80110a8 <ResetMacParameters+0x1e4>)
 801105a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801105c:	4b13      	ldr	r3, [pc, #76]	; (80110ac <ResetMacParameters+0x1e8>)
 801105e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8011060:	4b13      	ldr	r3, [pc, #76]	; (80110b0 <ResetMacParameters+0x1ec>)
 8011062:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011064:	4b13      	ldr	r3, [pc, #76]	; (80110b4 <ResetMacParameters+0x1f0>)
 8011066:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011068:	4b13      	ldr	r3, [pc, #76]	; (80110b8 <ResetMacParameters+0x1f4>)
 801106a:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801106c:	4b13      	ldr	r3, [pc, #76]	; (80110bc <ResetMacParameters+0x1f8>)
 801106e:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8011070:	4b13      	ldr	r3, [pc, #76]	; (80110c0 <ResetMacParameters+0x1fc>)
 8011072:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011074:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011078:	f107 0314 	add.w	r3, r7, #20
 801107c:	4a11      	ldr	r2, [pc, #68]	; (80110c4 <ResetMacParameters+0x200>)
 801107e:	4618      	mov	r0, r3
 8011080:	f002 f8d1 	bl	8013226 <LoRaMacClassBInit>
}
 8011084:	bf00      	nop
 8011086:	3740      	adds	r7, #64	; 0x40
 8011088:	46bd      	mov	sp, r7
 801108a:	bdb0      	pop	{r4, r5, r7, pc}
 801108c:	20000ca8 	.word	0x20000ca8
 8011090:	20000788 	.word	0x20000788
 8011094:	20000e8c 	.word	0x20000e8c
 8011098:	20000ea0 	.word	0x20000ea0
 801109c:	200017c0 	.word	0x200017c0
 80110a0:	20000bf4 	.word	0x20000bf4
 80110a4:	20000bac 	.word	0x20000bac
 80110a8:	20000be0 	.word	0x20000be0
 80110ac:	20000c1d 	.word	0x20000c1d
 80110b0:	20000d7c 	.word	0x20000d7c
 80110b4:	20000ce8 	.word	0x20000ce8
 80110b8:	20000cec 	.word	0x20000cec
 80110bc:	20000d80 	.word	0x20000d80
 80110c0:	20000dc4 	.word	0x20000dc4
 80110c4:	2000121c 	.word	0x2000121c

080110c8 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f00b fe4e 	bl	801cd74 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80110d8:	4b11      	ldr	r3, [pc, #68]	; (8011120 <RxWindowSetup+0x58>)
 80110da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110dc:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80110de:	4b11      	ldr	r3, [pc, #68]	; (8011124 <RxWindowSetup+0x5c>)
 80110e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110e4:	4a10      	ldr	r2, [pc, #64]	; (8011128 <RxWindowSetup+0x60>)
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f004 f900 	bl	80152ee <RegionRxConfig>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d010      	beq.n	8011116 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80110f4:	4b0d      	ldr	r3, [pc, #52]	; (801112c <RxWindowSetup+0x64>)
 80110f6:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 80110fa:	4b0c      	ldr	r3, [pc, #48]	; (801112c <RxWindowSetup+0x64>)
 80110fc:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8011100:	4b07      	ldr	r3, [pc, #28]	; (8011120 <RxWindowSetup+0x58>)
 8011102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011104:	4a07      	ldr	r2, [pc, #28]	; (8011124 <RxWindowSetup+0x5c>)
 8011106:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011108:	4610      	mov	r0, r2
 801110a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	7cda      	ldrb	r2, [r3, #19]
 8011110:	4b06      	ldr	r3, [pc, #24]	; (801112c <RxWindowSetup+0x64>)
 8011112:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8011116:	bf00      	nop
 8011118:	3708      	adds	r7, #8
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	0801eef8 	.word	0x0801eef8
 8011124:	20000ca8 	.word	0x20000ca8
 8011128:	20000bb0 	.word	0x20000bb0
 801112c:	20000788 	.word	0x20000788

08011130 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8011130:	b590      	push	{r4, r7, lr}
 8011132:	b083      	sub	sp, #12
 8011134:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011136:	4b1e      	ldr	r3, [pc, #120]	; (80111b0 <OpenContinuousRxCWindow+0x80>)
 8011138:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801113c:	4b1c      	ldr	r3, [pc, #112]	; (80111b0 <OpenContinuousRxCWindow+0x80>)
 801113e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011142:	b259      	sxtb	r1, r3
 8011144:	4b1a      	ldr	r3, [pc, #104]	; (80111b0 <OpenContinuousRxCWindow+0x80>)
 8011146:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801114a:	4b19      	ldr	r3, [pc, #100]	; (80111b0 <OpenContinuousRxCWindow+0x80>)
 801114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801114e:	4c19      	ldr	r4, [pc, #100]	; (80111b4 <OpenContinuousRxCWindow+0x84>)
 8011150:	9400      	str	r4, [sp, #0]
 8011152:	f004 f8a8 	bl	80152a6 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011156:	4b18      	ldr	r3, [pc, #96]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 8011158:	2202      	movs	r2, #2
 801115a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801115e:	4b14      	ldr	r3, [pc, #80]	; (80111b0 <OpenContinuousRxCWindow+0x80>)
 8011160:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8011164:	4b14      	ldr	r3, [pc, #80]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 8011166:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801116a:	4b13      	ldr	r3, [pc, #76]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 801116c:	2201      	movs	r2, #1
 801116e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8011172:	4b0f      	ldr	r3, [pc, #60]	; (80111b0 <OpenContinuousRxCWindow+0x80>)
 8011174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011178:	4a10      	ldr	r2, [pc, #64]	; (80111bc <OpenContinuousRxCWindow+0x8c>)
 801117a:	490e      	ldr	r1, [pc, #56]	; (80111b4 <OpenContinuousRxCWindow+0x84>)
 801117c:	4618      	mov	r0, r3
 801117e:	f004 f8b6 	bl	80152ee <RegionRxConfig>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	d00f      	beq.n	80111a8 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011188:	4b0b      	ldr	r3, [pc, #44]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 801118a:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 801118e:	4b0a      	ldr	r3, [pc, #40]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 8011190:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8011194:	4b0a      	ldr	r3, [pc, #40]	; (80111c0 <OpenContinuousRxCWindow+0x90>)
 8011196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011198:	2000      	movs	r0, #0
 801119a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801119c:	4b06      	ldr	r3, [pc, #24]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 801119e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80111a2:	4b05      	ldr	r3, [pc, #20]	; (80111b8 <OpenContinuousRxCWindow+0x88>)
 80111a4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80111a8:	bf00      	nop
 80111aa:	3704      	adds	r7, #4
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd90      	pop	{r4, r7, pc}
 80111b0:	20000ca8 	.word	0x20000ca8
 80111b4:	20000b70 	.word	0x20000b70
 80111b8:	20000788 	.word	0x20000788
 80111bc:	20000bb0 	.word	0x20000bb0
 80111c0:	0801eef8 	.word	0x0801eef8

080111c4 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b088      	sub	sp, #32
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	603b      	str	r3, [r7, #0]
 80111d0:	4613      	mov	r3, r2
 80111d2:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80111d4:	4b82      	ldr	r3, [pc, #520]	; (80113e0 <PrepareFrame+0x21c>)
 80111d6:	2200      	movs	r2, #0
 80111d8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80111da:	4b81      	ldr	r3, [pc, #516]	; (80113e0 <PrepareFrame+0x21c>)
 80111dc:	2200      	movs	r2, #0
 80111de:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 80111e2:	2300      	movs	r3, #0
 80111e4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80111e6:	2300      	movs	r3, #0
 80111e8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80111ea:	2300      	movs	r3, #0
 80111ec:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d101      	bne.n	80111f8 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80111f4:	2300      	movs	r3, #0
 80111f6:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80111f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80111fa:	461a      	mov	r2, r3
 80111fc:	6839      	ldr	r1, [r7, #0]
 80111fe:	4879      	ldr	r0, [pc, #484]	; (80113e4 <PrepareFrame+0x220>)
 8011200:	f007 fdab 	bl	8018d5a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011204:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011206:	b2da      	uxtb	r2, r3
 8011208:	4b75      	ldr	r3, [pc, #468]	; (80113e0 <PrepareFrame+0x21c>)
 801120a:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	781a      	ldrb	r2, [r3, #0]
 8011212:	4b73      	ldr	r3, [pc, #460]	; (80113e0 <PrepareFrame+0x21c>)
 8011214:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801121e:	b2db      	uxtb	r3, r3
 8011220:	2b07      	cmp	r3, #7
 8011222:	f000 80b9 	beq.w	8011398 <PrepareFrame+0x1d4>
 8011226:	2b07      	cmp	r3, #7
 8011228:	f300 80d0 	bgt.w	80113cc <PrepareFrame+0x208>
 801122c:	2b02      	cmp	r3, #2
 801122e:	d006      	beq.n	801123e <PrepareFrame+0x7a>
 8011230:	2b04      	cmp	r3, #4
 8011232:	f040 80cb 	bne.w	80113cc <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011236:	4b6a      	ldr	r3, [pc, #424]	; (80113e0 <PrepareFrame+0x21c>)
 8011238:	2201      	movs	r2, #1
 801123a:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801123e:	4b68      	ldr	r3, [pc, #416]	; (80113e0 <PrepareFrame+0x21c>)
 8011240:	2204      	movs	r2, #4
 8011242:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011246:	4b66      	ldr	r3, [pc, #408]	; (80113e0 <PrepareFrame+0x21c>)
 8011248:	4a67      	ldr	r2, [pc, #412]	; (80113e8 <PrepareFrame+0x224>)
 801124a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801124e:	4b64      	ldr	r3, [pc, #400]	; (80113e0 <PrepareFrame+0x21c>)
 8011250:	22ff      	movs	r2, #255	; 0xff
 8011252:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	781a      	ldrb	r2, [r3, #0]
 801125a:	4b61      	ldr	r3, [pc, #388]	; (80113e0 <PrepareFrame+0x21c>)
 801125c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8011260:	4a5f      	ldr	r2, [pc, #380]	; (80113e0 <PrepareFrame+0x21c>)
 8011262:	79fb      	ldrb	r3, [r7, #7]
 8011264:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011268:	4b60      	ldr	r3, [pc, #384]	; (80113ec <PrepareFrame+0x228>)
 801126a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801126e:	4a5c      	ldr	r2, [pc, #368]	; (80113e0 <PrepareFrame+0x21c>)
 8011270:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	781a      	ldrb	r2, [r3, #0]
 8011278:	4b59      	ldr	r3, [pc, #356]	; (80113e0 <PrepareFrame+0x21c>)
 801127a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801127e:	4b58      	ldr	r3, [pc, #352]	; (80113e0 <PrepareFrame+0x21c>)
 8011280:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8011284:	4b56      	ldr	r3, [pc, #344]	; (80113e0 <PrepareFrame+0x21c>)
 8011286:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801128a:	4b55      	ldr	r3, [pc, #340]	; (80113e0 <PrepareFrame+0x21c>)
 801128c:	4a55      	ldr	r2, [pc, #340]	; (80113e4 <PrepareFrame+0x220>)
 801128e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8011292:	f107 0318 	add.w	r3, r7, #24
 8011296:	4618      	mov	r0, r3
 8011298:	f003 f8e6 	bl	8014468 <LoRaMacCryptoGetFCntUp>
 801129c:	4603      	mov	r3, r0
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d001      	beq.n	80112a6 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80112a2:	2312      	movs	r3, #18
 80112a4:	e098      	b.n	80113d8 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80112a6:	69bb      	ldr	r3, [r7, #24]
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	4b4d      	ldr	r3, [pc, #308]	; (80113e0 <PrepareFrame+0x21c>)
 80112ac:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 80112b0:	4b4b      	ldr	r3, [pc, #300]	; (80113e0 <PrepareFrame+0x21c>)
 80112b2:	2200      	movs	r2, #0
 80112b4:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80112b8:	4b49      	ldr	r3, [pc, #292]	; (80113e0 <PrepareFrame+0x21c>)
 80112ba:	2200      	movs	r2, #0
 80112bc:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	4a47      	ldr	r2, [pc, #284]	; (80113e0 <PrepareFrame+0x21c>)
 80112c4:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80112c8:	f107 0314 	add.w	r3, r7, #20
 80112cc:	4618      	mov	r0, r3
 80112ce:	f002 fa83 	bl	80137d8 <LoRaMacCommandsGetSizeSerializedCmds>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d001      	beq.n	80112dc <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112d8:	2313      	movs	r3, #19
 80112da:	e07d      	b.n	80113d8 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80112dc:	697b      	ldr	r3, [r7, #20]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d076      	beq.n	80113d0 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80112e2:	4b42      	ldr	r3, [pc, #264]	; (80113ec <PrepareFrame+0x228>)
 80112e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80112e8:	4618      	mov	r0, r3
 80112ea:	f7fe fd5b 	bl	800fda4 <GetMaxAppPayloadWithoutFOptsLength>
 80112ee:	4603      	mov	r3, r0
 80112f0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80112f2:	4b3b      	ldr	r3, [pc, #236]	; (80113e0 <PrepareFrame+0x21c>)
 80112f4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d01d      	beq.n	8011338 <PrepareFrame+0x174>
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	2b0f      	cmp	r3, #15
 8011300:	d81a      	bhi.n	8011338 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8011302:	f107 0314 	add.w	r3, r7, #20
 8011306:	4a3a      	ldr	r2, [pc, #232]	; (80113f0 <PrepareFrame+0x22c>)
 8011308:	4619      	mov	r1, r3
 801130a:	200f      	movs	r0, #15
 801130c:	f002 fa7a 	bl	8013804 <LoRaMacCommandsSerializeCmds>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	d001      	beq.n	801131a <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011316:	2313      	movs	r3, #19
 8011318:	e05e      	b.n	80113d8 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801131a:	697b      	ldr	r3, [r7, #20]
 801131c:	f003 030f 	and.w	r3, r3, #15
 8011320:	b2d9      	uxtb	r1, r3
 8011322:	68ba      	ldr	r2, [r7, #8]
 8011324:	7813      	ldrb	r3, [r2, #0]
 8011326:	f361 0303 	bfi	r3, r1, #0, #4
 801132a:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	781a      	ldrb	r2, [r3, #0]
 8011330:	4b2b      	ldr	r3, [pc, #172]	; (80113e0 <PrepareFrame+0x21c>)
 8011332:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011336:	e04b      	b.n	80113d0 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011338:	4b29      	ldr	r3, [pc, #164]	; (80113e0 <PrepareFrame+0x21c>)
 801133a:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801133e:	2b00      	cmp	r3, #0
 8011340:	d010      	beq.n	8011364 <PrepareFrame+0x1a0>
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	2b0f      	cmp	r3, #15
 8011346:	d90d      	bls.n	8011364 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011348:	7ffb      	ldrb	r3, [r7, #31]
 801134a:	f107 0114 	add.w	r1, r7, #20
 801134e:	4a29      	ldr	r2, [pc, #164]	; (80113f4 <PrepareFrame+0x230>)
 8011350:	4618      	mov	r0, r3
 8011352:	f002 fa57 	bl	8013804 <LoRaMacCommandsSerializeCmds>
 8011356:	4603      	mov	r3, r0
 8011358:	2b00      	cmp	r3, #0
 801135a:	d001      	beq.n	8011360 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801135c:	2313      	movs	r3, #19
 801135e:	e03b      	b.n	80113d8 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8011360:	230a      	movs	r3, #10
 8011362:	e039      	b.n	80113d8 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011364:	7ffb      	ldrb	r3, [r7, #31]
 8011366:	f107 0114 	add.w	r1, r7, #20
 801136a:	4a22      	ldr	r2, [pc, #136]	; (80113f4 <PrepareFrame+0x230>)
 801136c:	4618      	mov	r0, r3
 801136e:	f002 fa49 	bl	8013804 <LoRaMacCommandsSerializeCmds>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d001      	beq.n	801137c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011378:	2313      	movs	r3, #19
 801137a:	e02d      	b.n	80113d8 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801137c:	4b18      	ldr	r3, [pc, #96]	; (80113e0 <PrepareFrame+0x21c>)
 801137e:	2200      	movs	r2, #0
 8011380:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8011384:	4b16      	ldr	r3, [pc, #88]	; (80113e0 <PrepareFrame+0x21c>)
 8011386:	4a1b      	ldr	r2, [pc, #108]	; (80113f4 <PrepareFrame+0x230>)
 8011388:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	b2da      	uxtb	r2, r3
 8011390:	4b13      	ldr	r3, [pc, #76]	; (80113e0 <PrepareFrame+0x21c>)
 8011392:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8011396:	e01b      	b.n	80113d0 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d01a      	beq.n	80113d4 <PrepareFrame+0x210>
 801139e:	4b10      	ldr	r3, [pc, #64]	; (80113e0 <PrepareFrame+0x21c>)
 80113a0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d015      	beq.n	80113d4 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80113a8:	4813      	ldr	r0, [pc, #76]	; (80113f8 <PrepareFrame+0x234>)
 80113aa:	4b0d      	ldr	r3, [pc, #52]	; (80113e0 <PrepareFrame+0x21c>)
 80113ac:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	461a      	mov	r2, r3
 80113b4:	6839      	ldr	r1, [r7, #0]
 80113b6:	f007 fcd0 	bl	8018d5a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80113ba:	4b09      	ldr	r3, [pc, #36]	; (80113e0 <PrepareFrame+0x21c>)
 80113bc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80113c0:	b29b      	uxth	r3, r3
 80113c2:	3301      	adds	r3, #1
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	4b06      	ldr	r3, [pc, #24]	; (80113e0 <PrepareFrame+0x21c>)
 80113c8:	801a      	strh	r2, [r3, #0]
            }
            break;
 80113ca:	e003      	b.n	80113d4 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80113cc:	2302      	movs	r3, #2
 80113ce:	e003      	b.n	80113d8 <PrepareFrame+0x214>
            break;
 80113d0:	bf00      	nop
 80113d2:	e000      	b.n	80113d6 <PrepareFrame+0x212>
            break;
 80113d4:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80113d6:	2300      	movs	r3, #0
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3720      	adds	r7, #32
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	20000788 	.word	0x20000788
 80113e4:	200008c0 	.word	0x200008c0
 80113e8:	2000078a 	.word	0x2000078a
 80113ec:	20000ca8 	.word	0x20000ca8
 80113f0:	200008a0 	.word	0x200008a0
 80113f4:	20000c28 	.word	0x20000c28
 80113f8:	2000078b 	.word	0x2000078b

080113fc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b08a      	sub	sp, #40	; 0x28
 8011400:	af00      	add	r7, sp, #0
 8011402:	4603      	mov	r3, r0
 8011404:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011406:	2303      	movs	r3, #3
 8011408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 801140c:	2300      	movs	r3, #0
 801140e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011414:	4b4a      	ldr	r3, [pc, #296]	; (8011540 <SendFrameOnChannel+0x144>)
 8011416:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801141a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801141c:	4b48      	ldr	r3, [pc, #288]	; (8011540 <SendFrameOnChannel+0x144>)
 801141e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011422:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011424:	4b46      	ldr	r3, [pc, #280]	; (8011540 <SendFrameOnChannel+0x144>)
 8011426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011428:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801142a:	4b45      	ldr	r3, [pc, #276]	; (8011540 <SendFrameOnChannel+0x144>)
 801142c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801142e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8011430:	4b44      	ldr	r3, [pc, #272]	; (8011544 <SendFrameOnChannel+0x148>)
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011436:	4b42      	ldr	r3, [pc, #264]	; (8011540 <SendFrameOnChannel+0x144>)
 8011438:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801143c:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801143e:	4b40      	ldr	r3, [pc, #256]	; (8011540 <SendFrameOnChannel+0x144>)
 8011440:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011444:	f107 020f 	add.w	r2, r7, #15
 8011448:	f107 0110 	add.w	r1, r7, #16
 801144c:	4b3e      	ldr	r3, [pc, #248]	; (8011548 <SendFrameOnChannel+0x14c>)
 801144e:	f003 ff6c 	bl	801532a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011452:	4b3c      	ldr	r3, [pc, #240]	; (8011544 <SendFrameOnChannel+0x148>)
 8011454:	2201      	movs	r2, #1
 8011456:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801145a:	4b39      	ldr	r3, [pc, #228]	; (8011540 <SendFrameOnChannel+0x144>)
 801145c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011460:	b2da      	uxtb	r2, r3
 8011462:	4b38      	ldr	r3, [pc, #224]	; (8011544 <SendFrameOnChannel+0x148>)
 8011464:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011468:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801146c:	4b35      	ldr	r3, [pc, #212]	; (8011544 <SendFrameOnChannel+0x148>)
 801146e:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8011472:	79fb      	ldrb	r3, [r7, #7]
 8011474:	4a33      	ldr	r2, [pc, #204]	; (8011544 <SendFrameOnChannel+0x148>)
 8011476:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801147a:	4b32      	ldr	r3, [pc, #200]	; (8011544 <SendFrameOnChannel+0x148>)
 801147c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8011480:	4a30      	ldr	r2, [pc, #192]	; (8011544 <SendFrameOnChannel+0x148>)
 8011482:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011486:	4b2f      	ldr	r3, [pc, #188]	; (8011544 <SendFrameOnChannel+0x148>)
 8011488:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801148c:	4a2d      	ldr	r2, [pc, #180]	; (8011544 <SendFrameOnChannel+0x148>)
 801148e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8011492:	f001 ff34 	bl	80132fe <LoRaMacClassBIsBeaconModeActive>
 8011496:	4603      	mov	r3, r0
 8011498:	2b00      	cmp	r3, #0
 801149a:	d00b      	beq.n	80114b4 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801149c:	4b29      	ldr	r3, [pc, #164]	; (8011544 <SendFrameOnChannel+0x148>)
 801149e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80114a2:	4618      	mov	r0, r3
 80114a4:	f001 ff96 	bl	80133d4 <LoRaMacClassBIsUplinkCollision>
 80114a8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80114aa:	6a3b      	ldr	r3, [r7, #32]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d001      	beq.n	80114b4 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80114b0:	2310      	movs	r3, #16
 80114b2:	e040      	b.n	8011536 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80114b4:	4b22      	ldr	r3, [pc, #136]	; (8011540 <SendFrameOnChannel+0x144>)
 80114b6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d101      	bne.n	80114c2 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80114be:	f001 ff93 	bl	80133e8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80114c2:	f001 ff2d 	bl	8013320 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80114c6:	4b1e      	ldr	r3, [pc, #120]	; (8011540 <SendFrameOnChannel+0x144>)
 80114c8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	4a1d      	ldr	r2, [pc, #116]	; (8011544 <SendFrameOnChannel+0x148>)
 80114d0:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 80114d4:	4611      	mov	r1, r2
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ff fc64 	bl	8010da4 <SecureFrame>
 80114dc:	4603      	mov	r3, r0
 80114de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80114e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d002      	beq.n	80114f0 <SendFrameOnChannel+0xf4>
    {
        return status;
 80114ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ee:	e022      	b.n	8011536 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80114f0:	4b14      	ldr	r3, [pc, #80]	; (8011544 <SendFrameOnChannel+0x148>)
 80114f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80114f6:	f043 0302 	orr.w	r3, r3, #2
 80114fa:	4a12      	ldr	r2, [pc, #72]	; (8011544 <SendFrameOnChannel+0x148>)
 80114fc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8011500:	4b10      	ldr	r3, [pc, #64]	; (8011544 <SendFrameOnChannel+0x148>)
 8011502:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011506:	3301      	adds	r3, #1
 8011508:	b2da      	uxtb	r2, r3
 801150a:	4b0e      	ldr	r3, [pc, #56]	; (8011544 <SendFrameOnChannel+0x148>)
 801150c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011510:	4b0c      	ldr	r3, [pc, #48]	; (8011544 <SendFrameOnChannel+0x148>)
 8011512:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8011516:	4b0b      	ldr	r3, [pc, #44]	; (8011544 <SendFrameOnChannel+0x148>)
 8011518:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 801151c:	4b09      	ldr	r3, [pc, #36]	; (8011544 <SendFrameOnChannel+0x148>)
 801151e:	2200      	movs	r2, #0
 8011520:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011524:	4b09      	ldr	r3, [pc, #36]	; (801154c <SendFrameOnChannel+0x150>)
 8011526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011528:	4a06      	ldr	r2, [pc, #24]	; (8011544 <SendFrameOnChannel+0x148>)
 801152a:	8812      	ldrh	r2, [r2, #0]
 801152c:	b2d2      	uxtb	r2, r2
 801152e:	4611      	mov	r1, r2
 8011530:	4807      	ldr	r0, [pc, #28]	; (8011550 <SendFrameOnChannel+0x154>)
 8011532:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011534:	2300      	movs	r3, #0
}
 8011536:	4618      	mov	r0, r3
 8011538:	3728      	adds	r7, #40	; 0x28
 801153a:	46bd      	mov	sp, r7
 801153c:	bd80      	pop	{r7, pc}
 801153e:	bf00      	nop
 8011540:	20000ca8 	.word	0x20000ca8
 8011544:	20000788 	.word	0x20000788
 8011548:	20000ba8 	.word	0x20000ba8
 801154c:	0801eef8 	.word	0x0801eef8
 8011550:	2000078a 	.word	0x2000078a

08011554 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	6039      	str	r1, [r7, #0]
 801155e:	80fb      	strh	r3, [r7, #6]
 8011560:	4613      	mov	r3, r2
 8011562:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011564:	4b09      	ldr	r3, [pc, #36]	; (801158c <SetTxContinuousWave+0x38>)
 8011566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011568:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801156c:	88fa      	ldrh	r2, [r7, #6]
 801156e:	6838      	ldr	r0, [r7, #0]
 8011570:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011572:	4b07      	ldr	r3, [pc, #28]	; (8011590 <SetTxContinuousWave+0x3c>)
 8011574:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011578:	f043 0302 	orr.w	r3, r3, #2
 801157c:	4a04      	ldr	r2, [pc, #16]	; (8011590 <SetTxContinuousWave+0x3c>)
 801157e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011582:	2300      	movs	r3, #0
}
 8011584:	4618      	mov	r0, r3
 8011586:	3708      	adds	r7, #8
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	0801eef8 	.word	0x0801eef8
 8011590:	20000788 	.word	0x20000788

08011594 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 801159e:	4b3e      	ldr	r3, [pc, #248]	; (8011698 <RestoreNvmData+0x104>)
 80115a0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d001      	beq.n	80115ac <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 80115a8:	2301      	movs	r3, #1
 80115aa:	e071      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 80115ac:	2124      	movs	r1, #36	; 0x24
 80115ae:	483b      	ldr	r0, [pc, #236]	; (801169c <RestoreNvmData+0x108>)
 80115b0:	f007 fc28 	bl	8018e04 <Crc32>
 80115b4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 80115b6:	4b39      	ldr	r3, [pc, #228]	; (801169c <RestoreNvmData+0x108>)
 80115b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ba:	687a      	ldr	r2, [r7, #4]
 80115bc:	429a      	cmp	r2, r3
 80115be:	d001      	beq.n	80115c4 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115c0:	2317      	movs	r3, #23
 80115c2:	e065      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 80115c4:	2114      	movs	r1, #20
 80115c6:	4836      	ldr	r0, [pc, #216]	; (80116a0 <RestoreNvmData+0x10c>)
 80115c8:	f007 fc1c 	bl	8018e04 <Crc32>
 80115cc:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 80115ce:	4b33      	ldr	r3, [pc, #204]	; (801169c <RestoreNvmData+0x108>)
 80115d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d001      	beq.n	80115dc <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115d8:	2317      	movs	r3, #23
 80115da:	e059      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 80115dc:	21e0      	movs	r1, #224	; 0xe0
 80115de:	4831      	ldr	r0, [pc, #196]	; (80116a4 <RestoreNvmData+0x110>)
 80115e0:	f007 fc10 	bl	8018e04 <Crc32>
 80115e4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 80115e6:	4b2d      	ldr	r3, [pc, #180]	; (801169c <RestoreNvmData+0x108>)
 80115e8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d001      	beq.n	80115f6 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80115f2:	2317      	movs	r3, #23
 80115f4:	e04c      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80115f6:	21bc      	movs	r1, #188	; 0xbc
 80115f8:	482b      	ldr	r0, [pc, #172]	; (80116a8 <RestoreNvmData+0x114>)
 80115fa:	f007 fc03 	bl	8018e04 <Crc32>
 80115fe:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011600:	4b26      	ldr	r3, [pc, #152]	; (801169c <RestoreNvmData+0x108>)
 8011602:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	429a      	cmp	r2, r3
 801160a:	d001      	beq.n	8011610 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 801160c:	2317      	movs	r3, #23
 801160e:	e03f      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011610:	2110      	movs	r1, #16
 8011612:	4826      	ldr	r0, [pc, #152]	; (80116ac <RestoreNvmData+0x118>)
 8011614:	f007 fbf6 	bl	8018e04 <Crc32>
 8011618:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 801161a:	4b20      	ldr	r3, [pc, #128]	; (801169c <RestoreNvmData+0x108>)
 801161c:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8011620:	687a      	ldr	r2, [r7, #4]
 8011622:	429a      	cmp	r2, r3
 8011624:	d001      	beq.n	801162a <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011626:	2317      	movs	r3, #23
 8011628:	e032      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 801162a:	2114      	movs	r1, #20
 801162c:	4820      	ldr	r0, [pc, #128]	; (80116b0 <RestoreNvmData+0x11c>)
 801162e:	f007 fbe9 	bl	8018e04 <Crc32>
 8011632:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011634:	4b19      	ldr	r3, [pc, #100]	; (801169c <RestoreNvmData+0x108>)
 8011636:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	429a      	cmp	r2, r3
 801163e:	d001      	beq.n	8011644 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011640:	2317      	movs	r3, #23
 8011642:	e025      	b.n	8011690 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011644:	f240 528c 	movw	r2, #1420	; 0x58c
 8011648:	4914      	ldr	r1, [pc, #80]	; (801169c <RestoreNvmData+0x108>)
 801164a:	481a      	ldr	r0, [pc, #104]	; (80116b4 <RestoreNvmData+0x120>)
 801164c:	f007 fb85 	bl	8018d5a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011650:	f240 528c 	movw	r2, #1420	; 0x58c
 8011654:	2100      	movs	r1, #0
 8011656:	4811      	ldr	r0, [pc, #68]	; (801169c <RestoreNvmData+0x108>)
 8011658:	f007 fbba 	bl	8018dd0 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 801165c:	4b0e      	ldr	r3, [pc, #56]	; (8011698 <RestoreNvmData+0x104>)
 801165e:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8011662:	4b0d      	ldr	r3, [pc, #52]	; (8011698 <RestoreNvmData+0x104>)
 8011664:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011668:	4b12      	ldr	r3, [pc, #72]	; (80116b4 <RestoreNvmData+0x120>)
 801166a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801166c:	4a0a      	ldr	r2, [pc, #40]	; (8011698 <RestoreNvmData+0x104>)
 801166e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011672:	4b10      	ldr	r3, [pc, #64]	; (80116b4 <RestoreNvmData+0x120>)
 8011674:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011678:	4b07      	ldr	r3, [pc, #28]	; (8011698 <RestoreNvmData+0x104>)
 801167a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801167e:	4b06      	ldr	r3, [pc, #24]	; (8011698 <RestoreNvmData+0x104>)
 8011680:	2201      	movs	r2, #1
 8011682:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011686:	4b04      	ldr	r3, [pc, #16]	; (8011698 <RestoreNvmData+0x104>)
 8011688:	2202      	movs	r2, #2
 801168a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 801168e:	2300      	movs	r3, #0
}
 8011690:	4618      	mov	r0, r3
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	20000788 	.word	0x20000788
 801169c:	20001234 	.word	0x20001234
 80116a0:	2000125c 	.word	0x2000125c
 80116a4:	20001274 	.word	0x20001274
 80116a8:	20001358 	.word	0x20001358
 80116ac:	20001418 	.word	0x20001418
 80116b0:	200017a8 	.word	0x200017a8
 80116b4:	20000ca8 	.word	0x20000ca8

080116b8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 80116b8:	b480      	push	{r7}
 80116ba:	b083      	sub	sp, #12
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d002      	beq.n	80116ce <DetermineFrameType+0x16>
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d101      	bne.n	80116d2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80116ce:	2303      	movs	r3, #3
 80116d0:	e03b      	b.n	801174a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	7b1b      	ldrb	r3, [r3, #12]
 80116d6:	f003 030f 	and.w	r3, r3, #15
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d008      	beq.n	80116f2 <DetermineFrameType+0x3a>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d003      	beq.n	80116f2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 80116ea:	683b      	ldr	r3, [r7, #0]
 80116ec:	2200      	movs	r2, #0
 80116ee:	701a      	strb	r2, [r3, #0]
 80116f0:	e02a      	b.n	8011748 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d103      	bne.n	8011704 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	2201      	movs	r2, #1
 8011700:	701a      	strb	r2, [r3, #0]
 8011702:	e021      	b.n	8011748 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	7b1b      	ldrb	r3, [r3, #12]
 8011708:	f003 030f 	and.w	r3, r3, #15
 801170c:	b2db      	uxtb	r3, r3
 801170e:	2b00      	cmp	r3, #0
 8011710:	d108      	bne.n	8011724 <DetermineFrameType+0x6c>
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d103      	bne.n	8011724 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	2202      	movs	r2, #2
 8011720:	701a      	strb	r2, [r3, #0]
 8011722:	e011      	b.n	8011748 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	7b1b      	ldrb	r3, [r3, #12]
 8011728:	f003 030f 	and.w	r3, r3, #15
 801172c:	b2db      	uxtb	r3, r3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d108      	bne.n	8011744 <DetermineFrameType+0x8c>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d003      	beq.n	8011744 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	2203      	movs	r2, #3
 8011740:	701a      	strb	r2, [r3, #0]
 8011742:	e001      	b.n	8011748 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011744:	2318      	movs	r3, #24
 8011746:	e000      	b.n	801174a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011748:	2300      	movs	r3, #0
}
 801174a:	4618      	mov	r0, r3
 801174c:	370c      	adds	r7, #12
 801174e:	46bd      	mov	sp, r7
 8011750:	bc80      	pop	{r7}
 8011752:	4770      	bx	lr

08011754 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011754:	b480      	push	{r7}
 8011756:	b083      	sub	sp, #12
 8011758:	af00      	add	r7, sp, #0
 801175a:	4603      	mov	r3, r0
 801175c:	460a      	mov	r2, r1
 801175e:	71fb      	strb	r3, [r7, #7]
 8011760:	4613      	mov	r3, r2
 8011762:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011764:	79fa      	ldrb	r2, [r7, #7]
 8011766:	79bb      	ldrb	r3, [r7, #6]
 8011768:	429a      	cmp	r2, r3
 801176a:	d301      	bcc.n	8011770 <CheckRetrans+0x1c>
    {
        return true;
 801176c:	2301      	movs	r3, #1
 801176e:	e000      	b.n	8011772 <CheckRetrans+0x1e>
    }
    return false;
 8011770:	2300      	movs	r3, #0
}
 8011772:	4618      	mov	r0, r3
 8011774:	370c      	adds	r7, #12
 8011776:	46bd      	mov	sp, r7
 8011778:	bc80      	pop	{r7}
 801177a:	4770      	bx	lr

0801177c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 801177c:	b580      	push	{r7, lr}
 801177e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011780:	4b12      	ldr	r3, [pc, #72]	; (80117cc <CheckRetransUnconfirmedUplink+0x50>)
 8011782:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011786:	4a12      	ldr	r2, [pc, #72]	; (80117d0 <CheckRetransUnconfirmedUplink+0x54>)
 8011788:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 801178c:	4611      	mov	r1, r2
 801178e:	4618      	mov	r0, r3
 8011790:	f7ff ffe0 	bl	8011754 <CheckRetrans>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d001      	beq.n	801179e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 801179a:	2301      	movs	r3, #1
 801179c:	e014      	b.n	80117c8 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 801179e:	4b0b      	ldr	r3, [pc, #44]	; (80117cc <CheckRetransUnconfirmedUplink+0x50>)
 80117a0:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80117a4:	f003 0302 	and.w	r3, r3, #2
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00b      	beq.n	80117c6 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80117ae:	4b07      	ldr	r3, [pc, #28]	; (80117cc <CheckRetransUnconfirmedUplink+0x50>)
 80117b0:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d004      	beq.n	80117c2 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80117b8:	4b04      	ldr	r3, [pc, #16]	; (80117cc <CheckRetransUnconfirmedUplink+0x50>)
 80117ba:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80117be:	2b01      	cmp	r3, #1
 80117c0:	d101      	bne.n	80117c6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 80117c2:	2301      	movs	r3, #1
 80117c4:	e000      	b.n	80117c8 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 80117c6:	2300      	movs	r3, #0
}
 80117c8:	4618      	mov	r0, r3
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	20000788 	.word	0x20000788
 80117d0:	20000ca8 	.word	0x20000ca8

080117d4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80117d8:	4b10      	ldr	r3, [pc, #64]	; (801181c <CheckRetransConfirmedUplink+0x48>)
 80117da:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80117de:	4a10      	ldr	r2, [pc, #64]	; (8011820 <CheckRetransConfirmedUplink+0x4c>)
 80117e0:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80117e4:	4611      	mov	r1, r2
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7ff ffb4 	bl	8011754 <CheckRetrans>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 80117f2:	2301      	movs	r3, #1
 80117f4:	e00f      	b.n	8011816 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80117f6:	4b09      	ldr	r3, [pc, #36]	; (801181c <CheckRetransConfirmedUplink+0x48>)
 80117f8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80117fc:	f003 0302 	and.w	r3, r3, #2
 8011800:	b2db      	uxtb	r3, r3
 8011802:	2b00      	cmp	r3, #0
 8011804:	d006      	beq.n	8011814 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011806:	4b05      	ldr	r3, [pc, #20]	; (801181c <CheckRetransConfirmedUplink+0x48>)
 8011808:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011810:	2301      	movs	r3, #1
 8011812:	e000      	b.n	8011816 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011814:	2300      	movs	r3, #0
}
 8011816:	4618      	mov	r0, r3
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	20000788 	.word	0x20000788
 8011820:	20000ca8 	.word	0x20000ca8

08011824 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011824:	b480      	push	{r7}
 8011826:	b083      	sub	sp, #12
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011832:	d002      	beq.n	801183a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	3301      	adds	r3, #1
 8011838:	607b      	str	r3, [r7, #4]
    }
    return counter;
 801183a:	687b      	ldr	r3, [r7, #4]
}
 801183c:	4618      	mov	r0, r3
 801183e:	370c      	adds	r7, #12
 8011840:	46bd      	mov	sp, r7
 8011842:	bc80      	pop	{r7}
 8011844:	4770      	bx	lr
	...

08011848 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 801184c:	4b1a      	ldr	r3, [pc, #104]	; (80118b8 <StopRetransmission+0x70>)
 801184e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011852:	f003 0302 	and.w	r3, r3, #2
 8011856:	b2db      	uxtb	r3, r3
 8011858:	2b00      	cmp	r3, #0
 801185a:	d009      	beq.n	8011870 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801185c:	4b16      	ldr	r3, [pc, #88]	; (80118b8 <StopRetransmission+0x70>)
 801185e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011862:	2b00      	cmp	r3, #0
 8011864:	d011      	beq.n	801188a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011866:	4b14      	ldr	r3, [pc, #80]	; (80118b8 <StopRetransmission+0x70>)
 8011868:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801186c:	2b01      	cmp	r3, #1
 801186e:	d00c      	beq.n	801188a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011870:	4b12      	ldr	r3, [pc, #72]	; (80118bc <StopRetransmission+0x74>)
 8011872:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011876:	2b00      	cmp	r3, #0
 8011878:	d007      	beq.n	801188a <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 801187a:	4b10      	ldr	r3, [pc, #64]	; (80118bc <StopRetransmission+0x74>)
 801187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801187e:	4618      	mov	r0, r3
 8011880:	f7ff ffd0 	bl	8011824 <IncreaseAdrAckCounter>
 8011884:	4603      	mov	r3, r0
 8011886:	4a0d      	ldr	r2, [pc, #52]	; (80118bc <StopRetransmission+0x74>)
 8011888:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 801188a:	4b0b      	ldr	r3, [pc, #44]	; (80118b8 <StopRetransmission+0x70>)
 801188c:	2200      	movs	r2, #0
 801188e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8011892:	4b09      	ldr	r3, [pc, #36]	; (80118b8 <StopRetransmission+0x70>)
 8011894:	2200      	movs	r2, #0
 8011896:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801189a:	4b07      	ldr	r3, [pc, #28]	; (80118b8 <StopRetransmission+0x70>)
 801189c:	2200      	movs	r2, #0
 801189e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80118a2:	4b05      	ldr	r3, [pc, #20]	; (80118b8 <StopRetransmission+0x70>)
 80118a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118a8:	f023 0302 	bic.w	r3, r3, #2
 80118ac:	4a02      	ldr	r2, [pc, #8]	; (80118b8 <StopRetransmission+0x70>)
 80118ae:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 80118b2:	2301      	movs	r3, #1
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	20000788 	.word	0x20000788
 80118bc:	20000ca8 	.word	0x20000ca8

080118c0 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	4603      	mov	r3, r0
 80118c8:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80118ca:	4b0b      	ldr	r3, [pc, #44]	; (80118f8 <CallNvmDataChangeCallback+0x38>)
 80118cc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d00c      	beq.n	80118ee <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80118d4:	4b08      	ldr	r3, [pc, #32]	; (80118f8 <CallNvmDataChangeCallback+0x38>)
 80118d6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80118da:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d006      	beq.n	80118ee <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80118e0:	4b05      	ldr	r3, [pc, #20]	; (80118f8 <CallNvmDataChangeCallback+0x38>)
 80118e2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80118e6:	68db      	ldr	r3, [r3, #12]
 80118e8:	88fa      	ldrh	r2, [r7, #6]
 80118ea:	4610      	mov	r0, r2
 80118ec:	4798      	blx	r3
    }
}
 80118ee:	bf00      	nop
 80118f0:	3708      	adds	r7, #8
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
 80118f6:	bf00      	nop
 80118f8:	20000788 	.word	0x20000788

080118fc <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80118fc:	b480      	push	{r7}
 80118fe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011900:	4b0b      	ldr	r3, [pc, #44]	; (8011930 <IsRequestPending+0x34>)
 8011902:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011906:	f003 0304 	and.w	r3, r3, #4
 801190a:	b2db      	uxtb	r3, r3
 801190c:	2b00      	cmp	r3, #0
 801190e:	d107      	bne.n	8011920 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011910:	4b07      	ldr	r3, [pc, #28]	; (8011930 <IsRequestPending+0x34>)
 8011912:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011916:	f003 0301 	and.w	r3, r3, #1
 801191a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801191c:	2b00      	cmp	r3, #0
 801191e:	d001      	beq.n	8011924 <IsRequestPending+0x28>
    {
        return 1;
 8011920:	2301      	movs	r3, #1
 8011922:	e000      	b.n	8011926 <IsRequestPending+0x2a>
    }
    return 0;
 8011924:	2300      	movs	r3, #0
}
 8011926:	4618      	mov	r0, r3
 8011928:	46bd      	mov	sp, r7
 801192a:	bc80      	pop	{r7}
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	20000788 	.word	0x20000788

08011934 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	b091      	sub	sp, #68	; 0x44
 8011938:	af02      	add	r7, sp, #8
 801193a:	6178      	str	r0, [r7, #20]
 801193c:	6139      	str	r1, [r7, #16]
 801193e:	4613      	mov	r3, r2
 8011940:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d002      	beq.n	801194e <LoRaMacInitialization+0x1a>
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d101      	bne.n	8011952 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801194e:	2303      	movs	r3, #3
 8011950:	e27c      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d00b      	beq.n	8011972 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801195e:	2b00      	cmp	r3, #0
 8011960:	d007      	beq.n	8011972 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011966:	2b00      	cmp	r3, #0
 8011968:	d003      	beq.n	8011972 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801196e:	2b00      	cmp	r3, #0
 8011970:	d101      	bne.n	8011976 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011972:	2303      	movs	r3, #3
 8011974:	e26a      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011976:	7bfb      	ldrb	r3, [r7, #15]
 8011978:	4618      	mov	r0, r3
 801197a:	f003 fbdb 	bl	8015134 <RegionIsActive>
 801197e:	4603      	mov	r3, r0
 8011980:	f083 0301 	eor.w	r3, r3, #1
 8011984:	b2db      	uxtb	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d001      	beq.n	801198e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801198a:	2309      	movs	r3, #9
 801198c:	e25e      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801198e:	6978      	ldr	r0, [r7, #20]
 8011990:	f002 f882 	bl	8013a98 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011994:	f240 528c 	movw	r2, #1420	; 0x58c
 8011998:	2100      	movs	r1, #0
 801199a:	48c7      	ldr	r0, [pc, #796]	; (8011cb8 <LoRaMacInitialization+0x384>)
 801199c:	f007 fa18 	bl	8018dd0 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80119a0:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 80119a4:	2100      	movs	r1, #0
 80119a6:	48c5      	ldr	r0, [pc, #788]	; (8011cbc <LoRaMacInitialization+0x388>)
 80119a8:	f007 fa12 	bl	8018dd0 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 80119ac:	4ac2      	ldr	r2, [pc, #776]	; (8011cb8 <LoRaMacInitialization+0x384>)
 80119ae:	7bfb      	ldrb	r3, [r7, #15]
 80119b0:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 80119b4:	4bc0      	ldr	r3, [pc, #768]	; (8011cb8 <LoRaMacInitialization+0x384>)
 80119b6:	2200      	movs	r2, #0
 80119b8:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 80119bc:	4bbe      	ldr	r3, [pc, #760]	; (8011cb8 <LoRaMacInitialization+0x384>)
 80119be:	2200      	movs	r2, #0
 80119c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80119c4:	4bbc      	ldr	r3, [pc, #752]	; (8011cb8 <LoRaMacInitialization+0x384>)
 80119c6:	4abe      	ldr	r2, [pc, #760]	; (8011cc0 <LoRaMacInitialization+0x38c>)
 80119c8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80119cc:	2300      	movs	r3, #0
 80119ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80119d2:	4bbc      	ldr	r3, [pc, #752]	; (8011cc4 <LoRaMacInitialization+0x390>)
 80119d4:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80119d6:	4bbc      	ldr	r3, [pc, #752]	; (8011cc8 <LoRaMacInitialization+0x394>)
 80119d8:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 80119da:	4bbc      	ldr	r3, [pc, #752]	; (8011ccc <LoRaMacInitialization+0x398>)
 80119dc:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80119de:	4bb6      	ldr	r3, [pc, #728]	; (8011cb8 <LoRaMacInitialization+0x384>)
 80119e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119e4:	f107 021c 	add.w	r2, r7, #28
 80119e8:	4611      	mov	r1, r2
 80119ea:	4618      	mov	r0, r3
 80119ec:	f003 fbef 	bl	80151ce <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 80119f0:	230f      	movs	r3, #15
 80119f2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80119f6:	4bb0      	ldr	r3, [pc, #704]	; (8011cb8 <LoRaMacInitialization+0x384>)
 80119f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80119fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a00:	4611      	mov	r1, r2
 8011a02:	4618      	mov	r0, r3
 8011a04:	f003 fbab 	bl	801515e <RegionGetPhyParam>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	bf14      	ite	ne
 8011a12:	2301      	movne	r3, #1
 8011a14:	2300      	moveq	r3, #0
 8011a16:	b2da      	uxtb	r2, r3
 8011a18:	4ba7      	ldr	r3, [pc, #668]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a1a:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011a1e:	230a      	movs	r3, #10
 8011a20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a24:	4ba4      	ldr	r3, [pc, #656]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a2e:	4611      	mov	r1, r2
 8011a30:	4618      	mov	r0, r3
 8011a32:	f003 fb94 	bl	801515e <RegionGetPhyParam>
 8011a36:	4603      	mov	r3, r0
 8011a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3c:	b25a      	sxtb	r2, r3
 8011a3e:	4b9e      	ldr	r3, [pc, #632]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a40:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011a44:	2306      	movs	r3, #6
 8011a46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a4a:	4b9b      	ldr	r3, [pc, #620]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a54:	4611      	mov	r1, r2
 8011a56:	4618      	mov	r0, r3
 8011a58:	f003 fb81 	bl	801515e <RegionGetPhyParam>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a62:	b25a      	sxtb	r2, r3
 8011a64:	4b94      	ldr	r3, [pc, #592]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a66:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011a6a:	2310      	movs	r3, #16
 8011a6c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a70:	4b91      	ldr	r3, [pc, #580]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a76:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a7a:	4611      	mov	r1, r2
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f003 fb6e 	bl	801515e <RegionGetPhyParam>
 8011a82:	4603      	mov	r3, r0
 8011a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	4a8b      	ldr	r2, [pc, #556]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011a8e:	2311      	movs	r3, #17
 8011a90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011a94:	4b88      	ldr	r3, [pc, #544]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011a9a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011a9e:	4611      	mov	r1, r2
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f003 fb5c 	bl	801515e <RegionGetPhyParam>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aac:	4a82      	ldr	r2, [pc, #520]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011ab2:	2312      	movs	r3, #18
 8011ab4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ab8:	4b7f      	ldr	r3, [pc, #508]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011abe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f003 fb4a 	bl	801515e <RegionGetPhyParam>
 8011aca:	4603      	mov	r3, r0
 8011acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	4a79      	ldr	r2, [pc, #484]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011ad2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011ad6:	2313      	movs	r3, #19
 8011ad8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011adc:	4b76      	ldr	r3, [pc, #472]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ae2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f003 fb38 	bl	801515e <RegionGetPhyParam>
 8011aee:	4603      	mov	r3, r0
 8011af0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	4a70      	ldr	r2, [pc, #448]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011afa:	2314      	movs	r3, #20
 8011afc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b00:	4b6d      	ldr	r3, [pc, #436]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b0a:	4611      	mov	r1, r2
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f003 fb26 	bl	801515e <RegionGetPhyParam>
 8011b12:	4603      	mov	r3, r0
 8011b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	4a67      	ldr	r2, [pc, #412]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b1a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8011b1e:	2316      	movs	r3, #22
 8011b20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b24:	4b64      	ldr	r3, [pc, #400]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b2e:	4611      	mov	r1, r2
 8011b30:	4618      	mov	r0, r3
 8011b32:	f003 fb14 	bl	801515e <RegionGetPhyParam>
 8011b36:	4603      	mov	r3, r0
 8011b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8011b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3c:	b2da      	uxtb	r2, r3
 8011b3e:	4b5e      	ldr	r3, [pc, #376]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b40:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011b44:	2317      	movs	r3, #23
 8011b46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b4a:	4b5b      	ldr	r3, [pc, #364]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b54:	4611      	mov	r1, r2
 8011b56:	4618      	mov	r0, r3
 8011b58:	f003 fb01 	bl	801515e <RegionGetPhyParam>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b62:	4a55      	ldr	r2, [pc, #340]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b64:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6a:	4a53      	ldr	r2, [pc, #332]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b6c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011b70:	2318      	movs	r3, #24
 8011b72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011b76:	4b50      	ldr	r3, [pc, #320]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011b7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011b80:	4611      	mov	r1, r2
 8011b82:	4618      	mov	r0, r3
 8011b84:	f003 faeb 	bl	801515e <RegionGetPhyParam>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8011b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8e:	b2da      	uxtb	r2, r3
 8011b90:	4b49      	ldr	r3, [pc, #292]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b92:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	4b47      	ldr	r3, [pc, #284]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011b9c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011ba0:	231d      	movs	r3, #29
 8011ba2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ba6:	4b44      	ldr	r3, [pc, #272]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f003 fad3 	bl	801515e <RegionGetPhyParam>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	b2da      	uxtb	r2, r3
 8011bc0:	4b3d      	ldr	r3, [pc, #244]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011bc2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011bc6:	231e      	movs	r3, #30
 8011bc8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bcc:	4b3a      	ldr	r3, [pc, #232]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bd6:	4611      	mov	r1, r2
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f003 fac0 	bl	801515e <RegionGetPhyParam>
 8011bde:	4603      	mov	r3, r0
 8011be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8011be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	4b34      	ldr	r3, [pc, #208]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011be8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8011bec:	231f      	movs	r3, #31
 8011bee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011bf2:	4b31      	ldr	r3, [pc, #196]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bf8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f003 faad 	bl	801515e <RegionGetPhyParam>
 8011c04:	4603      	mov	r3, r0
 8011c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8011c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0a:	4a2b      	ldr	r2, [pc, #172]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c0c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8011c10:	2320      	movs	r3, #32
 8011c12:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c16:	4b28      	ldr	r3, [pc, #160]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c20:	4611      	mov	r1, r2
 8011c22:	4618      	mov	r0, r3
 8011c24:	f003 fa9b 	bl	801515e <RegionGetPhyParam>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	4a22      	ldr	r2, [pc, #136]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c30:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011c34:	230b      	movs	r3, #11
 8011c36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c3a:	4b1f      	ldr	r3, [pc, #124]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c44:	4611      	mov	r1, r2
 8011c46:	4618      	mov	r0, r3
 8011c48:	f003 fa89 	bl	801515e <RegionGetPhyParam>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	4b19      	ldr	r3, [pc, #100]	; (8011cbc <LoRaMacInitialization+0x388>)
 8011c56:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011c5a:	230c      	movs	r3, #12
 8011c5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011c60:	4b15      	ldr	r3, [pc, #84]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c66:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011c6a:	4611      	mov	r1, r2
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f003 fa76 	bl	801515e <RegionGetPhyParam>
 8011c72:	4603      	mov	r3, r0
 8011c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8011c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c78:	b29a      	uxth	r2, r3
 8011c7a:	4b10      	ldr	r3, [pc, #64]	; (8011cbc <LoRaMacInitialization+0x388>)
 8011c7c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011c80:	4b0d      	ldr	r3, [pc, #52]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c82:	2201      	movs	r2, #1
 8011c84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011c88:	4b0b      	ldr	r3, [pc, #44]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c8a:	220a      	movs	r2, #10
 8011c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011c90:	4b09      	ldr	r3, [pc, #36]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c92:	2206      	movs	r2, #6
 8011c94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011c98:	4b07      	ldr	r3, [pc, #28]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c9e:	4a06      	ldr	r2, [pc, #24]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011ca0:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011ca2:	4b05      	ldr	r3, [pc, #20]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011ca4:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011ca8:	4b03      	ldr	r3, [pc, #12]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011caa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011cae:	4b02      	ldr	r3, [pc, #8]	; (8011cb8 <LoRaMacInitialization+0x384>)
 8011cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cb4:	e00c      	b.n	8011cd0 <LoRaMacInitialization+0x39c>
 8011cb6:	bf00      	nop
 8011cb8:	20000ca8 	.word	0x20000ca8
 8011cbc:	20000788 	.word	0x20000788
 8011cc0:	01000400 	.word	0x01000400
 8011cc4:	20000e8c 	.word	0x20000e8c
 8011cc8:	20000ea0 	.word	0x20000ea0
 8011ccc:	200017c0 	.word	0x200017c0
 8011cd0:	4a60      	ldr	r2, [pc, #384]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011cd4:	4b5f      	ldr	r3, [pc, #380]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011cda:	4a5e      	ldr	r2, [pc, #376]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cdc:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011cde:	4b5d      	ldr	r3, [pc, #372]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011ce0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011ce4:	4a5b      	ldr	r2, [pc, #364]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011ce6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8011ce8:	4b5a      	ldr	r3, [pc, #360]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011cee:	4a59      	ldr	r2, [pc, #356]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cf0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8011cf2:	4b58      	ldr	r3, [pc, #352]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cf4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011cf8:	4a56      	ldr	r2, [pc, #344]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cfa:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8011cfc:	4b55      	ldr	r3, [pc, #340]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011cfe:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8011d02:	4b54      	ldr	r3, [pc, #336]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011d04:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8011d08:	4b52      	ldr	r3, [pc, #328]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011d0a:	2201      	movs	r2, #1
 8011d0c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8011d10:	4a51      	ldr	r2, [pc, #324]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8011d18:	f7ff f8d4 	bl	8010ec4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8011d1c:	4b4d      	ldr	r3, [pc, #308]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011d1e:	2201      	movs	r2, #1
 8011d20:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8011d24:	4a4c      	ldr	r2, [pc, #304]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8011d2c:	4b4a      	ldr	r3, [pc, #296]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011d2e:	2200      	movs	r2, #0
 8011d30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8011d34:	4b48      	ldr	r3, [pc, #288]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011d36:	2201      	movs	r2, #1
 8011d38:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8011d3c:	4b45      	ldr	r3, [pc, #276]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011d42:	4b44      	ldr	r3, [pc, #272]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011d44:	2200      	movs	r2, #0
 8011d46:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011d48:	2300      	movs	r3, #0
 8011d4a:	9300      	str	r3, [sp, #0]
 8011d4c:	4b43      	ldr	r3, [pc, #268]	; (8011e5c <LoRaMacInitialization+0x528>)
 8011d4e:	2200      	movs	r2, #0
 8011d50:	f04f 31ff 	mov.w	r1, #4294967295
 8011d54:	4842      	ldr	r0, [pc, #264]	; (8011e60 <LoRaMacInitialization+0x52c>)
 8011d56:	f00a ff69 	bl	801cc2c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	9300      	str	r3, [sp, #0]
 8011d5e:	4b41      	ldr	r3, [pc, #260]	; (8011e64 <LoRaMacInitialization+0x530>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	f04f 31ff 	mov.w	r1, #4294967295
 8011d66:	4840      	ldr	r0, [pc, #256]	; (8011e68 <LoRaMacInitialization+0x534>)
 8011d68:	f00a ff60 	bl	801cc2c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	4b3e      	ldr	r3, [pc, #248]	; (8011e6c <LoRaMacInitialization+0x538>)
 8011d72:	2200      	movs	r2, #0
 8011d74:	f04f 31ff 	mov.w	r1, #4294967295
 8011d78:	483d      	ldr	r0, [pc, #244]	; (8011e70 <LoRaMacInitialization+0x53c>)
 8011d7a:	f00a ff57 	bl	801cc2c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011d7e:	2300      	movs	r3, #0
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	4b3c      	ldr	r3, [pc, #240]	; (8011e74 <LoRaMacInitialization+0x540>)
 8011d84:	2200      	movs	r2, #0
 8011d86:	f04f 31ff 	mov.w	r1, #4294967295
 8011d8a:	483b      	ldr	r0, [pc, #236]	; (8011e78 <LoRaMacInitialization+0x544>)
 8011d8c:	f00a ff4e 	bl	801cc2c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011d90:	4c30      	ldr	r4, [pc, #192]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011d92:	463b      	mov	r3, r7
 8011d94:	4618      	mov	r0, r3
 8011d96:	f00a fbc1 	bl	801c51c <SysTimeGetMcuTime>
 8011d9a:	f504 7388 	add.w	r3, r4, #272	; 0x110
 8011d9e:	463a      	mov	r2, r7
 8011da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011da4:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011da8:	4b34      	ldr	r3, [pc, #208]	; (8011e7c <LoRaMacInitialization+0x548>)
 8011daa:	2200      	movs	r2, #0
 8011dac:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011dae:	4b2a      	ldr	r3, [pc, #168]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011db0:	4a33      	ldr	r2, [pc, #204]	; (8011e80 <LoRaMacInitialization+0x54c>)
 8011db2:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011db6:	4b28      	ldr	r3, [pc, #160]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011db8:	4a32      	ldr	r2, [pc, #200]	; (8011e84 <LoRaMacInitialization+0x550>)
 8011dba:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011dbe:	4b26      	ldr	r3, [pc, #152]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011dc0:	4a31      	ldr	r2, [pc, #196]	; (8011e88 <LoRaMacInitialization+0x554>)
 8011dc2:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011dc6:	4b24      	ldr	r3, [pc, #144]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011dc8:	4a30      	ldr	r2, [pc, #192]	; (8011e8c <LoRaMacInitialization+0x558>)
 8011dca:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011dce:	4b22      	ldr	r3, [pc, #136]	; (8011e58 <LoRaMacInitialization+0x524>)
 8011dd0:	4a2f      	ldr	r2, [pc, #188]	; (8011e90 <LoRaMacInitialization+0x55c>)
 8011dd2:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011dd6:	4b2f      	ldr	r3, [pc, #188]	; (8011e94 <LoRaMacInitialization+0x560>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	482f      	ldr	r0, [pc, #188]	; (8011e98 <LoRaMacInitialization+0x564>)
 8011ddc:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	689b      	ldr	r3, [r3, #8]
 8011de2:	4619      	mov	r1, r3
 8011de4:	482d      	ldr	r0, [pc, #180]	; (8011e9c <LoRaMacInitialization+0x568>)
 8011de6:	f7fa fb87 	bl	800c4f8 <SecureElementInit>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d001      	beq.n	8011df4 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011df0:	2311      	movs	r3, #17
 8011df2:	e02b      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8011df4:	4817      	ldr	r0, [pc, #92]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011df6:	f002 fafb 	bl	80143f0 <LoRaMacCryptoInit>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d001      	beq.n	8011e04 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e00:	2311      	movs	r3, #17
 8011e02:	e023      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8011e04:	f001 fc1a 	bl	801363c <LoRaMacCommandsInit>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d001      	beq.n	8011e12 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011e0e:	2313      	movs	r3, #19
 8011e10:	e01c      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011e12:	4823      	ldr	r0, [pc, #140]	; (8011ea0 <LoRaMacInitialization+0x56c>)
 8011e14:	f002 fb8c 	bl	8014530 <LoRaMacCryptoSetMulticastReference>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d001      	beq.n	8011e22 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011e1e:	2311      	movs	r3, #17
 8011e20:	e014      	b.n	8011e4c <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011e22:	4b1c      	ldr	r3, [pc, #112]	; (8011e94 <LoRaMacInitialization+0x560>)
 8011e24:	695b      	ldr	r3, [r3, #20]
 8011e26:	4798      	blx	r3
 8011e28:	4603      	mov	r3, r0
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f006 ff70 	bl	8018d10 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011e30:	4b18      	ldr	r3, [pc, #96]	; (8011e94 <LoRaMacInitialization+0x560>)
 8011e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e34:	4a07      	ldr	r2, [pc, #28]	; (8011e54 <LoRaMacInitialization+0x520>)
 8011e36:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011e3a:	4610      	mov	r0, r2
 8011e3c:	4798      	blx	r3
    Radio.Sleep( );
 8011e3e:	4b15      	ldr	r3, [pc, #84]	; (8011e94 <LoRaMacInitialization+0x560>)
 8011e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e42:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011e44:	2001      	movs	r0, #1
 8011e46:	f7fd fad3 	bl	800f3f0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011e4a:	2300      	movs	r3, #0
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	373c      	adds	r7, #60	; 0x3c
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd90      	pop	{r4, r7, pc}
 8011e54:	20000ca8 	.word	0x20000ca8
 8011e58:	20000788 	.word	0x20000788
 8011e5c:	0800f9a5 	.word	0x0800f9a5
 8011e60:	20000af0 	.word	0x20000af0
 8011e64:	0800fa35 	.word	0x0800fa35
 8011e68:	20000b08 	.word	0x20000b08
 8011e6c:	0800faad 	.word	0x0800faad
 8011e70:	20000b20 	.word	0x20000b20
 8011e74:	0800fb2d 	.word	0x0800fb2d
 8011e78:	20000b8c 	.word	0x20000b8c
 8011e7c:	20001850 	.word	0x20001850
 8011e80:	0800e4a5 	.word	0x0800e4a5
 8011e84:	0800e51d 	.word	0x0800e51d
 8011e88:	0800e5fd 	.word	0x0800e5fd
 8011e8c:	0800e5b1 	.word	0x0800e5b1
 8011e90:	0800e639 	.word	0x0800e639
 8011e94:	0801eef8 	.word	0x0801eef8
 8011e98:	20000ad4 	.word	0x20000ad4
 8011e9c:	20000dcc 	.word	0x20000dcc
 8011ea0:	20000d80 	.word	0x20000d80

08011ea4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011ea8:	4b04      	ldr	r3, [pc, #16]	; (8011ebc <LoRaMacStart+0x18>)
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bc80      	pop	{r7}
 8011eb8:	4770      	bx	lr
 8011eba:	bf00      	nop
 8011ebc:	20000788 	.word	0x20000788

08011ec0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011ec4:	f7fd fa74 	bl	800f3b0 <LoRaMacIsBusy>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	f083 0301 	eor.w	r3, r3, #1
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d005      	beq.n	8011ee0 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8011ed4:	4b07      	ldr	r3, [pc, #28]	; (8011ef4 <LoRaMacStop+0x34>)
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8011edc:	2300      	movs	r3, #0
 8011ede:	e007      	b.n	8011ef0 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011ee0:	4b04      	ldr	r3, [pc, #16]	; (8011ef4 <LoRaMacStop+0x34>)
 8011ee2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d101      	bne.n	8011eee <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	e000      	b.n	8011ef0 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 8011eee:	2301      	movs	r3, #1
}
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	20000788 	.word	0x20000788

08011ef8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8011efc:	4812      	ldr	r0, [pc, #72]	; (8011f48 <LoRaMacHalt+0x50>)
 8011efe:	f00a ff39 	bl	801cd74 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8011f02:	4812      	ldr	r0, [pc, #72]	; (8011f4c <LoRaMacHalt+0x54>)
 8011f04:	f00a ff36 	bl	801cd74 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8011f08:	4811      	ldr	r0, [pc, #68]	; (8011f50 <LoRaMacHalt+0x58>)
 8011f0a:	f00a ff33 	bl	801cd74 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8011f0e:	4811      	ldr	r0, [pc, #68]	; (8011f54 <LoRaMacHalt+0x5c>)
 8011f10:	f00a ff30 	bl	801cd74 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8011f14:	f001 fa04 	bl	8013320 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8011f18:	4b0f      	ldr	r3, [pc, #60]	; (8011f58 <LoRaMacHalt+0x60>)
 8011f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8011f1e:	4b0f      	ldr	r3, [pc, #60]	; (8011f5c <LoRaMacHalt+0x64>)
 8011f20:	2200      	movs	r2, #0
 8011f22:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8011f26:	480e      	ldr	r0, [pc, #56]	; (8011f60 <LoRaMacHalt+0x68>)
 8011f28:	f7fd fc18 	bl	800f75c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8011f2c:	f240 528c 	movw	r2, #1420	; 0x58c
 8011f30:	490b      	ldr	r1, [pc, #44]	; (8011f60 <LoRaMacHalt+0x68>)
 8011f32:	480c      	ldr	r0, [pc, #48]	; (8011f64 <LoRaMacHalt+0x6c>)
 8011f34:	f006 ff11 	bl	8018d5a <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8011f38:	4b08      	ldr	r3, [pc, #32]	; (8011f5c <LoRaMacHalt+0x64>)
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011f40:	2300      	movs	r3, #0
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	20000af0 	.word	0x20000af0
 8011f4c:	20000b08 	.word	0x20000b08
 8011f50:	20000b20 	.word	0x20000b20
 8011f54:	20000b8c 	.word	0x20000b8c
 8011f58:	0801eef8 	.word	0x0801eef8
 8011f5c:	20000788 	.word	0x20000788
 8011f60:	20000ca8 	.word	0x20000ca8
 8011f64:	20001234 	.word	0x20001234

08011f68 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011f68:	b590      	push	{r4, r7, lr}
 8011f6a:	b08d      	sub	sp, #52	; 0x34
 8011f6c:	af02      	add	r7, sp, #8
 8011f6e:	4603      	mov	r3, r0
 8011f70:	6039      	str	r1, [r7, #0]
 8011f72:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011f74:	4b42      	ldr	r3, [pc, #264]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f78:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011f7a:	4b41      	ldr	r3, [pc, #260]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011f7c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8011f80:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011f82:	4b3f      	ldr	r3, [pc, #252]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011f84:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8011f88:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011f8a:	4b3e      	ldr	r3, [pc, #248]	; (8012084 <LoRaMacQueryTxPossible+0x11c>)
 8011f8c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011f90:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011f92:	2300      	movs	r3, #0
 8011f94:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d101      	bne.n	8011fa0 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f9c:	2303      	movs	r3, #3
 8011f9e:	e06b      	b.n	8012078 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011fa4:	4b36      	ldr	r3, [pc, #216]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011fa6:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011faa:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011fac:	4b34      	ldr	r3, [pc, #208]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fb0:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011fb2:	4b34      	ldr	r3, [pc, #208]	; (8012084 <LoRaMacQueryTxPossible+0x11c>)
 8011fb4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8011fb8:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011fba:	4b32      	ldr	r3, [pc, #200]	; (8012084 <LoRaMacQueryTxPossible+0x11c>)
 8011fbc:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8011fc0:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011fc2:	4b2f      	ldr	r3, [pc, #188]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011fc4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011fc8:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011fcc:	4b2c      	ldr	r3, [pc, #176]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011fce:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011fd2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011fd6:	4b2b      	ldr	r3, [pc, #172]	; (8012084 <LoRaMacQueryTxPossible+0x11c>)
 8011fd8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011fe0:	4b27      	ldr	r3, [pc, #156]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011fe2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8011fea:	4b25      	ldr	r3, [pc, #148]	; (8012080 <LoRaMacQueryTxPossible+0x118>)
 8011fec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ff0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8011ff4:	f107 040d 	add.w	r4, r7, #13
 8011ff8:	f107 020e 	add.w	r2, r7, #14
 8011ffc:	f107 010f 	add.w	r1, r7, #15
 8012000:	f107 0014 	add.w	r0, r7, #20
 8012004:	f107 0310 	add.w	r3, r7, #16
 8012008:	9300      	str	r3, [sp, #0]
 801200a:	4623      	mov	r3, r4
 801200c:	f001 f852 	bl	80130b4 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8012010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012014:	4618      	mov	r0, r3
 8012016:	f7fd fec5 	bl	800fda4 <GetMaxAppPayloadWithoutFOptsLength>
 801201a:	4603      	mov	r3, r0
 801201c:	461a      	mov	r2, r3
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8012022:	f107 0308 	add.w	r3, r7, #8
 8012026:	4618      	mov	r0, r3
 8012028:	f001 fbd6 	bl	80137d8 <LoRaMacCommandsGetSizeSerializedCmds>
 801202c:	4603      	mov	r3, r0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d001      	beq.n	8012036 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012032:	2313      	movs	r3, #19
 8012034:	e020      	b.n	8012078 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2b0f      	cmp	r3, #15
 801203a:	d819      	bhi.n	8012070 <LoRaMacQueryTxPossible+0x108>
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	785b      	ldrb	r3, [r3, #1]
 8012040:	461a      	mov	r2, r3
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	429a      	cmp	r2, r3
 8012046:	d313      	bcc.n	8012070 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	785a      	ldrb	r2, [r3, #1]
 801204c:	68bb      	ldr	r3, [r7, #8]
 801204e:	b2db      	uxtb	r3, r3
 8012050:	1ad3      	subs	r3, r2, r3
 8012052:	b2da      	uxtb	r2, r3
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	785b      	ldrb	r3, [r3, #1]
 801205c:	4619      	mov	r1, r3
 801205e:	79fa      	ldrb	r2, [r7, #7]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	4413      	add	r3, r2
 8012064:	4299      	cmp	r1, r3
 8012066:	d301      	bcc.n	801206c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012068:	2300      	movs	r3, #0
 801206a:	e005      	b.n	8012078 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801206c:	2308      	movs	r3, #8
 801206e:	e003      	b.n	8012078 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	2200      	movs	r2, #0
 8012074:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012076:	2308      	movs	r3, #8
    }
}
 8012078:	4618      	mov	r0, r3
 801207a:	372c      	adds	r7, #44	; 0x2c
 801207c:	46bd      	mov	sp, r7
 801207e:	bd90      	pop	{r4, r7, pc}
 8012080:	20000ca8 	.word	0x20000ca8
 8012084:	20000788 	.word	0x20000788

08012088 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8012088:	b590      	push	{r4, r7, lr}
 801208a:	b087      	sub	sp, #28
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012090:	2300      	movs	r3, #0
 8012092:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d101      	bne.n	801209e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801209a:	2303      	movs	r3, #3
 801209c:	e191      	b.n	80123c2 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	781b      	ldrb	r3, [r3, #0]
 80120a2:	2b39      	cmp	r3, #57	; 0x39
 80120a4:	f200 8186 	bhi.w	80123b4 <LoRaMacMibGetRequestConfirm+0x32c>
 80120a8:	a201      	add	r2, pc, #4	; (adr r2, 80120b0 <LoRaMacMibGetRequestConfirm+0x28>)
 80120aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80120ae:	bf00      	nop
 80120b0:	08012199 	.word	0x08012199
 80120b4:	080121a5 	.word	0x080121a5
 80120b8:	080121b1 	.word	0x080121b1
 80120bc:	080121bd 	.word	0x080121bd
 80120c0:	080121c9 	.word	0x080121c9
 80120c4:	080121d5 	.word	0x080121d5
 80120c8:	080121e1 	.word	0x080121e1
 80120cc:	080123b5 	.word	0x080123b5
 80120d0:	080123b5 	.word	0x080123b5
 80120d4:	080123b5 	.word	0x080123b5
 80120d8:	080123b5 	.word	0x080123b5
 80120dc:	080123b5 	.word	0x080123b5
 80120e0:	080123b5 	.word	0x080123b5
 80120e4:	080123b5 	.word	0x080123b5
 80120e8:	080123b5 	.word	0x080123b5
 80120ec:	080121ed 	.word	0x080121ed
 80120f0:	080121f9 	.word	0x080121f9
 80120f4:	08012205 	.word	0x08012205
 80120f8:	08012227 	.word	0x08012227
 80120fc:	08012239 	.word	0x08012239
 8012100:	0801224b 	.word	0x0801224b
 8012104:	0801225d 	.word	0x0801225d
 8012108:	08012291 	.word	0x08012291
 801210c:	0801226f 	.word	0x0801226f
 8012110:	080122b3 	.word	0x080122b3
 8012114:	080122bf 	.word	0x080122bf
 8012118:	080122c9 	.word	0x080122c9
 801211c:	080122d3 	.word	0x080122d3
 8012120:	080122dd 	.word	0x080122dd
 8012124:	080122e7 	.word	0x080122e7
 8012128:	080122f1 	.word	0x080122f1
 801212c:	0801231d 	.word	0x0801231d
 8012130:	08012329 	.word	0x08012329
 8012134:	08012341 	.word	0x08012341
 8012138:	08012335 	.word	0x08012335
 801213c:	0801234d 	.word	0x0801234d
 8012140:	08012357 	.word	0x08012357
 8012144:	08012363 	.word	0x08012363
 8012148:	0801237d 	.word	0x0801237d
 801214c:	0801236d 	.word	0x0801236d
 8012150:	08012375 	.word	0x08012375
 8012154:	080123b5 	.word	0x080123b5
 8012158:	08012389 	.word	0x08012389
 801215c:	080123b5 	.word	0x080123b5
 8012160:	080123b5 	.word	0x080123b5
 8012164:	080123b5 	.word	0x080123b5
 8012168:	080123b5 	.word	0x080123b5
 801216c:	080123b5 	.word	0x080123b5
 8012170:	080123b5 	.word	0x080123b5
 8012174:	080123b5 	.word	0x080123b5
 8012178:	080123b5 	.word	0x080123b5
 801217c:	080123b5 	.word	0x080123b5
 8012180:	080123b5 	.word	0x080123b5
 8012184:	080123b5 	.word	0x080123b5
 8012188:	080123b5 	.word	0x080123b5
 801218c:	080123b5 	.word	0x080123b5
 8012190:	0801239d 	.word	0x0801239d
 8012194:	080123a9 	.word	0x080123a9
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8012198:	4b8c      	ldr	r3, [pc, #560]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801219a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	711a      	strb	r2, [r3, #4]
            break;
 80121a2:	e10d      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80121a4:	4b89      	ldr	r3, [pc, #548]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80121a6:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	711a      	strb	r2, [r3, #4]
            break;
 80121ae:	e107      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80121b0:	f7fa fc80 	bl	800cab4 <SecureElementGetDevEui>
 80121b4:	4602      	mov	r2, r0
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	605a      	str	r2, [r3, #4]
            break;
 80121ba:	e101      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80121bc:	f7fa fc9c 	bl	800caf8 <SecureElementGetJoinEui>
 80121c0:	4602      	mov	r2, r0
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	605a      	str	r2, [r3, #4]
            break;
 80121c6:	e0fb      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80121c8:	4b80      	ldr	r3, [pc, #512]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80121ca:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	711a      	strb	r2, [r3, #4]
            break;
 80121d2:	e0f5      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80121d4:	4b7d      	ldr	r3, [pc, #500]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80121d6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	605a      	str	r2, [r3, #4]
            break;
 80121de:	e0ef      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80121e0:	4b7a      	ldr	r3, [pc, #488]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80121e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	605a      	str	r2, [r3, #4]
            break;
 80121ea:	e0e9      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80121ec:	4b77      	ldr	r3, [pc, #476]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80121ee:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	711a      	strb	r2, [r3, #4]
            break;
 80121f6:	e0e3      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80121f8:	4b74      	ldr	r3, [pc, #464]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80121fa:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	711a      	strb	r2, [r3, #4]
            break;
 8012202:	e0dd      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012204:	231c      	movs	r3, #28
 8012206:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012208:	4b70      	ldr	r3, [pc, #448]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801220a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801220e:	f107 0210 	add.w	r2, r7, #16
 8012212:	4611      	mov	r1, r2
 8012214:	4618      	mov	r0, r3
 8012216:	f002 ffa2 	bl	801515e <RegionGetPhyParam>
 801221a:	4603      	mov	r3, r0
 801221c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801221e:	68fa      	ldr	r2, [r7, #12]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	605a      	str	r2, [r3, #4]
            break;
 8012224:	e0cc      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	4a68      	ldr	r2, [pc, #416]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801222a:	3304      	adds	r3, #4
 801222c:	3264      	adds	r2, #100	; 0x64
 801222e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012232:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012236:	e0c3      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	4a64      	ldr	r2, [pc, #400]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801223c:	3304      	adds	r3, #4
 801223e:	32a8      	adds	r2, #168	; 0xa8
 8012240:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012244:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012248:	e0ba      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	4a5f      	ldr	r2, [pc, #380]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801224e:	3304      	adds	r3, #4
 8012250:	326c      	adds	r2, #108	; 0x6c
 8012252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012256:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801225a:	e0b1      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	4a5b      	ldr	r2, [pc, #364]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012260:	3304      	adds	r3, #4
 8012262:	32b0      	adds	r2, #176	; 0xb0
 8012264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012268:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801226c:	e0a8      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801226e:	231a      	movs	r3, #26
 8012270:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012272:	4b56      	ldr	r3, [pc, #344]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012278:	f107 0210 	add.w	r2, r7, #16
 801227c:	4611      	mov	r1, r2
 801227e:	4618      	mov	r0, r3
 8012280:	f002 ff6d 	bl	801515e <RegionGetPhyParam>
 8012284:	4603      	mov	r3, r0
 8012286:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8012288:	68fa      	ldr	r2, [r7, #12]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	605a      	str	r2, [r3, #4]
            break;
 801228e:	e097      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8012290:	2319      	movs	r3, #25
 8012292:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012294:	4b4d      	ldr	r3, [pc, #308]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801229a:	f107 0210 	add.w	r2, r7, #16
 801229e:	4611      	mov	r1, r2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f002 ff5c 	bl	801515e <RegionGetPhyParam>
 80122a6:	4603      	mov	r3, r0
 80122a8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	605a      	str	r2, [r3, #4]
            break;
 80122b0:	e086      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80122b2:	4b46      	ldr	r3, [pc, #280]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122b4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	711a      	strb	r2, [r3, #4]
            break;
 80122bc:	e080      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80122be:	4b43      	ldr	r3, [pc, #268]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	605a      	str	r2, [r3, #4]
            break;
 80122c6:	e07b      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80122c8:	4b40      	ldr	r3, [pc, #256]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	605a      	str	r2, [r3, #4]
            break;
 80122d0:	e076      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80122d2:	4b3e      	ldr	r3, [pc, #248]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	605a      	str	r2, [r3, #4]
            break;
 80122da:	e071      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80122dc:	4b3b      	ldr	r3, [pc, #236]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	605a      	str	r2, [r3, #4]
            break;
 80122e4:	e06c      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80122e6:	4b39      	ldr	r3, [pc, #228]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	605a      	str	r2, [r3, #4]
            break;
 80122ee:	e067      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80122f0:	2302      	movs	r3, #2
 80122f2:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122f4:	4b35      	ldr	r3, [pc, #212]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122f6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80122fa:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122fc:	4b33      	ldr	r3, [pc, #204]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80122fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012302:	f107 0210 	add.w	r2, r7, #16
 8012306:	4611      	mov	r1, r2
 8012308:	4618      	mov	r0, r3
 801230a:	f002 ff28 	bl	801515e <RegionGetPhyParam>
 801230e:	4603      	mov	r3, r0
 8012310:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	b25a      	sxtb	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	711a      	strb	r2, [r3, #4]
            break;
 801231a:	e051      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801231c:	4b2b      	ldr	r3, [pc, #172]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801231e:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	711a      	strb	r2, [r3, #4]
            break;
 8012326:	e04b      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012328:	4b28      	ldr	r3, [pc, #160]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801232a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	711a      	strb	r2, [r3, #4]
            break;
 8012332:	e045      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012334:	4b25      	ldr	r3, [pc, #148]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012336:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	711a      	strb	r2, [r3, #4]
            break;
 801233e:	e03f      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012340:	4b22      	ldr	r3, [pc, #136]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012342:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	711a      	strb	r2, [r3, #4]
            break;
 801234a:	e039      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801234c:	4b1f      	ldr	r3, [pc, #124]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801234e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	605a      	str	r2, [r3, #4]
            break;
 8012354:	e034      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012356:	4b1d      	ldr	r3, [pc, #116]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012358:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	711a      	strb	r2, [r3, #4]
            break;
 8012360:	e02e      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8012362:	4b1a      	ldr	r3, [pc, #104]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012364:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	605a      	str	r2, [r3, #4]
            break;
 801236a:	e029      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4a17      	ldr	r2, [pc, #92]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 8012370:	605a      	str	r2, [r3, #4]
            break;
 8012372:	e025      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	4a16      	ldr	r2, [pc, #88]	; (80123d0 <LoRaMacMibGetRequestConfirm+0x348>)
 8012378:	605a      	str	r2, [r3, #4]
            break;
 801237a:	e021      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801237c:	4b13      	ldr	r3, [pc, #76]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801237e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	605a      	str	r2, [r3, #4]
            break;
 8012386:	e01b      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	4a10      	ldr	r2, [pc, #64]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801238c:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8012390:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8012392:	687c      	ldr	r4, [r7, #4]
 8012394:	f003 f8f4 	bl	8015580 <RegionGetVersion>
 8012398:	60a0      	str	r0, [r4, #8]
            break;
 801239a:	e011      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801239c:	4b0b      	ldr	r3, [pc, #44]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 801239e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	605a      	str	r2, [r3, #4]
            break;
 80123a6:	e00b      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80123a8:	4b08      	ldr	r3, [pc, #32]	; (80123cc <LoRaMacMibGetRequestConfirm+0x344>)
 80123aa:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	711a      	strb	r2, [r3, #4]
            break;
 80123b2:	e005      	b.n	80123c0 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 ffca 	bl	801334e <LoRaMacClassBMibGetRequestConfirm>
 80123ba:	4603      	mov	r3, r0
 80123bc:	75fb      	strb	r3, [r7, #23]
            break;
 80123be:	bf00      	nop
        }
    }
    return status;
 80123c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	371c      	adds	r7, #28
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd90      	pop	{r4, r7, pc}
 80123ca:	bf00      	nop
 80123cc:	20000ca8 	.word	0x20000ca8
 80123d0:	20001234 	.word	0x20001234

080123d4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b086      	sub	sp, #24
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80123dc:	2300      	movs	r3, #0
 80123de:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d101      	bne.n	80123ea <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80123e6:	2303      	movs	r3, #3
 80123e8:	e35c      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80123ea:	4bb9      	ldr	r3, [pc, #740]	; (80126d0 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80123ec:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80123f0:	f003 0302 	and.w	r3, r3, #2
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d001      	beq.n	80123fc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80123f8:	2301      	movs	r3, #1
 80123fa:	e353      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	2b39      	cmp	r3, #57	; 0x39
 8012402:	f200 8323 	bhi.w	8012a4c <LoRaMacMibSetRequestConfirm+0x678>
 8012406:	a201      	add	r2, pc, #4	; (adr r2, 801240c <LoRaMacMibSetRequestConfirm+0x38>)
 8012408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801240c:	080124f5 	.word	0x080124f5
 8012410:	08012505 	.word	0x08012505
 8012414:	0801251f 	.word	0x0801251f
 8012418:	08012537 	.word	0x08012537
 801241c:	0801254f 	.word	0x0801254f
 8012420:	0801255b 	.word	0x0801255b
 8012424:	08012567 	.word	0x08012567
 8012428:	08012573 	.word	0x08012573
 801242c:	08012599 	.word	0x08012599
 8012430:	080125bf 	.word	0x080125bf
 8012434:	080125e5 	.word	0x080125e5
 8012438:	0801260b 	.word	0x0801260b
 801243c:	08012631 	.word	0x08012631
 8012440:	08012657 	.word	0x08012657
 8012444:	0801267d 	.word	0x0801267d
 8012448:	080126a3 	.word	0x080126a3
 801244c:	080126c3 	.word	0x080126c3
 8012450:	08012a4d 	.word	0x08012a4d
 8012454:	080126dd 	.word	0x080126dd
 8012458:	0801274d 	.word	0x0801274d
 801245c:	0801278d 	.word	0x0801278d
 8012460:	080127ef 	.word	0x080127ef
 8012464:	0801285f 	.word	0x0801285f
 8012468:	0801282f 	.word	0x0801282f
 801246c:	0801288f 	.word	0x0801288f
 8012470:	080128b1 	.word	0x080128b1
 8012474:	080128bb 	.word	0x080128bb
 8012478:	080128c5 	.word	0x080128c5
 801247c:	080128cf 	.word	0x080128cf
 8012480:	080128d9 	.word	0x080128d9
 8012484:	08012a4d 	.word	0x08012a4d
 8012488:	080128e3 	.word	0x080128e3
 801248c:	08012915 	.word	0x08012915
 8012490:	08012981 	.word	0x08012981
 8012494:	0801294f 	.word	0x0801294f
 8012498:	080129bd 	.word	0x080129bd
 801249c:	080129d3 	.word	0x080129d3
 80124a0:	080129eb 	.word	0x080129eb
 80124a4:	080129f5 	.word	0x080129f5
 80124a8:	08012a01 	.word	0x08012a01
 80124ac:	08012a4d 	.word	0x08012a4d
 80124b0:	08012a0b 	.word	0x08012a0b
 80124b4:	08012a4d 	.word	0x08012a4d
 80124b8:	08012a4d 	.word	0x08012a4d
 80124bc:	08012a4d 	.word	0x08012a4d
 80124c0:	08012a4d 	.word	0x08012a4d
 80124c4:	08012a4d 	.word	0x08012a4d
 80124c8:	08012a4d 	.word	0x08012a4d
 80124cc:	08012a4d 	.word	0x08012a4d
 80124d0:	08012a4d 	.word	0x08012a4d
 80124d4:	08012a4d 	.word	0x08012a4d
 80124d8:	08012a4d 	.word	0x08012a4d
 80124dc:	08012a4d 	.word	0x08012a4d
 80124e0:	08012a4d 	.word	0x08012a4d
 80124e4:	08012a4d 	.word	0x08012a4d
 80124e8:	08012a4d 	.word	0x08012a4d
 80124ec:	08012a35 	.word	0x08012a35
 80124f0:	08012a41 	.word	0x08012a41
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	791b      	ldrb	r3, [r3, #4]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fd fb81 	bl	800fc00 <SwitchClass>
 80124fe:	4603      	mov	r3, r0
 8012500:	75fb      	strb	r3, [r7, #23]
            break;
 8012502:	e2c4      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	791b      	ldrb	r3, [r3, #4]
 8012508:	2b02      	cmp	r3, #2
 801250a:	d005      	beq.n	8012518 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	791a      	ldrb	r2, [r3, #4]
 8012510:	4b70      	ldr	r3, [pc, #448]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 8012512:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012516:	e2ba      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012518:	2303      	movs	r3, #3
 801251a:	75fb      	strb	r3, [r7, #23]
            break;
 801251c:	e2b7      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	4618      	mov	r0, r3
 8012524:	f7fa faae 	bl	800ca84 <SecureElementSetDevEui>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	f000 8294 	beq.w	8012a58 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012530:	2303      	movs	r3, #3
 8012532:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012534:	e290      	b.n	8012a58 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	4618      	mov	r0, r3
 801253c:	f7fa fac4 	bl	800cac8 <SecureElementSetJoinEui>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	f000 828a 	beq.w	8012a5c <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012548:	2303      	movs	r3, #3
 801254a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801254c:	e286      	b.n	8012a5c <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	791a      	ldrb	r2, [r3, #4]
 8012552:	4b60      	ldr	r3, [pc, #384]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 8012554:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8012558:	e299      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	4a5d      	ldr	r2, [pc, #372]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 8012560:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8012564:	e293      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	4a5a      	ldr	r2, [pc, #360]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 801256c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8012570:	e28d      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d00b      	beq.n	8012592 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	4619      	mov	r1, r3
 8012580:	2000      	movs	r0, #0
 8012582:	f001 fffd 	bl	8014580 <LoRaMacCryptoSetKey>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	f000 8269 	beq.w	8012a60 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801258e:	2311      	movs	r3, #17
 8012590:	e288      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012592:	2303      	movs	r3, #3
 8012594:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012596:	e263      	b.n	8012a60 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d00b      	beq.n	80125b8 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	4619      	mov	r1, r3
 80125a6:	2001      	movs	r0, #1
 80125a8:	f001 ffea 	bl	8014580 <LoRaMacCryptoSetKey>
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	f000 8258 	beq.w	8012a64 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80125b4:	2311      	movs	r3, #17
 80125b6:	e275      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125b8:	2303      	movs	r3, #3
 80125ba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125bc:	e252      	b.n	8012a64 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d00b      	beq.n	80125de <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	4619      	mov	r1, r3
 80125cc:	2002      	movs	r0, #2
 80125ce:	f001 ffd7 	bl	8014580 <LoRaMacCryptoSetKey>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f000 8247 	beq.w	8012a68 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80125da:	2311      	movs	r3, #17
 80125dc:	e262      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80125de:	2303      	movs	r3, #3
 80125e0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80125e2:	e241      	b.n	8012a68 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d00b      	beq.n	8012604 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	4619      	mov	r1, r3
 80125f2:	2003      	movs	r0, #3
 80125f4:	f001 ffc4 	bl	8014580 <LoRaMacCryptoSetKey>
 80125f8:	4603      	mov	r3, r0
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f000 8236 	beq.w	8012a6c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012600:	2311      	movs	r3, #17
 8012602:	e24f      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012604:	2303      	movs	r3, #3
 8012606:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012608:	e230      	b.n	8012a6c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	685b      	ldr	r3, [r3, #4]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d00b      	beq.n	801262a <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	4619      	mov	r1, r3
 8012618:	207f      	movs	r0, #127	; 0x7f
 801261a:	f001 ffb1 	bl	8014580 <LoRaMacCryptoSetKey>
 801261e:	4603      	mov	r3, r0
 8012620:	2b00      	cmp	r3, #0
 8012622:	f000 8225 	beq.w	8012a70 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012626:	2311      	movs	r3, #17
 8012628:	e23c      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801262a:	2303      	movs	r3, #3
 801262c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801262e:	e21f      	b.n	8012a70 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	685b      	ldr	r3, [r3, #4]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00b      	beq.n	8012650 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	685b      	ldr	r3, [r3, #4]
 801263c:	4619      	mov	r1, r3
 801263e:	2080      	movs	r0, #128	; 0x80
 8012640:	f001 ff9e 	bl	8014580 <LoRaMacCryptoSetKey>
 8012644:	4603      	mov	r3, r0
 8012646:	2b00      	cmp	r3, #0
 8012648:	f000 8214 	beq.w	8012a74 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801264c:	2311      	movs	r3, #17
 801264e:	e229      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012650:	2303      	movs	r3, #3
 8012652:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012654:	e20e      	b.n	8012a74 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	685b      	ldr	r3, [r3, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d00b      	beq.n	8012676 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	4619      	mov	r1, r3
 8012664:	2081      	movs	r0, #129	; 0x81
 8012666:	f001 ff8b 	bl	8014580 <LoRaMacCryptoSetKey>
 801266a:	4603      	mov	r3, r0
 801266c:	2b00      	cmp	r3, #0
 801266e:	f000 8203 	beq.w	8012a78 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012672:	2311      	movs	r3, #17
 8012674:	e216      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012676:	2303      	movs	r3, #3
 8012678:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801267a:	e1fd      	b.n	8012a78 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00b      	beq.n	801269c <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	685b      	ldr	r3, [r3, #4]
 8012688:	4619      	mov	r1, r3
 801268a:	2082      	movs	r0, #130	; 0x82
 801268c:	f001 ff78 	bl	8014580 <LoRaMacCryptoSetKey>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	f000 81f2 	beq.w	8012a7c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012698:	2311      	movs	r3, #17
 801269a:	e203      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801269c:	2303      	movs	r3, #3
 801269e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80126a0:	e1ec      	b.n	8012a7c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	791a      	ldrb	r2, [r3, #4]
 80126a6:	4b0b      	ldr	r3, [pc, #44]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 80126a8:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80126ac:	4b0a      	ldr	r3, [pc, #40]	; (80126d8 <LoRaMacMibSetRequestConfirm+0x304>)
 80126ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126b0:	4a08      	ldr	r2, [pc, #32]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 80126b2:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80126b6:	4610      	mov	r0, r2
 80126b8:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 80126ba:	4b07      	ldr	r3, [pc, #28]	; (80126d8 <LoRaMacMibSetRequestConfirm+0x304>)
 80126bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126be:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 80126c0:	e1e5      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	791a      	ldrb	r2, [r3, #4]
 80126c6:	4b03      	ldr	r3, [pc, #12]	; (80126d4 <LoRaMacMibSetRequestConfirm+0x300>)
 80126c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 80126cc:	e1df      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
 80126ce:	bf00      	nop
 80126d0:	20000788 	.word	0x20000788
 80126d4:	20000ca8 	.word	0x20000ca8
 80126d8:	0801eef8 	.word	0x0801eef8
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	7a1b      	ldrb	r3, [r3, #8]
 80126e0:	b25b      	sxtb	r3, r3
 80126e2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80126e4:	4bb3      	ldr	r3, [pc, #716]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80126e6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80126ea:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 80126ec:	4bb1      	ldr	r3, [pc, #708]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80126ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80126f2:	f107 0108 	add.w	r1, r7, #8
 80126f6:	2207      	movs	r2, #7
 80126f8:	4618      	mov	r0, r3
 80126fa:	f002 fd80 	bl	80151fe <RegionVerify>
 80126fe:	4603      	mov	r3, r0
 8012700:	f083 0301 	eor.w	r3, r3, #1
 8012704:	b2db      	uxtb	r3, r3
 8012706:	2b00      	cmp	r3, #0
 8012708:	d002      	beq.n	8012710 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801270a:	2303      	movs	r3, #3
 801270c:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 801270e:	e1be      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	685b      	ldr	r3, [r3, #4]
 8012714:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012716:	4ba7      	ldr	r3, [pc, #668]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801271c:	f107 0108 	add.w	r1, r7, #8
 8012720:	2200      	movs	r2, #0
 8012722:	4618      	mov	r0, r3
 8012724:	f002 fd6b 	bl	80151fe <RegionVerify>
 8012728:	4603      	mov	r3, r0
 801272a:	f083 0301 	eor.w	r3, r3, #1
 801272e:	b2db      	uxtb	r3, r3
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012734:	2303      	movs	r3, #3
 8012736:	75fb      	strb	r3, [r7, #23]
            break;
 8012738:	e1a9      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 801273a:	4b9e      	ldr	r3, [pc, #632]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	3364      	adds	r3, #100	; 0x64
 8012740:	3204      	adds	r2, #4
 8012742:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012746:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801274a:	e1a0      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	7a1b      	ldrb	r3, [r3, #8]
 8012750:	b25b      	sxtb	r3, r3
 8012752:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012754:	4b97      	ldr	r3, [pc, #604]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012756:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801275a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801275c:	4b95      	ldr	r3, [pc, #596]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801275e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012762:	f107 0108 	add.w	r1, r7, #8
 8012766:	2207      	movs	r2, #7
 8012768:	4618      	mov	r0, r3
 801276a:	f002 fd48 	bl	80151fe <RegionVerify>
 801276e:	4603      	mov	r3, r0
 8012770:	2b00      	cmp	r3, #0
 8012772:	d008      	beq.n	8012786 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012774:	4b8f      	ldr	r3, [pc, #572]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	33a8      	adds	r3, #168	; 0xa8
 801277a:	3204      	adds	r2, #4
 801277c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012780:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012784:	e183      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012786:	2303      	movs	r3, #3
 8012788:	75fb      	strb	r3, [r7, #23]
            break;
 801278a:	e180      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	7a1b      	ldrb	r3, [r3, #8]
 8012790:	b25b      	sxtb	r3, r3
 8012792:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012794:	4b87      	ldr	r3, [pc, #540]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012796:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 801279a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801279c:	4b85      	ldr	r3, [pc, #532]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801279e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127a2:	f107 0108 	add.w	r1, r7, #8
 80127a6:	2207      	movs	r2, #7
 80127a8:	4618      	mov	r0, r3
 80127aa:	f002 fd28 	bl	80151fe <RegionVerify>
 80127ae:	4603      	mov	r3, r0
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d019      	beq.n	80127e8 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80127b4:	4b7f      	ldr	r3, [pc, #508]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	336c      	adds	r3, #108	; 0x6c
 80127ba:	3204      	adds	r2, #4
 80127bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80127c0:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80127c4:	4b7b      	ldr	r3, [pc, #492]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80127c6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	f040 8158 	bne.w	8012a80 <LoRaMacMibSetRequestConfirm+0x6ac>
 80127d0:	4b78      	ldr	r3, [pc, #480]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80127d2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	f000 8152 	beq.w	8012a80 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80127dc:	4b76      	ldr	r3, [pc, #472]	; (80129b8 <LoRaMacMibSetRequestConfirm+0x5e4>)
 80127de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127e0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80127e2:	f7fe fca5 	bl	8011130 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127e6:	e14b      	b.n	8012a80 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127e8:	2303      	movs	r3, #3
 80127ea:	75fb      	strb	r3, [r7, #23]
            break;
 80127ec:	e148      	b.n	8012a80 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	7a1b      	ldrb	r3, [r3, #8]
 80127f2:	b25b      	sxtb	r3, r3
 80127f4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80127f6:	4b6f      	ldr	r3, [pc, #444]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80127f8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80127fc:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80127fe:	4b6d      	ldr	r3, [pc, #436]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012804:	f107 0108 	add.w	r1, r7, #8
 8012808:	2207      	movs	r2, #7
 801280a:	4618      	mov	r0, r3
 801280c:	f002 fcf7 	bl	80151fe <RegionVerify>
 8012810:	4603      	mov	r3, r0
 8012812:	2b00      	cmp	r3, #0
 8012814:	d008      	beq.n	8012828 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012816:	4b67      	ldr	r3, [pc, #412]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012818:	687a      	ldr	r2, [r7, #4]
 801281a:	33b0      	adds	r3, #176	; 0xb0
 801281c:	3204      	adds	r2, #4
 801281e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012822:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012826:	e132      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012828:	2303      	movs	r3, #3
 801282a:	75fb      	strb	r3, [r7, #23]
            break;
 801282c:	e12f      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	685b      	ldr	r3, [r3, #4]
 8012832:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012834:	2301      	movs	r3, #1
 8012836:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012838:	4b5e      	ldr	r3, [pc, #376]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801283a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801283e:	f107 020c 	add.w	r2, r7, #12
 8012842:	4611      	mov	r1, r2
 8012844:	4618      	mov	r0, r3
 8012846:	f002 fd13 	bl	8015270 <RegionChanMaskSet>
 801284a:	4603      	mov	r3, r0
 801284c:	f083 0301 	eor.w	r3, r3, #1
 8012850:	b2db      	uxtb	r3, r3
 8012852:	2b00      	cmp	r3, #0
 8012854:	f000 8116 	beq.w	8012a84 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012858:	2303      	movs	r3, #3
 801285a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801285c:	e112      	b.n	8012a84 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012864:	2300      	movs	r3, #0
 8012866:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012868:	4b52      	ldr	r3, [pc, #328]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801286a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801286e:	f107 020c 	add.w	r2, r7, #12
 8012872:	4611      	mov	r1, r2
 8012874:	4618      	mov	r0, r3
 8012876:	f002 fcfb 	bl	8015270 <RegionChanMaskSet>
 801287a:	4603      	mov	r3, r0
 801287c:	f083 0301 	eor.w	r3, r3, #1
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	f000 8100 	beq.w	8012a88 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012888:	2303      	movs	r3, #3
 801288a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801288c:	e0fc      	b.n	8012a88 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	791b      	ldrb	r3, [r3, #4]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d009      	beq.n	80128aa <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801289a:	2b0f      	cmp	r3, #15
 801289c:	d805      	bhi.n	80128aa <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	791a      	ldrb	r2, [r3, #4]
 80128a2:	4b44      	ldr	r3, [pc, #272]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128a8:	e0f1      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128aa:	2303      	movs	r3, #3
 80128ac:	75fb      	strb	r3, [r7, #23]
            break;
 80128ae:	e0ee      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	685b      	ldr	r3, [r3, #4]
 80128b4:	4a3f      	ldr	r2, [pc, #252]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128b6:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 80128b8:	e0e9      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4a3d      	ldr	r2, [pc, #244]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128c0:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 80128c2:	e0e4      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	4a3a      	ldr	r2, [pc, #232]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128ca:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 80128cc:	e0df      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	4a38      	ldr	r2, [pc, #224]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128d4:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 80128d6:	e0da      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	4a35      	ldr	r2, [pc, #212]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128de:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 80128e0:	e0d5      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80128e8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80128ea:	4b32      	ldr	r3, [pc, #200]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80128ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80128f0:	f107 0108 	add.w	r1, r7, #8
 80128f4:	2206      	movs	r2, #6
 80128f6:	4618      	mov	r0, r3
 80128f8:	f002 fc81 	bl	80151fe <RegionVerify>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d005      	beq.n	801290e <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012902:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012906:	4b2b      	ldr	r3, [pc, #172]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012908:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801290c:	e0bf      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801290e:	2303      	movs	r3, #3
 8012910:	75fb      	strb	r3, [r7, #23]
            break;
 8012912:	e0bc      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801291a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801291c:	4b25      	ldr	r3, [pc, #148]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801291e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012922:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012924:	4b23      	ldr	r3, [pc, #140]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012926:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801292a:	f107 0108 	add.w	r1, r7, #8
 801292e:	2205      	movs	r2, #5
 8012930:	4618      	mov	r0, r3
 8012932:	f002 fc64 	bl	80151fe <RegionVerify>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d005      	beq.n	8012948 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801293c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012940:	4b1c      	ldr	r3, [pc, #112]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012946:	e0a2      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012948:	2303      	movs	r3, #3
 801294a:	75fb      	strb	r3, [r7, #23]
            break;
 801294c:	e09f      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012954:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012956:	4b17      	ldr	r3, [pc, #92]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801295c:	f107 0108 	add.w	r1, r7, #8
 8012960:	220a      	movs	r2, #10
 8012962:	4618      	mov	r0, r3
 8012964:	f002 fc4b 	bl	80151fe <RegionVerify>
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	d005      	beq.n	801297a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801296e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012972:	4b10      	ldr	r3, [pc, #64]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012974:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012978:	e089      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801297a:	2303      	movs	r3, #3
 801297c:	75fb      	strb	r3, [r7, #23]
            break;
 801297e:	e086      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012986:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012988:	4b0a      	ldr	r3, [pc, #40]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 801298a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801298e:	f107 0108 	add.w	r1, r7, #8
 8012992:	2209      	movs	r2, #9
 8012994:	4618      	mov	r0, r3
 8012996:	f002 fc32 	bl	80151fe <RegionVerify>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	d005      	beq.n	80129ac <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80129a0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80129a4:	4b03      	ldr	r3, [pc, #12]	; (80129b4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80129a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129aa:	e070      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129ac:	2303      	movs	r3, #3
 80129ae:	75fb      	strb	r3, [r7, #23]
            break;
 80129b0:	e06d      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
 80129b2:	bf00      	nop
 80129b4:	20000ca8 	.word	0x20000ca8
 80129b8:	0801eef8 	.word	0x0801eef8
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	4a3a      	ldr	r2, [pc, #232]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80129c6:	4b39      	ldr	r3, [pc, #228]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80129cc:	4a37      	ldr	r2, [pc, #220]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129ce:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80129d0:	e05d      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	791a      	ldrb	r2, [r3, #4]
 80129d6:	4b35      	ldr	r3, [pc, #212]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129d8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 80129dc:	4b33      	ldr	r3, [pc, #204]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129de:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80129e2:	4b32      	ldr	r3, [pc, #200]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 80129e8:	e051      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	685b      	ldr	r3, [r3, #4]
 80129ee:	4a2f      	ldr	r2, [pc, #188]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129f0:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 80129f2:	e04c      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	4a2c      	ldr	r2, [pc, #176]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 80129fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 80129fe:	e046      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012a00:	f7fe fdc8 	bl	8011594 <RestoreNvmData>
 8012a04:	4603      	mov	r3, r0
 8012a06:	75fb      	strb	r3, [r7, #23]
            break;
 8012a08:	e041      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	799b      	ldrb	r3, [r3, #6]
 8012a0e:	2b01      	cmp	r3, #1
 8012a10:	d80d      	bhi.n	8012a2e <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012a12:	4a26      	ldr	r2, [pc, #152]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	6858      	ldr	r0, [r3, #4]
 8012a20:	f001 fd12 	bl	8014448 <LoRaMacCryptoSetLrWanVersion>
 8012a24:	4603      	mov	r3, r0
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d030      	beq.n	8012a8c <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012a2a:	2311      	movs	r3, #17
 8012a2c:	e03a      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a2e:	2303      	movs	r3, #3
 8012a30:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012a32:	e02b      	b.n	8012a8c <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	4a1c      	ldr	r2, [pc, #112]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012a3a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012a3e:	e026      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	791a      	ldrb	r2, [r3, #4]
 8012a44:	4b19      	ldr	r3, [pc, #100]	; (8012aac <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012a46:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8012a4a:	e020      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 fc88 	bl	8013362 <LoRaMacMibClassBSetRequestConfirm>
 8012a52:	4603      	mov	r3, r0
 8012a54:	75fb      	strb	r3, [r7, #23]
            break;
 8012a56:	e01a      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a58:	bf00      	nop
 8012a5a:	e018      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a5c:	bf00      	nop
 8012a5e:	e016      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a60:	bf00      	nop
 8012a62:	e014      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a64:	bf00      	nop
 8012a66:	e012      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a68:	bf00      	nop
 8012a6a:	e010      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a6c:	bf00      	nop
 8012a6e:	e00e      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a70:	bf00      	nop
 8012a72:	e00c      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a74:	bf00      	nop
 8012a76:	e00a      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a78:	bf00      	nop
 8012a7a:	e008      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a7c:	bf00      	nop
 8012a7e:	e006      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a80:	bf00      	nop
 8012a82:	e004      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a84:	bf00      	nop
 8012a86:	e002      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a88:	bf00      	nop
 8012a8a:	e000      	b.n	8012a8e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012a8c:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8012a8e:	7dfb      	ldrb	r3, [r7, #23]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d106      	bne.n	8012aa2 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012a94:	4a06      	ldr	r2, [pc, #24]	; (8012ab0 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8012a96:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a9e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	3718      	adds	r7, #24
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	20000ca8 	.word	0x20000ca8
 8012ab0:	20000788 	.word	0x20000788

08012ab4 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b08a      	sub	sp, #40	; 0x28
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012abc:	2302      	movs	r3, #2
 8012abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d101      	bne.n	8012ad0 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012acc:	2303      	movs	r3, #3
 8012ace:	e16c      	b.n	8012daa <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012ad6:	f7fc fc6b 	bl	800f3b0 <LoRaMacIsBusy>
 8012ada:	4603      	mov	r3, r0
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d001      	beq.n	8012ae4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	e162      	b.n	8012daa <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012ae4:	f001 f954 	bl	8013d90 <LoRaMacConfirmQueueIsFull>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d001      	beq.n	8012af2 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012aee:	2301      	movs	r3, #1
 8012af0:	e15b      	b.n	8012daa <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012af2:	f001 f941 	bl	8013d78 <LoRaMacConfirmQueueGetCnt>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d104      	bne.n	8012b06 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012afc:	2214      	movs	r2, #20
 8012afe:	2100      	movs	r1, #0
 8012b00:	48ac      	ldr	r0, [pc, #688]	; (8012db4 <LoRaMacMlmeRequest+0x300>)
 8012b02:	f006 f965 	bl	8018dd0 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b06:	4bac      	ldr	r3, [pc, #688]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012b08:	2201      	movs	r2, #1
 8012b0a:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012b0e:	4aaa      	ldr	r2, [pc, #680]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012b10:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012b14:	f043 0304 	orr.w	r3, r3, #4
 8012b18:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b24:	2301      	movs	r3, #1
 8012b26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8012b30:	2300      	movs	r3, #0
 8012b32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	2b0c      	cmp	r3, #12
 8012b3e:	f200 8108 	bhi.w	8012d52 <LoRaMacMlmeRequest+0x29e>
 8012b42:	a201      	add	r2, pc, #4	; (adr r2, 8012b48 <LoRaMacMlmeRequest+0x94>)
 8012b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b48:	08012b7d 	.word	0x08012b7d
 8012b4c:	08012d53 	.word	0x08012d53
 8012b50:	08012d53 	.word	0x08012d53
 8012b54:	08012c53 	.word	0x08012c53
 8012b58:	08012c75 	.word	0x08012c75
 8012b5c:	08012d53 	.word	0x08012d53
 8012b60:	08012d53 	.word	0x08012d53
 8012b64:	08012d53 	.word	0x08012d53
 8012b68:	08012c93 	.word	0x08012c93
 8012b6c:	08012d53 	.word	0x08012d53
 8012b70:	08012d21 	.word	0x08012d21
 8012b74:	08012cb5 	.word	0x08012cb5
 8012b78:	08012cff 	.word	0x08012cff
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012b7c:	4b8e      	ldr	r3, [pc, #568]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012b7e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012b82:	f003 0320 	and.w	r3, r3, #32
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d001      	beq.n	8012b8e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e10d      	b.n	8012daa <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	791b      	ldrb	r3, [r3, #4]
 8012b92:	2b02      	cmp	r3, #2
 8012b94:	d12e      	bne.n	8012bf4 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8012b96:	f7fe f995 	bl	8010ec4 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012b9a:	4b88      	ldr	r3, [pc, #544]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012b9c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	795b      	ldrb	r3, [r3, #5]
 8012ba4:	b25b      	sxtb	r3, r3
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	4619      	mov	r1, r3
 8012baa:	f002 fc72 	bl	8015492 <RegionAlternateDr>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	4b82      	ldr	r3, [pc, #520]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012bb8:	2307      	movs	r3, #7
 8012bba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 8012bbe:	20ff      	movs	r0, #255	; 0xff
 8012bc0:	f7fd fefe 	bl	80109c0 <SendReJoinReq>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 8012bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f000 80c1 	beq.w	8012d56 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012bd4:	4b79      	ldr	r3, [pc, #484]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012bd6:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	795b      	ldrb	r3, [r3, #5]
 8012bde:	b25b      	sxtb	r3, r3
 8012be0:	2201      	movs	r2, #1
 8012be2:	4619      	mov	r1, r3
 8012be4:	f002 fc55 	bl	8015492 <RegionAlternateDr>
 8012be8:	4603      	mov	r3, r0
 8012bea:	461a      	mov	r2, r3
 8012bec:	4b73      	ldr	r3, [pc, #460]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012bee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8012bf2:	e0b0      	b.n	8012d56 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	791b      	ldrb	r3, [r3, #4]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	f040 80ac 	bne.w	8012d56 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8012bfe:	4b6f      	ldr	r3, [pc, #444]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012c00:	2200      	movs	r2, #0
 8012c02:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012c06:	2302      	movs	r3, #2
 8012c08:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8012c0a:	4b6c      	ldr	r3, [pc, #432]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012c0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c10:	f107 020c 	add.w	r2, r7, #12
 8012c14:	4611      	mov	r1, r2
 8012c16:	4618      	mov	r0, r3
 8012c18:	f002 fad9 	bl	80151ce <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	791a      	ldrb	r2, [r3, #4]
 8012c20:	4b66      	ldr	r3, [pc, #408]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012c22:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8012c26:	2300      	movs	r3, #0
 8012c28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8012c32:	4b61      	ldr	r3, [pc, #388]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012c34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8012c3c:	4a5e      	ldr	r2, [pc, #376]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012c3e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012c42:	f043 0320 	orr.w	r3, r3, #32
 8012c46:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012c50:	e081      	b.n	8012d56 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012c52:	2300      	movs	r3, #0
 8012c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012c58:	f107 031c 	add.w	r3, r7, #28
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	4619      	mov	r1, r3
 8012c60:	2002      	movs	r0, #2
 8012c62:	f000 fcfb 	bl	801365c <LoRaMacCommandsAddCmd>
 8012c66:	4603      	mov	r3, r0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d076      	beq.n	8012d5a <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c6c:	2313      	movs	r3, #19
 8012c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012c72:	e072      	b.n	8012d5a <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	8898      	ldrh	r0, [r3, #4]
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6899      	ldr	r1, [r3, #8]
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012c82:	b2db      	uxtb	r3, r3
 8012c84:	461a      	mov	r2, r3
 8012c86:	f7fe fc65 	bl	8011554 <SetTxContinuousWave>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012c90:	e06a      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012c92:	2300      	movs	r3, #0
 8012c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012c98:	f107 031c 	add.w	r3, r7, #28
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	4619      	mov	r1, r3
 8012ca0:	200d      	movs	r0, #13
 8012ca2:	f000 fcdb 	bl	801365c <LoRaMacCommandsAddCmd>
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d058      	beq.n	8012d5e <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cac:	2313      	movs	r3, #19
 8012cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012cb2:	e054      	b.n	8012d5e <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012cb4:	4b41      	ldr	r3, [pc, #260]	; (8012dbc <LoRaMacMlmeRequest+0x308>)
 8012cb6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d151      	bne.n	8012d62 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	791b      	ldrb	r3, [r3, #4]
 8012cc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	791b      	ldrb	r3, [r3, #4]
 8012cca:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f000 fb1b 	bl	801330c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012cd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012cda:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012cdc:	2300      	movs	r3, #0
 8012cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012ce2:	f107 031c 	add.w	r3, r7, #28
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	4619      	mov	r1, r3
 8012cea:	2010      	movs	r0, #16
 8012cec:	f000 fcb6 	bl	801365c <LoRaMacCommandsAddCmd>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d035      	beq.n	8012d62 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cf6:	2313      	movs	r3, #19
 8012cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8012cfc:	e031      	b.n	8012d62 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012d04:	f107 031c 	add.w	r3, r7, #28
 8012d08:	2200      	movs	r2, #0
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	2012      	movs	r0, #18
 8012d0e:	f000 fca5 	bl	801365c <LoRaMacCommandsAddCmd>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d026      	beq.n	8012d66 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012d18:	2313      	movs	r3, #19
 8012d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012d1e:	e022      	b.n	8012d66 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012d20:	2301      	movs	r3, #1
 8012d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012d26:	f000 faa7 	bl	8013278 <LoRaMacClassBIsAcquisitionInProgress>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	f083 0301 	eor.w	r3, r3, #1
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d009      	beq.n	8012d4a <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012d36:	2000      	movs	r0, #0
 8012d38:	f000 fa80 	bl	801323c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012d3c:	2000      	movs	r0, #0
 8012d3e:	f000 faa2 	bl	8013286 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012d42:	2300      	movs	r3, #0
 8012d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012d48:	e00e      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012d50:	e00a      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8012d52:	bf00      	nop
 8012d54:	e008      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012d56:	bf00      	nop
 8012d58:	e006      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012d5a:	bf00      	nop
 8012d5c:	e004      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012d5e:	bf00      	nop
 8012d60:	e002      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012d62:	bf00      	nop
 8012d64:	e000      	b.n	8012d68 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012d66:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012d68:	4b13      	ldr	r3, [pc, #76]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012d6a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d010      	beq.n	8012d9c <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012d7a:	f000 fffd 	bl	8013d78 <LoRaMacConfirmQueueGetCnt>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d110      	bne.n	8012da6 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8012d84:	4b0c      	ldr	r3, [pc, #48]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012d8c:	4a0a      	ldr	r2, [pc, #40]	; (8012db8 <LoRaMacMlmeRequest+0x304>)
 8012d8e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012d92:	f36f 0382 	bfc	r3, #2, #1
 8012d96:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8012d9a:	e004      	b.n	8012da6 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012d9c:	f107 0320 	add.w	r3, r7, #32
 8012da0:	4618      	mov	r0, r3
 8012da2:	f000 fe9b 	bl	8013adc <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3728      	adds	r7, #40	; 0x28
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	20000be0 	.word	0x20000be0
 8012db8:	20000788 	.word	0x20000788
 8012dbc:	20000ca8 	.word	0x20000ca8

08012dc0 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012dc0:	b5b0      	push	{r4, r5, r7, lr}
 8012dc2:	b092      	sub	sp, #72	; 0x48
 8012dc4:	af02      	add	r7, sp, #8
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	460b      	mov	r3, r1
 8012dca:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012dcc:	2302      	movs	r3, #2
 8012dce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 8012de2:	2300      	movs	r3, #0
 8012de4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d101      	bne.n	8012df2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012dee:	2303      	movs	r3, #3
 8012df0:	e113      	b.n	801301a <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2200      	movs	r2, #0
 8012df6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8012df8:	f7fc fada 	bl	800f3b0 <LoRaMacIsBusy>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 8012e02:	2301      	movs	r3, #1
 8012e04:	e109      	b.n	801301a <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f107 040c 	add.w	r4, r7, #12
 8012e0c:	461d      	mov	r5, r3
 8012e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012e12:	682b      	ldr	r3, [r5, #0]
 8012e14:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8012e16:	2300      	movs	r3, #0
 8012e18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012e1c:	2214      	movs	r2, #20
 8012e1e:	2100      	movs	r1, #0
 8012e20:	4880      	ldr	r0, [pc, #512]	; (8013024 <LoRaMacMcpsRequest+0x264>)
 8012e22:	f005 ffd5 	bl	8018dd0 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e26:	4b80      	ldr	r3, [pc, #512]	; (8013028 <LoRaMacMcpsRequest+0x268>)
 8012e28:	2201      	movs	r2, #1
 8012e2a:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012e2e:	4b7f      	ldr	r3, [pc, #508]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012e30:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012e34:	2b02      	cmp	r3, #2
 8012e36:	d111      	bne.n	8012e5c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012e38:	4b7c      	ldr	r3, [pc, #496]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012e3a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8012e3e:	2b02      	cmp	r3, #2
 8012e40:	d10c      	bne.n	8012e5c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012e42:	4b7a      	ldr	r3, [pc, #488]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012e44:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8012e48:	f083 0301 	eor.w	r3, r3, #1
 8012e4c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d004      	beq.n	8012e5c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012e52:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d101      	bne.n	8012e5c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012e5c:	7b3b      	ldrb	r3, [r7, #12]
 8012e5e:	2b03      	cmp	r3, #3
 8012e60:	d030      	beq.n	8012ec4 <LoRaMacMcpsRequest+0x104>
 8012e62:	2b03      	cmp	r3, #3
 8012e64:	dc3f      	bgt.n	8012ee6 <LoRaMacMcpsRequest+0x126>
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d002      	beq.n	8012e70 <LoRaMacMcpsRequest+0xb0>
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d015      	beq.n	8012e9a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012e6e:	e03a      	b.n	8012ee6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012e70:	2301      	movs	r3, #1
 8012e72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012e76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012e7a:	2202      	movs	r2, #2
 8012e7c:	f362 1347 	bfi	r3, r2, #5, #3
 8012e80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012e84:	7c3b      	ldrb	r3, [r7, #16]
 8012e86:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012e8e:	8b3b      	ldrh	r3, [r7, #24]
 8012e90:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012e92:	7ebb      	ldrb	r3, [r7, #26]
 8012e94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012e98:	e026      	b.n	8012ee8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ea4:	2204      	movs	r2, #4
 8012ea6:	f362 1347 	bfi	r3, r2, #5, #3
 8012eaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 8012eae:	7c3b      	ldrb	r3, [r7, #16]
 8012eb0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012eb8:	8b3b      	ldrh	r3, [r7, #24]
 8012eba:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012ebc:	7ebb      	ldrb	r3, [r7, #26]
 8012ebe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012ec2:	e011      	b.n	8012ee8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012eca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ece:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012ed2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012eda:	8abb      	ldrh	r3, [r7, #20]
 8012edc:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012ede:	7dbb      	ldrb	r3, [r7, #22]
 8012ee0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012ee4:	e000      	b.n	8012ee8 <LoRaMacMcpsRequest+0x128>
            break;
 8012ee6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012ee8:	2302      	movs	r3, #2
 8012eea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012eee:	4b4f      	ldr	r3, [pc, #316]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012ef0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012ef4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012ef8:	4b4c      	ldr	r3, [pc, #304]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012efe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012f02:	4611      	mov	r1, r2
 8012f04:	4618      	mov	r0, r3
 8012f06:	f002 f92a 	bl	801515e <RegionGetPhyParam>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f10:	b25b      	sxtb	r3, r3
 8012f12:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8012f16:	4293      	cmp	r3, r2
 8012f18:	bfb8      	it	lt
 8012f1a:	4613      	movlt	r3, r2
 8012f1c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012f20:	4b42      	ldr	r3, [pc, #264]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f22:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012f26:	4a41      	ldr	r2, [pc, #260]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f28:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8012f2c:	4a3f      	ldr	r2, [pc, #252]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f2e:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7fc fbd4 	bl	800f6e0 <CheckForMinimumAbpDatarate>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d002      	beq.n	8012f44 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 8012f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8012f44:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d05f      	beq.n	801300c <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012f4c:	4b37      	ldr	r3, [pc, #220]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f4e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012f52:	f083 0301 	eor.w	r3, r3, #1
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d10e      	bne.n	8012f7a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012f5c:	4b33      	ldr	r3, [pc, #204]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f5e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012f62:	4a32      	ldr	r2, [pc, #200]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f64:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8012f68:	4a30      	ldr	r2, [pc, #192]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f6a:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f7fc fbb6 	bl	800f6e0 <CheckForMinimumAbpDatarate>
 8012f74:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d01c      	beq.n	8012fb4 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012f7a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8012f7e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f82:	4b2a      	ldr	r3, [pc, #168]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012f88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012f8c:	4b27      	ldr	r3, [pc, #156]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012f92:	f107 0120 	add.w	r1, r7, #32
 8012f96:	2205      	movs	r2, #5
 8012f98:	4618      	mov	r0, r3
 8012f9a:	f002 f930 	bl	80151fe <RegionVerify>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d005      	beq.n	8012fb0 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012fa4:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012fa8:	4b20      	ldr	r3, [pc, #128]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8012fae:	e001      	b.n	8012fb4 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012fb0:	2303      	movs	r3, #3
 8012fb2:	e032      	b.n	801301a <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012fb4:	4b1d      	ldr	r3, [pc, #116]	; (801302c <LoRaMacMcpsRequest+0x26c>)
 8012fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012fba:	4a1b      	ldr	r2, [pc, #108]	; (8013028 <LoRaMacMcpsRequest+0x268>)
 8012fbc:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7fc fc76 	bl	800f8b4 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012fc8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012fca:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 8012fce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012fd2:	78fb      	ldrb	r3, [r7, #3]
 8012fd4:	9300      	str	r3, [sp, #0]
 8012fd6:	4613      	mov	r3, r2
 8012fd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fda:	f7fd fc0d 	bl	80107f8 <Send>
 8012fde:	4603      	mov	r3, r0
 8012fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8012fe4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d10b      	bne.n	8013004 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8012fec:	7b3a      	ldrb	r2, [r7, #12]
 8012fee:	4b0e      	ldr	r3, [pc, #56]	; (8013028 <LoRaMacMcpsRequest+0x268>)
 8012ff0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012ff4:	4a0c      	ldr	r2, [pc, #48]	; (8013028 <LoRaMacMcpsRequest+0x268>)
 8012ff6:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012ffa:	f043 0301 	orr.w	r3, r3, #1
 8012ffe:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 8013002:	e003      	b.n	801300c <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013004:	4b08      	ldr	r3, [pc, #32]	; (8013028 <LoRaMacMcpsRequest+0x268>)
 8013006:	2200      	movs	r2, #0
 8013008:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801300c:	4b06      	ldr	r3, [pc, #24]	; (8013028 <LoRaMacMcpsRequest+0x268>)
 801300e:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	611a      	str	r2, [r3, #16]

    return status;
 8013016:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801301a:	4618      	mov	r0, r3
 801301c:	3740      	adds	r7, #64	; 0x40
 801301e:	46bd      	mov	sp, r7
 8013020:	bdb0      	pop	{r4, r5, r7, pc}
 8013022:	bf00      	nop
 8013024:	20000bcc 	.word	0x20000bcc
 8013028:	20000788 	.word	0x20000788
 801302c:	20000ca8 	.word	0x20000ca8

08013030 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	4603      	mov	r3, r0
 8013038:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 801303a:	79fb      	ldrb	r3, [r7, #7]
 801303c:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801303e:	4b0a      	ldr	r3, [pc, #40]	; (8013068 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013044:	f107 010c 	add.w	r1, r7, #12
 8013048:	220f      	movs	r2, #15
 801304a:	4618      	mov	r0, r3
 801304c:	f002 f8d7 	bl	80151fe <RegionVerify>
 8013050:	4603      	mov	r3, r0
 8013052:	2b00      	cmp	r3, #0
 8013054:	d003      	beq.n	801305e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013056:	4a04      	ldr	r2, [pc, #16]	; (8013068 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013058:	79fb      	ldrb	r3, [r7, #7]
 801305a:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 801305e:	bf00      	nop
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	20000ca8 	.word	0x20000ca8

0801306c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801306c:	b580      	push	{r7, lr}
 801306e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8013070:	f7fe ff26 	bl	8011ec0 <LoRaMacStop>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d111      	bne.n	801309e <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801307a:	480a      	ldr	r0, [pc, #40]	; (80130a4 <LoRaMacDeInitialization+0x38>)
 801307c:	f009 fe7a 	bl	801cd74 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8013080:	4809      	ldr	r0, [pc, #36]	; (80130a8 <LoRaMacDeInitialization+0x3c>)
 8013082:	f009 fe77 	bl	801cd74 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8013086:	4809      	ldr	r0, [pc, #36]	; (80130ac <LoRaMacDeInitialization+0x40>)
 8013088:	f009 fe74 	bl	801cd74 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801308c:	f000 f948 	bl	8013320 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8013090:	f7fd ff18 	bl	8010ec4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8013094:	4b06      	ldr	r3, [pc, #24]	; (80130b0 <LoRaMacDeInitialization+0x44>)
 8013096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013098:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801309a:	2300      	movs	r3, #0
 801309c:	e000      	b.n	80130a0 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801309e:	2301      	movs	r3, #1
    }
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	20000af0 	.word	0x20000af0
 80130a8:	20000b08 	.word	0x20000b08
 80130ac:	20000b20 	.word	0x20000b20
 80130b0:	0801eef8 	.word	0x0801eef8

080130b4 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b08c      	sub	sp, #48	; 0x30
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80130c2:	2300      	movs	r3, #0
 80130c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	7b1b      	ldrb	r3, [r3, #12]
 80130cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	7b5b      	ldrb	r3, [r3, #13]
 80130d4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	7b9b      	ldrb	r3, [r3, #14]
 80130dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	685a      	ldr	r2, [r3, #4]
 80130e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	785b      	ldrb	r3, [r3, #1]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f000 8088 	beq.w	8013202 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80130f2:	2302      	movs	r3, #2
 80130f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	7bdb      	ldrb	r3, [r3, #15]
 80130fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	7c1b      	ldrb	r3, [r3, #16]
 8013104:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013108:	4611      	mov	r1, r2
 801310a:	4618      	mov	r0, r3
 801310c:	f002 f827 	bl	801515e <RegionGetPhyParam>
 8013110:	4603      	mov	r3, r0
 8013112:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013114:	6a3b      	ldr	r3, [r7, #32]
 8013116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 801311a:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 801311e:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8013122:	4293      	cmp	r3, r2
 8013124:	bfb8      	it	lt
 8013126:	4613      	movlt	r3, r2
 8013128:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	68fa      	ldr	r2, [r7, #12]
 8013132:	8912      	ldrh	r2, [r2, #8]
 8013134:	4293      	cmp	r3, r2
 8013136:	d302      	bcc.n	801313e <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013138:	2301      	movs	r3, #1
 801313a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	68fa      	ldr	r2, [r7, #12]
 8013144:	8912      	ldrh	r2, [r2, #8]
 8013146:	4611      	mov	r1, r2
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	8952      	ldrh	r2, [r2, #10]
 801314c:	440a      	add	r2, r1
 801314e:	4293      	cmp	r3, r2
 8013150:	d30f      	bcc.n	8013172 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8013152:	230a      	movs	r3, #10
 8013154:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	7c1b      	ldrb	r3, [r3, #16]
 801315c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013160:	4611      	mov	r1, r2
 8013162:	4618      	mov	r0, r3
 8013164:	f001 fffb 	bl	801515e <RegionGetPhyParam>
 8013168:	4603      	mov	r3, r0
 801316a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	685b      	ldr	r3, [r3, #4]
 8013176:	68fa      	ldr	r2, [r7, #12]
 8013178:	8912      	ldrh	r2, [r2, #8]
 801317a:	4611      	mov	r1, r2
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	8952      	ldrh	r2, [r2, #10]
 8013180:	0052      	lsls	r2, r2, #1
 8013182:	440a      	add	r2, r1
 8013184:	4293      	cmp	r3, r2
 8013186:	d33c      	bcc.n	8013202 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	8912      	ldrh	r2, [r2, #8]
 8013190:	1a9b      	subs	r3, r3, r2
 8013192:	68fa      	ldr	r2, [r7, #12]
 8013194:	8952      	ldrh	r2, [r2, #10]
 8013196:	fbb3 f1f2 	udiv	r1, r3, r2
 801319a:	fb01 f202 	mul.w	r2, r1, r2
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d12e      	bne.n	8013202 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80131a4:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80131a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d110      	bne.n	80131d2 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d009      	beq.n	80131cc <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80131b8:	2302      	movs	r3, #2
 80131ba:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	7c1b      	ldrb	r3, [r3, #16]
 80131c0:	f107 0210 	add.w	r2, r7, #16
 80131c4:	4611      	mov	r1, r2
 80131c6:	4618      	mov	r0, r3
 80131c8:	f002 f801 	bl	80151ce <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80131cc:	2301      	movs	r3, #1
 80131ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80131d2:	2321      	movs	r3, #33	; 0x21
 80131d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80131d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80131dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	7bdb      	ldrb	r3, [r3, #15]
 80131e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	7c1b      	ldrb	r3, [r3, #16]
 80131ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80131f0:	4611      	mov	r1, r2
 80131f2:	4618      	mov	r0, r3
 80131f4:	f001 ffb3 	bl	801515e <RegionGetPhyParam>
 80131f8:	4603      	mov	r3, r0
 80131fa:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80131fc:	6a3b      	ldr	r3, [r7, #32]
 80131fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013208:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013210:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013218:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 801321a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801321e:	4618      	mov	r0, r3
 8013220:	3730      	adds	r7, #48	; 0x30
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013226:	b480      	push	{r7}
 8013228:	b085      	sub	sp, #20
 801322a:	af00      	add	r7, sp, #0
 801322c:	60f8      	str	r0, [r7, #12]
 801322e:	60b9      	str	r1, [r7, #8]
 8013230:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013232:	bf00      	nop
 8013234:	3714      	adds	r7, #20
 8013236:	46bd      	mov	sp, r7
 8013238:	bc80      	pop	{r7}
 801323a:	4770      	bx	lr

0801323c <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801323c:	b480      	push	{r7}
 801323e:	b083      	sub	sp, #12
 8013240:	af00      	add	r7, sp, #0
 8013242:	4603      	mov	r3, r0
 8013244:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013246:	bf00      	nop
 8013248:	370c      	adds	r7, #12
 801324a:	46bd      	mov	sp, r7
 801324c:	bc80      	pop	{r7}
 801324e:	4770      	bx	lr

08013250 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013250:	b480      	push	{r7}
 8013252:	b083      	sub	sp, #12
 8013254:	af00      	add	r7, sp, #0
 8013256:	4603      	mov	r3, r0
 8013258:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801325a:	bf00      	nop
 801325c:	370c      	adds	r7, #12
 801325e:	46bd      	mov	sp, r7
 8013260:	bc80      	pop	{r7}
 8013262:	4770      	bx	lr

08013264 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013264:	b480      	push	{r7}
 8013266:	b083      	sub	sp, #12
 8013268:	af00      	add	r7, sp, #0
 801326a:	4603      	mov	r3, r0
 801326c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801326e:	bf00      	nop
 8013270:	370c      	adds	r7, #12
 8013272:	46bd      	mov	sp, r7
 8013274:	bc80      	pop	{r7}
 8013276:	4770      	bx	lr

08013278 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013278:	b480      	push	{r7}
 801327a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801327c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801327e:	4618      	mov	r0, r3
 8013280:	46bd      	mov	sp, r7
 8013282:	bc80      	pop	{r7}
 8013284:	4770      	bx	lr

08013286 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013286:	b480      	push	{r7}
 8013288:	b083      	sub	sp, #12
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801328e:	bf00      	nop
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	bc80      	pop	{r7}
 8013296:	4770      	bx	lr

08013298 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132a0:	bf00      	nop
 80132a2:	370c      	adds	r7, #12
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bc80      	pop	{r7}
 80132a8:	4770      	bx	lr

080132aa <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80132aa:	b480      	push	{r7}
 80132ac:	b083      	sub	sp, #12
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132b2:	bf00      	nop
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bc80      	pop	{r7}
 80132ba:	4770      	bx	lr

080132bc <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	460b      	mov	r3, r1
 80132c6:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80132c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bc80      	pop	{r7}
 80132d2:	4770      	bx	lr

080132d4 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80132d4:	b480      	push	{r7}
 80132d6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132d8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132da:	4618      	mov	r0, r3
 80132dc:	46bd      	mov	sp, r7
 80132de:	bc80      	pop	{r7}
 80132e0:	4770      	bx	lr

080132e2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80132e2:	b480      	push	{r7}
 80132e4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132e6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bc80      	pop	{r7}
 80132ee:	4770      	bx	lr

080132f0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80132f0:	b480      	push	{r7}
 80132f2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132f4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bc80      	pop	{r7}
 80132fc:	4770      	bx	lr

080132fe <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80132fe:	b480      	push	{r7}
 8013300:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013302:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013304:	4618      	mov	r0, r3
 8013306:	46bd      	mov	sp, r7
 8013308:	bc80      	pop	{r7}
 801330a:	4770      	bx	lr

0801330c <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 801330c:	b480      	push	{r7}
 801330e:	b083      	sub	sp, #12
 8013310:	af00      	add	r7, sp, #0
 8013312:	4603      	mov	r3, r0
 8013314:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013316:	bf00      	nop
 8013318:	370c      	adds	r7, #12
 801331a:	46bd      	mov	sp, r7
 801331c:	bc80      	pop	{r7}
 801331e:	4770      	bx	lr

08013320 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8013320:	b480      	push	{r7}
 8013322:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013324:	bf00      	nop
 8013326:	46bd      	mov	sp, r7
 8013328:	bc80      	pop	{r7}
 801332a:	4770      	bx	lr

0801332c <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 801332c:	b480      	push	{r7}
 801332e:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013330:	bf00      	nop
 8013332:	46bd      	mov	sp, r7
 8013334:	bc80      	pop	{r7}
 8013336:	4770      	bx	lr

08013338 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013338:	b480      	push	{r7}
 801333a:	b083      	sub	sp, #12
 801333c:	af00      	add	r7, sp, #0
 801333e:	4603      	mov	r3, r0
 8013340:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013342:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013344:	4618      	mov	r0, r3
 8013346:	370c      	adds	r7, #12
 8013348:	46bd      	mov	sp, r7
 801334a:	bc80      	pop	{r7}
 801334c:	4770      	bx	lr

0801334e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801334e:	b480      	push	{r7}
 8013350:	b083      	sub	sp, #12
 8013352:	af00      	add	r7, sp, #0
 8013354:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013356:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013358:	4618      	mov	r0, r3
 801335a:	370c      	adds	r7, #12
 801335c:	46bd      	mov	sp, r7
 801335e:	bc80      	pop	{r7}
 8013360:	4770      	bx	lr

08013362 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8013362:	b480      	push	{r7}
 8013364:	b083      	sub	sp, #12
 8013366:	af00      	add	r7, sp, #0
 8013368:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801336a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801336c:	4618      	mov	r0, r3
 801336e:	370c      	adds	r7, #12
 8013370:	46bd      	mov	sp, r7
 8013372:	bc80      	pop	{r7}
 8013374:	4770      	bx	lr

08013376 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013376:	b480      	push	{r7}
 8013378:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801337a:	bf00      	nop
 801337c:	46bd      	mov	sp, r7
 801337e:	bc80      	pop	{r7}
 8013380:	4770      	bx	lr

08013382 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8013382:	b480      	push	{r7}
 8013384:	b083      	sub	sp, #12
 8013386:	af00      	add	r7, sp, #0
 8013388:	4603      	mov	r3, r0
 801338a:	6039      	str	r1, [r7, #0]
 801338c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801338e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013390:	4618      	mov	r0, r3
 8013392:	370c      	adds	r7, #12
 8013394:	46bd      	mov	sp, r7
 8013396:	bc80      	pop	{r7}
 8013398:	4770      	bx	lr

0801339a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801339a:	b480      	push	{r7}
 801339c:	b083      	sub	sp, #12
 801339e:	af00      	add	r7, sp, #0
 80133a0:	4603      	mov	r3, r0
 80133a2:	603a      	str	r2, [r7, #0]
 80133a4:	80fb      	strh	r3, [r7, #6]
 80133a6:	460b      	mov	r3, r1
 80133a8:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133aa:	bf00      	nop
 80133ac:	370c      	adds	r7, #12
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bc80      	pop	{r7}
 80133b2:	4770      	bx	lr

080133b4 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80133b4:	b480      	push	{r7}
 80133b6:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133b8:	bf00      	nop
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bc80      	pop	{r7}
 80133be:	4770      	bx	lr

080133c0 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80133c8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	370c      	adds	r7, #12
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bc80      	pop	{r7}
 80133d2:	4770      	bx	lr

080133d4 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80133d4:	b480      	push	{r7}
 80133d6:	b083      	sub	sp, #12
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80133dc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133de:	4618      	mov	r0, r3
 80133e0:	370c      	adds	r7, #12
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bc80      	pop	{r7}
 80133e6:	4770      	bx	lr

080133e8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80133e8:	b480      	push	{r7}
 80133ea:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80133ec:	bf00      	nop
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bc80      	pop	{r7}
 80133f2:	4770      	bx	lr

080133f4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80133f4:	b480      	push	{r7}
 80133f6:	b083      	sub	sp, #12
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	460b      	mov	r3, r1
 80133fe:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013400:	bf00      	nop
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	bc80      	pop	{r7}
 8013408:	4770      	bx	lr

0801340a <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 801340a:	b480      	push	{r7}
 801340c:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801340e:	bf00      	nop
 8013410:	46bd      	mov	sp, r7
 8013412:	bc80      	pop	{r7}
 8013414:	4770      	bx	lr

08013416 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013416:	b480      	push	{r7}
 8013418:	b085      	sub	sp, #20
 801341a:	af00      	add	r7, sp, #0
 801341c:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013422:	2300      	movs	r3, #0
 8013424:	81fb      	strh	r3, [r7, #14]
 8013426:	e00a      	b.n	801343e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013428:	89fb      	ldrh	r3, [r7, #14]
 801342a:	68ba      	ldr	r2, [r7, #8]
 801342c:	4413      	add	r3, r2
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d001      	beq.n	8013438 <IsSlotFree+0x22>
        {
            return false;
 8013434:	2300      	movs	r3, #0
 8013436:	e006      	b.n	8013446 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013438:	89fb      	ldrh	r3, [r7, #14]
 801343a:	3301      	adds	r3, #1
 801343c:	81fb      	strh	r3, [r7, #14]
 801343e:	89fb      	ldrh	r3, [r7, #14]
 8013440:	2b0f      	cmp	r3, #15
 8013442:	d9f1      	bls.n	8013428 <IsSlotFree+0x12>
        }
    }
    return true;
 8013444:	2301      	movs	r3, #1
}
 8013446:	4618      	mov	r0, r3
 8013448:	3714      	adds	r7, #20
 801344a:	46bd      	mov	sp, r7
 801344c:	bc80      	pop	{r7}
 801344e:	4770      	bx	lr

08013450 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801345a:	e007      	b.n	801346c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801345c:	79fb      	ldrb	r3, [r7, #7]
 801345e:	3301      	adds	r3, #1
 8013460:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013462:	79fb      	ldrb	r3, [r7, #7]
 8013464:	2b20      	cmp	r3, #32
 8013466:	d101      	bne.n	801346c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013468:	2300      	movs	r3, #0
 801346a:	e012      	b.n	8013492 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801346c:	79fb      	ldrb	r3, [r7, #7]
 801346e:	011b      	lsls	r3, r3, #4
 8013470:	3308      	adds	r3, #8
 8013472:	4a0a      	ldr	r2, [pc, #40]	; (801349c <MallocNewMacCommandSlot+0x4c>)
 8013474:	4413      	add	r3, r2
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff ffcd 	bl	8013416 <IsSlotFree>
 801347c:	4603      	mov	r3, r0
 801347e:	f083 0301 	eor.w	r3, r3, #1
 8013482:	b2db      	uxtb	r3, r3
 8013484:	2b00      	cmp	r3, #0
 8013486:	d1e9      	bne.n	801345c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8013488:	79fb      	ldrb	r3, [r7, #7]
 801348a:	011b      	lsls	r3, r3, #4
 801348c:	3308      	adds	r3, #8
 801348e:	4a03      	ldr	r2, [pc, #12]	; (801349c <MallocNewMacCommandSlot+0x4c>)
 8013490:	4413      	add	r3, r2
}
 8013492:	4618      	mov	r0, r3
 8013494:	3708      	adds	r7, #8
 8013496:	46bd      	mov	sp, r7
 8013498:	bd80      	pop	{r7, pc}
 801349a:	bf00      	nop
 801349c:	20001868 	.word	0x20001868

080134a0 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d101      	bne.n	80134b2 <FreeMacCommandSlot+0x12>
    {
        return false;
 80134ae:	2300      	movs	r3, #0
 80134b0:	e005      	b.n	80134be <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80134b2:	2210      	movs	r2, #16
 80134b4:	2100      	movs	r1, #0
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f005 fc8a 	bl	8018dd0 <memset1>

    return true;
 80134bc:	2301      	movs	r3, #1
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3708      	adds	r7, #8
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80134c6:	b480      	push	{r7}
 80134c8:	b083      	sub	sp, #12
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <LinkedListInit+0x12>
    {
        return false;
 80134d4:	2300      	movs	r3, #0
 80134d6:	e006      	b.n	80134e6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	2200      	movs	r2, #0
 80134dc:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	2200      	movs	r2, #0
 80134e2:	605a      	str	r2, [r3, #4]

    return true;
 80134e4:	2301      	movs	r3, #1
}
 80134e6:	4618      	mov	r0, r3
 80134e8:	370c      	adds	r7, #12
 80134ea:	46bd      	mov	sp, r7
 80134ec:	bc80      	pop	{r7}
 80134ee:	4770      	bx	lr

080134f0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
 80134f8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d002      	beq.n	8013506 <LinkedListAdd+0x16>
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <LinkedListAdd+0x1a>
    {
        return false;
 8013506:	2300      	movs	r3, #0
 8013508:	e015      	b.n	8013536 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d102      	bne.n	8013518 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	683a      	ldr	r2, [r7, #0]
 8013516:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d003      	beq.n	8013528 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	683a      	ldr	r2, [r7, #0]
 8013526:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2200      	movs	r2, #0
 801352c:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	683a      	ldr	r2, [r7, #0]
 8013532:	605a      	str	r2, [r3, #4]

    return true;
 8013534:	2301      	movs	r3, #1
}
 8013536:	4618      	mov	r0, r3
 8013538:	370c      	adds	r7, #12
 801353a:	46bd      	mov	sp, r7
 801353c:	bc80      	pop	{r7}
 801353e:	4770      	bx	lr

08013540 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013540:	b480      	push	{r7}
 8013542:	b085      	sub	sp, #20
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d002      	beq.n	8013556 <LinkedListGetPrevious+0x16>
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013556:	2300      	movs	r3, #0
 8013558:	e016      	b.n	8013588 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013560:	683a      	ldr	r2, [r7, #0]
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	429a      	cmp	r2, r3
 8013566:	d00c      	beq.n	8013582 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013568:	e002      	b.n	8013570 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d007      	beq.n	8013586 <LinkedListGetPrevious+0x46>
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	683a      	ldr	r2, [r7, #0]
 801357c:	429a      	cmp	r2, r3
 801357e:	d1f4      	bne.n	801356a <LinkedListGetPrevious+0x2a>
 8013580:	e001      	b.n	8013586 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013582:	2300      	movs	r3, #0
 8013584:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013586:	68fb      	ldr	r3, [r7, #12]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3714      	adds	r7, #20
 801358c:	46bd      	mov	sp, r7
 801358e:	bc80      	pop	{r7}
 8013590:	4770      	bx	lr

08013592 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b084      	sub	sp, #16
 8013596:	af00      	add	r7, sp, #0
 8013598:	6078      	str	r0, [r7, #4]
 801359a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d002      	beq.n	80135a8 <LinkedListRemove+0x16>
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d101      	bne.n	80135ac <LinkedListRemove+0x1a>
    {
        return false;
 80135a8:	2300      	movs	r3, #0
 80135aa:	e020      	b.n	80135ee <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 80135ac:	6839      	ldr	r1, [r7, #0]
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7ff ffc6 	bl	8013540 <LinkedListGetPrevious>
 80135b4:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	683a      	ldr	r2, [r7, #0]
 80135bc:	429a      	cmp	r2, r3
 80135be:	d103      	bne.n	80135c8 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	681a      	ldr	r2, [r3, #0]
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	685b      	ldr	r3, [r3, #4]
 80135cc:	683a      	ldr	r2, [r7, #0]
 80135ce:	429a      	cmp	r2, r3
 80135d0:	d102      	bne.n	80135d8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	68fa      	ldr	r2, [r7, #12]
 80135d6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d003      	beq.n	80135e6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	681a      	ldr	r2, [r3, #0]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	2200      	movs	r2, #0
 80135ea:	601a      	str	r2, [r3, #0]

    return true;
 80135ec:	2301      	movs	r3, #1
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3710      	adds	r7, #16
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
	...

080135f8 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	4603      	mov	r3, r0
 8013600:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013602:	79fb      	ldrb	r3, [r7, #7]
 8013604:	2b11      	cmp	r3, #17
 8013606:	bf8c      	ite	hi
 8013608:	2201      	movhi	r2, #1
 801360a:	2200      	movls	r2, #0
 801360c:	b2d2      	uxtb	r2, r2
 801360e:	2a00      	cmp	r2, #0
 8013610:	d10c      	bne.n	801362c <IsSticky+0x34>
 8013612:	2201      	movs	r2, #1
 8013614:	409a      	lsls	r2, r3
 8013616:	4b08      	ldr	r3, [pc, #32]	; (8013638 <IsSticky+0x40>)
 8013618:	4013      	ands	r3, r2
 801361a:	2b00      	cmp	r3, #0
 801361c:	bf14      	ite	ne
 801361e:	2301      	movne	r3, #1
 8013620:	2300      	moveq	r3, #0
 8013622:	b2db      	uxtb	r3, r3
 8013624:	2b00      	cmp	r3, #0
 8013626:	d001      	beq.n	801362c <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013628:	2301      	movs	r3, #1
 801362a:	e000      	b.n	801362e <IsSticky+0x36>
        default:
            return false;
 801362c:	2300      	movs	r3, #0
    }
}
 801362e:	4618      	mov	r0, r3
 8013630:	370c      	adds	r7, #12
 8013632:	46bd      	mov	sp, r7
 8013634:	bc80      	pop	{r7}
 8013636:	4770      	bx	lr
 8013638:	00020720 	.word	0x00020720

0801363c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 801363c:	b580      	push	{r7, lr}
 801363e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013640:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8013644:	2100      	movs	r1, #0
 8013646:	4804      	ldr	r0, [pc, #16]	; (8013658 <LoRaMacCommandsInit+0x1c>)
 8013648:	f005 fbc2 	bl	8018dd0 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 801364c:	4802      	ldr	r0, [pc, #8]	; (8013658 <LoRaMacCommandsInit+0x1c>)
 801364e:	f7ff ff3a 	bl	80134c6 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013652:	2300      	movs	r3, #0
}
 8013654:	4618      	mov	r0, r3
 8013656:	bd80      	pop	{r7, pc}
 8013658:	20001868 	.word	0x20001868

0801365c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	4603      	mov	r3, r0
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
 8013668:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 801366a:	68bb      	ldr	r3, [r7, #8]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d101      	bne.n	8013674 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013670:	2301      	movs	r3, #1
 8013672:	e033      	b.n	80136dc <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013674:	f7ff feec 	bl	8013450 <MallocNewMacCommandSlot>
 8013678:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d101      	bne.n	8013684 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013680:	2302      	movs	r3, #2
 8013682:	e02b      	b.n	80136dc <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013684:	6979      	ldr	r1, [r7, #20]
 8013686:	4817      	ldr	r0, [pc, #92]	; (80136e4 <LoRaMacCommandsAddCmd+0x88>)
 8013688:	f7ff ff32 	bl	80134f0 <LinkedListAdd>
 801368c:	4603      	mov	r3, r0
 801368e:	f083 0301 	eor.w	r3, r3, #1
 8013692:	b2db      	uxtb	r3, r3
 8013694:	2b00      	cmp	r3, #0
 8013696:	d001      	beq.n	801369c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013698:	2305      	movs	r3, #5
 801369a:	e01f      	b.n	80136dc <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 801369c:	697b      	ldr	r3, [r7, #20]
 801369e:	7bfa      	ldrb	r2, [r7, #15]
 80136a0:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	3305      	adds	r3, #5
 80136ac:	687a      	ldr	r2, [r7, #4]
 80136ae:	b292      	uxth	r2, r2
 80136b0:	68b9      	ldr	r1, [r7, #8]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f005 fb51 	bl	8018d5a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80136b8:	7bfb      	ldrb	r3, [r7, #15]
 80136ba:	4618      	mov	r0, r3
 80136bc:	f7ff ff9c 	bl	80135f8 <IsSticky>
 80136c0:	4603      	mov	r3, r0
 80136c2:	461a      	mov	r2, r3
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80136c8:	4b06      	ldr	r3, [pc, #24]	; (80136e4 <LoRaMacCommandsAddCmd+0x88>)
 80136ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	4413      	add	r3, r2
 80136d2:	3301      	adds	r3, #1
 80136d4:	4a03      	ldr	r2, [pc, #12]	; (80136e4 <LoRaMacCommandsAddCmd+0x88>)
 80136d6:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80136da:	2300      	movs	r3, #0
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3718      	adds	r7, #24
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	20001868 	.word	0x20001868

080136e8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b082      	sub	sp, #8
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d101      	bne.n	80136fa <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80136f6:	2301      	movs	r3, #1
 80136f8:	e021      	b.n	801373e <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 80136fa:	6879      	ldr	r1, [r7, #4]
 80136fc:	4812      	ldr	r0, [pc, #72]	; (8013748 <LoRaMacCommandsRemoveCmd+0x60>)
 80136fe:	f7ff ff48 	bl	8013592 <LinkedListRemove>
 8013702:	4603      	mov	r3, r0
 8013704:	f083 0301 	eor.w	r3, r3, #1
 8013708:	b2db      	uxtb	r3, r3
 801370a:	2b00      	cmp	r3, #0
 801370c:	d001      	beq.n	8013712 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 801370e:	2303      	movs	r3, #3
 8013710:	e015      	b.n	801373e <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013712:	4b0d      	ldr	r3, [pc, #52]	; (8013748 <LoRaMacCommandsRemoveCmd+0x60>)
 8013714:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	689b      	ldr	r3, [r3, #8]
 801371c:	1ad3      	subs	r3, r2, r3
 801371e:	3b01      	subs	r3, #1
 8013720:	4a09      	ldr	r2, [pc, #36]	; (8013748 <LoRaMacCommandsRemoveCmd+0x60>)
 8013722:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ff feba 	bl	80134a0 <FreeMacCommandSlot>
 801372c:	4603      	mov	r3, r0
 801372e:	f083 0301 	eor.w	r3, r3, #1
 8013732:	b2db      	uxtb	r3, r3
 8013734:	2b00      	cmp	r3, #0
 8013736:	d001      	beq.n	801373c <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013738:	2305      	movs	r3, #5
 801373a:	e000      	b.n	801373e <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801373c:	2300      	movs	r3, #0
}
 801373e:	4618      	mov	r0, r3
 8013740:	3708      	adds	r7, #8
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	20001868 	.word	0x20001868

0801374c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013752:	4b0f      	ldr	r3, [pc, #60]	; (8013790 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013758:	e012      	b.n	8013780 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	7b1b      	ldrb	r3, [r3, #12]
 801375e:	f083 0301 	eor.w	r3, r3, #1
 8013762:	b2db      	uxtb	r3, r3
 8013764:	2b00      	cmp	r3, #0
 8013766:	d008      	beq.n	801377a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f7ff ffba 	bl	80136e8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013774:	683b      	ldr	r3, [r7, #0]
 8013776:	607b      	str	r3, [r7, #4]
 8013778:	e002      	b.n	8013780 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d1e9      	bne.n	801375a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013786:	2300      	movs	r3, #0
}
 8013788:	4618      	mov	r0, r3
 801378a:	3708      	adds	r7, #8
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	20001868 	.word	0x20001868

08013794 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801379a:	4b0e      	ldr	r3, [pc, #56]	; (80137d4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80137a0:	e00f      	b.n	80137c2 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	791b      	ldrb	r3, [r3, #4]
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7ff ff23 	bl	80135f8 <IsSticky>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d002      	beq.n	80137be <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f7ff ff95 	bl	80136e8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1ec      	bne.n	80137a2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3708      	adds	r7, #8
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}
 80137d2:	bf00      	nop
 80137d4:	20001868 	.word	0x20001868

080137d8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d101      	bne.n	80137ea <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80137e6:	2301      	movs	r3, #1
 80137e8:	e005      	b.n	80137f6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80137ea:	4b05      	ldr	r3, [pc, #20]	; (8013800 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80137ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80137f4:	2300      	movs	r3, #0
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	370c      	adds	r7, #12
 80137fa:	46bd      	mov	sp, r7
 80137fc:	bc80      	pop	{r7}
 80137fe:	4770      	bx	lr
 8013800:	20001868 	.word	0x20001868

08013804 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b088      	sub	sp, #32
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013810:	4b25      	ldr	r3, [pc, #148]	; (80138a8 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013816:	2300      	movs	r3, #0
 8013818:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d002      	beq.n	8013826 <LoRaMacCommandsSerializeCmds+0x22>
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d126      	bne.n	8013874 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013826:	2301      	movs	r3, #1
 8013828:	e039      	b.n	801389e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801382a:	7efb      	ldrb	r3, [r7, #27]
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	1ad2      	subs	r2, r2, r3
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	689b      	ldr	r3, [r3, #8]
 8013834:	3301      	adds	r3, #1
 8013836:	429a      	cmp	r2, r3
 8013838:	d320      	bcc.n	801387c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801383a:	7efb      	ldrb	r3, [r7, #27]
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	76fa      	strb	r2, [r7, #27]
 8013840:	461a      	mov	r2, r3
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	4413      	add	r3, r2
 8013846:	69fa      	ldr	r2, [r7, #28]
 8013848:	7912      	ldrb	r2, [r2, #4]
 801384a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801384c:	7efb      	ldrb	r3, [r7, #27]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	18d0      	adds	r0, r2, r3
 8013852:	69fb      	ldr	r3, [r7, #28]
 8013854:	1d59      	adds	r1, r3, #5
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	689b      	ldr	r3, [r3, #8]
 801385a:	b29b      	uxth	r3, r3
 801385c:	461a      	mov	r2, r3
 801385e:	f005 fa7c 	bl	8018d5a <memcpy1>
            itr += curElement->PayloadSize;
 8013862:	69fb      	ldr	r3, [r7, #28]
 8013864:	689b      	ldr	r3, [r3, #8]
 8013866:	b2da      	uxtb	r2, r3
 8013868:	7efb      	ldrb	r3, [r7, #27]
 801386a:	4413      	add	r3, r2
 801386c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d1d7      	bne.n	801382a <LoRaMacCommandsSerializeCmds+0x26>
 801387a:	e009      	b.n	8013890 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801387c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801387e:	e007      	b.n	8013890 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013886:	69f8      	ldr	r0, [r7, #28]
 8013888:	f7ff ff2e 	bl	80136e8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d1f4      	bne.n	8013880 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013896:	68b8      	ldr	r0, [r7, #8]
 8013898:	f7ff ff9e 	bl	80137d8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 801389c:	2300      	movs	r3, #0
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3720      	adds	r7, #32
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}
 80138a6:	bf00      	nop
 80138a8:	20001868 	.word	0x20001868

080138ac <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 80138ac:	b480      	push	{r7}
 80138ae:	b085      	sub	sp, #20
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d101      	bne.n	80138be <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80138ba:	2301      	movs	r3, #1
 80138bc:	e016      	b.n	80138ec <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80138be:	4b0e      	ldr	r3, [pc, #56]	; (80138f8 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	2200      	movs	r2, #0
 80138c8:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80138ca:	e00b      	b.n	80138e4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	7b1b      	ldrb	r3, [r3, #12]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d004      	beq.n	80138de <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2201      	movs	r2, #1
 80138d8:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80138da:	2300      	movs	r3, #0
 80138dc:	e006      	b.n	80138ec <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1f0      	bne.n	80138cc <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138ea:	2300      	movs	r3, #0
}
 80138ec:	4618      	mov	r0, r3
 80138ee:	3714      	adds	r7, #20
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bc80      	pop	{r7}
 80138f4:	4770      	bx	lr
 80138f6:	bf00      	nop
 80138f8:	20001868 	.word	0x20001868

080138fc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 80138fc:	b480      	push	{r7}
 80138fe:	b085      	sub	sp, #20
 8013900:	af00      	add	r7, sp, #0
 8013902:	4603      	mov	r3, r0
 8013904:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013906:	2300      	movs	r3, #0
 8013908:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801390a:	79fb      	ldrb	r3, [r7, #7]
 801390c:	3b02      	subs	r3, #2
 801390e:	2b11      	cmp	r3, #17
 8013910:	d850      	bhi.n	80139b4 <LoRaMacCommandsGetCmdSize+0xb8>
 8013912:	a201      	add	r2, pc, #4	; (adr r2, 8013918 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013918:	08013961 	.word	0x08013961
 801391c:	08013967 	.word	0x08013967
 8013920:	0801396d 	.word	0x0801396d
 8013924:	08013973 	.word	0x08013973
 8013928:	08013979 	.word	0x08013979
 801392c:	0801397f 	.word	0x0801397f
 8013930:	08013985 	.word	0x08013985
 8013934:	0801398b 	.word	0x0801398b
 8013938:	08013991 	.word	0x08013991
 801393c:	080139b5 	.word	0x080139b5
 8013940:	080139b5 	.word	0x080139b5
 8013944:	08013997 	.word	0x08013997
 8013948:	080139b5 	.word	0x080139b5
 801394c:	080139b5 	.word	0x080139b5
 8013950:	0801399d 	.word	0x0801399d
 8013954:	080139a3 	.word	0x080139a3
 8013958:	080139a9 	.word	0x080139a9
 801395c:	080139af 	.word	0x080139af
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013960:	2303      	movs	r3, #3
 8013962:	73fb      	strb	r3, [r7, #15]
            break;
 8013964:	e027      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013966:	2305      	movs	r3, #5
 8013968:	73fb      	strb	r3, [r7, #15]
            break;
 801396a:	e024      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 801396c:	2302      	movs	r3, #2
 801396e:	73fb      	strb	r3, [r7, #15]
            break;
 8013970:	e021      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013972:	2305      	movs	r3, #5
 8013974:	73fb      	strb	r3, [r7, #15]
            break;
 8013976:	e01e      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013978:	2301      	movs	r3, #1
 801397a:	73fb      	strb	r3, [r7, #15]
            break;
 801397c:	e01b      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 801397e:	2306      	movs	r3, #6
 8013980:	73fb      	strb	r3, [r7, #15]
            break;
 8013982:	e018      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013984:	2302      	movs	r3, #2
 8013986:	73fb      	strb	r3, [r7, #15]
            break;
 8013988:	e015      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801398a:	2302      	movs	r3, #2
 801398c:	73fb      	strb	r3, [r7, #15]
            break;
 801398e:	e012      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013990:	2305      	movs	r3, #5
 8013992:	73fb      	strb	r3, [r7, #15]
            break;
 8013994:	e00f      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013996:	2306      	movs	r3, #6
 8013998:	73fb      	strb	r3, [r7, #15]
            break;
 801399a:	e00c      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801399c:	2301      	movs	r3, #1
 801399e:	73fb      	strb	r3, [r7, #15]
            break;
 80139a0:	e009      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80139a2:	2305      	movs	r3, #5
 80139a4:	73fb      	strb	r3, [r7, #15]
            break;
 80139a6:	e006      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80139a8:	2304      	movs	r3, #4
 80139aa:	73fb      	strb	r3, [r7, #15]
            break;
 80139ac:	e003      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80139ae:	2304      	movs	r3, #4
 80139b0:	73fb      	strb	r3, [r7, #15]
            break;
 80139b2:	e000      	b.n	80139b6 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80139b4:	bf00      	nop
        }
    }
    return cidSize;
 80139b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3714      	adds	r7, #20
 80139bc:	46bd      	mov	sp, r7
 80139be:	bc80      	pop	{r7}
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop

080139c4 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80139c4:	b480      	push	{r7}
 80139c6:	b083      	sub	sp, #12
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	4a07      	ldr	r2, [pc, #28]	; (80139ec <IncreaseBufferPointer+0x28>)
 80139d0:	4293      	cmp	r3, r2
 80139d2:	d102      	bne.n	80139da <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80139d4:	4b06      	ldr	r3, [pc, #24]	; (80139f0 <IncreaseBufferPointer+0x2c>)
 80139d6:	607b      	str	r3, [r7, #4]
 80139d8:	e002      	b.n	80139e0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	3304      	adds	r3, #4
 80139de:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 80139e0:	687b      	ldr	r3, [r7, #4]
}
 80139e2:	4618      	mov	r0, r3
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bc80      	pop	{r7}
 80139ea:	4770      	bx	lr
 80139ec:	20001a90 	.word	0x20001a90
 80139f0:	20001a80 	.word	0x20001a80

080139f4 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	4603      	mov	r3, r0
 80139fc:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 80139fe:	79fb      	ldrb	r3, [r7, #7]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d101      	bne.n	8013a08 <IsListEmpty+0x14>
    {
        return true;
 8013a04:	2301      	movs	r3, #1
 8013a06:	e000      	b.n	8013a0a <IsListEmpty+0x16>
    }
    return false;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	370c      	adds	r7, #12
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bc80      	pop	{r7}
 8013a12:	4770      	bx	lr

08013a14 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013a1e:	79fb      	ldrb	r3, [r7, #7]
 8013a20:	2b04      	cmp	r3, #4
 8013a22:	d901      	bls.n	8013a28 <IsListFull+0x14>
    {
        return true;
 8013a24:	2301      	movs	r3, #1
 8013a26:	e000      	b.n	8013a2a <IsListFull+0x16>
    }
    return false;
 8013a28:	2300      	movs	r3, #0
}
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	370c      	adds	r7, #12
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	bc80      	pop	{r7}
 8013a32:	4770      	bx	lr

08013a34 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b086      	sub	sp, #24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	60b9      	str	r1, [r7, #8]
 8013a3e:	607a      	str	r2, [r7, #4]
 8013a40:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013a46:	4b13      	ldr	r3, [pc, #76]	; (8013a94 <GetElement+0x60>)
 8013a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7ff ffd1 	bl	80139f4 <IsListEmpty>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d001      	beq.n	8013a5c <GetElement+0x28>
    {
        return NULL;
 8013a58:	2300      	movs	r3, #0
 8013a5a:	e017      	b.n	8013a8c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	74fb      	strb	r3, [r7, #19]
 8013a60:	e00d      	b.n	8013a7e <GetElement+0x4a>
    {
        if( element->Request == request )
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	7bfa      	ldrb	r2, [r7, #15]
 8013a68:	429a      	cmp	r2, r3
 8013a6a:	d101      	bne.n	8013a70 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013a6c:	697b      	ldr	r3, [r7, #20]
 8013a6e:	e00d      	b.n	8013a8c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013a70:	6978      	ldr	r0, [r7, #20]
 8013a72:	f7ff ffa7 	bl	80139c4 <IncreaseBufferPointer>
 8013a76:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013a78:	7cfb      	ldrb	r3, [r7, #19]
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	74fb      	strb	r3, [r7, #19]
 8013a7e:	4b05      	ldr	r3, [pc, #20]	; (8013a94 <GetElement+0x60>)
 8013a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a84:	7cfa      	ldrb	r2, [r7, #19]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d3eb      	bcc.n	8013a62 <GetElement+0x2e>
    }

    return NULL;
 8013a8a:	2300      	movs	r3, #0
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3718      	adds	r7, #24
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	20001a74 	.word	0x20001a74

08013a98 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013aa0:	4a0c      	ldr	r2, [pc, #48]	; (8013ad4 <LoRaMacConfirmQueueInit+0x3c>)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013aa6:	4b0b      	ldr	r3, [pc, #44]	; (8013ad4 <LoRaMacConfirmQueueInit+0x3c>)
 8013aa8:	2200      	movs	r2, #0
 8013aaa:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013aae:	4b09      	ldr	r3, [pc, #36]	; (8013ad4 <LoRaMacConfirmQueueInit+0x3c>)
 8013ab0:	4a09      	ldr	r2, [pc, #36]	; (8013ad8 <LoRaMacConfirmQueueInit+0x40>)
 8013ab2:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ab4:	4b07      	ldr	r3, [pc, #28]	; (8013ad4 <LoRaMacConfirmQueueInit+0x3c>)
 8013ab6:	4a08      	ldr	r2, [pc, #32]	; (8013ad8 <LoRaMacConfirmQueueInit+0x40>)
 8013ab8:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013aba:	2214      	movs	r2, #20
 8013abc:	21ff      	movs	r1, #255	; 0xff
 8013abe:	4806      	ldr	r0, [pc, #24]	; (8013ad8 <LoRaMacConfirmQueueInit+0x40>)
 8013ac0:	f005 f986 	bl	8018dd0 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013ac4:	4b03      	ldr	r3, [pc, #12]	; (8013ad4 <LoRaMacConfirmQueueInit+0x3c>)
 8013ac6:	2201      	movs	r2, #1
 8013ac8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013acc:	bf00      	nop
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	20001a74 	.word	0x20001a74
 8013ad8:	20001a80 	.word	0x20001a80

08013adc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013ae4:	4b19      	ldr	r3, [pc, #100]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013aea:	4618      	mov	r0, r3
 8013aec:	f7ff ff92 	bl	8013a14 <IsListFull>
 8013af0:	4603      	mov	r3, r0
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d001      	beq.n	8013afa <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8013af6:	2300      	movs	r3, #0
 8013af8:	e024      	b.n	8013b44 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013afa:	4b14      	ldr	r3, [pc, #80]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	687a      	ldr	r2, [r7, #4]
 8013b00:	7812      	ldrb	r2, [r2, #0]
 8013b02:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013b04:	4b11      	ldr	r3, [pc, #68]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b06:	689b      	ldr	r3, [r3, #8]
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	7852      	ldrb	r2, [r2, #1]
 8013b0c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013b0e:	4b0f      	ldr	r3, [pc, #60]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	78d2      	ldrb	r2, [r2, #3]
 8013b16:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8013b18:	4b0c      	ldr	r3, [pc, #48]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	687a      	ldr	r2, [r7, #4]
 8013b1e:	7892      	ldrb	r2, [r2, #2]
 8013b20:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8013b22:	4b0a      	ldr	r3, [pc, #40]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	4b07      	ldr	r3, [pc, #28]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b2e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013b32:	4b06      	ldr	r3, [pc, #24]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b34:	689b      	ldr	r3, [r3, #8]
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7ff ff44 	bl	80139c4 <IncreaseBufferPointer>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	4a03      	ldr	r2, [pc, #12]	; (8013b4c <LoRaMacConfirmQueueAdd+0x70>)
 8013b40:	6093      	str	r3, [r2, #8]

    return true;
 8013b42:	2301      	movs	r3, #1
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3708      	adds	r7, #8
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	20001a74 	.word	0x20001a74

08013b50 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013b54:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013b56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7ff ff4a 	bl	80139f4 <IsListEmpty>
 8013b60:	4603      	mov	r3, r0
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d001      	beq.n	8013b6a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013b66:	2300      	movs	r3, #0
 8013b68:	e010      	b.n	8013b8c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8013b6a:	4b09      	ldr	r3, [pc, #36]	; (8013b90 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013b6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b70:	3b01      	subs	r3, #1
 8013b72:	b2da      	uxtb	r2, r3
 8013b74:	4b06      	ldr	r3, [pc, #24]	; (8013b90 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013b76:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013b7a:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7ff ff20 	bl	80139c4 <IncreaseBufferPointer>
 8013b84:	4603      	mov	r3, r0
 8013b86:	4a02      	ldr	r2, [pc, #8]	; (8013b90 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013b88:	6053      	str	r3, [r2, #4]

    return true;
 8013b8a:	2301      	movs	r3, #1
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	20001a74 	.word	0x20001a74

08013b94 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b084      	sub	sp, #16
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	460a      	mov	r2, r1
 8013b9e:	71fb      	strb	r3, [r7, #7]
 8013ba0:	4613      	mov	r3, r2
 8013ba2:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013ba8:	4b10      	ldr	r3, [pc, #64]	; (8013bec <LoRaMacConfirmQueueSetStatus+0x58>)
 8013baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff ff20 	bl	80139f4 <IsListEmpty>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	f083 0301 	eor.w	r3, r3, #1
 8013bba:	b2db      	uxtb	r3, r3
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d011      	beq.n	8013be4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013bc0:	4b0a      	ldr	r3, [pc, #40]	; (8013bec <LoRaMacConfirmQueueSetStatus+0x58>)
 8013bc2:	6859      	ldr	r1, [r3, #4]
 8013bc4:	4b09      	ldr	r3, [pc, #36]	; (8013bec <LoRaMacConfirmQueueSetStatus+0x58>)
 8013bc6:	689a      	ldr	r2, [r3, #8]
 8013bc8:	79bb      	ldrb	r3, [r7, #6]
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7ff ff32 	bl	8013a34 <GetElement>
 8013bd0:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d005      	beq.n	8013be4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	79fa      	ldrb	r2, [r7, #7]
 8013bdc:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2201      	movs	r2, #1
 8013be2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013be4:	bf00      	nop
 8013be6:	3710      	adds	r7, #16
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	20001a74 	.word	0x20001a74

08013bf0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b084      	sub	sp, #16
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013bfe:	4b10      	ldr	r3, [pc, #64]	; (8013c40 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff fef5 	bl	80139f4 <IsListEmpty>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	f083 0301 	eor.w	r3, r3, #1
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d00e      	beq.n	8013c34 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013c16:	4b0a      	ldr	r3, [pc, #40]	; (8013c40 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013c18:	6859      	ldr	r1, [r3, #4]
 8013c1a:	4b09      	ldr	r3, [pc, #36]	; (8013c40 <LoRaMacConfirmQueueGetStatus+0x50>)
 8013c1c:	689a      	ldr	r2, [r3, #8]
 8013c1e:	79fb      	ldrb	r3, [r7, #7]
 8013c20:	4618      	mov	r0, r3
 8013c22:	f7ff ff07 	bl	8013a34 <GetElement>
 8013c26:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d002      	beq.n	8013c34 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	785b      	ldrb	r3, [r3, #1]
 8013c32:	e000      	b.n	8013c36 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013c34:	2301      	movs	r3, #1
}
 8013c36:	4618      	mov	r0, r3
 8013c38:	3710      	adds	r7, #16
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bd80      	pop	{r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	20001a74 	.word	0x20001a74

08013c44 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013c4e:	4b16      	ldr	r3, [pc, #88]	; (8013ca8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013c54:	4a14      	ldr	r2, [pc, #80]	; (8013ca8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013c56:	79fb      	ldrb	r3, [r7, #7]
 8013c58:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013c5c:	4b12      	ldr	r3, [pc, #72]	; (8013ca8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7ff fec6 	bl	80139f4 <IsListEmpty>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	f083 0301 	eor.w	r3, r3, #1
 8013c6e:	b2db      	uxtb	r3, r3
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d015      	beq.n	8013ca0 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	79fa      	ldrb	r2, [r7, #7]
 8013c78:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	78db      	ldrb	r3, [r3, #3]
 8013c7e:	f083 0301 	eor.w	r3, r3, #1
 8013c82:	b2db      	uxtb	r3, r3
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d002      	beq.n	8013c8e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2201      	movs	r2, #1
 8013c8c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	f7ff fe98 	bl	80139c4 <IncreaseBufferPointer>
 8013c94:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013c96:	4b04      	ldr	r3, [pc, #16]	; (8013ca8 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013c98:	689b      	ldr	r3, [r3, #8]
 8013c9a:	68fa      	ldr	r2, [r7, #12]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d1e9      	bne.n	8013c74 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013ca0:	bf00      	nop
 8013ca2:	3710      	adds	r7, #16
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	20001a74 	.word	0x20001a74

08013cac <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013cb6:	4b09      	ldr	r3, [pc, #36]	; (8013cdc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013cb8:	6859      	ldr	r1, [r3, #4]
 8013cba:	4b08      	ldr	r3, [pc, #32]	; (8013cdc <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013cbc:	689a      	ldr	r2, [r3, #8]
 8013cbe:	79fb      	ldrb	r3, [r7, #7]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f7ff feb7 	bl	8013a34 <GetElement>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	e000      	b.n	8013cd2 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3708      	adds	r7, #8
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	20001a74 	.word	0x20001a74

08013ce0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b084      	sub	sp, #16
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013ce8:	4b22      	ldr	r3, [pc, #136]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cee:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	73fb      	strb	r3, [r7, #15]
 8013cf8:	e032      	b.n	8013d60 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013cfa:	4b1e      	ldr	r3, [pc, #120]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013cfc:	685b      	ldr	r3, [r3, #4]
 8013cfe:	781a      	ldrb	r2, [r3, #0]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013d04:	4b1b      	ldr	r3, [pc, #108]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	785a      	ldrb	r2, [r3, #1]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013d0e:	4b19      	ldr	r3, [pc, #100]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013d10:	685b      	ldr	r3, [r3, #4]
 8013d12:	789b      	ldrb	r3, [r3, #2]
 8013d14:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8013d16:	7b7b      	ldrb	r3, [r7, #13]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d005      	beq.n	8013d28 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013d1c:	4b15      	ldr	r3, [pc, #84]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	689b      	ldr	r3, [r3, #8]
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	4798      	blx	r3
 8013d26:	e00b      	b.n	8013d40 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013d28:	4b12      	ldr	r3, [pc, #72]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013d2a:	685b      	ldr	r3, [r3, #4]
 8013d2c:	781b      	ldrb	r3, [r3, #0]
 8013d2e:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013d30:	4b10      	ldr	r3, [pc, #64]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013d32:	685b      	ldr	r3, [r3, #4]
 8013d34:	785b      	ldrb	r3, [r3, #1]
 8013d36:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013d38:	4b0e      	ldr	r3, [pc, #56]	; (8013d74 <LoRaMacConfirmQueueHandleCb+0x94>)
 8013d3a:	685b      	ldr	r3, [r3, #4]
 8013d3c:	78db      	ldrb	r3, [r3, #3]
 8013d3e:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013d40:	f7ff ff06 	bl	8013b50 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013d44:	7b7b      	ldrb	r3, [r7, #13]
 8013d46:	f083 0301 	eor.w	r3, r3, #1
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d004      	beq.n	8013d5a <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013d50:	f107 0308 	add.w	r3, r7, #8
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7ff fec1 	bl	8013adc <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013d5a:	7bfb      	ldrb	r3, [r7, #15]
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	73fb      	strb	r3, [r7, #15]
 8013d60:	7bfa      	ldrb	r2, [r7, #15]
 8013d62:	7bbb      	ldrb	r3, [r7, #14]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d3c8      	bcc.n	8013cfa <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013d68:	bf00      	nop
 8013d6a:	bf00      	nop
 8013d6c:	3710      	adds	r7, #16
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	20001a74 	.word	0x20001a74

08013d78 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013d78:	b480      	push	{r7}
 8013d7a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013d7c:	4b03      	ldr	r3, [pc, #12]	; (8013d8c <LoRaMacConfirmQueueGetCnt+0x14>)
 8013d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bc80      	pop	{r7}
 8013d88:	4770      	bx	lr
 8013d8a:	bf00      	nop
 8013d8c:	20001a74 	.word	0x20001a74

08013d90 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013d94:	4b06      	ldr	r3, [pc, #24]	; (8013db0 <LoRaMacConfirmQueueIsFull+0x20>)
 8013d96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7ff fe3a 	bl	8013a14 <IsListFull>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d001      	beq.n	8013daa <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013da6:	2301      	movs	r3, #1
 8013da8:	e000      	b.n	8013dac <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013daa:	2300      	movs	r3, #0
    }
}
 8013dac:	4618      	mov	r0, r3
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	20001a74 	.word	0x20001a74

08013db4 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b08e      	sub	sp, #56	; 0x38
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	607b      	str	r3, [r7, #4]
 8013dbe:	460b      	mov	r3, r1
 8013dc0:	817b      	strh	r3, [r7, #10]
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d101      	bne.n	8013dd0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013dcc:	2309      	movs	r3, #9
 8013dce:	e086      	b.n	8013ede <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 8013dda:	2300      	movs	r3, #0
 8013ddc:	623b      	str	r3, [r7, #32]
 8013dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013de2:	2200      	movs	r2, #0
 8013de4:	601a      	str	r2, [r3, #0]
 8013de6:	605a      	str	r2, [r3, #4]
 8013de8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8013dea:	2300      	movs	r3, #0
 8013dec:	613b      	str	r3, [r7, #16]
 8013dee:	f107 0314 	add.w	r3, r7, #20
 8013df2:	2200      	movs	r2, #0
 8013df4:	601a      	str	r2, [r3, #0]
 8013df6:	605a      	str	r2, [r3, #4]
 8013df8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8013dfa:	2301      	movs	r3, #1
 8013dfc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8013dfe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8013e02:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	0a1b      	lsrs	r3, r3, #8
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	0c1b      	lsrs	r3, r3, #16
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	0e1b      	lsrs	r3, r3, #24
 8013e1e:	b2db      	uxtb	r3, r3
 8013e20:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8013e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e24:	b2db      	uxtb	r3, r3
 8013e26:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e2a:	0a1b      	lsrs	r3, r3, #8
 8013e2c:	b2db      	uxtb	r3, r3
 8013e2e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e32:	0c1b      	lsrs	r3, r3, #16
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e3a:	0e1b      	lsrs	r3, r3, #24
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013e40:	e048      	b.n	8013ed4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013e42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013e48:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013e4e:	f107 0320 	add.w	r3, r7, #32
 8013e52:	7a7a      	ldrb	r2, [r7, #9]
 8013e54:	f107 0010 	add.w	r0, r7, #16
 8013e58:	2110      	movs	r1, #16
 8013e5a:	f7f8 fcee 	bl	800c83a <SecureElementAesEncrypt>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d001      	beq.n	8013e68 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e64:	230e      	movs	r3, #14
 8013e66:	e03a      	b.n	8013ede <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013e68:	2300      	movs	r3, #0
 8013e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013e6e:	e01e      	b.n	8013eae <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013e70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e78:	4413      	add	r3, r2
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	4413      	add	r3, r2
 8013e80:	7819      	ldrb	r1, [r3, #0]
 8013e82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e86:	3338      	adds	r3, #56	; 0x38
 8013e88:	443b      	add	r3, r7
 8013e8a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8013e8e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013e92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013e96:	4403      	add	r3, r0
 8013e98:	4618      	mov	r0, r3
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	4403      	add	r3, r0
 8013e9e:	404a      	eors	r2, r1
 8013ea0:	b2d2      	uxtb	r2, r2
 8013ea2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ea8:	3301      	adds	r3, #1
 8013eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8013eae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013eb2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013eb6:	2a10      	cmp	r2, #16
 8013eb8:	bfa8      	it	ge
 8013eba:	2210      	movge	r2, #16
 8013ebc:	b212      	sxth	r2, r2
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	dbd6      	blt.n	8013e70 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013ec2:	897b      	ldrh	r3, [r7, #10]
 8013ec4:	3b10      	subs	r3, #16
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013eca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ece:	3310      	adds	r3, #16
 8013ed0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013ed4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	dcb2      	bgt.n	8013e42 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013edc:	2300      	movs	r3, #0
}
 8013ede:	4618      	mov	r0, r3
 8013ee0:	3738      	adds	r7, #56	; 0x38
 8013ee2:	46bd      	mov	sp, r7
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013ee6:	b490      	push	{r4, r7}
 8013ee8:	b082      	sub	sp, #8
 8013eea:	af00      	add	r7, sp, #0
 8013eec:	4604      	mov	r4, r0
 8013eee:	4608      	mov	r0, r1
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	4623      	mov	r3, r4
 8013ef6:	80fb      	strh	r3, [r7, #6]
 8013ef8:	4603      	mov	r3, r0
 8013efa:	717b      	strb	r3, [r7, #5]
 8013efc:	460b      	mov	r3, r1
 8013efe:	713b      	strb	r3, [r7, #4]
 8013f00:	4613      	mov	r3, r2
 8013f02:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8013f04:	69bb      	ldr	r3, [r7, #24]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d101      	bne.n	8013f0e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013f0a:	2309      	movs	r3, #9
 8013f0c:	e04e      	b.n	8013fac <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8013f0e:	69bb      	ldr	r3, [r7, #24]
 8013f10:	2249      	movs	r2, #73	; 0x49
 8013f12:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8013f14:	69bb      	ldr	r3, [r7, #24]
 8013f16:	3301      	adds	r3, #1
 8013f18:	2200      	movs	r2, #0
 8013f1a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013f1c:	69bb      	ldr	r3, [r7, #24]
 8013f1e:	3302      	adds	r3, #2
 8013f20:	2200      	movs	r2, #0
 8013f22:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	3303      	adds	r3, #3
 8013f28:	2200      	movs	r2, #0
 8013f2a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	2200      	movs	r2, #0
 8013f32:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	3305      	adds	r3, #5
 8013f38:	78fa      	ldrb	r2, [r7, #3]
 8013f3a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	3306      	adds	r3, #6
 8013f40:	693a      	ldr	r2, [r7, #16]
 8013f42:	b2d2      	uxtb	r2, r2
 8013f44:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	0a1a      	lsrs	r2, r3, #8
 8013f4a:	69bb      	ldr	r3, [r7, #24]
 8013f4c:	3307      	adds	r3, #7
 8013f4e:	b2d2      	uxtb	r2, r2
 8013f50:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	0c1a      	lsrs	r2, r3, #16
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	3308      	adds	r3, #8
 8013f5a:	b2d2      	uxtb	r2, r2
 8013f5c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	0e1a      	lsrs	r2, r3, #24
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	3309      	adds	r3, #9
 8013f66:	b2d2      	uxtb	r2, r2
 8013f68:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013f6a:	69bb      	ldr	r3, [r7, #24]
 8013f6c:	330a      	adds	r3, #10
 8013f6e:	697a      	ldr	r2, [r7, #20]
 8013f70:	b2d2      	uxtb	r2, r2
 8013f72:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013f74:	697b      	ldr	r3, [r7, #20]
 8013f76:	0a1a      	lsrs	r2, r3, #8
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	330b      	adds	r3, #11
 8013f7c:	b2d2      	uxtb	r2, r2
 8013f7e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	0c1a      	lsrs	r2, r3, #16
 8013f84:	69bb      	ldr	r3, [r7, #24]
 8013f86:	330c      	adds	r3, #12
 8013f88:	b2d2      	uxtb	r2, r2
 8013f8a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	0e1a      	lsrs	r2, r3, #24
 8013f90:	69bb      	ldr	r3, [r7, #24]
 8013f92:	330d      	adds	r3, #13
 8013f94:	b2d2      	uxtb	r2, r2
 8013f96:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013f98:	69bb      	ldr	r3, [r7, #24]
 8013f9a:	330e      	adds	r3, #14
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	330f      	adds	r3, #15
 8013fa4:	88fa      	ldrh	r2, [r7, #6]
 8013fa6:	b2d2      	uxtb	r2, r2
 8013fa8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013faa:	2300      	movs	r3, #0
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3708      	adds	r7, #8
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bc90      	pop	{r4, r7}
 8013fb4:	4770      	bx	lr

08013fb6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013fb6:	b590      	push	{r4, r7, lr}
 8013fb8:	b08b      	sub	sp, #44	; 0x2c
 8013fba:	af04      	add	r7, sp, #16
 8013fbc:	6078      	str	r0, [r7, #4]
 8013fbe:	4608      	mov	r0, r1
 8013fc0:	4611      	mov	r1, r2
 8013fc2:	461a      	mov	r2, r3
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	807b      	strh	r3, [r7, #2]
 8013fc8:	460b      	mov	r3, r1
 8013fca:	707b      	strb	r3, [r7, #1]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d002      	beq.n	8013fdc <ComputeCmacB0+0x26>
 8013fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d101      	bne.n	8013fe0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013fdc:	2309      	movs	r3, #9
 8013fde:	e024      	b.n	801402a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8013fe0:	887b      	ldrh	r3, [r7, #2]
 8013fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013fe6:	d901      	bls.n	8013fec <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8013fe8:	230d      	movs	r3, #13
 8013fea:	e01e      	b.n	801402a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013fec:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8013ff0:	783a      	ldrb	r2, [r7, #0]
 8013ff2:	7879      	ldrb	r1, [r7, #1]
 8013ff4:	8878      	ldrh	r0, [r7, #2]
 8013ff6:	f107 0308 	add.w	r3, r7, #8
 8013ffa:	9302      	str	r3, [sp, #8]
 8013ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffe:	9301      	str	r3, [sp, #4]
 8014000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014002:	9300      	str	r3, [sp, #0]
 8014004:	4623      	mov	r3, r4
 8014006:	f7ff ff6e 	bl	8013ee6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801400a:	7879      	ldrb	r1, [r7, #1]
 801400c:	887a      	ldrh	r2, [r7, #2]
 801400e:	f107 0008 	add.w	r0, r7, #8
 8014012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014014:	9300      	str	r3, [sp, #0]
 8014016:	460b      	mov	r3, r1
 8014018:	6879      	ldr	r1, [r7, #4]
 801401a:	f7f8 fbc1 	bl	800c7a0 <SecureElementComputeAesCmac>
 801401e:	4603      	mov	r3, r0
 8014020:	2b00      	cmp	r3, #0
 8014022:	d001      	beq.n	8014028 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014024:	230e      	movs	r3, #14
 8014026:	e000      	b.n	801402a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014028:	2300      	movs	r3, #0
}
 801402a:	4618      	mov	r0, r3
 801402c:	371c      	adds	r7, #28
 801402e:	46bd      	mov	sp, r7
 8014030:	bd90      	pop	{r4, r7, pc}

08014032 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8014032:	b590      	push	{r4, r7, lr}
 8014034:	b0cd      	sub	sp, #308	; 0x134
 8014036:	af04      	add	r7, sp, #16
 8014038:	f507 7490 	add.w	r4, r7, #288	; 0x120
 801403c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8014040:	6020      	str	r0, [r4, #0]
 8014042:	460c      	mov	r4, r1
 8014044:	4610      	mov	r0, r2
 8014046:	4619      	mov	r1, r3
 8014048:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801404c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014050:	4622      	mov	r2, r4
 8014052:	801a      	strh	r2, [r3, #0]
 8014054:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014058:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801405c:	4602      	mov	r2, r0
 801405e:	701a      	strb	r2, [r3, #0]
 8014060:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014064:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014068:	460a      	mov	r2, r1
 801406a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801406c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014070:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d101      	bne.n	801407e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801407a:	2309      	movs	r3, #9
 801407c:	e063      	b.n	8014146 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801407e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014082:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014086:	881b      	ldrh	r3, [r3, #0]
 8014088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801408c:	d901      	bls.n	8014092 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801408e:	230d      	movs	r3, #13
 8014090:	e059      	b.n	8014146 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8014092:	f107 030c 	add.w	r3, r7, #12
 8014096:	f44f 7288 	mov.w	r2, #272	; 0x110
 801409a:	2100      	movs	r1, #0
 801409c:	4618      	mov	r0, r3
 801409e:	f004 fe97 	bl	8018dd0 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80140a2:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80140a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80140aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80140ae:	781a      	ldrb	r2, [r3, #0]
 80140b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80140b4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80140b8:	7819      	ldrb	r1, [r3, #0]
 80140ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80140be:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80140c2:	8818      	ldrh	r0, [r3, #0]
 80140c4:	f107 030c 	add.w	r3, r7, #12
 80140c8:	9302      	str	r3, [sp, #8]
 80140ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80140ce:	9301      	str	r3, [sp, #4]
 80140d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80140d4:	9300      	str	r3, [sp, #0]
 80140d6:	4623      	mov	r3, r4
 80140d8:	f7ff ff05 	bl	8013ee6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80140dc:	f107 030c 	add.w	r3, r7, #12
 80140e0:	3310      	adds	r3, #16
 80140e2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80140e6:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80140ea:	8812      	ldrh	r2, [r2, #0]
 80140ec:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80140f0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80140f4:	6809      	ldr	r1, [r1, #0]
 80140f6:	4618      	mov	r0, r3
 80140f8:	f004 fe2f 	bl	8018d5a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80140fc:	2306      	movs	r3, #6
 80140fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014102:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014106:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801410a:	881b      	ldrh	r3, [r3, #0]
 801410c:	3310      	adds	r3, #16
 801410e:	b299      	uxth	r1, r3
 8014110:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014114:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014118:	781b      	ldrb	r3, [r3, #0]
 801411a:	f107 000c 	add.w	r0, r7, #12
 801411e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8014122:	f7f8 fb5b 	bl	800c7dc <SecureElementVerifyAesCmac>
 8014126:	4603      	mov	r3, r0
 8014128:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801412c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014130:	2b00      	cmp	r3, #0
 8014132:	d101      	bne.n	8014138 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014134:	2300      	movs	r3, #0
 8014136:	e006      	b.n	8014146 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014138:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801413c:	2b01      	cmp	r3, #1
 801413e:	d101      	bne.n	8014144 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8014140:	2301      	movs	r3, #1
 8014142:	e000      	b.n	8014146 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014144:	230e      	movs	r3, #14
}
 8014146:	4618      	mov	r0, r3
 8014148:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801414c:	46bd      	mov	sp, r7
 801414e:	bd90      	pop	{r4, r7, pc}

08014150 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8014150:	b480      	push	{r7}
 8014152:	b085      	sub	sp, #20
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	6039      	str	r1, [r7, #0]
 801415a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801415c:	2300      	movs	r3, #0
 801415e:	73fb      	strb	r3, [r7, #15]
 8014160:	e011      	b.n	8014186 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8014162:	7bfb      	ldrb	r3, [r7, #15]
 8014164:	4a0c      	ldr	r2, [pc, #48]	; (8014198 <GetKeyAddrItem+0x48>)
 8014166:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801416a:	79fa      	ldrb	r2, [r7, #7]
 801416c:	429a      	cmp	r2, r3
 801416e:	d107      	bne.n	8014180 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8014170:	7bfb      	ldrb	r3, [r7, #15]
 8014172:	009b      	lsls	r3, r3, #2
 8014174:	4a08      	ldr	r2, [pc, #32]	; (8014198 <GetKeyAddrItem+0x48>)
 8014176:	441a      	add	r2, r3
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801417c:	2300      	movs	r3, #0
 801417e:	e006      	b.n	801418e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014180:	7bfb      	ldrb	r3, [r7, #15]
 8014182:	3301      	adds	r3, #1
 8014184:	73fb      	strb	r3, [r7, #15]
 8014186:	7bfb      	ldrb	r3, [r7, #15]
 8014188:	2b01      	cmp	r3, #1
 801418a:	d9ea      	bls.n	8014162 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801418c:	230b      	movs	r3, #11
}
 801418e:	4618      	mov	r0, r3
 8014190:	3714      	adds	r7, #20
 8014192:	46bd      	mov	sp, r7
 8014194:	bc80      	pop	{r7}
 8014196:	4770      	bx	lr
 8014198:	20000120 	.word	0x20000120

0801419c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801419c:	b580      	push	{r7, lr}
 801419e:	b088      	sub	sp, #32
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	60b9      	str	r1, [r7, #8]
 80141a4:	607a      	str	r2, [r7, #4]
 80141a6:	461a      	mov	r2, r3
 80141a8:	4603      	mov	r3, r0
 80141aa:	73fb      	strb	r3, [r7, #15]
 80141ac:	4613      	mov	r3, r2
 80141ae:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80141b0:	2300      	movs	r3, #0
 80141b2:	613b      	str	r3, [r7, #16]
 80141b4:	f107 0314 	add.w	r3, r7, #20
 80141b8:	2200      	movs	r2, #0
 80141ba:	601a      	str	r2, [r3, #0]
 80141bc:	605a      	str	r2, [r3, #4]
 80141be:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80141c0:	7bfb      	ldrb	r3, [r7, #15]
 80141c2:	2b02      	cmp	r3, #2
 80141c4:	d002      	beq.n	80141cc <DeriveSessionKey10x+0x30>
 80141c6:	2b03      	cmp	r3, #3
 80141c8:	d003      	beq.n	80141d2 <DeriveSessionKey10x+0x36>
 80141ca:	e005      	b.n	80141d8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80141cc:	2301      	movs	r3, #1
 80141ce:	743b      	strb	r3, [r7, #16]
            break;
 80141d0:	e004      	b.n	80141dc <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80141d2:	2302      	movs	r3, #2
 80141d4:	743b      	strb	r3, [r7, #16]
            break;
 80141d6:	e001      	b.n	80141dc <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80141d8:	230a      	movs	r3, #10
 80141da:	e02a      	b.n	8014232 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	0a1b      	lsrs	r3, r3, #8
 80141e6:	b2db      	uxtb	r3, r3
 80141e8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	0c1b      	lsrs	r3, r3, #16
 80141ee:	b2db      	uxtb	r3, r3
 80141f0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	b2db      	uxtb	r3, r3
 80141f6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	0a1b      	lsrs	r3, r3, #8
 80141fc:	b2db      	uxtb	r3, r3
 80141fe:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	0c1b      	lsrs	r3, r3, #16
 8014204:	b2db      	uxtb	r3, r3
 8014206:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014208:	89bb      	ldrh	r3, [r7, #12]
 801420a:	b2db      	uxtb	r3, r3
 801420c:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801420e:	89bb      	ldrh	r3, [r7, #12]
 8014210:	0a1b      	lsrs	r3, r3, #8
 8014212:	b29b      	uxth	r3, r3
 8014214:	b2db      	uxtb	r3, r3
 8014216:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014218:	7bfa      	ldrb	r2, [r7, #15]
 801421a:	f107 0310 	add.w	r3, r7, #16
 801421e:	2101      	movs	r1, #1
 8014220:	4618      	mov	r0, r3
 8014222:	f7f8 fb71 	bl	800c908 <SecureElementDeriveAndStoreKey>
 8014226:	4603      	mov	r3, r0
 8014228:	2b00      	cmp	r3, #0
 801422a:	d001      	beq.n	8014230 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801422c:	230e      	movs	r3, #14
 801422e:	e000      	b.n	8014232 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014230:	2300      	movs	r3, #0
}
 8014232:	4618      	mov	r0, r3
 8014234:	3720      	adds	r7, #32
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
	...

0801423c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801423c:	b480      	push	{r7}
 801423e:	b083      	sub	sp, #12
 8014240:	af00      	add	r7, sp, #0
 8014242:	4603      	mov	r3, r0
 8014244:	6039      	str	r1, [r7, #0]
 8014246:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d101      	bne.n	8014252 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801424e:	2309      	movs	r3, #9
 8014250:	e03b      	b.n	80142ca <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8014252:	79fb      	ldrb	r3, [r7, #7]
 8014254:	3b01      	subs	r3, #1
 8014256:	2b03      	cmp	r3, #3
 8014258:	d834      	bhi.n	80142c4 <GetLastFcntDown+0x88>
 801425a:	a201      	add	r2, pc, #4	; (adr r2, 8014260 <GetLastFcntDown+0x24>)
 801425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014260:	08014271 	.word	0x08014271
 8014264:	08014289 	.word	0x08014289
 8014268:	080142a1 	.word	0x080142a1
 801426c:	080142b9 	.word	0x080142b9
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8014270:	4b18      	ldr	r3, [pc, #96]	; (80142d4 <GetLastFcntDown+0x98>)
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	691a      	ldr	r2, [r3, #16]
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801427a:	4b16      	ldr	r3, [pc, #88]	; (80142d4 <GetLastFcntDown+0x98>)
 801427c:	681a      	ldr	r2, [r3, #0]
 801427e:	4b15      	ldr	r3, [pc, #84]	; (80142d4 <GetLastFcntDown+0x98>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	6912      	ldr	r2, [r2, #16]
 8014284:	621a      	str	r2, [r3, #32]
            break;
 8014286:	e01f      	b.n	80142c8 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8014288:	4b12      	ldr	r3, [pc, #72]	; (80142d4 <GetLastFcntDown+0x98>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	695a      	ldr	r2, [r3, #20]
 801428e:	683b      	ldr	r3, [r7, #0]
 8014290:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8014292:	4b10      	ldr	r3, [pc, #64]	; (80142d4 <GetLastFcntDown+0x98>)
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	4b0f      	ldr	r3, [pc, #60]	; (80142d4 <GetLastFcntDown+0x98>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	6952      	ldr	r2, [r2, #20]
 801429c:	621a      	str	r2, [r3, #32]
            break;
 801429e:	e013      	b.n	80142c8 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80142a0:	4b0c      	ldr	r3, [pc, #48]	; (80142d4 <GetLastFcntDown+0x98>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	699a      	ldr	r2, [r3, #24]
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80142aa:	4b0a      	ldr	r3, [pc, #40]	; (80142d4 <GetLastFcntDown+0x98>)
 80142ac:	681a      	ldr	r2, [r3, #0]
 80142ae:	4b09      	ldr	r3, [pc, #36]	; (80142d4 <GetLastFcntDown+0x98>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	6992      	ldr	r2, [r2, #24]
 80142b4:	621a      	str	r2, [r3, #32]
            break;
 80142b6:	e007      	b.n	80142c8 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80142b8:	4b06      	ldr	r3, [pc, #24]	; (80142d4 <GetLastFcntDown+0x98>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	69da      	ldr	r2, [r3, #28]
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	601a      	str	r2, [r3, #0]
            break;
 80142c2:	e001      	b.n	80142c8 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80142c4:	2305      	movs	r3, #5
 80142c6:	e000      	b.n	80142ca <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80142c8:	2300      	movs	r3, #0
}
 80142ca:	4618      	mov	r0, r3
 80142cc:	370c      	adds	r7, #12
 80142ce:	46bd      	mov	sp, r7
 80142d0:	bc80      	pop	{r7}
 80142d2:	4770      	bx	lr
 80142d4:	20001a98 	.word	0x20001a98

080142d8 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b084      	sub	sp, #16
 80142dc:	af00      	add	r7, sp, #0
 80142de:	4603      	mov	r3, r0
 80142e0:	6039      	str	r1, [r7, #0]
 80142e2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80142e4:	2300      	movs	r3, #0
 80142e6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80142e8:	f107 020c 	add.w	r2, r7, #12
 80142ec:	79fb      	ldrb	r3, [r7, #7]
 80142ee:	4611      	mov	r1, r2
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7ff ffa3 	bl	801423c <GetLastFcntDown>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d001      	beq.n	8014300 <CheckFCntDown+0x28>
    {
        return false;
 80142fc:	2300      	movs	r3, #0
 80142fe:	e00a      	b.n	8014316 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	683a      	ldr	r2, [r7, #0]
 8014304:	429a      	cmp	r2, r3
 8014306:	d803      	bhi.n	8014310 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014308:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801430e:	d101      	bne.n	8014314 <CheckFCntDown+0x3c>
    {
        return true;
 8014310:	2301      	movs	r3, #1
 8014312:	e000      	b.n	8014316 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014314:	2300      	movs	r3, #0
    }
}
 8014316:	4618      	mov	r0, r3
 8014318:	3710      	adds	r7, #16
 801431a:	46bd      	mov	sp, r7
 801431c:	bd80      	pop	{r7, pc}
	...

08014320 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014320:	b480      	push	{r7}
 8014322:	b083      	sub	sp, #12
 8014324:	af00      	add	r7, sp, #0
 8014326:	4603      	mov	r3, r0
 8014328:	6039      	str	r1, [r7, #0]
 801432a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801432c:	79fb      	ldrb	r3, [r7, #7]
 801432e:	3b01      	subs	r3, #1
 8014330:	2b03      	cmp	r3, #3
 8014332:	d81f      	bhi.n	8014374 <UpdateFCntDown+0x54>
 8014334:	a201      	add	r2, pc, #4	; (adr r2, 801433c <UpdateFCntDown+0x1c>)
 8014336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801433a:	bf00      	nop
 801433c:	0801434d 	.word	0x0801434d
 8014340:	08014357 	.word	0x08014357
 8014344:	08014361 	.word	0x08014361
 8014348:	0801436b 	.word	0x0801436b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801434c:	4b0c      	ldr	r3, [pc, #48]	; (8014380 <UpdateFCntDown+0x60>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	683a      	ldr	r2, [r7, #0]
 8014352:	611a      	str	r2, [r3, #16]
            break;
 8014354:	e00f      	b.n	8014376 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014356:	4b0a      	ldr	r3, [pc, #40]	; (8014380 <UpdateFCntDown+0x60>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	683a      	ldr	r2, [r7, #0]
 801435c:	615a      	str	r2, [r3, #20]
            break;
 801435e:	e00a      	b.n	8014376 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8014360:	4b07      	ldr	r3, [pc, #28]	; (8014380 <UpdateFCntDown+0x60>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	683a      	ldr	r2, [r7, #0]
 8014366:	619a      	str	r2, [r3, #24]
            break;
 8014368:	e005      	b.n	8014376 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801436a:	4b05      	ldr	r3, [pc, #20]	; (8014380 <UpdateFCntDown+0x60>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	683a      	ldr	r2, [r7, #0]
 8014370:	61da      	str	r2, [r3, #28]
            break;
 8014372:	e000      	b.n	8014376 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014374:	bf00      	nop
    }
}
 8014376:	bf00      	nop
 8014378:	370c      	adds	r7, #12
 801437a:	46bd      	mov	sp, r7
 801437c:	bc80      	pop	{r7}
 801437e:	4770      	bx	lr
 8014380:	20001a98 	.word	0x20001a98

08014384 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014384:	b480      	push	{r7}
 8014386:	b083      	sub	sp, #12
 8014388:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801438a:	4b18      	ldr	r3, [pc, #96]	; (80143ec <ResetFCnts+0x68>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	2200      	movs	r2, #0
 8014390:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014392:	4b16      	ldr	r3, [pc, #88]	; (80143ec <ResetFCnts+0x68>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	f04f 32ff 	mov.w	r2, #4294967295
 801439a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801439c:	4b13      	ldr	r3, [pc, #76]	; (80143ec <ResetFCnts+0x68>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	f04f 32ff 	mov.w	r2, #4294967295
 80143a4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80143a6:	4b11      	ldr	r3, [pc, #68]	; (80143ec <ResetFCnts+0x68>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	f04f 32ff 	mov.w	r2, #4294967295
 80143ae:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80143b0:	4b0e      	ldr	r3, [pc, #56]	; (80143ec <ResetFCnts+0x68>)
 80143b2:	681a      	ldr	r2, [r3, #0]
 80143b4:	4b0d      	ldr	r3, [pc, #52]	; (80143ec <ResetFCnts+0x68>)
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	6992      	ldr	r2, [r2, #24]
 80143ba:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80143bc:	2300      	movs	r3, #0
 80143be:	607b      	str	r3, [r7, #4]
 80143c0:	e00b      	b.n	80143da <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80143c2:	4b0a      	ldr	r3, [pc, #40]	; (80143ec <ResetFCnts+0x68>)
 80143c4:	681a      	ldr	r2, [r3, #0]
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	3306      	adds	r3, #6
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	4413      	add	r3, r2
 80143ce:	f04f 32ff 	mov.w	r2, #4294967295
 80143d2:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	3301      	adds	r3, #1
 80143d8:	607b      	str	r3, [r7, #4]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	ddf0      	ble.n	80143c2 <ResetFCnts+0x3e>
    }
}
 80143e0:	bf00      	nop
 80143e2:	bf00      	nop
 80143e4:	370c      	adds	r7, #12
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bc80      	pop	{r7}
 80143ea:	4770      	bx	lr
 80143ec:	20001a98 	.word	0x20001a98

080143f0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d101      	bne.n	8014402 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80143fe:	2308      	movs	r3, #8
 8014400:	e01c      	b.n	801443c <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8014402:	4a10      	ldr	r2, [pc, #64]	; (8014444 <LoRaMacCryptoInit+0x54>)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014408:	4b0e      	ldr	r3, [pc, #56]	; (8014444 <LoRaMacCryptoInit+0x54>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2228      	movs	r2, #40	; 0x28
 801440e:	2100      	movs	r1, #0
 8014410:	4618      	mov	r0, r3
 8014412:	f004 fcdd 	bl	8018dd0 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014416:	4b0b      	ldr	r3, [pc, #44]	; (8014444 <LoRaMacCryptoInit+0x54>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2201      	movs	r2, #1
 801441c:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801441e:	4b09      	ldr	r3, [pc, #36]	; (8014444 <LoRaMacCryptoInit+0x54>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	2201      	movs	r2, #1
 8014424:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014426:	4b07      	ldr	r3, [pc, #28]	; (8014444 <LoRaMacCryptoInit+0x54>)
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2201      	movs	r2, #1
 801442c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801442e:	4b05      	ldr	r3, [pc, #20]	; (8014444 <LoRaMacCryptoInit+0x54>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	2200      	movs	r2, #0
 8014434:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014436:	f7ff ffa5 	bl	8014384 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 801443a:	2300      	movs	r3, #0
}
 801443c:	4618      	mov	r0, r3
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	20001a98 	.word	0x20001a98

08014448 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014448:	b480      	push	{r7}
 801444a:	b083      	sub	sp, #12
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8014450:	4b04      	ldr	r3, [pc, #16]	; (8014464 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	687a      	ldr	r2, [r7, #4]
 8014456:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	370c      	adds	r7, #12
 801445e:	46bd      	mov	sp, r7
 8014460:	bc80      	pop	{r7}
 8014462:	4770      	bx	lr
 8014464:	20001a98 	.word	0x20001a98

08014468 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014468:	b480      	push	{r7}
 801446a:	b083      	sub	sp, #12
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d101      	bne.n	801447a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014476:	2309      	movs	r3, #9
 8014478:	e006      	b.n	8014488 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801447a:	4b06      	ldr	r3, [pc, #24]	; (8014494 <LoRaMacCryptoGetFCntUp+0x2c>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	68db      	ldr	r3, [r3, #12]
 8014480:	1c5a      	adds	r2, r3, #1
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8014486:	2300      	movs	r3, #0
}
 8014488:	4618      	mov	r0, r3
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	bc80      	pop	{r7}
 8014490:	4770      	bx	lr
 8014492:	bf00      	nop
 8014494:	20001a98 	.word	0x20001a98

08014498 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af00      	add	r7, sp, #0
 801449e:	4603      	mov	r3, r0
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
 80144a4:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80144a6:	2300      	movs	r3, #0
 80144a8:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80144aa:	2300      	movs	r3, #0
 80144ac:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80144ae:	2312      	movs	r3, #18
 80144b0:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d101      	bne.n	80144bc <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80144b8:	2309      	movs	r3, #9
 80144ba:	e035      	b.n	8014528 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80144bc:	f107 0214 	add.w	r2, r7, #20
 80144c0:	7bfb      	ldrb	r3, [r7, #15]
 80144c2:	4611      	mov	r1, r2
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7ff feb9 	bl	801423c <GetLastFcntDown>
 80144ca:	4603      	mov	r3, r0
 80144cc:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80144ce:	7efb      	ldrb	r3, [r7, #27]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d001      	beq.n	80144d8 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80144d4:	7efb      	ldrb	r3, [r7, #27]
 80144d6:	e027      	b.n	8014528 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144de:	d103      	bne.n	80144e8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	68ba      	ldr	r2, [r7, #8]
 80144e4:	601a      	str	r2, [r3, #0]
 80144e6:	e01e      	b.n	8014526 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	68ba      	ldr	r2, [r7, #8]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	dd05      	ble.n	8014504 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80144f8:	697a      	ldr	r2, [r7, #20]
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	441a      	add	r2, r3
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	601a      	str	r2, [r3, #0]
 8014502:	e010      	b.n	8014526 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d104      	bne.n	8014514 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 801450a:	697a      	ldr	r2, [r7, #20]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014510:	2307      	movs	r3, #7
 8014512:	e009      	b.n	8014528 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	0c1b      	lsrs	r3, r3, #16
 8014518:	041b      	lsls	r3, r3, #16
 801451a:	68ba      	ldr	r2, [r7, #8]
 801451c:	4413      	add	r3, r2
 801451e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3720      	adds	r7, #32
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014530:	b480      	push	{r7}
 8014532:	b085      	sub	sp, #20
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d101      	bne.n	8014542 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801453e:	2309      	movs	r3, #9
 8014540:	e017      	b.n	8014572 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014542:	2300      	movs	r3, #0
 8014544:	60fb      	str	r3, [r7, #12]
 8014546:	e010      	b.n	801456a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014548:	4b0c      	ldr	r3, [pc, #48]	; (801457c <LoRaMacCryptoSetMulticastReference+0x4c>)
 801454a:	6819      	ldr	r1, [r3, #0]
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	222c      	movs	r2, #44	; 0x2c
 8014550:	fb02 f303 	mul.w	r3, r2, r3
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	4413      	add	r3, r2
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	3206      	adds	r2, #6
 801455c:	0092      	lsls	r2, r2, #2
 801455e:	440a      	add	r2, r1
 8014560:	3204      	adds	r2, #4
 8014562:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	3301      	adds	r3, #1
 8014568:	60fb      	str	r3, [r7, #12]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	2b00      	cmp	r3, #0
 801456e:	ddeb      	ble.n	8014548 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014570:	2300      	movs	r3, #0
}
 8014572:	4618      	mov	r0, r3
 8014574:	3714      	adds	r7, #20
 8014576:	46bd      	mov	sp, r7
 8014578:	bc80      	pop	{r7}
 801457a:	4770      	bx	lr
 801457c:	20001a98 	.word	0x20001a98

08014580 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	6039      	str	r1, [r7, #0]
 801458a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 801458c:	79fb      	ldrb	r3, [r7, #7]
 801458e:	6839      	ldr	r1, [r7, #0]
 8014590:	4618      	mov	r0, r3
 8014592:	f7f8 f8a7 	bl	800c6e4 <SecureElementSetKey>
 8014596:	4603      	mov	r3, r0
 8014598:	2b00      	cmp	r3, #0
 801459a:	d001      	beq.n	80145a0 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801459c:	230e      	movs	r3, #14
 801459e:	e018      	b.n	80145d2 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 80145a0:	79fb      	ldrb	r3, [r7, #7]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d114      	bne.n	80145d0 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80145a6:	4b0d      	ldr	r3, [pc, #52]	; (80145dc <LoRaMacCryptoSetKey+0x5c>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	789b      	ldrb	r3, [r3, #2]
 80145ac:	79fa      	ldrb	r2, [r7, #7]
 80145ae:	4611      	mov	r1, r2
 80145b0:	4618      	mov	r0, r3
 80145b2:	f000 fa39 	bl	8014a28 <LoRaMacCryptoDeriveMcRootKey>
 80145b6:	4603      	mov	r3, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d001      	beq.n	80145c0 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80145bc:	230e      	movs	r3, #14
 80145be:	e008      	b.n	80145d2 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80145c0:	2004      	movs	r0, #4
 80145c2:	f000 fa5c 	bl	8014a7e <LoRaMacCryptoDeriveMcKEKey>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d001      	beq.n	80145d0 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80145cc:	230e      	movs	r3, #14
 80145ce:	e000      	b.n	80145d2 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80145d0:	2300      	movs	r3, #0
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	3708      	adds	r7, #8
 80145d6:	46bd      	mov	sp, r7
 80145d8:	bd80      	pop	{r7, pc}
 80145da:	bf00      	nop
 80145dc:	20001a98 	.word	0x20001a98

080145e0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b086      	sub	sp, #24
 80145e4:	af02      	add	r7, sp, #8
 80145e6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d101      	bne.n	80145f2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145ee:	2309      	movs	r3, #9
 80145f0:	e02d      	b.n	801464e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80145f2:	2301      	movs	r3, #1
 80145f4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80145f6:	4b18      	ldr	r3, [pc, #96]	; (8014658 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	889a      	ldrh	r2, [r3, #4]
 80145fc:	3201      	adds	r2, #1
 80145fe:	b292      	uxth	r2, r2
 8014600:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014602:	4b15      	ldr	r3, [pc, #84]	; (8014658 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	889a      	ldrh	r2, [r3, #4]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801460c:	6878      	ldr	r0, [r7, #4]
 801460e:	f000 fc18 	bl	8014e42 <LoRaMacSerializerJoinRequest>
 8014612:	4603      	mov	r3, r0
 8014614:	2b00      	cmp	r3, #0
 8014616:	d001      	beq.n	801461c <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014618:	2310      	movs	r3, #16
 801461a:	e018      	b.n	801464e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6819      	ldr	r1, [r3, #0]
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	3318      	adds	r3, #24
 8014624:	7bfa      	ldrb	r2, [r7, #15]
 8014626:	9300      	str	r3, [sp, #0]
 8014628:	4613      	mov	r3, r2
 801462a:	2213      	movs	r2, #19
 801462c:	2000      	movs	r0, #0
 801462e:	f7f8 f8b7 	bl	800c7a0 <SecureElementComputeAesCmac>
 8014632:	4603      	mov	r3, r0
 8014634:	2b00      	cmp	r3, #0
 8014636:	d001      	beq.n	801463c <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014638:	230e      	movs	r3, #14
 801463a:	e008      	b.n	801464e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 fc00 	bl	8014e42 <LoRaMacSerializerJoinRequest>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	d001      	beq.n	801464c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014648:	2310      	movs	r3, #16
 801464a:	e000      	b.n	801464e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	20001a98 	.word	0x20001a98

0801465c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 801465c:	b590      	push	{r4, r7, lr}
 801465e:	b097      	sub	sp, #92	; 0x5c
 8014660:	af04      	add	r7, sp, #16
 8014662:	4603      	mov	r3, r0
 8014664:	60b9      	str	r1, [r7, #8]
 8014666:	607a      	str	r2, [r7, #4]
 8014668:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2b00      	cmp	r3, #0
 801466e:	d002      	beq.n	8014676 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d101      	bne.n	801467a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014676:	2309      	movs	r3, #9
 8014678:	e0bd      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801467a:	2312      	movs	r3, #18
 801467c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014680:	2300      	movs	r3, #0
 8014682:	61bb      	str	r3, [r7, #24]
 8014684:	f107 031c 	add.w	r3, r7, #28
 8014688:	221d      	movs	r2, #29
 801468a:	2100      	movs	r1, #0
 801468c:	4618      	mov	r0, r3
 801468e:	f009 f81d 	bl	801d6cc <memset>
    uint8_t versionMinor         = 0;
 8014692:	2300      	movs	r3, #0
 8014694:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014696:	4b5a      	ldr	r3, [pc, #360]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	889b      	ldrh	r3, [r3, #4]
 801469c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681c      	ldr	r4, [r3, #0]
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	791b      	ldrb	r3, [r3, #4]
 80146a8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80146ac:	7bf8      	ldrb	r0, [r7, #15]
 80146ae:	f107 0217 	add.w	r2, r7, #23
 80146b2:	9202      	str	r2, [sp, #8]
 80146b4:	f107 0218 	add.w	r2, r7, #24
 80146b8:	9201      	str	r2, [sp, #4]
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	4623      	mov	r3, r4
 80146be:	460a      	mov	r2, r1
 80146c0:	68b9      	ldr	r1, [r7, #8]
 80146c2:	f7f8 f961 	bl	800c988 <SecureElementProcessJoinAccept>
 80146c6:	4603      	mov	r3, r0
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d001      	beq.n	80146d0 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80146cc:	230e      	movs	r3, #14
 80146ce:	e092      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6818      	ldr	r0, [r3, #0]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	791b      	ldrb	r3, [r3, #4]
 80146d8:	b29a      	uxth	r2, r3
 80146da:	f107 0318 	add.w	r3, r7, #24
 80146de:	4619      	mov	r1, r3
 80146e0:	f004 fb3b 	bl	8018d5a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 f9ed 	bl	8014ac4 <LoRaMacParserJoinAccept>
 80146ea:	4603      	mov	r3, r0
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d001      	beq.n	80146f4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80146f0:	230f      	movs	r3, #15
 80146f2:	e080      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	799b      	ldrb	r3, [r3, #6]
 80146f8:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	79db      	ldrb	r3, [r3, #7]
 80146fe:	021b      	lsls	r3, r3, #8
 8014700:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014702:	4313      	orrs	r3, r2
 8014704:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	7a1b      	ldrb	r3, [r3, #8]
 801470a:	041b      	lsls	r3, r3, #16
 801470c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801470e:	4313      	orrs	r3, r2
 8014710:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014712:	4b3b      	ldr	r3, [pc, #236]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	689b      	ldr	r3, [r3, #8]
 8014718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801471a:	429a      	cmp	r2, r3
 801471c:	d010      	beq.n	8014740 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801471e:	4b38      	ldr	r3, [pc, #224]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014724:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8014726:	7dfb      	ldrb	r3, [r7, #23]
 8014728:	2100      	movs	r1, #0
 801472a:	4618      	mov	r0, r3
 801472c:	f000 f97c 	bl	8014a28 <LoRaMacCryptoDeriveMcRootKey>
 8014730:	4603      	mov	r3, r0
 8014732:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014736:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801473a:	2b00      	cmp	r3, #0
 801473c:	d005      	beq.n	801474a <LoRaMacCryptoHandleJoinAccept+0xee>
 801473e:	e001      	b.n	8014744 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014740:	2303      	movs	r3, #3
 8014742:	e058      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8014744:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014748:	e055      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 801474a:	2004      	movs	r0, #4
 801474c:	f000 f997 	bl	8014a7e <LoRaMacCryptoDeriveMcKEKey>
 8014750:	4603      	mov	r3, r0
 8014752:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014756:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801475a:	2b00      	cmp	r3, #0
 801475c:	d002      	beq.n	8014764 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 801475e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014762:	e048      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	7a5b      	ldrb	r3, [r3, #9]
 8014768:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	7a9b      	ldrb	r3, [r3, #10]
 801476e:	021b      	lsls	r3, r3, #8
 8014770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014772:	4313      	orrs	r3, r2
 8014774:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	7adb      	ldrb	r3, [r3, #11]
 801477a:	041b      	lsls	r3, r3, #16
 801477c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801477e:	4313      	orrs	r3, r2
 8014780:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014782:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014786:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014788:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801478a:	2003      	movs	r0, #3
 801478c:	f7ff fd06 	bl	801419c <DeriveSessionKey10x>
 8014790:	4603      	mov	r3, r0
 8014792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014796:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801479a:	2b00      	cmp	r3, #0
 801479c:	d002      	beq.n	80147a4 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 801479e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80147a2:	e028      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80147a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80147a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80147ac:	2002      	movs	r0, #2
 80147ae:	f7ff fcf5 	bl	801419c <DeriveSessionKey10x>
 80147b2:	4603      	mov	r3, r0
 80147b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80147b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d002      	beq.n	80147c6 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 80147c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80147c4:	e017      	b.n	80147f6 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80147c6:	4b0e      	ldr	r3, [pc, #56]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	7dfa      	ldrb	r2, [r7, #23]
 80147cc:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 80147ce:	4b0c      	ldr	r3, [pc, #48]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2200      	movs	r2, #0
 80147d4:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80147d6:	4b0a      	ldr	r3, [pc, #40]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	f04f 32ff 	mov.w	r2, #4294967295
 80147de:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80147e0:	4b07      	ldr	r3, [pc, #28]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	f04f 32ff 	mov.w	r2, #4294967295
 80147e8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80147ea:	4b05      	ldr	r3, [pc, #20]	; (8014800 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	f04f 32ff 	mov.w	r2, #4294967295
 80147f2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	374c      	adds	r7, #76	; 0x4c
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd90      	pop	{r4, r7, pc}
 80147fe:	bf00      	nop
 8014800:	20001a98 	.word	0x20001a98

08014804 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014804:	b590      	push	{r4, r7, lr}
 8014806:	b08b      	sub	sp, #44	; 0x2c
 8014808:	af04      	add	r7, sp, #16
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	607b      	str	r3, [r7, #4]
 801480e:	460b      	mov	r3, r1
 8014810:	72fb      	strb	r3, [r7, #11]
 8014812:	4613      	mov	r3, r2
 8014814:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014816:	2312      	movs	r3, #18
 8014818:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801481a:	2303      	movs	r3, #3
 801481c:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d101      	bne.n	8014828 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014824:	2309      	movs	r3, #9
 8014826:	e05f      	b.n	80148e8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014828:	4b31      	ldr	r3, [pc, #196]	; (80148f0 <LoRaMacCryptoSecureMessage+0xec>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	68db      	ldr	r3, [r3, #12]
 801482e:	68fa      	ldr	r2, [r7, #12]
 8014830:	429a      	cmp	r2, r3
 8014832:	d201      	bcs.n	8014838 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014834:	2306      	movs	r3, #6
 8014836:	e057      	b.n	80148e8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d101      	bne.n	8014846 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014842:	2302      	movs	r3, #2
 8014844:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014846:	4b2a      	ldr	r3, [pc, #168]	; (80148f0 <LoRaMacCryptoSecureMessage+0xec>)
 8014848:	681b      	ldr	r3, [r3, #0]
 801484a:	68db      	ldr	r3, [r3, #12]
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	429a      	cmp	r2, r3
 8014850:	d916      	bls.n	8014880 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801485c:	b219      	sxth	r1, r3
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	689c      	ldr	r4, [r3, #8]
 8014862:	7dfa      	ldrb	r2, [r7, #23]
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	9301      	str	r3, [sp, #4]
 8014868:	2300      	movs	r3, #0
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	4623      	mov	r3, r4
 801486e:	f7ff faa1 	bl	8013db4 <PayloadEncrypt>
 8014872:	4603      	mov	r3, r0
 8014874:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014876:	7dbb      	ldrb	r3, [r7, #22]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d001      	beq.n	8014880 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 801487c:	7dbb      	ldrb	r3, [r7, #22]
 801487e:	e033      	b.n	80148e8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014880:	6878      	ldr	r0, [r7, #4]
 8014882:	f000 fb60 	bl	8014f46 <LoRaMacSerializerData>
 8014886:	4603      	mov	r3, r0
 8014888:	2b00      	cmp	r3, #0
 801488a:	d001      	beq.n	8014890 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801488c:	2310      	movs	r3, #16
 801488e:	e02b      	b.n	80148e8 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014890:	2302      	movs	r3, #2
 8014892:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	6818      	ldr	r0, [r3, #0]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	791b      	ldrb	r3, [r3, #4]
 801489c:	b29b      	uxth	r3, r3
 801489e:	3b04      	subs	r3, #4
 80148a0:	b299      	uxth	r1, r3
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	689b      	ldr	r3, [r3, #8]
 80148a6:	687a      	ldr	r2, [r7, #4]
 80148a8:	322c      	adds	r2, #44	; 0x2c
 80148aa:	7dfc      	ldrb	r4, [r7, #23]
 80148ac:	9203      	str	r2, [sp, #12]
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	9202      	str	r2, [sp, #8]
 80148b2:	9301      	str	r3, [sp, #4]
 80148b4:	2300      	movs	r3, #0
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	2300      	movs	r3, #0
 80148ba:	4622      	mov	r2, r4
 80148bc:	f7ff fb7b 	bl	8013fb6 <ComputeCmacB0>
 80148c0:	4603      	mov	r3, r0
 80148c2:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80148c4:	7dbb      	ldrb	r3, [r7, #22]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d001      	beq.n	80148ce <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 80148ca:	7dbb      	ldrb	r3, [r7, #22]
 80148cc:	e00c      	b.n	80148e8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f000 fb39 	bl	8014f46 <LoRaMacSerializerData>
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d001      	beq.n	80148de <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80148da:	2310      	movs	r3, #16
 80148dc:	e004      	b.n	80148e8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 80148de:	4b04      	ldr	r3, [pc, #16]	; (80148f0 <LoRaMacCryptoSecureMessage+0xec>)
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68fa      	ldr	r2, [r7, #12]
 80148e4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 80148e6:	2300      	movs	r3, #0
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	371c      	adds	r7, #28
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd90      	pop	{r4, r7, pc}
 80148f0:	20001a98 	.word	0x20001a98

080148f4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 80148f4:	b590      	push	{r4, r7, lr}
 80148f6:	b08b      	sub	sp, #44	; 0x2c
 80148f8:	af04      	add	r7, sp, #16
 80148fa:	60b9      	str	r1, [r7, #8]
 80148fc:	607b      	str	r3, [r7, #4]
 80148fe:	4603      	mov	r3, r0
 8014900:	73fb      	strb	r3, [r7, #15]
 8014902:	4613      	mov	r3, r2
 8014904:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014908:	2b00      	cmp	r3, #0
 801490a:	d101      	bne.n	8014910 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801490c:	2309      	movs	r3, #9
 801490e:	e084      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014910:	7bbb      	ldrb	r3, [r7, #14]
 8014912:	6879      	ldr	r1, [r7, #4]
 8014914:	4618      	mov	r0, r3
 8014916:	f7ff fcdf 	bl	80142d8 <CheckFCntDown>
 801491a:	4603      	mov	r3, r0
 801491c:	f083 0301 	eor.w	r3, r3, #1
 8014920:	b2db      	uxtb	r3, r3
 8014922:	2b00      	cmp	r3, #0
 8014924:	d001      	beq.n	801492a <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014926:	2306      	movs	r3, #6
 8014928:	e077      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 801492a:	2312      	movs	r3, #18
 801492c:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801492e:	2303      	movs	r3, #3
 8014930:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014932:	2302      	movs	r3, #2
 8014934:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014938:	f000 f98f 	bl	8014c5a <LoRaMacParserData>
 801493c:	4603      	mov	r3, r0
 801493e:	2b00      	cmp	r3, #0
 8014940:	d001      	beq.n	8014946 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014942:	230f      	movs	r3, #15
 8014944:	e069      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014946:	f107 0210 	add.w	r2, r7, #16
 801494a:	7bfb      	ldrb	r3, [r7, #15]
 801494c:	4611      	mov	r1, r2
 801494e:	4618      	mov	r0, r3
 8014950:	f7ff fbfe 	bl	8014150 <GetKeyAddrItem>
 8014954:	4603      	mov	r3, r0
 8014956:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014958:	7d7b      	ldrb	r3, [r7, #21]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d001      	beq.n	8014962 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801495e:	7d7b      	ldrb	r3, [r7, #21]
 8014960:	e05b      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014962:	693b      	ldr	r3, [r7, #16]
 8014964:	785b      	ldrb	r3, [r3, #1]
 8014966:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	789b      	ldrb	r3, [r3, #2]
 801496c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014970:	689b      	ldr	r3, [r3, #8]
 8014972:	68ba      	ldr	r2, [r7, #8]
 8014974:	429a      	cmp	r2, r3
 8014976:	d001      	beq.n	801497c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014978:	2302      	movs	r3, #2
 801497a:	e04e      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 801497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801497e:	7b1b      	ldrb	r3, [r3, #12]
 8014980:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014984:	b2db      	uxtb	r3, r3
 8014986:	2b00      	cmp	r3, #0
 8014988:	bf14      	ite	ne
 801498a:	2301      	movne	r3, #1
 801498c:	2300      	moveq	r3, #0
 801498e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014990:	4b24      	ldr	r3, [pc, #144]	; (8014a24 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	789b      	ldrb	r3, [r3, #2]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801499a:	2300      	movs	r3, #0
 801499c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801499e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a0:	6818      	ldr	r0, [r3, #0]
 80149a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a4:	791b      	ldrb	r3, [r3, #4]
 80149a6:	b29b      	uxth	r3, r3
 80149a8:	3b04      	subs	r3, #4
 80149aa:	b299      	uxth	r1, r3
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b0:	7dbc      	ldrb	r4, [r7, #22]
 80149b2:	7d3a      	ldrb	r2, [r7, #20]
 80149b4:	9303      	str	r3, [sp, #12]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	9302      	str	r3, [sp, #8]
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	9301      	str	r3, [sp, #4]
 80149be:	2301      	movs	r3, #1
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	4623      	mov	r3, r4
 80149c4:	f7ff fb35 	bl	8014032 <VerifyCmacB0>
 80149c8:	4603      	mov	r3, r0
 80149ca:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80149cc:	7d7b      	ldrb	r3, [r7, #21]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 80149d2:	7d7b      	ldrb	r3, [r7, #21]
 80149d4:	e021      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 80149d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d101      	bne.n	80149e4 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 80149e0:	2302      	movs	r3, #2
 80149e2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 80149e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149ee:	b219      	sxth	r1, r3
 80149f0:	7dfa      	ldrb	r2, [r7, #23]
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	9301      	str	r3, [sp, #4]
 80149f6:	2301      	movs	r3, #1
 80149f8:	9300      	str	r3, [sp, #0]
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	f7ff f9da 	bl	8013db4 <PayloadEncrypt>
 8014a00:	4603      	mov	r3, r0
 8014a02:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014a04:	7d7b      	ldrb	r3, [r7, #21]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d001      	beq.n	8014a0e <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014a0a:	7d7b      	ldrb	r3, [r7, #21]
 8014a0c:	e005      	b.n	8014a1a <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014a0e:	7bbb      	ldrb	r3, [r7, #14]
 8014a10:	6879      	ldr	r1, [r7, #4]
 8014a12:	4618      	mov	r0, r3
 8014a14:	f7ff fc84 	bl	8014320 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014a18:	2300      	movs	r3, #0
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	371c      	adds	r7, #28
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd90      	pop	{r4, r7, pc}
 8014a22:	bf00      	nop
 8014a24:	20001a98 	.word	0x20001a98

08014a28 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b086      	sub	sp, #24
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	4603      	mov	r3, r0
 8014a30:	460a      	mov	r2, r1
 8014a32:	71fb      	strb	r3, [r7, #7]
 8014a34:	4613      	mov	r3, r2
 8014a36:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014a38:	79bb      	ldrb	r3, [r7, #6]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d001      	beq.n	8014a42 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014a3e:	230a      	movs	r3, #10
 8014a40:	e019      	b.n	8014a76 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014a42:	2300      	movs	r3, #0
 8014a44:	60bb      	str	r3, [r7, #8]
 8014a46:	f107 030c 	add.w	r3, r7, #12
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	601a      	str	r2, [r3, #0]
 8014a4e:	605a      	str	r2, [r3, #4]
 8014a50:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014a52:	79fb      	ldrb	r3, [r7, #7]
 8014a54:	2b01      	cmp	r3, #1
 8014a56:	d101      	bne.n	8014a5c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014a58:	2320      	movs	r3, #32
 8014a5a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014a5c:	79b9      	ldrb	r1, [r7, #6]
 8014a5e:	f107 0308 	add.w	r3, r7, #8
 8014a62:	2204      	movs	r2, #4
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f7 ff4f 	bl	800c908 <SecureElementDeriveAndStoreKey>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d001      	beq.n	8014a74 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014a70:	230e      	movs	r3, #14
 8014a72:	e000      	b.n	8014a76 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a74:	2300      	movs	r3, #0
}
 8014a76:	4618      	mov	r0, r3
 8014a78:	3718      	adds	r7, #24
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd80      	pop	{r7, pc}

08014a7e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014a7e:	b580      	push	{r7, lr}
 8014a80:	b086      	sub	sp, #24
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	4603      	mov	r3, r0
 8014a86:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014a88:	79fb      	ldrb	r3, [r7, #7]
 8014a8a:	2b04      	cmp	r3, #4
 8014a8c:	d001      	beq.n	8014a92 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014a8e:	230a      	movs	r3, #10
 8014a90:	e014      	b.n	8014abc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014a92:	2300      	movs	r3, #0
 8014a94:	60bb      	str	r3, [r7, #8]
 8014a96:	f107 030c 	add.w	r3, r7, #12
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	601a      	str	r2, [r3, #0]
 8014a9e:	605a      	str	r2, [r3, #4]
 8014aa0:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014aa2:	79f9      	ldrb	r1, [r7, #7]
 8014aa4:	f107 0308 	add.w	r3, r7, #8
 8014aa8:	227f      	movs	r2, #127	; 0x7f
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7f7 ff2c 	bl	800c908 <SecureElementDeriveAndStoreKey>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d001      	beq.n	8014aba <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ab6:	230e      	movs	r3, #14
 8014ab8:	e000      	b.n	8014abc <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014aba:	2300      	movs	r3, #0
}
 8014abc:	4618      	mov	r0, r3
 8014abe:	3718      	adds	r7, #24
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}

08014ac4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d003      	beq.n	8014ada <LoRaMacParserJoinAccept+0x16>
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d101      	bne.n	8014ade <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014ada:	2302      	movs	r3, #2
 8014adc:	e0b9      	b.n	8014c52 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681a      	ldr	r2, [r3, #0]
 8014ae6:	89fb      	ldrh	r3, [r7, #14]
 8014ae8:	1c59      	adds	r1, r3, #1
 8014aea:	81f9      	strh	r1, [r7, #14]
 8014aec:	4413      	add	r3, r2
 8014aee:	781a      	ldrb	r2, [r3, #0]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	1d98      	adds	r0, r3, #6
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	89fb      	ldrh	r3, [r7, #14]
 8014afe:	4413      	add	r3, r2
 8014b00:	2203      	movs	r2, #3
 8014b02:	4619      	mov	r1, r3
 8014b04:	f004 f929 	bl	8018d5a <memcpy1>
    bufItr = bufItr + 3;
 8014b08:	89fb      	ldrh	r3, [r7, #14]
 8014b0a:	3303      	adds	r3, #3
 8014b0c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f103 0009 	add.w	r0, r3, #9
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681a      	ldr	r2, [r3, #0]
 8014b18:	89fb      	ldrh	r3, [r7, #14]
 8014b1a:	4413      	add	r3, r2
 8014b1c:	2203      	movs	r2, #3
 8014b1e:	4619      	mov	r1, r3
 8014b20:	f004 f91b 	bl	8018d5a <memcpy1>
    bufItr = bufItr + 3;
 8014b24:	89fb      	ldrh	r3, [r7, #14]
 8014b26:	3303      	adds	r3, #3
 8014b28:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	89fb      	ldrh	r3, [r7, #14]
 8014b30:	1c59      	adds	r1, r3, #1
 8014b32:	81f9      	strh	r1, [r7, #14]
 8014b34:	4413      	add	r3, r2
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	461a      	mov	r2, r3
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	89fb      	ldrh	r3, [r7, #14]
 8014b44:	1c59      	adds	r1, r3, #1
 8014b46:	81f9      	strh	r1, [r7, #14]
 8014b48:	4413      	add	r3, r2
 8014b4a:	781b      	ldrb	r3, [r3, #0]
 8014b4c:	021a      	lsls	r2, r3, #8
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	431a      	orrs	r2, r3
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	681a      	ldr	r2, [r3, #0]
 8014b5c:	89fb      	ldrh	r3, [r7, #14]
 8014b5e:	1c59      	adds	r1, r3, #1
 8014b60:	81f9      	strh	r1, [r7, #14]
 8014b62:	4413      	add	r3, r2
 8014b64:	781b      	ldrb	r3, [r3, #0]
 8014b66:	041a      	lsls	r2, r3, #16
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	431a      	orrs	r2, r3
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	681a      	ldr	r2, [r3, #0]
 8014b76:	89fb      	ldrh	r3, [r7, #14]
 8014b78:	1c59      	adds	r1, r3, #1
 8014b7a:	81f9      	strh	r1, [r7, #14]
 8014b7c:	4413      	add	r3, r2
 8014b7e:	781b      	ldrb	r3, [r3, #0]
 8014b80:	061a      	lsls	r2, r3, #24
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	68db      	ldr	r3, [r3, #12]
 8014b86:	431a      	orrs	r2, r3
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681a      	ldr	r2, [r3, #0]
 8014b90:	89fb      	ldrh	r3, [r7, #14]
 8014b92:	1c59      	adds	r1, r3, #1
 8014b94:	81f9      	strh	r1, [r7, #14]
 8014b96:	4413      	add	r3, r2
 8014b98:	781a      	ldrb	r2, [r3, #0]
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681a      	ldr	r2, [r3, #0]
 8014ba2:	89fb      	ldrh	r3, [r7, #14]
 8014ba4:	1c59      	adds	r1, r3, #1
 8014ba6:	81f9      	strh	r1, [r7, #14]
 8014ba8:	4413      	add	r3, r2
 8014baa:	781a      	ldrb	r2, [r3, #0]
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	791b      	ldrb	r3, [r3, #4]
 8014bb4:	1f1a      	subs	r2, r3, #4
 8014bb6:	89fb      	ldrh	r3, [r7, #14]
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	2b10      	cmp	r3, #16
 8014bbc:	d10e      	bne.n	8014bdc <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f103 0012 	add.w	r0, r3, #18
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	681a      	ldr	r2, [r3, #0]
 8014bc8:	89fb      	ldrh	r3, [r7, #14]
 8014bca:	4413      	add	r3, r2
 8014bcc:	2210      	movs	r2, #16
 8014bce:	4619      	mov	r1, r3
 8014bd0:	f004 f8c3 	bl	8018d5a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014bd4:	89fb      	ldrh	r3, [r7, #14]
 8014bd6:	3310      	adds	r3, #16
 8014bd8:	81fb      	strh	r3, [r7, #14]
 8014bda:	e008      	b.n	8014bee <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	791b      	ldrb	r3, [r3, #4]
 8014be0:	1f1a      	subs	r2, r3, #4
 8014be2:	89fb      	ldrh	r3, [r7, #14]
 8014be4:	1ad3      	subs	r3, r2, r3
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	dd01      	ble.n	8014bee <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8014bea:	2301      	movs	r3, #1
 8014bec:	e031      	b.n	8014c52 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681a      	ldr	r2, [r3, #0]
 8014bf2:	89fb      	ldrh	r3, [r7, #14]
 8014bf4:	1c59      	adds	r1, r3, #1
 8014bf6:	81f9      	strh	r1, [r7, #14]
 8014bf8:	4413      	add	r3, r2
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681a      	ldr	r2, [r3, #0]
 8014c06:	89fb      	ldrh	r3, [r7, #14]
 8014c08:	1c59      	adds	r1, r3, #1
 8014c0a:	81f9      	strh	r1, [r7, #14]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	021a      	lsls	r2, r3, #8
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c16:	431a      	orrs	r2, r3
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	89fb      	ldrh	r3, [r7, #14]
 8014c22:	1c59      	adds	r1, r3, #1
 8014c24:	81f9      	strh	r1, [r7, #14]
 8014c26:	4413      	add	r3, r2
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	041a      	lsls	r2, r3, #16
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c30:	431a      	orrs	r2, r3
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	681a      	ldr	r2, [r3, #0]
 8014c3a:	89fb      	ldrh	r3, [r7, #14]
 8014c3c:	1c59      	adds	r1, r3, #1
 8014c3e:	81f9      	strh	r1, [r7, #14]
 8014c40:	4413      	add	r3, r2
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	061a      	lsls	r2, r3, #24
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c4a:	431a      	orrs	r2, r3
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014c50:	2300      	movs	r3, #0
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3710      	adds	r7, #16
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b084      	sub	sp, #16
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d003      	beq.n	8014c70 <LoRaMacParserData+0x16>
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d101      	bne.n	8014c74 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014c70:	2302      	movs	r3, #2
 8014c72:	e0e2      	b.n	8014e3a <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014c74:	2300      	movs	r3, #0
 8014c76:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681a      	ldr	r2, [r3, #0]
 8014c7c:	89fb      	ldrh	r3, [r7, #14]
 8014c7e:	1c59      	adds	r1, r3, #1
 8014c80:	81f9      	strh	r1, [r7, #14]
 8014c82:	4413      	add	r3, r2
 8014c84:	781a      	ldrb	r2, [r3, #0]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	89fb      	ldrh	r3, [r7, #14]
 8014c90:	1c59      	adds	r1, r3, #1
 8014c92:	81f9      	strh	r1, [r7, #14]
 8014c94:	4413      	add	r3, r2
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	461a      	mov	r2, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	89fb      	ldrh	r3, [r7, #14]
 8014ca4:	1c59      	adds	r1, r3, #1
 8014ca6:	81f9      	strh	r1, [r7, #14]
 8014ca8:	4413      	add	r3, r2
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	021a      	lsls	r2, r3, #8
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	689b      	ldr	r3, [r3, #8]
 8014cb2:	431a      	orrs	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681a      	ldr	r2, [r3, #0]
 8014cbc:	89fb      	ldrh	r3, [r7, #14]
 8014cbe:	1c59      	adds	r1, r3, #1
 8014cc0:	81f9      	strh	r1, [r7, #14]
 8014cc2:	4413      	add	r3, r2
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	041a      	lsls	r2, r3, #16
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	689b      	ldr	r3, [r3, #8]
 8014ccc:	431a      	orrs	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681a      	ldr	r2, [r3, #0]
 8014cd6:	89fb      	ldrh	r3, [r7, #14]
 8014cd8:	1c59      	adds	r1, r3, #1
 8014cda:	81f9      	strh	r1, [r7, #14]
 8014cdc:	4413      	add	r3, r2
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	061a      	lsls	r2, r3, #24
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	689b      	ldr	r3, [r3, #8]
 8014ce6:	431a      	orrs	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681a      	ldr	r2, [r3, #0]
 8014cf0:	89fb      	ldrh	r3, [r7, #14]
 8014cf2:	1c59      	adds	r1, r3, #1
 8014cf4:	81f9      	strh	r1, [r7, #14]
 8014cf6:	4413      	add	r3, r2
 8014cf8:	781a      	ldrb	r2, [r3, #0]
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	681a      	ldr	r2, [r3, #0]
 8014d02:	89fb      	ldrh	r3, [r7, #14]
 8014d04:	1c59      	adds	r1, r3, #1
 8014d06:	81f9      	strh	r1, [r7, #14]
 8014d08:	4413      	add	r3, r2
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	b29a      	uxth	r2, r3
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	89fb      	ldrh	r3, [r7, #14]
 8014d18:	1c59      	adds	r1, r3, #1
 8014d1a:	81f9      	strh	r1, [r7, #14]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	0219      	lsls	r1, r3, #8
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	89db      	ldrh	r3, [r3, #14]
 8014d26:	b21a      	sxth	r2, r3
 8014d28:	b20b      	sxth	r3, r1
 8014d2a:	4313      	orrs	r3, r2
 8014d2c:	b21b      	sxth	r3, r3
 8014d2e:	b29a      	uxth	r2, r3
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f103 0010 	add.w	r0, r3, #16
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681a      	ldr	r2, [r3, #0]
 8014d3e:	89fb      	ldrh	r3, [r7, #14]
 8014d40:	18d1      	adds	r1, r2, r3
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	7b1b      	ldrb	r3, [r3, #12]
 8014d46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	461a      	mov	r2, r3
 8014d50:	f004 f803 	bl	8018d5a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	7b1b      	ldrb	r3, [r3, #12]
 8014d58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014d5c:	b2db      	uxtb	r3, r3
 8014d5e:	b29a      	uxth	r2, r3
 8014d60:	89fb      	ldrh	r3, [r7, #14]
 8014d62:	4413      	add	r3, r2
 8014d64:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2200      	movs	r2, #0
 8014d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	791b      	ldrb	r3, [r3, #4]
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	89fb      	ldrh	r3, [r7, #14]
 8014d7e:	1ad3      	subs	r3, r2, r3
 8014d80:	2b04      	cmp	r3, #4
 8014d82:	dd28      	ble.n	8014dd6 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	89fb      	ldrh	r3, [r7, #14]
 8014d8a:	1c59      	adds	r1, r3, #1
 8014d8c:	81f9      	strh	r1, [r7, #14]
 8014d8e:	4413      	add	r3, r2
 8014d90:	781a      	ldrb	r2, [r3, #0]
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	791a      	ldrb	r2, [r3, #4]
 8014d9c:	89fb      	ldrh	r3, [r7, #14]
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	1ad3      	subs	r3, r2, r3
 8014da2:	b2db      	uxtb	r3, r3
 8014da4:	3b04      	subs	r3, #4
 8014da6:	b2da      	uxtb	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681a      	ldr	r2, [r3, #0]
 8014db6:	89fb      	ldrh	r3, [r7, #14]
 8014db8:	18d1      	adds	r1, r2, r3
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	f003 ffc9 	bl	8018d5a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	89fb      	ldrh	r3, [r7, #14]
 8014dd2:	4413      	add	r3, r2
 8014dd4:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	791b      	ldrb	r3, [r3, #4]
 8014dde:	3b04      	subs	r3, #4
 8014de0:	4413      	add	r3, r2
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	461a      	mov	r2, r3
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	6819      	ldr	r1, [r3, #0]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	791b      	ldrb	r3, [r3, #4]
 8014df6:	3b03      	subs	r3, #3
 8014df8:	440b      	add	r3, r1
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	021b      	lsls	r3, r3, #8
 8014dfe:	431a      	orrs	r2, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	6819      	ldr	r1, [r3, #0]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	791b      	ldrb	r3, [r3, #4]
 8014e10:	3b02      	subs	r3, #2
 8014e12:	440b      	add	r3, r1
 8014e14:	781b      	ldrb	r3, [r3, #0]
 8014e16:	041b      	lsls	r3, r3, #16
 8014e18:	431a      	orrs	r2, r3
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	6819      	ldr	r1, [r3, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	791b      	ldrb	r3, [r3, #4]
 8014e2a:	3b01      	subs	r3, #1
 8014e2c:	440b      	add	r3, r1
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	061b      	lsls	r3, r3, #24
 8014e32:	431a      	orrs	r2, r3
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8014e38:	2300      	movs	r3, #0
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}

08014e42 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014e42:	b580      	push	{r7, lr}
 8014e44:	b084      	sub	sp, #16
 8014e46:	af00      	add	r7, sp, #0
 8014e48:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d003      	beq.n	8014e58 <LoRaMacSerializerJoinRequest+0x16>
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	681b      	ldr	r3, [r3, #0]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	e070      	b.n	8014f3e <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	791b      	ldrb	r3, [r3, #4]
 8014e64:	2b16      	cmp	r3, #22
 8014e66:	d801      	bhi.n	8014e6c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014e68:	2302      	movs	r3, #2
 8014e6a:	e068      	b.n	8014f3e <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	89fb      	ldrh	r3, [r7, #14]
 8014e72:	1c59      	adds	r1, r3, #1
 8014e74:	81f9      	strh	r1, [r7, #14]
 8014e76:	4413      	add	r3, r2
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	7952      	ldrb	r2, [r2, #5]
 8014e7c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	89fb      	ldrh	r3, [r7, #14]
 8014e84:	18d0      	adds	r0, r2, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	3306      	adds	r3, #6
 8014e8a:	2208      	movs	r2, #8
 8014e8c:	4619      	mov	r1, r3
 8014e8e:	f003 ff7f 	bl	8018d90 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014e92:	89fb      	ldrh	r3, [r7, #14]
 8014e94:	3308      	adds	r3, #8
 8014e96:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	89fb      	ldrh	r3, [r7, #14]
 8014e9e:	18d0      	adds	r0, r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	330e      	adds	r3, #14
 8014ea4:	2208      	movs	r2, #8
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	f003 ff72 	bl	8018d90 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014eac:	89fb      	ldrh	r3, [r7, #14]
 8014eae:	3308      	adds	r3, #8
 8014eb0:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	8ad9      	ldrh	r1, [r3, #22]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681a      	ldr	r2, [r3, #0]
 8014eba:	89fb      	ldrh	r3, [r7, #14]
 8014ebc:	1c58      	adds	r0, r3, #1
 8014ebe:	81f8      	strh	r0, [r7, #14]
 8014ec0:	4413      	add	r3, r2
 8014ec2:	b2ca      	uxtb	r2, r1
 8014ec4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	8adb      	ldrh	r3, [r3, #22]
 8014eca:	0a1b      	lsrs	r3, r3, #8
 8014ecc:	b299      	uxth	r1, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	681a      	ldr	r2, [r3, #0]
 8014ed2:	89fb      	ldrh	r3, [r7, #14]
 8014ed4:	1c58      	adds	r0, r3, #1
 8014ed6:	81f8      	strh	r0, [r7, #14]
 8014ed8:	4413      	add	r3, r2
 8014eda:	b2ca      	uxtb	r2, r1
 8014edc:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6999      	ldr	r1, [r3, #24]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	89fb      	ldrh	r3, [r7, #14]
 8014ee8:	1c58      	adds	r0, r3, #1
 8014eea:	81f8      	strh	r0, [r7, #14]
 8014eec:	4413      	add	r3, r2
 8014eee:	b2ca      	uxtb	r2, r1
 8014ef0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	699b      	ldr	r3, [r3, #24]
 8014ef6:	0a19      	lsrs	r1, r3, #8
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	681a      	ldr	r2, [r3, #0]
 8014efc:	89fb      	ldrh	r3, [r7, #14]
 8014efe:	1c58      	adds	r0, r3, #1
 8014f00:	81f8      	strh	r0, [r7, #14]
 8014f02:	4413      	add	r3, r2
 8014f04:	b2ca      	uxtb	r2, r1
 8014f06:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	699b      	ldr	r3, [r3, #24]
 8014f0c:	0c19      	lsrs	r1, r3, #16
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681a      	ldr	r2, [r3, #0]
 8014f12:	89fb      	ldrh	r3, [r7, #14]
 8014f14:	1c58      	adds	r0, r3, #1
 8014f16:	81f8      	strh	r0, [r7, #14]
 8014f18:	4413      	add	r3, r2
 8014f1a:	b2ca      	uxtb	r2, r1
 8014f1c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	699b      	ldr	r3, [r3, #24]
 8014f22:	0e19      	lsrs	r1, r3, #24
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681a      	ldr	r2, [r3, #0]
 8014f28:	89fb      	ldrh	r3, [r7, #14]
 8014f2a:	1c58      	adds	r0, r3, #1
 8014f2c:	81f8      	strh	r0, [r7, #14]
 8014f2e:	4413      	add	r3, r2
 8014f30:	b2ca      	uxtb	r2, r1
 8014f32:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8014f34:	89fb      	ldrh	r3, [r7, #14]
 8014f36:	b2da      	uxtb	r2, r3
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8014f3c:	2300      	movs	r3, #0
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3710      	adds	r7, #16
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b084      	sub	sp, #16
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d003      	beq.n	8014f5c <LoRaMacSerializerData+0x16>
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d101      	bne.n	8014f60 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	e0e5      	b.n	801512c <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8014f60:	2300      	movs	r3, #0
 8014f62:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014f64:	2308      	movs	r3, #8
 8014f66:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	7b1b      	ldrb	r3, [r3, #12]
 8014f6c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014f70:	b2db      	uxtb	r3, r3
 8014f72:	b29a      	uxth	r2, r3
 8014f74:	89bb      	ldrh	r3, [r7, #12]
 8014f76:	4413      	add	r3, r2
 8014f78:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d002      	beq.n	8014f8a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014f84:	89bb      	ldrh	r3, [r7, #12]
 8014f86:	3301      	adds	r3, #1
 8014f88:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f90:	b29a      	uxth	r2, r3
 8014f92:	89bb      	ldrh	r3, [r7, #12]
 8014f94:	4413      	add	r3, r2
 8014f96:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014f98:	89bb      	ldrh	r3, [r7, #12]
 8014f9a:	3304      	adds	r3, #4
 8014f9c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	791b      	ldrb	r3, [r3, #4]
 8014fa2:	b29b      	uxth	r3, r3
 8014fa4:	89ba      	ldrh	r2, [r7, #12]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	d901      	bls.n	8014fae <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014faa:	2302      	movs	r3, #2
 8014fac:	e0be      	b.n	801512c <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681a      	ldr	r2, [r3, #0]
 8014fb2:	89fb      	ldrh	r3, [r7, #14]
 8014fb4:	1c59      	adds	r1, r3, #1
 8014fb6:	81f9      	strh	r1, [r7, #14]
 8014fb8:	4413      	add	r3, r2
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	7952      	ldrb	r2, [r2, #5]
 8014fbe:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6899      	ldr	r1, [r3, #8]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681a      	ldr	r2, [r3, #0]
 8014fc8:	89fb      	ldrh	r3, [r7, #14]
 8014fca:	1c58      	adds	r0, r3, #1
 8014fcc:	81f8      	strh	r0, [r7, #14]
 8014fce:	4413      	add	r3, r2
 8014fd0:	b2ca      	uxtb	r2, r1
 8014fd2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	689b      	ldr	r3, [r3, #8]
 8014fd8:	0a19      	lsrs	r1, r3, #8
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	89fb      	ldrh	r3, [r7, #14]
 8014fe0:	1c58      	adds	r0, r3, #1
 8014fe2:	81f8      	strh	r0, [r7, #14]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	b2ca      	uxtb	r2, r1
 8014fe8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	689b      	ldr	r3, [r3, #8]
 8014fee:	0c19      	lsrs	r1, r3, #16
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681a      	ldr	r2, [r3, #0]
 8014ff4:	89fb      	ldrh	r3, [r7, #14]
 8014ff6:	1c58      	adds	r0, r3, #1
 8014ff8:	81f8      	strh	r0, [r7, #14]
 8014ffa:	4413      	add	r3, r2
 8014ffc:	b2ca      	uxtb	r2, r1
 8014ffe:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	689b      	ldr	r3, [r3, #8]
 8015004:	0e19      	lsrs	r1, r3, #24
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681a      	ldr	r2, [r3, #0]
 801500a:	89fb      	ldrh	r3, [r7, #14]
 801500c:	1c58      	adds	r0, r3, #1
 801500e:	81f8      	strh	r0, [r7, #14]
 8015010:	4413      	add	r3, r2
 8015012:	b2ca      	uxtb	r2, r1
 8015014:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	681a      	ldr	r2, [r3, #0]
 801501a:	89fb      	ldrh	r3, [r7, #14]
 801501c:	1c59      	adds	r1, r3, #1
 801501e:	81f9      	strh	r1, [r7, #14]
 8015020:	4413      	add	r3, r2
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	7b12      	ldrb	r2, [r2, #12]
 8015026:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	89d9      	ldrh	r1, [r3, #14]
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	89fb      	ldrh	r3, [r7, #14]
 8015032:	1c58      	adds	r0, r3, #1
 8015034:	81f8      	strh	r0, [r7, #14]
 8015036:	4413      	add	r3, r2
 8015038:	b2ca      	uxtb	r2, r1
 801503a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	89db      	ldrh	r3, [r3, #14]
 8015040:	0a1b      	lsrs	r3, r3, #8
 8015042:	b299      	uxth	r1, r3
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	89fb      	ldrh	r3, [r7, #14]
 801504a:	1c58      	adds	r0, r3, #1
 801504c:	81f8      	strh	r0, [r7, #14]
 801504e:	4413      	add	r3, r2
 8015050:	b2ca      	uxtb	r2, r1
 8015052:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681a      	ldr	r2, [r3, #0]
 8015058:	89fb      	ldrh	r3, [r7, #14]
 801505a:	18d0      	adds	r0, r2, r3
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f103 0110 	add.w	r1, r3, #16
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	7b1b      	ldrb	r3, [r3, #12]
 8015066:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801506a:	b2db      	uxtb	r3, r3
 801506c:	b29b      	uxth	r3, r3
 801506e:	461a      	mov	r2, r3
 8015070:	f003 fe73 	bl	8018d5a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	7b1b      	ldrb	r3, [r3, #12]
 8015078:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801507c:	b2db      	uxtb	r3, r3
 801507e:	b29a      	uxth	r2, r3
 8015080:	89fb      	ldrh	r3, [r7, #14]
 8015082:	4413      	add	r3, r2
 8015084:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801508c:	2b00      	cmp	r3, #0
 801508e:	d009      	beq.n	80150a4 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681a      	ldr	r2, [r3, #0]
 8015094:	89fb      	ldrh	r3, [r7, #14]
 8015096:	1c59      	adds	r1, r3, #1
 8015098:	81f9      	strh	r1, [r7, #14]
 801509a:	4413      	add	r3, r2
 801509c:	687a      	ldr	r2, [r7, #4]
 801509e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80150a2:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	89fb      	ldrh	r3, [r7, #14]
 80150aa:	18d0      	adds	r0, r2, r3
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	461a      	mov	r2, r3
 80150ba:	f003 fe4e 	bl	8018d5a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80150c4:	b29a      	uxth	r2, r3
 80150c6:	89fb      	ldrh	r3, [r7, #14]
 80150c8:	4413      	add	r3, r2
 80150ca:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	89fb      	ldrh	r3, [r7, #14]
 80150d6:	1c58      	adds	r0, r3, #1
 80150d8:	81f8      	strh	r0, [r7, #14]
 80150da:	4413      	add	r3, r2
 80150dc:	b2ca      	uxtb	r2, r1
 80150de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150e4:	0a19      	lsrs	r1, r3, #8
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	89fb      	ldrh	r3, [r7, #14]
 80150ec:	1c58      	adds	r0, r3, #1
 80150ee:	81f8      	strh	r0, [r7, #14]
 80150f0:	4413      	add	r3, r2
 80150f2:	b2ca      	uxtb	r2, r1
 80150f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150fa:	0c19      	lsrs	r1, r3, #16
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	89fb      	ldrh	r3, [r7, #14]
 8015102:	1c58      	adds	r0, r3, #1
 8015104:	81f8      	strh	r0, [r7, #14]
 8015106:	4413      	add	r3, r2
 8015108:	b2ca      	uxtb	r2, r1
 801510a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015110:	0e19      	lsrs	r1, r3, #24
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	89fb      	ldrh	r3, [r7, #14]
 8015118:	1c58      	adds	r0, r3, #1
 801511a:	81f8      	strh	r0, [r7, #14]
 801511c:	4413      	add	r3, r2
 801511e:	b2ca      	uxtb	r2, r1
 8015120:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015122:	89fb      	ldrh	r3, [r7, #14]
 8015124:	b2da      	uxtb	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801512a:	2300      	movs	r3, #0
}
 801512c:	4618      	mov	r0, r3
 801512e:	3710      	adds	r7, #16
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}

08015134 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	4603      	mov	r3, r0
 801513c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801513e:	79fb      	ldrb	r3, [r7, #7]
 8015140:	2b05      	cmp	r3, #5
 8015142:	d002      	beq.n	801514a <RegionIsActive+0x16>
 8015144:	2b08      	cmp	r3, #8
 8015146:	d002      	beq.n	801514e <RegionIsActive+0x1a>
 8015148:	e003      	b.n	8015152 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801514a:	2301      	movs	r3, #1
 801514c:	e002      	b.n	8015154 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801514e:	2301      	movs	r3, #1
 8015150:	e000      	b.n	8015154 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015152:	2300      	movs	r3, #0
        }
    }
}
 8015154:	4618      	mov	r0, r3
 8015156:	370c      	adds	r7, #12
 8015158:	46bd      	mov	sp, r7
 801515a:	bc80      	pop	{r7}
 801515c:	4770      	bx	lr

0801515e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801515e:	b580      	push	{r7, lr}
 8015160:	b084      	sub	sp, #16
 8015162:	af00      	add	r7, sp, #0
 8015164:	4603      	mov	r3, r0
 8015166:	6039      	str	r1, [r7, #0]
 8015168:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801516a:	2300      	movs	r3, #0
 801516c:	60bb      	str	r3, [r7, #8]
    switch( region )
 801516e:	79fb      	ldrb	r3, [r7, #7]
 8015170:	2b05      	cmp	r3, #5
 8015172:	d002      	beq.n	801517a <RegionGetPhyParam+0x1c>
 8015174:	2b08      	cmp	r3, #8
 8015176:	d006      	beq.n	8015186 <RegionGetPhyParam+0x28>
 8015178:	e00b      	b.n	8015192 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801517a:	6838      	ldr	r0, [r7, #0]
 801517c:	f001 fad4 	bl	8016728 <RegionEU868GetPhyParam>
 8015180:	4603      	mov	r3, r0
 8015182:	60fb      	str	r3, [r7, #12]
 8015184:	e007      	b.n	8015196 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8015186:	6838      	ldr	r0, [r7, #0]
 8015188:	f002 fc4e 	bl	8017a28 <RegionUS915GetPhyParam>
 801518c:	4603      	mov	r3, r0
 801518e:	60fb      	str	r3, [r7, #12]
 8015190:	e001      	b.n	8015196 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015192:	68bb      	ldr	r3, [r7, #8]
 8015194:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	4618      	mov	r0, r3
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b082      	sub	sp, #8
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	6039      	str	r1, [r7, #0]
 80151aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80151ac:	79fb      	ldrb	r3, [r7, #7]
 80151ae:	2b05      	cmp	r3, #5
 80151b0:	d002      	beq.n	80151b8 <RegionSetBandTxDone+0x18>
 80151b2:	2b08      	cmp	r3, #8
 80151b4:	d004      	beq.n	80151c0 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80151b6:	e007      	b.n	80151c8 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 80151b8:	6838      	ldr	r0, [r7, #0]
 80151ba:	f001 fbfb 	bl	80169b4 <RegionEU868SetBandTxDone>
 80151be:	e003      	b.n	80151c8 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 80151c0:	6838      	ldr	r0, [r7, #0]
 80151c2:	f002 fd8d 	bl	8017ce0 <RegionUS915SetBandTxDone>
 80151c6:	bf00      	nop
        }
    }
}
 80151c8:	3708      	adds	r7, #8
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}

080151ce <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b082      	sub	sp, #8
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	4603      	mov	r3, r0
 80151d6:	6039      	str	r1, [r7, #0]
 80151d8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80151da:	79fb      	ldrb	r3, [r7, #7]
 80151dc:	2b05      	cmp	r3, #5
 80151de:	d002      	beq.n	80151e6 <RegionInitDefaults+0x18>
 80151e0:	2b08      	cmp	r3, #8
 80151e2:	d004      	beq.n	80151ee <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80151e4:	e007      	b.n	80151f6 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 80151e6:	6838      	ldr	r0, [r7, #0]
 80151e8:	f001 fc10 	bl	8016a0c <RegionEU868InitDefaults>
 80151ec:	e003      	b.n	80151f6 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 80151ee:	6838      	ldr	r0, [r7, #0]
 80151f0:	f002 fda2 	bl	8017d38 <RegionUS915InitDefaults>
 80151f4:	bf00      	nop
        }
    }
}
 80151f6:	bf00      	nop
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}

080151fe <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80151fe:	b580      	push	{r7, lr}
 8015200:	b082      	sub	sp, #8
 8015202:	af00      	add	r7, sp, #0
 8015204:	4603      	mov	r3, r0
 8015206:	6039      	str	r1, [r7, #0]
 8015208:	71fb      	strb	r3, [r7, #7]
 801520a:	4613      	mov	r3, r2
 801520c:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801520e:	79fb      	ldrb	r3, [r7, #7]
 8015210:	2b05      	cmp	r3, #5
 8015212:	d002      	beq.n	801521a <RegionVerify+0x1c>
 8015214:	2b08      	cmp	r3, #8
 8015216:	d007      	beq.n	8015228 <RegionVerify+0x2a>
 8015218:	e00d      	b.n	8015236 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801521a:	79bb      	ldrb	r3, [r7, #6]
 801521c:	4619      	mov	r1, r3
 801521e:	6838      	ldr	r0, [r7, #0]
 8015220:	f001 fc92 	bl	8016b48 <RegionEU868Verify>
 8015224:	4603      	mov	r3, r0
 8015226:	e007      	b.n	8015238 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8015228:	79bb      	ldrb	r3, [r7, #6]
 801522a:	4619      	mov	r1, r3
 801522c:	6838      	ldr	r0, [r7, #0]
 801522e:	f002 feb5 	bl	8017f9c <RegionUS915Verify>
 8015232:	4603      	mov	r3, r0
 8015234:	e000      	b.n	8015238 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8015236:	2300      	movs	r3, #0
        }
    }
}
 8015238:	4618      	mov	r0, r3
 801523a:	3708      	adds	r7, #8
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}

08015240 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	4603      	mov	r3, r0
 8015248:	6039      	str	r1, [r7, #0]
 801524a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801524c:	79fb      	ldrb	r3, [r7, #7]
 801524e:	2b05      	cmp	r3, #5
 8015250:	d002      	beq.n	8015258 <RegionApplyCFList+0x18>
 8015252:	2b08      	cmp	r3, #8
 8015254:	d004      	beq.n	8015260 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8015256:	e007      	b.n	8015268 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8015258:	6838      	ldr	r0, [r7, #0]
 801525a:	f001 fcf1 	bl	8016c40 <RegionEU868ApplyCFList>
 801525e:	e003      	b.n	8015268 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8015260:	6838      	ldr	r0, [r7, #0]
 8015262:	f002 ff11 	bl	8018088 <RegionUS915ApplyCFList>
 8015266:	bf00      	nop
        }
    }
}
 8015268:	bf00      	nop
 801526a:	3708      	adds	r7, #8
 801526c:	46bd      	mov	sp, r7
 801526e:	bd80      	pop	{r7, pc}

08015270 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015270:	b580      	push	{r7, lr}
 8015272:	b082      	sub	sp, #8
 8015274:	af00      	add	r7, sp, #0
 8015276:	4603      	mov	r3, r0
 8015278:	6039      	str	r1, [r7, #0]
 801527a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801527c:	79fb      	ldrb	r3, [r7, #7]
 801527e:	2b05      	cmp	r3, #5
 8015280:	d002      	beq.n	8015288 <RegionChanMaskSet+0x18>
 8015282:	2b08      	cmp	r3, #8
 8015284:	d005      	beq.n	8015292 <RegionChanMaskSet+0x22>
 8015286:	e009      	b.n	801529c <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8015288:	6838      	ldr	r0, [r7, #0]
 801528a:	f001 fd4d 	bl	8016d28 <RegionEU868ChanMaskSet>
 801528e:	4603      	mov	r3, r0
 8015290:	e005      	b.n	801529e <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8015292:	6838      	ldr	r0, [r7, #0]
 8015294:	f002 ff6c 	bl	8018170 <RegionUS915ChanMaskSet>
 8015298:	4603      	mov	r3, r0
 801529a:	e000      	b.n	801529e <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801529c:	2300      	movs	r3, #0
        }
    }
}
 801529e:	4618      	mov	r0, r3
 80152a0:	3708      	adds	r7, #8
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b082      	sub	sp, #8
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	603b      	str	r3, [r7, #0]
 80152ae:	4603      	mov	r3, r0
 80152b0:	71fb      	strb	r3, [r7, #7]
 80152b2:	460b      	mov	r3, r1
 80152b4:	71bb      	strb	r3, [r7, #6]
 80152b6:	4613      	mov	r3, r2
 80152b8:	717b      	strb	r3, [r7, #5]
    switch( region )
 80152ba:	79fb      	ldrb	r3, [r7, #7]
 80152bc:	2b05      	cmp	r3, #5
 80152be:	d002      	beq.n	80152c6 <RegionComputeRxWindowParameters+0x20>
 80152c0:	2b08      	cmp	r3, #8
 80152c2:	d008      	beq.n	80152d6 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80152c4:	e00f      	b.n	80152e6 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80152c6:	7979      	ldrb	r1, [r7, #5]
 80152c8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80152cc:	693b      	ldr	r3, [r7, #16]
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	f001 fd54 	bl	8016d7c <RegionEU868ComputeRxWindowParameters>
 80152d4:	e007      	b.n	80152e6 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 80152d6:	7979      	ldrb	r1, [r7, #5]
 80152d8:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80152dc:	693b      	ldr	r3, [r7, #16]
 80152de:	683a      	ldr	r2, [r7, #0]
 80152e0:	f002 ffae 	bl	8018240 <RegionUS915ComputeRxWindowParameters>
 80152e4:	bf00      	nop
        }
    }
}
 80152e6:	bf00      	nop
 80152e8:	3708      	adds	r7, #8
 80152ea:	46bd      	mov	sp, r7
 80152ec:	bd80      	pop	{r7, pc}

080152ee <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80152ee:	b580      	push	{r7, lr}
 80152f0:	b084      	sub	sp, #16
 80152f2:	af00      	add	r7, sp, #0
 80152f4:	4603      	mov	r3, r0
 80152f6:	60b9      	str	r1, [r7, #8]
 80152f8:	607a      	str	r2, [r7, #4]
 80152fa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80152fc:	7bfb      	ldrb	r3, [r7, #15]
 80152fe:	2b05      	cmp	r3, #5
 8015300:	d002      	beq.n	8015308 <RegionRxConfig+0x1a>
 8015302:	2b08      	cmp	r3, #8
 8015304:	d006      	beq.n	8015314 <RegionRxConfig+0x26>
 8015306:	e00b      	b.n	8015320 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8015308:	6879      	ldr	r1, [r7, #4]
 801530a:	68b8      	ldr	r0, [r7, #8]
 801530c:	f001 fd90 	bl	8016e30 <RegionEU868RxConfig>
 8015310:	4603      	mov	r3, r0
 8015312:	e006      	b.n	8015322 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8015314:	6879      	ldr	r1, [r7, #4]
 8015316:	68b8      	ldr	r0, [r7, #8]
 8015318:	f002 ffdc 	bl	80182d4 <RegionUS915RxConfig>
 801531c:	4603      	mov	r3, r0
 801531e:	e000      	b.n	8015322 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015320:	2300      	movs	r3, #0
        }
    }
}
 8015322:	4618      	mov	r0, r3
 8015324:	3710      	adds	r7, #16
 8015326:	46bd      	mov	sp, r7
 8015328:	bd80      	pop	{r7, pc}

0801532a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801532a:	b580      	push	{r7, lr}
 801532c:	b084      	sub	sp, #16
 801532e:	af00      	add	r7, sp, #0
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
 8015336:	4603      	mov	r3, r0
 8015338:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801533a:	7bfb      	ldrb	r3, [r7, #15]
 801533c:	2b05      	cmp	r3, #5
 801533e:	d002      	beq.n	8015346 <RegionTxConfig+0x1c>
 8015340:	2b08      	cmp	r3, #8
 8015342:	d007      	beq.n	8015354 <RegionTxConfig+0x2a>
 8015344:	e00d      	b.n	8015362 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8015346:	683a      	ldr	r2, [r7, #0]
 8015348:	6879      	ldr	r1, [r7, #4]
 801534a:	68b8      	ldr	r0, [r7, #8]
 801534c:	f001 fe40 	bl	8016fd0 <RegionEU868TxConfig>
 8015350:	4603      	mov	r3, r0
 8015352:	e007      	b.n	8015364 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8015354:	683a      	ldr	r2, [r7, #0]
 8015356:	6879      	ldr	r1, [r7, #4]
 8015358:	68b8      	ldr	r0, [r7, #8]
 801535a:	f003 f83f 	bl	80183dc <RegionUS915TxConfig>
 801535e:	4603      	mov	r3, r0
 8015360:	e000      	b.n	8015364 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8015362:	2300      	movs	r3, #0
        }
    }
}
 8015364:	4618      	mov	r0, r3
 8015366:	3710      	adds	r7, #16
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b086      	sub	sp, #24
 8015370:	af02      	add	r7, sp, #8
 8015372:	60b9      	str	r1, [r7, #8]
 8015374:	607a      	str	r2, [r7, #4]
 8015376:	603b      	str	r3, [r7, #0]
 8015378:	4603      	mov	r3, r0
 801537a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801537c:	7bfb      	ldrb	r3, [r7, #15]
 801537e:	2b05      	cmp	r3, #5
 8015380:	d002      	beq.n	8015388 <RegionLinkAdrReq+0x1c>
 8015382:	2b08      	cmp	r3, #8
 8015384:	d00a      	beq.n	801539c <RegionLinkAdrReq+0x30>
 8015386:	e013      	b.n	80153b0 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8015388:	69fb      	ldr	r3, [r7, #28]
 801538a:	9300      	str	r3, [sp, #0]
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	683a      	ldr	r2, [r7, #0]
 8015390:	6879      	ldr	r1, [r7, #4]
 8015392:	68b8      	ldr	r0, [r7, #8]
 8015394:	f001 feec 	bl	8017170 <RegionEU868LinkAdrReq>
 8015398:	4603      	mov	r3, r0
 801539a:	e00a      	b.n	80153b2 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	9300      	str	r3, [sp, #0]
 80153a0:	69bb      	ldr	r3, [r7, #24]
 80153a2:	683a      	ldr	r2, [r7, #0]
 80153a4:	6879      	ldr	r1, [r7, #4]
 80153a6:	68b8      	ldr	r0, [r7, #8]
 80153a8:	f003 f8c2 	bl	8018530 <RegionUS915LinkAdrReq>
 80153ac:	4603      	mov	r3, r0
 80153ae:	e000      	b.n	80153b2 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80153b0:	2300      	movs	r3, #0
        }
    }
}
 80153b2:	4618      	mov	r0, r3
 80153b4:	3710      	adds	r7, #16
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}

080153ba <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80153ba:	b580      	push	{r7, lr}
 80153bc:	b082      	sub	sp, #8
 80153be:	af00      	add	r7, sp, #0
 80153c0:	4603      	mov	r3, r0
 80153c2:	6039      	str	r1, [r7, #0]
 80153c4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153c6:	79fb      	ldrb	r3, [r7, #7]
 80153c8:	2b05      	cmp	r3, #5
 80153ca:	d002      	beq.n	80153d2 <RegionRxParamSetupReq+0x18>
 80153cc:	2b08      	cmp	r3, #8
 80153ce:	d005      	beq.n	80153dc <RegionRxParamSetupReq+0x22>
 80153d0:	e009      	b.n	80153e6 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80153d2:	6838      	ldr	r0, [r7, #0]
 80153d4:	f001 ffee 	bl	80173b4 <RegionEU868RxParamSetupReq>
 80153d8:	4603      	mov	r3, r0
 80153da:	e005      	b.n	80153e8 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 80153dc:	6838      	ldr	r0, [r7, #0]
 80153de:	f003 fac1 	bl	8018964 <RegionUS915RxParamSetupReq>
 80153e2:	4603      	mov	r3, r0
 80153e4:	e000      	b.n	80153e8 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80153e6:	2300      	movs	r3, #0
        }
    }
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	4603      	mov	r3, r0
 80153f8:	6039      	str	r1, [r7, #0]
 80153fa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80153fc:	79fb      	ldrb	r3, [r7, #7]
 80153fe:	2b05      	cmp	r3, #5
 8015400:	d002      	beq.n	8015408 <RegionNewChannelReq+0x18>
 8015402:	2b08      	cmp	r3, #8
 8015404:	d005      	beq.n	8015412 <RegionNewChannelReq+0x22>
 8015406:	e009      	b.n	801541c <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8015408:	6838      	ldr	r0, [r7, #0]
 801540a:	f002 f811 	bl	8017430 <RegionEU868NewChannelReq>
 801540e:	4603      	mov	r3, r0
 8015410:	e005      	b.n	801541e <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8015412:	6838      	ldr	r0, [r7, #0]
 8015414:	f003 faf2 	bl	80189fc <RegionUS915NewChannelReq>
 8015418:	4603      	mov	r3, r0
 801541a:	e000      	b.n	801541e <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 801541c:	2300      	movs	r3, #0
        }
    }
}
 801541e:	4618      	mov	r0, r3
 8015420:	3708      	adds	r7, #8
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}

08015426 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015426:	b580      	push	{r7, lr}
 8015428:	b082      	sub	sp, #8
 801542a:	af00      	add	r7, sp, #0
 801542c:	4603      	mov	r3, r0
 801542e:	6039      	str	r1, [r7, #0]
 8015430:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015432:	79fb      	ldrb	r3, [r7, #7]
 8015434:	2b05      	cmp	r3, #5
 8015436:	d002      	beq.n	801543e <RegionTxParamSetupReq+0x18>
 8015438:	2b08      	cmp	r3, #8
 801543a:	d005      	beq.n	8015448 <RegionTxParamSetupReq+0x22>
 801543c:	e009      	b.n	8015452 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801543e:	6838      	ldr	r0, [r7, #0]
 8015440:	f002 f854 	bl	80174ec <RegionEU868TxParamSetupReq>
 8015444:	4603      	mov	r3, r0
 8015446:	e005      	b.n	8015454 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8015448:	6838      	ldr	r0, [r7, #0]
 801544a:	f003 fae2 	bl	8018a12 <RegionUS915TxParamSetupReq>
 801544e:	4603      	mov	r3, r0
 8015450:	e000      	b.n	8015454 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015452:	2300      	movs	r3, #0
        }
    }
}
 8015454:	4618      	mov	r0, r3
 8015456:	3708      	adds	r7, #8
 8015458:	46bd      	mov	sp, r7
 801545a:	bd80      	pop	{r7, pc}

0801545c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801545c:	b580      	push	{r7, lr}
 801545e:	b082      	sub	sp, #8
 8015460:	af00      	add	r7, sp, #0
 8015462:	4603      	mov	r3, r0
 8015464:	6039      	str	r1, [r7, #0]
 8015466:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015468:	79fb      	ldrb	r3, [r7, #7]
 801546a:	2b05      	cmp	r3, #5
 801546c:	d002      	beq.n	8015474 <RegionDlChannelReq+0x18>
 801546e:	2b08      	cmp	r3, #8
 8015470:	d005      	beq.n	801547e <RegionDlChannelReq+0x22>
 8015472:	e009      	b.n	8015488 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8015474:	6838      	ldr	r0, [r7, #0]
 8015476:	f002 f845 	bl	8017504 <RegionEU868DlChannelReq>
 801547a:	4603      	mov	r3, r0
 801547c:	e005      	b.n	801548a <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801547e:	6838      	ldr	r0, [r7, #0]
 8015480:	f003 fad2 	bl	8018a28 <RegionUS915DlChannelReq>
 8015484:	4603      	mov	r3, r0
 8015486:	e000      	b.n	801548a <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015488:	2300      	movs	r3, #0
        }
    }
}
 801548a:	4618      	mov	r0, r3
 801548c:	3708      	adds	r7, #8
 801548e:	46bd      	mov	sp, r7
 8015490:	bd80      	pop	{r7, pc}

08015492 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015492:	b580      	push	{r7, lr}
 8015494:	b082      	sub	sp, #8
 8015496:	af00      	add	r7, sp, #0
 8015498:	4603      	mov	r3, r0
 801549a:	71fb      	strb	r3, [r7, #7]
 801549c:	460b      	mov	r3, r1
 801549e:	71bb      	strb	r3, [r7, #6]
 80154a0:	4613      	mov	r3, r2
 80154a2:	717b      	strb	r3, [r7, #5]
    switch( region )
 80154a4:	79fb      	ldrb	r3, [r7, #7]
 80154a6:	2b05      	cmp	r3, #5
 80154a8:	d002      	beq.n	80154b0 <RegionAlternateDr+0x1e>
 80154aa:	2b08      	cmp	r3, #8
 80154ac:	d009      	beq.n	80154c2 <RegionAlternateDr+0x30>
 80154ae:	e011      	b.n	80154d4 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80154b0:	797a      	ldrb	r2, [r7, #5]
 80154b2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80154b6:	4611      	mov	r1, r2
 80154b8:	4618      	mov	r0, r3
 80154ba:	f002 f867 	bl	801758c <RegionEU868AlternateDr>
 80154be:	4603      	mov	r3, r0
 80154c0:	e009      	b.n	80154d6 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 80154c2:	797a      	ldrb	r2, [r7, #5]
 80154c4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80154c8:	4611      	mov	r1, r2
 80154ca:	4618      	mov	r0, r3
 80154cc:	f003 fab8 	bl	8018a40 <RegionUS915AlternateDr>
 80154d0:	4603      	mov	r3, r0
 80154d2:	e000      	b.n	80154d6 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80154d4:	2300      	movs	r3, #0
        }
    }
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3708      	adds	r7, #8
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}

080154de <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80154de:	b580      	push	{r7, lr}
 80154e0:	b084      	sub	sp, #16
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	60b9      	str	r1, [r7, #8]
 80154e6:	607a      	str	r2, [r7, #4]
 80154e8:	603b      	str	r3, [r7, #0]
 80154ea:	4603      	mov	r3, r0
 80154ec:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80154ee:	7bfb      	ldrb	r3, [r7, #15]
 80154f0:	2b05      	cmp	r3, #5
 80154f2:	d002      	beq.n	80154fa <RegionNextChannel+0x1c>
 80154f4:	2b08      	cmp	r3, #8
 80154f6:	d008      	beq.n	801550a <RegionNextChannel+0x2c>
 80154f8:	e00f      	b.n	801551a <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80154fa:	69bb      	ldr	r3, [r7, #24]
 80154fc:	683a      	ldr	r2, [r7, #0]
 80154fe:	6879      	ldr	r1, [r7, #4]
 8015500:	68b8      	ldr	r0, [r7, #8]
 8015502:	f002 f853 	bl	80175ac <RegionEU868NextChannel>
 8015506:	4603      	mov	r3, r0
 8015508:	e008      	b.n	801551c <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	683a      	ldr	r2, [r7, #0]
 801550e:	6879      	ldr	r1, [r7, #4]
 8015510:	68b8      	ldr	r0, [r7, #8]
 8015512:	f003 facb 	bl	8018aac <RegionUS915NextChannel>
 8015516:	4603      	mov	r3, r0
 8015518:	e000      	b.n	801551c <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801551a:	2309      	movs	r3, #9
        }
    }
}
 801551c:	4618      	mov	r0, r3
 801551e:	3710      	adds	r7, #16
 8015520:	46bd      	mov	sp, r7
 8015522:	bd80      	pop	{r7, pc}

08015524 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015524:	b590      	push	{r4, r7, lr}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	4604      	mov	r4, r0
 801552c:	4608      	mov	r0, r1
 801552e:	4611      	mov	r1, r2
 8015530:	461a      	mov	r2, r3
 8015532:	4623      	mov	r3, r4
 8015534:	71fb      	strb	r3, [r7, #7]
 8015536:	4603      	mov	r3, r0
 8015538:	71bb      	strb	r3, [r7, #6]
 801553a:	460b      	mov	r3, r1
 801553c:	717b      	strb	r3, [r7, #5]
 801553e:	4613      	mov	r3, r2
 8015540:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015542:	79fb      	ldrb	r3, [r7, #7]
 8015544:	2b05      	cmp	r3, #5
 8015546:	d002      	beq.n	801554e <RegionApplyDrOffset+0x2a>
 8015548:	2b08      	cmp	r3, #8
 801554a:	d00a      	beq.n	8015562 <RegionApplyDrOffset+0x3e>
 801554c:	e013      	b.n	8015576 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801554e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015552:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015556:	79bb      	ldrb	r3, [r7, #6]
 8015558:	4618      	mov	r0, r3
 801555a:	f002 f9a1 	bl	80178a0 <RegionEU868ApplyDrOffset>
 801555e:	4603      	mov	r3, r0
 8015560:	e00a      	b.n	8015578 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8015562:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015566:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801556a:	79bb      	ldrb	r3, [r7, #6]
 801556c:	4618      	mov	r0, r3
 801556e:	f003 fb8b 	bl	8018c88 <RegionUS915ApplyDrOffset>
 8015572:	4603      	mov	r3, r0
 8015574:	e000      	b.n	8015578 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015576:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015578:	4618      	mov	r0, r3
 801557a:	370c      	adds	r7, #12
 801557c:	46bd      	mov	sp, r7
 801557e:	bd90      	pop	{r4, r7, pc}

08015580 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8015580:	b480      	push	{r7}
 8015582:	b083      	sub	sp, #12
 8015584:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015586:	4b04      	ldr	r3, [pc, #16]	; (8015598 <RegionGetVersion+0x18>)
 8015588:	607b      	str	r3, [r7, #4]

    return version;
 801558a:	687b      	ldr	r3, [r7, #4]
}
 801558c:	4618      	mov	r0, r3
 801558e:	370c      	adds	r7, #12
 8015590:	46bd      	mov	sp, r7
 8015592:	bc80      	pop	{r7}
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	02010001 	.word	0x02010001

0801559c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 801559c:	b480      	push	{r7}
 801559e:	b087      	sub	sp, #28
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4603      	mov	r3, r0
 80155a4:	60b9      	str	r1, [r7, #8]
 80155a6:	607a      	str	r2, [r7, #4]
 80155a8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d002      	beq.n	80155b6 <FindAvailable125kHzChannels+0x1a>
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d101      	bne.n	80155ba <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80155b6:	2303      	movs	r3, #3
 80155b8:	e021      	b.n	80155fe <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2200      	movs	r2, #0
 80155be:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80155c0:	2300      	movs	r3, #0
 80155c2:	75fb      	strb	r3, [r7, #23]
 80155c4:	e017      	b.n	80155f6 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 80155c6:	89fa      	ldrh	r2, [r7, #14]
 80155c8:	7dfb      	ldrb	r3, [r7, #23]
 80155ca:	fa42 f303 	asr.w	r3, r2, r3
 80155ce:	f003 0301 	and.w	r3, r3, #1
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d00c      	beq.n	80155f0 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	781b      	ldrb	r3, [r3, #0]
 80155da:	461a      	mov	r2, r3
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	4413      	add	r3, r2
 80155e0:	7dfa      	ldrb	r2, [r7, #23]
 80155e2:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	3301      	adds	r3, #1
 80155ea:	b2da      	uxtb	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80155f0:	7dfb      	ldrb	r3, [r7, #23]
 80155f2:	3301      	adds	r3, #1
 80155f4:	75fb      	strb	r3, [r7, #23]
 80155f6:	7dfb      	ldrb	r3, [r7, #23]
 80155f8:	2b07      	cmp	r3, #7
 80155fa:	d9e4      	bls.n	80155c6 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80155fc:	2300      	movs	r3, #0
}
 80155fe:	4618      	mov	r0, r3
 8015600:	371c      	adds	r7, #28
 8015602:	46bd      	mov	sp, r7
 8015604:	bc80      	pop	{r7}
 8015606:	4770      	bx	lr

08015608 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8015608:	b590      	push	{r4, r7, lr}
 801560a:	b089      	sub	sp, #36	; 0x24
 801560c:	af00      	add	r7, sp, #0
 801560e:	60f8      	str	r0, [r7, #12]
 8015610:	60b9      	str	r1, [r7, #8]
 8015612:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8015614:	2300      	movs	r3, #0
 8015616:	617b      	str	r3, [r7, #20]
 8015618:	2300      	movs	r3, #0
 801561a:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 801561c:	2300      	movs	r3, #0
 801561e:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d005      	beq.n	8015632 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d002      	beq.n	8015632 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d101      	bne.n	8015636 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015632:	2303      	movs	r3, #3
 8015634:	e055      	b.n	80156e2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	781b      	ldrb	r3, [r3, #0]
 801563a:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 801563c:	7f7b      	ldrb	r3, [r7, #29]
 801563e:	085b      	lsrs	r3, r3, #1
 8015640:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8015642:	7f7b      	ldrb	r3, [r7, #29]
 8015644:	f003 0301 	and.w	r3, r3, #1
 8015648:	b2db      	uxtb	r3, r3
 801564a:	2b00      	cmp	r3, #0
 801564c:	d107      	bne.n	801565e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 801564e:	7f3b      	ldrb	r3, [r7, #28]
 8015650:	005b      	lsls	r3, r3, #1
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	4413      	add	r3, r2
 8015656:	881b      	ldrh	r3, [r3, #0]
 8015658:	b2db      	uxtb	r3, r3
 801565a:	83fb      	strh	r3, [r7, #30]
 801565c:	e006      	b.n	801566c <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 801565e:	7f3b      	ldrb	r3, [r7, #28]
 8015660:	005b      	lsls	r3, r3, #1
 8015662:	68fa      	ldr	r2, [r7, #12]
 8015664:	4413      	add	r3, r2
 8015666:	881b      	ldrh	r3, [r3, #0]
 8015668:	0a1b      	lsrs	r3, r3, #8
 801566a:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801566c:	f107 0213 	add.w	r2, r7, #19
 8015670:	f107 0114 	add.w	r1, r7, #20
 8015674:	8bfb      	ldrh	r3, [r7, #30]
 8015676:	4618      	mov	r0, r3
 8015678:	f7ff ff90 	bl	801559c <FindAvailable125kHzChannels>
 801567c:	4603      	mov	r3, r0
 801567e:	2b03      	cmp	r3, #3
 8015680:	d101      	bne.n	8015686 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8015682:	2303      	movs	r3, #3
 8015684:	e02d      	b.n	80156e2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8015686:	7cfb      	ldrb	r3, [r7, #19]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d011      	beq.n	80156b0 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 801568c:	7f7b      	ldrb	r3, [r7, #29]
 801568e:	00db      	lsls	r3, r3, #3
 8015690:	b2dc      	uxtb	r4, r3
 8015692:	7cfb      	ldrb	r3, [r7, #19]
 8015694:	3b01      	subs	r3, #1
 8015696:	4619      	mov	r1, r3
 8015698:	2000      	movs	r0, #0
 801569a:	f003 fb47 	bl	8018d2c <randr>
 801569e:	4603      	mov	r3, r0
 80156a0:	3320      	adds	r3, #32
 80156a2:	443b      	add	r3, r7
 80156a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80156a8:	4423      	add	r3, r4
 80156aa:	b2da      	uxtb	r2, r3
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 80156b0:	7f7b      	ldrb	r3, [r7, #29]
 80156b2:	3301      	adds	r3, #1
 80156b4:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 80156b6:	7f7b      	ldrb	r3, [r7, #29]
 80156b8:	2b07      	cmp	r3, #7
 80156ba:	d901      	bls.n	80156c0 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 80156bc:	2300      	movs	r3, #0
 80156be:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 80156c0:	7cfb      	ldrb	r3, [r7, #19]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d104      	bne.n	80156d0 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 80156c6:	68bb      	ldr	r3, [r7, #8]
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	7f7a      	ldrb	r2, [r7, #29]
 80156cc:	429a      	cmp	r2, r3
 80156ce:	d1b5      	bne.n	801563c <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 80156d0:	7cfb      	ldrb	r3, [r7, #19]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d004      	beq.n	80156e0 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 80156d6:	68bb      	ldr	r3, [r7, #8]
 80156d8:	7f7a      	ldrb	r2, [r7, #29]
 80156da:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80156dc:	2300      	movs	r3, #0
 80156de:	e000      	b.n	80156e2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 80156e0:	2303      	movs	r3, #3
}
 80156e2:	4618      	mov	r0, r3
 80156e4:	3724      	adds	r7, #36	; 0x24
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd90      	pop	{r4, r7, pc}

080156ea <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 80156ea:	b480      	push	{r7}
 80156ec:	b085      	sub	sp, #20
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	4603      	mov	r3, r0
 80156f2:	60b9      	str	r1, [r7, #8]
 80156f4:	607a      	str	r2, [r7, #4]
 80156f6:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 80156f8:	7bfb      	ldrb	r3, [r7, #15]
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	fb03 f202 	mul.w	r2, r3, r2
 8015700:	68bb      	ldr	r3, [r7, #8]
 8015702:	4413      	add	r3, r2
}
 8015704:	4618      	mov	r0, r3
 8015706:	3714      	adds	r7, #20
 8015708:	46bd      	mov	sp, r7
 801570a:	bc80      	pop	{r7}
 801570c:	4770      	bx	lr

0801570e <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801570e:	b480      	push	{r7}
 8015710:	b087      	sub	sp, #28
 8015712:	af00      	add	r7, sp, #0
 8015714:	60f8      	str	r0, [r7, #12]
 8015716:	4608      	mov	r0, r1
 8015718:	4639      	mov	r1, r7
 801571a:	e881 000c 	stmia.w	r1, {r2, r3}
 801571e:	4603      	mov	r3, r0
 8015720:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	881b      	ldrh	r3, [r3, #0]
 8015726:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015728:	7afb      	ldrb	r3, [r7, #11]
 801572a:	f083 0301 	eor.w	r3, r3, #1
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b00      	cmp	r3, #0
 8015732:	d01b      	beq.n	801576c <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8015734:	f242 7310 	movw	r3, #10000	; 0x2710
 8015738:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8015740:	d202      	bcs.n	8015748 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8015742:	2364      	movs	r3, #100	; 0x64
 8015744:	82bb      	strh	r3, [r7, #20]
 8015746:	e00b      	b.n	8015760 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8015748:	683b      	ldr	r3, [r7, #0]
 801574a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 801574e:	4293      	cmp	r3, r2
 8015750:	d803      	bhi.n	801575a <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8015752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015756:	82bb      	strh	r3, [r7, #20]
 8015758:	e002      	b.n	8015760 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801575a:	f242 7310 	movw	r3, #10000	; 0x2710
 801575e:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8015760:	8aba      	ldrh	r2, [r7, #20]
 8015762:	8afb      	ldrh	r3, [r7, #22]
 8015764:	4293      	cmp	r3, r2
 8015766:	bf38      	it	cc
 8015768:	4613      	movcc	r3, r2
 801576a:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801576c:	8afb      	ldrh	r3, [r7, #22]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d101      	bne.n	8015776 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8015772:	2301      	movs	r3, #1
 8015774:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8015776:	8afb      	ldrh	r3, [r7, #22]
}
 8015778:	4618      	mov	r0, r3
 801577a:	371c      	adds	r7, #28
 801577c:	46bd      	mov	sp, r7
 801577e:	bc80      	pop	{r7}
 8015780:	4770      	bx	lr
	...

08015784 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8015784:	b580      	push	{r7, lr}
 8015786:	b08e      	sub	sp, #56	; 0x38
 8015788:	af02      	add	r7, sp, #8
 801578a:	60f8      	str	r0, [r7, #12]
 801578c:	4608      	mov	r0, r1
 801578e:	4639      	mov	r1, r7
 8015790:	e881 000c 	stmia.w	r1, {r2, r3}
 8015794:	4603      	mov	r3, r0
 8015796:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	881b      	ldrh	r3, [r3, #0]
 801579c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801579e:	4b4b      	ldr	r3, [pc, #300]	; (80158cc <SetMaxTimeCredits+0x148>)
 80157a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80157a2:	463b      	mov	r3, r7
 80157a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80157a8:	f006 fed8 	bl	801c55c <SysTimeToMs>
 80157ac:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 80157ae:	f107 0314 	add.w	r3, r7, #20
 80157b2:	2200      	movs	r2, #0
 80157b4:	601a      	str	r2, [r3, #0]
 80157b6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80157b8:	7af9      	ldrb	r1, [r7, #11]
 80157ba:	463b      	mov	r3, r7
 80157bc:	cb0c      	ldmia	r3, {r2, r3}
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f7ff ffa5 	bl	801570e <GetDutyCycle>
 80157c4:	4603      	mov	r3, r0
 80157c6:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 80157c8:	7afb      	ldrb	r3, [r7, #11]
 80157ca:	f083 0301 	eor.w	r3, r3, #1
 80157ce:	b2db      	uxtb	r3, r3
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d062      	beq.n	801589a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80157d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157d6:	2b64      	cmp	r3, #100	; 0x64
 80157d8:	d105      	bne.n	80157e6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80157da:	4b3c      	ldr	r3, [pc, #240]	; (80158cc <SetMaxTimeCredits+0x148>)
 80157dc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157e2:	609a      	str	r2, [r3, #8]
 80157e4:	e00b      	b.n	80157fe <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80157e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80157ec:	d105      	bne.n	80157fa <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80157ee:	4b38      	ldr	r3, [pc, #224]	; (80158d0 <SetMaxTimeCredits+0x14c>)
 80157f0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80157f6:	609a      	str	r2, [r3, #8]
 80157f8:	e001      	b.n	80157fe <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80157fa:	4b36      	ldr	r3, [pc, #216]	; (80158d4 <SetMaxTimeCredits+0x150>)
 80157fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	689a      	ldr	r2, [r3, #8]
 8015802:	f107 031c 	add.w	r3, r7, #28
 8015806:	4611      	mov	r1, r2
 8015808:	4618      	mov	r0, r3
 801580a:	f006 fecf 	bl	801c5ac <SysTimeFromMs>
 801580e:	f107 0014 	add.w	r0, r7, #20
 8015812:	6a3b      	ldr	r3, [r7, #32]
 8015814:	9300      	str	r3, [sp, #0]
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	463a      	mov	r2, r7
 801581a:	ca06      	ldmia	r2, {r1, r2}
 801581c:	f006 fddf 	bl	801c3de <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015820:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015824:	f083 0301 	eor.w	r3, r3, #1
 8015828:	b2db      	uxtb	r3, r3
 801582a:	2b00      	cmp	r3, #0
 801582c:	d006      	beq.n	801583c <SetMaxTimeCredits+0xb8>
 801582e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015832:	f083 0301 	eor.w	r3, r3, #1
 8015836:	b2db      	uxtb	r3, r3
 8015838:	2b00      	cmp	r3, #0
 801583a:	d108      	bne.n	801584e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015842:	429a      	cmp	r2, r3
 8015844:	d103      	bne.n	801584e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015846:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015848:	4a23      	ldr	r2, [pc, #140]	; (80158d8 <SetMaxTimeCredits+0x154>)
 801584a:	4293      	cmp	r3, r2
 801584c:	d92f      	bls.n	80158ae <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015852:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	4a21      	ldr	r2, [pc, #132]	; (80158dc <SetMaxTimeCredits+0x158>)
 8015858:	4293      	cmp	r3, r2
 801585a:	d928      	bls.n	80158ae <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015862:	3b30      	subs	r3, #48	; 0x30
 8015864:	4a1e      	ldr	r2, [pc, #120]	; (80158e0 <SetMaxTimeCredits+0x15c>)
 8015866:	fba2 2303 	umull	r2, r3, r2, r3
 801586a:	0c1b      	lsrs	r3, r3, #16
 801586c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801586e:	697b      	ldr	r3, [r7, #20]
 8015870:	4a1c      	ldr	r2, [pc, #112]	; (80158e4 <SetMaxTimeCredits+0x160>)
 8015872:	fb02 f303 	mul.w	r3, r2, r3
 8015876:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015878:	697b      	ldr	r3, [r7, #20]
 801587a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 801587e:	3330      	adds	r3, #48	; 0x30
 8015880:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015882:	2300      	movs	r3, #0
 8015884:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015886:	f107 0314 	add.w	r3, r7, #20
 801588a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801588e:	f006 fe65 	bl	801c55c <SysTimeToMs>
 8015892:	4602      	mov	r2, r0
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	609a      	str	r2, [r3, #8]
 8015898:	e009      	b.n	80158ae <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 801589a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 801589e:	f083 0301 	eor.w	r3, r3, #1
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d002      	beq.n	80158ae <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158ac:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d102      	bne.n	80158bc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158ba:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80158c0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80158c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	3730      	adds	r7, #48	; 0x30
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	001b7740 	.word	0x001b7740
 80158d0:	0112a880 	.word	0x0112a880
 80158d4:	02932e00 	.word	0x02932e00
 80158d8:	0001517f 	.word	0x0001517f
 80158dc:	0001ec2f 	.word	0x0001ec2f
 80158e0:	c22e4507 	.word	0xc22e4507
 80158e4:	00015180 	.word	0x00015180

080158e8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b086      	sub	sp, #24
 80158ec:	af02      	add	r7, sp, #8
 80158ee:	6078      	str	r0, [r7, #4]
 80158f0:	4608      	mov	r0, r1
 80158f2:	4611      	mov	r1, r2
 80158f4:	461a      	mov	r2, r3
 80158f6:	4603      	mov	r3, r0
 80158f8:	70fb      	strb	r3, [r7, #3]
 80158fa:	460b      	mov	r3, r1
 80158fc:	70bb      	strb	r3, [r7, #2]
 80158fe:	4613      	mov	r3, r2
 8015900:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015902:	78f9      	ldrb	r1, [r7, #3]
 8015904:	787b      	ldrb	r3, [r7, #1]
 8015906:	9301      	str	r3, [sp, #4]
 8015908:	78bb      	ldrb	r3, [r7, #2]
 801590a:	9300      	str	r3, [sp, #0]
 801590c:	f107 0318 	add.w	r3, r7, #24
 8015910:	cb0c      	ldmia	r3, {r2, r3}
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f7ff ff36 	bl	8015784 <SetMaxTimeCredits>
 8015918:	4603      	mov	r3, r0
 801591a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801591c:	78fb      	ldrb	r3, [r7, #3]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d00a      	beq.n	8015938 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	685b      	ldr	r3, [r3, #4]
 8015926:	4618      	mov	r0, r3
 8015928:	f007 fb50 	bl	801cfcc <UTIL_TIMER_GetElapsedTime>
 801592c:	4602      	mov	r2, r0
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	68db      	ldr	r3, [r3, #12]
 8015932:	441a      	add	r2, r3
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	68da      	ldr	r2, [r3, #12]
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	691b      	ldr	r3, [r3, #16]
 8015940:	429a      	cmp	r2, r3
 8015942:	d903      	bls.n	801594c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	691a      	ldr	r2, [r3, #16]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	6a3a      	ldr	r2, [r7, #32]
 8015950:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015952:	89fb      	ldrh	r3, [r7, #14]
}
 8015954:	4618      	mov	r0, r3
 8015956:	3710      	adds	r7, #16
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}

0801595c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801595c:	b480      	push	{r7}
 801595e:	b085      	sub	sp, #20
 8015960:	af00      	add	r7, sp, #0
 8015962:	4603      	mov	r3, r0
 8015964:	460a      	mov	r2, r1
 8015966:	80fb      	strh	r3, [r7, #6]
 8015968:	4613      	mov	r3, r2
 801596a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801596c:	2300      	movs	r3, #0
 801596e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015970:	2300      	movs	r3, #0
 8015972:	73bb      	strb	r3, [r7, #14]
 8015974:	e011      	b.n	801599a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015976:	88fa      	ldrh	r2, [r7, #6]
 8015978:	7bbb      	ldrb	r3, [r7, #14]
 801597a:	2101      	movs	r1, #1
 801597c:	fa01 f303 	lsl.w	r3, r1, r3
 8015980:	401a      	ands	r2, r3
 8015982:	7bbb      	ldrb	r3, [r7, #14]
 8015984:	2101      	movs	r1, #1
 8015986:	fa01 f303 	lsl.w	r3, r1, r3
 801598a:	429a      	cmp	r2, r3
 801598c:	d102      	bne.n	8015994 <CountChannels+0x38>
        {
            nbActiveBits++;
 801598e:	7bfb      	ldrb	r3, [r7, #15]
 8015990:	3301      	adds	r3, #1
 8015992:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015994:	7bbb      	ldrb	r3, [r7, #14]
 8015996:	3301      	adds	r3, #1
 8015998:	73bb      	strb	r3, [r7, #14]
 801599a:	7bba      	ldrb	r2, [r7, #14]
 801599c:	797b      	ldrb	r3, [r7, #5]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d3e9      	bcc.n	8015976 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80159a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80159a4:	4618      	mov	r0, r3
 80159a6:	3714      	adds	r7, #20
 80159a8:	46bd      	mov	sp, r7
 80159aa:	bc80      	pop	{r7}
 80159ac:	4770      	bx	lr

080159ae <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80159ae:	b580      	push	{r7, lr}
 80159b0:	b084      	sub	sp, #16
 80159b2:	af00      	add	r7, sp, #0
 80159b4:	6039      	str	r1, [r7, #0]
 80159b6:	4611      	mov	r1, r2
 80159b8:	461a      	mov	r2, r3
 80159ba:	4603      	mov	r3, r0
 80159bc:	71fb      	strb	r3, [r7, #7]
 80159be:	460b      	mov	r3, r1
 80159c0:	71bb      	strb	r3, [r7, #6]
 80159c2:	4613      	mov	r3, r2
 80159c4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80159c6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80159ca:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80159ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f000 f85d 	bl	8015a92 <RegionCommonValueInRange>
 80159d8:	4603      	mov	r3, r0
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d101      	bne.n	80159e2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 80159de:	2300      	movs	r3, #0
 80159e0:	e053      	b.n	8015a8a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80159e2:	2300      	movs	r3, #0
 80159e4:	73fb      	strb	r3, [r7, #15]
 80159e6:	2300      	movs	r3, #0
 80159e8:	73bb      	strb	r3, [r7, #14]
 80159ea:	e049      	b.n	8015a80 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80159ec:	2300      	movs	r3, #0
 80159ee:	737b      	strb	r3, [r7, #13]
 80159f0:	e03d      	b.n	8015a6e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80159f2:	7bbb      	ldrb	r3, [r7, #14]
 80159f4:	005b      	lsls	r3, r3, #1
 80159f6:	683a      	ldr	r2, [r7, #0]
 80159f8:	4413      	add	r3, r2
 80159fa:	881b      	ldrh	r3, [r3, #0]
 80159fc:	461a      	mov	r2, r3
 80159fe:	7b7b      	ldrb	r3, [r7, #13]
 8015a00:	fa42 f303 	asr.w	r3, r2, r3
 8015a04:	f003 0301 	and.w	r3, r3, #1
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d02d      	beq.n	8015a68 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015a0c:	7bfa      	ldrb	r2, [r7, #15]
 8015a0e:	7b7b      	ldrb	r3, [r7, #13]
 8015a10:	4413      	add	r3, r2
 8015a12:	461a      	mov	r2, r3
 8015a14:	4613      	mov	r3, r2
 8015a16:	005b      	lsls	r3, r3, #1
 8015a18:	4413      	add	r3, r2
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	69fb      	ldr	r3, [r7, #28]
 8015a20:	4413      	add	r3, r2
 8015a22:	7a1b      	ldrb	r3, [r3, #8]
 8015a24:	f343 0303 	sbfx	r3, r3, #0, #4
 8015a28:	b25b      	sxtb	r3, r3
 8015a2a:	f003 030f 	and.w	r3, r3, #15
 8015a2e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015a30:	7bfa      	ldrb	r2, [r7, #15]
 8015a32:	7b7b      	ldrb	r3, [r7, #13]
 8015a34:	4413      	add	r3, r2
 8015a36:	461a      	mov	r2, r3
 8015a38:	4613      	mov	r3, r2
 8015a3a:	005b      	lsls	r3, r3, #1
 8015a3c:	4413      	add	r3, r2
 8015a3e:	009b      	lsls	r3, r3, #2
 8015a40:	461a      	mov	r2, r3
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	4413      	add	r3, r2
 8015a46:	7a1b      	ldrb	r3, [r3, #8]
 8015a48:	f343 1303 	sbfx	r3, r3, #4, #4
 8015a4c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015a4e:	f003 030f 	and.w	r3, r3, #15
 8015a52:	b25a      	sxtb	r2, r3
 8015a54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f000 f81a 	bl	8015a92 <RegionCommonValueInRange>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	2b01      	cmp	r3, #1
 8015a62:	d101      	bne.n	8015a68 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015a64:	2301      	movs	r3, #1
 8015a66:	e010      	b.n	8015a8a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015a68:	7b7b      	ldrb	r3, [r7, #13]
 8015a6a:	3301      	adds	r3, #1
 8015a6c:	737b      	strb	r3, [r7, #13]
 8015a6e:	7b7b      	ldrb	r3, [r7, #13]
 8015a70:	2b0f      	cmp	r3, #15
 8015a72:	d9be      	bls.n	80159f2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015a74:	7bfb      	ldrb	r3, [r7, #15]
 8015a76:	3310      	adds	r3, #16
 8015a78:	73fb      	strb	r3, [r7, #15]
 8015a7a:	7bbb      	ldrb	r3, [r7, #14]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	73bb      	strb	r3, [r7, #14]
 8015a80:	7bfa      	ldrb	r2, [r7, #15]
 8015a82:	79fb      	ldrb	r3, [r7, #7]
 8015a84:	429a      	cmp	r2, r3
 8015a86:	d3b1      	bcc.n	80159ec <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015a88:	2300      	movs	r3, #0
}
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	3710      	adds	r7, #16
 8015a8e:	46bd      	mov	sp, r7
 8015a90:	bd80      	pop	{r7, pc}

08015a92 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015a92:	b480      	push	{r7}
 8015a94:	b083      	sub	sp, #12
 8015a96:	af00      	add	r7, sp, #0
 8015a98:	4603      	mov	r3, r0
 8015a9a:	71fb      	strb	r3, [r7, #7]
 8015a9c:	460b      	mov	r3, r1
 8015a9e:	71bb      	strb	r3, [r7, #6]
 8015aa0:	4613      	mov	r3, r2
 8015aa2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015aa4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015aa8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015aac:	429a      	cmp	r2, r3
 8015aae:	db07      	blt.n	8015ac0 <RegionCommonValueInRange+0x2e>
 8015ab0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015ab4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	dc01      	bgt.n	8015ac0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015abc:	2301      	movs	r3, #1
 8015abe:	e000      	b.n	8015ac2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015ac0:	2300      	movs	r3, #0
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	370c      	adds	r7, #12
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bc80      	pop	{r7}
 8015aca:	4770      	bx	lr

08015acc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015acc:	b480      	push	{r7}
 8015ace:	b085      	sub	sp, #20
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	70fb      	strb	r3, [r7, #3]
 8015ad8:	4613      	mov	r3, r2
 8015ada:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015adc:	78fb      	ldrb	r3, [r7, #3]
 8015ade:	091b      	lsrs	r3, r3, #4
 8015ae0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015ae2:	78bb      	ldrb	r3, [r7, #2]
 8015ae4:	091b      	lsrs	r3, r3, #4
 8015ae6:	b2db      	uxtb	r3, r3
 8015ae8:	7bfa      	ldrb	r2, [r7, #15]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d803      	bhi.n	8015af6 <RegionCommonChanDisable+0x2a>
 8015aee:	78fa      	ldrb	r2, [r7, #3]
 8015af0:	78bb      	ldrb	r3, [r7, #2]
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d301      	bcc.n	8015afa <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015af6:	2300      	movs	r3, #0
 8015af8:	e017      	b.n	8015b2a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015afa:	7bfb      	ldrb	r3, [r7, #15]
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	687a      	ldr	r2, [r7, #4]
 8015b00:	4413      	add	r3, r2
 8015b02:	881b      	ldrh	r3, [r3, #0]
 8015b04:	b21a      	sxth	r2, r3
 8015b06:	78fb      	ldrb	r3, [r7, #3]
 8015b08:	f003 030f 	and.w	r3, r3, #15
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8015b12:	b21b      	sxth	r3, r3
 8015b14:	43db      	mvns	r3, r3
 8015b16:	b21b      	sxth	r3, r3
 8015b18:	4013      	ands	r3, r2
 8015b1a:	b219      	sxth	r1, r3
 8015b1c:	7bfb      	ldrb	r3, [r7, #15]
 8015b1e:	005b      	lsls	r3, r3, #1
 8015b20:	687a      	ldr	r2, [r7, #4]
 8015b22:	4413      	add	r3, r2
 8015b24:	b28a      	uxth	r2, r1
 8015b26:	801a      	strh	r2, [r3, #0]

    return true;
 8015b28:	2301      	movs	r3, #1
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3714      	adds	r7, #20
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bc80      	pop	{r7}
 8015b32:	4770      	bx	lr

08015b34 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b084      	sub	sp, #16
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	460b      	mov	r3, r1
 8015b3e:	70fb      	strb	r3, [r7, #3]
 8015b40:	4613      	mov	r3, r2
 8015b42:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015b44:	2300      	movs	r3, #0
 8015b46:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d101      	bne.n	8015b52 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	e018      	b.n	8015b84 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015b52:	78fb      	ldrb	r3, [r7, #3]
 8015b54:	73bb      	strb	r3, [r7, #14]
 8015b56:	e010      	b.n	8015b7a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015b58:	7bbb      	ldrb	r3, [r7, #14]
 8015b5a:	005b      	lsls	r3, r3, #1
 8015b5c:	687a      	ldr	r2, [r7, #4]
 8015b5e:	4413      	add	r3, r2
 8015b60:	881b      	ldrh	r3, [r3, #0]
 8015b62:	2110      	movs	r1, #16
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7ff fef9 	bl	801595c <CountChannels>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	7bfb      	ldrb	r3, [r7, #15]
 8015b70:	4413      	add	r3, r2
 8015b72:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015b74:	7bbb      	ldrb	r3, [r7, #14]
 8015b76:	3301      	adds	r3, #1
 8015b78:	73bb      	strb	r3, [r7, #14]
 8015b7a:	7bba      	ldrb	r2, [r7, #14]
 8015b7c:	78bb      	ldrb	r3, [r7, #2]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d3ea      	bcc.n	8015b58 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3710      	adds	r7, #16
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}

08015b8c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015b8c:	b480      	push	{r7}
 8015b8e:	b087      	sub	sp, #28
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	60f8      	str	r0, [r7, #12]
 8015b94:	60b9      	str	r1, [r7, #8]
 8015b96:	4613      	mov	r3, r2
 8015b98:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d016      	beq.n	8015bce <RegionCommonChanMaskCopy+0x42>
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d013      	beq.n	8015bce <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015ba6:	2300      	movs	r3, #0
 8015ba8:	75fb      	strb	r3, [r7, #23]
 8015baa:	e00c      	b.n	8015bc6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015bac:	7dfb      	ldrb	r3, [r7, #23]
 8015bae:	005b      	lsls	r3, r3, #1
 8015bb0:	68ba      	ldr	r2, [r7, #8]
 8015bb2:	441a      	add	r2, r3
 8015bb4:	7dfb      	ldrb	r3, [r7, #23]
 8015bb6:	005b      	lsls	r3, r3, #1
 8015bb8:	68f9      	ldr	r1, [r7, #12]
 8015bba:	440b      	add	r3, r1
 8015bbc:	8812      	ldrh	r2, [r2, #0]
 8015bbe:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015bc0:	7dfb      	ldrb	r3, [r7, #23]
 8015bc2:	3301      	adds	r3, #1
 8015bc4:	75fb      	strb	r3, [r7, #23]
 8015bc6:	7dfa      	ldrb	r2, [r7, #23]
 8015bc8:	79fb      	ldrb	r3, [r7, #7]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d3ee      	bcc.n	8015bac <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015bce:	bf00      	nop
 8015bd0:	371c      	adds	r7, #28
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bc80      	pop	{r7}
 8015bd6:	4770      	bx	lr

08015bd8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015bd8:	b082      	sub	sp, #8
 8015bda:	b580      	push	{r7, lr}
 8015bdc:	b086      	sub	sp, #24
 8015bde:	af00      	add	r7, sp, #0
 8015be0:	60f8      	str	r0, [r7, #12]
 8015be2:	60b9      	str	r1, [r7, #8]
 8015be4:	627b      	str	r3, [r7, #36]	; 0x24
 8015be6:	4613      	mov	r3, r2
 8015be8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015bea:	79f9      	ldrb	r1, [r7, #7]
 8015bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bf0:	cb0c      	ldmia	r3, {r2, r3}
 8015bf2:	68f8      	ldr	r0, [r7, #12]
 8015bf4:	f7ff fd8b 	bl	801570e <GetDutyCycle>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	68da      	ldr	r2, [r3, #12]
 8015c00:	8afb      	ldrh	r3, [r7, #22]
 8015c02:	68b9      	ldr	r1, [r7, #8]
 8015c04:	fb01 f303 	mul.w	r3, r1, r3
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d909      	bls.n	8015c20 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	68da      	ldr	r2, [r3, #12]
 8015c10:	8afb      	ldrh	r3, [r7, #22]
 8015c12:	68b9      	ldr	r1, [r7, #8]
 8015c14:	fb01 f303 	mul.w	r3, r1, r3
 8015c18:	1ad2      	subs	r2, r2, r3
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015c1e:	e002      	b.n	8015c26 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	2200      	movs	r2, #0
 8015c24:	60da      	str	r2, [r3, #12]
}
 8015c26:	bf00      	nop
 8015c28:	3718      	adds	r7, #24
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015c30:	b002      	add	sp, #8
 8015c32:	4770      	bx	lr

08015c34 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c36:	b08f      	sub	sp, #60	; 0x3c
 8015c38:	af04      	add	r7, sp, #16
 8015c3a:	6039      	str	r1, [r7, #0]
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	461a      	mov	r2, r3
 8015c40:	4603      	mov	r3, r0
 8015c42:	71fb      	strb	r3, [r7, #7]
 8015c44:	460b      	mov	r3, r1
 8015c46:	71bb      	strb	r3, [r7, #6]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c50:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015c52:	f007 f9a9 	bl	801cfa8 <UTIL_TIMER_GetCurrentTime>
 8015c56:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015c60:	2300      	movs	r3, #0
 8015c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015c66:	2300      	movs	r3, #0
 8015c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015c6c:	e0ba      	b.n	8015de4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015c6e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015c72:	4613      	mov	r3, r2
 8015c74:	005b      	lsls	r3, r3, #1
 8015c76:	4413      	add	r3, r2
 8015c78:	00db      	lsls	r3, r3, #3
 8015c7a:	461a      	mov	r2, r3
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	189c      	adds	r4, r3, r2
 8015c80:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015c84:	797a      	ldrb	r2, [r7, #5]
 8015c86:	79fd      	ldrb	r5, [r7, #7]
 8015c88:	69fb      	ldr	r3, [r7, #28]
 8015c8a:	9302      	str	r3, [sp, #8]
 8015c8c:	46ec      	mov	ip, sp
 8015c8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015c92:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015c96:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015c9a:	4633      	mov	r3, r6
 8015c9c:	4629      	mov	r1, r5
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f7ff fe22 	bl	80158e8 <UpdateTimeCredits>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015ca8:	8afa      	ldrh	r2, [r7, #22]
 8015caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cac:	fb02 f303 	mul.w	r3, r2, r3
 8015cb0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015cb2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	005b      	lsls	r3, r3, #1
 8015cba:	4413      	add	r3, r2
 8015cbc:	00db      	lsls	r3, r3, #3
 8015cbe:	461a      	mov	r2, r3
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	4413      	add	r3, r2
 8015cc4:	68db      	ldr	r3, [r3, #12]
 8015cc6:	69ba      	ldr	r2, [r7, #24]
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d308      	bcc.n	8015cde <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015ccc:	797b      	ldrb	r3, [r7, #5]
 8015cce:	f083 0301 	eor.w	r3, r3, #1
 8015cd2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d013      	beq.n	8015d00 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015cd8:	79fb      	ldrb	r3, [r7, #7]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d010      	beq.n	8015d00 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015cde:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015ce2:	4613      	mov	r3, r2
 8015ce4:	005b      	lsls	r3, r3, #1
 8015ce6:	4413      	add	r3, r2
 8015ce8:	00db      	lsls	r3, r3, #3
 8015cea:	461a      	mov	r2, r3
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	4413      	add	r3, r2
 8015cf0:	2201      	movs	r2, #1
 8015cf2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015cf8:	3301      	adds	r3, #1
 8015cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015cfe:	e06c      	b.n	8015dda <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015d00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d04:	4613      	mov	r3, r2
 8015d06:	005b      	lsls	r3, r3, #1
 8015d08:	4413      	add	r3, r2
 8015d0a:	00db      	lsls	r3, r3, #3
 8015d0c:	461a      	mov	r2, r3
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	4413      	add	r3, r2
 8015d12:	2200      	movs	r2, #0
 8015d14:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015d16:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d1a:	4613      	mov	r3, r2
 8015d1c:	005b      	lsls	r3, r3, #1
 8015d1e:	4413      	add	r3, r2
 8015d20:	00db      	lsls	r3, r3, #3
 8015d22:	461a      	mov	r2, r3
 8015d24:	683b      	ldr	r3, [r7, #0]
 8015d26:	4413      	add	r3, r2
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	69ba      	ldr	r2, [r7, #24]
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d215      	bcs.n	8015d5c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015d30:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015d34:	4613      	mov	r3, r2
 8015d36:	005b      	lsls	r3, r3, #1
 8015d38:	4413      	add	r3, r2
 8015d3a:	00db      	lsls	r3, r3, #3
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	4413      	add	r3, r2
 8015d42:	68db      	ldr	r3, [r3, #12]
 8015d44:	69ba      	ldr	r2, [r7, #24]
 8015d46:	1ad3      	subs	r3, r2, r3
 8015d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d4a:	4293      	cmp	r3, r2
 8015d4c:	bf28      	it	cs
 8015d4e:	4613      	movcs	r3, r2
 8015d50:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015d52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d56:	3301      	adds	r3, #1
 8015d58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015d5c:	79fb      	ldrb	r3, [r7, #7]
 8015d5e:	f083 0301 	eor.w	r3, r3, #1
 8015d62:	b2db      	uxtb	r3, r3
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d038      	beq.n	8015dda <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015d68:	2300      	movs	r3, #0
 8015d6a:	60fb      	str	r3, [r7, #12]
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015d70:	8afb      	ldrh	r3, [r7, #22]
 8015d72:	2b64      	cmp	r3, #100	; 0x64
 8015d74:	d103      	bne.n	8015d7e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015d76:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015d7a:	60fb      	str	r3, [r7, #12]
 8015d7c:	e009      	b.n	8015d92 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015d7e:	8afb      	ldrh	r3, [r7, #22]
 8015d80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015d84:	d103      	bne.n	8015d8e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015d86:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015d8a:	60fb      	str	r3, [r7, #12]
 8015d8c:	e001      	b.n	8015d92 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015d8e:	4b1e      	ldr	r3, [pc, #120]	; (8015e08 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d90:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d94:	4a1c      	ldr	r2, [pc, #112]	; (8015e08 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015d96:	4293      	cmp	r3, r2
 8015d98:	d90e      	bls.n	8015db8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8015d9a:	68fa      	ldr	r2, [r7, #12]
 8015d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d9e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015da2:	3b30      	subs	r3, #48	; 0x30
 8015da4:	4919      	ldr	r1, [pc, #100]	; (8015e0c <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015da6:	fba1 1303 	umull	r1, r3, r1, r3
 8015daa:	0c1b      	lsrs	r3, r3, #16
 8015dac:	3301      	adds	r3, #1
 8015dae:	4918      	ldr	r1, [pc, #96]	; (8015e10 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015db0:	fb01 f303 	mul.w	r3, r1, r3
 8015db4:	4413      	add	r3, r2
 8015db6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015db8:	f107 000c 	add.w	r0, r7, #12
 8015dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dc2:	f107 020c 	add.w	r2, r7, #12
 8015dc6:	ca06      	ldmia	r2, {r1, r2}
 8015dc8:	f006 fb09 	bl	801c3de <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8015dcc:	f107 030c 	add.w	r3, r7, #12
 8015dd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015dd4:	f006 fbc2 	bl	801c55c <SysTimeToMs>
 8015dd8:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8015dda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015dde:	3301      	adds	r3, #1
 8015de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015de4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015de8:	79bb      	ldrb	r3, [r7, #6]
 8015dea:	429a      	cmp	r2, r3
 8015dec:	f4ff af3f 	bcc.w	8015c6e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8015df0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d102      	bne.n	8015dfe <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8015df8:	f04f 33ff 	mov.w	r3, #4294967295
 8015dfc:	e000      	b.n	8015e00 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8015dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	372c      	adds	r7, #44	; 0x2c
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e08:	0001ec30 	.word	0x0001ec30
 8015e0c:	c22e4507 	.word	0xc22e4507
 8015e10:	00015180 	.word	0x00015180

08015e14 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8015e14:	b480      	push	{r7}
 8015e16:	b085      	sub	sp, #20
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	2b03      	cmp	r3, #3
 8015e28:	d13f      	bne.n	8015eaa <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	781b      	ldrb	r3, [r3, #0]
 8015e30:	b25a      	sxtb	r2, r3
 8015e32:	683b      	ldr	r3, [r7, #0]
 8015e34:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e3c:	f003 030f 	and.w	r3, r3, #15
 8015e40:	b25a      	sxtb	r2, r3
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e4c:	b2db      	uxtb	r3, r3
 8015e4e:	091b      	lsrs	r3, r3, #4
 8015e50:	b2db      	uxtb	r3, r3
 8015e52:	b25a      	sxtb	r2, r3
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	3302      	adds	r3, #2
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	b29a      	uxth	r2, r3
 8015e60:	683b      	ldr	r3, [r7, #0]
 8015e62:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015e64:	683b      	ldr	r3, [r7, #0]
 8015e66:	889b      	ldrh	r3, [r3, #4]
 8015e68:	b21a      	sxth	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	3303      	adds	r3, #3
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	021b      	lsls	r3, r3, #8
 8015e72:	b21b      	sxth	r3, r3
 8015e74:	4313      	orrs	r3, r2
 8015e76:	b21b      	sxth	r3, r3
 8015e78:	b29a      	uxth	r2, r3
 8015e7a:	683b      	ldr	r3, [r7, #0]
 8015e7c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	791a      	ldrb	r2, [r3, #4]
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	091b      	lsrs	r3, r3, #4
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	f003 0307 	and.w	r3, r3, #7
 8015e92:	b2da      	uxtb	r2, r3
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015e98:	683b      	ldr	r3, [r7, #0]
 8015e9a:	781b      	ldrb	r3, [r3, #0]
 8015e9c:	f003 030f 	and.w	r3, r3, #15
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015ea6:	2305      	movs	r3, #5
 8015ea8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8015eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eac:	4618      	mov	r0, r3
 8015eae:	3714      	adds	r7, #20
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	bc80      	pop	{r7}
 8015eb4:	4770      	bx	lr

08015eb6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015eb6:	b5b0      	push	{r4, r5, r7, lr}
 8015eb8:	b088      	sub	sp, #32
 8015eba:	af02      	add	r7, sp, #8
 8015ebc:	60f8      	str	r0, [r7, #12]
 8015ebe:	60b9      	str	r1, [r7, #8]
 8015ec0:	607a      	str	r2, [r7, #4]
 8015ec2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	791b      	ldrb	r3, [r3, #4]
 8015ec8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	799b      	ldrb	r3, [r3, #6]
 8015ece:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	79db      	ldrb	r3, [r3, #7]
 8015ed4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	7a1b      	ldrb	r3, [r3, #8]
 8015eda:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	795b      	ldrb	r3, [r3, #5]
 8015ee0:	f083 0301 	eor.w	r3, r3, #1
 8015ee4:	b2db      	uxtb	r3, r3
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d008      	beq.n	8015efc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	7adb      	ldrb	r3, [r3, #11]
 8015eee:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	7a5b      	ldrb	r3, [r3, #9]
 8015ef4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	7a9b      	ldrb	r3, [r3, #10]
 8015efa:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8015efc:	7dfb      	ldrb	r3, [r7, #23]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d04a      	beq.n	8015f98 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8015f02:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015f06:	2b0f      	cmp	r3, #15
 8015f08:	d103      	bne.n	8015f12 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	7a5b      	ldrb	r3, [r3, #9]
 8015f0e:	75bb      	strb	r3, [r7, #22]
 8015f10:	e01d      	b.n	8015f4e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	7b18      	ldrb	r0, [r3, #12]
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	6919      	ldr	r1, [r3, #16]
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015f26:	68fa      	ldr	r2, [r7, #12]
 8015f28:	6992      	ldr	r2, [r2, #24]
 8015f2a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8015f2e:	9201      	str	r2, [sp, #4]
 8015f30:	9300      	str	r3, [sp, #0]
 8015f32:	462b      	mov	r3, r5
 8015f34:	4622      	mov	r2, r4
 8015f36:	f7ff fd3a 	bl	80159ae <RegionCommonChanVerifyDr>
 8015f3a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015f3c:	f083 0301 	eor.w	r3, r3, #1
 8015f40:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d003      	beq.n	8015f4e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015f46:	7dfb      	ldrb	r3, [r7, #23]
 8015f48:	f023 0302 	bic.w	r3, r3, #2
 8015f4c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8015f4e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015f52:	2b0f      	cmp	r3, #15
 8015f54:	d103      	bne.n	8015f5e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	7a9b      	ldrb	r3, [r3, #10]
 8015f5a:	757b      	strb	r3, [r7, #21]
 8015f5c:	e01c      	b.n	8015f98 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015f6a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7ff fd8f 	bl	8015a92 <RegionCommonValueInRange>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d10e      	bne.n	8015f98 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015f80:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015f84:	429a      	cmp	r2, r3
 8015f86:	da03      	bge.n	8015f90 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	7f5b      	ldrb	r3, [r3, #29]
 8015f8c:	757b      	strb	r3, [r7, #21]
 8015f8e:	e003      	b.n	8015f98 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015f90:	7dfb      	ldrb	r3, [r7, #23]
 8015f92:	f023 0304 	bic.w	r3, r3, #4
 8015f96:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015f98:	7dfb      	ldrb	r3, [r7, #23]
 8015f9a:	2b07      	cmp	r3, #7
 8015f9c:	d105      	bne.n	8015faa <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8015f9e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d101      	bne.n	8015faa <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015fa6:	2301      	movs	r3, #1
 8015fa8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8015faa:	68bb      	ldr	r3, [r7, #8]
 8015fac:	7dba      	ldrb	r2, [r7, #22]
 8015fae:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	7d7a      	ldrb	r2, [r7, #21]
 8015fb4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015fb6:	7d3a      	ldrb	r2, [r7, #20]
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	701a      	strb	r2, [r3, #0]

    return status;
 8015fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3718      	adds	r7, #24
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015fc8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015fc8:	b480      	push	{r7}
 8015fca:	b083      	sub	sp, #12
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	6039      	str	r1, [r7, #0]
 8015fd2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015fd4:	79fb      	ldrb	r3, [r7, #7]
 8015fd6:	4a06      	ldr	r2, [pc, #24]	; (8015ff0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8015fdc:	461a      	mov	r2, r3
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	370c      	adds	r7, #12
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bc80      	pop	{r7}
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	000f4240 	.word	0x000f4240

08015ff4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b083      	sub	sp, #12
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8015ffe:	79fb      	ldrb	r3, [r7, #7]
 8016000:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8016004:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016008:	4618      	mov	r0, r3
 801600a:	370c      	adds	r7, #12
 801600c:	46bd      	mov	sp, r7
 801600e:	bc80      	pop	{r7}
 8016010:	4770      	bx	lr
	...

08016014 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8016014:	b480      	push	{r7}
 8016016:	b085      	sub	sp, #20
 8016018:	af00      	add	r7, sp, #0
 801601a:	60f8      	str	r0, [r7, #12]
 801601c:	607a      	str	r2, [r7, #4]
 801601e:	603b      	str	r3, [r7, #0]
 8016020:	460b      	mov	r3, r1
 8016022:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8016024:	7afa      	ldrb	r2, [r7, #11]
 8016026:	7afb      	ldrb	r3, [r7, #11]
 8016028:	3b04      	subs	r3, #4
 801602a:	4619      	mov	r1, r3
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	fb03 f101 	mul.w	r1, r3, r1
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016038:	fb00 f303 	mul.w	r3, r0, r3
 801603c:	440b      	add	r3, r1
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	2b00      	cmp	r3, #0
 8016042:	d013      	beq.n	801606c <RegionCommonComputeRxWindowParameters+0x58>
 8016044:	7afb      	ldrb	r3, [r7, #11]
 8016046:	3b04      	subs	r3, #4
 8016048:	4619      	mov	r1, r3
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	fb03 f101 	mul.w	r1, r3, r1
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016056:	fb00 f303 	mul.w	r3, r0, r3
 801605a:	440b      	add	r3, r1
 801605c:	0059      	lsls	r1, r3, #1
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	440b      	add	r3, r1
 8016062:	1e59      	subs	r1, r3, #1
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	fbb1 f3f3 	udiv	r3, r1, r3
 801606a:	e00f      	b.n	801608c <RegionCommonComputeRxWindowParameters+0x78>
 801606c:	7afb      	ldrb	r3, [r7, #11]
 801606e:	3b04      	subs	r3, #4
 8016070:	4619      	mov	r1, r3
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	fb03 f101 	mul.w	r1, r3, r1
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801607e:	fb00 f303 	mul.w	r3, r0, r3
 8016082:	440b      	add	r3, r1
 8016084:	0059      	lsls	r1, r3, #1
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	fbb1 f3f3 	udiv	r3, r1, r3
 801608c:	429a      	cmp	r2, r3
 801608e:	bf38      	it	cc
 8016090:	461a      	movcc	r2, r3
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	009b      	lsls	r3, r3, #2
 801609a:	4619      	mov	r1, r3
 801609c:	69bb      	ldr	r3, [r7, #24]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	68fa      	ldr	r2, [r7, #12]
 80160a2:	fb02 f303 	mul.w	r3, r2, r3
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d007      	beq.n	80160ba <RegionCommonComputeRxWindowParameters+0xa6>
 80160aa:	69bb      	ldr	r3, [r7, #24]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	68fa      	ldr	r2, [r7, #12]
 80160b0:	fb02 f303 	mul.w	r3, r2, r3
 80160b4:	3301      	adds	r3, #1
 80160b6:	085b      	lsrs	r3, r3, #1
 80160b8:	e005      	b.n	80160c6 <RegionCommonComputeRxWindowParameters+0xb2>
 80160ba:	69bb      	ldr	r3, [r7, #24]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	68fa      	ldr	r2, [r7, #12]
 80160c0:	fb02 f303 	mul.w	r3, r2, r3
 80160c4:	085b      	lsrs	r3, r3, #1
 80160c6:	1acb      	subs	r3, r1, r3
 80160c8:	683a      	ldr	r2, [r7, #0]
 80160ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80160ce:	fb01 f202 	mul.w	r2, r1, r2
 80160d2:	1a9b      	subs	r3, r3, r2
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	dd27      	ble.n	8016128 <RegionCommonComputeRxWindowParameters+0x114>
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	009b      	lsls	r3, r3, #2
 80160dc:	4619      	mov	r1, r3
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	68fa      	ldr	r2, [r7, #12]
 80160e4:	fb02 f303 	mul.w	r3, r2, r3
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d007      	beq.n	80160fc <RegionCommonComputeRxWindowParameters+0xe8>
 80160ec:	69bb      	ldr	r3, [r7, #24]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	68fa      	ldr	r2, [r7, #12]
 80160f2:	fb02 f303 	mul.w	r3, r2, r3
 80160f6:	3301      	adds	r3, #1
 80160f8:	085b      	lsrs	r3, r3, #1
 80160fa:	e005      	b.n	8016108 <RegionCommonComputeRxWindowParameters+0xf4>
 80160fc:	69bb      	ldr	r3, [r7, #24]
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	68fa      	ldr	r2, [r7, #12]
 8016102:	fb02 f303 	mul.w	r3, r2, r3
 8016106:	085b      	lsrs	r3, r3, #1
 8016108:	1acb      	subs	r3, r1, r3
 801610a:	683a      	ldr	r2, [r7, #0]
 801610c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016110:	fb01 f202 	mul.w	r2, r1, r2
 8016114:	1a9b      	subs	r3, r3, r2
 8016116:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801611a:	4a19      	ldr	r2, [pc, #100]	; (8016180 <RegionCommonComputeRxWindowParameters+0x16c>)
 801611c:	fb82 1203 	smull	r1, r2, r2, r3
 8016120:	1192      	asrs	r2, r2, #6
 8016122:	17db      	asrs	r3, r3, #31
 8016124:	1ad3      	subs	r3, r2, r3
 8016126:	e024      	b.n	8016172 <RegionCommonComputeRxWindowParameters+0x15e>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	4619      	mov	r1, r3
 801612e:	69bb      	ldr	r3, [r7, #24]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	68fa      	ldr	r2, [r7, #12]
 8016134:	fb02 f303 	mul.w	r3, r2, r3
 8016138:	2b00      	cmp	r3, #0
 801613a:	d007      	beq.n	801614c <RegionCommonComputeRxWindowParameters+0x138>
 801613c:	69bb      	ldr	r3, [r7, #24]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	68fa      	ldr	r2, [r7, #12]
 8016142:	fb02 f303 	mul.w	r3, r2, r3
 8016146:	3301      	adds	r3, #1
 8016148:	085b      	lsrs	r3, r3, #1
 801614a:	e005      	b.n	8016158 <RegionCommonComputeRxWindowParameters+0x144>
 801614c:	69bb      	ldr	r3, [r7, #24]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	68fa      	ldr	r2, [r7, #12]
 8016152:	fb02 f303 	mul.w	r3, r2, r3
 8016156:	085b      	lsrs	r3, r3, #1
 8016158:	1acb      	subs	r3, r1, r3
 801615a:	683a      	ldr	r2, [r7, #0]
 801615c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016160:	fb01 f202 	mul.w	r2, r1, r2
 8016164:	1a9b      	subs	r3, r3, r2
 8016166:	4a06      	ldr	r2, [pc, #24]	; (8016180 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016168:	fb82 1203 	smull	r1, r2, r2, r3
 801616c:	1192      	asrs	r2, r2, #6
 801616e:	17db      	asrs	r3, r3, #31
 8016170:	1ad3      	subs	r3, r2, r3
 8016172:	69fa      	ldr	r2, [r7, #28]
 8016174:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8016176:	bf00      	nop
 8016178:	3714      	adds	r7, #20
 801617a:	46bd      	mov	sp, r7
 801617c:	bc80      	pop	{r7}
 801617e:	4770      	bx	lr
 8016180:	10624dd3 	.word	0x10624dd3

08016184 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b086      	sub	sp, #24
 8016188:	af00      	add	r7, sp, #0
 801618a:	4603      	mov	r3, r0
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	607a      	str	r2, [r7, #4]
 8016190:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8016192:	2300      	movs	r3, #0
 8016194:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8016196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801619a:	005b      	lsls	r3, r3, #1
 801619c:	4618      	mov	r0, r3
 801619e:	f7ea fb69 	bl	8000874 <__aeabi_ui2f>
 80161a2:	4603      	mov	r3, r0
 80161a4:	4619      	mov	r1, r3
 80161a6:	68b8      	ldr	r0, [r7, #8]
 80161a8:	f7ea fab2 	bl	8000710 <__aeabi_fsub>
 80161ac:	4603      	mov	r3, r0
 80161ae:	6879      	ldr	r1, [r7, #4]
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7ea faad 	bl	8000710 <__aeabi_fsub>
 80161b6:	4603      	mov	r3, r0
 80161b8:	4618      	mov	r0, r3
 80161ba:	f7ea f99d 	bl	80004f8 <__aeabi_f2d>
 80161be:	4602      	mov	r2, r0
 80161c0:	460b      	mov	r3, r1
 80161c2:	4610      	mov	r0, r2
 80161c4:	4619      	mov	r1, r3
 80161c6:	f007 fef7 	bl	801dfb8 <floor>
 80161ca:	4602      	mov	r2, r0
 80161cc:	460b      	mov	r3, r1
 80161ce:	4610      	mov	r0, r2
 80161d0:	4619      	mov	r1, r3
 80161d2:	f7ea fa71 	bl	80006b8 <__aeabi_d2iz>
 80161d6:	4603      	mov	r3, r0
 80161d8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80161da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3718      	adds	r7, #24
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd80      	pop	{r7, pc}

080161e6 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80161e6:	b590      	push	{r4, r7, lr}
 80161e8:	b087      	sub	sp, #28
 80161ea:	af00      	add	r7, sp, #0
 80161ec:	60f8      	str	r0, [r7, #12]
 80161ee:	60b9      	str	r1, [r7, #8]
 80161f0:	607a      	str	r2, [r7, #4]
 80161f2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80161f4:	2300      	movs	r3, #0
 80161f6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80161fc:	2300      	movs	r3, #0
 80161fe:	757b      	strb	r3, [r7, #21]
 8016200:	2300      	movs	r3, #0
 8016202:	753b      	strb	r3, [r7, #20]
 8016204:	e09c      	b.n	8016340 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8016206:	2300      	movs	r3, #0
 8016208:	74fb      	strb	r3, [r7, #19]
 801620a:	e08f      	b.n	801632c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	685a      	ldr	r2, [r3, #4]
 8016210:	7d3b      	ldrb	r3, [r7, #20]
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	4413      	add	r3, r2
 8016216:	881b      	ldrh	r3, [r3, #0]
 8016218:	461a      	mov	r2, r3
 801621a:	7cfb      	ldrb	r3, [r7, #19]
 801621c:	fa42 f303 	asr.w	r3, r2, r3
 8016220:	f003 0301 	and.w	r3, r3, #1
 8016224:	2b00      	cmp	r3, #0
 8016226:	d07e      	beq.n	8016326 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	689a      	ldr	r2, [r3, #8]
 801622c:	7d79      	ldrb	r1, [r7, #21]
 801622e:	7cfb      	ldrb	r3, [r7, #19]
 8016230:	440b      	add	r3, r1
 8016232:	4619      	mov	r1, r3
 8016234:	460b      	mov	r3, r1
 8016236:	005b      	lsls	r3, r3, #1
 8016238:	440b      	add	r3, r1
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	4413      	add	r3, r2
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d06b      	beq.n	801631c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	f083 0301 	eor.w	r3, r3, #1
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b00      	cmp	r3, #0
 8016250:	d011      	beq.n	8016276 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00d      	beq.n	8016276 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	695a      	ldr	r2, [r3, #20]
 801625e:	7d3b      	ldrb	r3, [r7, #20]
 8016260:	005b      	lsls	r3, r3, #1
 8016262:	4413      	add	r3, r2
 8016264:	881b      	ldrh	r3, [r3, #0]
 8016266:	461a      	mov	r2, r3
 8016268:	7cfb      	ldrb	r3, [r7, #19]
 801626a:	fa42 f303 	asr.w	r3, r2, r3
 801626e:	f003 0301 	and.w	r3, r3, #1
 8016272:	2b00      	cmp	r3, #0
 8016274:	d054      	beq.n	8016320 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	785b      	ldrb	r3, [r3, #1]
 801627a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	689a      	ldr	r2, [r3, #8]
 8016280:	7d79      	ldrb	r1, [r7, #21]
 8016282:	7cfb      	ldrb	r3, [r7, #19]
 8016284:	440b      	add	r3, r1
 8016286:	4619      	mov	r1, r3
 8016288:	460b      	mov	r3, r1
 801628a:	005b      	lsls	r3, r3, #1
 801628c:	440b      	add	r3, r1
 801628e:	009b      	lsls	r3, r3, #2
 8016290:	4413      	add	r3, r2
 8016292:	7a1b      	ldrb	r3, [r3, #8]
 8016294:	f343 0303 	sbfx	r3, r3, #0, #4
 8016298:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801629a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	689a      	ldr	r2, [r3, #8]
 80162a0:	7d79      	ldrb	r1, [r7, #21]
 80162a2:	7cfb      	ldrb	r3, [r7, #19]
 80162a4:	440b      	add	r3, r1
 80162a6:	4619      	mov	r1, r3
 80162a8:	460b      	mov	r3, r1
 80162aa:	005b      	lsls	r3, r3, #1
 80162ac:	440b      	add	r3, r1
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	4413      	add	r3, r2
 80162b2:	7a1b      	ldrb	r3, [r3, #8]
 80162b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80162b8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80162ba:	461a      	mov	r2, r3
 80162bc:	4621      	mov	r1, r4
 80162be:	f7ff fbe8 	bl	8015a92 <RegionCommonValueInRange>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d02d      	beq.n	8016324 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	68da      	ldr	r2, [r3, #12]
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	6899      	ldr	r1, [r3, #8]
 80162d0:	7d78      	ldrb	r0, [r7, #21]
 80162d2:	7cfb      	ldrb	r3, [r7, #19]
 80162d4:	4403      	add	r3, r0
 80162d6:	4618      	mov	r0, r3
 80162d8:	4603      	mov	r3, r0
 80162da:	005b      	lsls	r3, r3, #1
 80162dc:	4403      	add	r3, r0
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	440b      	add	r3, r1
 80162e2:	7a5b      	ldrb	r3, [r3, #9]
 80162e4:	4619      	mov	r1, r3
 80162e6:	460b      	mov	r3, r1
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	440b      	add	r3, r1
 80162ec:	00db      	lsls	r3, r3, #3
 80162ee:	4413      	add	r3, r2
 80162f0:	7d1b      	ldrb	r3, [r3, #20]
 80162f2:	f083 0301 	eor.w	r3, r3, #1
 80162f6:	b2db      	uxtb	r3, r3
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d003      	beq.n	8016304 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80162fc:	7dbb      	ldrb	r3, [r7, #22]
 80162fe:	3301      	adds	r3, #1
 8016300:	75bb      	strb	r3, [r7, #22]
                    continue;
 8016302:	e010      	b.n	8016326 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8016304:	7dfb      	ldrb	r3, [r7, #23]
 8016306:	1c5a      	adds	r2, r3, #1
 8016308:	75fa      	strb	r2, [r7, #23]
 801630a:	461a      	mov	r2, r3
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	4413      	add	r3, r2
 8016310:	7d79      	ldrb	r1, [r7, #21]
 8016312:	7cfa      	ldrb	r2, [r7, #19]
 8016314:	440a      	add	r2, r1
 8016316:	b2d2      	uxtb	r2, r2
 8016318:	701a      	strb	r2, [r3, #0]
 801631a:	e004      	b.n	8016326 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801631c:	bf00      	nop
 801631e:	e002      	b.n	8016326 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016320:	bf00      	nop
 8016322:	e000      	b.n	8016326 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016324:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8016326:	7cfb      	ldrb	r3, [r7, #19]
 8016328:	3301      	adds	r3, #1
 801632a:	74fb      	strb	r3, [r7, #19]
 801632c:	7cfb      	ldrb	r3, [r7, #19]
 801632e:	2b0f      	cmp	r3, #15
 8016330:	f67f af6c 	bls.w	801620c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016334:	7d7b      	ldrb	r3, [r7, #21]
 8016336:	3310      	adds	r3, #16
 8016338:	757b      	strb	r3, [r7, #21]
 801633a:	7d3b      	ldrb	r3, [r7, #20]
 801633c:	3301      	adds	r3, #1
 801633e:	753b      	strb	r3, [r7, #20]
 8016340:	7d7b      	ldrb	r3, [r7, #21]
 8016342:	b29a      	uxth	r2, r3
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	8a1b      	ldrh	r3, [r3, #16]
 8016348:	429a      	cmp	r2, r3
 801634a:	f4ff af5c 	bcc.w	8016206 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	7dfa      	ldrb	r2, [r7, #23]
 8016352:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	7dba      	ldrb	r2, [r7, #22]
 8016358:	701a      	strb	r2, [r3, #0]
}
 801635a:	bf00      	nop
 801635c:	371c      	adds	r7, #28
 801635e:	46bd      	mov	sp, r7
 8016360:	bd90      	pop	{r4, r7, pc}

08016362 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8016362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016364:	b08b      	sub	sp, #44	; 0x2c
 8016366:	af04      	add	r7, sp, #16
 8016368:	60f8      	str	r0, [r7, #12]
 801636a:	60b9      	str	r1, [r7, #8]
 801636c:	607a      	str	r2, [r7, #4]
 801636e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	685b      	ldr	r3, [r3, #4]
 8016374:	4618      	mov	r0, r3
 8016376:	f006 fe29 	bl	801cfcc <UTIL_TIMER_GetElapsedTime>
 801637a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	681a      	ldr	r2, [r3, #0]
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	1ad2      	subs	r2, r2, r3
 8016384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016386:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8016388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638a:	2201      	movs	r2, #1
 801638c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801638e:	683b      	ldr	r3, [r7, #0]
 8016390:	2200      	movs	r2, #0
 8016392:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	685b      	ldr	r3, [r3, #4]
 8016398:	2b00      	cmp	r3, #0
 801639a:	d004      	beq.n	80163a6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80163a0:	697a      	ldr	r2, [r7, #20]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	d32b      	bcc.n	80163fe <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	2200      	movs	r2, #0
 80163aa:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	69db      	ldr	r3, [r3, #28]
 80163b0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80163b6:	68dd      	ldr	r5, [r3, #12]
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	7a5e      	ldrb	r6, [r3, #9]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	f893 c008 	ldrb.w	ip, [r3, #8]
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	7d1b      	ldrb	r3, [r3, #20]
 80163c6:	68fa      	ldr	r2, [r7, #12]
 80163c8:	6992      	ldr	r2, [r2, #24]
 80163ca:	9203      	str	r2, [sp, #12]
 80163cc:	68fa      	ldr	r2, [r7, #12]
 80163ce:	f10d 0e04 	add.w	lr, sp, #4
 80163d2:	320c      	adds	r2, #12
 80163d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80163d8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80163dc:	9300      	str	r3, [sp, #0]
 80163de:	4663      	mov	r3, ip
 80163e0:	4632      	mov	r2, r6
 80163e2:	4629      	mov	r1, r5
 80163e4:	4620      	mov	r0, r4
 80163e6:	f7ff fc25 	bl	8015c34 <RegionCommonUpdateBandTimeOff>
 80163ea:	4602      	mov	r2, r0
 80163ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ee:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	69d8      	ldr	r0, [r3, #28]
 80163f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f6:	683a      	ldr	r2, [r7, #0]
 80163f8:	6879      	ldr	r1, [r7, #4]
 80163fa:	f7ff fef4 	bl	80161e6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80163fe:	683b      	ldr	r3, [r7, #0]
 8016400:	781b      	ldrb	r3, [r3, #0]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d004      	beq.n	8016410 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8016406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016408:	2200      	movs	r2, #0
 801640a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801640c:	2300      	movs	r3, #0
 801640e:	e006      	b.n	801641e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016412:	781b      	ldrb	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d001      	beq.n	801641c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016418:	230b      	movs	r3, #11
 801641a:	e000      	b.n	801641e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801641c:	230c      	movs	r3, #12
    }
}
 801641e:	4618      	mov	r0, r3
 8016420:	371c      	adds	r7, #28
 8016422:	46bd      	mov	sp, r7
 8016424:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016426 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8016426:	b5b0      	push	{r4, r5, r7, lr}
 8016428:	b086      	sub	sp, #24
 801642a:	af02      	add	r7, sp, #8
 801642c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f993 2000 	ldrsb.w	r2, [r3]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016440:	429a      	cmp	r2, r3
 8016442:	d103      	bne.n	801644c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801644a:	e026      	b.n	801649a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801644c:	7bfb      	ldrb	r3, [r7, #15]
 801644e:	3b01      	subs	r3, #1
 8016450:	b2db      	uxtb	r3, r3
 8016452:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801645a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801645e:	429a      	cmp	r2, r3
 8016460:	d019      	beq.n	8016496 <RegionCommonGetNextLowerTxDr+0x70>
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	78d8      	ldrb	r0, [r3, #3]
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	6859      	ldr	r1, [r3, #4]
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016476:	687a      	ldr	r2, [r7, #4]
 8016478:	6892      	ldr	r2, [r2, #8]
 801647a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801647e:	9201      	str	r2, [sp, #4]
 8016480:	9300      	str	r3, [sp, #0]
 8016482:	462b      	mov	r3, r5
 8016484:	4622      	mov	r2, r4
 8016486:	f7ff fa92 	bl	80159ae <RegionCommonChanVerifyDr>
 801648a:	4603      	mov	r3, r0
 801648c:	f083 0301 	eor.w	r3, r3, #1
 8016490:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8016492:	2b00      	cmp	r3, #0
 8016494:	d1da      	bne.n	801644c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8016496:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801649a:	4618      	mov	r0, r3
 801649c:	3710      	adds	r7, #16
 801649e:	46bd      	mov	sp, r7
 80164a0:	bdb0      	pop	{r4, r5, r7, pc}

080164a2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80164a2:	b480      	push	{r7}
 80164a4:	b083      	sub	sp, #12
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	4603      	mov	r3, r0
 80164aa:	460a      	mov	r2, r1
 80164ac:	71fb      	strb	r3, [r7, #7]
 80164ae:	4613      	mov	r3, r2
 80164b0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80164b2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80164b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80164ba:	4293      	cmp	r3, r2
 80164bc:	bfb8      	it	lt
 80164be:	4613      	movlt	r3, r2
 80164c0:	b25b      	sxtb	r3, r3
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	370c      	adds	r7, #12
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bc80      	pop	{r7}
 80164ca:	4770      	bx	lr

080164cc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80164cc:	b480      	push	{r7}
 80164ce:	b083      	sub	sp, #12
 80164d0:	af00      	add	r7, sp, #0
 80164d2:	6078      	str	r0, [r7, #4]
 80164d4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	009b      	lsls	r3, r3, #2
 80164da:	683a      	ldr	r2, [r7, #0]
 80164dc:	4413      	add	r3, r2
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a07      	ldr	r2, [pc, #28]	; (8016500 <RegionCommonGetBandwidth+0x34>)
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d004      	beq.n	80164f0 <RegionCommonGetBandwidth+0x24>
 80164e6:	4a07      	ldr	r2, [pc, #28]	; (8016504 <RegionCommonGetBandwidth+0x38>)
 80164e8:	4293      	cmp	r3, r2
 80164ea:	d003      	beq.n	80164f4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80164ec:	2300      	movs	r3, #0
 80164ee:	e002      	b.n	80164f6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80164f0:	2301      	movs	r3, #1
 80164f2:	e000      	b.n	80164f6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80164f4:	2302      	movs	r3, #2
    }
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	370c      	adds	r7, #12
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bc80      	pop	{r7}
 80164fe:	4770      	bx	lr
 8016500:	0003d090 	.word	0x0003d090
 8016504:	0007a120 	.word	0x0007a120

08016508 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b086      	sub	sp, #24
 801650c:	af04      	add	r7, sp, #16
 801650e:	4603      	mov	r3, r0
 8016510:	6039      	str	r1, [r7, #0]
 8016512:	71fb      	strb	r3, [r7, #7]
 8016514:	4613      	mov	r3, r2
 8016516:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016518:	79fb      	ldrb	r3, [r7, #7]
 801651a:	2b05      	cmp	r3, #5
 801651c:	d810      	bhi.n	8016540 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801651e:	79fb      	ldrb	r3, [r7, #7]
 8016520:	4a0f      	ldr	r2, [pc, #60]	; (8016560 <RegionCommonRxConfigPrint+0x58>)
 8016522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016526:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801652a:	9202      	str	r2, [sp, #8]
 801652c:	683a      	ldr	r2, [r7, #0]
 801652e:	9201      	str	r2, [sp, #4]
 8016530:	9300      	str	r3, [sp, #0]
 8016532:	4b0c      	ldr	r3, [pc, #48]	; (8016564 <RegionCommonRxConfigPrint+0x5c>)
 8016534:	2201      	movs	r2, #1
 8016536:	2100      	movs	r1, #0
 8016538:	2002      	movs	r0, #2
 801653a:	f006 fe25 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801653e:	e00a      	b.n	8016556 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016540:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8016544:	9301      	str	r3, [sp, #4]
 8016546:	683b      	ldr	r3, [r7, #0]
 8016548:	9300      	str	r3, [sp, #0]
 801654a:	4b07      	ldr	r3, [pc, #28]	; (8016568 <RegionCommonRxConfigPrint+0x60>)
 801654c:	2201      	movs	r2, #1
 801654e:	2100      	movs	r1, #0
 8016550:	2002      	movs	r0, #2
 8016552:	f006 fe19 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 8016556:	bf00      	nop
 8016558:	3708      	adds	r7, #8
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}
 801655e:	bf00      	nop
 8016560:	20000128 	.word	0x20000128
 8016564:	0801e898 	.word	0x0801e898
 8016568:	0801e8b8 	.word	0x0801e8b8

0801656c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af02      	add	r7, sp, #8
 8016572:	6078      	str	r0, [r7, #4]
 8016574:	460b      	mov	r3, r1
 8016576:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8016578:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801657c:	9301      	str	r3, [sp, #4]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	9300      	str	r3, [sp, #0]
 8016582:	4b05      	ldr	r3, [pc, #20]	; (8016598 <RegionCommonTxConfigPrint+0x2c>)
 8016584:	2201      	movs	r2, #1
 8016586:	2100      	movs	r1, #0
 8016588:	2002      	movs	r0, #2
 801658a:	f006 fdfd 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
}
 801658e:	bf00      	nop
 8016590:	3708      	adds	r7, #8
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	0801e8d4 	.word	0x0801e8d4

0801659c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b082      	sub	sp, #8
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
 80165a4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80165a6:	4b2d      	ldr	r3, [pc, #180]	; (801665c <VerifyRfFreq+0xc0>)
 80165a8:	6a1b      	ldr	r3, [r3, #32]
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	4798      	blx	r3
 80165ae:	4603      	mov	r3, r0
 80165b0:	f083 0301 	eor.w	r3, r3, #1
 80165b4:	b2db      	uxtb	r3, r3
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d001      	beq.n	80165be <VerifyRfFreq+0x22>
    {
        return false;
 80165ba:	2300      	movs	r3, #0
 80165bc:	e04a      	b.n	8016654 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	4a27      	ldr	r2, [pc, #156]	; (8016660 <VerifyRfFreq+0xc4>)
 80165c2:	4293      	cmp	r3, r2
 80165c4:	d307      	bcc.n	80165d6 <VerifyRfFreq+0x3a>
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	4a26      	ldr	r2, [pc, #152]	; (8016664 <VerifyRfFreq+0xc8>)
 80165ca:	4293      	cmp	r3, r2
 80165cc:	d803      	bhi.n	80165d6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	2202      	movs	r2, #2
 80165d2:	701a      	strb	r2, [r3, #0]
 80165d4:	e03d      	b.n	8016652 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	4a22      	ldr	r2, [pc, #136]	; (8016664 <VerifyRfFreq+0xc8>)
 80165da:	4293      	cmp	r3, r2
 80165dc:	d907      	bls.n	80165ee <VerifyRfFreq+0x52>
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	4a21      	ldr	r2, [pc, #132]	; (8016668 <VerifyRfFreq+0xcc>)
 80165e2:	4293      	cmp	r3, r2
 80165e4:	d803      	bhi.n	80165ee <VerifyRfFreq+0x52>
    {
        *band = 0;
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	2200      	movs	r2, #0
 80165ea:	701a      	strb	r2, [r3, #0]
 80165ec:	e031      	b.n	8016652 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	4a1d      	ldr	r2, [pc, #116]	; (8016668 <VerifyRfFreq+0xcc>)
 80165f2:	4293      	cmp	r3, r2
 80165f4:	d907      	bls.n	8016606 <VerifyRfFreq+0x6a>
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	4a1c      	ldr	r2, [pc, #112]	; (801666c <VerifyRfFreq+0xd0>)
 80165fa:	4293      	cmp	r3, r2
 80165fc:	d803      	bhi.n	8016606 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	2201      	movs	r2, #1
 8016602:	701a      	strb	r2, [r3, #0]
 8016604:	e025      	b.n	8016652 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	4a19      	ldr	r2, [pc, #100]	; (8016670 <VerifyRfFreq+0xd4>)
 801660a:	4293      	cmp	r3, r2
 801660c:	d907      	bls.n	801661e <VerifyRfFreq+0x82>
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	4a18      	ldr	r2, [pc, #96]	; (8016674 <VerifyRfFreq+0xd8>)
 8016612:	4293      	cmp	r3, r2
 8016614:	d803      	bhi.n	801661e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8016616:	683b      	ldr	r3, [r7, #0]
 8016618:	2205      	movs	r2, #5
 801661a:	701a      	strb	r2, [r3, #0]
 801661c:	e019      	b.n	8016652 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	4a15      	ldr	r2, [pc, #84]	; (8016678 <VerifyRfFreq+0xdc>)
 8016622:	4293      	cmp	r3, r2
 8016624:	d907      	bls.n	8016636 <VerifyRfFreq+0x9a>
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	4a14      	ldr	r2, [pc, #80]	; (801667c <VerifyRfFreq+0xe0>)
 801662a:	4293      	cmp	r3, r2
 801662c:	d803      	bhi.n	8016636 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	2203      	movs	r2, #3
 8016632:	701a      	strb	r2, [r3, #0]
 8016634:	e00d      	b.n	8016652 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	4a11      	ldr	r2, [pc, #68]	; (8016680 <VerifyRfFreq+0xe4>)
 801663a:	4293      	cmp	r3, r2
 801663c:	d307      	bcc.n	801664e <VerifyRfFreq+0xb2>
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	4a10      	ldr	r2, [pc, #64]	; (8016684 <VerifyRfFreq+0xe8>)
 8016642:	4293      	cmp	r3, r2
 8016644:	d803      	bhi.n	801664e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	2204      	movs	r2, #4
 801664a:	701a      	strb	r2, [r3, #0]
 801664c:	e001      	b.n	8016652 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801664e:	2300      	movs	r3, #0
 8016650:	e000      	b.n	8016654 <VerifyRfFreq+0xb8>
    }
    return true;
 8016652:	2301      	movs	r3, #1
}
 8016654:	4618      	mov	r0, r3
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}
 801665c:	0801eef8 	.word	0x0801eef8
 8016660:	337055c0 	.word	0x337055c0
 8016664:	338eda3f 	.word	0x338eda3f
 8016668:	33bca100 	.word	0x33bca100
 801666c:	33c5c8c0 	.word	0x33c5c8c0
 8016670:	33c74f5f 	.word	0x33c74f5f
 8016674:	33cef080 	.word	0x33cef080
 8016678:	33d1fdbf 	.word	0x33d1fdbf
 801667c:	33d5ce50 	.word	0x33d5ce50
 8016680:	33d691a0 	.word	0x33d691a0
 8016684:	33db2580 	.word	0x33db2580

08016688 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016688:	b590      	push	{r4, r7, lr}
 801668a:	b08b      	sub	sp, #44	; 0x2c
 801668c:	af04      	add	r7, sp, #16
 801668e:	4603      	mov	r3, r0
 8016690:	460a      	mov	r2, r1
 8016692:	71fb      	strb	r3, [r7, #7]
 8016694:	4613      	mov	r3, r2
 8016696:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801669c:	4a1f      	ldr	r2, [pc, #124]	; (801671c <GetTimeOnAir+0x94>)
 801669e:	5cd3      	ldrb	r3, [r2, r3]
 80166a0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 80166a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166a6:	491e      	ldr	r1, [pc, #120]	; (8016720 <GetTimeOnAir+0x98>)
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7ff ff0f 	bl	80164cc <RegionCommonGetBandwidth>
 80166ae:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80166b0:	2300      	movs	r3, #0
 80166b2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80166b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166b8:	2b07      	cmp	r3, #7
 80166ba:	d118      	bne.n	80166ee <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80166bc:	4b19      	ldr	r3, [pc, #100]	; (8016724 <GetTimeOnAir+0x9c>)
 80166be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80166c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80166c8:	fb02 f303 	mul.w	r3, r2, r3
 80166cc:	4619      	mov	r1, r3
 80166ce:	88bb      	ldrh	r3, [r7, #4]
 80166d0:	b2db      	uxtb	r3, r3
 80166d2:	2201      	movs	r2, #1
 80166d4:	9203      	str	r2, [sp, #12]
 80166d6:	9302      	str	r3, [sp, #8]
 80166d8:	2300      	movs	r3, #0
 80166da:	9301      	str	r3, [sp, #4]
 80166dc:	2305      	movs	r3, #5
 80166de:	9300      	str	r3, [sp, #0]
 80166e0:	2300      	movs	r3, #0
 80166e2:	460a      	mov	r2, r1
 80166e4:	68f9      	ldr	r1, [r7, #12]
 80166e6:	2000      	movs	r0, #0
 80166e8:	47a0      	blx	r4
 80166ea:	6178      	str	r0, [r7, #20]
 80166ec:	e011      	b.n	8016712 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80166ee:	4b0d      	ldr	r3, [pc, #52]	; (8016724 <GetTimeOnAir+0x9c>)
 80166f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80166f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80166f6:	88bb      	ldrh	r3, [r7, #4]
 80166f8:	b2db      	uxtb	r3, r3
 80166fa:	2101      	movs	r1, #1
 80166fc:	9103      	str	r1, [sp, #12]
 80166fe:	9302      	str	r3, [sp, #8]
 8016700:	2300      	movs	r3, #0
 8016702:	9301      	str	r3, [sp, #4]
 8016704:	2308      	movs	r3, #8
 8016706:	9300      	str	r3, [sp, #0]
 8016708:	2301      	movs	r3, #1
 801670a:	68f9      	ldr	r1, [r7, #12]
 801670c:	2001      	movs	r0, #1
 801670e:	47a0      	blx	r4
 8016710:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8016712:	697b      	ldr	r3, [r7, #20]
}
 8016714:	4618      	mov	r0, r3
 8016716:	371c      	adds	r7, #28
 8016718:	46bd      	mov	sp, r7
 801671a:	bd90      	pop	{r4, r7, pc}
 801671c:	0801ee3c 	.word	0x0801ee3c
 8016720:	0801ee44 	.word	0x0801ee44
 8016724:	0801eef8 	.word	0x0801eef8

08016728 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b088      	sub	sp, #32
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016730:	2300      	movs	r3, #0
 8016732:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	3b01      	subs	r3, #1
 801673a:	2b37      	cmp	r3, #55	; 0x37
 801673c:	f200 8122 	bhi.w	8016984 <RegionEU868GetPhyParam+0x25c>
 8016740:	a201      	add	r2, pc, #4	; (adr r2, 8016748 <RegionEU868GetPhyParam+0x20>)
 8016742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016746:	bf00      	nop
 8016748:	08016829 	.word	0x08016829
 801674c:	0801682f 	.word	0x0801682f
 8016750:	08016985 	.word	0x08016985
 8016754:	08016985 	.word	0x08016985
 8016758:	08016985 	.word	0x08016985
 801675c:	08016835 	.word	0x08016835
 8016760:	08016985 	.word	0x08016985
 8016764:	0801686f 	.word	0x0801686f
 8016768:	08016985 	.word	0x08016985
 801676c:	08016875 	.word	0x08016875
 8016770:	0801687b 	.word	0x0801687b
 8016774:	08016881 	.word	0x08016881
 8016778:	08016887 	.word	0x08016887
 801677c:	08016897 	.word	0x08016897
 8016780:	080168a7 	.word	0x080168a7
 8016784:	080168ad 	.word	0x080168ad
 8016788:	080168b5 	.word	0x080168b5
 801678c:	080168bd 	.word	0x080168bd
 8016790:	080168c5 	.word	0x080168c5
 8016794:	080168cd 	.word	0x080168cd
 8016798:	080168d5 	.word	0x080168d5
 801679c:	080168e9 	.word	0x080168e9
 80167a0:	080168ef 	.word	0x080168ef
 80167a4:	080168f5 	.word	0x080168f5
 80167a8:	080168fb 	.word	0x080168fb
 80167ac:	08016907 	.word	0x08016907
 80167b0:	08016913 	.word	0x08016913
 80167b4:	08016919 	.word	0x08016919
 80167b8:	08016921 	.word	0x08016921
 80167bc:	08016927 	.word	0x08016927
 80167c0:	0801692d 	.word	0x0801692d
 80167c4:	08016935 	.word	0x08016935
 80167c8:	0801683b 	.word	0x0801683b
 80167cc:	08016985 	.word	0x08016985
 80167d0:	08016985 	.word	0x08016985
 80167d4:	08016985 	.word	0x08016985
 80167d8:	08016985 	.word	0x08016985
 80167dc:	08016985 	.word	0x08016985
 80167e0:	08016985 	.word	0x08016985
 80167e4:	08016985 	.word	0x08016985
 80167e8:	08016985 	.word	0x08016985
 80167ec:	08016985 	.word	0x08016985
 80167f0:	08016985 	.word	0x08016985
 80167f4:	08016985 	.word	0x08016985
 80167f8:	08016985 	.word	0x08016985
 80167fc:	08016985 	.word	0x08016985
 8016800:	0801693b 	.word	0x0801693b
 8016804:	08016941 	.word	0x08016941
 8016808:	0801694f 	.word	0x0801694f
 801680c:	08016985 	.word	0x08016985
 8016810:	08016985 	.word	0x08016985
 8016814:	08016955 	.word	0x08016955
 8016818:	0801695b 	.word	0x0801695b
 801681c:	08016985 	.word	0x08016985
 8016820:	08016961 	.word	0x08016961
 8016824:	08016971 	.word	0x08016971
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016828:	2300      	movs	r3, #0
 801682a:	61bb      	str	r3, [r7, #24]
            break;
 801682c:	e0ab      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801682e:	2300      	movs	r3, #0
 8016830:	61bb      	str	r3, [r7, #24]
            break;
 8016832:	e0a8      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016834:	2300      	movs	r3, #0
 8016836:	61bb      	str	r3, [r7, #24]
            break;
 8016838:	e0a5      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016840:	733b      	strb	r3, [r7, #12]
 8016842:	2307      	movs	r3, #7
 8016844:	737b      	strb	r3, [r7, #13]
 8016846:	2300      	movs	r3, #0
 8016848:	73bb      	strb	r3, [r7, #14]
 801684a:	2310      	movs	r3, #16
 801684c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801684e:	4b51      	ldr	r3, [pc, #324]	; (8016994 <RegionEU868GetPhyParam+0x26c>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016856:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016858:	4b4e      	ldr	r3, [pc, #312]	; (8016994 <RegionEU868GetPhyParam+0x26c>)
 801685a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801685c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801685e:	f107 030c 	add.w	r3, r7, #12
 8016862:	4618      	mov	r0, r3
 8016864:	f7ff fddf 	bl	8016426 <RegionCommonGetNextLowerTxDr>
 8016868:	4603      	mov	r3, r0
 801686a:	61bb      	str	r3, [r7, #24]
            break;
 801686c:	e08b      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801686e:	2300      	movs	r3, #0
 8016870:	61bb      	str	r3, [r7, #24]
            break;
 8016872:	e088      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016874:	2300      	movs	r3, #0
 8016876:	61bb      	str	r3, [r7, #24]
            break;
 8016878:	e085      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801687a:	2340      	movs	r3, #64	; 0x40
 801687c:	61bb      	str	r3, [r7, #24]
            break;
 801687e:	e082      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016880:	2320      	movs	r3, #32
 8016882:	61bb      	str	r3, [r7, #24]
            break;
 8016884:	e07f      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801688c:	461a      	mov	r2, r3
 801688e:	4b42      	ldr	r3, [pc, #264]	; (8016998 <RegionEU868GetPhyParam+0x270>)
 8016890:	5c9b      	ldrb	r3, [r3, r2]
 8016892:	61bb      	str	r3, [r7, #24]
            break;
 8016894:	e077      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801689c:	461a      	mov	r2, r3
 801689e:	4b3f      	ldr	r3, [pc, #252]	; (801699c <RegionEU868GetPhyParam+0x274>)
 80168a0:	5c9b      	ldrb	r3, [r3, r2]
 80168a2:	61bb      	str	r3, [r7, #24]
            break;
 80168a4:	e06f      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80168a6:	2301      	movs	r3, #1
 80168a8:	61bb      	str	r3, [r7, #24]
            break;
 80168aa:	e06c      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80168ac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80168b0:	61bb      	str	r3, [r7, #24]
            break;
 80168b2:	e068      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80168b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80168b8:	61bb      	str	r3, [r7, #24]
            break;
 80168ba:	e064      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80168bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80168c0:	61bb      	str	r3, [r7, #24]
            break;
 80168c2:	e060      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80168c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80168c8:	61bb      	str	r3, [r7, #24]
            break;
 80168ca:	e05c      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80168cc:	f241 7370 	movw	r3, #6000	; 0x1770
 80168d0:	61bb      	str	r3, [r7, #24]
            break;
 80168d2:	e058      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80168d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80168d8:	4831      	ldr	r0, [pc, #196]	; (80169a0 <RegionEU868GetPhyParam+0x278>)
 80168da:	f002 fa27 	bl	8018d2c <randr>
 80168de:	4603      	mov	r3, r0
 80168e0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80168e4:	61bb      	str	r3, [r7, #24]
            break;
 80168e6:	e04e      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80168e8:	2300      	movs	r3, #0
 80168ea:	61bb      	str	r3, [r7, #24]
            break;
 80168ec:	e04b      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80168ee:	4b2d      	ldr	r3, [pc, #180]	; (80169a4 <RegionEU868GetPhyParam+0x27c>)
 80168f0:	61bb      	str	r3, [r7, #24]
            break;
 80168f2:	e048      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80168f4:	2300      	movs	r3, #0
 80168f6:	61bb      	str	r3, [r7, #24]
            break;
 80168f8:	e045      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80168fa:	4b26      	ldr	r3, [pc, #152]	; (8016994 <RegionEU868GetPhyParam+0x26c>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016902:	61bb      	str	r3, [r7, #24]
            break;
 8016904:	e03f      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016906:	4b23      	ldr	r3, [pc, #140]	; (8016994 <RegionEU868GetPhyParam+0x26c>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 801690e:	61bb      	str	r3, [r7, #24]
            break;
 8016910:	e039      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016912:	2310      	movs	r3, #16
 8016914:	61bb      	str	r3, [r7, #24]
            break;
 8016916:	e036      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016918:	4b1e      	ldr	r3, [pc, #120]	; (8016994 <RegionEU868GetPhyParam+0x26c>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	61bb      	str	r3, [r7, #24]
            break;
 801691e:	e032      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016920:	2300      	movs	r3, #0
 8016922:	61bb      	str	r3, [r7, #24]
            break;
 8016924:	e02f      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016926:	2300      	movs	r3, #0
 8016928:	61bb      	str	r3, [r7, #24]
            break;
 801692a:	e02c      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 801692c:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016930:	61bb      	str	r3, [r7, #24]
            break;
 8016932:	e028      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016934:	4b1c      	ldr	r3, [pc, #112]	; (80169a8 <RegionEU868GetPhyParam+0x280>)
 8016936:	61bb      	str	r3, [r7, #24]
            break;
 8016938:	e025      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 801693a:	4b1a      	ldr	r3, [pc, #104]	; (80169a4 <RegionEU868GetPhyParam+0x27c>)
 801693c:	61bb      	str	r3, [r7, #24]
            break;
 801693e:	e022      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016940:	2311      	movs	r3, #17
 8016942:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016944:	2301      	movs	r3, #1
 8016946:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016948:	2300      	movs	r3, #0
 801694a:	76bb      	strb	r3, [r7, #26]
            break;
 801694c:	e01b      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801694e:	2303      	movs	r3, #3
 8016950:	61bb      	str	r3, [r7, #24]
            break;
 8016952:	e018      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016954:	4b13      	ldr	r3, [pc, #76]	; (80169a4 <RegionEU868GetPhyParam+0x27c>)
 8016956:	61bb      	str	r3, [r7, #24]
            break;
 8016958:	e015      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 801695a:	2303      	movs	r3, #3
 801695c:	61bb      	str	r3, [r7, #24]
            break;
 801695e:	e012      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016966:	461a      	mov	r2, r3
 8016968:	4b10      	ldr	r3, [pc, #64]	; (80169ac <RegionEU868GetPhyParam+0x284>)
 801696a:	5c9b      	ldrb	r3, [r3, r2]
 801696c:	61bb      	str	r3, [r7, #24]
            break;
 801696e:	e00a      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016976:	490e      	ldr	r1, [pc, #56]	; (80169b0 <RegionEU868GetPhyParam+0x288>)
 8016978:	4618      	mov	r0, r3
 801697a:	f7ff fda7 	bl	80164cc <RegionCommonGetBandwidth>
 801697e:	4603      	mov	r3, r0
 8016980:	61bb      	str	r3, [r7, #24]
            break;
 8016982:	e000      	b.n	8016986 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016984:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016986:	69bb      	ldr	r3, [r7, #24]
 8016988:	61fb      	str	r3, [r7, #28]
 801698a:	69fb      	ldr	r3, [r7, #28]
}
 801698c:	4618      	mov	r0, r3
 801698e:	3720      	adds	r7, #32
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}
 8016994:	20001a9c 	.word	0x20001a9c
 8016998:	0801ee64 	.word	0x0801ee64
 801699c:	0801ee6c 	.word	0x0801ee6c
 80169a0:	fffffc18 	.word	0xfffffc18
 80169a4:	33d3e608 	.word	0x33d3e608
 80169a8:	4009999a 	.word	0x4009999a
 80169ac:	0801ee3c 	.word	0x0801ee3c
 80169b0:	0801ee44 	.word	0x0801ee44

080169b4 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80169b4:	b590      	push	{r4, r7, lr}
 80169b6:	b085      	sub	sp, #20
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80169bc:	4b11      	ldr	r3, [pc, #68]	; (8016a04 <RegionEU868SetBandTxDone+0x50>)
 80169be:	681a      	ldr	r2, [r3, #0]
 80169c0:	4b11      	ldr	r3, [pc, #68]	; (8016a08 <RegionEU868SetBandTxDone+0x54>)
 80169c2:	6819      	ldr	r1, [r3, #0]
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	4618      	mov	r0, r3
 80169ca:	4603      	mov	r3, r0
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	4403      	add	r3, r0
 80169d0:	009b      	lsls	r3, r3, #2
 80169d2:	440b      	add	r3, r1
 80169d4:	3309      	adds	r3, #9
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	4619      	mov	r1, r3
 80169da:	460b      	mov	r3, r1
 80169dc:	005b      	lsls	r3, r3, #1
 80169de:	440b      	add	r3, r1
 80169e0:	00db      	lsls	r3, r3, #3
 80169e2:	18d0      	adds	r0, r2, r3
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6899      	ldr	r1, [r3, #8]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	785c      	ldrb	r4, [r3, #1]
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	691a      	ldr	r2, [r3, #16]
 80169f0:	9200      	str	r2, [sp, #0]
 80169f2:	68db      	ldr	r3, [r3, #12]
 80169f4:	4622      	mov	r2, r4
 80169f6:	f7ff f8ef 	bl	8015bd8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 80169fa:	bf00      	nop
 80169fc:	370c      	adds	r7, #12
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd90      	pop	{r4, r7, pc}
 8016a02:	bf00      	nop
 8016a04:	20001aa0 	.word	0x20001aa0
 8016a08:	20001a9c 	.word	0x20001a9c

08016a0c <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b0b0      	sub	sp, #192	; 0xc0
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a18:	2290      	movs	r2, #144	; 0x90
 8016a1a:	2100      	movs	r1, #0
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f006 fe55 	bl	801d6cc <memset>
 8016a22:	2364      	movs	r3, #100	; 0x64
 8016a24:	863b      	strh	r3, [r7, #48]	; 0x30
 8016a26:	2364      	movs	r3, #100	; 0x64
 8016a28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016a2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a30:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016a34:	230a      	movs	r3, #10
 8016a36:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016a3a:	2364      	movs	r3, #100	; 0x64
 8016a3c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a44:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	7b1b      	ldrb	r3, [r3, #12]
 8016a4c:	2b02      	cmp	r3, #2
 8016a4e:	d05d      	beq.n	8016b0c <RegionEU868InitDefaults+0x100>
 8016a50:	2b02      	cmp	r3, #2
 8016a52:	dc6a      	bgt.n	8016b2a <RegionEU868InitDefaults+0x11e>
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d002      	beq.n	8016a5e <RegionEU868InitDefaults+0x52>
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d03e      	beq.n	8016ada <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016a5c:	e065      	b.n	8016b2a <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d062      	beq.n	8016b2c <RegionEU868InitDefaults+0x120>
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	685b      	ldr	r3, [r3, #4]
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d05e      	beq.n	8016b2c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	685b      	ldr	r3, [r3, #4]
 8016a72:	4a30      	ldr	r2, [pc, #192]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016a74:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	689b      	ldr	r3, [r3, #8]
 8016a7a:	4a2f      	ldr	r2, [pc, #188]	; (8016b38 <RegionEU868InitDefaults+0x12c>)
 8016a7c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016a7e:	4b2e      	ldr	r3, [pc, #184]	; (8016b38 <RegionEU868InitDefaults+0x12c>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016a86:	2290      	movs	r2, #144	; 0x90
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f002 f966 	bl	8018d5a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016a8e:	4b29      	ldr	r3, [pc, #164]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4a2a      	ldr	r2, [pc, #168]	; (8016b3c <RegionEU868InitDefaults+0x130>)
 8016a94:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016a9a:	4b26      	ldr	r3, [pc, #152]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	4a28      	ldr	r2, [pc, #160]	; (8016b40 <RegionEU868InitDefaults+0x134>)
 8016aa0:	330c      	adds	r3, #12
 8016aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8016aa4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016aa8:	4b22      	ldr	r3, [pc, #136]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	4a25      	ldr	r2, [pc, #148]	; (8016b44 <RegionEU868InitDefaults+0x138>)
 8016aae:	3318      	adds	r3, #24
 8016ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8016ab2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016ab6:	4b1f      	ldr	r3, [pc, #124]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2207      	movs	r2, #7
 8016abc:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016ac0:	4b1c      	ldr	r3, [pc, #112]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016ac8:	4b1a      	ldr	r3, [pc, #104]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016ad0:	2201      	movs	r2, #1
 8016ad2:	4619      	mov	r1, r3
 8016ad4:	f7ff f85a 	bl	8015b8c <RegionCommonChanMaskCopy>
 8016ad8:	e028      	b.n	8016b2c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016ada:	4b16      	ldr	r3, [pc, #88]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016ae2:	4b14      	ldr	r3, [pc, #80]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016aea:	4b12      	ldr	r3, [pc, #72]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	2200      	movs	r2, #0
 8016af0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016af2:	4b10      	ldr	r3, [pc, #64]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016afa:	4b0e      	ldr	r3, [pc, #56]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016b02:	2201      	movs	r2, #1
 8016b04:	4619      	mov	r1, r3
 8016b06:	f7ff f841 	bl	8015b8c <RegionCommonChanMaskCopy>
            break;
 8016b0a:	e00f      	b.n	8016b2c <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016b0c:	4b09      	ldr	r3, [pc, #36]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016b14:	4b07      	ldr	r3, [pc, #28]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016b1c:	4b05      	ldr	r3, [pc, #20]	; (8016b34 <RegionEU868InitDefaults+0x128>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	430a      	orrs	r2, r1
 8016b22:	b292      	uxth	r2, r2
 8016b24:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016b28:	e000      	b.n	8016b2c <RegionEU868InitDefaults+0x120>
            break;
 8016b2a:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016b2c:	37c0      	adds	r7, #192	; 0xc0
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
 8016b32:	bf00      	nop
 8016b34:	20001a9c 	.word	0x20001a9c
 8016b38:	20001aa0 	.word	0x20001aa0
 8016b3c:	0801e8f0 	.word	0x0801e8f0
 8016b40:	0801e8fc 	.word	0x0801e8fc
 8016b44:	0801e908 	.word	0x0801e908

08016b48 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b084      	sub	sp, #16
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	460b      	mov	r3, r1
 8016b52:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016b54:	78fb      	ldrb	r3, [r7, #3]
 8016b56:	2b0f      	cmp	r3, #15
 8016b58:	d86c      	bhi.n	8016c34 <RegionEU868Verify+0xec>
 8016b5a:	a201      	add	r2, pc, #4	; (adr r2, 8016b60 <RegionEU868Verify+0x18>)
 8016b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b60:	08016ba1 	.word	0x08016ba1
 8016b64:	08016c35 	.word	0x08016c35
 8016b68:	08016c35 	.word	0x08016c35
 8016b6c:	08016c35 	.word	0x08016c35
 8016b70:	08016c35 	.word	0x08016c35
 8016b74:	08016bb9 	.word	0x08016bb9
 8016b78:	08016bd7 	.word	0x08016bd7
 8016b7c:	08016bf5 	.word	0x08016bf5
 8016b80:	08016c35 	.word	0x08016c35
 8016b84:	08016c13 	.word	0x08016c13
 8016b88:	08016c13 	.word	0x08016c13
 8016b8c:	08016c35 	.word	0x08016c35
 8016b90:	08016c35 	.word	0x08016c35
 8016b94:	08016c35 	.word	0x08016c35
 8016b98:	08016c35 	.word	0x08016c35
 8016b9c:	08016c31 	.word	0x08016c31
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	f107 020f 	add.w	r2, r7, #15
 8016bac:	4611      	mov	r1, r2
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7ff fcf4 	bl	801659c <VerifyRfFreq>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	e03e      	b.n	8016c36 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f993 3000 	ldrsb.w	r3, [r3]
 8016bbe:	2207      	movs	r2, #7
 8016bc0:	2100      	movs	r1, #0
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7fe ff65 	bl	8015a92 <RegionCommonValueInRange>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	bf14      	ite	ne
 8016bce:	2301      	movne	r3, #1
 8016bd0:	2300      	moveq	r3, #0
 8016bd2:	b2db      	uxtb	r3, r3
 8016bd4:	e02f      	b.n	8016c36 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8016bdc:	2205      	movs	r2, #5
 8016bde:	2100      	movs	r1, #0
 8016be0:	4618      	mov	r0, r3
 8016be2:	f7fe ff56 	bl	8015a92 <RegionCommonValueInRange>
 8016be6:	4603      	mov	r3, r0
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	bf14      	ite	ne
 8016bec:	2301      	movne	r3, #1
 8016bee:	2300      	moveq	r3, #0
 8016bf0:	b2db      	uxtb	r3, r3
 8016bf2:	e020      	b.n	8016c36 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8016bfa:	2207      	movs	r2, #7
 8016bfc:	2100      	movs	r1, #0
 8016bfe:	4618      	mov	r0, r3
 8016c00:	f7fe ff47 	bl	8015a92 <RegionCommonValueInRange>
 8016c04:	4603      	mov	r3, r0
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	bf14      	ite	ne
 8016c0a:	2301      	movne	r3, #1
 8016c0c:	2300      	moveq	r3, #0
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	e011      	b.n	8016c36 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f993 3000 	ldrsb.w	r3, [r3]
 8016c18:	2207      	movs	r2, #7
 8016c1a:	2100      	movs	r1, #0
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7fe ff38 	bl	8015a92 <RegionCommonValueInRange>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	bf14      	ite	ne
 8016c28:	2301      	movne	r3, #1
 8016c2a:	2300      	moveq	r3, #0
 8016c2c:	b2db      	uxtb	r3, r3
 8016c2e:	e002      	b.n	8016c36 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016c30:	2301      	movs	r3, #1
 8016c32:	e000      	b.n	8016c36 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016c34:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016c36:	4618      	mov	r0, r3
 8016c38:	3710      	adds	r7, #16
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop

08016c40 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b08a      	sub	sp, #40	; 0x28
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016c48:	2350      	movs	r3, #80	; 0x50
 8016c4a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	7a1b      	ldrb	r3, [r3, #8]
 8016c52:	2b10      	cmp	r3, #16
 8016c54:	d162      	bne.n	8016d1c <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	685b      	ldr	r3, [r3, #4]
 8016c5a:	330f      	adds	r3, #15
 8016c5c:	781b      	ldrb	r3, [r3, #0]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d15e      	bne.n	8016d20 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016c62:	2300      	movs	r3, #0
 8016c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c68:	2303      	movs	r3, #3
 8016c6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016c6e:	e050      	b.n	8016d12 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016c74:	2b07      	cmp	r3, #7
 8016c76:	d824      	bhi.n	8016cc2 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	685a      	ldr	r2, [r3, #4]
 8016c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c80:	4413      	add	r3, r2
 8016c82:	781b      	ldrb	r3, [r3, #0]
 8016c84:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016c86:	69ba      	ldr	r2, [r7, #24]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	6859      	ldr	r1, [r3, #4]
 8016c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c90:	3301      	adds	r3, #1
 8016c92:	440b      	add	r3, r1
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	021b      	lsls	r3, r3, #8
 8016c98:	4313      	orrs	r3, r2
 8016c9a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016c9c:	69ba      	ldr	r2, [r7, #24]
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	6859      	ldr	r1, [r3, #4]
 8016ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ca6:	3302      	adds	r3, #2
 8016ca8:	440b      	add	r3, r1
 8016caa:	781b      	ldrb	r3, [r3, #0]
 8016cac:	041b      	lsls	r3, r3, #16
 8016cae:	4313      	orrs	r3, r2
 8016cb0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016cb2:	69bb      	ldr	r3, [r7, #24]
 8016cb4:	2264      	movs	r2, #100	; 0x64
 8016cb6:	fb02 f303 	mul.w	r3, r2, r3
 8016cba:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	61fb      	str	r3, [r7, #28]
 8016cc0:	e006      	b.n	8016cd0 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d00b      	beq.n	8016cee <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016cd6:	f107 0318 	add.w	r3, r7, #24
 8016cda:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ce0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016ce2:	f107 0310 	add.w	r3, r7, #16
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f000 fd0e 	bl	8017708 <RegionEU868ChannelAdd>
 8016cec:	e007      	b.n	8016cfe <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016cf2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016cf4:	f107 030c 	add.w	r3, r7, #12
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	f000 fda7 	bl	801784c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016d02:	3303      	adds	r3, #3
 8016d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d0c:	3301      	adds	r3, #1
 8016d0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016d12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016d16:	2b0f      	cmp	r3, #15
 8016d18:	d9aa      	bls.n	8016c70 <RegionEU868ApplyCFList+0x30>
 8016d1a:	e002      	b.n	8016d22 <RegionEU868ApplyCFList+0xe2>
        return;
 8016d1c:	bf00      	nop
 8016d1e:	e000      	b.n	8016d22 <RegionEU868ApplyCFList+0xe2>
        return;
 8016d20:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016d22:	3728      	adds	r7, #40	; 0x28
 8016d24:	46bd      	mov	sp, r7
 8016d26:	bd80      	pop	{r7, pc}

08016d28 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b082      	sub	sp, #8
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	791b      	ldrb	r3, [r3, #4]
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d002      	beq.n	8016d3e <RegionEU868ChanMaskSet+0x16>
 8016d38:	2b01      	cmp	r3, #1
 8016d3a:	d00b      	beq.n	8016d54 <RegionEU868ChanMaskSet+0x2c>
 8016d3c:	e015      	b.n	8016d6a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016d3e:	4b0e      	ldr	r3, [pc, #56]	; (8016d78 <RegionEU868ChanMaskSet+0x50>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	2201      	movs	r2, #1
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	f7fe ff1d 	bl	8015b8c <RegionCommonChanMaskCopy>
            break;
 8016d52:	e00c      	b.n	8016d6e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016d54:	4b08      	ldr	r3, [pc, #32]	; (8016d78 <RegionEU868ChanMaskSet+0x50>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	2201      	movs	r2, #1
 8016d62:	4619      	mov	r1, r3
 8016d64:	f7fe ff12 	bl	8015b8c <RegionCommonChanMaskCopy>
            break;
 8016d68:	e001      	b.n	8016d6e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	e000      	b.n	8016d70 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016d6e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3708      	adds	r7, #8
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	20001a9c 	.word	0x20001a9c

08016d7c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b088      	sub	sp, #32
 8016d80:	af02      	add	r7, sp, #8
 8016d82:	60ba      	str	r2, [r7, #8]
 8016d84:	607b      	str	r3, [r7, #4]
 8016d86:	4603      	mov	r3, r0
 8016d88:	73fb      	strb	r3, [r7, #15]
 8016d8a:	460b      	mov	r3, r1
 8016d8c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d96:	2b07      	cmp	r3, #7
 8016d98:	bfa8      	it	ge
 8016d9a:	2307      	movge	r3, #7
 8016d9c:	b25a      	sxtb	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016da8:	491e      	ldr	r1, [pc, #120]	; (8016e24 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7ff fb8e 	bl	80164cc <RegionCommonGetBandwidth>
 8016db0:	4603      	mov	r3, r0
 8016db2:	b2da      	uxtb	r2, r3
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dbe:	2b07      	cmp	r3, #7
 8016dc0:	d10a      	bne.n	8016dd8 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dc8:	461a      	mov	r2, r3
 8016dca:	4b17      	ldr	r3, [pc, #92]	; (8016e28 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016dcc:	5c9b      	ldrb	r3, [r3, r2]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f7ff f910 	bl	8015ff4 <RegionCommonComputeSymbolTimeFsk>
 8016dd4:	6178      	str	r0, [r7, #20]
 8016dd6:	e011      	b.n	8016dfc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dde:	461a      	mov	r2, r3
 8016de0:	4b11      	ldr	r3, [pc, #68]	; (8016e28 <RegionEU868ComputeRxWindowParameters+0xac>)
 8016de2:	5c9a      	ldrb	r2, [r3, r2]
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dea:	4619      	mov	r1, r3
 8016dec:	4b0d      	ldr	r3, [pc, #52]	; (8016e24 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8016dee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016df2:	4619      	mov	r1, r3
 8016df4:	4610      	mov	r0, r2
 8016df6:	f7ff f8e7 	bl	8015fc8 <RegionCommonComputeSymbolTimeLoRa>
 8016dfa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016dfc:	4b0b      	ldr	r3, [pc, #44]	; (8016e2c <RegionEU868ComputeRxWindowParameters+0xb0>)
 8016dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e00:	4798      	blx	r3
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	3308      	adds	r3, #8
 8016e06:	687a      	ldr	r2, [r7, #4]
 8016e08:	320c      	adds	r2, #12
 8016e0a:	7bb9      	ldrb	r1, [r7, #14]
 8016e0c:	9201      	str	r2, [sp, #4]
 8016e0e:	9300      	str	r3, [sp, #0]
 8016e10:	4603      	mov	r3, r0
 8016e12:	68ba      	ldr	r2, [r7, #8]
 8016e14:	6978      	ldr	r0, [r7, #20]
 8016e16:	f7ff f8fd 	bl	8016014 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8016e1a:	bf00      	nop
 8016e1c:	3718      	adds	r7, #24
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	0801ee44 	.word	0x0801ee44
 8016e28:	0801ee3c 	.word	0x0801ee3c
 8016e2c:	0801eef8 	.word	0x0801eef8

08016e30 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016e30:	b5b0      	push	{r4, r5, r7, lr}
 8016e32:	b090      	sub	sp, #64	; 0x40
 8016e34:	af0a      	add	r7, sp, #40	; 0x28
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	785b      	ldrb	r3, [r3, #1]
 8016e3e:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016e40:	2300      	movs	r3, #0
 8016e42:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016e44:	2300      	movs	r3, #0
 8016e46:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	685b      	ldr	r3, [r3, #4]
 8016e4c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016e4e:	4b5a      	ldr	r3, [pc, #360]	; (8016fb8 <RegionEU868RxConfig+0x188>)
 8016e50:	685b      	ldr	r3, [r3, #4]
 8016e52:	4798      	blx	r3
 8016e54:	4603      	mov	r3, r0
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d001      	beq.n	8016e5e <RegionEU868RxConfig+0x2e>
    {
        return false;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	e0a8      	b.n	8016fb0 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	7cdb      	ldrb	r3, [r3, #19]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d126      	bne.n	8016eb4 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016e66:	4b55      	ldr	r3, [pc, #340]	; (8016fbc <RegionEU868RxConfig+0x18c>)
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	781b      	ldrb	r3, [r3, #0]
 8016e6e:	4619      	mov	r1, r3
 8016e70:	460b      	mov	r3, r1
 8016e72:	005b      	lsls	r3, r3, #1
 8016e74:	440b      	add	r3, r1
 8016e76:	009b      	lsls	r3, r3, #2
 8016e78:	4413      	add	r3, r2
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8016e7e:	4b4f      	ldr	r3, [pc, #316]	; (8016fbc <RegionEU868RxConfig+0x18c>)
 8016e80:	681a      	ldr	r2, [r3, #0]
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	4619      	mov	r1, r3
 8016e88:	460b      	mov	r3, r1
 8016e8a:	005b      	lsls	r3, r3, #1
 8016e8c:	440b      	add	r3, r1
 8016e8e:	009b      	lsls	r3, r3, #2
 8016e90:	4413      	add	r3, r2
 8016e92:	3304      	adds	r3, #4
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d00c      	beq.n	8016eb4 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8016e9a:	4b48      	ldr	r3, [pc, #288]	; (8016fbc <RegionEU868RxConfig+0x18c>)
 8016e9c:	681a      	ldr	r2, [r3, #0]
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	781b      	ldrb	r3, [r3, #0]
 8016ea2:	4619      	mov	r1, r3
 8016ea4:	460b      	mov	r3, r1
 8016ea6:	005b      	lsls	r3, r3, #1
 8016ea8:	440b      	add	r3, r1
 8016eaa:	009b      	lsls	r3, r3, #2
 8016eac:	4413      	add	r3, r2
 8016eae:	3304      	adds	r3, #4
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eb8:	4a41      	ldr	r2, [pc, #260]	; (8016fc0 <RegionEU868RxConfig+0x190>)
 8016eba:	5cd3      	ldrb	r3, [r2, r3]
 8016ebc:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016ebe:	4b3e      	ldr	r3, [pc, #248]	; (8016fb8 <RegionEU868RxConfig+0x188>)
 8016ec0:	68db      	ldr	r3, [r3, #12]
 8016ec2:	6938      	ldr	r0, [r7, #16]
 8016ec4:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eca:	2b07      	cmp	r3, #7
 8016ecc:	d128      	bne.n	8016f20 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016ed2:	4b39      	ldr	r3, [pc, #228]	; (8016fb8 <RegionEU868RxConfig+0x188>)
 8016ed4:	699c      	ldr	r4, [r3, #24]
 8016ed6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016ede:	fb02 f303 	mul.w	r3, r2, r3
 8016ee2:	4619      	mov	r1, r3
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	689b      	ldr	r3, [r3, #8]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	687a      	ldr	r2, [r7, #4]
 8016eec:	7c92      	ldrb	r2, [r2, #18]
 8016eee:	7df8      	ldrb	r0, [r7, #23]
 8016ef0:	9209      	str	r2, [sp, #36]	; 0x24
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	9208      	str	r2, [sp, #32]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	9207      	str	r2, [sp, #28]
 8016efa:	2200      	movs	r2, #0
 8016efc:	9206      	str	r2, [sp, #24]
 8016efe:	2201      	movs	r2, #1
 8016f00:	9205      	str	r2, [sp, #20]
 8016f02:	2200      	movs	r2, #0
 8016f04:	9204      	str	r2, [sp, #16]
 8016f06:	2200      	movs	r2, #0
 8016f08:	9203      	str	r2, [sp, #12]
 8016f0a:	9302      	str	r3, [sp, #8]
 8016f0c:	2305      	movs	r3, #5
 8016f0e:	9301      	str	r3, [sp, #4]
 8016f10:	4b2c      	ldr	r3, [pc, #176]	; (8016fc4 <RegionEU868RxConfig+0x194>)
 8016f12:	9300      	str	r3, [sp, #0]
 8016f14:	2300      	movs	r3, #0
 8016f16:	460a      	mov	r2, r1
 8016f18:	f24c 3150 	movw	r1, #50000	; 0xc350
 8016f1c:	47a0      	blx	r4
 8016f1e:	e024      	b.n	8016f6a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8016f20:	2301      	movs	r3, #1
 8016f22:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016f24:	4b24      	ldr	r3, [pc, #144]	; (8016fb8 <RegionEU868RxConfig+0x188>)
 8016f26:	699c      	ldr	r4, [r3, #24]
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	789b      	ldrb	r3, [r3, #2]
 8016f2c:	461d      	mov	r5, r3
 8016f2e:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	689b      	ldr	r3, [r3, #8]
 8016f36:	b29b      	uxth	r3, r3
 8016f38:	687a      	ldr	r2, [r7, #4]
 8016f3a:	7c92      	ldrb	r2, [r2, #18]
 8016f3c:	7df8      	ldrb	r0, [r7, #23]
 8016f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8016f40:	2201      	movs	r2, #1
 8016f42:	9208      	str	r2, [sp, #32]
 8016f44:	2200      	movs	r2, #0
 8016f46:	9207      	str	r2, [sp, #28]
 8016f48:	2200      	movs	r2, #0
 8016f4a:	9206      	str	r2, [sp, #24]
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	9205      	str	r2, [sp, #20]
 8016f50:	2200      	movs	r2, #0
 8016f52:	9204      	str	r2, [sp, #16]
 8016f54:	2200      	movs	r2, #0
 8016f56:	9203      	str	r2, [sp, #12]
 8016f58:	9302      	str	r3, [sp, #8]
 8016f5a:	2308      	movs	r3, #8
 8016f5c:	9301      	str	r3, [sp, #4]
 8016f5e:	2300      	movs	r3, #0
 8016f60:	9300      	str	r3, [sp, #0]
 8016f62:	2301      	movs	r3, #1
 8016f64:	460a      	mov	r2, r1
 8016f66:	4629      	mov	r1, r5
 8016f68:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	7c5b      	ldrb	r3, [r3, #17]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d005      	beq.n	8016f7e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f76:	4a14      	ldr	r2, [pc, #80]	; (8016fc8 <RegionEU868RxConfig+0x198>)
 8016f78:	5cd3      	ldrb	r3, [r2, r3]
 8016f7a:	75bb      	strb	r3, [r7, #22]
 8016f7c:	e004      	b.n	8016f88 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8016f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f82:	4a12      	ldr	r2, [pc, #72]	; (8016fcc <RegionEU868RxConfig+0x19c>)
 8016f84:	5cd3      	ldrb	r3, [r2, r3]
 8016f86:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016f88:	4b0b      	ldr	r3, [pc, #44]	; (8016fb8 <RegionEU868RxConfig+0x188>)
 8016f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016f8c:	7dba      	ldrb	r2, [r7, #22]
 8016f8e:	320d      	adds	r2, #13
 8016f90:	b2d1      	uxtb	r1, r2
 8016f92:	7dfa      	ldrb	r2, [r7, #23]
 8016f94:	4610      	mov	r0, r2
 8016f96:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	7cdb      	ldrb	r3, [r3, #19]
 8016f9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016fa0:	6939      	ldr	r1, [r7, #16]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7ff fab0 	bl	8016508 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	7bfa      	ldrb	r2, [r7, #15]
 8016fac:	701a      	strb	r2, [r3, #0]
    return true;
 8016fae:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	3718      	adds	r7, #24
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bdb0      	pop	{r4, r5, r7, pc}
 8016fb8:	0801eef8 	.word	0x0801eef8
 8016fbc:	20001a9c 	.word	0x20001a9c
 8016fc0:	0801ee3c 	.word	0x0801ee3c
 8016fc4:	00014585 	.word	0x00014585
 8016fc8:	0801ee6c 	.word	0x0801ee6c
 8016fcc:	0801ee64 	.word	0x0801ee64

08016fd0 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016fd0:	b590      	push	{r4, r7, lr}
 8016fd2:	b093      	sub	sp, #76	; 0x4c
 8016fd4:	af0a      	add	r7, sp, #40	; 0x28
 8016fd6:	60f8      	str	r0, [r7, #12]
 8016fd8:	60b9      	str	r1, [r7, #8]
 8016fda:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	4b5d      	ldr	r3, [pc, #372]	; (801715c <RegionEU868TxConfig+0x18c>)
 8016fe6:	5c9b      	ldrb	r3, [r3, r2]
 8016fe8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016ff0:	4b5b      	ldr	r3, [pc, #364]	; (8017160 <RegionEU868TxConfig+0x190>)
 8016ff2:	681a      	ldr	r2, [r3, #0]
 8016ff4:	4b5b      	ldr	r3, [pc, #364]	; (8017164 <RegionEU868TxConfig+0x194>)
 8016ff6:	6819      	ldr	r1, [r3, #0]
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	461c      	mov	r4, r3
 8016ffe:	4623      	mov	r3, r4
 8017000:	005b      	lsls	r3, r3, #1
 8017002:	4423      	add	r3, r4
 8017004:	009b      	lsls	r3, r3, #2
 8017006:	440b      	add	r3, r1
 8017008:	3309      	adds	r3, #9
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	4619      	mov	r1, r3
 801700e:	460b      	mov	r3, r1
 8017010:	005b      	lsls	r3, r3, #1
 8017012:	440b      	add	r3, r1
 8017014:	00db      	lsls	r3, r3, #3
 8017016:	4413      	add	r3, r2
 8017018:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801701c:	4619      	mov	r1, r3
 801701e:	f7ff fa40 	bl	80164a2 <RegionCommonLimitTxPower>
 8017022:	4603      	mov	r3, r0
 8017024:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801702c:	494e      	ldr	r1, [pc, #312]	; (8017168 <RegionEU868TxConfig+0x198>)
 801702e:	4618      	mov	r0, r3
 8017030:	f7ff fa4c 	bl	80164cc <RegionCommonGetBandwidth>
 8017034:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8017036:	2300      	movs	r3, #0
 8017038:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	6859      	ldr	r1, [r3, #4]
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	689a      	ldr	r2, [r3, #8]
 8017042:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017046:	4618      	mov	r0, r3
 8017048:	f7ff f89c 	bl	8016184 <RegionCommonComputeTxPower>
 801704c:	4603      	mov	r3, r0
 801704e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017050:	4b46      	ldr	r3, [pc, #280]	; (801716c <RegionEU868TxConfig+0x19c>)
 8017052:	68da      	ldr	r2, [r3, #12]
 8017054:	4b43      	ldr	r3, [pc, #268]	; (8017164 <RegionEU868TxConfig+0x194>)
 8017056:	6819      	ldr	r1, [r3, #0]
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	4618      	mov	r0, r3
 801705e:	4603      	mov	r3, r0
 8017060:	005b      	lsls	r3, r3, #1
 8017062:	4403      	add	r3, r0
 8017064:	009b      	lsls	r3, r3, #2
 8017066:	440b      	add	r3, r1
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	4618      	mov	r0, r3
 801706c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017074:	2b07      	cmp	r3, #7
 8017076:	d124      	bne.n	80170c2 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017078:	2300      	movs	r3, #0
 801707a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801707c:	4b3b      	ldr	r3, [pc, #236]	; (801716c <RegionEU868TxConfig+0x19c>)
 801707e:	69dc      	ldr	r4, [r3, #28]
 8017080:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017088:	fb02 f303 	mul.w	r3, r2, r3
 801708c:	461a      	mov	r2, r3
 801708e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017092:	7ff8      	ldrb	r0, [r7, #31]
 8017094:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017098:	9308      	str	r3, [sp, #32]
 801709a:	2300      	movs	r3, #0
 801709c:	9307      	str	r3, [sp, #28]
 801709e:	2300      	movs	r3, #0
 80170a0:	9306      	str	r3, [sp, #24]
 80170a2:	2300      	movs	r3, #0
 80170a4:	9305      	str	r3, [sp, #20]
 80170a6:	2301      	movs	r3, #1
 80170a8:	9304      	str	r3, [sp, #16]
 80170aa:	2300      	movs	r3, #0
 80170ac:	9303      	str	r3, [sp, #12]
 80170ae:	2305      	movs	r3, #5
 80170b0:	9302      	str	r3, [sp, #8]
 80170b2:	2300      	movs	r3, #0
 80170b4:	9301      	str	r3, [sp, #4]
 80170b6:	9200      	str	r2, [sp, #0]
 80170b8:	69bb      	ldr	r3, [r7, #24]
 80170ba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80170be:	47a0      	blx	r4
 80170c0:	e01d      	b.n	80170fe <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80170c2:	2301      	movs	r3, #1
 80170c4:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80170c6:	4b29      	ldr	r3, [pc, #164]	; (801716c <RegionEU868TxConfig+0x19c>)
 80170c8:	69dc      	ldr	r4, [r3, #28]
 80170ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80170ce:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80170d2:	7ff8      	ldrb	r0, [r7, #31]
 80170d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80170d8:	9208      	str	r2, [sp, #32]
 80170da:	2200      	movs	r2, #0
 80170dc:	9207      	str	r2, [sp, #28]
 80170de:	2200      	movs	r2, #0
 80170e0:	9206      	str	r2, [sp, #24]
 80170e2:	2200      	movs	r2, #0
 80170e4:	9205      	str	r2, [sp, #20]
 80170e6:	2201      	movs	r2, #1
 80170e8:	9204      	str	r2, [sp, #16]
 80170ea:	2200      	movs	r2, #0
 80170ec:	9203      	str	r2, [sp, #12]
 80170ee:	2208      	movs	r2, #8
 80170f0:	9202      	str	r2, [sp, #8]
 80170f2:	2201      	movs	r2, #1
 80170f4:	9201      	str	r2, [sp, #4]
 80170f6:	9300      	str	r3, [sp, #0]
 80170f8:	69bb      	ldr	r3, [r7, #24]
 80170fa:	2200      	movs	r2, #0
 80170fc:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80170fe:	4b19      	ldr	r3, [pc, #100]	; (8017164 <RegionEU868TxConfig+0x194>)
 8017100:	681a      	ldr	r2, [r3, #0]
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	781b      	ldrb	r3, [r3, #0]
 8017106:	4619      	mov	r1, r3
 8017108:	460b      	mov	r3, r1
 801710a:	005b      	lsls	r3, r3, #1
 801710c:	440b      	add	r3, r1
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	4413      	add	r3, r2
 8017112:	681a      	ldr	r2, [r3, #0]
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801711a:	4619      	mov	r1, r3
 801711c:	4610      	mov	r0, r2
 801711e:	f7ff fa25 	bl	801656c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	899b      	ldrh	r3, [r3, #12]
 801712c:	4619      	mov	r1, r3
 801712e:	4610      	mov	r0, r2
 8017130:	f7ff faaa 	bl	8016688 <GetTimeOnAir>
 8017134:	4602      	mov	r2, r0
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 801713a:	4b0c      	ldr	r3, [pc, #48]	; (801716c <RegionEU868TxConfig+0x19c>)
 801713c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801713e:	68fa      	ldr	r2, [r7, #12]
 8017140:	8992      	ldrh	r2, [r2, #12]
 8017142:	b2d1      	uxtb	r1, r2
 8017144:	7ffa      	ldrb	r2, [r7, #31]
 8017146:	4610      	mov	r0, r2
 8017148:	4798      	blx	r3

    *txPower = txPowerLimited;
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	7f7a      	ldrb	r2, [r7, #29]
 801714e:	701a      	strb	r2, [r3, #0]
    return true;
 8017150:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017152:	4618      	mov	r0, r3
 8017154:	3724      	adds	r7, #36	; 0x24
 8017156:	46bd      	mov	sp, r7
 8017158:	bd90      	pop	{r4, r7, pc}
 801715a:	bf00      	nop
 801715c:	0801ee3c 	.word	0x0801ee3c
 8017160:	20001aa0 	.word	0x20001aa0
 8017164:	20001a9c 	.word	0x20001a9c
 8017168:	0801ee44 	.word	0x0801ee44
 801716c:	0801eef8 	.word	0x0801eef8

08017170 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017170:	b590      	push	{r4, r7, lr}
 8017172:	b093      	sub	sp, #76	; 0x4c
 8017174:	af00      	add	r7, sp, #0
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	60b9      	str	r1, [r7, #8]
 801717a:	607a      	str	r2, [r7, #4]
 801717c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801717e:	2307      	movs	r3, #7
 8017180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017184:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017188:	2200      	movs	r2, #0
 801718a:	601a      	str	r2, [r3, #0]
 801718c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801718e:	2300      	movs	r3, #0
 8017190:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8017194:	2300      	movs	r3, #0
 8017196:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801719a:	2300      	movs	r3, #0
 801719c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801719e:	e085      	b.n	80172ac <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80171a0:	68fb      	ldr	r3, [r7, #12]
 80171a2:	685a      	ldr	r2, [r3, #4]
 80171a4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80171a8:	4413      	add	r3, r2
 80171aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80171ae:	4611      	mov	r1, r2
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7fe fe2f 	bl	8015e14 <RegionCommonParseLinkAdrReq>
 80171b6:	4603      	mov	r3, r0
 80171b8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80171bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d07b      	beq.n	80172bc <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80171c4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80171c8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80171cc:	4413      	add	r3, r2
 80171ce:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80171d2:	2307      	movs	r3, #7
 80171d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80171d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80171dc:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80171de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d109      	bne.n	80171fa <RegionEU868LinkAdrReq+0x8a>
 80171e6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d106      	bne.n	80171fa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80171ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80171f0:	f023 0301 	bic.w	r3, r3, #1
 80171f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80171f8:	e058      	b.n	80172ac <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80171fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d003      	beq.n	801720a <RegionEU868LinkAdrReq+0x9a>
 8017202:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017206:	2b05      	cmp	r3, #5
 8017208:	d903      	bls.n	8017212 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 801720a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801720e:	2b06      	cmp	r3, #6
 8017210:	d906      	bls.n	8017220 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017212:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017216:	f023 0301 	bic.w	r3, r3, #1
 801721a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801721e:	e045      	b.n	80172ac <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017220:	2300      	movs	r3, #0
 8017222:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8017226:	e03d      	b.n	80172a4 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801722c:	2b06      	cmp	r3, #6
 801722e:	d118      	bne.n	8017262 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017230:	4b5f      	ldr	r3, [pc, #380]	; (80173b0 <RegionEU868LinkAdrReq+0x240>)
 8017232:	6819      	ldr	r1, [r3, #0]
 8017234:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8017238:	4613      	mov	r3, r2
 801723a:	005b      	lsls	r3, r3, #1
 801723c:	4413      	add	r3, r2
 801723e:	009b      	lsls	r3, r3, #2
 8017240:	440b      	add	r3, r1
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d028      	beq.n	801729a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8017248:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801724c:	2201      	movs	r2, #1
 801724e:	fa02 f303 	lsl.w	r3, r2, r3
 8017252:	b21a      	sxth	r2, r3
 8017254:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017256:	b21b      	sxth	r3, r3
 8017258:	4313      	orrs	r3, r2
 801725a:	b21b      	sxth	r3, r3
 801725c:	b29b      	uxth	r3, r3
 801725e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8017260:	e01b      	b.n	801729a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017262:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017264:	461a      	mov	r2, r3
 8017266:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801726a:	fa42 f303 	asr.w	r3, r2, r3
 801726e:	f003 0301 	and.w	r3, r3, #1
 8017272:	2b00      	cmp	r3, #0
 8017274:	d011      	beq.n	801729a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8017276:	4b4e      	ldr	r3, [pc, #312]	; (80173b0 <RegionEU868LinkAdrReq+0x240>)
 8017278:	6819      	ldr	r1, [r3, #0]
 801727a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801727e:	4613      	mov	r3, r2
 8017280:	005b      	lsls	r3, r3, #1
 8017282:	4413      	add	r3, r2
 8017284:	009b      	lsls	r3, r3, #2
 8017286:	440b      	add	r3, r1
 8017288:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801728a:	2b00      	cmp	r3, #0
 801728c:	d105      	bne.n	801729a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801728e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017292:	f023 0301 	bic.w	r3, r3, #1
 8017296:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801729a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801729e:	3301      	adds	r3, #1
 80172a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80172a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80172a8:	2b0f      	cmp	r3, #15
 80172aa:	d9bd      	bls.n	8017228 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	7a1b      	ldrb	r3, [r3, #8]
 80172b0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80172b4:	429a      	cmp	r2, r3
 80172b6:	f4ff af73 	bcc.w	80171a0 <RegionEU868LinkAdrReq+0x30>
 80172ba:	e000      	b.n	80172be <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80172bc:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80172be:	2302      	movs	r3, #2
 80172c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	7a5b      	ldrb	r3, [r3, #9]
 80172c8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80172cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ff fa29 	bl	8016728 <RegionEU868GetPhyParam>
 80172d6:	4603      	mov	r3, r0
 80172d8:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80172da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80172de:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	7a9b      	ldrb	r3, [r3, #10]
 80172e4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80172e6:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80172ea:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80172ec:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80172f0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80172f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80172f6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80172fe:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017306:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	7b5b      	ldrb	r3, [r3, #13]
 801730c:	b25b      	sxtb	r3, r3
 801730e:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017310:	2310      	movs	r3, #16
 8017312:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8017314:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017318:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801731c:	b25b      	sxtb	r3, r3
 801731e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8017322:	2307      	movs	r3, #7
 8017324:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017328:	4b21      	ldr	r3, [pc, #132]	; (80173b0 <RegionEU868LinkAdrReq+0x240>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801732e:	2307      	movs	r3, #7
 8017330:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8017334:	2300      	movs	r3, #0
 8017336:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017340:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8017344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017348:	1c9a      	adds	r2, r3, #2
 801734a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801734e:	1c59      	adds	r1, r3, #1
 8017350:	f107 0010 	add.w	r0, r7, #16
 8017354:	4623      	mov	r3, r4
 8017356:	f7fe fdae 	bl	8015eb6 <RegionCommonLinkAdrReqVerifyParams>
 801735a:	4603      	mov	r3, r0
 801735c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017360:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017364:	2b07      	cmp	r3, #7
 8017366:	d10d      	bne.n	8017384 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8017368:	4b11      	ldr	r3, [pc, #68]	; (80173b0 <RegionEU868LinkAdrReq+0x240>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017370:	220c      	movs	r2, #12
 8017372:	2100      	movs	r1, #0
 8017374:	4618      	mov	r0, r3
 8017376:	f001 fd2b 	bl	8018dd0 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801737a:	4b0d      	ldr	r3, [pc, #52]	; (80173b0 <RegionEU868LinkAdrReq+0x240>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017380:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017384:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801738c:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017394:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017398:	683b      	ldr	r3, [r7, #0]
 801739a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801739c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801739e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80173a2:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80173a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	374c      	adds	r7, #76	; 0x4c
 80173ac:	46bd      	mov	sp, r7
 80173ae:	bd90      	pop	{r4, r7, pc}
 80173b0:	20001a9c 	.word	0x20001a9c

080173b4 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80173b4:	b580      	push	{r7, lr}
 80173b6:	b084      	sub	sp, #16
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80173bc:	2307      	movs	r3, #7
 80173be:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80173c0:	2300      	movs	r3, #0
 80173c2:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	685b      	ldr	r3, [r3, #4]
 80173c8:	f107 020e 	add.w	r2, r7, #14
 80173cc:	4611      	mov	r1, r2
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7ff f8e4 	bl	801659c <VerifyRfFreq>
 80173d4:	4603      	mov	r3, r0
 80173d6:	f083 0301 	eor.w	r3, r3, #1
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d003      	beq.n	80173e8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80173e0:	7bfb      	ldrb	r3, [r7, #15]
 80173e2:	f023 0301 	bic.w	r3, r3, #1
 80173e6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	f993 3000 	ldrsb.w	r3, [r3]
 80173ee:	2207      	movs	r2, #7
 80173f0:	2100      	movs	r1, #0
 80173f2:	4618      	mov	r0, r3
 80173f4:	f7fe fb4d 	bl	8015a92 <RegionCommonValueInRange>
 80173f8:	4603      	mov	r3, r0
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d103      	bne.n	8017406 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80173fe:	7bfb      	ldrb	r3, [r7, #15]
 8017400:	f023 0302 	bic.w	r3, r3, #2
 8017404:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801740c:	2205      	movs	r2, #5
 801740e:	2100      	movs	r1, #0
 8017410:	4618      	mov	r0, r3
 8017412:	f7fe fb3e 	bl	8015a92 <RegionCommonValueInRange>
 8017416:	4603      	mov	r3, r0
 8017418:	2b00      	cmp	r3, #0
 801741a:	d103      	bne.n	8017424 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801741c:	7bfb      	ldrb	r3, [r7, #15]
 801741e:	f023 0304 	bic.w	r3, r3, #4
 8017422:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8017424:	7bfb      	ldrb	r3, [r7, #15]
}
 8017426:	4618      	mov	r0, r3
 8017428:	3710      	adds	r7, #16
 801742a:	46bd      	mov	sp, r7
 801742c:	bd80      	pop	{r7, pc}
	...

08017430 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017438:	2303      	movs	r3, #3
 801743a:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d114      	bne.n	8017470 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801744c:	b2db      	uxtb	r3, r3
 801744e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8017450:	f107 0308 	add.w	r3, r7, #8
 8017454:	4618      	mov	r0, r3
 8017456:	f000 f9f9 	bl	801784c <RegionEU868ChannelsRemove>
 801745a:	4603      	mov	r3, r0
 801745c:	f083 0301 	eor.w	r3, r3, #1
 8017460:	b2db      	uxtb	r3, r3
 8017462:	2b00      	cmp	r3, #0
 8017464:	d03b      	beq.n	80174de <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8017466:	7dfb      	ldrb	r3, [r7, #23]
 8017468:	f023 0303 	bic.w	r3, r3, #3
 801746c:	75fb      	strb	r3, [r7, #23]
 801746e:	e036      	b.n	80174de <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801747c:	b2db      	uxtb	r3, r3
 801747e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8017480:	f107 030c 	add.w	r3, r7, #12
 8017484:	4618      	mov	r0, r3
 8017486:	f000 f93f 	bl	8017708 <RegionEU868ChannelAdd>
 801748a:	4603      	mov	r3, r0
 801748c:	2b06      	cmp	r3, #6
 801748e:	d820      	bhi.n	80174d2 <RegionEU868NewChannelReq+0xa2>
 8017490:	a201      	add	r2, pc, #4	; (adr r2, 8017498 <RegionEU868NewChannelReq+0x68>)
 8017492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017496:	bf00      	nop
 8017498:	080174dd 	.word	0x080174dd
 801749c:	080174d3 	.word	0x080174d3
 80174a0:	080174d3 	.word	0x080174d3
 80174a4:	080174d3 	.word	0x080174d3
 80174a8:	080174b5 	.word	0x080174b5
 80174ac:	080174bf 	.word	0x080174bf
 80174b0:	080174c9 	.word	0x080174c9
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80174b4:	7dfb      	ldrb	r3, [r7, #23]
 80174b6:	f023 0301 	bic.w	r3, r3, #1
 80174ba:	75fb      	strb	r3, [r7, #23]
                break;
 80174bc:	e00f      	b.n	80174de <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80174be:	7dfb      	ldrb	r3, [r7, #23]
 80174c0:	f023 0302 	bic.w	r3, r3, #2
 80174c4:	75fb      	strb	r3, [r7, #23]
                break;
 80174c6:	e00a      	b.n	80174de <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80174c8:	7dfb      	ldrb	r3, [r7, #23]
 80174ca:	f023 0303 	bic.w	r3, r3, #3
 80174ce:	75fb      	strb	r3, [r7, #23]
                break;
 80174d0:	e005      	b.n	80174de <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80174d2:	7dfb      	ldrb	r3, [r7, #23]
 80174d4:	f023 0303 	bic.w	r3, r3, #3
 80174d8:	75fb      	strb	r3, [r7, #23]
                break;
 80174da:	e000      	b.n	80174de <RegionEU868NewChannelReq+0xae>
                break;
 80174dc:	bf00      	nop
            }
        }
    }

    return status;
 80174de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174e2:	4618      	mov	r0, r3
 80174e4:	3718      	adds	r7, #24
 80174e6:	46bd      	mov	sp, r7
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	bf00      	nop

080174ec <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80174ec:	b480      	push	{r7}
 80174ee:	b083      	sub	sp, #12
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80174f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	370c      	adds	r7, #12
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bc80      	pop	{r7}
 8017500:	4770      	bx	lr
	...

08017504 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017504:	b580      	push	{r7, lr}
 8017506:	b084      	sub	sp, #16
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801750c:	2303      	movs	r3, #3
 801750e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017510:	2300      	movs	r3, #0
 8017512:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	685b      	ldr	r3, [r3, #4]
 8017518:	f107 020e 	add.w	r2, r7, #14
 801751c:	4611      	mov	r1, r2
 801751e:	4618      	mov	r0, r3
 8017520:	f7ff f83c 	bl	801659c <VerifyRfFreq>
 8017524:	4603      	mov	r3, r0
 8017526:	f083 0301 	eor.w	r3, r3, #1
 801752a:	b2db      	uxtb	r3, r3
 801752c:	2b00      	cmp	r3, #0
 801752e:	d003      	beq.n	8017538 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8017530:	7bfb      	ldrb	r3, [r7, #15]
 8017532:	f023 0301 	bic.w	r3, r3, #1
 8017536:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8017538:	4b13      	ldr	r3, [pc, #76]	; (8017588 <RegionEU868DlChannelReq+0x84>)
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	4619      	mov	r1, r3
 8017542:	460b      	mov	r3, r1
 8017544:	005b      	lsls	r3, r3, #1
 8017546:	440b      	add	r3, r1
 8017548:	009b      	lsls	r3, r3, #2
 801754a:	4413      	add	r3, r2
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d103      	bne.n	801755a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8017552:	7bfb      	ldrb	r3, [r7, #15]
 8017554:	f023 0302 	bic.w	r3, r3, #2
 8017558:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801755a:	7bfb      	ldrb	r3, [r7, #15]
 801755c:	2b03      	cmp	r3, #3
 801755e:	d10d      	bne.n	801757c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8017560:	4b09      	ldr	r3, [pc, #36]	; (8017588 <RegionEU868DlChannelReq+0x84>)
 8017562:	6819      	ldr	r1, [r3, #0]
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	4618      	mov	r0, r3
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	685a      	ldr	r2, [r3, #4]
 801756e:	4603      	mov	r3, r0
 8017570:	005b      	lsls	r3, r3, #1
 8017572:	4403      	add	r3, r0
 8017574:	009b      	lsls	r3, r3, #2
 8017576:	440b      	add	r3, r1
 8017578:	3304      	adds	r3, #4
 801757a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801757c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017580:	4618      	mov	r0, r3
 8017582:	3710      	adds	r7, #16
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}
 8017588:	20001a9c 	.word	0x20001a9c

0801758c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801758c:	b480      	push	{r7}
 801758e:	b083      	sub	sp, #12
 8017590:	af00      	add	r7, sp, #0
 8017592:	4603      	mov	r3, r0
 8017594:	460a      	mov	r2, r1
 8017596:	71fb      	strb	r3, [r7, #7]
 8017598:	4613      	mov	r3, r2
 801759a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801759c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80175a0:	4618      	mov	r0, r3
 80175a2:	370c      	adds	r7, #12
 80175a4:	46bd      	mov	sp, r7
 80175a6:	bc80      	pop	{r7}
 80175a8:	4770      	bx	lr
	...

080175ac <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b09a      	sub	sp, #104	; 0x68
 80175b0:	af02      	add	r7, sp, #8
 80175b2:	60f8      	str	r0, [r7, #12]
 80175b4:	60b9      	str	r1, [r7, #8]
 80175b6:	607a      	str	r2, [r7, #4]
 80175b8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80175ba:	2300      	movs	r3, #0
 80175bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80175c0:	2300      	movs	r3, #0
 80175c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80175c6:	2300      	movs	r3, #0
 80175c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80175ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80175ce:	2200      	movs	r2, #0
 80175d0:	601a      	str	r2, [r3, #0]
 80175d2:	605a      	str	r2, [r3, #4]
 80175d4:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80175d6:	230c      	movs	r3, #12
 80175d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80175dc:	2307      	movs	r3, #7
 80175de:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80175e0:	4b47      	ldr	r3, [pc, #284]	; (8017700 <RegionEU868NextChannel+0x154>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80175e8:	2201      	movs	r2, #1
 80175ea:	2100      	movs	r1, #0
 80175ec:	4618      	mov	r0, r3
 80175ee:	f7fe faa1 	bl	8015b34 <RegionCommonCountChannels>
 80175f2:	4603      	mov	r3, r0
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d10a      	bne.n	801760e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80175f8:	4b41      	ldr	r3, [pc, #260]	; (8017700 <RegionEU868NextChannel+0x154>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017600:	4b3f      	ldr	r3, [pc, #252]	; (8017700 <RegionEU868NextChannel+0x154>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	f042 0207 	orr.w	r2, r2, #7
 8017608:	b292      	uxth	r2, r2
 801760a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	7a5b      	ldrb	r3, [r3, #9]
 8017612:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801761a:	b2db      	uxtb	r3, r3
 801761c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801761e:	4b38      	ldr	r3, [pc, #224]	; (8017700 <RegionEU868NextChannel+0x154>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017626:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017628:	4b35      	ldr	r3, [pc, #212]	; (8017700 <RegionEU868NextChannel+0x154>)
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801762e:	4b35      	ldr	r3, [pc, #212]	; (8017704 <RegionEU868NextChannel+0x158>)
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8017634:	2310      	movs	r3, #16
 8017636:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8017638:	f107 0312 	add.w	r3, r7, #18
 801763c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	685b      	ldr	r3, [r3, #4]
 8017648:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	7a9b      	ldrb	r3, [r3, #10]
 801764e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8017652:	2306      	movs	r3, #6
 8017654:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801765e:	320c      	adds	r2, #12
 8017660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017664:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	7d1b      	ldrb	r3, [r3, #20]
 801766c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	8adb      	ldrh	r3, [r3, #22]
 801767a:	4619      	mov	r1, r3
 801767c:	4610      	mov	r0, r2
 801767e:	f7ff f803 	bl	8016688 <GetTimeOnAir>
 8017682:	4603      	mov	r3, r0
 8017684:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8017686:	f107 0314 	add.w	r3, r7, #20
 801768a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801768c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8017690:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017694:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	9301      	str	r3, [sp, #4]
 801769c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80176a0:	9300      	str	r3, [sp, #0]
 80176a2:	460b      	mov	r3, r1
 80176a4:	6839      	ldr	r1, [r7, #0]
 80176a6:	f7fe fe5c 	bl	8016362 <RegionCommonIdentifyChannels>
 80176aa:	4603      	mov	r3, r0
 80176ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80176b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d10e      	bne.n	80176d6 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80176b8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80176bc:	3b01      	subs	r3, #1
 80176be:	4619      	mov	r1, r3
 80176c0:	2000      	movs	r0, #0
 80176c2:	f001 fb33 	bl	8018d2c <randr>
 80176c6:	4603      	mov	r3, r0
 80176c8:	3360      	adds	r3, #96	; 0x60
 80176ca:	443b      	add	r3, r7
 80176cc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80176d0:	68bb      	ldr	r3, [r7, #8]
 80176d2:	701a      	strb	r2, [r3, #0]
 80176d4:	e00e      	b.n	80176f4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80176d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80176da:	2b0c      	cmp	r3, #12
 80176dc:	d10a      	bne.n	80176f4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80176de:	4b08      	ldr	r3, [pc, #32]	; (8017700 <RegionEU868NextChannel+0x154>)
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80176e6:	4b06      	ldr	r3, [pc, #24]	; (8017700 <RegionEU868NextChannel+0x154>)
 80176e8:	681b      	ldr	r3, [r3, #0]
 80176ea:	f042 0207 	orr.w	r2, r2, #7
 80176ee:	b292      	uxth	r2, r2
 80176f0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 80176f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	3760      	adds	r7, #96	; 0x60
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}
 8017700:	20001a9c 	.word	0x20001a9c
 8017704:	20001aa0 	.word	0x20001aa0

08017708 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b084      	sub	sp, #16
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017710:	2300      	movs	r3, #0
 8017712:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8017714:	2300      	movs	r3, #0
 8017716:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017718:	2300      	movs	r3, #0
 801771a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	791b      	ldrb	r3, [r3, #4]
 8017720:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017722:	7b7b      	ldrb	r3, [r7, #13]
 8017724:	2b02      	cmp	r3, #2
 8017726:	d801      	bhi.n	801772c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017728:	2306      	movs	r3, #6
 801772a:	e089      	b.n	8017840 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 801772c:	7b7b      	ldrb	r3, [r7, #13]
 801772e:	2b0f      	cmp	r3, #15
 8017730:	d901      	bls.n	8017736 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017732:	2303      	movs	r3, #3
 8017734:	e084      	b.n	8017840 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	7a1b      	ldrb	r3, [r3, #8]
 801773c:	f343 0303 	sbfx	r3, r3, #0, #4
 8017740:	b25b      	sxtb	r3, r3
 8017742:	2207      	movs	r2, #7
 8017744:	2100      	movs	r1, #0
 8017746:	4618      	mov	r0, r3
 8017748:	f7fe f9a3 	bl	8015a92 <RegionCommonValueInRange>
 801774c:	4603      	mov	r3, r0
 801774e:	2b00      	cmp	r3, #0
 8017750:	d101      	bne.n	8017756 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8017752:	2301      	movs	r3, #1
 8017754:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	7a1b      	ldrb	r3, [r3, #8]
 801775c:	f343 1303 	sbfx	r3, r3, #4, #4
 8017760:	b25b      	sxtb	r3, r3
 8017762:	2207      	movs	r2, #7
 8017764:	2100      	movs	r1, #0
 8017766:	4618      	mov	r0, r3
 8017768:	f7fe f993 	bl	8015a92 <RegionCommonValueInRange>
 801776c:	4603      	mov	r3, r0
 801776e:	2b00      	cmp	r3, #0
 8017770:	d101      	bne.n	8017776 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8017772:	2301      	movs	r3, #1
 8017774:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	7a1b      	ldrb	r3, [r3, #8]
 801777c:	f343 0303 	sbfx	r3, r3, #0, #4
 8017780:	b25a      	sxtb	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	7a1b      	ldrb	r3, [r3, #8]
 8017788:	f343 1303 	sbfx	r3, r3, #4, #4
 801778c:	b25b      	sxtb	r3, r3
 801778e:	429a      	cmp	r2, r3
 8017790:	dd01      	ble.n	8017796 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8017792:	2301      	movs	r3, #1
 8017794:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8017796:	7bbb      	ldrb	r3, [r7, #14]
 8017798:	f083 0301 	eor.w	r3, r3, #1
 801779c:	b2db      	uxtb	r3, r3
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d010      	beq.n	80177c4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	f107 020c 	add.w	r2, r7, #12
 80177ac:	4611      	mov	r1, r2
 80177ae:	4618      	mov	r0, r3
 80177b0:	f7fe fef4 	bl	801659c <VerifyRfFreq>
 80177b4:	4603      	mov	r3, r0
 80177b6:	f083 0301 	eor.w	r3, r3, #1
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80177c0:	2301      	movs	r3, #1
 80177c2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80177c4:	7bfb      	ldrb	r3, [r7, #15]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d004      	beq.n	80177d4 <RegionEU868ChannelAdd+0xcc>
 80177ca:	7bbb      	ldrb	r3, [r7, #14]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d001      	beq.n	80177d4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80177d0:	2306      	movs	r3, #6
 80177d2:	e035      	b.n	8017840 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80177d4:	7bfb      	ldrb	r3, [r7, #15]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d001      	beq.n	80177de <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80177da:	2305      	movs	r3, #5
 80177dc:	e030      	b.n	8017840 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80177de:	7bbb      	ldrb	r3, [r7, #14]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d001      	beq.n	80177e8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80177e4:	2304      	movs	r3, #4
 80177e6:	e02b      	b.n	8017840 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80177e8:	4b17      	ldr	r3, [pc, #92]	; (8017848 <RegionEU868ChannelAdd+0x140>)
 80177ea:	6819      	ldr	r1, [r3, #0]
 80177ec:	7b7a      	ldrb	r2, [r7, #13]
 80177ee:	4613      	mov	r3, r2
 80177f0:	005b      	lsls	r3, r3, #1
 80177f2:	4413      	add	r3, r2
 80177f4:	009b      	lsls	r3, r3, #2
 80177f6:	18c8      	adds	r0, r1, r3
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	220c      	movs	r2, #12
 80177fe:	4619      	mov	r1, r3
 8017800:	f001 faab 	bl	8018d5a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017804:	4b10      	ldr	r3, [pc, #64]	; (8017848 <RegionEU868ChannelAdd+0x140>)
 8017806:	6819      	ldr	r1, [r3, #0]
 8017808:	7b7a      	ldrb	r2, [r7, #13]
 801780a:	7b38      	ldrb	r0, [r7, #12]
 801780c:	4613      	mov	r3, r2
 801780e:	005b      	lsls	r3, r3, #1
 8017810:	4413      	add	r3, r2
 8017812:	009b      	lsls	r3, r3, #2
 8017814:	440b      	add	r3, r1
 8017816:	3309      	adds	r3, #9
 8017818:	4602      	mov	r2, r0
 801781a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 801781c:	4b0a      	ldr	r3, [pc, #40]	; (8017848 <RegionEU868ChannelAdd+0x140>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017824:	b21a      	sxth	r2, r3
 8017826:	7b7b      	ldrb	r3, [r7, #13]
 8017828:	2101      	movs	r1, #1
 801782a:	fa01 f303 	lsl.w	r3, r1, r3
 801782e:	b21b      	sxth	r3, r3
 8017830:	4313      	orrs	r3, r2
 8017832:	b21a      	sxth	r2, r3
 8017834:	4b04      	ldr	r3, [pc, #16]	; (8017848 <RegionEU868ChannelAdd+0x140>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	b292      	uxth	r2, r2
 801783a:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 801783e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017840:	4618      	mov	r0, r3
 8017842:	3710      	adds	r7, #16
 8017844:	46bd      	mov	sp, r7
 8017846:	bd80      	pop	{r7, pc}
 8017848:	20001a9c 	.word	0x20001a9c

0801784c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b086      	sub	sp, #24
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	781b      	ldrb	r3, [r3, #0]
 8017858:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801785a:	7dfb      	ldrb	r3, [r7, #23]
 801785c:	2b02      	cmp	r3, #2
 801785e:	d801      	bhi.n	8017864 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017860:	2300      	movs	r3, #0
 8017862:	e016      	b.n	8017892 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017864:	4b0d      	ldr	r3, [pc, #52]	; (801789c <RegionEU868ChannelsRemove+0x50>)
 8017866:	6819      	ldr	r1, [r3, #0]
 8017868:	7dfa      	ldrb	r2, [r7, #23]
 801786a:	4613      	mov	r3, r2
 801786c:	005b      	lsls	r3, r3, #1
 801786e:	4413      	add	r3, r2
 8017870:	009b      	lsls	r3, r3, #2
 8017872:	440b      	add	r3, r1
 8017874:	461a      	mov	r2, r3
 8017876:	2300      	movs	r3, #0
 8017878:	6013      	str	r3, [r2, #0]
 801787a:	6053      	str	r3, [r2, #4]
 801787c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801787e:	4b07      	ldr	r3, [pc, #28]	; (801789c <RegionEU868ChannelsRemove+0x50>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017886:	7df9      	ldrb	r1, [r7, #23]
 8017888:	2210      	movs	r2, #16
 801788a:	4618      	mov	r0, r3
 801788c:	f7fe f91e 	bl	8015acc <RegionCommonChanDisable>
 8017890:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017892:	4618      	mov	r0, r3
 8017894:	3718      	adds	r7, #24
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}
 801789a:	bf00      	nop
 801789c:	20001a9c 	.word	0x20001a9c

080178a0 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80178a0:	b480      	push	{r7}
 80178a2:	b085      	sub	sp, #20
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	4603      	mov	r3, r0
 80178a8:	71fb      	strb	r3, [r7, #7]
 80178aa:	460b      	mov	r3, r1
 80178ac:	71bb      	strb	r3, [r7, #6]
 80178ae:	4613      	mov	r3, r2
 80178b0:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80178b2:	79ba      	ldrb	r2, [r7, #6]
 80178b4:	797b      	ldrb	r3, [r7, #5]
 80178b6:	1ad3      	subs	r3, r2, r3
 80178b8:	b2db      	uxtb	r3, r3
 80178ba:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80178bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	da01      	bge.n	80178c8 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80178c4:	2300      	movs	r3, #0
 80178c6:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80178c8:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3714      	adds	r7, #20
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bc80      	pop	{r7}
 80178d2:	4770      	bx	lr

080178d4 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80178d4:	b580      	push	{r7, lr}
 80178d6:	b084      	sub	sp, #16
 80178d8:	af00      	add	r7, sp, #0
 80178da:	603b      	str	r3, [r7, #0]
 80178dc:	4603      	mov	r3, r0
 80178de:	71fb      	strb	r3, [r7, #7]
 80178e0:	460b      	mov	r3, r1
 80178e2:	71bb      	strb	r3, [r7, #6]
 80178e4:	4613      	mov	r3, r2
 80178e6:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80178e8:	79fb      	ldrb	r3, [r7, #7]
 80178ea:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80178ec:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80178f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80178f4:	4611      	mov	r1, r2
 80178f6:	4618      	mov	r0, r3
 80178f8:	f7fe fdd3 	bl	80164a2 <RegionCommonLimitTxPower>
 80178fc:	4603      	mov	r3, r0
 80178fe:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8017900:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017904:	2b04      	cmp	r3, #4
 8017906:	d106      	bne.n	8017916 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8017908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801790c:	2b02      	cmp	r3, #2
 801790e:	bfb8      	it	lt
 8017910:	2302      	movlt	r3, #2
 8017912:	73fb      	strb	r3, [r7, #15]
 8017914:	e00d      	b.n	8017932 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8017916:	2204      	movs	r2, #4
 8017918:	2100      	movs	r1, #0
 801791a:	6838      	ldr	r0, [r7, #0]
 801791c:	f7fe f90a 	bl	8015b34 <RegionCommonCountChannels>
 8017920:	4603      	mov	r3, r0
 8017922:	2b31      	cmp	r3, #49	; 0x31
 8017924:	d805      	bhi.n	8017932 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8017926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801792a:	2b05      	cmp	r3, #5
 801792c:	bfb8      	it	lt
 801792e:	2305      	movlt	r3, #5
 8017930:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8017932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017936:	4618      	mov	r0, r3
 8017938:	3710      	adds	r7, #16
 801793a:	46bd      	mov	sp, r7
 801793c:	bd80      	pop	{r7, pc}
	...

08017940 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8017948:	4b18      	ldr	r3, [pc, #96]	; (80179ac <VerifyRfFreq+0x6c>)
 801794a:	6a1b      	ldr	r3, [r3, #32]
 801794c:	6878      	ldr	r0, [r7, #4]
 801794e:	4798      	blx	r3
 8017950:	4603      	mov	r3, r0
 8017952:	f083 0301 	eor.w	r3, r3, #1
 8017956:	b2db      	uxtb	r3, r3
 8017958:	2b00      	cmp	r3, #0
 801795a:	d001      	beq.n	8017960 <VerifyRfFreq+0x20>
    {
        return false;
 801795c:	2300      	movs	r3, #0
 801795e:	e021      	b.n	80179a4 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	4a13      	ldr	r2, [pc, #76]	; (80179b0 <VerifyRfFreq+0x70>)
 8017964:	4293      	cmp	r3, r2
 8017966:	d910      	bls.n	801798a <VerifyRfFreq+0x4a>
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	4a12      	ldr	r2, [pc, #72]	; (80179b4 <VerifyRfFreq+0x74>)
 801796c:	4293      	cmp	r3, r2
 801796e:	d80c      	bhi.n	801798a <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8017970:	687a      	ldr	r2, [r7, #4]
 8017972:	4b11      	ldr	r3, [pc, #68]	; (80179b8 <VerifyRfFreq+0x78>)
 8017974:	4413      	add	r3, r2
 8017976:	4a11      	ldr	r2, [pc, #68]	; (80179bc <VerifyRfFreq+0x7c>)
 8017978:	fba2 1203 	umull	r1, r2, r2, r3
 801797c:	0c92      	lsrs	r2, r2, #18
 801797e:	4910      	ldr	r1, [pc, #64]	; (80179c0 <VerifyRfFreq+0x80>)
 8017980:	fb01 f202 	mul.w	r2, r1, r2
 8017984:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8017986:	2a00      	cmp	r2, #0
 8017988:	d001      	beq.n	801798e <VerifyRfFreq+0x4e>
    {
        return false;
 801798a:	2300      	movs	r3, #0
 801798c:	e00a      	b.n	80179a4 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4a0c      	ldr	r2, [pc, #48]	; (80179c4 <VerifyRfFreq+0x84>)
 8017992:	4293      	cmp	r3, r2
 8017994:	d903      	bls.n	801799e <VerifyRfFreq+0x5e>
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	4a06      	ldr	r2, [pc, #24]	; (80179b4 <VerifyRfFreq+0x74>)
 801799a:	4293      	cmp	r3, r2
 801799c:	d901      	bls.n	80179a2 <VerifyRfFreq+0x62>
    {
        return false;
 801799e:	2300      	movs	r3, #0
 80179a0:	e000      	b.n	80179a4 <VerifyRfFreq+0x64>
    }
    return true;
 80179a2:	2301      	movs	r3, #1
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3708      	adds	r7, #8
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	0801eef8 	.word	0x0801eef8
 80179b0:	3708709f 	.word	0x3708709f
 80179b4:	374886e0 	.word	0x374886e0
 80179b8:	c8f78f60 	.word	0xc8f78f60
 80179bc:	6fd91d85 	.word	0x6fd91d85
 80179c0:	000927c0 	.word	0x000927c0
 80179c4:	35c8015f 	.word	0x35c8015f

080179c8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80179c8:	b590      	push	{r4, r7, lr}
 80179ca:	b089      	sub	sp, #36	; 0x24
 80179cc:	af04      	add	r7, sp, #16
 80179ce:	4603      	mov	r3, r0
 80179d0:	460a      	mov	r2, r1
 80179d2:	71fb      	strb	r3, [r7, #7]
 80179d4:	4613      	mov	r3, r2
 80179d6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80179d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179dc:	4a0f      	ldr	r2, [pc, #60]	; (8017a1c <GetTimeOnAir+0x54>)
 80179de:	5cd3      	ldrb	r3, [r2, r3]
 80179e0:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80179e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80179e6:	490e      	ldr	r1, [pc, #56]	; (8017a20 <GetTimeOnAir+0x58>)
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7fe fd6f 	bl	80164cc <RegionCommonGetBandwidth>
 80179ee:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80179f0:	4b0c      	ldr	r3, [pc, #48]	; (8017a24 <GetTimeOnAir+0x5c>)
 80179f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80179f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80179f8:	88bb      	ldrh	r3, [r7, #4]
 80179fa:	b2db      	uxtb	r3, r3
 80179fc:	2101      	movs	r1, #1
 80179fe:	9103      	str	r1, [sp, #12]
 8017a00:	9302      	str	r3, [sp, #8]
 8017a02:	2300      	movs	r3, #0
 8017a04:	9301      	str	r3, [sp, #4]
 8017a06:	2308      	movs	r3, #8
 8017a08:	9300      	str	r3, [sp, #0]
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	68b9      	ldr	r1, [r7, #8]
 8017a0e:	2001      	movs	r0, #1
 8017a10:	47a0      	blx	r4
 8017a12:	4603      	mov	r3, r0
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3714      	adds	r7, #20
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	bd90      	pop	{r4, r7, pc}
 8017a1c:	0801ee74 	.word	0x0801ee74
 8017a20:	0801ee84 	.word	0x0801ee84
 8017a24:	0801eef8 	.word	0x0801eef8

08017a28 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b088      	sub	sp, #32
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8017a30:	2300      	movs	r3, #0
 8017a32:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	3b01      	subs	r3, #1
 8017a3a:	2b37      	cmp	r3, #55	; 0x37
 8017a3c:	f200 8136 	bhi.w	8017cac <RegionUS915GetPhyParam+0x284>
 8017a40:	a201      	add	r2, pc, #4	; (adr r2, 8017a48 <RegionUS915GetPhyParam+0x20>)
 8017a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a46:	bf00      	nop
 8017a48:	08017b29 	.word	0x08017b29
 8017a4c:	08017b2f 	.word	0x08017b2f
 8017a50:	08017cad 	.word	0x08017cad
 8017a54:	08017cad 	.word	0x08017cad
 8017a58:	08017cad 	.word	0x08017cad
 8017a5c:	08017b35 	.word	0x08017b35
 8017a60:	08017cad 	.word	0x08017cad
 8017a64:	08017b6f 	.word	0x08017b6f
 8017a68:	08017cad 	.word	0x08017cad
 8017a6c:	08017b75 	.word	0x08017b75
 8017a70:	08017b7b 	.word	0x08017b7b
 8017a74:	08017b81 	.word	0x08017b81
 8017a78:	08017b87 	.word	0x08017b87
 8017a7c:	08017b97 	.word	0x08017b97
 8017a80:	08017ba7 	.word	0x08017ba7
 8017a84:	08017bad 	.word	0x08017bad
 8017a88:	08017bb5 	.word	0x08017bb5
 8017a8c:	08017bbd 	.word	0x08017bbd
 8017a90:	08017bc5 	.word	0x08017bc5
 8017a94:	08017bcd 	.word	0x08017bcd
 8017a98:	08017bd5 	.word	0x08017bd5
 8017a9c:	08017be9 	.word	0x08017be9
 8017aa0:	08017bef 	.word	0x08017bef
 8017aa4:	08017bf5 	.word	0x08017bf5
 8017aa8:	08017bfb 	.word	0x08017bfb
 8017aac:	08017c07 	.word	0x08017c07
 8017ab0:	08017c13 	.word	0x08017c13
 8017ab4:	08017c19 	.word	0x08017c19
 8017ab8:	08017c21 	.word	0x08017c21
 8017abc:	08017c27 	.word	0x08017c27
 8017ac0:	08017c2d 	.word	0x08017c2d
 8017ac4:	08017c33 	.word	0x08017c33
 8017ac8:	08017b3b 	.word	0x08017b3b
 8017acc:	08017cad 	.word	0x08017cad
 8017ad0:	08017cad 	.word	0x08017cad
 8017ad4:	08017cad 	.word	0x08017cad
 8017ad8:	08017cad 	.word	0x08017cad
 8017adc:	08017cad 	.word	0x08017cad
 8017ae0:	08017cad 	.word	0x08017cad
 8017ae4:	08017cad 	.word	0x08017cad
 8017ae8:	08017cad 	.word	0x08017cad
 8017aec:	08017cad 	.word	0x08017cad
 8017af0:	08017cad 	.word	0x08017cad
 8017af4:	08017cad 	.word	0x08017cad
 8017af8:	08017cad 	.word	0x08017cad
 8017afc:	08017cad 	.word	0x08017cad
 8017b00:	08017c3b 	.word	0x08017c3b
 8017b04:	08017c4f 	.word	0x08017c4f
 8017b08:	08017c5d 	.word	0x08017c5d
 8017b0c:	08017c63 	.word	0x08017c63
 8017b10:	08017cad 	.word	0x08017cad
 8017b14:	08017c69 	.word	0x08017c69
 8017b18:	08017c7d 	.word	0x08017c7d
 8017b1c:	08017c83 	.word	0x08017c83
 8017b20:	08017c89 	.word	0x08017c89
 8017b24:	08017c99 	.word	0x08017c99
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8017b28:	2308      	movs	r3, #8
 8017b2a:	61bb      	str	r3, [r7, #24]
            break;
 8017b2c:	e0bf      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8017b2e:	2300      	movs	r3, #0
 8017b30:	61bb      	str	r3, [r7, #24]
            break;
 8017b32:	e0bc      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8017b34:	2300      	movs	r3, #0
 8017b36:	61bb      	str	r3, [r7, #24]
            break;
 8017b38:	e0b9      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b40:	733b      	strb	r3, [r7, #12]
 8017b42:	2304      	movs	r3, #4
 8017b44:	737b      	strb	r3, [r7, #13]
 8017b46:	2300      	movs	r3, #0
 8017b48:	73bb      	strb	r3, [r7, #14]
 8017b4a:	2348      	movs	r3, #72	; 0x48
 8017b4c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8017b4e:	4b5b      	ldr	r3, [pc, #364]	; (8017cbc <RegionUS915GetPhyParam+0x294>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b56:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017b58:	4b58      	ldr	r3, [pc, #352]	; (8017cbc <RegionUS915GetPhyParam+0x294>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017b5c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8017b5e:	f107 030c 	add.w	r3, r7, #12
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7fe fc5f 	bl	8016426 <RegionCommonGetNextLowerTxDr>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	61bb      	str	r3, [r7, #24]
            break;
 8017b6c:	e09f      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8017b6e:	2300      	movs	r3, #0
 8017b70:	61bb      	str	r3, [r7, #24]
            break;
 8017b72:	e09c      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017b74:	2300      	movs	r3, #0
 8017b76:	61bb      	str	r3, [r7, #24]
            break;
 8017b78:	e099      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8017b7a:	2340      	movs	r3, #64	; 0x40
 8017b7c:	61bb      	str	r3, [r7, #24]
            break;
 8017b7e:	e096      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017b80:	2320      	movs	r3, #32
 8017b82:	61bb      	str	r3, [r7, #24]
            break;
 8017b84:	e093      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	4b4c      	ldr	r3, [pc, #304]	; (8017cc0 <RegionUS915GetPhyParam+0x298>)
 8017b90:	5c9b      	ldrb	r3, [r3, r2]
 8017b92:	61bb      	str	r3, [r7, #24]
            break;
 8017b94:	e08b      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017b9c:	461a      	mov	r2, r3
 8017b9e:	4b49      	ldr	r3, [pc, #292]	; (8017cc4 <RegionUS915GetPhyParam+0x29c>)
 8017ba0:	5c9b      	ldrb	r3, [r3, r2]
 8017ba2:	61bb      	str	r3, [r7, #24]
            break;
 8017ba4:	e083      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	61bb      	str	r3, [r7, #24]
            break;
 8017baa:	e080      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8017bac:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017bb0:	61bb      	str	r3, [r7, #24]
            break;
 8017bb2:	e07c      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017bb8:	61bb      	str	r3, [r7, #24]
            break;
 8017bba:	e078      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8017bbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017bc0:	61bb      	str	r3, [r7, #24]
            break;
 8017bc2:	e074      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017bc4:	f241 3388 	movw	r3, #5000	; 0x1388
 8017bc8:	61bb      	str	r3, [r7, #24]
            break;
 8017bca:	e070      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8017bcc:	f241 7370 	movw	r3, #6000	; 0x1770
 8017bd0:	61bb      	str	r3, [r7, #24]
            break;
 8017bd2:	e06c      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017bd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bd8:	483b      	ldr	r0, [pc, #236]	; (8017cc8 <RegionUS915GetPhyParam+0x2a0>)
 8017bda:	f001 f8a7 	bl	8018d2c <randr>
 8017bde:	4603      	mov	r3, r0
 8017be0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8017be4:	61bb      	str	r3, [r7, #24]
            break;
 8017be6:	e062      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8017be8:	2300      	movs	r3, #0
 8017bea:	61bb      	str	r3, [r7, #24]
            break;
 8017bec:	e05f      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8017bee:	4b37      	ldr	r3, [pc, #220]	; (8017ccc <RegionUS915GetPhyParam+0x2a4>)
 8017bf0:	61bb      	str	r3, [r7, #24]
            break;
 8017bf2:	e05c      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8017bf4:	2308      	movs	r3, #8
 8017bf6:	61bb      	str	r3, [r7, #24]
            break;
 8017bf8:	e059      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017bfa:	4b30      	ldr	r3, [pc, #192]	; (8017cbc <RegionUS915GetPhyParam+0x294>)
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017c02:	61bb      	str	r3, [r7, #24]
            break;
 8017c04:	e053      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8017c06:	4b2d      	ldr	r3, [pc, #180]	; (8017cbc <RegionUS915GetPhyParam+0x294>)
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017c0e:	61bb      	str	r3, [r7, #24]
            break;
 8017c10:	e04d      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8017c12:	2348      	movs	r3, #72	; 0x48
 8017c14:	61bb      	str	r3, [r7, #24]
            break;
 8017c16:	e04a      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8017c18:	4b28      	ldr	r3, [pc, #160]	; (8017cbc <RegionUS915GetPhyParam+0x294>)
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	61bb      	str	r3, [r7, #24]
            break;
 8017c1e:	e046      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8017c20:	2300      	movs	r3, #0
 8017c22:	61bb      	str	r3, [r7, #24]
            break;
 8017c24:	e043      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8017c26:	2300      	movs	r3, #0
 8017c28:	61bb      	str	r3, [r7, #24]
            break;
 8017c2a:	e040      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8017c2c:	4b28      	ldr	r3, [pc, #160]	; (8017cd0 <RegionUS915GetPhyParam+0x2a8>)
 8017c2e:	61bb      	str	r3, [r7, #24]
            break;
 8017c30:	e03d      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8017c32:	f04f 0300 	mov.w	r3, #0
 8017c36:	61bb      	str	r3, [r7, #24]
            break;
 8017c38:	e039      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	791b      	ldrb	r3, [r3, #4]
 8017c3e:	4a25      	ldr	r2, [pc, #148]	; (8017cd4 <RegionUS915GetPhyParam+0x2ac>)
 8017c40:	4922      	ldr	r1, [pc, #136]	; (8017ccc <RegionUS915GetPhyParam+0x2a4>)
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7fd fd51 	bl	80156ea <RegionBaseUSCalcDownlinkFrequency>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017c4c:	e02f      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 8017c4e:	2317      	movs	r3, #23
 8017c50:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017c52:	2304      	movs	r3, #4
 8017c54:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017c56:	2303      	movs	r3, #3
 8017c58:	76bb      	strb	r3, [r7, #26]
            break;
 8017c5a:	e028      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8017c5c:	2308      	movs	r3, #8
 8017c5e:	61bb      	str	r3, [r7, #24]
            break;
 8017c60:	e025      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017c62:	2308      	movs	r3, #8
 8017c64:	61bb      	str	r3, [r7, #24]
            break;
 8017c66:	e022      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	791b      	ldrb	r3, [r3, #4]
 8017c6c:	4a19      	ldr	r2, [pc, #100]	; (8017cd4 <RegionUS915GetPhyParam+0x2ac>)
 8017c6e:	4917      	ldr	r1, [pc, #92]	; (8017ccc <RegionUS915GetPhyParam+0x2a4>)
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7fd fd3a 	bl	80156ea <RegionBaseUSCalcDownlinkFrequency>
 8017c76:	4603      	mov	r3, r0
 8017c78:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8017c7a:	e018      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8017c7c:	2308      	movs	r3, #8
 8017c7e:	61bb      	str	r3, [r7, #24]
            break;
 8017c80:	e015      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017c82:	2308      	movs	r3, #8
 8017c84:	61bb      	str	r3, [r7, #24]
            break;
 8017c86:	e012      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	4b11      	ldr	r3, [pc, #68]	; (8017cd8 <RegionUS915GetPhyParam+0x2b0>)
 8017c92:	5c9b      	ldrb	r3, [r3, r2]
 8017c94:	61bb      	str	r3, [r7, #24]
            break;
 8017c96:	e00a      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017c9e:	490f      	ldr	r1, [pc, #60]	; (8017cdc <RegionUS915GetPhyParam+0x2b4>)
 8017ca0:	4618      	mov	r0, r3
 8017ca2:	f7fe fc13 	bl	80164cc <RegionCommonGetBandwidth>
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	61bb      	str	r3, [r7, #24]
            break;
 8017caa:	e000      	b.n	8017cae <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8017cac:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8017cae:	69bb      	ldr	r3, [r7, #24]
 8017cb0:	61fb      	str	r3, [r7, #28]
 8017cb2:	69fb      	ldr	r3, [r7, #28]
}
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	3720      	adds	r7, #32
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}
 8017cbc:	20001aa8 	.word	0x20001aa8
 8017cc0:	0801eed8 	.word	0x0801eed8
 8017cc4:	0801eee8 	.word	0x0801eee8
 8017cc8:	fffffc18 	.word	0xfffffc18
 8017ccc:	370870a0 	.word	0x370870a0
 8017cd0:	4200999a 	.word	0x4200999a
 8017cd4:	000927c0 	.word	0x000927c0
 8017cd8:	0801ee74 	.word	0x0801ee74
 8017cdc:	0801ee84 	.word	0x0801ee84

08017ce0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8017ce0:	b590      	push	{r4, r7, lr}
 8017ce2:	b085      	sub	sp, #20
 8017ce4:	af02      	add	r7, sp, #8
 8017ce6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8017ce8:	4b11      	ldr	r3, [pc, #68]	; (8017d30 <RegionUS915SetBandTxDone+0x50>)
 8017cea:	681a      	ldr	r2, [r3, #0]
 8017cec:	4b11      	ldr	r3, [pc, #68]	; (8017d34 <RegionUS915SetBandTxDone+0x54>)
 8017cee:	6819      	ldr	r1, [r3, #0]
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	005b      	lsls	r3, r3, #1
 8017cfa:	4403      	add	r3, r0
 8017cfc:	009b      	lsls	r3, r3, #2
 8017cfe:	440b      	add	r3, r1
 8017d00:	3309      	adds	r3, #9
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	4619      	mov	r1, r3
 8017d06:	460b      	mov	r3, r1
 8017d08:	005b      	lsls	r3, r3, #1
 8017d0a:	440b      	add	r3, r1
 8017d0c:	00db      	lsls	r3, r3, #3
 8017d0e:	18d0      	adds	r0, r2, r3
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	6899      	ldr	r1, [r3, #8]
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	785c      	ldrb	r4, [r3, #1]
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	691a      	ldr	r2, [r3, #16]
 8017d1c:	9200      	str	r2, [sp, #0]
 8017d1e:	68db      	ldr	r3, [r3, #12]
 8017d20:	4622      	mov	r2, r4
 8017d22:	f7fd ff59 	bl	8015bd8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8017d26:	bf00      	nop
 8017d28:	370c      	adds	r7, #12
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd90      	pop	{r4, r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	20001aac 	.word	0x20001aac
 8017d34:	20001aa8 	.word	0x20001aa8

08017d38 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b08a      	sub	sp, #40	; 0x28
 8017d3c:	af00      	add	r7, sp, #0
 8017d3e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017d40:	2301      	movs	r3, #1
 8017d42:	81bb      	strh	r3, [r7, #12]
 8017d44:	2300      	movs	r3, #0
 8017d46:	73bb      	strb	r3, [r7, #14]
 8017d48:	2300      	movs	r3, #0
 8017d4a:	613b      	str	r3, [r7, #16]
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	617b      	str	r3, [r7, #20]
 8017d50:	2300      	movs	r3, #0
 8017d52:	61bb      	str	r3, [r7, #24]
 8017d54:	2300      	movs	r3, #0
 8017d56:	61fb      	str	r3, [r7, #28]
 8017d58:	2300      	movs	r3, #0
 8017d5a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	7b1b      	ldrb	r3, [r3, #12]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d007      	beq.n	8017d76 <RegionUS915InitDefaults+0x3e>
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	f2c0 8104 	blt.w	8017f74 <RegionUS915InitDefaults+0x23c>
 8017d6c:	3b01      	subs	r3, #1
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	f200 8100 	bhi.w	8017f74 <RegionUS915InitDefaults+0x23c>
 8017d74:	e0ce      	b.n	8017f14 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f000 80fc 	beq.w	8017f78 <RegionUS915InitDefaults+0x240>
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	685b      	ldr	r3, [r3, #4]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	f000 80f7 	beq.w	8017f78 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	4a7c      	ldr	r2, [pc, #496]	; (8017f80 <RegionUS915InitDefaults+0x248>)
 8017d90:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	685b      	ldr	r3, [r3, #4]
 8017d96:	4a7b      	ldr	r2, [pc, #492]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017d98:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	689b      	ldr	r3, [r3, #8]
 8017d9e:	4a7a      	ldr	r2, [pc, #488]	; (8017f88 <RegionUS915InitDefaults+0x250>)
 8017da0:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017da2:	4b77      	ldr	r3, [pc, #476]	; (8017f80 <RegionUS915InitDefaults+0x248>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2200      	movs	r2, #0
 8017da8:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8017daa:	4b75      	ldr	r3, [pc, #468]	; (8017f80 <RegionUS915InitDefaults+0x248>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2200      	movs	r2, #0
 8017db0:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017db2:	4b75      	ldr	r3, [pc, #468]	; (8017f88 <RegionUS915InitDefaults+0x250>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	f107 010c 	add.w	r1, r7, #12
 8017dba:	2218      	movs	r2, #24
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f000 ffcc 	bl	8018d5a <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017dc8:	e02e      	b.n	8017e28 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8017dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017dce:	4a6f      	ldr	r2, [pc, #444]	; (8017f8c <RegionUS915InitDefaults+0x254>)
 8017dd0:	fb03 f202 	mul.w	r2, r3, r2
 8017dd4:	4b6e      	ldr	r3, [pc, #440]	; (8017f90 <RegionUS915InitDefaults+0x258>)
 8017dd6:	4413      	add	r3, r2
 8017dd8:	4a6a      	ldr	r2, [pc, #424]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017dda:	6811      	ldr	r1, [r2, #0]
 8017ddc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017de0:	4618      	mov	r0, r3
 8017de2:	4613      	mov	r3, r2
 8017de4:	005b      	lsls	r3, r3, #1
 8017de6:	4413      	add	r3, r2
 8017de8:	009b      	lsls	r3, r3, #2
 8017dea:	440b      	add	r3, r1
 8017dec:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8017dee:	4b65      	ldr	r3, [pc, #404]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017df0:	6819      	ldr	r1, [r3, #0]
 8017df2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017df6:	4613      	mov	r3, r2
 8017df8:	005b      	lsls	r3, r3, #1
 8017dfa:	4413      	add	r3, r2
 8017dfc:	009b      	lsls	r3, r3, #2
 8017dfe:	440b      	add	r3, r1
 8017e00:	3308      	adds	r3, #8
 8017e02:	2230      	movs	r2, #48	; 0x30
 8017e04:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017e06:	4b5f      	ldr	r3, [pc, #380]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017e08:	6819      	ldr	r1, [r3, #0]
 8017e0a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8017e0e:	4613      	mov	r3, r2
 8017e10:	005b      	lsls	r3, r3, #1
 8017e12:	4413      	add	r3, r2
 8017e14:	009b      	lsls	r3, r3, #2
 8017e16:	440b      	add	r3, r1
 8017e18:	3309      	adds	r3, #9
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e22:	3301      	adds	r3, #1
 8017e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017e2c:	2b3f      	cmp	r3, #63	; 0x3f
 8017e2e:	d9cc      	bls.n	8017dca <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017e30:	2340      	movs	r3, #64	; 0x40
 8017e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e36:	e02f      	b.n	8017e98 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8017e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e3c:	3b40      	subs	r3, #64	; 0x40
 8017e3e:	4a55      	ldr	r2, [pc, #340]	; (8017f94 <RegionUS915InitDefaults+0x25c>)
 8017e40:	fb03 f202 	mul.w	r2, r3, r2
 8017e44:	4b54      	ldr	r3, [pc, #336]	; (8017f98 <RegionUS915InitDefaults+0x260>)
 8017e46:	4413      	add	r3, r2
 8017e48:	4a4e      	ldr	r2, [pc, #312]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017e4a:	6811      	ldr	r1, [r2, #0]
 8017e4c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017e50:	4618      	mov	r0, r3
 8017e52:	4613      	mov	r3, r2
 8017e54:	005b      	lsls	r3, r3, #1
 8017e56:	4413      	add	r3, r2
 8017e58:	009b      	lsls	r3, r3, #2
 8017e5a:	440b      	add	r3, r1
 8017e5c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 8017e5e:	4b49      	ldr	r3, [pc, #292]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017e60:	6819      	ldr	r1, [r3, #0]
 8017e62:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017e66:	4613      	mov	r3, r2
 8017e68:	005b      	lsls	r3, r3, #1
 8017e6a:	4413      	add	r3, r2
 8017e6c:	009b      	lsls	r3, r3, #2
 8017e6e:	440b      	add	r3, r1
 8017e70:	3308      	adds	r3, #8
 8017e72:	2244      	movs	r2, #68	; 0x44
 8017e74:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017e76:	4b43      	ldr	r3, [pc, #268]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017e78:	6819      	ldr	r1, [r3, #0]
 8017e7a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017e7e:	4613      	mov	r3, r2
 8017e80:	005b      	lsls	r3, r3, #1
 8017e82:	4413      	add	r3, r2
 8017e84:	009b      	lsls	r3, r3, #2
 8017e86:	440b      	add	r3, r1
 8017e88:	3309      	adds	r3, #9
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8017e8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e92:	3301      	adds	r3, #1
 8017e94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017e9c:	2b47      	cmp	r3, #71	; 0x47
 8017e9e:	d9cb      	bls.n	8017e38 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017ea0:	4b38      	ldr	r3, [pc, #224]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ea8:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8017eac:	4b35      	ldr	r3, [pc, #212]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017eb4:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017eb8:	4b32      	ldr	r3, [pc, #200]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ec0:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017ec4:	4b2f      	ldr	r3, [pc, #188]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ecc:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017ed0:	4b2c      	ldr	r3, [pc, #176]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	22ff      	movs	r2, #255	; 0xff
 8017ed6:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017eda:	4b2a      	ldr	r3, [pc, #168]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017ee4:	4b27      	ldr	r3, [pc, #156]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017eec:	4b25      	ldr	r3, [pc, #148]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017ef4:	2206      	movs	r2, #6
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	f7fd fe48 	bl	8015b8c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017efc:	4b20      	ldr	r3, [pc, #128]	; (8017f80 <RegionUS915InitDefaults+0x248>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	4618      	mov	r0, r3
 8017f02:	4b20      	ldr	r3, [pc, #128]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017f0a:	2206      	movs	r2, #6
 8017f0c:	4619      	mov	r1, r3
 8017f0e:	f7fd fe3d 	bl	8015b8c <RegionCommonChanMaskCopy>
            break;
 8017f12:	e032      	b.n	8017f7a <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8017f14:	4b1b      	ldr	r3, [pc, #108]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017f1c:	4b19      	ldr	r3, [pc, #100]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8017f24:	2206      	movs	r2, #6
 8017f26:	4619      	mov	r1, r3
 8017f28:	f7fd fe30 	bl	8015b8c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017f32:	e01a      	b.n	8017f6a <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8017f34:	4b12      	ldr	r3, [pc, #72]	; (8017f80 <RegionUS915InitDefaults+0x248>)
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017f3c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017f40:	4b10      	ldr	r3, [pc, #64]	; (8017f84 <RegionUS915InitDefaults+0x24c>)
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017f48:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017f4c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017f50:	4b0b      	ldr	r3, [pc, #44]	; (8017f80 <RegionUS915InitDefaults+0x248>)
 8017f52:	681b      	ldr	r3, [r3, #0]
 8017f54:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017f58:	4001      	ands	r1, r0
 8017f5a:	b289      	uxth	r1, r1
 8017f5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8017f60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017f64:	3301      	adds	r3, #1
 8017f66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8017f6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017f6e:	2b05      	cmp	r3, #5
 8017f70:	d9e0      	bls.n	8017f34 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017f72:	e002      	b.n	8017f7a <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8017f74:	bf00      	nop
 8017f76:	e000      	b.n	8017f7a <RegionUS915InitDefaults+0x242>
                return;
 8017f78:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8017f7a:	3728      	adds	r7, #40	; 0x28
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	bd80      	pop	{r7, pc}
 8017f80:	20001aa4 	.word	0x20001aa4
 8017f84:	20001aa8 	.word	0x20001aa8
 8017f88:	20001aac 	.word	0x20001aac
 8017f8c:	00030d40 	.word	0x00030d40
 8017f90:	35c80160 	.word	0x35c80160
 8017f94:	00186a00 	.word	0x00186a00
 8017f98:	35d2afc0 	.word	0x35d2afc0

08017f9c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	460b      	mov	r3, r1
 8017fa6:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8017fa8:	78fb      	ldrb	r3, [r7, #3]
 8017faa:	2b0f      	cmp	r3, #15
 8017fac:	d867      	bhi.n	801807e <RegionUS915Verify+0xe2>
 8017fae:	a201      	add	r2, pc, #4	; (adr r2, 8017fb4 <RegionUS915Verify+0x18>)
 8017fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fb4:	08017ff5 	.word	0x08017ff5
 8017fb8:	0801807f 	.word	0x0801807f
 8017fbc:	0801807f 	.word	0x0801807f
 8017fc0:	0801807f 	.word	0x0801807f
 8017fc4:	0801807f 	.word	0x0801807f
 8017fc8:	08018003 	.word	0x08018003
 8017fcc:	08018021 	.word	0x08018021
 8017fd0:	0801803f 	.word	0x0801803f
 8017fd4:	0801807f 	.word	0x0801807f
 8017fd8:	0801805d 	.word	0x0801805d
 8017fdc:	0801805d 	.word	0x0801805d
 8017fe0:	0801807f 	.word	0x0801807f
 8017fe4:	0801807f 	.word	0x0801807f
 8017fe8:	0801807f 	.word	0x0801807f
 8017fec:	0801807f 	.word	0x0801807f
 8017ff0:	0801807b 	.word	0x0801807b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7ff fca1 	bl	8017940 <VerifyRfFreq>
 8017ffe:	4603      	mov	r3, r0
 8018000:	e03e      	b.n	8018080 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f993 3000 	ldrsb.w	r3, [r3]
 8018008:	2204      	movs	r2, #4
 801800a:	2100      	movs	r1, #0
 801800c:	4618      	mov	r0, r3
 801800e:	f7fd fd40 	bl	8015a92 <RegionCommonValueInRange>
 8018012:	4603      	mov	r3, r0
 8018014:	2b00      	cmp	r3, #0
 8018016:	bf14      	ite	ne
 8018018:	2301      	movne	r3, #1
 801801a:	2300      	moveq	r3, #0
 801801c:	b2db      	uxtb	r3, r3
 801801e:	e02f      	b.n	8018080 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f993 3000 	ldrsb.w	r3, [r3]
 8018026:	2205      	movs	r2, #5
 8018028:	2100      	movs	r1, #0
 801802a:	4618      	mov	r0, r3
 801802c:	f7fd fd31 	bl	8015a92 <RegionCommonValueInRange>
 8018030:	4603      	mov	r3, r0
 8018032:	2b00      	cmp	r3, #0
 8018034:	bf14      	ite	ne
 8018036:	2301      	movne	r3, #1
 8018038:	2300      	moveq	r3, #0
 801803a:	b2db      	uxtb	r3, r3
 801803c:	e020      	b.n	8018080 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f993 3000 	ldrsb.w	r3, [r3]
 8018044:	220d      	movs	r2, #13
 8018046:	2108      	movs	r1, #8
 8018048:	4618      	mov	r0, r3
 801804a:	f7fd fd22 	bl	8015a92 <RegionCommonValueInRange>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	bf14      	ite	ne
 8018054:	2301      	movne	r3, #1
 8018056:	2300      	moveq	r3, #0
 8018058:	b2db      	uxtb	r3, r3
 801805a:	e011      	b.n	8018080 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f993 3000 	ldrsb.w	r3, [r3]
 8018062:	220e      	movs	r2, #14
 8018064:	2100      	movs	r1, #0
 8018066:	4618      	mov	r0, r3
 8018068:	f7fd fd13 	bl	8015a92 <RegionCommonValueInRange>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	bf14      	ite	ne
 8018072:	2301      	movne	r3, #1
 8018074:	2300      	moveq	r3, #0
 8018076:	b2db      	uxtb	r3, r3
 8018078:	e002      	b.n	8018080 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801807a:	2300      	movs	r3, #0
 801807c:	e000      	b.n	8018080 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801807e:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8018080:	4618      	mov	r0, r3
 8018082:	3708      	adds	r7, #8
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}

08018088 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8018088:	b480      	push	{r7}
 801808a:	b085      	sub	sp, #20
 801808c:	af00      	add	r7, sp, #0
 801808e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	7a1b      	ldrb	r3, [r3, #8]
 8018094:	2b10      	cmp	r3, #16
 8018096:	d160      	bne.n	801815a <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	685b      	ldr	r3, [r3, #4]
 801809c:	330f      	adds	r3, #15
 801809e:	781b      	ldrb	r3, [r3, #0]
 80180a0:	2b01      	cmp	r3, #1
 80180a2:	d15c      	bne.n	801815e <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80180a4:	2300      	movs	r3, #0
 80180a6:	73fb      	strb	r3, [r7, #15]
 80180a8:	2300      	movs	r3, #0
 80180aa:	73bb      	strb	r3, [r7, #14]
 80180ac:	e051      	b.n	8018152 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	685a      	ldr	r2, [r3, #4]
 80180b2:	7bbb      	ldrb	r3, [r7, #14]
 80180b4:	4413      	add	r3, r2
 80180b6:	7819      	ldrb	r1, [r3, #0]
 80180b8:	4b2b      	ldr	r3, [pc, #172]	; (8018168 <RegionUS915ApplyCFList+0xe0>)
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	7bfa      	ldrb	r2, [r7, #15]
 80180be:	b289      	uxth	r1, r1
 80180c0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80180c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 80180c8:	4b27      	ldr	r3, [pc, #156]	; (8018168 <RegionUS915ApplyCFList+0xe0>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	7bfa      	ldrb	r2, [r7, #15]
 80180ce:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80180d2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	685a      	ldr	r2, [r3, #4]
 80180da:	7bbb      	ldrb	r3, [r7, #14]
 80180dc:	3301      	adds	r3, #1
 80180de:	4413      	add	r3, r2
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	b29b      	uxth	r3, r3
 80180e4:	021b      	lsls	r3, r3, #8
 80180e6:	b299      	uxth	r1, r3
 80180e8:	4b1f      	ldr	r3, [pc, #124]	; (8018168 <RegionUS915ApplyCFList+0xe0>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	7bfa      	ldrb	r2, [r7, #15]
 80180ee:	4301      	orrs	r1, r0
 80180f0:	b289      	uxth	r1, r1
 80180f2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80180f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80180fa:	7bfb      	ldrb	r3, [r7, #15]
 80180fc:	2b04      	cmp	r3, #4
 80180fe:	d10f      	bne.n	8018120 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8018100:	4b19      	ldr	r3, [pc, #100]	; (8018168 <RegionUS915ApplyCFList+0xe0>)
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	7bfa      	ldrb	r2, [r7, #15]
 8018106:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801810a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801810e:	4b16      	ldr	r3, [pc, #88]	; (8018168 <RegionUS915ApplyCFList+0xe0>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	7bfa      	ldrb	r2, [r7, #15]
 8018114:	b2c9      	uxtb	r1, r1
 8018116:	b289      	uxth	r1, r1
 8018118:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801811c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8018120:	4b12      	ldr	r3, [pc, #72]	; (801816c <RegionUS915ApplyCFList+0xe4>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	7bfa      	ldrb	r2, [r7, #15]
 8018126:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801812a:	4b0f      	ldr	r3, [pc, #60]	; (8018168 <RegionUS915ApplyCFList+0xe0>)
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	7bfa      	ldrb	r2, [r7, #15]
 8018130:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8018134:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8018138:	4b0c      	ldr	r3, [pc, #48]	; (801816c <RegionUS915ApplyCFList+0xe4>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	7bfa      	ldrb	r2, [r7, #15]
 801813e:	4001      	ands	r1, r0
 8018140:	b289      	uxth	r1, r1
 8018142:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8018146:	7bfb      	ldrb	r3, [r7, #15]
 8018148:	3301      	adds	r3, #1
 801814a:	73fb      	strb	r3, [r7, #15]
 801814c:	7bbb      	ldrb	r3, [r7, #14]
 801814e:	3302      	adds	r3, #2
 8018150:	73bb      	strb	r3, [r7, #14]
 8018152:	7bfb      	ldrb	r3, [r7, #15]
 8018154:	2b04      	cmp	r3, #4
 8018156:	d9aa      	bls.n	80180ae <RegionUS915ApplyCFList+0x26>
 8018158:	e002      	b.n	8018160 <RegionUS915ApplyCFList+0xd8>
        return;
 801815a:	bf00      	nop
 801815c:	e000      	b.n	8018160 <RegionUS915ApplyCFList+0xd8>
        return;
 801815e:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8018160:	3714      	adds	r7, #20
 8018162:	46bd      	mov	sp, r7
 8018164:	bc80      	pop	{r7}
 8018166:	4770      	bx	lr
 8018168:	20001aa8 	.word	0x20001aa8
 801816c:	20001aa4 	.word	0x20001aa4

08018170 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2204      	movs	r2, #4
 801817e:	2100      	movs	r1, #0
 8018180:	4618      	mov	r0, r3
 8018182:	f7fd fcd7 	bl	8015b34 <RegionCommonCountChannels>
 8018186:	4603      	mov	r3, r0
 8018188:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801818a:	7bbb      	ldrb	r3, [r7, #14]
 801818c:	2b01      	cmp	r3, #1
 801818e:	d804      	bhi.n	801819a <RegionUS915ChanMaskSet+0x2a>
 8018190:	7bbb      	ldrb	r3, [r7, #14]
 8018192:	2b00      	cmp	r3, #0
 8018194:	d001      	beq.n	801819a <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8018196:	2300      	movs	r3, #0
 8018198:	e04a      	b.n	8018230 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	791b      	ldrb	r3, [r3, #4]
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d002      	beq.n	80181a8 <RegionUS915ChanMaskSet+0x38>
 80181a2:	2b01      	cmp	r3, #1
 80181a4:	d036      	beq.n	8018214 <RegionUS915ChanMaskSet+0xa4>
 80181a6:	e040      	b.n	801822a <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80181a8:	4b23      	ldr	r3, [pc, #140]	; (8018238 <RegionUS915ChanMaskSet+0xc8>)
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	2206      	movs	r2, #6
 80181b6:	4619      	mov	r1, r3
 80181b8:	f7fd fce8 	bl	8015b8c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 80181bc:	4b1e      	ldr	r3, [pc, #120]	; (8018238 <RegionUS915ChanMaskSet+0xc8>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 80181c4:	4b1c      	ldr	r3, [pc, #112]	; (8018238 <RegionUS915ChanMaskSet+0xc8>)
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	b2d2      	uxtb	r2, r2
 80181ca:	b292      	uxth	r2, r2
 80181cc:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80181d0:	4b19      	ldr	r3, [pc, #100]	; (8018238 <RegionUS915ChanMaskSet+0xc8>)
 80181d2:	681b      	ldr	r3, [r3, #0]
 80181d4:	2200      	movs	r2, #0
 80181d6:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80181da:	2300      	movs	r3, #0
 80181dc:	73fb      	strb	r3, [r7, #15]
 80181de:	e015      	b.n	801820c <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80181e0:	4b16      	ldr	r3, [pc, #88]	; (801823c <RegionUS915ChanMaskSet+0xcc>)
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	7bfa      	ldrb	r2, [r7, #15]
 80181e6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80181ea:	4b13      	ldr	r3, [pc, #76]	; (8018238 <RegionUS915ChanMaskSet+0xc8>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	7bfa      	ldrb	r2, [r7, #15]
 80181f0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80181f4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80181f8:	4b10      	ldr	r3, [pc, #64]	; (801823c <RegionUS915ChanMaskSet+0xcc>)
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	7bfa      	ldrb	r2, [r7, #15]
 80181fe:	4001      	ands	r1, r0
 8018200:	b289      	uxth	r1, r1
 8018202:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8018206:	7bfb      	ldrb	r3, [r7, #15]
 8018208:	3301      	adds	r3, #1
 801820a:	73fb      	strb	r3, [r7, #15]
 801820c:	7bfb      	ldrb	r3, [r7, #15]
 801820e:	2b05      	cmp	r3, #5
 8018210:	d9e6      	bls.n	80181e0 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8018212:	e00c      	b.n	801822e <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8018214:	4b08      	ldr	r3, [pc, #32]	; (8018238 <RegionUS915ChanMaskSet+0xc8>)
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	2206      	movs	r2, #6
 8018222:	4619      	mov	r1, r3
 8018224:	f7fd fcb2 	bl	8015b8c <RegionCommonChanMaskCopy>
            break;
 8018228:	e001      	b.n	801822e <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801822a:	2300      	movs	r3, #0
 801822c:	e000      	b.n	8018230 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801822e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018230:	4618      	mov	r0, r3
 8018232:	3710      	adds	r7, #16
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	20001aa8 	.word	0x20001aa8
 801823c:	20001aa4 	.word	0x20001aa4

08018240 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8018240:	b580      	push	{r7, lr}
 8018242:	b088      	sub	sp, #32
 8018244:	af02      	add	r7, sp, #8
 8018246:	60ba      	str	r2, [r7, #8]
 8018248:	607b      	str	r3, [r7, #4]
 801824a:	4603      	mov	r3, r0
 801824c:	73fb      	strb	r3, [r7, #15]
 801824e:	460b      	mov	r3, r1
 8018250:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8018252:	2300      	movs	r3, #0
 8018254:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8018256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801825a:	2b0d      	cmp	r3, #13
 801825c:	bfa8      	it	ge
 801825e:	230d      	movge	r3, #13
 8018260:	b25a      	sxtb	r2, r3
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801826c:	4916      	ldr	r1, [pc, #88]	; (80182c8 <RegionUS915ComputeRxWindowParameters+0x88>)
 801826e:	4618      	mov	r0, r3
 8018270:	f7fe f92c 	bl	80164cc <RegionCommonGetBandwidth>
 8018274:	4603      	mov	r3, r0
 8018276:	b2da      	uxtb	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018282:	461a      	mov	r2, r3
 8018284:	4b11      	ldr	r3, [pc, #68]	; (80182cc <RegionUS915ComputeRxWindowParameters+0x8c>)
 8018286:	5c9a      	ldrb	r2, [r3, r2]
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801828e:	4619      	mov	r1, r3
 8018290:	4b0d      	ldr	r3, [pc, #52]	; (80182c8 <RegionUS915ComputeRxWindowParameters+0x88>)
 8018292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018296:	4619      	mov	r1, r3
 8018298:	4610      	mov	r0, r2
 801829a:	f7fd fe95 	bl	8015fc8 <RegionCommonComputeSymbolTimeLoRa>
 801829e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80182a0:	4b0b      	ldr	r3, [pc, #44]	; (80182d0 <RegionUS915ComputeRxWindowParameters+0x90>)
 80182a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182a4:	4798      	blx	r3
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	3308      	adds	r3, #8
 80182aa:	687a      	ldr	r2, [r7, #4]
 80182ac:	320c      	adds	r2, #12
 80182ae:	7bb9      	ldrb	r1, [r7, #14]
 80182b0:	9201      	str	r2, [sp, #4]
 80182b2:	9300      	str	r3, [sp, #0]
 80182b4:	4603      	mov	r3, r0
 80182b6:	68ba      	ldr	r2, [r7, #8]
 80182b8:	6978      	ldr	r0, [r7, #20]
 80182ba:	f7fd feab 	bl	8016014 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 80182be:	bf00      	nop
 80182c0:	3718      	adds	r7, #24
 80182c2:	46bd      	mov	sp, r7
 80182c4:	bd80      	pop	{r7, pc}
 80182c6:	bf00      	nop
 80182c8:	0801ee84 	.word	0x0801ee84
 80182cc:	0801ee74 	.word	0x0801ee74
 80182d0:	0801eef8 	.word	0x0801eef8

080182d4 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80182d4:	b590      	push	{r4, r7, lr}
 80182d6:	b091      	sub	sp, #68	; 0x44
 80182d8:	af0a      	add	r7, sp, #40	; 0x28
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	785b      	ldrb	r3, [r3, #1]
 80182e2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80182e4:	2300      	movs	r3, #0
 80182e6:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80182e8:	2300      	movs	r3, #0
 80182ea:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	685b      	ldr	r3, [r3, #4]
 80182f0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80182f2:	4b34      	ldr	r3, [pc, #208]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 80182f4:	685b      	ldr	r3, [r3, #4]
 80182f6:	4798      	blx	r3
 80182f8:	4603      	mov	r3, r0
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d001      	beq.n	8018302 <RegionUS915RxConfig+0x2e>
    {
        return false;
 80182fe:	2300      	movs	r3, #0
 8018300:	e05c      	b.n	80183bc <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	7cdb      	ldrb	r3, [r3, #19]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d109      	bne.n	801831e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	f003 0307 	and.w	r3, r3, #7
 8018312:	4a2d      	ldr	r2, [pc, #180]	; (80183c8 <RegionUS915RxConfig+0xf4>)
 8018314:	fb03 f202 	mul.w	r2, r3, r2
 8018318:	4b2c      	ldr	r3, [pc, #176]	; (80183cc <RegionUS915RxConfig+0xf8>)
 801831a:	4413      	add	r3, r2
 801831c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 801831e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018322:	4a2b      	ldr	r2, [pc, #172]	; (80183d0 <RegionUS915RxConfig+0xfc>)
 8018324:	5cd3      	ldrb	r3, [r2, r3]
 8018326:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8018328:	4b26      	ldr	r3, [pc, #152]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 801832a:	68db      	ldr	r3, [r3, #12]
 801832c:	6938      	ldr	r0, [r7, #16]
 801832e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8018330:	4b24      	ldr	r3, [pc, #144]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 8018332:	699c      	ldr	r4, [r3, #24]
 8018334:	687b      	ldr	r3, [r7, #4]
 8018336:	789b      	ldrb	r3, [r3, #2]
 8018338:	4618      	mov	r0, r3
 801833a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	689b      	ldr	r3, [r3, #8]
 8018342:	b29b      	uxth	r3, r3
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	7c92      	ldrb	r2, [r2, #18]
 8018348:	9209      	str	r2, [sp, #36]	; 0x24
 801834a:	2201      	movs	r2, #1
 801834c:	9208      	str	r2, [sp, #32]
 801834e:	2200      	movs	r2, #0
 8018350:	9207      	str	r2, [sp, #28]
 8018352:	2200      	movs	r2, #0
 8018354:	9206      	str	r2, [sp, #24]
 8018356:	2200      	movs	r2, #0
 8018358:	9205      	str	r2, [sp, #20]
 801835a:	2200      	movs	r2, #0
 801835c:	9204      	str	r2, [sp, #16]
 801835e:	2200      	movs	r2, #0
 8018360:	9203      	str	r2, [sp, #12]
 8018362:	9302      	str	r3, [sp, #8]
 8018364:	2308      	movs	r3, #8
 8018366:	9301      	str	r3, [sp, #4]
 8018368:	2300      	movs	r3, #0
 801836a:	9300      	str	r3, [sp, #0]
 801836c:	2301      	movs	r3, #1
 801836e:	460a      	mov	r2, r1
 8018370:	4601      	mov	r1, r0
 8018372:	2001      	movs	r0, #1
 8018374:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	7c5b      	ldrb	r3, [r3, #17]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d005      	beq.n	801838a <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801837e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018382:	4a14      	ldr	r2, [pc, #80]	; (80183d4 <RegionUS915RxConfig+0x100>)
 8018384:	5cd3      	ldrb	r3, [r2, r3]
 8018386:	75fb      	strb	r3, [r7, #23]
 8018388:	e004      	b.n	8018394 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801838a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801838e:	4a12      	ldr	r2, [pc, #72]	; (80183d8 <RegionUS915RxConfig+0x104>)
 8018390:	5cd3      	ldrb	r3, [r2, r3]
 8018392:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8018394:	4b0b      	ldr	r3, [pc, #44]	; (80183c4 <RegionUS915RxConfig+0xf0>)
 8018396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018398:	7dfa      	ldrb	r2, [r7, #23]
 801839a:	320d      	adds	r2, #13
 801839c:	b2d2      	uxtb	r2, r2
 801839e:	4611      	mov	r1, r2
 80183a0:	2001      	movs	r0, #1
 80183a2:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	7cdb      	ldrb	r3, [r3, #19]
 80183a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80183ac:	6939      	ldr	r1, [r7, #16]
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7fe f8aa 	bl	8016508 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	7bfa      	ldrb	r2, [r7, #15]
 80183b8:	701a      	strb	r2, [r3, #0]
    return true;
 80183ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80183bc:	4618      	mov	r0, r3
 80183be:	371c      	adds	r7, #28
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd90      	pop	{r4, r7, pc}
 80183c4:	0801eef8 	.word	0x0801eef8
 80183c8:	000927c0 	.word	0x000927c0
 80183cc:	370870a0 	.word	0x370870a0
 80183d0:	0801ee74 	.word	0x0801ee74
 80183d4:	0801eee8 	.word	0x0801eee8
 80183d8:	0801eed8 	.word	0x0801eed8

080183dc <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80183dc:	b590      	push	{r4, r7, lr}
 80183de:	b093      	sub	sp, #76	; 0x4c
 80183e0:	af0a      	add	r7, sp, #40	; 0x28
 80183e2:	60f8      	str	r0, [r7, #12]
 80183e4:	60b9      	str	r1, [r7, #8]
 80183e6:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80183ee:	461a      	mov	r2, r3
 80183f0:	4b49      	ldr	r3, [pc, #292]	; (8018518 <RegionUS915TxConfig+0x13c>)
 80183f2:	5c9b      	ldrb	r3, [r3, r2]
 80183f4:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80183fc:	4b47      	ldr	r3, [pc, #284]	; (801851c <RegionUS915TxConfig+0x140>)
 80183fe:	681a      	ldr	r2, [r3, #0]
 8018400:	4b47      	ldr	r3, [pc, #284]	; (8018520 <RegionUS915TxConfig+0x144>)
 8018402:	6819      	ldr	r1, [r3, #0]
 8018404:	68fb      	ldr	r3, [r7, #12]
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	461c      	mov	r4, r3
 801840a:	4623      	mov	r3, r4
 801840c:	005b      	lsls	r3, r3, #1
 801840e:	4423      	add	r3, r4
 8018410:	009b      	lsls	r3, r3, #2
 8018412:	440b      	add	r3, r1
 8018414:	3309      	adds	r3, #9
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	4619      	mov	r1, r3
 801841a:	460b      	mov	r3, r1
 801841c:	005b      	lsls	r3, r3, #1
 801841e:	440b      	add	r3, r1
 8018420:	00db      	lsls	r3, r3, #3
 8018422:	4413      	add	r3, r2
 8018424:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801842e:	4b3c      	ldr	r3, [pc, #240]	; (8018520 <RegionUS915TxConfig+0x144>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018436:	f7ff fa4d 	bl	80178d4 <LimitTxPower>
 801843a:	4603      	mov	r3, r0
 801843c:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018444:	4937      	ldr	r1, [pc, #220]	; (8018524 <RegionUS915TxConfig+0x148>)
 8018446:	4618      	mov	r0, r3
 8018448:	f7fe f840 	bl	80164cc <RegionCommonGetBandwidth>
 801844c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801844e:	2300      	movs	r3, #0
 8018450:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8018452:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018456:	f04f 0200 	mov.w	r2, #0
 801845a:	4933      	ldr	r1, [pc, #204]	; (8018528 <RegionUS915TxConfig+0x14c>)
 801845c:	4618      	mov	r0, r3
 801845e:	f7fd fe91 	bl	8016184 <RegionCommonComputeTxPower>
 8018462:	4603      	mov	r3, r0
 8018464:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8018466:	4b31      	ldr	r3, [pc, #196]	; (801852c <RegionUS915TxConfig+0x150>)
 8018468:	68da      	ldr	r2, [r3, #12]
 801846a:	4b2d      	ldr	r3, [pc, #180]	; (8018520 <RegionUS915TxConfig+0x144>)
 801846c:	6819      	ldr	r1, [r3, #0]
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	781b      	ldrb	r3, [r3, #0]
 8018472:	4618      	mov	r0, r3
 8018474:	4603      	mov	r3, r0
 8018476:	005b      	lsls	r3, r3, #1
 8018478:	4403      	add	r3, r0
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	440b      	add	r3, r1
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	4618      	mov	r0, r3
 8018482:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8018484:	4b29      	ldr	r3, [pc, #164]	; (801852c <RegionUS915TxConfig+0x150>)
 8018486:	69dc      	ldr	r4, [r3, #28]
 8018488:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801848c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8018490:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8018494:	9208      	str	r2, [sp, #32]
 8018496:	2200      	movs	r2, #0
 8018498:	9207      	str	r2, [sp, #28]
 801849a:	2200      	movs	r2, #0
 801849c:	9206      	str	r2, [sp, #24]
 801849e:	2200      	movs	r2, #0
 80184a0:	9205      	str	r2, [sp, #20]
 80184a2:	2201      	movs	r2, #1
 80184a4:	9204      	str	r2, [sp, #16]
 80184a6:	2200      	movs	r2, #0
 80184a8:	9203      	str	r2, [sp, #12]
 80184aa:	2208      	movs	r2, #8
 80184ac:	9202      	str	r2, [sp, #8]
 80184ae:	2201      	movs	r2, #1
 80184b0:	9201      	str	r2, [sp, #4]
 80184b2:	9300      	str	r3, [sp, #0]
 80184b4:	69bb      	ldr	r3, [r7, #24]
 80184b6:	2200      	movs	r2, #0
 80184b8:	2001      	movs	r0, #1
 80184ba:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80184bc:	4b18      	ldr	r3, [pc, #96]	; (8018520 <RegionUS915TxConfig+0x144>)
 80184be:	681a      	ldr	r2, [r3, #0]
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	4619      	mov	r1, r3
 80184c6:	460b      	mov	r3, r1
 80184c8:	005b      	lsls	r3, r3, #1
 80184ca:	440b      	add	r3, r1
 80184cc:	009b      	lsls	r3, r3, #2
 80184ce:	4413      	add	r3, r2
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80184d8:	4619      	mov	r1, r3
 80184da:	4610      	mov	r0, r2
 80184dc:	f7fe f846 	bl	801656c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80184e0:	4b12      	ldr	r3, [pc, #72]	; (801852c <RegionUS915TxConfig+0x150>)
 80184e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184e4:	68fa      	ldr	r2, [r7, #12]
 80184e6:	8992      	ldrh	r2, [r2, #12]
 80184e8:	b2d2      	uxtb	r2, r2
 80184ea:	4611      	mov	r1, r2
 80184ec:	2001      	movs	r0, #1
 80184ee:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80184f6:	68fb      	ldr	r3, [r7, #12]
 80184f8:	899b      	ldrh	r3, [r3, #12]
 80184fa:	4619      	mov	r1, r3
 80184fc:	4610      	mov	r0, r2
 80184fe:	f7ff fa63 	bl	80179c8 <GetTimeOnAir>
 8018502:	4602      	mov	r2, r0
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	7fba      	ldrb	r2, [r7, #30]
 801850c:	701a      	strb	r2, [r3, #0]
    return true;
 801850e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8018510:	4618      	mov	r0, r3
 8018512:	3724      	adds	r7, #36	; 0x24
 8018514:	46bd      	mov	sp, r7
 8018516:	bd90      	pop	{r4, r7, pc}
 8018518:	0801ee74 	.word	0x0801ee74
 801851c:	20001aac 	.word	0x20001aac
 8018520:	20001aa8 	.word	0x20001aa8
 8018524:	0801ee84 	.word	0x0801ee84
 8018528:	41f00000 	.word	0x41f00000
 801852c:	0801eef8 	.word	0x0801eef8

08018530 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8018530:	b590      	push	{r4, r7, lr}
 8018532:	b097      	sub	sp, #92	; 0x5c
 8018534:	af00      	add	r7, sp, #0
 8018536:	60f8      	str	r0, [r7, #12]
 8018538:	60b9      	str	r1, [r7, #8]
 801853a:	607a      	str	r2, [r7, #4]
 801853c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801853e:	2307      	movs	r3, #7
 8018540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8018544:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018548:	2200      	movs	r2, #0
 801854a:	601a      	str	r2, [r3, #0]
 801854c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801854e:	2300      	movs	r3, #0
 8018550:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8018554:	2300      	movs	r3, #0
 8018556:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801855a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801855e:	2200      	movs	r2, #0
 8018560:	601a      	str	r2, [r3, #0]
 8018562:	605a      	str	r2, [r3, #4]
 8018564:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8018566:	4b97      	ldr	r3, [pc, #604]	; (80187c4 <RegionUS915LinkAdrReq+0x294>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 801856e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8018572:	2206      	movs	r2, #6
 8018574:	4618      	mov	r0, r3
 8018576:	f7fd fb09 	bl	8015b8c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801857a:	e11b      	b.n	80187b4 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801857c:	68fb      	ldr	r3, [r7, #12]
 801857e:	685a      	ldr	r2, [r3, #4]
 8018580:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8018584:	4413      	add	r3, r2
 8018586:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801858a:	4611      	mov	r1, r2
 801858c:	4618      	mov	r0, r3
 801858e:	f7fd fc41 	bl	8015e14 <RegionCommonParseLinkAdrReq>
 8018592:	4603      	mov	r3, r0
 8018594:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8018598:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801859c:	2b00      	cmp	r3, #0
 801859e:	f000 8113 	beq.w	80187c8 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80185a2:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80185a6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80185aa:	4413      	add	r3, r2
 80185ac:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80185b0:	2307      	movs	r3, #7
 80185b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 80185b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80185ba:	2b06      	cmp	r3, #6
 80185bc:	d116      	bne.n	80185ec <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 80185be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 80185c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 80185ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 80185d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80185da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80185de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80185e2:	b2db      	uxtb	r3, r3
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80185ea:	e0e3      	b.n	80187b4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80185ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80185f0:	2b07      	cmp	r3, #7
 80185f2:	d112      	bne.n	801861a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80185f4:	2300      	movs	r3, #0
 80185f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 80185fa:	2300      	movs	r3, #0
 80185fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8018600:	2300      	movs	r3, #0
 8018602:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8018606:	2300      	movs	r3, #0
 8018608:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 801860c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018610:	b2db      	uxtb	r3, r3
 8018612:	b29b      	uxth	r3, r3
 8018614:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018618:	e0cc      	b.n	80187b4 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 801861a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801861e:	2b05      	cmp	r3, #5
 8018620:	f040 80bf 	bne.w	80187a2 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8018624:	2301      	movs	r3, #1
 8018626:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 801862a:	2300      	movs	r3, #0
 801862c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8018630:	2300      	movs	r3, #0
 8018632:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018636:	e0ae      	b.n	8018796 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8018638:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801863c:	b2da      	uxtb	r2, r3
 801863e:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018642:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018646:	fa01 f303 	lsl.w	r3, r1, r3
 801864a:	4013      	ands	r3, r2
 801864c:	2b00      	cmp	r3, #0
 801864e:	d04d      	beq.n	80186ec <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8018650:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018654:	f003 0301 	and.w	r3, r3, #1
 8018658:	b2db      	uxtb	r3, r3
 801865a:	2b00      	cmp	r3, #0
 801865c:	d120      	bne.n	80186a0 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801865e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018662:	005b      	lsls	r3, r3, #1
 8018664:	3358      	adds	r3, #88	; 0x58
 8018666:	443b      	add	r3, r7
 8018668:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801866c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018670:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8018674:	b292      	uxth	r2, r2
 8018676:	005b      	lsls	r3, r3, #1
 8018678:	3358      	adds	r3, #88	; 0x58
 801867a:	443b      	add	r3, r7
 801867c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8018680:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018684:	b21a      	sxth	r2, r3
 8018686:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801868a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801868e:	fa01 f303 	lsl.w	r3, r1, r3
 8018692:	b21b      	sxth	r3, r3
 8018694:	4313      	orrs	r3, r2
 8018696:	b21b      	sxth	r3, r3
 8018698:	b29b      	uxth	r3, r3
 801869a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801869e:	e075      	b.n	801878c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 80186a0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186a4:	005b      	lsls	r3, r3, #1
 80186a6:	3358      	adds	r3, #88	; 0x58
 80186a8:	443b      	add	r3, r7
 80186aa:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80186ae:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186b2:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80186b6:	b292      	uxth	r2, r2
 80186b8:	005b      	lsls	r3, r3, #1
 80186ba:	3358      	adds	r3, #88	; 0x58
 80186bc:	443b      	add	r3, r7
 80186be:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 80186c2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80186c6:	b21a      	sxth	r2, r3
 80186c8:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 80186cc:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186d0:	fa01 f303 	lsl.w	r3, r1, r3
 80186d4:	b21b      	sxth	r3, r3
 80186d6:	4313      	orrs	r3, r2
 80186d8:	b21b      	sxth	r3, r3
 80186da:	b29b      	uxth	r3, r3
 80186dc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80186e0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186e4:	3301      	adds	r3, #1
 80186e6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80186ea:	e04f      	b.n	801878c <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80186ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80186f0:	f003 0301 	and.w	r3, r3, #1
 80186f4:	b2db      	uxtb	r3, r3
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d122      	bne.n	8018740 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80186fa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80186fe:	005b      	lsls	r3, r3, #1
 8018700:	3358      	adds	r3, #88	; 0x58
 8018702:	443b      	add	r3, r7
 8018704:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8018708:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 801870c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8018710:	b292      	uxth	r2, r2
 8018712:	005b      	lsls	r3, r3, #1
 8018714:	3358      	adds	r3, #88	; 0x58
 8018716:	443b      	add	r3, r7
 8018718:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801871c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018720:	b21a      	sxth	r2, r3
 8018722:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8018726:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801872a:	fa01 f303 	lsl.w	r3, r1, r3
 801872e:	b21b      	sxth	r3, r3
 8018730:	43db      	mvns	r3, r3
 8018732:	b21b      	sxth	r3, r3
 8018734:	4013      	ands	r3, r2
 8018736:	b21b      	sxth	r3, r3
 8018738:	b29b      	uxth	r3, r3
 801873a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 801873e:	e025      	b.n	801878c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8018740:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018744:	005b      	lsls	r3, r3, #1
 8018746:	3358      	adds	r3, #88	; 0x58
 8018748:	443b      	add	r3, r7
 801874a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801874e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018752:	b2d2      	uxtb	r2, r2
 8018754:	b292      	uxth	r2, r2
 8018756:	005b      	lsls	r3, r3, #1
 8018758:	3358      	adds	r3, #88	; 0x58
 801875a:	443b      	add	r3, r7
 801875c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8018760:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8018764:	b21a      	sxth	r2, r3
 8018766:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 801876a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801876e:	fa01 f303 	lsl.w	r3, r1, r3
 8018772:	b21b      	sxth	r3, r3
 8018774:	43db      	mvns	r3, r3
 8018776:	b21b      	sxth	r3, r3
 8018778:	4013      	ands	r3, r2
 801877a:	b21b      	sxth	r3, r3
 801877c:	b29b      	uxth	r3, r3
 801877e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8018782:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8018786:	3301      	adds	r3, #1
 8018788:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 801878c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8018790:	3301      	adds	r3, #1
 8018792:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8018796:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801879a:	2b07      	cmp	r3, #7
 801879c:	f67f af4c 	bls.w	8018638 <RegionUS915LinkAdrReq+0x108>
 80187a0:	e008      	b.n	80187b4 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 80187a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80187a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80187aa:	005b      	lsls	r3, r3, #1
 80187ac:	3358      	adds	r3, #88	; 0x58
 80187ae:	443b      	add	r3, r7
 80187b0:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	7a1b      	ldrb	r3, [r3, #8]
 80187b8:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80187bc:	429a      	cmp	r2, r3
 80187be:	f4ff aedd 	bcc.w	801857c <RegionUS915LinkAdrReq+0x4c>
 80187c2:	e002      	b.n	80187ca <RegionUS915LinkAdrReq+0x29a>
 80187c4:	20001aa8 	.word	0x20001aa8
            break; // break loop, since no more request has been found
 80187c8:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80187ca:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80187ce:	2b03      	cmp	r3, #3
 80187d0:	dc0f      	bgt.n	80187f2 <RegionUS915LinkAdrReq+0x2c2>
 80187d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80187d6:	2204      	movs	r2, #4
 80187d8:	2100      	movs	r1, #0
 80187da:	4618      	mov	r0, r3
 80187dc:	f7fd f9aa 	bl	8015b34 <RegionCommonCountChannels>
 80187e0:	4603      	mov	r3, r0
 80187e2:	2b01      	cmp	r3, #1
 80187e4:	d805      	bhi.n	80187f2 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80187e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80187ea:	f023 0301 	bic.w	r3, r3, #1
 80187ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80187f2:	2302      	movs	r3, #2
 80187f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	7a5b      	ldrb	r3, [r3, #9]
 80187fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8018800:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018804:	4618      	mov	r0, r3
 8018806:	f7ff f90f 	bl	8017a28 <RegionUS915GetPhyParam>
 801880a:	4603      	mov	r3, r0
 801880c:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 801880e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018812:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	7a9b      	ldrb	r3, [r3, #10]
 8018818:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801881a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 801881e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8018820:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8018824:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8018826:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801882a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8018832:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801883a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	7b5b      	ldrb	r3, [r3, #13]
 8018840:	b25b      	sxtb	r3, r3
 8018842:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8018844:	2348      	movs	r3, #72	; 0x48
 8018846:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 801884a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801884e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8018850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018852:	b25b      	sxtb	r3, r3
 8018854:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8018858:	2304      	movs	r3, #4
 801885a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801885e:	4b3f      	ldr	r3, [pc, #252]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8018864:	230e      	movs	r3, #14
 8018866:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 801886a:	2300      	movs	r3, #0
 801886c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8018876:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 801887a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801887e:	1c9a      	adds	r2, r3, #2
 8018880:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018884:	1c59      	adds	r1, r3, #1
 8018886:	f107 0014 	add.w	r0, r7, #20
 801888a:	4623      	mov	r3, r4
 801888c:	f7fd fb13 	bl	8015eb6 <RegionCommonLinkAdrReqVerifyParams>
 8018890:	4603      	mov	r3, r0
 8018892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8018896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801889a:	2b07      	cmp	r3, #7
 801889c:	d147      	bne.n	801892e <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801889e:	4b2f      	ldr	r3, [pc, #188]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80188a6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80188aa:	2206      	movs	r2, #6
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fd f96d 	bl	8015b8c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 80188b2:	4b2b      	ldr	r3, [pc, #172]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	8819      	ldrh	r1, [r3, #0]
 80188b8:	4b28      	ldr	r3, [pc, #160]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 80188c0:	4b27      	ldr	r3, [pc, #156]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	400a      	ands	r2, r1
 80188c6:	b292      	uxth	r2, r2
 80188c8:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80188ca:	4b25      	ldr	r3, [pc, #148]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	8859      	ldrh	r1, [r3, #2]
 80188d0:	4b22      	ldr	r3, [pc, #136]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 80188d8:	4b21      	ldr	r3, [pc, #132]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	400a      	ands	r2, r1
 80188de:	b292      	uxth	r2, r2
 80188e0:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80188e2:	4b1f      	ldr	r3, [pc, #124]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	8899      	ldrh	r1, [r3, #4]
 80188e8:	4b1c      	ldr	r3, [pc, #112]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 80188f0:	4b1b      	ldr	r3, [pc, #108]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	400a      	ands	r2, r1
 80188f6:	b292      	uxth	r2, r2
 80188f8:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80188fa:	4b19      	ldr	r3, [pc, #100]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	88d9      	ldrh	r1, [r3, #6]
 8018900:	4b16      	ldr	r3, [pc, #88]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8018908:	4b15      	ldr	r3, [pc, #84]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	400a      	ands	r2, r1
 801890e:	b292      	uxth	r2, r2
 8018910:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018912:	4b12      	ldr	r3, [pc, #72]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 8018914:	681a      	ldr	r2, [r3, #0]
 8018916:	4b12      	ldr	r3, [pc, #72]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 801891e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8018920:	4b0e      	ldr	r3, [pc, #56]	; (801895c <RegionUS915LinkAdrReq+0x42c>)
 8018922:	681a      	ldr	r2, [r3, #0]
 8018924:	4b0e      	ldr	r3, [pc, #56]	; (8018960 <RegionUS915LinkAdrReq+0x430>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801892c:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801892e:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8018936:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801893e:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8018946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018948:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 801894c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801894e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8018952:	4618      	mov	r0, r3
 8018954:	375c      	adds	r7, #92	; 0x5c
 8018956:	46bd      	mov	sp, r7
 8018958:	bd90      	pop	{r4, r7, pc}
 801895a:	bf00      	nop
 801895c:	20001aa8 	.word	0x20001aa8
 8018960:	20001aa4 	.word	0x20001aa4

08018964 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b084      	sub	sp, #16
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801896c:	2307      	movs	r3, #7
 801896e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	685b      	ldr	r3, [r3, #4]
 8018974:	4618      	mov	r0, r3
 8018976:	f7fe ffe3 	bl	8017940 <VerifyRfFreq>
 801897a:	4603      	mov	r3, r0
 801897c:	f083 0301 	eor.w	r3, r3, #1
 8018980:	b2db      	uxtb	r3, r3
 8018982:	2b00      	cmp	r3, #0
 8018984:	d003      	beq.n	801898e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8018986:	7bfb      	ldrb	r3, [r7, #15]
 8018988:	f023 0301 	bic.w	r3, r3, #1
 801898c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801898e:	687b      	ldr	r3, [r7, #4]
 8018990:	f993 3000 	ldrsb.w	r3, [r3]
 8018994:	220d      	movs	r2, #13
 8018996:	2108      	movs	r1, #8
 8018998:	4618      	mov	r0, r3
 801899a:	f7fd f87a 	bl	8015a92 <RegionCommonValueInRange>
 801899e:	4603      	mov	r3, r0
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d103      	bne.n	80189ac <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 80189a4:	7bfb      	ldrb	r3, [r7, #15]
 80189a6:	f023 0302 	bic.w	r3, r3, #2
 80189aa:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	f993 3000 	ldrsb.w	r3, [r3]
 80189b2:	2207      	movs	r2, #7
 80189b4:	2105      	movs	r1, #5
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7fd f86b 	bl	8015a92 <RegionCommonValueInRange>
 80189bc:	4603      	mov	r3, r0
 80189be:	2b01      	cmp	r3, #1
 80189c0:	d004      	beq.n	80189cc <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80189c8:	2b0d      	cmp	r3, #13
 80189ca:	dd03      	ble.n	80189d4 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 80189cc:	7bfb      	ldrb	r3, [r7, #15]
 80189ce:	f023 0302 	bic.w	r3, r3, #2
 80189d2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80189da:	2203      	movs	r2, #3
 80189dc:	2100      	movs	r1, #0
 80189de:	4618      	mov	r0, r3
 80189e0:	f7fd f857 	bl	8015a92 <RegionCommonValueInRange>
 80189e4:	4603      	mov	r3, r0
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d103      	bne.n	80189f2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80189ea:	7bfb      	ldrb	r3, [r7, #15]
 80189ec:	f023 0304 	bic.w	r3, r3, #4
 80189f0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 80189f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80189f4:	4618      	mov	r0, r3
 80189f6:	3710      	adds	r7, #16
 80189f8:	46bd      	mov	sp, r7
 80189fa:	bd80      	pop	{r7, pc}

080189fc <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80189fc:	b480      	push	{r7}
 80189fe:	b083      	sub	sp, #12
 8018a00:	af00      	add	r7, sp, #0
 8018a02:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a08:	4618      	mov	r0, r3
 8018a0a:	370c      	adds	r7, #12
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bc80      	pop	{r7}
 8018a10:	4770      	bx	lr

08018a12 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8018a12:	b480      	push	{r7}
 8018a14:	b083      	sub	sp, #12
 8018a16:	af00      	add	r7, sp, #0
 8018a18:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	370c      	adds	r7, #12
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bc80      	pop	{r7}
 8018a26:	4770      	bx	lr

08018a28 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8018a28:	b480      	push	{r7}
 8018a2a:	b083      	sub	sp, #12
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8018a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a34:	4618      	mov	r0, r3
 8018a36:	370c      	adds	r7, #12
 8018a38:	46bd      	mov	sp, r7
 8018a3a:	bc80      	pop	{r7}
 8018a3c:	4770      	bx	lr
	...

08018a40 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8018a40:	b480      	push	{r7}
 8018a42:	b083      	sub	sp, #12
 8018a44:	af00      	add	r7, sp, #0
 8018a46:	4603      	mov	r3, r0
 8018a48:	460a      	mov	r2, r1
 8018a4a:	71fb      	strb	r3, [r7, #7]
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8018a50:	79bb      	ldrb	r3, [r7, #6]
 8018a52:	2b00      	cmp	r3, #0
 8018a54:	d106      	bne.n	8018a64 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8018a56:	4b13      	ldr	r3, [pc, #76]	; (8018aa4 <RegionUS915AlternateDr+0x64>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	7b5a      	ldrb	r2, [r3, #13]
 8018a5c:	3201      	adds	r2, #1
 8018a5e:	b2d2      	uxtb	r2, r2
 8018a60:	735a      	strb	r2, [r3, #13]
 8018a62:	e005      	b.n	8018a70 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8018a64:	4b0f      	ldr	r3, [pc, #60]	; (8018aa4 <RegionUS915AlternateDr+0x64>)
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	7b5a      	ldrb	r2, [r3, #13]
 8018a6a:	3a01      	subs	r2, #1
 8018a6c:	b2d2      	uxtb	r2, r2
 8018a6e:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8018a70:	4b0c      	ldr	r3, [pc, #48]	; (8018aa4 <RegionUS915AlternateDr+0x64>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	7b5a      	ldrb	r2, [r3, #13]
 8018a76:	4b0c      	ldr	r3, [pc, #48]	; (8018aa8 <RegionUS915AlternateDr+0x68>)
 8018a78:	fba3 1302 	umull	r1, r3, r3, r2
 8018a7c:	0859      	lsrs	r1, r3, #1
 8018a7e:	460b      	mov	r3, r1
 8018a80:	00db      	lsls	r3, r3, #3
 8018a82:	440b      	add	r3, r1
 8018a84:	1ad3      	subs	r3, r2, r3
 8018a86:	b2db      	uxtb	r3, r3
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d102      	bne.n	8018a92 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8018a8c:	2304      	movs	r3, #4
 8018a8e:	71fb      	strb	r3, [r7, #7]
 8018a90:	e001      	b.n	8018a96 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8018a92:	2300      	movs	r3, #0
 8018a94:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8018a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	370c      	adds	r7, #12
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bc80      	pop	{r7}
 8018aa2:	4770      	bx	lr
 8018aa4:	20001aa4 	.word	0x20001aa4
 8018aa8:	38e38e39 	.word	0x38e38e39

08018aac <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b0a8      	sub	sp, #160	; 0xa0
 8018ab0:	af02      	add	r7, sp, #8
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	60b9      	str	r1, [r7, #8]
 8018ab6:	607a      	str	r2, [r7, #4]
 8018ab8:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8018aba:	2300      	movs	r3, #0
 8018abc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018aca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8018ace:	2244      	movs	r2, #68	; 0x44
 8018ad0:	2100      	movs	r1, #0
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f004 fdfa 	bl	801d6cc <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018ad8:	230c      	movs	r3, #12
 8018ada:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8018ade:	4b67      	ldr	r3, [pc, #412]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	2204      	movs	r2, #4
 8018ae4:	2100      	movs	r1, #0
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	f7fd f824 	bl	8015b34 <RegionCommonCountChannels>
 8018aec:	4603      	mov	r3, r0
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d10e      	bne.n	8018b10 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8018af2:	4b62      	ldr	r3, [pc, #392]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	4618      	mov	r0, r3
 8018af8:	4b61      	ldr	r3, [pc, #388]	; (8018c80 <RegionUS915NextChannel+0x1d4>)
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8018b00:	2204      	movs	r2, #4
 8018b02:	4619      	mov	r1, r3
 8018b04:	f7fd f842 	bl	8015b8c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8018b08:	4b5c      	ldr	r3, [pc, #368]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	2200      	movs	r2, #0
 8018b0e:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018b16:	2b03      	cmp	r3, #3
 8018b18:	dd0c      	ble.n	8018b34 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8018b1a:	4b58      	ldr	r3, [pc, #352]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	891b      	ldrh	r3, [r3, #8]
 8018b20:	b2db      	uxtb	r3, r3
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d106      	bne.n	8018b34 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8018b26:	4b56      	ldr	r3, [pc, #344]	; (8018c80 <RegionUS915NextChannel+0x1d4>)
 8018b28:	681a      	ldr	r2, [r3, #0]
 8018b2a:	4b54      	ldr	r3, [pc, #336]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8018b32:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	7a5b      	ldrb	r3, [r3, #9]
 8018b38:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018b44:	4b4d      	ldr	r3, [pc, #308]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018b46:	681b      	ldr	r3, [r3, #0]
 8018b48:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8018b4a:	4b4d      	ldr	r3, [pc, #308]	; (8018c80 <RegionUS915NextChannel+0x1d4>)
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018b50:	4b4c      	ldr	r3, [pc, #304]	; (8018c84 <RegionUS915NextChannel+0x1d8>)
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018b56:	2348      	movs	r3, #72	; 0x48
 8018b58:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	685b      	ldr	r3, [r3, #4]
 8018b68:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	7a9b      	ldrb	r3, [r3, #10]
 8018b6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018b72:	2301      	movs	r3, #1
 8018b74:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018b78:	f107 0314 	add.w	r3, r7, #20
 8018b7c:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8018b7e:	68fa      	ldr	r2, [r7, #12]
 8018b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018b84:	320c      	adds	r2, #12
 8018b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b8a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	7d1b      	ldrb	r3, [r3, #20]
 8018b92:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018b96:	68fb      	ldr	r3, [r7, #12]
 8018b98:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	8adb      	ldrh	r3, [r3, #22]
 8018ba0:	4619      	mov	r1, r3
 8018ba2:	4610      	mov	r0, r2
 8018ba4:	f7fe ff10 	bl	80179c8 <GetTimeOnAir>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8018bac:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018bb0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018bb4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	9301      	str	r3, [sp, #4]
 8018bbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018bc0:	9300      	str	r3, [sp, #0]
 8018bc2:	460b      	mov	r3, r1
 8018bc4:	6839      	ldr	r1, [r7, #0]
 8018bc6:	f7fd fbcc 	bl	8016362 <RegionCommonIdentifyChannels>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018bd0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d14a      	bne.n	8018c6e <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018bd8:	68fb      	ldr	r3, [r7, #12]
 8018bda:	7a5b      	ldrb	r3, [r3, #9]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d00e      	beq.n	8018bfe <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8018be0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8018be4:	3b01      	subs	r3, #1
 8018be6:	4619      	mov	r1, r3
 8018be8:	2000      	movs	r0, #0
 8018bea:	f000 f89f 	bl	8018d2c <randr>
 8018bee:	4603      	mov	r3, r0
 8018bf0:	3398      	adds	r3, #152	; 0x98
 8018bf2:	443b      	add	r3, r7
 8018bf4:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	701a      	strb	r2, [r3, #0]
 8018bfc:	e02e      	b.n	8018c5c <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d10e      	bne.n	8018c26 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018c08:	4b1c      	ldr	r3, [pc, #112]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8018c0e:	4b1b      	ldr	r3, [pc, #108]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018c10:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8018c12:	330c      	adds	r3, #12
 8018c14:	68ba      	ldr	r2, [r7, #8]
 8018c16:	4619      	mov	r1, r3
 8018c18:	f7fc fcf6 	bl	8015608 <RegionBaseUSComputeNext125kHzJoinChannel>
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	2b03      	cmp	r3, #3
 8018c20:	d11c      	bne.n	8018c5c <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8018c22:	2303      	movs	r3, #3
 8018c24:	e025      	b.n	8018c72 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8018c26:	2300      	movs	r3, #0
 8018c28:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018c2c:	e004      	b.n	8018c38 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 8018c2e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018c32:	3301      	adds	r3, #1
 8018c34:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8018c38:	4b10      	ldr	r3, [pc, #64]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	891b      	ldrh	r3, [r3, #8]
 8018c3e:	b2da      	uxtb	r2, r3
 8018c40:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018c44:	fa42 f303 	asr.w	r3, r2, r3
 8018c48:	f003 0301 	and.w	r3, r3, #1
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d0ee      	beq.n	8018c2e <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018c50:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018c54:	3340      	adds	r3, #64	; 0x40
 8018c56:	b2da      	uxtb	r2, r3
 8018c58:	68bb      	ldr	r3, [r7, #8]
 8018c5a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8018c5c:	4b07      	ldr	r3, [pc, #28]	; (8018c7c <RegionUS915NextChannel+0x1d0>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	4618      	mov	r0, r3
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	2248      	movs	r2, #72	; 0x48
 8018c68:	4619      	mov	r1, r3
 8018c6a:	f7fc ff2f 	bl	8015acc <RegionCommonChanDisable>
    }
    return status;
 8018c6e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018c72:	4618      	mov	r0, r3
 8018c74:	3798      	adds	r7, #152	; 0x98
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bd80      	pop	{r7, pc}
 8018c7a:	bf00      	nop
 8018c7c:	20001aa4 	.word	0x20001aa4
 8018c80:	20001aa8 	.word	0x20001aa8
 8018c84:	20001aac 	.word	0x20001aac

08018c88 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018c88:	b480      	push	{r7}
 8018c8a:	b085      	sub	sp, #20
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	4603      	mov	r3, r0
 8018c90:	71fb      	strb	r3, [r7, #7]
 8018c92:	460b      	mov	r3, r1
 8018c94:	71bb      	strb	r3, [r7, #6]
 8018c96:	4613      	mov	r3, r2
 8018c98:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8018c9a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018c9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018ca2:	4909      	ldr	r1, [pc, #36]	; (8018cc8 <RegionUS915ApplyDrOffset+0x40>)
 8018ca4:	0092      	lsls	r2, r2, #2
 8018ca6:	440a      	add	r2, r1
 8018ca8:	4413      	add	r3, r2
 8018caa:	781b      	ldrb	r3, [r3, #0]
 8018cac:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8018cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	da01      	bge.n	8018cba <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018cb6:	2300      	movs	r3, #0
 8018cb8:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8018cba:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8018cbc:	4618      	mov	r0, r3
 8018cbe:	3714      	adds	r7, #20
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	bc80      	pop	{r7}
 8018cc4:	4770      	bx	lr
 8018cc6:	bf00      	nop
 8018cc8:	0801eec4 	.word	0x0801eec4

08018ccc <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8018ccc:	b480      	push	{r7}
 8018cce:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018cd0:	4b0d      	ldr	r3, [pc, #52]	; (8018d08 <rand1+0x3c>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	4a0d      	ldr	r2, [pc, #52]	; (8018d0c <rand1+0x40>)
 8018cd6:	fb02 f303 	mul.w	r3, r2, r3
 8018cda:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8018cde:	3339      	adds	r3, #57	; 0x39
 8018ce0:	4a09      	ldr	r2, [pc, #36]	; (8018d08 <rand1+0x3c>)
 8018ce2:	6013      	str	r3, [r2, #0]
 8018ce4:	4b08      	ldr	r3, [pc, #32]	; (8018d08 <rand1+0x3c>)
 8018ce6:	681a      	ldr	r2, [r3, #0]
 8018ce8:	2303      	movs	r3, #3
 8018cea:	fba3 1302 	umull	r1, r3, r3, r2
 8018cee:	1ad1      	subs	r1, r2, r3
 8018cf0:	0849      	lsrs	r1, r1, #1
 8018cf2:	440b      	add	r3, r1
 8018cf4:	0f99      	lsrs	r1, r3, #30
 8018cf6:	460b      	mov	r3, r1
 8018cf8:	07db      	lsls	r3, r3, #31
 8018cfa:	1a5b      	subs	r3, r3, r1
 8018cfc:	1ad1      	subs	r1, r2, r3
 8018cfe:	460b      	mov	r3, r1
}
 8018d00:	4618      	mov	r0, r3
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bc80      	pop	{r7}
 8018d06:	4770      	bx	lr
 8018d08:	20000140 	.word	0x20000140
 8018d0c:	41c64e6d 	.word	0x41c64e6d

08018d10 <srand1>:

void srand1( uint32_t seed )
{
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
    next = seed;
 8018d18:	4a03      	ldr	r2, [pc, #12]	; (8018d28 <srand1+0x18>)
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6013      	str	r3, [r2, #0]
}
 8018d1e:	bf00      	nop
 8018d20:	370c      	adds	r7, #12
 8018d22:	46bd      	mov	sp, r7
 8018d24:	bc80      	pop	{r7}
 8018d26:	4770      	bx	lr
 8018d28:	20000140 	.word	0x20000140

08018d2c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8018d2c:	b580      	push	{r7, lr}
 8018d2e:	b082      	sub	sp, #8
 8018d30:	af00      	add	r7, sp, #0
 8018d32:	6078      	str	r0, [r7, #4]
 8018d34:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8018d36:	f7ff ffc9 	bl	8018ccc <rand1>
 8018d3a:	4602      	mov	r2, r0
 8018d3c:	6839      	ldr	r1, [r7, #0]
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	1acb      	subs	r3, r1, r3
 8018d42:	3301      	adds	r3, #1
 8018d44:	fb92 f1f3 	sdiv	r1, r2, r3
 8018d48:	fb01 f303 	mul.w	r3, r1, r3
 8018d4c:	1ad2      	subs	r2, r2, r3
 8018d4e:	687b      	ldr	r3, [r7, #4]
 8018d50:	4413      	add	r3, r2
}
 8018d52:	4618      	mov	r0, r3
 8018d54:	3708      	adds	r7, #8
 8018d56:	46bd      	mov	sp, r7
 8018d58:	bd80      	pop	{r7, pc}

08018d5a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018d5a:	b480      	push	{r7}
 8018d5c:	b085      	sub	sp, #20
 8018d5e:	af00      	add	r7, sp, #0
 8018d60:	60f8      	str	r0, [r7, #12]
 8018d62:	60b9      	str	r1, [r7, #8]
 8018d64:	4613      	mov	r3, r2
 8018d66:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018d68:	e007      	b.n	8018d7a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8018d6a:	68ba      	ldr	r2, [r7, #8]
 8018d6c:	1c53      	adds	r3, r2, #1
 8018d6e:	60bb      	str	r3, [r7, #8]
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	1c59      	adds	r1, r3, #1
 8018d74:	60f9      	str	r1, [r7, #12]
 8018d76:	7812      	ldrb	r2, [r2, #0]
 8018d78:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018d7a:	88fb      	ldrh	r3, [r7, #6]
 8018d7c:	1e5a      	subs	r2, r3, #1
 8018d7e:	80fa      	strh	r2, [r7, #6]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d1f2      	bne.n	8018d6a <memcpy1+0x10>
    }
}
 8018d84:	bf00      	nop
 8018d86:	bf00      	nop
 8018d88:	3714      	adds	r7, #20
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bc80      	pop	{r7}
 8018d8e:	4770      	bx	lr

08018d90 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018d90:	b480      	push	{r7}
 8018d92:	b085      	sub	sp, #20
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	60f8      	str	r0, [r7, #12]
 8018d98:	60b9      	str	r1, [r7, #8]
 8018d9a:	4613      	mov	r3, r2
 8018d9c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8018d9e:	88fb      	ldrh	r3, [r7, #6]
 8018da0:	3b01      	subs	r3, #1
 8018da2:	68fa      	ldr	r2, [r7, #12]
 8018da4:	4413      	add	r3, r2
 8018da6:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018da8:	e007      	b.n	8018dba <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8018daa:	68ba      	ldr	r2, [r7, #8]
 8018dac:	1c53      	adds	r3, r2, #1
 8018dae:	60bb      	str	r3, [r7, #8]
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	1e59      	subs	r1, r3, #1
 8018db4:	60f9      	str	r1, [r7, #12]
 8018db6:	7812      	ldrb	r2, [r2, #0]
 8018db8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018dba:	88fb      	ldrh	r3, [r7, #6]
 8018dbc:	1e5a      	subs	r2, r3, #1
 8018dbe:	80fa      	strh	r2, [r7, #6]
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d1f2      	bne.n	8018daa <memcpyr+0x1a>
    }
}
 8018dc4:	bf00      	nop
 8018dc6:	bf00      	nop
 8018dc8:	3714      	adds	r7, #20
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bc80      	pop	{r7}
 8018dce:	4770      	bx	lr

08018dd0 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018dd0:	b480      	push	{r7}
 8018dd2:	b083      	sub	sp, #12
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
 8018dd8:	460b      	mov	r3, r1
 8018dda:	70fb      	strb	r3, [r7, #3]
 8018ddc:	4613      	mov	r3, r2
 8018dde:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8018de0:	e004      	b.n	8018dec <memset1+0x1c>
    {
        *dst++ = value;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	1c5a      	adds	r2, r3, #1
 8018de6:	607a      	str	r2, [r7, #4]
 8018de8:	78fa      	ldrb	r2, [r7, #3]
 8018dea:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8018dec:	883b      	ldrh	r3, [r7, #0]
 8018dee:	1e5a      	subs	r2, r3, #1
 8018df0:	803a      	strh	r2, [r7, #0]
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d1f5      	bne.n	8018de2 <memset1+0x12>
    }
}
 8018df6:	bf00      	nop
 8018df8:	bf00      	nop
 8018dfa:	370c      	adds	r7, #12
 8018dfc:	46bd      	mov	sp, r7
 8018dfe:	bc80      	pop	{r7}
 8018e00:	4770      	bx	lr
	...

08018e04 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8018e04:	b480      	push	{r7}
 8018e06:	b085      	sub	sp, #20
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
 8018e0c:	460b      	mov	r3, r1
 8018e0e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8018e10:	f04f 33ff 	mov.w	r3, #4294967295
 8018e14:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d101      	bne.n	8018e20 <Crc32+0x1c>
    {
        return 0;
 8018e1c:	2300      	movs	r3, #0
 8018e1e:	e026      	b.n	8018e6e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8018e20:	2300      	movs	r3, #0
 8018e22:	817b      	strh	r3, [r7, #10]
 8018e24:	e01d      	b.n	8018e62 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8018e26:	897b      	ldrh	r3, [r7, #10]
 8018e28:	687a      	ldr	r2, [r7, #4]
 8018e2a:	4413      	add	r3, r2
 8018e2c:	781b      	ldrb	r3, [r3, #0]
 8018e2e:	461a      	mov	r2, r3
 8018e30:	68fb      	ldr	r3, [r7, #12]
 8018e32:	4053      	eors	r3, r2
 8018e34:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018e36:	2300      	movs	r3, #0
 8018e38:	813b      	strh	r3, [r7, #8]
 8018e3a:	e00c      	b.n	8018e56 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	085a      	lsrs	r2, r3, #1
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	f003 0301 	and.w	r3, r3, #1
 8018e46:	425b      	negs	r3, r3
 8018e48:	490b      	ldr	r1, [pc, #44]	; (8018e78 <Crc32+0x74>)
 8018e4a:	400b      	ands	r3, r1
 8018e4c:	4053      	eors	r3, r2
 8018e4e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018e50:	893b      	ldrh	r3, [r7, #8]
 8018e52:	3301      	adds	r3, #1
 8018e54:	813b      	strh	r3, [r7, #8]
 8018e56:	893b      	ldrh	r3, [r7, #8]
 8018e58:	2b07      	cmp	r3, #7
 8018e5a:	d9ef      	bls.n	8018e3c <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8018e5c:	897b      	ldrh	r3, [r7, #10]
 8018e5e:	3301      	adds	r3, #1
 8018e60:	817b      	strh	r3, [r7, #10]
 8018e62:	897a      	ldrh	r2, [r7, #10]
 8018e64:	887b      	ldrh	r3, [r7, #2]
 8018e66:	429a      	cmp	r2, r3
 8018e68:	d3dd      	bcc.n	8018e26 <Crc32+0x22>
        }
    }

    return ~crc;
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	43db      	mvns	r3, r3
}
 8018e6e:	4618      	mov	r0, r3
 8018e70:	3714      	adds	r7, #20
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bc80      	pop	{r7}
 8018e76:	4770      	bx	lr
 8018e78:	edb88320 	.word	0xedb88320

08018e7c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b084      	sub	sp, #16
 8018e80:	af02      	add	r7, sp, #8
 8018e82:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018e84:	4a24      	ldr	r2, [pc, #144]	; (8018f18 <RadioInit+0x9c>)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8018e8a:	4b24      	ldr	r3, [pc, #144]	; (8018f1c <RadioInit+0xa0>)
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018e90:	4b22      	ldr	r3, [pc, #136]	; (8018f1c <RadioInit+0xa0>)
 8018e92:	2200      	movs	r2, #0
 8018e94:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018e96:	4b21      	ldr	r3, [pc, #132]	; (8018f1c <RadioInit+0xa0>)
 8018e98:	2200      	movs	r2, #0
 8018e9a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018e9c:	4b1f      	ldr	r3, [pc, #124]	; (8018f1c <RadioInit+0xa0>)
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8018ea2:	481f      	ldr	r0, [pc, #124]	; (8018f20 <RadioInit+0xa4>)
 8018ea4:	f001 ff88 	bl	801adb8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018ea8:	4b1c      	ldr	r3, [pc, #112]	; (8018f1c <RadioInit+0xa0>)
 8018eaa:	2200      	movs	r2, #0
 8018eac:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8018eae:	4b1b      	ldr	r3, [pc, #108]	; (8018f1c <RadioInit+0xa0>)
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018eb4:	f002 fa16 	bl	801b2e4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018eb8:	2100      	movs	r1, #0
 8018eba:	2000      	movs	r0, #0
 8018ebc:	f002 fdde 	bl	801ba7c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018ec0:	2204      	movs	r2, #4
 8018ec2:	2100      	movs	r1, #0
 8018ec4:	2001      	movs	r0, #1
 8018ec6:	f002 fb9b 	bl	801b600 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018eca:	2300      	movs	r3, #0
 8018ecc:	2200      	movs	r2, #0
 8018ece:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ed6:	f002 facb 	bl	801b470 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8018eda:	f000 fe83 	bl	8019be4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8018ede:	2300      	movs	r3, #0
 8018ee0:	9300      	str	r3, [sp, #0]
 8018ee2:	4b10      	ldr	r3, [pc, #64]	; (8018f24 <RadioInit+0xa8>)
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8018eea:	480f      	ldr	r0, [pc, #60]	; (8018f28 <RadioInit+0xac>)
 8018eec:	f003 fe9e 	bl	801cc2c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	9300      	str	r3, [sp, #0]
 8018ef4:	4b0d      	ldr	r3, [pc, #52]	; (8018f2c <RadioInit+0xb0>)
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8018efc:	480c      	ldr	r0, [pc, #48]	; (8018f30 <RadioInit+0xb4>)
 8018efe:	f003 fe95 	bl	801cc2c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8018f02:	4809      	ldr	r0, [pc, #36]	; (8018f28 <RadioInit+0xac>)
 8018f04:	f003 ff36 	bl	801cd74 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8018f08:	4809      	ldr	r0, [pc, #36]	; (8018f30 <RadioInit+0xb4>)
 8018f0a:	f003 ff33 	bl	801cd74 <UTIL_TIMER_Stop>
}
 8018f0e:	bf00      	nop
 8018f10:	3708      	adds	r7, #8
 8018f12:	46bd      	mov	sp, r7
 8018f14:	bd80      	pop	{r7, pc}
 8018f16:	bf00      	nop
 8018f18:	20001bb0 	.word	0x20001bb0
 8018f1c:	20001bb4 	.word	0x20001bb4
 8018f20:	08019fd1 	.word	0x08019fd1
 8018f24:	08019f59 	.word	0x08019f59
 8018f28:	20001c10 	.word	0x20001c10
 8018f2c:	08019f6d 	.word	0x08019f6d
 8018f30:	20001c28 	.word	0x20001c28

08018f34 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8018f34:	b580      	push	{r7, lr}
 8018f36:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8018f38:	f001 ff80 	bl	801ae3c <SUBGRF_GetOperatingMode>
 8018f3c:	4603      	mov	r3, r0
 8018f3e:	2b07      	cmp	r3, #7
 8018f40:	d00a      	beq.n	8018f58 <RadioGetStatus+0x24>
 8018f42:	2b07      	cmp	r3, #7
 8018f44:	dc0a      	bgt.n	8018f5c <RadioGetStatus+0x28>
 8018f46:	2b04      	cmp	r3, #4
 8018f48:	d002      	beq.n	8018f50 <RadioGetStatus+0x1c>
 8018f4a:	2b05      	cmp	r3, #5
 8018f4c:	d002      	beq.n	8018f54 <RadioGetStatus+0x20>
 8018f4e:	e005      	b.n	8018f5c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018f50:	2302      	movs	r3, #2
 8018f52:	e004      	b.n	8018f5e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018f54:	2301      	movs	r3, #1
 8018f56:	e002      	b.n	8018f5e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018f58:	2303      	movs	r3, #3
 8018f5a:	e000      	b.n	8018f5e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8018f5c:	2300      	movs	r3, #0
    }
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	bd80      	pop	{r7, pc}
	...

08018f64 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018f64:	b580      	push	{r7, lr}
 8018f66:	b082      	sub	sp, #8
 8018f68:	af00      	add	r7, sp, #0
 8018f6a:	4603      	mov	r3, r0
 8018f6c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8018f6e:	4a2a      	ldr	r2, [pc, #168]	; (8019018 <RadioSetModem+0xb4>)
 8018f70:	79fb      	ldrb	r3, [r7, #7]
 8018f72:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018f74:	79fb      	ldrb	r3, [r7, #7]
 8018f76:	4618      	mov	r0, r3
 8018f78:	f003 f943 	bl	801c202 <RFW_SetRadioModem>
    switch( modem )
 8018f7c:	79fb      	ldrb	r3, [r7, #7]
 8018f7e:	2b05      	cmp	r3, #5
 8018f80:	d80e      	bhi.n	8018fa0 <RadioSetModem+0x3c>
 8018f82:	a201      	add	r2, pc, #4	; (adr r2, 8018f88 <RadioSetModem+0x24>)
 8018f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f88:	08018faf 	.word	0x08018faf
 8018f8c:	08018fbd 	.word	0x08018fbd
 8018f90:	08018fa1 	.word	0x08018fa1
 8018f94:	08018fe3 	.word	0x08018fe3
 8018f98:	08018ff1 	.word	0x08018ff1
 8018f9c:	08018fff 	.word	0x08018fff
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018fa0:	2003      	movs	r0, #3
 8018fa2:	f002 fb07 	bl	801b5b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018fa6:	4b1c      	ldr	r3, [pc, #112]	; (8019018 <RadioSetModem+0xb4>)
 8018fa8:	2200      	movs	r2, #0
 8018faa:	735a      	strb	r2, [r3, #13]
        break;
 8018fac:	e02f      	b.n	801900e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018fae:	2000      	movs	r0, #0
 8018fb0:	f002 fb00 	bl	801b5b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018fb4:	4b18      	ldr	r3, [pc, #96]	; (8019018 <RadioSetModem+0xb4>)
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	735a      	strb	r2, [r3, #13]
        break;
 8018fba:	e028      	b.n	801900e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8018fbc:	2001      	movs	r0, #1
 8018fbe:	f002 faf9 	bl	801b5b4 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018fc2:	4b15      	ldr	r3, [pc, #84]	; (8019018 <RadioSetModem+0xb4>)
 8018fc4:	7b5a      	ldrb	r2, [r3, #13]
 8018fc6:	4b14      	ldr	r3, [pc, #80]	; (8019018 <RadioSetModem+0xb4>)
 8018fc8:	7b1b      	ldrb	r3, [r3, #12]
 8018fca:	429a      	cmp	r2, r3
 8018fcc:	d01e      	beq.n	801900c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8018fce:	4b12      	ldr	r3, [pc, #72]	; (8019018 <RadioSetModem+0xb4>)
 8018fd0:	7b1a      	ldrb	r2, [r3, #12]
 8018fd2:	4b11      	ldr	r3, [pc, #68]	; (8019018 <RadioSetModem+0xb4>)
 8018fd4:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018fd6:	4b10      	ldr	r3, [pc, #64]	; (8019018 <RadioSetModem+0xb4>)
 8018fd8:	7b5b      	ldrb	r3, [r3, #13]
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f000 ff86 	bl	8019eec <RadioSetPublicNetwork>
        }
        break;
 8018fe0:	e014      	b.n	801900c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018fe2:	2002      	movs	r0, #2
 8018fe4:	f002 fae6 	bl	801b5b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018fe8:	4b0b      	ldr	r3, [pc, #44]	; (8019018 <RadioSetModem+0xb4>)
 8018fea:	2200      	movs	r2, #0
 8018fec:	735a      	strb	r2, [r3, #13]
        break;
 8018fee:	e00e      	b.n	801900e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8018ff0:	2002      	movs	r0, #2
 8018ff2:	f002 fadf 	bl	801b5b4 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018ff6:	4b08      	ldr	r3, [pc, #32]	; (8019018 <RadioSetModem+0xb4>)
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	735a      	strb	r2, [r3, #13]
        break;
 8018ffc:	e007      	b.n	801900e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8018ffe:	2000      	movs	r0, #0
 8019000:	f002 fad8 	bl	801b5b4 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8019004:	4b04      	ldr	r3, [pc, #16]	; (8019018 <RadioSetModem+0xb4>)
 8019006:	2200      	movs	r2, #0
 8019008:	735a      	strb	r2, [r3, #13]
        break;
 801900a:	e000      	b.n	801900e <RadioSetModem+0xaa>
        break;
 801900c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801900e:	bf00      	nop
 8019010:	3708      	adds	r7, #8
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}
 8019016:	bf00      	nop
 8019018:	20001bb4 	.word	0x20001bb4

0801901c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801901c:	b580      	push	{r7, lr}
 801901e:	b082      	sub	sp, #8
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8019024:	6878      	ldr	r0, [r7, #4]
 8019026:	f002 fa7f 	bl	801b528 <SUBGRF_SetRfFrequency>
}
 801902a:	bf00      	nop
 801902c:	3708      	adds	r7, #8
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}

08019032 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8019032:	b580      	push	{r7, lr}
 8019034:	b090      	sub	sp, #64	; 0x40
 8019036:	af0a      	add	r7, sp, #40	; 0x28
 8019038:	60f8      	str	r0, [r7, #12]
 801903a:	60b9      	str	r1, [r7, #8]
 801903c:	603b      	str	r3, [r7, #0]
 801903e:	4613      	mov	r3, r2
 8019040:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8019042:	2301      	movs	r3, #1
 8019044:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8019046:	2300      	movs	r3, #0
 8019048:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801904a:	2300      	movs	r3, #0
 801904c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801904e:	f000 fddc 	bl	8019c0a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8019052:	2000      	movs	r0, #0
 8019054:	f7ff ff86 	bl	8018f64 <RadioSetModem>

    RadioSetChannel( freq );
 8019058:	68f8      	ldr	r0, [r7, #12]
 801905a:	f7ff ffdf 	bl	801901c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801905e:	2301      	movs	r3, #1
 8019060:	9309      	str	r3, [sp, #36]	; 0x24
 8019062:	2300      	movs	r3, #0
 8019064:	9308      	str	r3, [sp, #32]
 8019066:	2300      	movs	r3, #0
 8019068:	9307      	str	r3, [sp, #28]
 801906a:	2300      	movs	r3, #0
 801906c:	9306      	str	r3, [sp, #24]
 801906e:	2300      	movs	r3, #0
 8019070:	9305      	str	r3, [sp, #20]
 8019072:	2300      	movs	r3, #0
 8019074:	9304      	str	r3, [sp, #16]
 8019076:	2300      	movs	r3, #0
 8019078:	9303      	str	r3, [sp, #12]
 801907a:	2300      	movs	r3, #0
 801907c:	9302      	str	r3, [sp, #8]
 801907e:	2303      	movs	r3, #3
 8019080:	9301      	str	r3, [sp, #4]
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	9300      	str	r3, [sp, #0]
 8019086:	2300      	movs	r3, #0
 8019088:	f44f 7216 	mov.w	r2, #600	; 0x258
 801908c:	68b9      	ldr	r1, [r7, #8]
 801908e:	2000      	movs	r0, #0
 8019090:	f000 f83c 	bl	801910c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8019094:	2000      	movs	r0, #0
 8019096:	f000 fdbf 	bl	8019c18 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801909a:	f000 ff55 	bl	8019f48 <RadioGetWakeupTime>
 801909e:	4603      	mov	r3, r0
 80190a0:	4618      	mov	r0, r3
 80190a2:	f7e8 febb 	bl	8001e1c <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 80190a6:	f003 ff7f 	bl	801cfa8 <UTIL_TIMER_GetCurrentTime>
 80190aa:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80190ac:	e00d      	b.n	80190ca <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 80190ae:	2000      	movs	r0, #0
 80190b0:	f000 fe9a 	bl	8019de8 <RadioRssi>
 80190b4:	4603      	mov	r3, r0
 80190b6:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80190b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80190bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	dd02      	ble.n	80190ca <RadioIsChannelFree+0x98>
        {
            status = false;
 80190c4:	2300      	movs	r3, #0
 80190c6:	75fb      	strb	r3, [r7, #23]
            break;
 80190c8:	e006      	b.n	80190d8 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80190ca:	6938      	ldr	r0, [r7, #16]
 80190cc:	f003 ff7e 	bl	801cfcc <UTIL_TIMER_GetElapsedTime>
 80190d0:	4602      	mov	r2, r0
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	4293      	cmp	r3, r2
 80190d6:	d8ea      	bhi.n	80190ae <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 80190d8:	f000 fd97 	bl	8019c0a <RadioStandby>

    return status;
 80190dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80190de:	4618      	mov	r0, r3
 80190e0:	3718      	adds	r7, #24
 80190e2:	46bd      	mov	sp, r7
 80190e4:	bd80      	pop	{r7, pc}

080190e6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80190e6:	b580      	push	{r7, lr}
 80190e8:	b082      	sub	sp, #8
 80190ea:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80190ec:	2300      	movs	r3, #0
 80190ee:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80190f0:	2300      	movs	r3, #0
 80190f2:	2200      	movs	r2, #0
 80190f4:	2100      	movs	r1, #0
 80190f6:	2000      	movs	r0, #0
 80190f8:	f002 f9ba 	bl	801b470 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80190fc:	f001 ff6f 	bl	801afde <SUBGRF_GetRandom>
 8019100:	6078      	str	r0, [r7, #4]

    return rnd;
 8019102:	687b      	ldr	r3, [r7, #4]
}
 8019104:	4618      	mov	r0, r3
 8019106:	3708      	adds	r7, #8
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}

0801910c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b08a      	sub	sp, #40	; 0x28
 8019110:	af00      	add	r7, sp, #0
 8019112:	60b9      	str	r1, [r7, #8]
 8019114:	607a      	str	r2, [r7, #4]
 8019116:	461a      	mov	r2, r3
 8019118:	4603      	mov	r3, r0
 801911a:	73fb      	strb	r3, [r7, #15]
 801911c:	4613      	mov	r3, r2
 801911e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8019120:	4ab9      	ldr	r2, [pc, #740]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019122:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019126:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8019128:	f003 f829 	bl	801c17e <RFW_DeInit>
    if( rxContinuous == true )
 801912c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8019130:	2b00      	cmp	r3, #0
 8019132:	d001      	beq.n	8019138 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8019134:	2300      	movs	r3, #0
 8019136:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8019138:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801913c:	2b00      	cmp	r3, #0
 801913e:	d004      	beq.n	801914a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8019140:	4ab2      	ldr	r2, [pc, #712]	; (801940c <RadioSetRxConfig+0x300>)
 8019142:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8019146:	7013      	strb	r3, [r2, #0]
 8019148:	e002      	b.n	8019150 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801914a:	4bb0      	ldr	r3, [pc, #704]	; (801940c <RadioSetRxConfig+0x300>)
 801914c:	22ff      	movs	r2, #255	; 0xff
 801914e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8019150:	7bfb      	ldrb	r3, [r7, #15]
 8019152:	2b05      	cmp	r3, #5
 8019154:	d009      	beq.n	801916a <RadioSetRxConfig+0x5e>
 8019156:	2b05      	cmp	r3, #5
 8019158:	f300 81ca 	bgt.w	80194f0 <RadioSetRxConfig+0x3e4>
 801915c:	2b00      	cmp	r3, #0
 801915e:	f000 80bf 	beq.w	80192e0 <RadioSetRxConfig+0x1d4>
 8019162:	2b01      	cmp	r3, #1
 8019164:	f000 8124 	beq.w	80193b0 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8019168:	e1c2      	b.n	80194f0 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801916a:	2001      	movs	r0, #1
 801916c:	f002 f87c 	bl	801b268 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019170:	4ba5      	ldr	r3, [pc, #660]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019172:	2200      	movs	r2, #0
 8019174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019178:	4aa3      	ldr	r2, [pc, #652]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801917e:	4ba2      	ldr	r3, [pc, #648]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019180:	2209      	movs	r2, #9
 8019182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8019186:	4ba0      	ldr	r3, [pc, #640]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019188:	f44f 7248 	mov.w	r2, #800	; 0x320
 801918c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801918e:	68b8      	ldr	r0, [r7, #8]
 8019190:	f002 ff28 	bl	801bfe4 <SUBGRF_GetFskBandwidthRegValue>
 8019194:	4603      	mov	r3, r0
 8019196:	461a      	mov	r2, r3
 8019198:	4b9b      	ldr	r3, [pc, #620]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801919a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801919e:	4b9a      	ldr	r3, [pc, #616]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191a0:	2200      	movs	r2, #0
 80191a2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80191a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	b29a      	uxth	r2, r3
 80191aa:	4b97      	ldr	r3, [pc, #604]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191ac:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80191ae:	4b96      	ldr	r3, [pc, #600]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191b0:	2200      	movs	r2, #0
 80191b2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80191b4:	4b94      	ldr	r3, [pc, #592]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191b6:	2210      	movs	r2, #16
 80191b8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80191ba:	4b93      	ldr	r3, [pc, #588]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191bc:	2200      	movs	r2, #0
 80191be:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80191c0:	4b91      	ldr	r3, [pc, #580]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191c2:	2200      	movs	r2, #0
 80191c4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80191c6:	4b91      	ldr	r3, [pc, #580]	; (801940c <RadioSetRxConfig+0x300>)
 80191c8:	781a      	ldrb	r2, [r3, #0]
 80191ca:	4b8f      	ldr	r3, [pc, #572]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191cc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80191ce:	4b8e      	ldr	r3, [pc, #568]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191d0:	2201      	movs	r2, #1
 80191d2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80191d4:	4b8c      	ldr	r3, [pc, #560]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80191d6:	2200      	movs	r2, #0
 80191d8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80191da:	2005      	movs	r0, #5
 80191dc:	f7ff fec2 	bl	8018f64 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80191e0:	488b      	ldr	r0, [pc, #556]	; (8019410 <RadioSetRxConfig+0x304>)
 80191e2:	f002 fadb 	bl	801b79c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80191e6:	488b      	ldr	r0, [pc, #556]	; (8019414 <RadioSetRxConfig+0x308>)
 80191e8:	f002 fbaa 	bl	801b940 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80191ec:	4a8a      	ldr	r2, [pc, #552]	; (8019418 <RadioSetRxConfig+0x30c>)
 80191ee:	f107 031c 	add.w	r3, r7, #28
 80191f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80191f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80191fa:	f107 031c 	add.w	r3, r7, #28
 80191fe:	4618      	mov	r0, r3
 8019200:	f001 fe6b 	bl	801aeda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019204:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019208:	f001 feb6 	bl	801af78 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801920c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019210:	f000 fe09 	bl	8019e26 <RadioRead>
 8019214:	4603      	mov	r3, r0
 8019216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801921a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801921e:	f023 0310 	bic.w	r3, r3, #16
 8019222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8019226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801922a:	4619      	mov	r1, r3
 801922c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8019230:	f000 fde7 	bl	8019e02 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8019234:	2104      	movs	r1, #4
 8019236:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801923a:	f000 fde2 	bl	8019e02 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801923e:	f640 009b 	movw	r0, #2203	; 0x89b
 8019242:	f000 fdf0 	bl	8019e26 <RadioRead>
 8019246:	4603      	mov	r3, r0
 8019248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801924c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019250:	f023 031c 	bic.w	r3, r3, #28
 8019254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8019258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801925c:	f043 0308 	orr.w	r3, r3, #8
 8019260:	b2db      	uxtb	r3, r3
 8019262:	4619      	mov	r1, r3
 8019264:	f640 009b 	movw	r0, #2203	; 0x89b
 8019268:	f000 fdcb 	bl	8019e02 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801926c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019270:	f000 fdd9 	bl	8019e26 <RadioRead>
 8019274:	4603      	mov	r3, r0
 8019276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801927a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801927e:	f023 0318 	bic.w	r3, r3, #24
 8019282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8019286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801928a:	f043 0318 	orr.w	r3, r3, #24
 801928e:	b2db      	uxtb	r3, r3
 8019290:	4619      	mov	r1, r3
 8019292:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8019296:	f000 fdb4 	bl	8019e02 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801929a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801929e:	f000 fdc2 	bl	8019e26 <RadioRead>
 80192a2:	4603      	mov	r3, r0
 80192a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 80192a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80192b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80192b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80192b8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80192bc:	b2db      	uxtb	r3, r3
 80192be:	4619      	mov	r1, r3
 80192c0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80192c4:	f000 fd9d 	bl	8019e02 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80192c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80192ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80192ce:	fb02 f303 	mul.w	r3, r2, r3
 80192d2:	461a      	mov	r2, r3
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80192da:	4a4b      	ldr	r2, [pc, #300]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80192dc:	6093      	str	r3, [r2, #8]
            break;
 80192de:	e108      	b.n	80194f2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80192e0:	2000      	movs	r0, #0
 80192e2:	f001 ffc1 	bl	801b268 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80192e6:	4b48      	ldr	r3, [pc, #288]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80192e8:	2200      	movs	r2, #0
 80192ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80192ee:	4a46      	ldr	r2, [pc, #280]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80192f4:	4b44      	ldr	r3, [pc, #272]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80192f6:	220b      	movs	r2, #11
 80192f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80192fc:	68b8      	ldr	r0, [r7, #8]
 80192fe:	f002 fe71 	bl	801bfe4 <SUBGRF_GetFskBandwidthRegValue>
 8019302:	4603      	mov	r3, r0
 8019304:	461a      	mov	r2, r3
 8019306:	4b40      	ldr	r3, [pc, #256]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801930c:	4b3e      	ldr	r3, [pc, #248]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801930e:	2200      	movs	r2, #0
 8019310:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8019312:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019314:	00db      	lsls	r3, r3, #3
 8019316:	b29a      	uxth	r2, r3
 8019318:	4b3b      	ldr	r3, [pc, #236]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801931a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801931c:	4b3a      	ldr	r3, [pc, #232]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801931e:	2204      	movs	r2, #4
 8019320:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8019322:	4b39      	ldr	r3, [pc, #228]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019324:	2218      	movs	r2, #24
 8019326:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019328:	4b37      	ldr	r3, [pc, #220]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801932a:	2200      	movs	r2, #0
 801932c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801932e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019332:	f083 0301 	eor.w	r3, r3, #1
 8019336:	b2db      	uxtb	r3, r3
 8019338:	461a      	mov	r2, r3
 801933a:	4b33      	ldr	r3, [pc, #204]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801933c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801933e:	4b33      	ldr	r3, [pc, #204]	; (801940c <RadioSetRxConfig+0x300>)
 8019340:	781a      	ldrb	r2, [r3, #0]
 8019342:	4b31      	ldr	r3, [pc, #196]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019344:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8019346:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801934a:	2b00      	cmp	r3, #0
 801934c:	d003      	beq.n	8019356 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801934e:	4b2e      	ldr	r3, [pc, #184]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019350:	22f2      	movs	r2, #242	; 0xf2
 8019352:	75da      	strb	r2, [r3, #23]
 8019354:	e002      	b.n	801935c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8019356:	4b2c      	ldr	r3, [pc, #176]	; (8019408 <RadioSetRxConfig+0x2fc>)
 8019358:	2201      	movs	r2, #1
 801935a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801935c:	4b2a      	ldr	r3, [pc, #168]	; (8019408 <RadioSetRxConfig+0x2fc>)
 801935e:	2201      	movs	r2, #1
 8019360:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8019362:	f000 fc52 	bl	8019c0a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8019366:	2000      	movs	r0, #0
 8019368:	f7ff fdfc 	bl	8018f64 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801936c:	4828      	ldr	r0, [pc, #160]	; (8019410 <RadioSetRxConfig+0x304>)
 801936e:	f002 fa15 	bl	801b79c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019372:	4828      	ldr	r0, [pc, #160]	; (8019414 <RadioSetRxConfig+0x308>)
 8019374:	f002 fae4 	bl	801b940 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8019378:	4a28      	ldr	r2, [pc, #160]	; (801941c <RadioSetRxConfig+0x310>)
 801937a:	f107 0314 	add.w	r3, r7, #20
 801937e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019382:	e883 0003 	stmia.w	r3, {r0, r1}
 8019386:	f107 0314 	add.w	r3, r7, #20
 801938a:	4618      	mov	r0, r3
 801938c:	f001 fda5 	bl	801aeda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8019390:	f240 10ff 	movw	r0, #511	; 0x1ff
 8019394:	f001 fdf0 	bl	801af78 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8019398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801939a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801939e:	fb02 f303 	mul.w	r3, r2, r3
 80193a2:	461a      	mov	r2, r3
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80193aa:	4a17      	ldr	r2, [pc, #92]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80193ac:	6093      	str	r3, [r2, #8]
            break;
 80193ae:	e0a0      	b.n	80194f2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80193b0:	2000      	movs	r0, #0
 80193b2:	f001 ff59 	bl	801b268 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80193b6:	4b14      	ldr	r3, [pc, #80]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80193b8:	2201      	movs	r2, #1
 80193ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	b2da      	uxtb	r2, r3
 80193c2:	4b11      	ldr	r3, [pc, #68]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80193c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80193c8:	4a15      	ldr	r2, [pc, #84]	; (8019420 <RadioSetRxConfig+0x314>)
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	4413      	add	r3, r2
 80193ce:	781a      	ldrb	r2, [r3, #0]
 80193d0:	4b0d      	ldr	r3, [pc, #52]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80193d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80193d6:	4a0c      	ldr	r2, [pc, #48]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80193d8:	7bbb      	ldrb	r3, [r7, #14]
 80193da:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80193de:	68bb      	ldr	r3, [r7, #8]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d105      	bne.n	80193f0 <RadioSetRxConfig+0x2e4>
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2b0b      	cmp	r3, #11
 80193e8:	d008      	beq.n	80193fc <RadioSetRxConfig+0x2f0>
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	2b0c      	cmp	r3, #12
 80193ee:	d005      	beq.n	80193fc <RadioSetRxConfig+0x2f0>
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d116      	bne.n	8019424 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2b0c      	cmp	r3, #12
 80193fa:	d113      	bne.n	8019424 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80193fc:	4b02      	ldr	r3, [pc, #8]	; (8019408 <RadioSetRxConfig+0x2fc>)
 80193fe:	2201      	movs	r2, #1
 8019400:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8019404:	e012      	b.n	801942c <RadioSetRxConfig+0x320>
 8019406:	bf00      	nop
 8019408:	20001bb4 	.word	0x20001bb4
 801940c:	20000144 	.word	0x20000144
 8019410:	20001bec 	.word	0x20001bec
 8019414:	20001bc2 	.word	0x20001bc2
 8019418:	0801e914 	.word	0x0801e914
 801941c:	0801e91c 	.word	0x0801e91c
 8019420:	0801ef7c 	.word	0x0801ef7c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8019424:	4b35      	ldr	r3, [pc, #212]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019426:	2200      	movs	r2, #0
 8019428:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801942c:	4b33      	ldr	r3, [pc, #204]	; (80194fc <RadioSetRxConfig+0x3f0>)
 801942e:	2201      	movs	r2, #1
 8019430:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019432:	4b32      	ldr	r3, [pc, #200]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019438:	2b05      	cmp	r3, #5
 801943a:	d004      	beq.n	8019446 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801943c:	4b2f      	ldr	r3, [pc, #188]	; (80194fc <RadioSetRxConfig+0x3f0>)
 801943e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8019442:	2b06      	cmp	r3, #6
 8019444:	d10a      	bne.n	801945c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8019446:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019448:	2b0b      	cmp	r3, #11
 801944a:	d803      	bhi.n	8019454 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801944c:	4b2b      	ldr	r3, [pc, #172]	; (80194fc <RadioSetRxConfig+0x3f0>)
 801944e:	220c      	movs	r2, #12
 8019450:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8019452:	e006      	b.n	8019462 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019454:	4a29      	ldr	r2, [pc, #164]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019456:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019458:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801945a:	e002      	b.n	8019462 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801945c:	4a27      	ldr	r2, [pc, #156]	; (80194fc <RadioSetRxConfig+0x3f0>)
 801945e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019460:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8019462:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8019466:	4b25      	ldr	r3, [pc, #148]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019468:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801946a:	4b25      	ldr	r3, [pc, #148]	; (8019500 <RadioSetRxConfig+0x3f4>)
 801946c:	781a      	ldrb	r2, [r3, #0]
 801946e:	4b23      	ldr	r3, [pc, #140]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019470:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8019472:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8019476:	4b21      	ldr	r3, [pc, #132]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019478:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801947c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8019480:	4b1e      	ldr	r3, [pc, #120]	; (80194fc <RadioSetRxConfig+0x3f0>)
 8019482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8019486:	f000 fbc0 	bl	8019c0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801948a:	2001      	movs	r0, #1
 801948c:	f7ff fd6a 	bl	8018f64 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019490:	481c      	ldr	r0, [pc, #112]	; (8019504 <RadioSetRxConfig+0x3f8>)
 8019492:	f002 f983 	bl	801b79c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019496:	481c      	ldr	r0, [pc, #112]	; (8019508 <RadioSetRxConfig+0x3fc>)
 8019498:	f002 fa52 	bl	801b940 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801949c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801949e:	b2db      	uxtb	r3, r3
 80194a0:	4618      	mov	r0, r3
 80194a2:	f001 fef0 	bl	801b286 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80194a6:	4b15      	ldr	r3, [pc, #84]	; (80194fc <RadioSetRxConfig+0x3f0>)
 80194a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80194ac:	2b01      	cmp	r3, #1
 80194ae:	d10d      	bne.n	80194cc <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80194b0:	f240 7036 	movw	r0, #1846	; 0x736
 80194b4:	f002 fba0 	bl	801bbf8 <SUBGRF_ReadRegister>
 80194b8:	4603      	mov	r3, r0
 80194ba:	f023 0304 	bic.w	r3, r3, #4
 80194be:	b2db      	uxtb	r3, r3
 80194c0:	4619      	mov	r1, r3
 80194c2:	f240 7036 	movw	r0, #1846	; 0x736
 80194c6:	f002 fb83 	bl	801bbd0 <SUBGRF_WriteRegister>
 80194ca:	e00c      	b.n	80194e6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80194cc:	f240 7036 	movw	r0, #1846	; 0x736
 80194d0:	f002 fb92 	bl	801bbf8 <SUBGRF_ReadRegister>
 80194d4:	4603      	mov	r3, r0
 80194d6:	f043 0304 	orr.w	r3, r3, #4
 80194da:	b2db      	uxtb	r3, r3
 80194dc:	4619      	mov	r1, r3
 80194de:	f240 7036 	movw	r0, #1846	; 0x736
 80194e2:	f002 fb75 	bl	801bbd0 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80194e6:	4b05      	ldr	r3, [pc, #20]	; (80194fc <RadioSetRxConfig+0x3f0>)
 80194e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194ec:	609a      	str	r2, [r3, #8]
            break;
 80194ee:	e000      	b.n	80194f2 <RadioSetRxConfig+0x3e6>
            break;
 80194f0:	bf00      	nop
    }
}
 80194f2:	bf00      	nop
 80194f4:	3728      	adds	r7, #40	; 0x28
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	20001bb4 	.word	0x20001bb4
 8019500:	20000144 	.word	0x20000144
 8019504:	20001bec 	.word	0x20001bec
 8019508:	20001bc2 	.word	0x20001bc2

0801950c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b086      	sub	sp, #24
 8019510:	af00      	add	r7, sp, #0
 8019512:	60ba      	str	r2, [r7, #8]
 8019514:	607b      	str	r3, [r7, #4]
 8019516:	4603      	mov	r3, r0
 8019518:	73fb      	strb	r3, [r7, #15]
 801951a:	460b      	mov	r3, r1
 801951c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801951e:	f002 fe2e 	bl	801c17e <RFW_DeInit>
    switch( modem )
 8019522:	7bfb      	ldrb	r3, [r7, #15]
 8019524:	2b04      	cmp	r3, #4
 8019526:	f000 80c7 	beq.w	80196b8 <RadioSetTxConfig+0x1ac>
 801952a:	2b04      	cmp	r3, #4
 801952c:	f300 80d6 	bgt.w	80196dc <RadioSetTxConfig+0x1d0>
 8019530:	2b00      	cmp	r3, #0
 8019532:	d002      	beq.n	801953a <RadioSetTxConfig+0x2e>
 8019534:	2b01      	cmp	r3, #1
 8019536:	d059      	beq.n	80195ec <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019538:	e0d0      	b.n	80196dc <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801953a:	4b74      	ldr	r3, [pc, #464]	; (801970c <RadioSetTxConfig+0x200>)
 801953c:	2200      	movs	r2, #0
 801953e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8019542:	4a72      	ldr	r2, [pc, #456]	; (801970c <RadioSetTxConfig+0x200>)
 8019544:	6a3b      	ldr	r3, [r7, #32]
 8019546:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8019548:	4b70      	ldr	r3, [pc, #448]	; (801970c <RadioSetTxConfig+0x200>)
 801954a:	220b      	movs	r2, #11
 801954c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f002 fd47 	bl	801bfe4 <SUBGRF_GetFskBandwidthRegValue>
 8019556:	4603      	mov	r3, r0
 8019558:	461a      	mov	r2, r3
 801955a:	4b6c      	ldr	r3, [pc, #432]	; (801970c <RadioSetTxConfig+0x200>)
 801955c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8019560:	4a6a      	ldr	r2, [pc, #424]	; (801970c <RadioSetTxConfig+0x200>)
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019566:	4b69      	ldr	r3, [pc, #420]	; (801970c <RadioSetTxConfig+0x200>)
 8019568:	2200      	movs	r2, #0
 801956a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801956c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801956e:	00db      	lsls	r3, r3, #3
 8019570:	b29a      	uxth	r2, r3
 8019572:	4b66      	ldr	r3, [pc, #408]	; (801970c <RadioSetTxConfig+0x200>)
 8019574:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8019576:	4b65      	ldr	r3, [pc, #404]	; (801970c <RadioSetTxConfig+0x200>)
 8019578:	2204      	movs	r2, #4
 801957a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801957c:	4b63      	ldr	r3, [pc, #396]	; (801970c <RadioSetTxConfig+0x200>)
 801957e:	2218      	movs	r2, #24
 8019580:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8019582:	4b62      	ldr	r3, [pc, #392]	; (801970c <RadioSetTxConfig+0x200>)
 8019584:	2200      	movs	r2, #0
 8019586:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8019588:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801958c:	f083 0301 	eor.w	r3, r3, #1
 8019590:	b2db      	uxtb	r3, r3
 8019592:	461a      	mov	r2, r3
 8019594:	4b5d      	ldr	r3, [pc, #372]	; (801970c <RadioSetTxConfig+0x200>)
 8019596:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8019598:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801959c:	2b00      	cmp	r3, #0
 801959e:	d003      	beq.n	80195a8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80195a0:	4b5a      	ldr	r3, [pc, #360]	; (801970c <RadioSetTxConfig+0x200>)
 80195a2:	22f2      	movs	r2, #242	; 0xf2
 80195a4:	75da      	strb	r2, [r3, #23]
 80195a6:	e002      	b.n	80195ae <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80195a8:	4b58      	ldr	r3, [pc, #352]	; (801970c <RadioSetTxConfig+0x200>)
 80195aa:	2201      	movs	r2, #1
 80195ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80195ae:	4b57      	ldr	r3, [pc, #348]	; (801970c <RadioSetTxConfig+0x200>)
 80195b0:	2201      	movs	r2, #1
 80195b2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80195b4:	f000 fb29 	bl	8019c0a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80195b8:	2000      	movs	r0, #0
 80195ba:	f7ff fcd3 	bl	8018f64 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195be:	4854      	ldr	r0, [pc, #336]	; (8019710 <RadioSetTxConfig+0x204>)
 80195c0:	f002 f8ec 	bl	801b79c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195c4:	4853      	ldr	r0, [pc, #332]	; (8019714 <RadioSetTxConfig+0x208>)
 80195c6:	f002 f9bb 	bl	801b940 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80195ca:	4a53      	ldr	r2, [pc, #332]	; (8019718 <RadioSetTxConfig+0x20c>)
 80195cc:	f107 0310 	add.w	r3, r7, #16
 80195d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80195d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80195d8:	f107 0310 	add.w	r3, r7, #16
 80195dc:	4618      	mov	r0, r3
 80195de:	f001 fc7c 	bl	801aeda <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80195e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80195e6:	f001 fcc7 	bl	801af78 <SUBGRF_SetWhiteningSeed>
            break;
 80195ea:	e078      	b.n	80196de <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80195ec:	4b47      	ldr	r3, [pc, #284]	; (801970c <RadioSetTxConfig+0x200>)
 80195ee:	2201      	movs	r2, #1
 80195f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80195f4:	6a3b      	ldr	r3, [r7, #32]
 80195f6:	b2da      	uxtb	r2, r3
 80195f8:	4b44      	ldr	r3, [pc, #272]	; (801970c <RadioSetTxConfig+0x200>)
 80195fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80195fe:	4a47      	ldr	r2, [pc, #284]	; (801971c <RadioSetTxConfig+0x210>)
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	4413      	add	r3, r2
 8019604:	781a      	ldrb	r2, [r3, #0]
 8019606:	4b41      	ldr	r3, [pc, #260]	; (801970c <RadioSetTxConfig+0x200>)
 8019608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801960c:	4a3f      	ldr	r2, [pc, #252]	; (801970c <RadioSetTxConfig+0x200>)
 801960e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019612:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019616:	687b      	ldr	r3, [r7, #4]
 8019618:	2b00      	cmp	r3, #0
 801961a:	d105      	bne.n	8019628 <RadioSetTxConfig+0x11c>
 801961c:	6a3b      	ldr	r3, [r7, #32]
 801961e:	2b0b      	cmp	r3, #11
 8019620:	d008      	beq.n	8019634 <RadioSetTxConfig+0x128>
 8019622:	6a3b      	ldr	r3, [r7, #32]
 8019624:	2b0c      	cmp	r3, #12
 8019626:	d005      	beq.n	8019634 <RadioSetTxConfig+0x128>
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	2b01      	cmp	r3, #1
 801962c:	d107      	bne.n	801963e <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	2b0c      	cmp	r3, #12
 8019632:	d104      	bne.n	801963e <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8019634:	4b35      	ldr	r3, [pc, #212]	; (801970c <RadioSetTxConfig+0x200>)
 8019636:	2201      	movs	r2, #1
 8019638:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801963c:	e003      	b.n	8019646 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801963e:	4b33      	ldr	r3, [pc, #204]	; (801970c <RadioSetTxConfig+0x200>)
 8019640:	2200      	movs	r2, #0
 8019642:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019646:	4b31      	ldr	r3, [pc, #196]	; (801970c <RadioSetTxConfig+0x200>)
 8019648:	2201      	movs	r2, #1
 801964a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801964c:	4b2f      	ldr	r3, [pc, #188]	; (801970c <RadioSetTxConfig+0x200>)
 801964e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019652:	2b05      	cmp	r3, #5
 8019654:	d004      	beq.n	8019660 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8019656:	4b2d      	ldr	r3, [pc, #180]	; (801970c <RadioSetTxConfig+0x200>)
 8019658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801965c:	2b06      	cmp	r3, #6
 801965e:	d10a      	bne.n	8019676 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8019660:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019662:	2b0b      	cmp	r3, #11
 8019664:	d803      	bhi.n	801966e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8019666:	4b29      	ldr	r3, [pc, #164]	; (801970c <RadioSetTxConfig+0x200>)
 8019668:	220c      	movs	r2, #12
 801966a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801966c:	e006      	b.n	801967c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801966e:	4a27      	ldr	r2, [pc, #156]	; (801970c <RadioSetTxConfig+0x200>)
 8019670:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019672:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8019674:	e002      	b.n	801967c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8019676:	4a25      	ldr	r2, [pc, #148]	; (801970c <RadioSetTxConfig+0x200>)
 8019678:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801967a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801967c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019680:	4b22      	ldr	r3, [pc, #136]	; (801970c <RadioSetTxConfig+0x200>)
 8019682:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019684:	4b26      	ldr	r3, [pc, #152]	; (8019720 <RadioSetTxConfig+0x214>)
 8019686:	781a      	ldrb	r2, [r3, #0]
 8019688:	4b20      	ldr	r3, [pc, #128]	; (801970c <RadioSetTxConfig+0x200>)
 801968a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801968c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8019690:	4b1e      	ldr	r3, [pc, #120]	; (801970c <RadioSetTxConfig+0x200>)
 8019692:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8019696:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801969a:	4b1c      	ldr	r3, [pc, #112]	; (801970c <RadioSetTxConfig+0x200>)
 801969c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80196a0:	f000 fab3 	bl	8019c0a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80196a4:	2001      	movs	r0, #1
 80196a6:	f7ff fc5d 	bl	8018f64 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196aa:	4819      	ldr	r0, [pc, #100]	; (8019710 <RadioSetTxConfig+0x204>)
 80196ac:	f002 f876 	bl	801b79c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80196b0:	4818      	ldr	r0, [pc, #96]	; (8019714 <RadioSetTxConfig+0x208>)
 80196b2:	f002 f945 	bl	801b940 <SUBGRF_SetPacketParams>
            break;
 80196b6:	e012      	b.n	80196de <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80196b8:	2004      	movs	r0, #4
 80196ba:	f7ff fc53 	bl	8018f64 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80196be:	4b13      	ldr	r3, [pc, #76]	; (801970c <RadioSetTxConfig+0x200>)
 80196c0:	2202      	movs	r2, #2
 80196c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80196c6:	4a11      	ldr	r2, [pc, #68]	; (801970c <RadioSetTxConfig+0x200>)
 80196c8:	6a3b      	ldr	r3, [r7, #32]
 80196ca:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80196cc:	4b0f      	ldr	r3, [pc, #60]	; (801970c <RadioSetTxConfig+0x200>)
 80196ce:	2216      	movs	r2, #22
 80196d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196d4:	480e      	ldr	r0, [pc, #56]	; (8019710 <RadioSetTxConfig+0x204>)
 80196d6:	f002 f861 	bl	801b79c <SUBGRF_SetModulationParams>
            break;
 80196da:	e000      	b.n	80196de <RadioSetTxConfig+0x1d2>
            break;
 80196dc:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80196de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80196e2:	4618      	mov	r0, r3
 80196e4:	f002 fb90 	bl	801be08 <SUBGRF_SetRfTxPower>
 80196e8:	4603      	mov	r3, r0
 80196ea:	461a      	mov	r2, r3
 80196ec:	4b07      	ldr	r3, [pc, #28]	; (801970c <RadioSetTxConfig+0x200>)
 80196ee:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80196f2:	4b06      	ldr	r3, [pc, #24]	; (801970c <RadioSetTxConfig+0x200>)
 80196f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80196f8:	4618      	mov	r0, r3
 80196fa:	f002 fd54 	bl	801c1a6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80196fe:	4a03      	ldr	r2, [pc, #12]	; (801970c <RadioSetTxConfig+0x200>)
 8019700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019702:	6053      	str	r3, [r2, #4]
}
 8019704:	bf00      	nop
 8019706:	3718      	adds	r7, #24
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	20001bb4 	.word	0x20001bb4
 8019710:	20001bec 	.word	0x20001bec
 8019714:	20001bc2 	.word	0x20001bc2
 8019718:	0801e91c 	.word	0x0801e91c
 801971c:	0801ef7c 	.word	0x0801ef7c
 8019720:	20000144 	.word	0x20000144

08019724 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8019724:	b480      	push	{r7}
 8019726:	b083      	sub	sp, #12
 8019728:	af00      	add	r7, sp, #0
 801972a:	6078      	str	r0, [r7, #4]
    return true;
 801972c:	2301      	movs	r3, #1
}
 801972e:	4618      	mov	r0, r3
 8019730:	370c      	adds	r7, #12
 8019732:	46bd      	mov	sp, r7
 8019734:	bc80      	pop	{r7}
 8019736:	4770      	bx	lr

08019738 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8019738:	b480      	push	{r7}
 801973a:	b085      	sub	sp, #20
 801973c:	af00      	add	r7, sp, #0
 801973e:	4603      	mov	r3, r0
 8019740:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8019742:	2300      	movs	r3, #0
 8019744:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8019746:	79fb      	ldrb	r3, [r7, #7]
 8019748:	2b0a      	cmp	r3, #10
 801974a:	d83e      	bhi.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
 801974c:	a201      	add	r2, pc, #4	; (adr r2, 8019754 <RadioGetLoRaBandwidthInHz+0x1c>)
 801974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019752:	bf00      	nop
 8019754:	08019781 	.word	0x08019781
 8019758:	08019791 	.word	0x08019791
 801975c:	080197a1 	.word	0x080197a1
 8019760:	080197b1 	.word	0x080197b1
 8019764:	080197b9 	.word	0x080197b9
 8019768:	080197bf 	.word	0x080197bf
 801976c:	080197c5 	.word	0x080197c5
 8019770:	080197cb 	.word	0x080197cb
 8019774:	08019789 	.word	0x08019789
 8019778:	08019799 	.word	0x08019799
 801977c:	080197a9 	.word	0x080197a9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8019780:	f641 6384 	movw	r3, #7812	; 0x1e84
 8019784:	60fb      	str	r3, [r7, #12]
        break;
 8019786:	e020      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8019788:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801978c:	60fb      	str	r3, [r7, #12]
        break;
 801978e:	e01c      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8019790:	f643 5309 	movw	r3, #15625	; 0x3d09
 8019794:	60fb      	str	r3, [r7, #12]
        break;
 8019796:	e018      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8019798:	f245 1361 	movw	r3, #20833	; 0x5161
 801979c:	60fb      	str	r3, [r7, #12]
        break;
 801979e:	e014      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80197a0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80197a4:	60fb      	str	r3, [r7, #12]
        break;
 80197a6:	e010      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80197a8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80197ac:	60fb      	str	r3, [r7, #12]
        break;
 80197ae:	e00c      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80197b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80197b4:	60fb      	str	r3, [r7, #12]
        break;
 80197b6:	e008      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80197b8:	4b07      	ldr	r3, [pc, #28]	; (80197d8 <RadioGetLoRaBandwidthInHz+0xa0>)
 80197ba:	60fb      	str	r3, [r7, #12]
        break;
 80197bc:	e005      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80197be:	4b07      	ldr	r3, [pc, #28]	; (80197dc <RadioGetLoRaBandwidthInHz+0xa4>)
 80197c0:	60fb      	str	r3, [r7, #12]
        break;
 80197c2:	e002      	b.n	80197ca <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80197c4:	4b06      	ldr	r3, [pc, #24]	; (80197e0 <RadioGetLoRaBandwidthInHz+0xa8>)
 80197c6:	60fb      	str	r3, [r7, #12]
        break;
 80197c8:	bf00      	nop
    }

    return bandwidthInHz;
 80197ca:	68fb      	ldr	r3, [r7, #12]
}
 80197cc:	4618      	mov	r0, r3
 80197ce:	3714      	adds	r7, #20
 80197d0:	46bd      	mov	sp, r7
 80197d2:	bc80      	pop	{r7}
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop
 80197d8:	0001e848 	.word	0x0001e848
 80197dc:	0003d090 	.word	0x0003d090
 80197e0:	0007a120 	.word	0x0007a120

080197e4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80197e4:	b480      	push	{r7}
 80197e6:	b083      	sub	sp, #12
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	4608      	mov	r0, r1
 80197ee:	4611      	mov	r1, r2
 80197f0:	461a      	mov	r2, r3
 80197f2:	4603      	mov	r3, r0
 80197f4:	70fb      	strb	r3, [r7, #3]
 80197f6:	460b      	mov	r3, r1
 80197f8:	803b      	strh	r3, [r7, #0]
 80197fa:	4613      	mov	r3, r2
 80197fc:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 80197fe:	883b      	ldrh	r3, [r7, #0]
 8019800:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019802:	78ba      	ldrb	r2, [r7, #2]
 8019804:	f082 0201 	eor.w	r2, r2, #1
 8019808:	b2d2      	uxtb	r2, r2
 801980a:	2a00      	cmp	r2, #0
 801980c:	d001      	beq.n	8019812 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801980e:	2208      	movs	r2, #8
 8019810:	e000      	b.n	8019814 <RadioGetGfskTimeOnAirNumerator+0x30>
 8019812:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8019814:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8019816:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801981a:	7c3b      	ldrb	r3, [r7, #16]
 801981c:	7d39      	ldrb	r1, [r7, #20]
 801981e:	2900      	cmp	r1, #0
 8019820:	d001      	beq.n	8019826 <RadioGetGfskTimeOnAirNumerator+0x42>
 8019822:	2102      	movs	r1, #2
 8019824:	e000      	b.n	8019828 <RadioGetGfskTimeOnAirNumerator+0x44>
 8019826:	2100      	movs	r1, #0
 8019828:	440b      	add	r3, r1
 801982a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801982c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801982e:	4618      	mov	r0, r3
 8019830:	370c      	adds	r7, #12
 8019832:	46bd      	mov	sp, r7
 8019834:	bc80      	pop	{r7}
 8019836:	4770      	bx	lr

08019838 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8019838:	b480      	push	{r7}
 801983a:	b08b      	sub	sp, #44	; 0x2c
 801983c:	af00      	add	r7, sp, #0
 801983e:	60f8      	str	r0, [r7, #12]
 8019840:	60b9      	str	r1, [r7, #8]
 8019842:	4611      	mov	r1, r2
 8019844:	461a      	mov	r2, r3
 8019846:	460b      	mov	r3, r1
 8019848:	71fb      	strb	r3, [r7, #7]
 801984a:	4613      	mov	r3, r2
 801984c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801984e:	79fb      	ldrb	r3, [r7, #7]
 8019850:	3304      	adds	r3, #4
 8019852:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8019854:	2300      	movs	r3, #0
 8019856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801985a:	68bb      	ldr	r3, [r7, #8]
 801985c:	2b05      	cmp	r3, #5
 801985e:	d002      	beq.n	8019866 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8019860:	68bb      	ldr	r3, [r7, #8]
 8019862:	2b06      	cmp	r3, #6
 8019864:	d104      	bne.n	8019870 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8019866:	88bb      	ldrh	r3, [r7, #4]
 8019868:	2b0b      	cmp	r3, #11
 801986a:	d801      	bhi.n	8019870 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801986c:	230c      	movs	r3, #12
 801986e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d105      	bne.n	8019882 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	2b0b      	cmp	r3, #11
 801987a:	d008      	beq.n	801988e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801987c:	68bb      	ldr	r3, [r7, #8]
 801987e:	2b0c      	cmp	r3, #12
 8019880:	d005      	beq.n	801988e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	2b01      	cmp	r3, #1
 8019886:	d105      	bne.n	8019894 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8019888:	68bb      	ldr	r3, [r7, #8]
 801988a:	2b0c      	cmp	r3, #12
 801988c:	d102      	bne.n	8019894 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801988e:	2301      	movs	r3, #1
 8019890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8019894:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8019898:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801989a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801989e:	2a00      	cmp	r2, #0
 80198a0:	d001      	beq.n	80198a6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80198a2:	2210      	movs	r2, #16
 80198a4:	e000      	b.n	80198a8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80198a6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80198a8:	4413      	add	r3, r2
 80198aa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80198ac:	68bb      	ldr	r3, [r7, #8]
 80198ae:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80198b0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80198b2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80198b6:	2a00      	cmp	r2, #0
 80198b8:	d001      	beq.n	80198be <RadioGetLoRaTimeOnAirNumerator+0x86>
 80198ba:	2200      	movs	r2, #0
 80198bc:	e000      	b.n	80198c0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80198be:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80198c0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80198c2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	2b06      	cmp	r3, #6
 80198c8:	d803      	bhi.n	80198d2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	009b      	lsls	r3, r3, #2
 80198ce:	623b      	str	r3, [r7, #32]
 80198d0:	e00e      	b.n	80198f0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80198d2:	69fb      	ldr	r3, [r7, #28]
 80198d4:	3308      	adds	r3, #8
 80198d6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80198d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d004      	beq.n	80198ea <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80198e0:	68bb      	ldr	r3, [r7, #8]
 80198e2:	3b02      	subs	r3, #2
 80198e4:	009b      	lsls	r3, r3, #2
 80198e6:	623b      	str	r3, [r7, #32]
 80198e8:	e002      	b.n	80198f0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80198ea:	68bb      	ldr	r3, [r7, #8]
 80198ec:	009b      	lsls	r3, r3, #2
 80198ee:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80198f0:	69fb      	ldr	r3, [r7, #28]
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	da01      	bge.n	80198fa <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80198f6:	2300      	movs	r3, #0
 80198f8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80198fa:	69fa      	ldr	r2, [r7, #28]
 80198fc:	6a3b      	ldr	r3, [r7, #32]
 80198fe:	4413      	add	r3, r2
 8019900:	1e5a      	subs	r2, r3, #1
 8019902:	6a3b      	ldr	r3, [r7, #32]
 8019904:	fb92 f3f3 	sdiv	r3, r2, r3
 8019908:	697a      	ldr	r2, [r7, #20]
 801990a:	fb03 f202 	mul.w	r2, r3, r2
 801990e:	88bb      	ldrh	r3, [r7, #4]
 8019910:	4413      	add	r3, r2
    int32_t intermediate =
 8019912:	330c      	adds	r3, #12
 8019914:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8019916:	68bb      	ldr	r3, [r7, #8]
 8019918:	2b06      	cmp	r3, #6
 801991a:	d802      	bhi.n	8019922 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801991c:	69bb      	ldr	r3, [r7, #24]
 801991e:	3302      	adds	r3, #2
 8019920:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8019922:	69bb      	ldr	r3, [r7, #24]
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	1c5a      	adds	r2, r3, #1
 8019928:	68bb      	ldr	r3, [r7, #8]
 801992a:	3b02      	subs	r3, #2
 801992c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8019930:	4618      	mov	r0, r3
 8019932:	372c      	adds	r7, #44	; 0x2c
 8019934:	46bd      	mov	sp, r7
 8019936:	bc80      	pop	{r7}
 8019938:	4770      	bx	lr
	...

0801993c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801993c:	b580      	push	{r7, lr}
 801993e:	b08a      	sub	sp, #40	; 0x28
 8019940:	af04      	add	r7, sp, #16
 8019942:	60b9      	str	r1, [r7, #8]
 8019944:	607a      	str	r2, [r7, #4]
 8019946:	461a      	mov	r2, r3
 8019948:	4603      	mov	r3, r0
 801994a:	73fb      	strb	r3, [r7, #15]
 801994c:	4613      	mov	r3, r2
 801994e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8019950:	2300      	movs	r3, #0
 8019952:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8019954:	2301      	movs	r3, #1
 8019956:	613b      	str	r3, [r7, #16]

    switch( modem )
 8019958:	7bfb      	ldrb	r3, [r7, #15]
 801995a:	2b00      	cmp	r3, #0
 801995c:	d002      	beq.n	8019964 <RadioTimeOnAir+0x28>
 801995e:	2b01      	cmp	r3, #1
 8019960:	d017      	beq.n	8019992 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8019962:	e035      	b.n	80199d0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8019964:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8019968:	8c3a      	ldrh	r2, [r7, #32]
 801996a:	7bb9      	ldrb	r1, [r7, #14]
 801996c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019970:	9301      	str	r3, [sp, #4]
 8019972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019976:	9300      	str	r3, [sp, #0]
 8019978:	4603      	mov	r3, r0
 801997a:	6878      	ldr	r0, [r7, #4]
 801997c:	f7ff ff32 	bl	80197e4 <RadioGetGfskTimeOnAirNumerator>
 8019980:	4603      	mov	r3, r0
 8019982:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019986:	fb02 f303 	mul.w	r3, r2, r3
 801998a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	613b      	str	r3, [r7, #16]
        break;
 8019990:	e01e      	b.n	80199d0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8019992:	8c39      	ldrh	r1, [r7, #32]
 8019994:	7bba      	ldrb	r2, [r7, #14]
 8019996:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801999a:	9302      	str	r3, [sp, #8]
 801999c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80199a0:	9301      	str	r3, [sp, #4]
 80199a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80199a6:	9300      	str	r3, [sp, #0]
 80199a8:	460b      	mov	r3, r1
 80199aa:	6879      	ldr	r1, [r7, #4]
 80199ac:	68b8      	ldr	r0, [r7, #8]
 80199ae:	f7ff ff43 	bl	8019838 <RadioGetLoRaTimeOnAirNumerator>
 80199b2:	4603      	mov	r3, r0
 80199b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80199b8:	fb02 f303 	mul.w	r3, r2, r3
 80199bc:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80199be:	4a0a      	ldr	r2, [pc, #40]	; (80199e8 <RadioTimeOnAir+0xac>)
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	4413      	add	r3, r2
 80199c4:	781b      	ldrb	r3, [r3, #0]
 80199c6:	4618      	mov	r0, r3
 80199c8:	f7ff feb6 	bl	8019738 <RadioGetLoRaBandwidthInHz>
 80199cc:	6138      	str	r0, [r7, #16]
        break;
 80199ce:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80199d0:	697a      	ldr	r2, [r7, #20]
 80199d2:	693b      	ldr	r3, [r7, #16]
 80199d4:	4413      	add	r3, r2
 80199d6:	1e5a      	subs	r2, r3, #1
 80199d8:	693b      	ldr	r3, [r7, #16]
 80199da:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80199de:	4618      	mov	r0, r3
 80199e0:	3718      	adds	r7, #24
 80199e2:	46bd      	mov	sp, r7
 80199e4:	bd80      	pop	{r7, pc}
 80199e6:	bf00      	nop
 80199e8:	0801ef7c 	.word	0x0801ef7c

080199ec <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
 80199f4:	460b      	mov	r3, r1
 80199f6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80199f8:	2300      	movs	r3, #0
 80199fa:	2200      	movs	r2, #0
 80199fc:	f240 2101 	movw	r1, #513	; 0x201
 8019a00:	f240 2001 	movw	r0, #513	; 0x201
 8019a04:	f001 fd34 	bl	801b470 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019a08:	4b71      	ldr	r3, [pc, #452]	; (8019bd0 <RadioSend+0x1e4>)
 8019a0a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019a0e:	2101      	movs	r1, #1
 8019a10:	4618      	mov	r0, r3
 8019a12:	f002 f9d1 	bl	801bdb8 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8019a16:	4b6e      	ldr	r3, [pc, #440]	; (8019bd0 <RadioSend+0x1e4>)
 8019a18:	781b      	ldrb	r3, [r3, #0]
 8019a1a:	2b01      	cmp	r3, #1
 8019a1c:	d112      	bne.n	8019a44 <RadioSend+0x58>
 8019a1e:	4b6c      	ldr	r3, [pc, #432]	; (8019bd0 <RadioSend+0x1e4>)
 8019a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019a24:	2b06      	cmp	r3, #6
 8019a26:	d10d      	bne.n	8019a44 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019a28:	f640 0089 	movw	r0, #2185	; 0x889
 8019a2c:	f002 f8e4 	bl	801bbf8 <SUBGRF_ReadRegister>
 8019a30:	4603      	mov	r3, r0
 8019a32:	f023 0304 	bic.w	r3, r3, #4
 8019a36:	b2db      	uxtb	r3, r3
 8019a38:	4619      	mov	r1, r3
 8019a3a:	f640 0089 	movw	r0, #2185	; 0x889
 8019a3e:	f002 f8c7 	bl	801bbd0 <SUBGRF_WriteRegister>
 8019a42:	e00c      	b.n	8019a5e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019a44:	f640 0089 	movw	r0, #2185	; 0x889
 8019a48:	f002 f8d6 	bl	801bbf8 <SUBGRF_ReadRegister>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	f043 0304 	orr.w	r3, r3, #4
 8019a52:	b2db      	uxtb	r3, r3
 8019a54:	4619      	mov	r1, r3
 8019a56:	f640 0089 	movw	r0, #2185	; 0x889
 8019a5a:	f002 f8b9 	bl	801bbd0 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8019a5e:	4b5c      	ldr	r3, [pc, #368]	; (8019bd0 <RadioSend+0x1e4>)
 8019a60:	781b      	ldrb	r3, [r3, #0]
 8019a62:	2b04      	cmp	r3, #4
 8019a64:	f200 80a7 	bhi.w	8019bb6 <RadioSend+0x1ca>
 8019a68:	a201      	add	r2, pc, #4	; (adr r2, 8019a70 <RadioSend+0x84>)
 8019a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a6e:	bf00      	nop
 8019a70:	08019a9f 	.word	0x08019a9f
 8019a74:	08019a85 	.word	0x08019a85
 8019a78:	08019a9f 	.word	0x08019a9f
 8019a7c:	08019aff 	.word	0x08019aff
 8019a80:	08019b1f 	.word	0x08019b1f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8019a84:	4a52      	ldr	r2, [pc, #328]	; (8019bd0 <RadioSend+0x1e4>)
 8019a86:	78fb      	ldrb	r3, [r7, #3]
 8019a88:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a8a:	4852      	ldr	r0, [pc, #328]	; (8019bd4 <RadioSend+0x1e8>)
 8019a8c:	f001 ff58 	bl	801b940 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019a90:	78fb      	ldrb	r3, [r7, #3]
 8019a92:	2200      	movs	r2, #0
 8019a94:	4619      	mov	r1, r3
 8019a96:	6878      	ldr	r0, [r7, #4]
 8019a98:	f001 fa0c 	bl	801aeb4 <SUBGRF_SendPayload>
            break;
 8019a9c:	e08c      	b.n	8019bb8 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8019a9e:	f002 fb74 	bl	801c18a <RFW_Is_Init>
 8019aa2:	4603      	mov	r3, r0
 8019aa4:	2b01      	cmp	r3, #1
 8019aa6:	d11d      	bne.n	8019ae4 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8019aa8:	f107 020d 	add.w	r2, r7, #13
 8019aac:	78fb      	ldrb	r3, [r7, #3]
 8019aae:	4619      	mov	r1, r3
 8019ab0:	6878      	ldr	r0, [r7, #4]
 8019ab2:	f002 fb82 	bl	801c1ba <RFW_TransmitInit>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d10c      	bne.n	8019ad6 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8019abc:	7b7a      	ldrb	r2, [r7, #13]
 8019abe:	4b44      	ldr	r3, [pc, #272]	; (8019bd0 <RadioSend+0x1e4>)
 8019ac0:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ac2:	4844      	ldr	r0, [pc, #272]	; (8019bd4 <RadioSend+0x1e8>)
 8019ac4:	f001 ff3c 	bl	801b940 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8019ac8:	7b7b      	ldrb	r3, [r7, #13]
 8019aca:	2200      	movs	r2, #0
 8019acc:	4619      	mov	r1, r3
 8019ace:	6878      	ldr	r0, [r7, #4]
 8019ad0:	f001 f9f0 	bl	801aeb4 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8019ad4:	e070      	b.n	8019bb8 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8019ad6:	4b40      	ldr	r3, [pc, #256]	; (8019bd8 <RadioSend+0x1ec>)
 8019ad8:	2201      	movs	r2, #1
 8019ada:	2100      	movs	r1, #0
 8019adc:	2002      	movs	r0, #2
 8019ade:	f003 fb53 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
 8019ae2:	e072      	b.n	8019bca <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8019ae4:	4a3a      	ldr	r2, [pc, #232]	; (8019bd0 <RadioSend+0x1e4>)
 8019ae6:	78fb      	ldrb	r3, [r7, #3]
 8019ae8:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019aea:	483a      	ldr	r0, [pc, #232]	; (8019bd4 <RadioSend+0x1e8>)
 8019aec:	f001 ff28 	bl	801b940 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8019af0:	78fb      	ldrb	r3, [r7, #3]
 8019af2:	2200      	movs	r2, #0
 8019af4:	4619      	mov	r1, r3
 8019af6:	6878      	ldr	r0, [r7, #4]
 8019af8:	f001 f9dc 	bl	801aeb4 <SUBGRF_SendPayload>
            break;
 8019afc:	e05c      	b.n	8019bb8 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019afe:	4b34      	ldr	r3, [pc, #208]	; (8019bd0 <RadioSend+0x1e4>)
 8019b00:	2202      	movs	r2, #2
 8019b02:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8019b04:	4a32      	ldr	r2, [pc, #200]	; (8019bd0 <RadioSend+0x1e4>)
 8019b06:	78fb      	ldrb	r3, [r7, #3]
 8019b08:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b0a:	4832      	ldr	r0, [pc, #200]	; (8019bd4 <RadioSend+0x1e8>)
 8019b0c:	f001 ff18 	bl	801b940 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8019b10:	78fb      	ldrb	r3, [r7, #3]
 8019b12:	2200      	movs	r2, #0
 8019b14:	4619      	mov	r1, r3
 8019b16:	6878      	ldr	r0, [r7, #4]
 8019b18:	f001 f9cc 	bl	801aeb4 <SUBGRF_SendPayload>
            break;
 8019b1c:	e04c      	b.n	8019bb8 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8019b1e:	78fb      	ldrb	r3, [r7, #3]
 8019b20:	461a      	mov	r2, r3
 8019b22:	6879      	ldr	r1, [r7, #4]
 8019b24:	482d      	ldr	r0, [pc, #180]	; (8019bdc <RadioSend+0x1f0>)
 8019b26:	f000 fcbc 	bl	801a4a2 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8019b2a:	4b29      	ldr	r3, [pc, #164]	; (8019bd0 <RadioSend+0x1e4>)
 8019b2c:	2202      	movs	r2, #2
 8019b2e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8019b30:	78fb      	ldrb	r3, [r7, #3]
 8019b32:	3301      	adds	r3, #1
 8019b34:	b2da      	uxtb	r2, r3
 8019b36:	4b26      	ldr	r3, [pc, #152]	; (8019bd0 <RadioSend+0x1e4>)
 8019b38:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b3a:	4826      	ldr	r0, [pc, #152]	; (8019bd4 <RadioSend+0x1e8>)
 8019b3c:	f001 ff00 	bl	801b940 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019b40:	2100      	movs	r1, #0
 8019b42:	20f1      	movs	r0, #241	; 0xf1
 8019b44:	f000 f95d 	bl	8019e02 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019b48:	2100      	movs	r1, #0
 8019b4a:	20f0      	movs	r0, #240	; 0xf0
 8019b4c:	f000 f959 	bl	8019e02 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019b50:	4b1f      	ldr	r3, [pc, #124]	; (8019bd0 <RadioSend+0x1e4>)
 8019b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b54:	2b64      	cmp	r3, #100	; 0x64
 8019b56:	d108      	bne.n	8019b6a <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019b58:	2170      	movs	r1, #112	; 0x70
 8019b5a:	20f3      	movs	r0, #243	; 0xf3
 8019b5c:	f000 f951 	bl	8019e02 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019b60:	211d      	movs	r1, #29
 8019b62:	20f2      	movs	r0, #242	; 0xf2
 8019b64:	f000 f94d 	bl	8019e02 <RadioWrite>
 8019b68:	e007      	b.n	8019b7a <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8019b6a:	21e1      	movs	r1, #225	; 0xe1
 8019b6c:	20f3      	movs	r0, #243	; 0xf3
 8019b6e:	f000 f948 	bl	8019e02 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019b72:	2104      	movs	r1, #4
 8019b74:	20f2      	movs	r0, #242	; 0xf2
 8019b76:	f000 f944 	bl	8019e02 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8019b7a:	78fb      	ldrb	r3, [r7, #3]
 8019b7c:	b29b      	uxth	r3, r3
 8019b7e:	00db      	lsls	r3, r3, #3
 8019b80:	b29b      	uxth	r3, r3
 8019b82:	3302      	adds	r3, #2
 8019b84:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019b86:	89fb      	ldrh	r3, [r7, #14]
 8019b88:	0a1b      	lsrs	r3, r3, #8
 8019b8a:	b29b      	uxth	r3, r3
 8019b8c:	b2db      	uxtb	r3, r3
 8019b8e:	4619      	mov	r1, r3
 8019b90:	20f4      	movs	r0, #244	; 0xf4
 8019b92:	f000 f936 	bl	8019e02 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019b96:	89fb      	ldrh	r3, [r7, #14]
 8019b98:	b2db      	uxtb	r3, r3
 8019b9a:	4619      	mov	r1, r3
 8019b9c:	20f5      	movs	r0, #245	; 0xf5
 8019b9e:	f000 f930 	bl	8019e02 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019ba2:	78fb      	ldrb	r3, [r7, #3]
 8019ba4:	3301      	adds	r3, #1
 8019ba6:	b2db      	uxtb	r3, r3
 8019ba8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8019bac:	4619      	mov	r1, r3
 8019bae:	480b      	ldr	r0, [pc, #44]	; (8019bdc <RadioSend+0x1f0>)
 8019bb0:	f001 f980 	bl	801aeb4 <SUBGRF_SendPayload>
            break;
 8019bb4:	e000      	b.n	8019bb8 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019bb6:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019bb8:	4b05      	ldr	r3, [pc, #20]	; (8019bd0 <RadioSend+0x1e4>)
 8019bba:	685b      	ldr	r3, [r3, #4]
 8019bbc:	4619      	mov	r1, r3
 8019bbe:	4808      	ldr	r0, [pc, #32]	; (8019be0 <RadioSend+0x1f4>)
 8019bc0:	f003 f948 	bl	801ce54 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019bc4:	4806      	ldr	r0, [pc, #24]	; (8019be0 <RadioSend+0x1f4>)
 8019bc6:	f003 f867 	bl	801cc98 <UTIL_TIMER_Start>
}
 8019bca:	3710      	adds	r7, #16
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	bd80      	pop	{r7, pc}
 8019bd0:	20001bb4 	.word	0x20001bb4
 8019bd4:	20001bc2 	.word	0x20001bc2
 8019bd8:	0801e924 	.word	0x0801e924
 8019bdc:	20001ab0 	.word	0x20001ab0
 8019be0:	20001c10 	.word	0x20001c10

08019be4 <RadioSleep>:

static void RadioSleep( void )
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b082      	sub	sp, #8
 8019be8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8019bea:	2300      	movs	r3, #0
 8019bec:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8019bee:	793b      	ldrb	r3, [r7, #4]
 8019bf0:	f043 0304 	orr.w	r3, r3, #4
 8019bf4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8019bf6:	7938      	ldrb	r0, [r7, #4]
 8019bf8:	f001 fa38 	bl	801b06c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8019bfc:	2002      	movs	r0, #2
 8019bfe:	f7e8 f90d 	bl	8001e1c <HAL_Delay>
}
 8019c02:	bf00      	nop
 8019c04:	3708      	adds	r7, #8
 8019c06:	46bd      	mov	sp, r7
 8019c08:	bd80      	pop	{r7, pc}

08019c0a <RadioStandby>:

static void RadioStandby( void )
{
 8019c0a:	b580      	push	{r7, lr}
 8019c0c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8019c0e:	2000      	movs	r0, #0
 8019c10:	f001 fa5e 	bl	801b0d0 <SUBGRF_SetStandby>
}
 8019c14:	bf00      	nop
 8019c16:	bd80      	pop	{r7, pc}

08019c18 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8019c18:	b580      	push	{r7, lr}
 8019c1a:	b082      	sub	sp, #8
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8019c20:	f002 fab3 	bl	801c18a <RFW_Is_Init>
 8019c24:	4603      	mov	r3, r0
 8019c26:	2b01      	cmp	r3, #1
 8019c28:	d102      	bne.n	8019c30 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8019c2a:	f002 fad6 	bl	801c1da <RFW_ReceiveInit>
 8019c2e:	e007      	b.n	8019c40 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019c30:	2300      	movs	r3, #0
 8019c32:	2200      	movs	r2, #0
 8019c34:	f240 2162 	movw	r1, #610	; 0x262
 8019c38:	f240 2062 	movw	r0, #610	; 0x262
 8019c3c:	f001 fc18 	bl	801b470 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d006      	beq.n	8019c54 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019c46:	6879      	ldr	r1, [r7, #4]
 8019c48:	4811      	ldr	r0, [pc, #68]	; (8019c90 <RadioRx+0x78>)
 8019c4a:	f003 f903 	bl	801ce54 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019c4e:	4810      	ldr	r0, [pc, #64]	; (8019c90 <RadioRx+0x78>)
 8019c50:	f003 f822 	bl	801cc98 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019c54:	4b0f      	ldr	r3, [pc, #60]	; (8019c94 <RadioRx+0x7c>)
 8019c56:	2200      	movs	r2, #0
 8019c58:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019c5a:	4b0e      	ldr	r3, [pc, #56]	; (8019c94 <RadioRx+0x7c>)
 8019c5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c60:	2100      	movs	r1, #0
 8019c62:	4618      	mov	r0, r3
 8019c64:	f002 f8a8 	bl	801bdb8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019c68:	4b0a      	ldr	r3, [pc, #40]	; (8019c94 <RadioRx+0x7c>)
 8019c6a:	785b      	ldrb	r3, [r3, #1]
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d004      	beq.n	8019c7a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019c70:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019c74:	f001 fa68 	bl	801b148 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019c78:	e005      	b.n	8019c86 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8019c7a:	4b06      	ldr	r3, [pc, #24]	; (8019c94 <RadioRx+0x7c>)
 8019c7c:	689b      	ldr	r3, [r3, #8]
 8019c7e:	019b      	lsls	r3, r3, #6
 8019c80:	4618      	mov	r0, r3
 8019c82:	f001 fa61 	bl	801b148 <SUBGRF_SetRx>
}
 8019c86:	bf00      	nop
 8019c88:	3708      	adds	r7, #8
 8019c8a:	46bd      	mov	sp, r7
 8019c8c:	bd80      	pop	{r7, pc}
 8019c8e:	bf00      	nop
 8019c90:	20001c28 	.word	0x20001c28
 8019c94:	20001bb4 	.word	0x20001bb4

08019c98 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b082      	sub	sp, #8
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8019ca0:	f002 fa73 	bl	801c18a <RFW_Is_Init>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	2b01      	cmp	r3, #1
 8019ca8:	d102      	bne.n	8019cb0 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8019caa:	f002 fa96 	bl	801c1da <RFW_ReceiveInit>
 8019cae:	e007      	b.n	8019cc0 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019cb0:	2300      	movs	r3, #0
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	f240 2162 	movw	r1, #610	; 0x262
 8019cb8:	f240 2062 	movw	r0, #610	; 0x262
 8019cbc:	f001 fbd8 	bl	801b470 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	d006      	beq.n	8019cd4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019cc6:	6879      	ldr	r1, [r7, #4]
 8019cc8:	4811      	ldr	r0, [pc, #68]	; (8019d10 <RadioRxBoosted+0x78>)
 8019cca:	f003 f8c3 	bl	801ce54 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8019cce:	4810      	ldr	r0, [pc, #64]	; (8019d10 <RadioRxBoosted+0x78>)
 8019cd0:	f002 ffe2 	bl	801cc98 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019cd4:	4b0f      	ldr	r3, [pc, #60]	; (8019d14 <RadioRxBoosted+0x7c>)
 8019cd6:	2200      	movs	r2, #0
 8019cd8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019cda:	4b0e      	ldr	r3, [pc, #56]	; (8019d14 <RadioRxBoosted+0x7c>)
 8019cdc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019ce0:	2100      	movs	r1, #0
 8019ce2:	4618      	mov	r0, r3
 8019ce4:	f002 f868 	bl	801bdb8 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019ce8:	4b0a      	ldr	r3, [pc, #40]	; (8019d14 <RadioRxBoosted+0x7c>)
 8019cea:	785b      	ldrb	r3, [r3, #1]
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d004      	beq.n	8019cfa <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8019cf0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019cf4:	f001 fa48 	bl	801b188 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8019cf8:	e005      	b.n	8019d06 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8019cfa:	4b06      	ldr	r3, [pc, #24]	; (8019d14 <RadioRxBoosted+0x7c>)
 8019cfc:	689b      	ldr	r3, [r3, #8]
 8019cfe:	019b      	lsls	r3, r3, #6
 8019d00:	4618      	mov	r0, r3
 8019d02:	f001 fa41 	bl	801b188 <SUBGRF_SetRxBoosted>
}
 8019d06:	bf00      	nop
 8019d08:	3708      	adds	r7, #8
 8019d0a:	46bd      	mov	sp, r7
 8019d0c:	bd80      	pop	{r7, pc}
 8019d0e:	bf00      	nop
 8019d10:	20001c28 	.word	0x20001c28
 8019d14:	20001bb4 	.word	0x20001bb4

08019d18 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019d18:	b580      	push	{r7, lr}
 8019d1a:	b082      	sub	sp, #8
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
 8019d20:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	005a      	lsls	r2, r3, #1
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	4413      	add	r3, r2
 8019d2a:	4a0c      	ldr	r2, [pc, #48]	; (8019d5c <RadioSetRxDutyCycle+0x44>)
 8019d2c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019d2e:	2300      	movs	r3, #0
 8019d30:	2200      	movs	r2, #0
 8019d32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019d3a:	f001 fb99 	bl	801b470 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019d3e:	4b07      	ldr	r3, [pc, #28]	; (8019d5c <RadioSetRxDutyCycle+0x44>)
 8019d40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019d44:	2100      	movs	r1, #0
 8019d46:	4618      	mov	r0, r3
 8019d48:	f002 f836 	bl	801bdb8 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8019d4c:	6839      	ldr	r1, [r7, #0]
 8019d4e:	6878      	ldr	r0, [r7, #4]
 8019d50:	f001 fa3e 	bl	801b1d0 <SUBGRF_SetRxDutyCycle>
}
 8019d54:	bf00      	nop
 8019d56:	3708      	adds	r7, #8
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	20001bb4 	.word	0x20001bb4

08019d60 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019d64:	4b09      	ldr	r3, [pc, #36]	; (8019d8c <RadioStartCad+0x2c>)
 8019d66:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019d6a:	2100      	movs	r1, #0
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f002 f823 	bl	801bdb8 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019d72:	2300      	movs	r3, #0
 8019d74:	2200      	movs	r2, #0
 8019d76:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8019d7a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8019d7e:	f001 fb77 	bl	801b470 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019d82:	f001 fa51 	bl	801b228 <SUBGRF_SetCad>
}
 8019d86:	bf00      	nop
 8019d88:	bd80      	pop	{r7, pc}
 8019d8a:	bf00      	nop
 8019d8c:	20001bb4 	.word	0x20001bb4

08019d90 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019d90:	b580      	push	{r7, lr}
 8019d92:	b084      	sub	sp, #16
 8019d94:	af00      	add	r7, sp, #0
 8019d96:	6078      	str	r0, [r7, #4]
 8019d98:	460b      	mov	r3, r1
 8019d9a:	70fb      	strb	r3, [r7, #3]
 8019d9c:	4613      	mov	r3, r2
 8019d9e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019da0:	883b      	ldrh	r3, [r7, #0]
 8019da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019da6:	fb02 f303 	mul.w	r3, r2, r3
 8019daa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8019dac:	6878      	ldr	r0, [r7, #4]
 8019dae:	f001 fbbb 	bl	801b528 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019db6:	4618      	mov	r0, r3
 8019db8:	f002 f826 	bl	801be08 <SUBGRF_SetRfTxPower>
 8019dbc:	4603      	mov	r3, r0
 8019dbe:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019dc0:	7afb      	ldrb	r3, [r7, #11]
 8019dc2:	2101      	movs	r1, #1
 8019dc4:	4618      	mov	r0, r3
 8019dc6:	f001 fff7 	bl	801bdb8 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8019dca:	f001 fa3b 	bl	801b244 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8019dce:	68f9      	ldr	r1, [r7, #12]
 8019dd0:	4804      	ldr	r0, [pc, #16]	; (8019de4 <RadioSetTxContinuousWave+0x54>)
 8019dd2:	f003 f83f 	bl	801ce54 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019dd6:	4803      	ldr	r0, [pc, #12]	; (8019de4 <RadioSetTxContinuousWave+0x54>)
 8019dd8:	f002 ff5e 	bl	801cc98 <UTIL_TIMER_Start>
}
 8019ddc:	bf00      	nop
 8019dde:	3710      	adds	r7, #16
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bd80      	pop	{r7, pc}
 8019de4:	20001c10 	.word	0x20001c10

08019de8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	4603      	mov	r3, r0
 8019df0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8019df2:	f001 fe5a 	bl	801baaa <SUBGRF_GetRssiInst>
 8019df6:	4603      	mov	r3, r0
 8019df8:	b21b      	sxth	r3, r3
}
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	3708      	adds	r7, #8
 8019dfe:	46bd      	mov	sp, r7
 8019e00:	bd80      	pop	{r7, pc}

08019e02 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8019e02:	b580      	push	{r7, lr}
 8019e04:	b082      	sub	sp, #8
 8019e06:	af00      	add	r7, sp, #0
 8019e08:	4603      	mov	r3, r0
 8019e0a:	460a      	mov	r2, r1
 8019e0c:	80fb      	strh	r3, [r7, #6]
 8019e0e:	4613      	mov	r3, r2
 8019e10:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8019e12:	797a      	ldrb	r2, [r7, #5]
 8019e14:	88fb      	ldrh	r3, [r7, #6]
 8019e16:	4611      	mov	r1, r2
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f001 fed9 	bl	801bbd0 <SUBGRF_WriteRegister>
}
 8019e1e:	bf00      	nop
 8019e20:	3708      	adds	r7, #8
 8019e22:	46bd      	mov	sp, r7
 8019e24:	bd80      	pop	{r7, pc}

08019e26 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8019e26:	b580      	push	{r7, lr}
 8019e28:	b082      	sub	sp, #8
 8019e2a:	af00      	add	r7, sp, #0
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8019e30:	88fb      	ldrh	r3, [r7, #6]
 8019e32:	4618      	mov	r0, r3
 8019e34:	f001 fee0 	bl	801bbf8 <SUBGRF_ReadRegister>
 8019e38:	4603      	mov	r3, r0
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3708      	adds	r7, #8
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}

08019e42 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019e42:	b580      	push	{r7, lr}
 8019e44:	b082      	sub	sp, #8
 8019e46:	af00      	add	r7, sp, #0
 8019e48:	4603      	mov	r3, r0
 8019e4a:	6039      	str	r1, [r7, #0]
 8019e4c:	80fb      	strh	r3, [r7, #6]
 8019e4e:	4613      	mov	r3, r2
 8019e50:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019e52:	797b      	ldrb	r3, [r7, #5]
 8019e54:	b29a      	uxth	r2, r3
 8019e56:	88fb      	ldrh	r3, [r7, #6]
 8019e58:	6839      	ldr	r1, [r7, #0]
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f001 fee0 	bl	801bc20 <SUBGRF_WriteRegisters>
}
 8019e60:	bf00      	nop
 8019e62:	3708      	adds	r7, #8
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019e68:	b580      	push	{r7, lr}
 8019e6a:	b082      	sub	sp, #8
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	4603      	mov	r3, r0
 8019e70:	6039      	str	r1, [r7, #0]
 8019e72:	80fb      	strh	r3, [r7, #6]
 8019e74:	4613      	mov	r3, r2
 8019e76:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019e78:	797b      	ldrb	r3, [r7, #5]
 8019e7a:	b29a      	uxth	r2, r3
 8019e7c:	88fb      	ldrh	r3, [r7, #6]
 8019e7e:	6839      	ldr	r1, [r7, #0]
 8019e80:	4618      	mov	r0, r3
 8019e82:	f001 feef 	bl	801bc64 <SUBGRF_ReadRegisters>
}
 8019e86:	bf00      	nop
 8019e88:	3708      	adds	r7, #8
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}
	...

08019e90 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b082      	sub	sp, #8
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	4603      	mov	r3, r0
 8019e98:	460a      	mov	r2, r1
 8019e9a:	71fb      	strb	r3, [r7, #7]
 8019e9c:	4613      	mov	r3, r2
 8019e9e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019ea0:	79fb      	ldrb	r3, [r7, #7]
 8019ea2:	2b01      	cmp	r3, #1
 8019ea4:	d10a      	bne.n	8019ebc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019ea6:	4a0e      	ldr	r2, [pc, #56]	; (8019ee0 <RadioSetMaxPayloadLength+0x50>)
 8019ea8:	79bb      	ldrb	r3, [r7, #6]
 8019eaa:	7013      	strb	r3, [r2, #0]
 8019eac:	4b0c      	ldr	r3, [pc, #48]	; (8019ee0 <RadioSetMaxPayloadLength+0x50>)
 8019eae:	781a      	ldrb	r2, [r3, #0]
 8019eb0:	4b0c      	ldr	r3, [pc, #48]	; (8019ee4 <RadioSetMaxPayloadLength+0x54>)
 8019eb2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019eb4:	480c      	ldr	r0, [pc, #48]	; (8019ee8 <RadioSetMaxPayloadLength+0x58>)
 8019eb6:	f001 fd43 	bl	801b940 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8019eba:	e00d      	b.n	8019ed8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8019ebc:	4b09      	ldr	r3, [pc, #36]	; (8019ee4 <RadioSetMaxPayloadLength+0x54>)
 8019ebe:	7d5b      	ldrb	r3, [r3, #21]
 8019ec0:	2b01      	cmp	r3, #1
 8019ec2:	d109      	bne.n	8019ed8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019ec4:	4a06      	ldr	r2, [pc, #24]	; (8019ee0 <RadioSetMaxPayloadLength+0x50>)
 8019ec6:	79bb      	ldrb	r3, [r7, #6]
 8019ec8:	7013      	strb	r3, [r2, #0]
 8019eca:	4b05      	ldr	r3, [pc, #20]	; (8019ee0 <RadioSetMaxPayloadLength+0x50>)
 8019ecc:	781a      	ldrb	r2, [r3, #0]
 8019ece:	4b05      	ldr	r3, [pc, #20]	; (8019ee4 <RadioSetMaxPayloadLength+0x54>)
 8019ed0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019ed2:	4805      	ldr	r0, [pc, #20]	; (8019ee8 <RadioSetMaxPayloadLength+0x58>)
 8019ed4:	f001 fd34 	bl	801b940 <SUBGRF_SetPacketParams>
}
 8019ed8:	bf00      	nop
 8019eda:	3708      	adds	r7, #8
 8019edc:	46bd      	mov	sp, r7
 8019ede:	bd80      	pop	{r7, pc}
 8019ee0:	20000144 	.word	0x20000144
 8019ee4:	20001bb4 	.word	0x20001bb4
 8019ee8:	20001bc2 	.word	0x20001bc2

08019eec <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b082      	sub	sp, #8
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8019ef6:	4a13      	ldr	r2, [pc, #76]	; (8019f44 <RadioSetPublicNetwork+0x58>)
 8019ef8:	79fb      	ldrb	r3, [r7, #7]
 8019efa:	7313      	strb	r3, [r2, #12]
 8019efc:	4b11      	ldr	r3, [pc, #68]	; (8019f44 <RadioSetPublicNetwork+0x58>)
 8019efe:	7b1a      	ldrb	r2, [r3, #12]
 8019f00:	4b10      	ldr	r3, [pc, #64]	; (8019f44 <RadioSetPublicNetwork+0x58>)
 8019f02:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8019f04:	2001      	movs	r0, #1
 8019f06:	f7ff f82d 	bl	8018f64 <RadioSetModem>
    if( enable == true )
 8019f0a:	79fb      	ldrb	r3, [r7, #7]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d00a      	beq.n	8019f26 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8019f10:	2134      	movs	r1, #52	; 0x34
 8019f12:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019f16:	f001 fe5b 	bl	801bbd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8019f1a:	2144      	movs	r1, #68	; 0x44
 8019f1c:	f240 7041 	movw	r0, #1857	; 0x741
 8019f20:	f001 fe56 	bl	801bbd0 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8019f24:	e009      	b.n	8019f3a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8019f26:	2114      	movs	r1, #20
 8019f28:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8019f2c:	f001 fe50 	bl	801bbd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8019f30:	2124      	movs	r1, #36	; 0x24
 8019f32:	f240 7041 	movw	r0, #1857	; 0x741
 8019f36:	f001 fe4b 	bl	801bbd0 <SUBGRF_WriteRegister>
}
 8019f3a:	bf00      	nop
 8019f3c:	3708      	adds	r7, #8
 8019f3e:	46bd      	mov	sp, r7
 8019f40:	bd80      	pop	{r7, pc}
 8019f42:	bf00      	nop
 8019f44:	20001bb4 	.word	0x20001bb4

08019f48 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8019f4c:	f001 ff90 	bl	801be70 <SUBGRF_GetRadioWakeUpTime>
 8019f50:	4603      	mov	r3, r0
 8019f52:	3303      	adds	r3, #3
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	bd80      	pop	{r7, pc}

08019f58 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b082      	sub	sp, #8
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019f60:	f000 f80e 	bl	8019f80 <RadioOnTxTimeoutProcess>
}
 8019f64:	bf00      	nop
 8019f66:	3708      	adds	r7, #8
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bd80      	pop	{r7, pc}

08019f6c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019f74:	f000 f818 	bl	8019fa8 <RadioOnRxTimeoutProcess>
}
 8019f78:	bf00      	nop
 8019f7a:	3708      	adds	r7, #8
 8019f7c:	46bd      	mov	sp, r7
 8019f7e:	bd80      	pop	{r7, pc}

08019f80 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019f80:	b580      	push	{r7, lr}
 8019f82:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019f84:	4b07      	ldr	r3, [pc, #28]	; (8019fa4 <RadioOnTxTimeoutProcess+0x24>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d008      	beq.n	8019f9e <RadioOnTxTimeoutProcess+0x1e>
 8019f8c:	4b05      	ldr	r3, [pc, #20]	; (8019fa4 <RadioOnTxTimeoutProcess+0x24>)
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	685b      	ldr	r3, [r3, #4]
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d003      	beq.n	8019f9e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019f96:	4b03      	ldr	r3, [pc, #12]	; (8019fa4 <RadioOnTxTimeoutProcess+0x24>)
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	685b      	ldr	r3, [r3, #4]
 8019f9c:	4798      	blx	r3
    }
}
 8019f9e:	bf00      	nop
 8019fa0:	bd80      	pop	{r7, pc}
 8019fa2:	bf00      	nop
 8019fa4:	20001bb0 	.word	0x20001bb0

08019fa8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019fac:	4b07      	ldr	r3, [pc, #28]	; (8019fcc <RadioOnRxTimeoutProcess+0x24>)
 8019fae:	681b      	ldr	r3, [r3, #0]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d008      	beq.n	8019fc6 <RadioOnRxTimeoutProcess+0x1e>
 8019fb4:	4b05      	ldr	r3, [pc, #20]	; (8019fcc <RadioOnRxTimeoutProcess+0x24>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	68db      	ldr	r3, [r3, #12]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d003      	beq.n	8019fc6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8019fbe:	4b03      	ldr	r3, [pc, #12]	; (8019fcc <RadioOnRxTimeoutProcess+0x24>)
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	68db      	ldr	r3, [r3, #12]
 8019fc4:	4798      	blx	r3
    }
}
 8019fc6:	bf00      	nop
 8019fc8:	bd80      	pop	{r7, pc}
 8019fca:	bf00      	nop
 8019fcc:	20001bb0 	.word	0x20001bb0

08019fd0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b082      	sub	sp, #8
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8019fda:	4a05      	ldr	r2, [pc, #20]	; (8019ff0 <RadioOnDioIrq+0x20>)
 8019fdc:	88fb      	ldrh	r3, [r7, #6]
 8019fde:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8019fe2:	f000 f807 	bl	8019ff4 <RadioIrqProcess>
}
 8019fe6:	bf00      	nop
 8019fe8:	3708      	adds	r7, #8
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
 8019fee:	bf00      	nop
 8019ff0:	20001bb4 	.word	0x20001bb4

08019ff4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8019ff4:	b590      	push	{r4, r7, lr}
 8019ff6:	b083      	sub	sp, #12
 8019ff8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8019ffa:	2300      	movs	r3, #0
 8019ffc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8019ffe:	2300      	movs	r3, #0
 801a000:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801a002:	4ba8      	ldr	r3, [pc, #672]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a004:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801a008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a00c:	f000 810c 	beq.w	801a228 <RadioIrqProcess+0x234>
 801a010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a014:	f300 81e8 	bgt.w	801a3e8 <RadioIrqProcess+0x3f4>
 801a018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a01c:	f000 80f0 	beq.w	801a200 <RadioIrqProcess+0x20c>
 801a020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a024:	f300 81e0 	bgt.w	801a3e8 <RadioIrqProcess+0x3f4>
 801a028:	2b80      	cmp	r3, #128	; 0x80
 801a02a:	f000 80d5 	beq.w	801a1d8 <RadioIrqProcess+0x1e4>
 801a02e:	2b80      	cmp	r3, #128	; 0x80
 801a030:	f300 81da 	bgt.w	801a3e8 <RadioIrqProcess+0x3f4>
 801a034:	2b20      	cmp	r3, #32
 801a036:	dc49      	bgt.n	801a0cc <RadioIrqProcess+0xd8>
 801a038:	2b00      	cmp	r3, #0
 801a03a:	f340 81d5 	ble.w	801a3e8 <RadioIrqProcess+0x3f4>
 801a03e:	3b01      	subs	r3, #1
 801a040:	2b1f      	cmp	r3, #31
 801a042:	f200 81d1 	bhi.w	801a3e8 <RadioIrqProcess+0x3f4>
 801a046:	a201      	add	r2, pc, #4	; (adr r2, 801a04c <RadioIrqProcess+0x58>)
 801a048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a04c:	0801a0d5 	.word	0x0801a0d5
 801a050:	0801a10f 	.word	0x0801a10f
 801a054:	0801a3e9 	.word	0x0801a3e9
 801a058:	0801a2c5 	.word	0x0801a2c5
 801a05c:	0801a3e9 	.word	0x0801a3e9
 801a060:	0801a3e9 	.word	0x0801a3e9
 801a064:	0801a3e9 	.word	0x0801a3e9
 801a068:	0801a341 	.word	0x0801a341
 801a06c:	0801a3e9 	.word	0x0801a3e9
 801a070:	0801a3e9 	.word	0x0801a3e9
 801a074:	0801a3e9 	.word	0x0801a3e9
 801a078:	0801a3e9 	.word	0x0801a3e9
 801a07c:	0801a3e9 	.word	0x0801a3e9
 801a080:	0801a3e9 	.word	0x0801a3e9
 801a084:	0801a3e9 	.word	0x0801a3e9
 801a088:	0801a35d 	.word	0x0801a35d
 801a08c:	0801a3e9 	.word	0x0801a3e9
 801a090:	0801a3e9 	.word	0x0801a3e9
 801a094:	0801a3e9 	.word	0x0801a3e9
 801a098:	0801a3e9 	.word	0x0801a3e9
 801a09c:	0801a3e9 	.word	0x0801a3e9
 801a0a0:	0801a3e9 	.word	0x0801a3e9
 801a0a4:	0801a3e9 	.word	0x0801a3e9
 801a0a8:	0801a3e9 	.word	0x0801a3e9
 801a0ac:	0801a3e9 	.word	0x0801a3e9
 801a0b0:	0801a3e9 	.word	0x0801a3e9
 801a0b4:	0801a3e9 	.word	0x0801a3e9
 801a0b8:	0801a3e9 	.word	0x0801a3e9
 801a0bc:	0801a3e9 	.word	0x0801a3e9
 801a0c0:	0801a3e9 	.word	0x0801a3e9
 801a0c4:	0801a3e9 	.word	0x0801a3e9
 801a0c8:	0801a36b 	.word	0x0801a36b
 801a0cc:	2b40      	cmp	r3, #64	; 0x40
 801a0ce:	f000 816d 	beq.w	801a3ac <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 801a0d2:	e189      	b.n	801a3e8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801a0d4:	4874      	ldr	r0, [pc, #464]	; (801a2a8 <RadioIrqProcess+0x2b4>)
 801a0d6:	f002 fe4d 	bl	801cd74 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801a0da:	2000      	movs	r0, #0
 801a0dc:	f000 fff8 	bl	801b0d0 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801a0e0:	f002 f85a 	bl	801c198 <RFW_Is_LongPacketModeEnabled>
 801a0e4:	4603      	mov	r3, r0
 801a0e6:	2b01      	cmp	r3, #1
 801a0e8:	d101      	bne.n	801a0ee <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801a0ea:	f002 f87e 	bl	801c1ea <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801a0ee:	4b6f      	ldr	r3, [pc, #444]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	f000 817a 	beq.w	801a3ec <RadioIrqProcess+0x3f8>
 801a0f8:	4b6c      	ldr	r3, [pc, #432]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	f000 8174 	beq.w	801a3ec <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801a104:	4b69      	ldr	r3, [pc, #420]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	4798      	blx	r3
        break;
 801a10c:	e16e      	b.n	801a3ec <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801a10e:	4868      	ldr	r0, [pc, #416]	; (801a2b0 <RadioIrqProcess+0x2bc>)
 801a110:	f002 fe30 	bl	801cd74 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a114:	4b63      	ldr	r3, [pc, #396]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a116:	785b      	ldrb	r3, [r3, #1]
 801a118:	f083 0301 	eor.w	r3, r3, #1
 801a11c:	b2db      	uxtb	r3, r3
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d014      	beq.n	801a14c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801a122:	2000      	movs	r0, #0
 801a124:	f000 ffd4 	bl	801b0d0 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801a128:	2100      	movs	r1, #0
 801a12a:	f640 1002 	movw	r0, #2306	; 0x902
 801a12e:	f001 fd4f 	bl	801bbd0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801a132:	f640 1044 	movw	r0, #2372	; 0x944
 801a136:	f001 fd5f 	bl	801bbf8 <SUBGRF_ReadRegister>
 801a13a:	4603      	mov	r3, r0
 801a13c:	f043 0302 	orr.w	r3, r3, #2
 801a140:	b2db      	uxtb	r3, r3
 801a142:	4619      	mov	r1, r3
 801a144:	f640 1044 	movw	r0, #2372	; 0x944
 801a148:	f001 fd42 	bl	801bbd0 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801a14c:	1dfb      	adds	r3, r7, #7
 801a14e:	22ff      	movs	r2, #255	; 0xff
 801a150:	4619      	mov	r1, r3
 801a152:	4858      	ldr	r0, [pc, #352]	; (801a2b4 <RadioIrqProcess+0x2c0>)
 801a154:	f000 fe8c 	bl	801ae70 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801a158:	4857      	ldr	r0, [pc, #348]	; (801a2b8 <RadioIrqProcess+0x2c4>)
 801a15a:	f001 fce7 	bl	801bb2c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801a15e:	4b53      	ldr	r3, [pc, #332]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	2b00      	cmp	r3, #0
 801a164:	d036      	beq.n	801a1d4 <RadioIrqProcess+0x1e0>
 801a166:	4b51      	ldr	r3, [pc, #324]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	689b      	ldr	r3, [r3, #8]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d031      	beq.n	801a1d4 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 801a170:	4b4c      	ldr	r3, [pc, #304]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a176:	2b01      	cmp	r3, #1
 801a178:	d10e      	bne.n	801a198 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801a17a:	4b4c      	ldr	r3, [pc, #304]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	689c      	ldr	r4, [r3, #8]
 801a180:	79fb      	ldrb	r3, [r7, #7]
 801a182:	b299      	uxth	r1, r3
 801a184:	4b47      	ldr	r3, [pc, #284]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a186:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801a18a:	b21a      	sxth	r2, r3
 801a18c:	4b45      	ldr	r3, [pc, #276]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a18e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801a192:	4848      	ldr	r0, [pc, #288]	; (801a2b4 <RadioIrqProcess+0x2c0>)
 801a194:	47a0      	blx	r4
                break;
 801a196:	e01e      	b.n	801a1d6 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801a198:	4b42      	ldr	r3, [pc, #264]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a19a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a19c:	463a      	mov	r2, r7
 801a19e:	4611      	mov	r1, r2
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f001 ff47 	bl	801c034 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 801a1a6:	4b41      	ldr	r3, [pc, #260]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	689c      	ldr	r4, [r3, #8]
 801a1ac:	79fb      	ldrb	r3, [r7, #7]
 801a1ae:	b299      	uxth	r1, r3
 801a1b0:	4b3c      	ldr	r3, [pc, #240]	; (801a2a4 <RadioIrqProcess+0x2b0>)
 801a1b2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801a1b6:	b218      	sxth	r0, r3
 801a1b8:	683b      	ldr	r3, [r7, #0]
 801a1ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801a1be:	4a3f      	ldr	r2, [pc, #252]	; (801a2bc <RadioIrqProcess+0x2c8>)
 801a1c0:	fb82 c203 	smull	ip, r2, r2, r3
 801a1c4:	1192      	asrs	r2, r2, #6
 801a1c6:	17db      	asrs	r3, r3, #31
 801a1c8:	1ad3      	subs	r3, r2, r3
 801a1ca:	b25b      	sxtb	r3, r3
 801a1cc:	4602      	mov	r2, r0
 801a1ce:	4839      	ldr	r0, [pc, #228]	; (801a2b4 <RadioIrqProcess+0x2c0>)
 801a1d0:	47a0      	blx	r4
                break;
 801a1d2:	e000      	b.n	801a1d6 <RadioIrqProcess+0x1e2>
        }
 801a1d4:	bf00      	nop
        break;
 801a1d6:	e118      	b.n	801a40a <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 801a1d8:	2000      	movs	r0, #0
 801a1da:	f000 ff79 	bl	801b0d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a1de:	4b33      	ldr	r3, [pc, #204]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	f000 8104 	beq.w	801a3f0 <RadioIrqProcess+0x3fc>
 801a1e8:	4b30      	ldr	r3, [pc, #192]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	699b      	ldr	r3, [r3, #24]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	f000 80fe 	beq.w	801a3f0 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 801a1f4:	4b2d      	ldr	r3, [pc, #180]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	699b      	ldr	r3, [r3, #24]
 801a1fa:	2000      	movs	r0, #0
 801a1fc:	4798      	blx	r3
        break;
 801a1fe:	e0f7      	b.n	801a3f0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801a200:	2000      	movs	r0, #0
 801a202:	f000 ff65 	bl	801b0d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801a206:	4b29      	ldr	r3, [pc, #164]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	f000 80f2 	beq.w	801a3f4 <RadioIrqProcess+0x400>
 801a210:	4b26      	ldr	r3, [pc, #152]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	699b      	ldr	r3, [r3, #24]
 801a216:	2b00      	cmp	r3, #0
 801a218:	f000 80ec 	beq.w	801a3f4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801a21c:	4b23      	ldr	r3, [pc, #140]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	699b      	ldr	r3, [r3, #24]
 801a222:	2001      	movs	r0, #1
 801a224:	4798      	blx	r3
        break;
 801a226:	e0e5      	b.n	801a3f4 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801a228:	4b25      	ldr	r3, [pc, #148]	; (801a2c0 <RadioIrqProcess+0x2cc>)
 801a22a:	2201      	movs	r2, #1
 801a22c:	2100      	movs	r1, #0
 801a22e:	2002      	movs	r0, #2
 801a230:	f002 ffaa 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801a234:	f000 fe02 	bl	801ae3c <SUBGRF_GetOperatingMode>
 801a238:	4603      	mov	r3, r0
 801a23a:	2b04      	cmp	r3, #4
 801a23c:	d115      	bne.n	801a26a <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 801a23e:	481a      	ldr	r0, [pc, #104]	; (801a2a8 <RadioIrqProcess+0x2b4>)
 801a240:	f002 fd98 	bl	801cd74 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a244:	2000      	movs	r0, #0
 801a246:	f000 ff43 	bl	801b0d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801a24a:	4b18      	ldr	r3, [pc, #96]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	f000 80d2 	beq.w	801a3f8 <RadioIrqProcess+0x404>
 801a254:	4b15      	ldr	r3, [pc, #84]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	685b      	ldr	r3, [r3, #4]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	f000 80cc 	beq.w	801a3f8 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 801a260:	4b12      	ldr	r3, [pc, #72]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	685b      	ldr	r3, [r3, #4]
 801a266:	4798      	blx	r3
        break;
 801a268:	e0c6      	b.n	801a3f8 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801a26a:	f000 fde7 	bl	801ae3c <SUBGRF_GetOperatingMode>
 801a26e:	4603      	mov	r3, r0
 801a270:	2b05      	cmp	r3, #5
 801a272:	f040 80c1 	bne.w	801a3f8 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 801a276:	480e      	ldr	r0, [pc, #56]	; (801a2b0 <RadioIrqProcess+0x2bc>)
 801a278:	f002 fd7c 	bl	801cd74 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801a27c:	2000      	movs	r0, #0
 801a27e:	f000 ff27 	bl	801b0d0 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a282:	4b0a      	ldr	r3, [pc, #40]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	2b00      	cmp	r3, #0
 801a288:	f000 80b6 	beq.w	801a3f8 <RadioIrqProcess+0x404>
 801a28c:	4b07      	ldr	r3, [pc, #28]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	68db      	ldr	r3, [r3, #12]
 801a292:	2b00      	cmp	r3, #0
 801a294:	f000 80b0 	beq.w	801a3f8 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 801a298:	4b04      	ldr	r3, [pc, #16]	; (801a2ac <RadioIrqProcess+0x2b8>)
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	68db      	ldr	r3, [r3, #12]
 801a29e:	4798      	blx	r3
        break;
 801a2a0:	e0aa      	b.n	801a3f8 <RadioIrqProcess+0x404>
 801a2a2:	bf00      	nop
 801a2a4:	20001bb4 	.word	0x20001bb4
 801a2a8:	20001c10 	.word	0x20001c10
 801a2ac:	20001bb0 	.word	0x20001bb0
 801a2b0:	20001c28 	.word	0x20001c28
 801a2b4:	20001ab0 	.word	0x20001ab0
 801a2b8:	20001bd8 	.word	0x20001bd8
 801a2bc:	10624dd3 	.word	0x10624dd3
 801a2c0:	0801e93c 	.word	0x0801e93c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801a2c4:	4b53      	ldr	r3, [pc, #332]	; (801a414 <RadioIrqProcess+0x420>)
 801a2c6:	2201      	movs	r2, #1
 801a2c8:	2100      	movs	r1, #0
 801a2ca:	2002      	movs	r0, #2
 801a2cc:	f002 ff5c 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801a2d0:	4b51      	ldr	r3, [pc, #324]	; (801a418 <RadioIrqProcess+0x424>)
 801a2d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	f000 8091 	beq.w	801a3fc <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801a2da:	4a50      	ldr	r2, [pc, #320]	; (801a41c <RadioIrqProcess+0x428>)
 801a2dc:	4b4e      	ldr	r3, [pc, #312]	; (801a418 <RadioIrqProcess+0x424>)
 801a2de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2e0:	0c1b      	lsrs	r3, r3, #16
 801a2e2:	b2db      	uxtb	r3, r3
 801a2e4:	4619      	mov	r1, r3
 801a2e6:	f640 1003 	movw	r0, #2307	; 0x903
 801a2ea:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801a2ec:	4a4b      	ldr	r2, [pc, #300]	; (801a41c <RadioIrqProcess+0x428>)
 801a2ee:	4b4a      	ldr	r3, [pc, #296]	; (801a418 <RadioIrqProcess+0x424>)
 801a2f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2f2:	0a1b      	lsrs	r3, r3, #8
 801a2f4:	b2db      	uxtb	r3, r3
 801a2f6:	4619      	mov	r1, r3
 801a2f8:	f640 1004 	movw	r0, #2308	; 0x904
 801a2fc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801a2fe:	4a47      	ldr	r2, [pc, #284]	; (801a41c <RadioIrqProcess+0x428>)
 801a300:	4b45      	ldr	r3, [pc, #276]	; (801a418 <RadioIrqProcess+0x424>)
 801a302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a304:	b2db      	uxtb	r3, r3
 801a306:	4619      	mov	r1, r3
 801a308:	f640 1005 	movw	r0, #2309	; 0x905
 801a30c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801a30e:	4c43      	ldr	r4, [pc, #268]	; (801a41c <RadioIrqProcess+0x428>)
 801a310:	4b43      	ldr	r3, [pc, #268]	; (801a420 <RadioIrqProcess+0x42c>)
 801a312:	f640 1002 	movw	r0, #2306	; 0x902
 801a316:	4798      	blx	r3
 801a318:	4603      	mov	r3, r0
 801a31a:	f043 0301 	orr.w	r3, r3, #1
 801a31e:	b2db      	uxtb	r3, r3
 801a320:	4619      	mov	r1, r3
 801a322:	f640 1002 	movw	r0, #2306	; 0x902
 801a326:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 801a328:	4b3b      	ldr	r3, [pc, #236]	; (801a418 <RadioIrqProcess+0x424>)
 801a32a:	2200      	movs	r2, #0
 801a32c:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801a32e:	2300      	movs	r3, #0
 801a330:	2200      	movs	r2, #0
 801a332:	f240 2162 	movw	r1, #610	; 0x262
 801a336:	f240 2062 	movw	r0, #610	; 0x262
 801a33a:	f001 f899 	bl	801b470 <SUBGRF_SetDioIrqParams>
        break;
 801a33e:	e05d      	b.n	801a3fc <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801a340:	4b38      	ldr	r3, [pc, #224]	; (801a424 <RadioIrqProcess+0x430>)
 801a342:	2201      	movs	r2, #1
 801a344:	2100      	movs	r1, #0
 801a346:	2002      	movs	r0, #2
 801a348:	f002 ff1e 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801a34c:	f001 ff1d 	bl	801c18a <RFW_Is_Init>
 801a350:	4603      	mov	r3, r0
 801a352:	2b01      	cmp	r3, #1
 801a354:	d154      	bne.n	801a400 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 801a356:	f001 ff4e 	bl	801c1f6 <RFW_ReceivePayload>
        break;
 801a35a:	e051      	b.n	801a400 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801a35c:	4b32      	ldr	r3, [pc, #200]	; (801a428 <RadioIrqProcess+0x434>)
 801a35e:	2201      	movs	r2, #1
 801a360:	2100      	movs	r1, #0
 801a362:	2002      	movs	r0, #2
 801a364:	f002 ff10 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a368:	e04f      	b.n	801a40a <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801a36a:	4830      	ldr	r0, [pc, #192]	; (801a42c <RadioIrqProcess+0x438>)
 801a36c:	f002 fd02 	bl	801cd74 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801a370:	4b29      	ldr	r3, [pc, #164]	; (801a418 <RadioIrqProcess+0x424>)
 801a372:	785b      	ldrb	r3, [r3, #1]
 801a374:	f083 0301 	eor.w	r3, r3, #1
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d002      	beq.n	801a384 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801a37e:	2000      	movs	r0, #0
 801a380:	f000 fea6 	bl	801b0d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801a384:	4b2a      	ldr	r3, [pc, #168]	; (801a430 <RadioIrqProcess+0x43c>)
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d03b      	beq.n	801a404 <RadioIrqProcess+0x410>
 801a38c:	4b28      	ldr	r3, [pc, #160]	; (801a430 <RadioIrqProcess+0x43c>)
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	68db      	ldr	r3, [r3, #12]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d036      	beq.n	801a404 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 801a396:	4b26      	ldr	r3, [pc, #152]	; (801a430 <RadioIrqProcess+0x43c>)
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	68db      	ldr	r3, [r3, #12]
 801a39c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801a39e:	4b25      	ldr	r3, [pc, #148]	; (801a434 <RadioIrqProcess+0x440>)
 801a3a0:	2201      	movs	r2, #1
 801a3a2:	2100      	movs	r1, #0
 801a3a4:	2002      	movs	r0, #2
 801a3a6:	f002 feef 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801a3aa:	e02b      	b.n	801a404 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801a3ac:	4b22      	ldr	r3, [pc, #136]	; (801a438 <RadioIrqProcess+0x444>)
 801a3ae:	2201      	movs	r2, #1
 801a3b0:	2100      	movs	r1, #0
 801a3b2:	2002      	movs	r0, #2
 801a3b4:	f002 fee8 	bl	801d188 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801a3b8:	4b17      	ldr	r3, [pc, #92]	; (801a418 <RadioIrqProcess+0x424>)
 801a3ba:	785b      	ldrb	r3, [r3, #1]
 801a3bc:	f083 0301 	eor.w	r3, r3, #1
 801a3c0:	b2db      	uxtb	r3, r3
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d002      	beq.n	801a3cc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801a3c6:	2000      	movs	r0, #0
 801a3c8:	f000 fe82 	bl	801b0d0 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801a3cc:	4b18      	ldr	r3, [pc, #96]	; (801a430 <RadioIrqProcess+0x43c>)
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d019      	beq.n	801a408 <RadioIrqProcess+0x414>
 801a3d4:	4b16      	ldr	r3, [pc, #88]	; (801a430 <RadioIrqProcess+0x43c>)
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	691b      	ldr	r3, [r3, #16]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d014      	beq.n	801a408 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801a3de:	4b14      	ldr	r3, [pc, #80]	; (801a430 <RadioIrqProcess+0x43c>)
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	691b      	ldr	r3, [r3, #16]
 801a3e4:	4798      	blx	r3
        break;
 801a3e6:	e00f      	b.n	801a408 <RadioIrqProcess+0x414>
        break;
 801a3e8:	bf00      	nop
 801a3ea:	e00e      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a3ec:	bf00      	nop
 801a3ee:	e00c      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a3f0:	bf00      	nop
 801a3f2:	e00a      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a3f4:	bf00      	nop
 801a3f6:	e008      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a3f8:	bf00      	nop
 801a3fa:	e006      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a3fc:	bf00      	nop
 801a3fe:	e004      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a400:	bf00      	nop
 801a402:	e002      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a404:	bf00      	nop
 801a406:	e000      	b.n	801a40a <RadioIrqProcess+0x416>
        break;
 801a408:	bf00      	nop
    }
}
 801a40a:	bf00      	nop
 801a40c:	370c      	adds	r7, #12
 801a40e:	46bd      	mov	sp, r7
 801a410:	bd90      	pop	{r4, r7, pc}
 801a412:	bf00      	nop
 801a414:	0801e950 	.word	0x0801e950
 801a418:	20001bb4 	.word	0x20001bb4
 801a41c:	08019e03 	.word	0x08019e03
 801a420:	08019e27 	.word	0x08019e27
 801a424:	0801e95c 	.word	0x0801e95c
 801a428:	0801e968 	.word	0x0801e968
 801a42c:	20001c28 	.word	0x20001c28
 801a430:	20001bb0 	.word	0x20001bb0
 801a434:	0801e974 	.word	0x0801e974
 801a438:	0801e980 	.word	0x0801e980

0801a43c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801a440:	4b09      	ldr	r3, [pc, #36]	; (801a468 <RadioTxPrbs+0x2c>)
 801a442:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a446:	2101      	movs	r1, #1
 801a448:	4618      	mov	r0, r3
 801a44a:	f001 fcb5 	bl	801bdb8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801a44e:	4b07      	ldr	r3, [pc, #28]	; (801a46c <RadioTxPrbs+0x30>)
 801a450:	212d      	movs	r1, #45	; 0x2d
 801a452:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a456:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801a458:	f000 fefd 	bl	801b256 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801a45c:	4804      	ldr	r0, [pc, #16]	; (801a470 <RadioTxPrbs+0x34>)
 801a45e:	f000 fe53 	bl	801b108 <SUBGRF_SetTx>
}
 801a462:	bf00      	nop
 801a464:	bd80      	pop	{r7, pc}
 801a466:	bf00      	nop
 801a468:	20001bb4 	.word	0x20001bb4
 801a46c:	08019e03 	.word	0x08019e03
 801a470:	000fffff 	.word	0x000fffff

0801a474 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801a474:	b580      	push	{r7, lr}
 801a476:	b084      	sub	sp, #16
 801a478:	af00      	add	r7, sp, #0
 801a47a:	4603      	mov	r3, r0
 801a47c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801a47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a482:	4618      	mov	r0, r3
 801a484:	f001 fcc0 	bl	801be08 <SUBGRF_SetRfTxPower>
 801a488:	4603      	mov	r3, r0
 801a48a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801a48c:	7bfb      	ldrb	r3, [r7, #15]
 801a48e:	2101      	movs	r1, #1
 801a490:	4618      	mov	r0, r3
 801a492:	f001 fc91 	bl	801bdb8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801a496:	f000 fed5 	bl	801b244 <SUBGRF_SetTxContinuousWave>
}
 801a49a:	bf00      	nop
 801a49c:	3710      	adds	r7, #16
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}

0801a4a2 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801a4a2:	b480      	push	{r7}
 801a4a4:	b089      	sub	sp, #36	; 0x24
 801a4a6:	af00      	add	r7, sp, #0
 801a4a8:	60f8      	str	r0, [r7, #12]
 801a4aa:	60b9      	str	r1, [r7, #8]
 801a4ac:	4613      	mov	r3, r2
 801a4ae:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801a4b8:	2300      	movs	r3, #0
 801a4ba:	61bb      	str	r3, [r7, #24]
 801a4bc:	e011      	b.n	801a4e2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801a4be:	69bb      	ldr	r3, [r7, #24]
 801a4c0:	68ba      	ldr	r2, [r7, #8]
 801a4c2:	4413      	add	r3, r2
 801a4c4:	781a      	ldrb	r2, [r3, #0]
 801a4c6:	69bb      	ldr	r3, [r7, #24]
 801a4c8:	68b9      	ldr	r1, [r7, #8]
 801a4ca:	440b      	add	r3, r1
 801a4cc:	43d2      	mvns	r2, r2
 801a4ce:	b2d2      	uxtb	r2, r2
 801a4d0:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801a4d2:	69bb      	ldr	r3, [r7, #24]
 801a4d4:	68fa      	ldr	r2, [r7, #12]
 801a4d6:	4413      	add	r3, r2
 801a4d8:	2200      	movs	r2, #0
 801a4da:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801a4dc:	69bb      	ldr	r3, [r7, #24]
 801a4de:	3301      	adds	r3, #1
 801a4e0:	61bb      	str	r3, [r7, #24]
 801a4e2:	79fb      	ldrb	r3, [r7, #7]
 801a4e4:	69ba      	ldr	r2, [r7, #24]
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	dbe9      	blt.n	801a4be <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	61bb      	str	r3, [r7, #24]
 801a4ee:	e049      	b.n	801a584 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801a4f0:	69bb      	ldr	r3, [r7, #24]
 801a4f2:	425a      	negs	r2, r3
 801a4f4:	f003 0307 	and.w	r3, r3, #7
 801a4f8:	f002 0207 	and.w	r2, r2, #7
 801a4fc:	bf58      	it	pl
 801a4fe:	4253      	negpl	r3, r2
 801a500:	b2db      	uxtb	r3, r3
 801a502:	f1c3 0307 	rsb	r3, r3, #7
 801a506:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801a508:	69bb      	ldr	r3, [r7, #24]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	da00      	bge.n	801a510 <payload_integration+0x6e>
 801a50e:	3307      	adds	r3, #7
 801a510:	10db      	asrs	r3, r3, #3
 801a512:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801a514:	69bb      	ldr	r3, [r7, #24]
 801a516:	3301      	adds	r3, #1
 801a518:	425a      	negs	r2, r3
 801a51a:	f003 0307 	and.w	r3, r3, #7
 801a51e:	f002 0207 	and.w	r2, r2, #7
 801a522:	bf58      	it	pl
 801a524:	4253      	negpl	r3, r2
 801a526:	b2db      	uxtb	r3, r3
 801a528:	f1c3 0307 	rsb	r3, r3, #7
 801a52c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801a52e:	69bb      	ldr	r3, [r7, #24]
 801a530:	3301      	adds	r3, #1
 801a532:	2b00      	cmp	r3, #0
 801a534:	da00      	bge.n	801a538 <payload_integration+0x96>
 801a536:	3307      	adds	r3, #7
 801a538:	10db      	asrs	r3, r3, #3
 801a53a:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801a53c:	7dbb      	ldrb	r3, [r7, #22]
 801a53e:	68ba      	ldr	r2, [r7, #8]
 801a540:	4413      	add	r3, r2
 801a542:	781b      	ldrb	r3, [r3, #0]
 801a544:	461a      	mov	r2, r3
 801a546:	7dfb      	ldrb	r3, [r7, #23]
 801a548:	fa42 f303 	asr.w	r3, r2, r3
 801a54c:	b2db      	uxtb	r3, r3
 801a54e:	f003 0301 	and.w	r3, r3, #1
 801a552:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801a554:	7ffa      	ldrb	r2, [r7, #31]
 801a556:	7cfb      	ldrb	r3, [r7, #19]
 801a558:	4053      	eors	r3, r2
 801a55a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801a55c:	7d3b      	ldrb	r3, [r7, #20]
 801a55e:	68fa      	ldr	r2, [r7, #12]
 801a560:	4413      	add	r3, r2
 801a562:	781b      	ldrb	r3, [r3, #0]
 801a564:	b25a      	sxtb	r2, r3
 801a566:	7ff9      	ldrb	r1, [r7, #31]
 801a568:	7d7b      	ldrb	r3, [r7, #21]
 801a56a:	fa01 f303 	lsl.w	r3, r1, r3
 801a56e:	b25b      	sxtb	r3, r3
 801a570:	4313      	orrs	r3, r2
 801a572:	b259      	sxtb	r1, r3
 801a574:	7d3b      	ldrb	r3, [r7, #20]
 801a576:	68fa      	ldr	r2, [r7, #12]
 801a578:	4413      	add	r3, r2
 801a57a:	b2ca      	uxtb	r2, r1
 801a57c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801a57e:	69bb      	ldr	r3, [r7, #24]
 801a580:	3301      	adds	r3, #1
 801a582:	61bb      	str	r3, [r7, #24]
 801a584:	79fb      	ldrb	r3, [r7, #7]
 801a586:	00db      	lsls	r3, r3, #3
 801a588:	69ba      	ldr	r2, [r7, #24]
 801a58a:	429a      	cmp	r2, r3
 801a58c:	dbb0      	blt.n	801a4f0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801a58e:	7ffb      	ldrb	r3, [r7, #31]
 801a590:	01db      	lsls	r3, r3, #7
 801a592:	b25a      	sxtb	r2, r3
 801a594:	7ffb      	ldrb	r3, [r7, #31]
 801a596:	019b      	lsls	r3, r3, #6
 801a598:	b25b      	sxtb	r3, r3
 801a59a:	4313      	orrs	r3, r2
 801a59c:	b25b      	sxtb	r3, r3
 801a59e:	7ffa      	ldrb	r2, [r7, #31]
 801a5a0:	2a00      	cmp	r2, #0
 801a5a2:	d101      	bne.n	801a5a8 <payload_integration+0x106>
 801a5a4:	2220      	movs	r2, #32
 801a5a6:	e000      	b.n	801a5aa <payload_integration+0x108>
 801a5a8:	2200      	movs	r2, #0
 801a5aa:	4313      	orrs	r3, r2
 801a5ac:	b259      	sxtb	r1, r3
 801a5ae:	79fb      	ldrb	r3, [r7, #7]
 801a5b0:	68fa      	ldr	r2, [r7, #12]
 801a5b2:	4413      	add	r3, r2
 801a5b4:	b2ca      	uxtb	r2, r1
 801a5b6:	701a      	strb	r2, [r3, #0]
}
 801a5b8:	bf00      	nop
 801a5ba:	3724      	adds	r7, #36	; 0x24
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	bc80      	pop	{r7}
 801a5c0:	4770      	bx	lr
	...

0801a5c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 801a5c4:	b580      	push	{r7, lr}
 801a5c6:	b08c      	sub	sp, #48	; 0x30
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	60b9      	str	r1, [r7, #8]
 801a5cc:	607a      	str	r2, [r7, #4]
 801a5ce:	603b      	str	r3, [r7, #0]
 801a5d0:	4603      	mov	r3, r0
 801a5d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801a5d8:	2300      	movs	r3, #0
 801a5da:	623b      	str	r3, [r7, #32]
 801a5dc:	2300      	movs	r3, #0
 801a5de:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a5e0:	f001 fdcd 	bl	801c17e <RFW_DeInit>

    if( rxContinuous != 0 )
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d001      	beq.n	801a5ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	bf14      	ite	ne
 801a5f4:	2301      	movne	r3, #1
 801a5f6:	2300      	moveq	r3, #0
 801a5f8:	b2da      	uxtb	r2, r3
 801a5fa:	4ba3      	ldr	r3, [pc, #652]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a5fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801a5fe:	7bfb      	ldrb	r3, [r7, #15]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d003      	beq.n	801a60c <RadioSetRxGenericConfig+0x48>
 801a604:	2b01      	cmp	r3, #1
 801a606:	f000 80dc 	beq.w	801a7c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801a60a:	e194      	b.n	801a936 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801a60c:	68bb      	ldr	r3, [r7, #8]
 801a60e:	689b      	ldr	r3, [r3, #8]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d003      	beq.n	801a61c <RadioSetRxGenericConfig+0x58>
 801a614:	68bb      	ldr	r3, [r7, #8]
 801a616:	68db      	ldr	r3, [r3, #12]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d102      	bne.n	801a622 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801a61c:	f04f 33ff 	mov.w	r3, #4294967295
 801a620:	e18a      	b.n	801a938 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801a622:	68bb      	ldr	r3, [r7, #8]
 801a624:	7f9b      	ldrb	r3, [r3, #30]
 801a626:	2b08      	cmp	r3, #8
 801a628:	d902      	bls.n	801a630 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801a62a:	f04f 33ff 	mov.w	r3, #4294967295
 801a62e:	e183      	b.n	801a938 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801a630:	68bb      	ldr	r3, [r7, #8]
 801a632:	6919      	ldr	r1, [r3, #16]
 801a634:	68bb      	ldr	r3, [r7, #8]
 801a636:	7f9b      	ldrb	r3, [r3, #30]
 801a638:	b29a      	uxth	r2, r3
 801a63a:	f107 0320 	add.w	r3, r7, #32
 801a63e:	4618      	mov	r0, r3
 801a640:	f001 fe5a 	bl	801c2f8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	bf14      	ite	ne
 801a64c:	2301      	movne	r3, #1
 801a64e:	2300      	moveq	r3, #0
 801a650:	b2db      	uxtb	r3, r3
 801a652:	4618      	mov	r0, r3
 801a654:	f000 fe08 	bl	801b268 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a658:	4b8b      	ldr	r3, [pc, #556]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a65a:	2200      	movs	r2, #0
 801a65c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801a660:	68bb      	ldr	r3, [r7, #8]
 801a662:	689b      	ldr	r3, [r3, #8]
 801a664:	4a88      	ldr	r2, [pc, #544]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a666:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801a668:	68bb      	ldr	r3, [r7, #8]
 801a66a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a66e:	4b86      	ldr	r3, [pc, #536]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	4618      	mov	r0, r3
 801a67a:	f001 fcb3 	bl	801bfe4 <SUBGRF_GetFskBandwidthRegValue>
 801a67e:	4603      	mov	r3, r0
 801a680:	461a      	mov	r2, r3
 801a682:	4b81      	ldr	r3, [pc, #516]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a688:	4b7f      	ldr	r3, [pc, #508]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a68a:	2200      	movs	r2, #0
 801a68c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801a68e:	68bb      	ldr	r3, [r7, #8]
 801a690:	68db      	ldr	r3, [r3, #12]
 801a692:	b29b      	uxth	r3, r3
 801a694:	00db      	lsls	r3, r3, #3
 801a696:	b29a      	uxth	r2, r3
 801a698:	4b7b      	ldr	r3, [pc, #492]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a69a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801a69c:	68bb      	ldr	r3, [r7, #8]
 801a69e:	7fda      	ldrb	r2, [r3, #31]
 801a6a0:	4b79      	ldr	r3, [pc, #484]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a6a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	7f9b      	ldrb	r3, [r3, #30]
 801a6a8:	00db      	lsls	r3, r3, #3
 801a6aa:	b2da      	uxtb	r2, r3
 801a6ac:	4b76      	ldr	r3, [pc, #472]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a6ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801a6b0:	68bb      	ldr	r3, [r7, #8]
 801a6b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801a6b6:	4b74      	ldr	r3, [pc, #464]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a6b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801a6ba:	68bb      	ldr	r3, [r7, #8]
 801a6bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d105      	bne.n	801a6d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801a6c4:	68bb      	ldr	r3, [r7, #8]
 801a6c6:	695b      	ldr	r3, [r3, #20]
 801a6c8:	b2da      	uxtb	r2, r3
 801a6ca:	4b6f      	ldr	r3, [pc, #444]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a6cc:	759a      	strb	r2, [r3, #22]
 801a6ce:	e00b      	b.n	801a6e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801a6d0:	68bb      	ldr	r3, [r7, #8]
 801a6d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a6d6:	2b02      	cmp	r3, #2
 801a6d8:	d103      	bne.n	801a6e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a6da:	4b6b      	ldr	r3, [pc, #428]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a6dc:	22ff      	movs	r2, #255	; 0xff
 801a6de:	759a      	strb	r2, [r3, #22]
 801a6e0:	e002      	b.n	801a6e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801a6e2:	4b69      	ldr	r3, [pc, #420]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a6e4:	22ff      	movs	r2, #255	; 0xff
 801a6e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a6e8:	68bb      	ldr	r3, [r7, #8]
 801a6ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801a6ee:	2b02      	cmp	r3, #2
 801a6f0:	d004      	beq.n	801a6fc <RadioSetRxGenericConfig+0x138>
 801a6f2:	68bb      	ldr	r3, [r7, #8]
 801a6f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801a6f8:	2b02      	cmp	r3, #2
 801a6fa:	d12d      	bne.n	801a758 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a6fc:	68bb      	ldr	r3, [r7, #8]
 801a6fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a702:	2bf1      	cmp	r3, #241	; 0xf1
 801a704:	d00c      	beq.n	801a720 <RadioSetRxGenericConfig+0x15c>
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a70c:	2bf2      	cmp	r3, #242	; 0xf2
 801a70e:	d007      	beq.n	801a720 <RadioSetRxGenericConfig+0x15c>
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801a716:	2b01      	cmp	r3, #1
 801a718:	d002      	beq.n	801a720 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801a71a:	f04f 33ff 	mov.w	r3, #4294967295
 801a71e:	e10b      	b.n	801a938 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 801a720:	2300      	movs	r3, #0
 801a722:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801a728:	4b58      	ldr	r3, [pc, #352]	; (801a88c <RadioSetRxGenericConfig+0x2c8>)
 801a72a:	6819      	ldr	r1, [r3, #0]
 801a72c:	f107 0314 	add.w	r3, r7, #20
 801a730:	4a57      	ldr	r2, [pc, #348]	; (801a890 <RadioSetRxGenericConfig+0x2cc>)
 801a732:	4618      	mov	r0, r3
 801a734:	f001 fd16 	bl	801c164 <RFW_Init>
 801a738:	4603      	mov	r3, r0
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d002      	beq.n	801a744 <RadioSetRxGenericConfig+0x180>
            return -1;
 801a73e:	f04f 33ff 	mov.w	r3, #4294967295
 801a742:	e0f9      	b.n	801a938 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a744:	4b50      	ldr	r3, [pc, #320]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a746:	2200      	movs	r2, #0
 801a748:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801a74a:	4b4f      	ldr	r3, [pc, #316]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a74c:	2201      	movs	r2, #1
 801a74e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a750:	4b4d      	ldr	r3, [pc, #308]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a752:	2200      	movs	r2, #0
 801a754:	755a      	strb	r2, [r3, #21]
        {
 801a756:	e00e      	b.n	801a776 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a758:	68bb      	ldr	r3, [r7, #8]
 801a75a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801a75e:	4b4a      	ldr	r3, [pc, #296]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a760:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801a768:	4b47      	ldr	r3, [pc, #284]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a76a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801a76c:	68bb      	ldr	r3, [r7, #8]
 801a76e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801a772:	4b45      	ldr	r3, [pc, #276]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a774:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801a776:	f7ff fa48 	bl	8019c0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a77a:	2000      	movs	r0, #0
 801a77c:	f7fe fbf2 	bl	8018f64 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a780:	4844      	ldr	r0, [pc, #272]	; (801a894 <RadioSetRxGenericConfig+0x2d0>)
 801a782:	f001 f80b 	bl	801b79c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a786:	4844      	ldr	r0, [pc, #272]	; (801a898 <RadioSetRxGenericConfig+0x2d4>)
 801a788:	f001 f8da 	bl	801b940 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a78c:	f107 0320 	add.w	r3, r7, #32
 801a790:	4618      	mov	r0, r3
 801a792:	f000 fba2 	bl	801aeda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a796:	68bb      	ldr	r3, [r7, #8]
 801a798:	8b9b      	ldrh	r3, [r3, #28]
 801a79a:	4618      	mov	r0, r3
 801a79c:	f000 fbec 	bl	801af78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	8b1b      	ldrh	r3, [r3, #24]
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f000 fbc7 	bl	801af38 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801a7aa:	683b      	ldr	r3, [r7, #0]
 801a7ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a7b0:	fb03 f202 	mul.w	r2, r3, r2
 801a7b4:	68bb      	ldr	r3, [r7, #8]
 801a7b6:	689b      	ldr	r3, [r3, #8]
 801a7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a7bc:	4a32      	ldr	r2, [pc, #200]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a7be:	6093      	str	r3, [r2, #8]
        break;
 801a7c0:	e0b9      	b.n	801a936 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801a7c2:	68bb      	ldr	r3, [r7, #8]
 801a7c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d102      	bne.n	801a7d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801a7ca:	f04f 33ff 	mov.w	r3, #4294967295
 801a7ce:	e0b3      	b.n	801a938 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801a7d6:	2b01      	cmp	r3, #1
 801a7d8:	d104      	bne.n	801a7e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801a7da:	68bb      	ldr	r3, [r7, #8]
 801a7dc:	695b      	ldr	r3, [r3, #20]
 801a7de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801a7e2:	e002      	b.n	801a7ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801a7e4:	23ff      	movs	r3, #255	; 0xff
 801a7e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	bf14      	ite	ne
 801a7f2:	2301      	movne	r3, #1
 801a7f4:	2300      	moveq	r3, #0
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f000 fd35 	bl	801b268 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a7fe:	683b      	ldr	r3, [r7, #0]
 801a800:	b2db      	uxtb	r3, r3
 801a802:	4618      	mov	r0, r3
 801a804:	f000 fd3f 	bl	801b286 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a808:	4b1f      	ldr	r3, [pc, #124]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a80a:	2201      	movs	r2, #1
 801a80c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a816:	4b1c      	ldr	r3, [pc, #112]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a81c:	68bb      	ldr	r3, [r7, #8]
 801a81e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801a822:	4b19      	ldr	r3, [pc, #100]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a828:	68bb      	ldr	r3, [r7, #8]
 801a82a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801a82e:	4b16      	ldr	r3, [pc, #88]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a830:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a834:	68bb      	ldr	r3, [r7, #8]
 801a836:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801a83a:	2b02      	cmp	r3, #2
 801a83c:	d010      	beq.n	801a860 <RadioSetRxGenericConfig+0x29c>
 801a83e:	2b02      	cmp	r3, #2
 801a840:	dc2c      	bgt.n	801a89c <RadioSetRxGenericConfig+0x2d8>
 801a842:	2b00      	cmp	r3, #0
 801a844:	d002      	beq.n	801a84c <RadioSetRxGenericConfig+0x288>
 801a846:	2b01      	cmp	r3, #1
 801a848:	d005      	beq.n	801a856 <RadioSetRxGenericConfig+0x292>
            break;
 801a84a:	e027      	b.n	801a89c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a84c:	4b0e      	ldr	r3, [pc, #56]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a84e:	2200      	movs	r2, #0
 801a850:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a854:	e023      	b.n	801a89e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a856:	4b0c      	ldr	r3, [pc, #48]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a858:	2201      	movs	r2, #1
 801a85a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a85e:	e01e      	b.n	801a89e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a866:	2b0b      	cmp	r3, #11
 801a868:	d004      	beq.n	801a874 <RadioSetRxGenericConfig+0x2b0>
 801a86a:	68bb      	ldr	r3, [r7, #8]
 801a86c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a870:	2b0c      	cmp	r3, #12
 801a872:	d104      	bne.n	801a87e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a874:	4b04      	ldr	r3, [pc, #16]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a876:	2201      	movs	r2, #1
 801a878:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a87c:	e00f      	b.n	801a89e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a87e:	4b02      	ldr	r3, [pc, #8]	; (801a888 <RadioSetRxGenericConfig+0x2c4>)
 801a880:	2200      	movs	r2, #0
 801a882:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a886:	e00a      	b.n	801a89e <RadioSetRxGenericConfig+0x2da>
 801a888:	20001bb4 	.word	0x20001bb4
 801a88c:	20001bb0 	.word	0x20001bb0
 801a890:	20001c28 	.word	0x20001c28
 801a894:	20001bec 	.word	0x20001bec
 801a898:	20001bc2 	.word	0x20001bc2
            break;
 801a89c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a89e:	4b28      	ldr	r3, [pc, #160]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8a0:	2201      	movs	r2, #1
 801a8a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a8a4:	68bb      	ldr	r3, [r7, #8]
 801a8a6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801a8a8:	4b25      	ldr	r3, [pc, #148]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a8ac:	68bb      	ldr	r3, [r7, #8]
 801a8ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801a8b2:	4b23      	ldr	r3, [pc, #140]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a8b6:	4a22      	ldr	r2, [pc, #136]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801a8bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a8be:	68bb      	ldr	r3, [r7, #8]
 801a8c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801a8c4:	4b1e      	ldr	r3, [pc, #120]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a8ca:	68bb      	ldr	r3, [r7, #8]
 801a8cc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801a8d0:	4b1b      	ldr	r3, [pc, #108]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801a8d6:	f7ff f998 	bl	8019c0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a8da:	2001      	movs	r0, #1
 801a8dc:	f7fe fb42 	bl	8018f64 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a8e0:	4818      	ldr	r0, [pc, #96]	; (801a944 <RadioSetRxGenericConfig+0x380>)
 801a8e2:	f000 ff5b 	bl	801b79c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a8e6:	4818      	ldr	r0, [pc, #96]	; (801a948 <RadioSetRxGenericConfig+0x384>)
 801a8e8:	f001 f82a 	bl	801b940 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a8ec:	4b14      	ldr	r3, [pc, #80]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a8ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a8f2:	2b01      	cmp	r3, #1
 801a8f4:	d10d      	bne.n	801a912 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a8f6:	f240 7036 	movw	r0, #1846	; 0x736
 801a8fa:	f001 f97d 	bl	801bbf8 <SUBGRF_ReadRegister>
 801a8fe:	4603      	mov	r3, r0
 801a900:	f023 0304 	bic.w	r3, r3, #4
 801a904:	b2db      	uxtb	r3, r3
 801a906:	4619      	mov	r1, r3
 801a908:	f240 7036 	movw	r0, #1846	; 0x736
 801a90c:	f001 f960 	bl	801bbd0 <SUBGRF_WriteRegister>
 801a910:	e00c      	b.n	801a92c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a912:	f240 7036 	movw	r0, #1846	; 0x736
 801a916:	f001 f96f 	bl	801bbf8 <SUBGRF_ReadRegister>
 801a91a:	4603      	mov	r3, r0
 801a91c:	f043 0304 	orr.w	r3, r3, #4
 801a920:	b2db      	uxtb	r3, r3
 801a922:	4619      	mov	r1, r3
 801a924:	f240 7036 	movw	r0, #1846	; 0x736
 801a928:	f001 f952 	bl	801bbd0 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801a92c:	4b04      	ldr	r3, [pc, #16]	; (801a940 <RadioSetRxGenericConfig+0x37c>)
 801a92e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a932:	609a      	str	r2, [r3, #8]
        break;
 801a934:	bf00      	nop
    }
    return status;
 801a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a938:	4618      	mov	r0, r3
 801a93a:	3730      	adds	r7, #48	; 0x30
 801a93c:	46bd      	mov	sp, r7
 801a93e:	bd80      	pop	{r7, pc}
 801a940:	20001bb4 	.word	0x20001bb4
 801a944:	20001bec 	.word	0x20001bec
 801a948:	20001bc2 	.word	0x20001bc2

0801a94c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b08e      	sub	sp, #56	; 0x38
 801a950:	af00      	add	r7, sp, #0
 801a952:	60b9      	str	r1, [r7, #8]
 801a954:	607b      	str	r3, [r7, #4]
 801a956:	4603      	mov	r3, r0
 801a958:	73fb      	strb	r3, [r7, #15]
 801a95a:	4613      	mov	r3, r2
 801a95c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801a95e:	2300      	movs	r3, #0
 801a960:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a962:	2300      	movs	r3, #0
 801a964:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801a966:	f001 fc0a 	bl	801c17e <RFW_DeInit>
    switch( modem )
 801a96a:	7bfb      	ldrb	r3, [r7, #15]
 801a96c:	2b03      	cmp	r3, #3
 801a96e:	f200 8204 	bhi.w	801ad7a <RadioSetTxGenericConfig+0x42e>
 801a972:	a201      	add	r2, pc, #4	; (adr r2, 801a978 <RadioSetTxGenericConfig+0x2c>)
 801a974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a978:	0801aafd 	.word	0x0801aafd
 801a97c:	0801ac45 	.word	0x0801ac45
 801a980:	0801ad3d 	.word	0x0801ad3d
 801a984:	0801a989 	.word	0x0801a989
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801a988:	68bb      	ldr	r3, [r7, #8]
 801a98a:	7c9b      	ldrb	r3, [r3, #18]
 801a98c:	2b08      	cmp	r3, #8
 801a98e:	d902      	bls.n	801a996 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801a990:	f04f 33ff 	mov.w	r3, #4294967295
 801a994:	e206      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801a996:	68bb      	ldr	r3, [r7, #8]
 801a998:	6899      	ldr	r1, [r3, #8]
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	7c9b      	ldrb	r3, [r3, #18]
 801a99e:	b29a      	uxth	r2, r3
 801a9a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f001 fca7 	bl	801c2f8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	2b00      	cmp	r3, #0
 801a9b0:	d102      	bne.n	801a9b8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801a9b2:	f04f 33ff 	mov.w	r3, #4294967295
 801a9b6:	e1f5      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	f242 7210 	movw	r2, #10000	; 0x2710
 801a9c0:	4293      	cmp	r3, r2
 801a9c2:	d813      	bhi.n	801a9ec <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 801a9c4:	2302      	movs	r3, #2
 801a9c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801a9ca:	4b99      	ldr	r3, [pc, #612]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801a9cc:	2203      	movs	r2, #3
 801a9ce:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801a9d0:	4b97      	ldr	r3, [pc, #604]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801a9d2:	2203      	movs	r2, #3
 801a9d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4a94      	ldr	r2, [pc, #592]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801a9de:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801a9e0:	68bb      	ldr	r3, [r7, #8]
 801a9e2:	7cda      	ldrb	r2, [r3, #19]
 801a9e4:	4b92      	ldr	r3, [pc, #584]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801a9e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801a9ea:	e017      	b.n	801aa1c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a9f2:	4b8f      	ldr	r3, [pc, #572]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801a9f4:	2200      	movs	r2, #0
 801a9f6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a9f8:	4b8d      	ldr	r3, [pc, #564]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801aa00:	68bb      	ldr	r3, [r7, #8]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4a8a      	ldr	r2, [pc, #552]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa06:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	7cda      	ldrb	r2, [r3, #19]
 801aa0c:	4b88      	ldr	r3, [pc, #544]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	089b      	lsrs	r3, r3, #2
 801aa18:	4a85      	ldr	r2, [pc, #532]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa1a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	685b      	ldr	r3, [r3, #4]
 801aa20:	b29b      	uxth	r3, r3
 801aa22:	00db      	lsls	r3, r3, #3
 801aa24:	b29a      	uxth	r2, r3
 801aa26:	4b82      	ldr	r3, [pc, #520]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa28:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801aa2a:	4b81      	ldr	r3, [pc, #516]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa2c:	2204      	movs	r2, #4
 801aa2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801aa30:	68bb      	ldr	r3, [r7, #8]
 801aa32:	7c9b      	ldrb	r3, [r3, #18]
 801aa34:	00db      	lsls	r3, r3, #3
 801aa36:	b2da      	uxtb	r2, r3
 801aa38:	4b7d      	ldr	r3, [pc, #500]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801aa3c:	4b7c      	ldr	r3, [pc, #496]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa3e:	2200      	movs	r2, #0
 801aa40:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801aa42:	68bb      	ldr	r3, [r7, #8]
 801aa44:	7d9b      	ldrb	r3, [r3, #22]
 801aa46:	2b02      	cmp	r3, #2
 801aa48:	d003      	beq.n	801aa52 <RadioSetTxGenericConfig+0x106>
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	7d1b      	ldrb	r3, [r3, #20]
 801aa4e:	2b02      	cmp	r3, #2
 801aa50:	d12b      	bne.n	801aaaa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801aa52:	68bb      	ldr	r3, [r7, #8]
 801aa54:	7d5b      	ldrb	r3, [r3, #21]
 801aa56:	2bf1      	cmp	r3, #241	; 0xf1
 801aa58:	d00a      	beq.n	801aa70 <RadioSetTxGenericConfig+0x124>
 801aa5a:	68bb      	ldr	r3, [r7, #8]
 801aa5c:	7d5b      	ldrb	r3, [r3, #21]
 801aa5e:	2bf2      	cmp	r3, #242	; 0xf2
 801aa60:	d006      	beq.n	801aa70 <RadioSetTxGenericConfig+0x124>
 801aa62:	68bb      	ldr	r3, [r7, #8]
 801aa64:	7d5b      	ldrb	r3, [r3, #21]
 801aa66:	2b01      	cmp	r3, #1
 801aa68:	d002      	beq.n	801aa70 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801aa6a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa6e:	e199      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801aa74:	2301      	movs	r3, #1
 801aa76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801aa7a:	4b6e      	ldr	r3, [pc, #440]	; (801ac34 <RadioSetTxGenericConfig+0x2e8>)
 801aa7c:	6819      	ldr	r1, [r3, #0]
 801aa7e:	f107 0320 	add.w	r3, r7, #32
 801aa82:	4a6d      	ldr	r2, [pc, #436]	; (801ac38 <RadioSetTxGenericConfig+0x2ec>)
 801aa84:	4618      	mov	r0, r3
 801aa86:	f001 fb6d 	bl	801c164 <RFW_Init>
 801aa8a:	4603      	mov	r3, r0
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d002      	beq.n	801aa96 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 801aa90:	f04f 33ff 	mov.w	r3, #4294967295
 801aa94:	e186      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801aa96:	4b66      	ldr	r3, [pc, #408]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa98:	2200      	movs	r2, #0
 801aa9a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801aa9c:	4b64      	ldr	r3, [pc, #400]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aa9e:	2201      	movs	r2, #1
 801aaa0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801aaa2:	4b63      	ldr	r3, [pc, #396]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	755a      	strb	r2, [r3, #21]
        {
 801aaa8:	e00b      	b.n	801aac2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801aaaa:	68bb      	ldr	r3, [r7, #8]
 801aaac:	7d5a      	ldrb	r2, [r3, #21]
 801aaae:	4b60      	ldr	r3, [pc, #384]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aab0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801aab2:	68bb      	ldr	r3, [r7, #8]
 801aab4:	7d9a      	ldrb	r2, [r3, #22]
 801aab6:	4b5e      	ldr	r3, [pc, #376]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aab8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801aaba:	68bb      	ldr	r3, [r7, #8]
 801aabc:	7d1a      	ldrb	r2, [r3, #20]
 801aabe:	4b5c      	ldr	r3, [pc, #368]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801aac0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801aac2:	f7ff f8a2 	bl	8019c0a <RadioStandby>
        RadioSetModem( radio_modem );
 801aac6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7fe fa4a 	bl	8018f64 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801aad0:	485a      	ldr	r0, [pc, #360]	; (801ac3c <RadioSetTxGenericConfig+0x2f0>)
 801aad2:	f000 fe63 	bl	801b79c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aad6:	485a      	ldr	r0, [pc, #360]	; (801ac40 <RadioSetTxGenericConfig+0x2f4>)
 801aad8:	f000 ff32 	bl	801b940 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801aadc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801aae0:	4618      	mov	r0, r3
 801aae2:	f000 f9fa 	bl	801aeda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	8a1b      	ldrh	r3, [r3, #16]
 801aaea:	4618      	mov	r0, r3
 801aaec:	f000 fa44 	bl	801af78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 801aaf0:	68bb      	ldr	r3, [r7, #8]
 801aaf2:	899b      	ldrh	r3, [r3, #12]
 801aaf4:	4618      	mov	r0, r3
 801aaf6:	f000 fa1f 	bl	801af38 <SUBGRF_SetCrcPolynomial>
        break;
 801aafa:	e13f      	b.n	801ad7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801aafc:	68bb      	ldr	r3, [r7, #8]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	d102      	bne.n	801ab0a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801ab04:	f04f 33ff 	mov.w	r3, #4294967295
 801ab08:	e14c      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	7c9b      	ldrb	r3, [r3, #18]
 801ab0e:	2b08      	cmp	r3, #8
 801ab10:	d902      	bls.n	801ab18 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801ab12:	f04f 33ff 	mov.w	r3, #4294967295
 801ab16:	e145      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801ab18:	68bb      	ldr	r3, [r7, #8]
 801ab1a:	6899      	ldr	r1, [r3, #8]
 801ab1c:	68bb      	ldr	r3, [r7, #8]
 801ab1e:	7c9b      	ldrb	r3, [r3, #18]
 801ab20:	b29a      	uxth	r2, r3
 801ab22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ab26:	4618      	mov	r0, r3
 801ab28:	f001 fbe6 	bl	801c2f8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801ab2c:	4b40      	ldr	r3, [pc, #256]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab2e:	2200      	movs	r2, #0
 801ab30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801ab34:	68bb      	ldr	r3, [r7, #8]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	4a3d      	ldr	r2, [pc, #244]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab3a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801ab3c:	68bb      	ldr	r3, [r7, #8]
 801ab3e:	7cda      	ldrb	r2, [r3, #19]
 801ab40:	4b3b      	ldr	r3, [pc, #236]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	699b      	ldr	r3, [r3, #24]
 801ab4a:	4a39      	ldr	r2, [pc, #228]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab4c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801ab4e:	4b38      	ldr	r3, [pc, #224]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab50:	2200      	movs	r2, #0
 801ab52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	685b      	ldr	r3, [r3, #4]
 801ab58:	b29b      	uxth	r3, r3
 801ab5a:	00db      	lsls	r3, r3, #3
 801ab5c:	b29a      	uxth	r2, r3
 801ab5e:	4b34      	ldr	r3, [pc, #208]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801ab62:	4b33      	ldr	r3, [pc, #204]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab64:	2204      	movs	r2, #4
 801ab66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	7c9b      	ldrb	r3, [r3, #18]
 801ab6c:	00db      	lsls	r3, r3, #3
 801ab6e:	b2da      	uxtb	r2, r3
 801ab70:	4b2f      	ldr	r3, [pc, #188]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801ab74:	4b2e      	ldr	r3, [pc, #184]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801ab76:	2200      	movs	r2, #0
 801ab78:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801ab7a:	68bb      	ldr	r3, [r7, #8]
 801ab7c:	7d9b      	ldrb	r3, [r3, #22]
 801ab7e:	2b02      	cmp	r3, #2
 801ab80:	d003      	beq.n	801ab8a <RadioSetTxGenericConfig+0x23e>
 801ab82:	68bb      	ldr	r3, [r7, #8]
 801ab84:	7d1b      	ldrb	r3, [r3, #20]
 801ab86:	2b02      	cmp	r3, #2
 801ab88:	d12a      	bne.n	801abe0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801ab8a:	68bb      	ldr	r3, [r7, #8]
 801ab8c:	7d5b      	ldrb	r3, [r3, #21]
 801ab8e:	2bf1      	cmp	r3, #241	; 0xf1
 801ab90:	d00a      	beq.n	801aba8 <RadioSetTxGenericConfig+0x25c>
 801ab92:	68bb      	ldr	r3, [r7, #8]
 801ab94:	7d5b      	ldrb	r3, [r3, #21]
 801ab96:	2bf2      	cmp	r3, #242	; 0xf2
 801ab98:	d006      	beq.n	801aba8 <RadioSetTxGenericConfig+0x25c>
 801ab9a:	68bb      	ldr	r3, [r7, #8]
 801ab9c:	7d5b      	ldrb	r3, [r3, #21]
 801ab9e:	2b01      	cmp	r3, #1
 801aba0:	d002      	beq.n	801aba8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801aba2:	f04f 33ff 	mov.w	r3, #4294967295
 801aba6:	e0fd      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801aba8:	2301      	movs	r3, #1
 801abaa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801abb0:	4b20      	ldr	r3, [pc, #128]	; (801ac34 <RadioSetTxGenericConfig+0x2e8>)
 801abb2:	6819      	ldr	r1, [r3, #0]
 801abb4:	f107 0314 	add.w	r3, r7, #20
 801abb8:	4a1f      	ldr	r2, [pc, #124]	; (801ac38 <RadioSetTxGenericConfig+0x2ec>)
 801abba:	4618      	mov	r0, r3
 801abbc:	f001 fad2 	bl	801c164 <RFW_Init>
 801abc0:	4603      	mov	r3, r0
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d002      	beq.n	801abcc <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801abc6:	f04f 33ff 	mov.w	r3, #4294967295
 801abca:	e0eb      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801abcc:	4b18      	ldr	r3, [pc, #96]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801abce:	2200      	movs	r2, #0
 801abd0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801abd2:	4b17      	ldr	r3, [pc, #92]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801abd4:	2201      	movs	r2, #1
 801abd6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801abd8:	4b15      	ldr	r3, [pc, #84]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801abda:	2200      	movs	r2, #0
 801abdc:	755a      	strb	r2, [r3, #21]
        {
 801abde:	e00b      	b.n	801abf8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801abe0:	68bb      	ldr	r3, [r7, #8]
 801abe2:	7d5a      	ldrb	r2, [r3, #21]
 801abe4:	4b12      	ldr	r3, [pc, #72]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801abe6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801abe8:	68bb      	ldr	r3, [r7, #8]
 801abea:	7d9a      	ldrb	r2, [r3, #22]
 801abec:	4b10      	ldr	r3, [pc, #64]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801abee:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801abf0:	68bb      	ldr	r3, [r7, #8]
 801abf2:	7d1a      	ldrb	r2, [r3, #20]
 801abf4:	4b0e      	ldr	r3, [pc, #56]	; (801ac30 <RadioSetTxGenericConfig+0x2e4>)
 801abf6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801abf8:	f7ff f807 	bl	8019c0a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801abfc:	2000      	movs	r0, #0
 801abfe:	f7fe f9b1 	bl	8018f64 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ac02:	480e      	ldr	r0, [pc, #56]	; (801ac3c <RadioSetTxGenericConfig+0x2f0>)
 801ac04:	f000 fdca 	bl	801b79c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac08:	480d      	ldr	r0, [pc, #52]	; (801ac40 <RadioSetTxGenericConfig+0x2f4>)
 801ac0a:	f000 fe99 	bl	801b940 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801ac0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ac12:	4618      	mov	r0, r3
 801ac14:	f000 f961 	bl	801aeda <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	8a1b      	ldrh	r3, [r3, #16]
 801ac1c:	4618      	mov	r0, r3
 801ac1e:	f000 f9ab 	bl	801af78 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801ac22:	68bb      	ldr	r3, [r7, #8]
 801ac24:	899b      	ldrh	r3, [r3, #12]
 801ac26:	4618      	mov	r0, r3
 801ac28:	f000 f986 	bl	801af38 <SUBGRF_SetCrcPolynomial>
        break;
 801ac2c:	e0a6      	b.n	801ad7c <RadioSetTxGenericConfig+0x430>
 801ac2e:	bf00      	nop
 801ac30:	20001bb4 	.word	0x20001bb4
 801ac34:	20001bb0 	.word	0x20001bb0
 801ac38:	20001c10 	.word	0x20001c10
 801ac3c:	20001bec 	.word	0x20001bec
 801ac40:	20001bc2 	.word	0x20001bc2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801ac44:	4b59      	ldr	r3, [pc, #356]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ac46:	2201      	movs	r2, #1
 801ac48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801ac4c:	68bb      	ldr	r3, [r7, #8]
 801ac4e:	781a      	ldrb	r2, [r3, #0]
 801ac50:	4b56      	ldr	r3, [pc, #344]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ac52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801ac56:	68bb      	ldr	r3, [r7, #8]
 801ac58:	785a      	ldrb	r2, [r3, #1]
 801ac5a:	4b54      	ldr	r3, [pc, #336]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ac5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	789a      	ldrb	r2, [r3, #2]
 801ac64:	4b51      	ldr	r3, [pc, #324]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ac66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801ac6a:	68bb      	ldr	r3, [r7, #8]
 801ac6c:	78db      	ldrb	r3, [r3, #3]
 801ac6e:	2b02      	cmp	r3, #2
 801ac70:	d010      	beq.n	801ac94 <RadioSetTxGenericConfig+0x348>
 801ac72:	2b02      	cmp	r3, #2
 801ac74:	dc20      	bgt.n	801acb8 <RadioSetTxGenericConfig+0x36c>
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d002      	beq.n	801ac80 <RadioSetTxGenericConfig+0x334>
 801ac7a:	2b01      	cmp	r3, #1
 801ac7c:	d005      	beq.n	801ac8a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801ac7e:	e01b      	b.n	801acb8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801ac80:	4b4a      	ldr	r3, [pc, #296]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ac82:	2200      	movs	r2, #0
 801ac84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac88:	e017      	b.n	801acba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801ac8a:	4b48      	ldr	r3, [pc, #288]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ac8c:	2201      	movs	r2, #1
 801ac8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801ac92:	e012      	b.n	801acba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	2b0b      	cmp	r3, #11
 801ac9a:	d003      	beq.n	801aca4 <RadioSetTxGenericConfig+0x358>
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	781b      	ldrb	r3, [r3, #0]
 801aca0:	2b0c      	cmp	r3, #12
 801aca2:	d104      	bne.n	801acae <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801aca4:	4b41      	ldr	r3, [pc, #260]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801aca6:	2201      	movs	r2, #1
 801aca8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801acac:	e005      	b.n	801acba <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801acae:	4b3f      	ldr	r3, [pc, #252]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801acb0:	2200      	movs	r2, #0
 801acb2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801acb6:	e000      	b.n	801acba <RadioSetTxGenericConfig+0x36e>
            break;
 801acb8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801acba:	4b3c      	ldr	r3, [pc, #240]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801acbc:	2201      	movs	r2, #1
 801acbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	889a      	ldrh	r2, [r3, #4]
 801acc4:	4b39      	ldr	r3, [pc, #228]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801acc6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801acc8:	68bb      	ldr	r3, [r7, #8]
 801acca:	799a      	ldrb	r2, [r3, #6]
 801accc:	4b37      	ldr	r3, [pc, #220]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801acce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801acd0:	68bb      	ldr	r3, [r7, #8]
 801acd2:	79da      	ldrb	r2, [r3, #7]
 801acd4:	4b35      	ldr	r3, [pc, #212]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801acd6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	7a1a      	ldrb	r2, [r3, #8]
 801acde:	4b33      	ldr	r3, [pc, #204]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ace0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801ace4:	f7fe ff91 	bl	8019c0a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801ace8:	2001      	movs	r0, #1
 801acea:	f7fe f93b 	bl	8018f64 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801acee:	4830      	ldr	r0, [pc, #192]	; (801adb0 <RadioSetTxGenericConfig+0x464>)
 801acf0:	f000 fd54 	bl	801b79c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801acf4:	482f      	ldr	r0, [pc, #188]	; (801adb4 <RadioSetTxGenericConfig+0x468>)
 801acf6:	f000 fe23 	bl	801b940 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801acfa:	4b2c      	ldr	r3, [pc, #176]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801acfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ad00:	2b06      	cmp	r3, #6
 801ad02:	d10d      	bne.n	801ad20 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ad04:	f640 0089 	movw	r0, #2185	; 0x889
 801ad08:	f000 ff76 	bl	801bbf8 <SUBGRF_ReadRegister>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	f023 0304 	bic.w	r3, r3, #4
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	4619      	mov	r1, r3
 801ad16:	f640 0089 	movw	r0, #2185	; 0x889
 801ad1a:	f000 ff59 	bl	801bbd0 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801ad1e:	e02d      	b.n	801ad7c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ad20:	f640 0089 	movw	r0, #2185	; 0x889
 801ad24:	f000 ff68 	bl	801bbf8 <SUBGRF_ReadRegister>
 801ad28:	4603      	mov	r3, r0
 801ad2a:	f043 0304 	orr.w	r3, r3, #4
 801ad2e:	b2db      	uxtb	r3, r3
 801ad30:	4619      	mov	r1, r3
 801ad32:	f640 0089 	movw	r0, #2185	; 0x889
 801ad36:	f000 ff4b 	bl	801bbd0 <SUBGRF_WriteRegister>
        break;
 801ad3a:	e01f      	b.n	801ad7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d004      	beq.n	801ad4e <RadioSetTxGenericConfig+0x402>
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801ad4c:	d902      	bls.n	801ad54 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801ad4e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad52:	e027      	b.n	801ada4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801ad54:	2003      	movs	r0, #3
 801ad56:	f7fe f905 	bl	8018f64 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801ad5a:	4b14      	ldr	r3, [pc, #80]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ad5c:	2202      	movs	r2, #2
 801ad5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801ad62:	68bb      	ldr	r3, [r7, #8]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	4a11      	ldr	r2, [pc, #68]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ad68:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801ad6a:	4b10      	ldr	r3, [pc, #64]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ad6c:	2216      	movs	r2, #22
 801ad6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801ad72:	480f      	ldr	r0, [pc, #60]	; (801adb0 <RadioSetTxGenericConfig+0x464>)
 801ad74:	f000 fd12 	bl	801b79c <SUBGRF_SetModulationParams>
        break;
 801ad78:	e000      	b.n	801ad7c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801ad7a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801ad7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ad80:	4618      	mov	r0, r3
 801ad82:	f001 f841 	bl	801be08 <SUBGRF_SetRfTxPower>
 801ad86:	4603      	mov	r3, r0
 801ad88:	461a      	mov	r2, r3
 801ad8a:	4b08      	ldr	r3, [pc, #32]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ad8c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801ad90:	4b06      	ldr	r3, [pc, #24]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ad92:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad96:	4618      	mov	r0, r3
 801ad98:	f001 fa05 	bl	801c1a6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801ad9c:	4a03      	ldr	r2, [pc, #12]	; (801adac <RadioSetTxGenericConfig+0x460>)
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	6053      	str	r3, [r2, #4]
    return 0;
 801ada2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ada4:	4618      	mov	r0, r3
 801ada6:	3738      	adds	r7, #56	; 0x38
 801ada8:	46bd      	mov	sp, r7
 801adaa:	bd80      	pop	{r7, pc}
 801adac:	20001bb4 	.word	0x20001bb4
 801adb0:	20001bec 	.word	0x20001bec
 801adb4:	20001bc2 	.word	0x20001bc2

0801adb8 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801adb8:	b580      	push	{r7, lr}
 801adba:	b084      	sub	sp, #16
 801adbc:	af00      	add	r7, sp, #0
 801adbe:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	2b00      	cmp	r3, #0
 801adc4:	d002      	beq.n	801adcc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801adc6:	4a1a      	ldr	r2, [pc, #104]	; (801ae30 <SUBGRF_Init+0x78>)
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801adcc:	f7e6 fe62 	bl	8001a94 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801add0:	2002      	movs	r0, #2
 801add2:	f001 f8e5 	bl	801bfa0 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801add6:	4b17      	ldr	r3, [pc, #92]	; (801ae34 <SUBGRF_Init+0x7c>)
 801add8:	2200      	movs	r2, #0
 801adda:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801addc:	2000      	movs	r0, #0
 801adde:	f000 f977 	bl	801b0d0 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801ade2:	f7f0 fa2b 	bl	800b23c <RBI_IsTCXO>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b01      	cmp	r3, #1
 801adea:	d10e      	bne.n	801ae0a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801adec:	2140      	movs	r1, #64	; 0x40
 801adee:	2001      	movs	r0, #1
 801adf0:	f000 fb78 	bl	801b4e4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801adf4:	2100      	movs	r1, #0
 801adf6:	f640 1011 	movw	r0, #2321	; 0x911
 801adfa:	f000 fee9 	bl	801bbd0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801adfe:	237f      	movs	r3, #127	; 0x7f
 801ae00:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801ae02:	7b38      	ldrb	r0, [r7, #12]
 801ae04:	f000 fa85 	bl	801b312 <SUBGRF_Calibrate>
 801ae08:	e009      	b.n	801ae1e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ae0a:	2120      	movs	r1, #32
 801ae0c:	f640 1011 	movw	r0, #2321	; 0x911
 801ae10:	f000 fede 	bl	801bbd0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801ae14:	2120      	movs	r1, #32
 801ae16:	f640 1012 	movw	r0, #2322	; 0x912
 801ae1a:	f000 fed9 	bl	801bbd0 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801ae1e:	f7f0 f9f1 	bl	800b204 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801ae22:	4b05      	ldr	r3, [pc, #20]	; (801ae38 <SUBGRF_Init+0x80>)
 801ae24:	2201      	movs	r2, #1
 801ae26:	701a      	strb	r2, [r3, #0]
}
 801ae28:	bf00      	nop
 801ae2a:	3710      	adds	r7, #16
 801ae2c:	46bd      	mov	sp, r7
 801ae2e:	bd80      	pop	{r7, pc}
 801ae30:	20001c4c 	.word	0x20001c4c
 801ae34:	20001c48 	.word	0x20001c48
 801ae38:	20001c40 	.word	0x20001c40

0801ae3c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801ae3c:	b480      	push	{r7}
 801ae3e:	af00      	add	r7, sp, #0
    return OperatingMode;
 801ae40:	4b02      	ldr	r3, [pc, #8]	; (801ae4c <SUBGRF_GetOperatingMode+0x10>)
 801ae42:	781b      	ldrb	r3, [r3, #0]
}
 801ae44:	4618      	mov	r0, r3
 801ae46:	46bd      	mov	sp, r7
 801ae48:	bc80      	pop	{r7}
 801ae4a:	4770      	bx	lr
 801ae4c:	20001c40 	.word	0x20001c40

0801ae50 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b082      	sub	sp, #8
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	460b      	mov	r3, r1
 801ae5a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801ae5c:	78fb      	ldrb	r3, [r7, #3]
 801ae5e:	461a      	mov	r2, r3
 801ae60:	6879      	ldr	r1, [r7, #4]
 801ae62:	2000      	movs	r0, #0
 801ae64:	f000 ff20 	bl	801bca8 <SUBGRF_WriteBuffer>
}
 801ae68:	bf00      	nop
 801ae6a:	3708      	adds	r7, #8
 801ae6c:	46bd      	mov	sp, r7
 801ae6e:	bd80      	pop	{r7, pc}

0801ae70 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b086      	sub	sp, #24
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	60f8      	str	r0, [r7, #12]
 801ae78:	60b9      	str	r1, [r7, #8]
 801ae7a:	4613      	mov	r3, r2
 801ae7c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801ae7e:	2300      	movs	r3, #0
 801ae80:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801ae82:	f107 0317 	add.w	r3, r7, #23
 801ae86:	4619      	mov	r1, r3
 801ae88:	68b8      	ldr	r0, [r7, #8]
 801ae8a:	f000 fe23 	bl	801bad4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801ae8e:	68bb      	ldr	r3, [r7, #8]
 801ae90:	781b      	ldrb	r3, [r3, #0]
 801ae92:	79fa      	ldrb	r2, [r7, #7]
 801ae94:	429a      	cmp	r2, r3
 801ae96:	d201      	bcs.n	801ae9c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801ae98:	2301      	movs	r3, #1
 801ae9a:	e007      	b.n	801aeac <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801ae9c:	7df8      	ldrb	r0, [r7, #23]
 801ae9e:	68bb      	ldr	r3, [r7, #8]
 801aea0:	781b      	ldrb	r3, [r3, #0]
 801aea2:	461a      	mov	r2, r3
 801aea4:	68f9      	ldr	r1, [r7, #12]
 801aea6:	f000 ff21 	bl	801bcec <SUBGRF_ReadBuffer>

    return 0;
 801aeaa:	2300      	movs	r3, #0
}
 801aeac:	4618      	mov	r0, r3
 801aeae:	3718      	adds	r7, #24
 801aeb0:	46bd      	mov	sp, r7
 801aeb2:	bd80      	pop	{r7, pc}

0801aeb4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b084      	sub	sp, #16
 801aeb8:	af00      	add	r7, sp, #0
 801aeba:	60f8      	str	r0, [r7, #12]
 801aebc:	460b      	mov	r3, r1
 801aebe:	607a      	str	r2, [r7, #4]
 801aec0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801aec2:	7afb      	ldrb	r3, [r7, #11]
 801aec4:	4619      	mov	r1, r3
 801aec6:	68f8      	ldr	r0, [r7, #12]
 801aec8:	f7ff ffc2 	bl	801ae50 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801aecc:	6878      	ldr	r0, [r7, #4]
 801aece:	f000 f91b 	bl	801b108 <SUBGRF_SetTx>
}
 801aed2:	bf00      	nop
 801aed4:	3710      	adds	r7, #16
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd80      	pop	{r7, pc}

0801aeda <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801aeda:	b580      	push	{r7, lr}
 801aedc:	b082      	sub	sp, #8
 801aede:	af00      	add	r7, sp, #0
 801aee0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801aee2:	2208      	movs	r2, #8
 801aee4:	6879      	ldr	r1, [r7, #4]
 801aee6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801aeea:	f000 fe99 	bl	801bc20 <SUBGRF_WriteRegisters>
    return 0;
 801aeee:	2300      	movs	r3, #0
}
 801aef0:	4618      	mov	r0, r3
 801aef2:	3708      	adds	r7, #8
 801aef4:	46bd      	mov	sp, r7
 801aef6:	bd80      	pop	{r7, pc}

0801aef8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b084      	sub	sp, #16
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	4603      	mov	r3, r0
 801af00:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801af02:	88fb      	ldrh	r3, [r7, #6]
 801af04:	0a1b      	lsrs	r3, r3, #8
 801af06:	b29b      	uxth	r3, r3
 801af08:	b2db      	uxtb	r3, r3
 801af0a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801af0c:	88fb      	ldrh	r3, [r7, #6]
 801af0e:	b2db      	uxtb	r3, r3
 801af10:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801af12:	f000 fb6b 	bl	801b5ec <SUBGRF_GetPacketType>
 801af16:	4603      	mov	r3, r0
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d108      	bne.n	801af2e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801af1c:	f107 030c 	add.w	r3, r7, #12
 801af20:	2202      	movs	r2, #2
 801af22:	4619      	mov	r1, r3
 801af24:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801af28:	f000 fe7a 	bl	801bc20 <SUBGRF_WriteRegisters>
            break;
 801af2c:	e000      	b.n	801af30 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801af2e:	bf00      	nop
    }
}
 801af30:	bf00      	nop
 801af32:	3710      	adds	r7, #16
 801af34:	46bd      	mov	sp, r7
 801af36:	bd80      	pop	{r7, pc}

0801af38 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801af38:	b580      	push	{r7, lr}
 801af3a:	b084      	sub	sp, #16
 801af3c:	af00      	add	r7, sp, #0
 801af3e:	4603      	mov	r3, r0
 801af40:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801af42:	88fb      	ldrh	r3, [r7, #6]
 801af44:	0a1b      	lsrs	r3, r3, #8
 801af46:	b29b      	uxth	r3, r3
 801af48:	b2db      	uxtb	r3, r3
 801af4a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801af4c:	88fb      	ldrh	r3, [r7, #6]
 801af4e:	b2db      	uxtb	r3, r3
 801af50:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801af52:	f000 fb4b 	bl	801b5ec <SUBGRF_GetPacketType>
 801af56:	4603      	mov	r3, r0
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d108      	bne.n	801af6e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801af5c:	f107 030c 	add.w	r3, r7, #12
 801af60:	2202      	movs	r2, #2
 801af62:	4619      	mov	r1, r3
 801af64:	f240 60be 	movw	r0, #1726	; 0x6be
 801af68:	f000 fe5a 	bl	801bc20 <SUBGRF_WriteRegisters>
            break;
 801af6c:	e000      	b.n	801af70 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801af6e:	bf00      	nop
    }
}
 801af70:	bf00      	nop
 801af72:	3710      	adds	r7, #16
 801af74:	46bd      	mov	sp, r7
 801af76:	bd80      	pop	{r7, pc}

0801af78 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801af78:	b580      	push	{r7, lr}
 801af7a:	b084      	sub	sp, #16
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	4603      	mov	r3, r0
 801af80:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801af82:	2300      	movs	r3, #0
 801af84:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801af86:	f000 fb31 	bl	801b5ec <SUBGRF_GetPacketType>
 801af8a:	4603      	mov	r3, r0
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d121      	bne.n	801afd4 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801af90:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801af94:	f000 fe30 	bl	801bbf8 <SUBGRF_ReadRegister>
 801af98:	4603      	mov	r3, r0
 801af9a:	f023 0301 	bic.w	r3, r3, #1
 801af9e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801afa0:	88fb      	ldrh	r3, [r7, #6]
 801afa2:	0a1b      	lsrs	r3, r3, #8
 801afa4:	b29b      	uxth	r3, r3
 801afa6:	b25b      	sxtb	r3, r3
 801afa8:	f003 0301 	and.w	r3, r3, #1
 801afac:	b25a      	sxtb	r2, r3
 801afae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801afb2:	4313      	orrs	r3, r2
 801afb4:	b25b      	sxtb	r3, r3
 801afb6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801afb8:	7bfb      	ldrb	r3, [r7, #15]
 801afba:	4619      	mov	r1, r3
 801afbc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801afc0:	f000 fe06 	bl	801bbd0 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801afc4:	88fb      	ldrh	r3, [r7, #6]
 801afc6:	b2db      	uxtb	r3, r3
 801afc8:	4619      	mov	r1, r3
 801afca:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801afce:	f000 fdff 	bl	801bbd0 <SUBGRF_WriteRegister>
            break;
 801afd2:	e000      	b.n	801afd6 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801afd4:	bf00      	nop
    }
}
 801afd6:	bf00      	nop
 801afd8:	3710      	adds	r7, #16
 801afda:	46bd      	mov	sp, r7
 801afdc:	bd80      	pop	{r7, pc}

0801afde <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801afde:	b580      	push	{r7, lr}
 801afe0:	b082      	sub	sp, #8
 801afe2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801afe4:	2300      	movs	r3, #0
 801afe6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801afe8:	2300      	movs	r3, #0
 801afea:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801afec:	2300      	movs	r3, #0
 801afee:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801aff0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801aff4:	f000 fe00 	bl	801bbf8 <SUBGRF_ReadRegister>
 801aff8:	4603      	mov	r3, r0
 801affa:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801affc:	79fb      	ldrb	r3, [r7, #7]
 801affe:	f023 0301 	bic.w	r3, r3, #1
 801b002:	b2db      	uxtb	r3, r3
 801b004:	4619      	mov	r1, r3
 801b006:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b00a:	f000 fde1 	bl	801bbd0 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801b00e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b012:	f000 fdf1 	bl	801bbf8 <SUBGRF_ReadRegister>
 801b016:	4603      	mov	r3, r0
 801b018:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801b01a:	79bb      	ldrb	r3, [r7, #6]
 801b01c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801b020:	b2db      	uxtb	r3, r3
 801b022:	4619      	mov	r1, r3
 801b024:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b028:	f000 fdd2 	bl	801bbd0 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801b02c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801b030:	f000 f88a 	bl	801b148 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801b034:	463b      	mov	r3, r7
 801b036:	2204      	movs	r2, #4
 801b038:	4619      	mov	r1, r3
 801b03a:	f640 0019 	movw	r0, #2073	; 0x819
 801b03e:	f000 fe11 	bl	801bc64 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801b042:	2000      	movs	r0, #0
 801b044:	f000 f844 	bl	801b0d0 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801b048:	79fb      	ldrb	r3, [r7, #7]
 801b04a:	4619      	mov	r1, r3
 801b04c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801b050:	f000 fdbe 	bl	801bbd0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801b054:	79bb      	ldrb	r3, [r7, #6]
 801b056:	4619      	mov	r1, r3
 801b058:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801b05c:	f000 fdb8 	bl	801bbd0 <SUBGRF_WriteRegister>

    return number;
 801b060:	683b      	ldr	r3, [r7, #0]
}
 801b062:	4618      	mov	r0, r3
 801b064:	3708      	adds	r7, #8
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}
	...

0801b06c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801b06c:	b580      	push	{r7, lr}
 801b06e:	b084      	sub	sp, #16
 801b070:	af00      	add	r7, sp, #0
 801b072:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801b074:	2000      	movs	r0, #0
 801b076:	f7f0 f8cc 	bl	800b212 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801b07a:	2002      	movs	r0, #2
 801b07c:	f000 ff90 	bl	801bfa0 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b080:	793b      	ldrb	r3, [r7, #4]
 801b082:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b086:	b2db      	uxtb	r3, r3
 801b088:	009b      	lsls	r3, r3, #2
 801b08a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b08c:	793b      	ldrb	r3, [r7, #4]
 801b08e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b092:	b2db      	uxtb	r3, r3
 801b094:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b096:	b25b      	sxtb	r3, r3
 801b098:	4313      	orrs	r3, r2
 801b09a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801b09c:	793b      	ldrb	r3, [r7, #4]
 801b09e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b0a2:	b2db      	uxtb	r3, r3
 801b0a4:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801b0a6:	4313      	orrs	r3, r2
 801b0a8:	b25b      	sxtb	r3, r3
 801b0aa:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801b0ac:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801b0ae:	f107 030f 	add.w	r3, r7, #15
 801b0b2:	2201      	movs	r2, #1
 801b0b4:	4619      	mov	r1, r3
 801b0b6:	2084      	movs	r0, #132	; 0x84
 801b0b8:	f000 fe3a 	bl	801bd30 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801b0bc:	4b03      	ldr	r3, [pc, #12]	; (801b0cc <SUBGRF_SetSleep+0x60>)
 801b0be:	2200      	movs	r2, #0
 801b0c0:	701a      	strb	r2, [r3, #0]
}
 801b0c2:	bf00      	nop
 801b0c4:	3710      	adds	r7, #16
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}
 801b0ca:	bf00      	nop
 801b0cc:	20001c40 	.word	0x20001c40

0801b0d0 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b082      	sub	sp, #8
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801b0da:	1dfb      	adds	r3, r7, #7
 801b0dc:	2201      	movs	r2, #1
 801b0de:	4619      	mov	r1, r3
 801b0e0:	2080      	movs	r0, #128	; 0x80
 801b0e2:	f000 fe25 	bl	801bd30 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801b0e6:	79fb      	ldrb	r3, [r7, #7]
 801b0e8:	2b00      	cmp	r3, #0
 801b0ea:	d103      	bne.n	801b0f4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801b0ec:	4b05      	ldr	r3, [pc, #20]	; (801b104 <SUBGRF_SetStandby+0x34>)
 801b0ee:	2201      	movs	r2, #1
 801b0f0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801b0f2:	e002      	b.n	801b0fa <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801b0f4:	4b03      	ldr	r3, [pc, #12]	; (801b104 <SUBGRF_SetStandby+0x34>)
 801b0f6:	2202      	movs	r2, #2
 801b0f8:	701a      	strb	r2, [r3, #0]
}
 801b0fa:	bf00      	nop
 801b0fc:	3708      	adds	r7, #8
 801b0fe:	46bd      	mov	sp, r7
 801b100:	bd80      	pop	{r7, pc}
 801b102:	bf00      	nop
 801b104:	20001c40 	.word	0x20001c40

0801b108 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b084      	sub	sp, #16
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801b110:	4b0c      	ldr	r3, [pc, #48]	; (801b144 <SUBGRF_SetTx+0x3c>)
 801b112:	2204      	movs	r2, #4
 801b114:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	0c1b      	lsrs	r3, r3, #16
 801b11a:	b2db      	uxtb	r3, r3
 801b11c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	0a1b      	lsrs	r3, r3, #8
 801b122:	b2db      	uxtb	r3, r3
 801b124:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	b2db      	uxtb	r3, r3
 801b12a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801b12c:	f107 030c 	add.w	r3, r7, #12
 801b130:	2203      	movs	r2, #3
 801b132:	4619      	mov	r1, r3
 801b134:	2083      	movs	r0, #131	; 0x83
 801b136:	f000 fdfb 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b13a:	bf00      	nop
 801b13c:	3710      	adds	r7, #16
 801b13e:	46bd      	mov	sp, r7
 801b140:	bd80      	pop	{r7, pc}
 801b142:	bf00      	nop
 801b144:	20001c40 	.word	0x20001c40

0801b148 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801b148:	b580      	push	{r7, lr}
 801b14a:	b084      	sub	sp, #16
 801b14c:	af00      	add	r7, sp, #0
 801b14e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b150:	4b0c      	ldr	r3, [pc, #48]	; (801b184 <SUBGRF_SetRx+0x3c>)
 801b152:	2205      	movs	r2, #5
 801b154:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	0c1b      	lsrs	r3, r3, #16
 801b15a:	b2db      	uxtb	r3, r3
 801b15c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	0a1b      	lsrs	r3, r3, #8
 801b162:	b2db      	uxtb	r3, r3
 801b164:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	b2db      	uxtb	r3, r3
 801b16a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b16c:	f107 030c 	add.w	r3, r7, #12
 801b170:	2203      	movs	r2, #3
 801b172:	4619      	mov	r1, r3
 801b174:	2082      	movs	r0, #130	; 0x82
 801b176:	f000 fddb 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b17a:	bf00      	nop
 801b17c:	3710      	adds	r7, #16
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}
 801b182:	bf00      	nop
 801b184:	20001c40 	.word	0x20001c40

0801b188 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801b188:	b580      	push	{r7, lr}
 801b18a:	b084      	sub	sp, #16
 801b18c:	af00      	add	r7, sp, #0
 801b18e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801b190:	4b0e      	ldr	r3, [pc, #56]	; (801b1cc <SUBGRF_SetRxBoosted+0x44>)
 801b192:	2205      	movs	r2, #5
 801b194:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801b196:	2197      	movs	r1, #151	; 0x97
 801b198:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801b19c:	f000 fd18 	bl	801bbd0 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	0c1b      	lsrs	r3, r3, #16
 801b1a4:	b2db      	uxtb	r3, r3
 801b1a6:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	0a1b      	lsrs	r3, r3, #8
 801b1ac:	b2db      	uxtb	r3, r3
 801b1ae:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	b2db      	uxtb	r3, r3
 801b1b4:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801b1b6:	f107 030c 	add.w	r3, r7, #12
 801b1ba:	2203      	movs	r2, #3
 801b1bc:	4619      	mov	r1, r3
 801b1be:	2082      	movs	r0, #130	; 0x82
 801b1c0:	f000 fdb6 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b1c4:	bf00      	nop
 801b1c6:	3710      	adds	r7, #16
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	bd80      	pop	{r7, pc}
 801b1cc:	20001c40 	.word	0x20001c40

0801b1d0 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b084      	sub	sp, #16
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
 801b1d8:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	0c1b      	lsrs	r3, r3, #16
 801b1de:	b2db      	uxtb	r3, r3
 801b1e0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	0a1b      	lsrs	r3, r3, #8
 801b1e6:	b2db      	uxtb	r3, r3
 801b1e8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	b2db      	uxtb	r3, r3
 801b1ee:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801b1f0:	683b      	ldr	r3, [r7, #0]
 801b1f2:	0c1b      	lsrs	r3, r3, #16
 801b1f4:	b2db      	uxtb	r3, r3
 801b1f6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801b1f8:	683b      	ldr	r3, [r7, #0]
 801b1fa:	0a1b      	lsrs	r3, r3, #8
 801b1fc:	b2db      	uxtb	r3, r3
 801b1fe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801b200:	683b      	ldr	r3, [r7, #0]
 801b202:	b2db      	uxtb	r3, r3
 801b204:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801b206:	f107 0308 	add.w	r3, r7, #8
 801b20a:	2206      	movs	r2, #6
 801b20c:	4619      	mov	r1, r3
 801b20e:	2094      	movs	r0, #148	; 0x94
 801b210:	f000 fd8e 	bl	801bd30 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801b214:	4b03      	ldr	r3, [pc, #12]	; (801b224 <SUBGRF_SetRxDutyCycle+0x54>)
 801b216:	2206      	movs	r2, #6
 801b218:	701a      	strb	r2, [r3, #0]
}
 801b21a:	bf00      	nop
 801b21c:	3710      	adds	r7, #16
 801b21e:	46bd      	mov	sp, r7
 801b220:	bd80      	pop	{r7, pc}
 801b222:	bf00      	nop
 801b224:	20001c40 	.word	0x20001c40

0801b228 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801b22c:	2200      	movs	r2, #0
 801b22e:	2100      	movs	r1, #0
 801b230:	20c5      	movs	r0, #197	; 0xc5
 801b232:	f000 fd7d 	bl	801bd30 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801b236:	4b02      	ldr	r3, [pc, #8]	; (801b240 <SUBGRF_SetCad+0x18>)
 801b238:	2207      	movs	r2, #7
 801b23a:	701a      	strb	r2, [r3, #0]
}
 801b23c:	bf00      	nop
 801b23e:	bd80      	pop	{r7, pc}
 801b240:	20001c40 	.word	0x20001c40

0801b244 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801b244:	b580      	push	{r7, lr}
 801b246:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801b248:	2200      	movs	r2, #0
 801b24a:	2100      	movs	r1, #0
 801b24c:	20d1      	movs	r0, #209	; 0xd1
 801b24e:	f000 fd6f 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b252:	bf00      	nop
 801b254:	bd80      	pop	{r7, pc}

0801b256 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801b256:	b580      	push	{r7, lr}
 801b258:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801b25a:	2200      	movs	r2, #0
 801b25c:	2100      	movs	r1, #0
 801b25e:	20d2      	movs	r0, #210	; 0xd2
 801b260:	f000 fd66 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b264:	bf00      	nop
 801b266:	bd80      	pop	{r7, pc}

0801b268 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801b268:	b580      	push	{r7, lr}
 801b26a:	b082      	sub	sp, #8
 801b26c:	af00      	add	r7, sp, #0
 801b26e:	4603      	mov	r3, r0
 801b270:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801b272:	1dfb      	adds	r3, r7, #7
 801b274:	2201      	movs	r2, #1
 801b276:	4619      	mov	r1, r3
 801b278:	209f      	movs	r0, #159	; 0x9f
 801b27a:	f000 fd59 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b27e:	bf00      	nop
 801b280:	3708      	adds	r7, #8
 801b282:	46bd      	mov	sp, r7
 801b284:	bd80      	pop	{r7, pc}

0801b286 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801b286:	b580      	push	{r7, lr}
 801b288:	b084      	sub	sp, #16
 801b28a:	af00      	add	r7, sp, #0
 801b28c:	4603      	mov	r3, r0
 801b28e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801b290:	1dfb      	adds	r3, r7, #7
 801b292:	2201      	movs	r2, #1
 801b294:	4619      	mov	r1, r3
 801b296:	20a0      	movs	r0, #160	; 0xa0
 801b298:	f000 fd4a 	bl	801bd30 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801b29c:	79fb      	ldrb	r3, [r7, #7]
 801b29e:	2b3f      	cmp	r3, #63	; 0x3f
 801b2a0:	d91c      	bls.n	801b2dc <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801b2a2:	79fb      	ldrb	r3, [r7, #7]
 801b2a4:	085b      	lsrs	r3, r3, #1
 801b2a6:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801b2a8:	2300      	movs	r3, #0
 801b2aa:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801b2b0:	e005      	b.n	801b2be <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801b2b2:	7bfb      	ldrb	r3, [r7, #15]
 801b2b4:	089b      	lsrs	r3, r3, #2
 801b2b6:	73fb      	strb	r3, [r7, #15]
            exp++;
 801b2b8:	7bbb      	ldrb	r3, [r7, #14]
 801b2ba:	3301      	adds	r3, #1
 801b2bc:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801b2be:	7bfb      	ldrb	r3, [r7, #15]
 801b2c0:	2b1f      	cmp	r3, #31
 801b2c2:	d8f6      	bhi.n	801b2b2 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801b2c4:	7bfb      	ldrb	r3, [r7, #15]
 801b2c6:	00db      	lsls	r3, r3, #3
 801b2c8:	b2da      	uxtb	r2, r3
 801b2ca:	7bbb      	ldrb	r3, [r7, #14]
 801b2cc:	4413      	add	r3, r2
 801b2ce:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801b2d0:	7b7b      	ldrb	r3, [r7, #13]
 801b2d2:	4619      	mov	r1, r3
 801b2d4:	f240 7006 	movw	r0, #1798	; 0x706
 801b2d8:	f000 fc7a 	bl	801bbd0 <SUBGRF_WriteRegister>
    }
}
 801b2dc:	bf00      	nop
 801b2de:	3710      	adds	r7, #16
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bd80      	pop	{r7, pc}

0801b2e4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b082      	sub	sp, #8
 801b2e8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801b2ea:	f7ef ffae 	bl	800b24a <RBI_IsDCDC>
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	2b01      	cmp	r3, #1
 801b2f2:	d102      	bne.n	801b2fa <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801b2f4:	2301      	movs	r3, #1
 801b2f6:	71fb      	strb	r3, [r7, #7]
 801b2f8:	e001      	b.n	801b2fe <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801b2fa:	2300      	movs	r3, #0
 801b2fc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801b2fe:	1dfb      	adds	r3, r7, #7
 801b300:	2201      	movs	r2, #1
 801b302:	4619      	mov	r1, r3
 801b304:	2096      	movs	r0, #150	; 0x96
 801b306:	f000 fd13 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b30a:	bf00      	nop
 801b30c:	3708      	adds	r7, #8
 801b30e:	46bd      	mov	sp, r7
 801b310:	bd80      	pop	{r7, pc}

0801b312 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801b312:	b580      	push	{r7, lr}
 801b314:	b084      	sub	sp, #16
 801b316:	af00      	add	r7, sp, #0
 801b318:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b31a:	793b      	ldrb	r3, [r7, #4]
 801b31c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801b320:	b2db      	uxtb	r3, r3
 801b322:	019b      	lsls	r3, r3, #6
 801b324:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b326:	793b      	ldrb	r3, [r7, #4]
 801b328:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801b32c:	b2db      	uxtb	r3, r3
 801b32e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b330:	b25b      	sxtb	r3, r3
 801b332:	4313      	orrs	r3, r2
 801b334:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b336:	793b      	ldrb	r3, [r7, #4]
 801b338:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801b33c:	b2db      	uxtb	r3, r3
 801b33e:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801b340:	b25b      	sxtb	r3, r3
 801b342:	4313      	orrs	r3, r2
 801b344:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b346:	793b      	ldrb	r3, [r7, #4]
 801b348:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801b34c:	b2db      	uxtb	r3, r3
 801b34e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801b350:	b25b      	sxtb	r3, r3
 801b352:	4313      	orrs	r3, r2
 801b354:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b356:	793b      	ldrb	r3, [r7, #4]
 801b358:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801b35c:	b2db      	uxtb	r3, r3
 801b35e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801b360:	b25b      	sxtb	r3, r3
 801b362:	4313      	orrs	r3, r2
 801b364:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b366:	793b      	ldrb	r3, [r7, #4]
 801b368:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801b36c:	b2db      	uxtb	r3, r3
 801b36e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801b370:	b25b      	sxtb	r3, r3
 801b372:	4313      	orrs	r3, r2
 801b374:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801b376:	793b      	ldrb	r3, [r7, #4]
 801b378:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801b37c:	b2db      	uxtb	r3, r3
 801b37e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801b380:	4313      	orrs	r3, r2
 801b382:	b25b      	sxtb	r3, r3
 801b384:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801b386:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801b388:	f107 030f 	add.w	r3, r7, #15
 801b38c:	2201      	movs	r2, #1
 801b38e:	4619      	mov	r1, r3
 801b390:	2089      	movs	r0, #137	; 0x89
 801b392:	f000 fccd 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b396:	bf00      	nop
 801b398:	3710      	adds	r7, #16
 801b39a:	46bd      	mov	sp, r7
 801b39c:	bd80      	pop	{r7, pc}
	...

0801b3a0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b084      	sub	sp, #16
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	4a1b      	ldr	r2, [pc, #108]	; (801b418 <SUBGRF_CalibrateImage+0x78>)
 801b3ac:	4293      	cmp	r3, r2
 801b3ae:	d904      	bls.n	801b3ba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801b3b0:	23e1      	movs	r3, #225	; 0xe1
 801b3b2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801b3b4:	23e9      	movs	r3, #233	; 0xe9
 801b3b6:	737b      	strb	r3, [r7, #13]
 801b3b8:	e022      	b.n	801b400 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	4a17      	ldr	r2, [pc, #92]	; (801b41c <SUBGRF_CalibrateImage+0x7c>)
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	d904      	bls.n	801b3cc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801b3c2:	23d7      	movs	r3, #215	; 0xd7
 801b3c4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801b3c6:	23db      	movs	r3, #219	; 0xdb
 801b3c8:	737b      	strb	r3, [r7, #13]
 801b3ca:	e019      	b.n	801b400 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	4a14      	ldr	r2, [pc, #80]	; (801b420 <SUBGRF_CalibrateImage+0x80>)
 801b3d0:	4293      	cmp	r3, r2
 801b3d2:	d904      	bls.n	801b3de <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801b3d4:	23c1      	movs	r3, #193	; 0xc1
 801b3d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801b3d8:	23c5      	movs	r3, #197	; 0xc5
 801b3da:	737b      	strb	r3, [r7, #13]
 801b3dc:	e010      	b.n	801b400 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	4a10      	ldr	r2, [pc, #64]	; (801b424 <SUBGRF_CalibrateImage+0x84>)
 801b3e2:	4293      	cmp	r3, r2
 801b3e4:	d904      	bls.n	801b3f0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801b3e6:	2375      	movs	r3, #117	; 0x75
 801b3e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801b3ea:	2381      	movs	r3, #129	; 0x81
 801b3ec:	737b      	strb	r3, [r7, #13]
 801b3ee:	e007      	b.n	801b400 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	4a0d      	ldr	r2, [pc, #52]	; (801b428 <SUBGRF_CalibrateImage+0x88>)
 801b3f4:	4293      	cmp	r3, r2
 801b3f6:	d903      	bls.n	801b400 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801b3f8:	236b      	movs	r3, #107	; 0x6b
 801b3fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801b3fc:	236f      	movs	r3, #111	; 0x6f
 801b3fe:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801b400:	f107 030c 	add.w	r3, r7, #12
 801b404:	2202      	movs	r2, #2
 801b406:	4619      	mov	r1, r3
 801b408:	2098      	movs	r0, #152	; 0x98
 801b40a:	f000 fc91 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b40e:	bf00      	nop
 801b410:	3710      	adds	r7, #16
 801b412:	46bd      	mov	sp, r7
 801b414:	bd80      	pop	{r7, pc}
 801b416:	bf00      	nop
 801b418:	35a4e900 	.word	0x35a4e900
 801b41c:	32a9f880 	.word	0x32a9f880
 801b420:	2de54480 	.word	0x2de54480
 801b424:	1b6b0b00 	.word	0x1b6b0b00
 801b428:	1954fc40 	.word	0x1954fc40

0801b42c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801b42c:	b590      	push	{r4, r7, lr}
 801b42e:	b085      	sub	sp, #20
 801b430:	af00      	add	r7, sp, #0
 801b432:	4604      	mov	r4, r0
 801b434:	4608      	mov	r0, r1
 801b436:	4611      	mov	r1, r2
 801b438:	461a      	mov	r2, r3
 801b43a:	4623      	mov	r3, r4
 801b43c:	71fb      	strb	r3, [r7, #7]
 801b43e:	4603      	mov	r3, r0
 801b440:	71bb      	strb	r3, [r7, #6]
 801b442:	460b      	mov	r3, r1
 801b444:	717b      	strb	r3, [r7, #5]
 801b446:	4613      	mov	r3, r2
 801b448:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801b44a:	79fb      	ldrb	r3, [r7, #7]
 801b44c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801b44e:	79bb      	ldrb	r3, [r7, #6]
 801b450:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801b452:	797b      	ldrb	r3, [r7, #5]
 801b454:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801b456:	793b      	ldrb	r3, [r7, #4]
 801b458:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801b45a:	f107 030c 	add.w	r3, r7, #12
 801b45e:	2204      	movs	r2, #4
 801b460:	4619      	mov	r1, r3
 801b462:	2095      	movs	r0, #149	; 0x95
 801b464:	f000 fc64 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b468:	bf00      	nop
 801b46a:	3714      	adds	r7, #20
 801b46c:	46bd      	mov	sp, r7
 801b46e:	bd90      	pop	{r4, r7, pc}

0801b470 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801b470:	b590      	push	{r4, r7, lr}
 801b472:	b085      	sub	sp, #20
 801b474:	af00      	add	r7, sp, #0
 801b476:	4604      	mov	r4, r0
 801b478:	4608      	mov	r0, r1
 801b47a:	4611      	mov	r1, r2
 801b47c:	461a      	mov	r2, r3
 801b47e:	4623      	mov	r3, r4
 801b480:	80fb      	strh	r3, [r7, #6]
 801b482:	4603      	mov	r3, r0
 801b484:	80bb      	strh	r3, [r7, #4]
 801b486:	460b      	mov	r3, r1
 801b488:	807b      	strh	r3, [r7, #2]
 801b48a:	4613      	mov	r3, r2
 801b48c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801b48e:	88fb      	ldrh	r3, [r7, #6]
 801b490:	0a1b      	lsrs	r3, r3, #8
 801b492:	b29b      	uxth	r3, r3
 801b494:	b2db      	uxtb	r3, r3
 801b496:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801b498:	88fb      	ldrh	r3, [r7, #6]
 801b49a:	b2db      	uxtb	r3, r3
 801b49c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801b49e:	88bb      	ldrh	r3, [r7, #4]
 801b4a0:	0a1b      	lsrs	r3, r3, #8
 801b4a2:	b29b      	uxth	r3, r3
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801b4a8:	88bb      	ldrh	r3, [r7, #4]
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801b4ae:	887b      	ldrh	r3, [r7, #2]
 801b4b0:	0a1b      	lsrs	r3, r3, #8
 801b4b2:	b29b      	uxth	r3, r3
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801b4b8:	887b      	ldrh	r3, [r7, #2]
 801b4ba:	b2db      	uxtb	r3, r3
 801b4bc:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801b4be:	883b      	ldrh	r3, [r7, #0]
 801b4c0:	0a1b      	lsrs	r3, r3, #8
 801b4c2:	b29b      	uxth	r3, r3
 801b4c4:	b2db      	uxtb	r3, r3
 801b4c6:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801b4c8:	883b      	ldrh	r3, [r7, #0]
 801b4ca:	b2db      	uxtb	r3, r3
 801b4cc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801b4ce:	f107 0308 	add.w	r3, r7, #8
 801b4d2:	2208      	movs	r2, #8
 801b4d4:	4619      	mov	r1, r3
 801b4d6:	2008      	movs	r0, #8
 801b4d8:	f000 fc2a 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b4dc:	bf00      	nop
 801b4de:	3714      	adds	r7, #20
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	bd90      	pop	{r4, r7, pc}

0801b4e4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b084      	sub	sp, #16
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	6039      	str	r1, [r7, #0]
 801b4ee:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801b4f0:	79fb      	ldrb	r3, [r7, #7]
 801b4f2:	f003 0307 	and.w	r3, r3, #7
 801b4f6:	b2db      	uxtb	r3, r3
 801b4f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801b4fa:	683b      	ldr	r3, [r7, #0]
 801b4fc:	0c1b      	lsrs	r3, r3, #16
 801b4fe:	b2db      	uxtb	r3, r3
 801b500:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801b502:	683b      	ldr	r3, [r7, #0]
 801b504:	0a1b      	lsrs	r3, r3, #8
 801b506:	b2db      	uxtb	r3, r3
 801b508:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801b50a:	683b      	ldr	r3, [r7, #0]
 801b50c:	b2db      	uxtb	r3, r3
 801b50e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801b510:	f107 030c 	add.w	r3, r7, #12
 801b514:	2204      	movs	r2, #4
 801b516:	4619      	mov	r1, r3
 801b518:	2097      	movs	r0, #151	; 0x97
 801b51a:	f000 fc09 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b51e:	bf00      	nop
 801b520:	3710      	adds	r7, #16
 801b522:	46bd      	mov	sp, r7
 801b524:	bd80      	pop	{r7, pc}
	...

0801b528 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801b528:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b52c:	b084      	sub	sp, #16
 801b52e:	af00      	add	r7, sp, #0
 801b530:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801b532:	2300      	movs	r3, #0
 801b534:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801b536:	4b1d      	ldr	r3, [pc, #116]	; (801b5ac <SUBGRF_SetRfFrequency+0x84>)
 801b538:	781b      	ldrb	r3, [r3, #0]
 801b53a:	f083 0301 	eor.w	r3, r3, #1
 801b53e:	b2db      	uxtb	r3, r3
 801b540:	2b00      	cmp	r3, #0
 801b542:	d005      	beq.n	801b550 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801b544:	6878      	ldr	r0, [r7, #4]
 801b546:	f7ff ff2b 	bl	801b3a0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801b54a:	4b18      	ldr	r3, [pc, #96]	; (801b5ac <SUBGRF_SetRfFrequency+0x84>)
 801b54c:	2201      	movs	r2, #1
 801b54e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	2200      	movs	r2, #0
 801b554:	461c      	mov	r4, r3
 801b556:	4615      	mov	r5, r2
 801b558:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b55c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b560:	4a13      	ldr	r2, [pc, #76]	; (801b5b0 <SUBGRF_SetRfFrequency+0x88>)
 801b562:	f04f 0300 	mov.w	r3, #0
 801b566:	4640      	mov	r0, r8
 801b568:	4649      	mov	r1, r9
 801b56a:	f7e5 fb71 	bl	8000c50 <__aeabi_uldivmod>
 801b56e:	4602      	mov	r2, r0
 801b570:	460b      	mov	r3, r1
 801b572:	4613      	mov	r3, r2
 801b574:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	0e1b      	lsrs	r3, r3, #24
 801b57a:	b2db      	uxtb	r3, r3
 801b57c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	0c1b      	lsrs	r3, r3, #16
 801b582:	b2db      	uxtb	r3, r3
 801b584:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	0a1b      	lsrs	r3, r3, #8
 801b58a:	b2db      	uxtb	r3, r3
 801b58c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801b58e:	68fb      	ldr	r3, [r7, #12]
 801b590:	b2db      	uxtb	r3, r3
 801b592:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801b594:	f107 0308 	add.w	r3, r7, #8
 801b598:	2204      	movs	r2, #4
 801b59a:	4619      	mov	r1, r3
 801b59c:	2086      	movs	r0, #134	; 0x86
 801b59e:	f000 fbc7 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b5a2:	bf00      	nop
 801b5a4:	3710      	adds	r7, #16
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b5ac:	20001c48 	.word	0x20001c48
 801b5b0:	01e84800 	.word	0x01e84800

0801b5b4 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b082      	sub	sp, #8
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	4603      	mov	r3, r0
 801b5bc:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801b5be:	79fa      	ldrb	r2, [r7, #7]
 801b5c0:	4b09      	ldr	r3, [pc, #36]	; (801b5e8 <SUBGRF_SetPacketType+0x34>)
 801b5c2:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801b5c4:	79fb      	ldrb	r3, [r7, #7]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d104      	bne.n	801b5d4 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801b5ca:	2100      	movs	r1, #0
 801b5cc:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801b5d0:	f000 fafe 	bl	801bbd0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801b5d4:	1dfb      	adds	r3, r7, #7
 801b5d6:	2201      	movs	r2, #1
 801b5d8:	4619      	mov	r1, r3
 801b5da:	208a      	movs	r0, #138	; 0x8a
 801b5dc:	f000 fba8 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b5e0:	bf00      	nop
 801b5e2:	3708      	adds	r7, #8
 801b5e4:	46bd      	mov	sp, r7
 801b5e6:	bd80      	pop	{r7, pc}
 801b5e8:	20001c41 	.word	0x20001c41

0801b5ec <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801b5ec:	b480      	push	{r7}
 801b5ee:	af00      	add	r7, sp, #0
    return PacketType;
 801b5f0:	4b02      	ldr	r3, [pc, #8]	; (801b5fc <SUBGRF_GetPacketType+0x10>)
 801b5f2:	781b      	ldrb	r3, [r3, #0]
}
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	46bd      	mov	sp, r7
 801b5f8:	bc80      	pop	{r7}
 801b5fa:	4770      	bx	lr
 801b5fc:	20001c41 	.word	0x20001c41

0801b600 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801b600:	b580      	push	{r7, lr}
 801b602:	b084      	sub	sp, #16
 801b604:	af00      	add	r7, sp, #0
 801b606:	4603      	mov	r3, r0
 801b608:	71fb      	strb	r3, [r7, #7]
 801b60a:	460b      	mov	r3, r1
 801b60c:	71bb      	strb	r3, [r7, #6]
 801b60e:	4613      	mov	r3, r2
 801b610:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801b612:	79fb      	ldrb	r3, [r7, #7]
 801b614:	2b01      	cmp	r3, #1
 801b616:	d149      	bne.n	801b6ac <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801b618:	2000      	movs	r0, #0
 801b61a:	f7ef fe1d 	bl	800b258 <RBI_GetRFOMaxPowerConfig>
 801b61e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801b620:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b624:	68fa      	ldr	r2, [r7, #12]
 801b626:	429a      	cmp	r2, r3
 801b628:	da01      	bge.n	801b62e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801b62a:	68fb      	ldr	r3, [r7, #12]
 801b62c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	2b0e      	cmp	r3, #14
 801b632:	d10e      	bne.n	801b652 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801b634:	2301      	movs	r3, #1
 801b636:	2201      	movs	r2, #1
 801b638:	2100      	movs	r1, #0
 801b63a:	2004      	movs	r0, #4
 801b63c:	f7ff fef6 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b640:	79ba      	ldrb	r2, [r7, #6]
 801b642:	68fb      	ldr	r3, [r7, #12]
 801b644:	b2db      	uxtb	r3, r3
 801b646:	1ad3      	subs	r3, r2, r3
 801b648:	b2db      	uxtb	r3, r3
 801b64a:	330e      	adds	r3, #14
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	71bb      	strb	r3, [r7, #6]
 801b650:	e01f      	b.n	801b692 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	2b0a      	cmp	r3, #10
 801b656:	d10e      	bne.n	801b676 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801b658:	2301      	movs	r3, #1
 801b65a:	2201      	movs	r2, #1
 801b65c:	2100      	movs	r1, #0
 801b65e:	2001      	movs	r0, #1
 801b660:	f7ff fee4 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801b664:	79ba      	ldrb	r2, [r7, #6]
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	b2db      	uxtb	r3, r3
 801b66a:	1ad3      	subs	r3, r2, r3
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	330d      	adds	r3, #13
 801b670:	b2db      	uxtb	r3, r3
 801b672:	71bb      	strb	r3, [r7, #6]
 801b674:	e00d      	b.n	801b692 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801b676:	2301      	movs	r3, #1
 801b678:	2201      	movs	r2, #1
 801b67a:	2100      	movs	r1, #0
 801b67c:	2006      	movs	r0, #6
 801b67e:	f7ff fed5 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b682:	79ba      	ldrb	r2, [r7, #6]
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	b2db      	uxtb	r3, r3
 801b688:	1ad3      	subs	r3, r2, r3
 801b68a:	b2db      	uxtb	r3, r3
 801b68c:	330e      	adds	r3, #14
 801b68e:	b2db      	uxtb	r3, r3
 801b690:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801b692:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b696:	f113 0f11 	cmn.w	r3, #17
 801b69a:	da01      	bge.n	801b6a0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801b69c:	23ef      	movs	r3, #239	; 0xef
 801b69e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801b6a0:	2118      	movs	r1, #24
 801b6a2:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b6a6:	f000 fa93 	bl	801bbd0 <SUBGRF_WriteRegister>
 801b6aa:	e067      	b.n	801b77c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801b6ac:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b6b0:	f000 faa2 	bl	801bbf8 <SUBGRF_ReadRegister>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	f043 031e 	orr.w	r3, r3, #30
 801b6ba:	b2db      	uxtb	r3, r3
 801b6bc:	4619      	mov	r1, r3
 801b6be:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801b6c2:	f000 fa85 	bl	801bbd0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801b6c6:	2001      	movs	r0, #1
 801b6c8:	f7ef fdc6 	bl	800b258 <RBI_GetRFOMaxPowerConfig>
 801b6cc:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801b6ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b6d2:	68fa      	ldr	r2, [r7, #12]
 801b6d4:	429a      	cmp	r2, r3
 801b6d6:	da01      	bge.n	801b6dc <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	2b14      	cmp	r3, #20
 801b6e0:	d10e      	bne.n	801b700 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801b6e2:	2301      	movs	r3, #1
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	2105      	movs	r1, #5
 801b6e8:	2003      	movs	r0, #3
 801b6ea:	f7ff fe9f 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b6ee:	79ba      	ldrb	r2, [r7, #6]
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	b2db      	uxtb	r3, r3
 801b6f4:	1ad3      	subs	r3, r2, r3
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	3316      	adds	r3, #22
 801b6fa:	b2db      	uxtb	r3, r3
 801b6fc:	71bb      	strb	r3, [r7, #6]
 801b6fe:	e031      	b.n	801b764 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	2b11      	cmp	r3, #17
 801b704:	d10e      	bne.n	801b724 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801b706:	2301      	movs	r3, #1
 801b708:	2200      	movs	r2, #0
 801b70a:	2103      	movs	r1, #3
 801b70c:	2002      	movs	r0, #2
 801b70e:	f7ff fe8d 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b712:	79ba      	ldrb	r2, [r7, #6]
 801b714:	68fb      	ldr	r3, [r7, #12]
 801b716:	b2db      	uxtb	r3, r3
 801b718:	1ad3      	subs	r3, r2, r3
 801b71a:	b2db      	uxtb	r3, r3
 801b71c:	3316      	adds	r3, #22
 801b71e:	b2db      	uxtb	r3, r3
 801b720:	71bb      	strb	r3, [r7, #6]
 801b722:	e01f      	b.n	801b764 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	2b0e      	cmp	r3, #14
 801b728:	d10e      	bne.n	801b748 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801b72a:	2301      	movs	r3, #1
 801b72c:	2200      	movs	r2, #0
 801b72e:	2102      	movs	r1, #2
 801b730:	2002      	movs	r0, #2
 801b732:	f7ff fe7b 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801b736:	79ba      	ldrb	r2, [r7, #6]
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	b2db      	uxtb	r3, r3
 801b73c:	1ad3      	subs	r3, r2, r3
 801b73e:	b2db      	uxtb	r3, r3
 801b740:	330e      	adds	r3, #14
 801b742:	b2db      	uxtb	r3, r3
 801b744:	71bb      	strb	r3, [r7, #6]
 801b746:	e00d      	b.n	801b764 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801b748:	2301      	movs	r3, #1
 801b74a:	2200      	movs	r2, #0
 801b74c:	2107      	movs	r1, #7
 801b74e:	2004      	movs	r0, #4
 801b750:	f7ff fe6c 	bl	801b42c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801b754:	79ba      	ldrb	r2, [r7, #6]
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	b2db      	uxtb	r3, r3
 801b75a:	1ad3      	subs	r3, r2, r3
 801b75c:	b2db      	uxtb	r3, r3
 801b75e:	3316      	adds	r3, #22
 801b760:	b2db      	uxtb	r3, r3
 801b762:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801b764:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801b768:	f113 0f09 	cmn.w	r3, #9
 801b76c:	da01      	bge.n	801b772 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801b76e:	23f7      	movs	r3, #247	; 0xf7
 801b770:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801b772:	2138      	movs	r1, #56	; 0x38
 801b774:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801b778:	f000 fa2a 	bl	801bbd0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801b77c:	79bb      	ldrb	r3, [r7, #6]
 801b77e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801b780:	797b      	ldrb	r3, [r7, #5]
 801b782:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801b784:	f107 0308 	add.w	r3, r7, #8
 801b788:	2202      	movs	r2, #2
 801b78a:	4619      	mov	r1, r3
 801b78c:	208e      	movs	r0, #142	; 0x8e
 801b78e:	f000 facf 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801b792:	bf00      	nop
 801b794:	3710      	adds	r7, #16
 801b796:	46bd      	mov	sp, r7
 801b798:	bd80      	pop	{r7, pc}
	...

0801b79c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801b79c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801b7a0:	b086      	sub	sp, #24
 801b7a2:	af00      	add	r7, sp, #0
 801b7a4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801b7a6:	2300      	movs	r3, #0
 801b7a8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b7aa:	4a61      	ldr	r2, [pc, #388]	; (801b930 <SUBGRF_SetModulationParams+0x194>)
 801b7ac:	f107 0308 	add.w	r3, r7, #8
 801b7b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b7b4:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	781a      	ldrb	r2, [r3, #0]
 801b7bc:	4b5d      	ldr	r3, [pc, #372]	; (801b934 <SUBGRF_SetModulationParams+0x198>)
 801b7be:	781b      	ldrb	r3, [r3, #0]
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d004      	beq.n	801b7ce <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	781b      	ldrb	r3, [r3, #0]
 801b7c8:	4618      	mov	r0, r3
 801b7ca:	f7ff fef3 	bl	801b5b4 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	781b      	ldrb	r3, [r3, #0]
 801b7d2:	2b03      	cmp	r3, #3
 801b7d4:	f200 80a5 	bhi.w	801b922 <SUBGRF_SetModulationParams+0x186>
 801b7d8:	a201      	add	r2, pc, #4	; (adr r2, 801b7e0 <SUBGRF_SetModulationParams+0x44>)
 801b7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7de:	bf00      	nop
 801b7e0:	0801b7f1 	.word	0x0801b7f1
 801b7e4:	0801b8b1 	.word	0x0801b8b1
 801b7e8:	0801b873 	.word	0x0801b873
 801b7ec:	0801b8df 	.word	0x0801b8df
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801b7f0:	2308      	movs	r3, #8
 801b7f2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	685b      	ldr	r3, [r3, #4]
 801b7f8:	4a4f      	ldr	r2, [pc, #316]	; (801b938 <SUBGRF_SetModulationParams+0x19c>)
 801b7fa:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7fe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	0c1b      	lsrs	r3, r3, #16
 801b804:	b2db      	uxtb	r3, r3
 801b806:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b808:	697b      	ldr	r3, [r7, #20]
 801b80a:	0a1b      	lsrs	r3, r3, #8
 801b80c:	b2db      	uxtb	r3, r3
 801b80e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b810:	697b      	ldr	r3, [r7, #20]
 801b812:	b2db      	uxtb	r3, r3
 801b814:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	7b1b      	ldrb	r3, [r3, #12]
 801b81a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	7b5b      	ldrb	r3, [r3, #13]
 801b820:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	689b      	ldr	r3, [r3, #8]
 801b826:	2200      	movs	r2, #0
 801b828:	461c      	mov	r4, r3
 801b82a:	4615      	mov	r5, r2
 801b82c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801b830:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801b834:	4a41      	ldr	r2, [pc, #260]	; (801b93c <SUBGRF_SetModulationParams+0x1a0>)
 801b836:	f04f 0300 	mov.w	r3, #0
 801b83a:	4640      	mov	r0, r8
 801b83c:	4649      	mov	r1, r9
 801b83e:	f7e5 fa07 	bl	8000c50 <__aeabi_uldivmod>
 801b842:	4602      	mov	r2, r0
 801b844:	460b      	mov	r3, r1
 801b846:	4613      	mov	r3, r2
 801b848:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801b84a:	697b      	ldr	r3, [r7, #20]
 801b84c:	0c1b      	lsrs	r3, r3, #16
 801b84e:	b2db      	uxtb	r3, r3
 801b850:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801b852:	697b      	ldr	r3, [r7, #20]
 801b854:	0a1b      	lsrs	r3, r3, #8
 801b856:	b2db      	uxtb	r3, r3
 801b858:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801b85a:	697b      	ldr	r3, [r7, #20]
 801b85c:	b2db      	uxtb	r3, r3
 801b85e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b860:	7cfb      	ldrb	r3, [r7, #19]
 801b862:	b29a      	uxth	r2, r3
 801b864:	f107 0308 	add.w	r3, r7, #8
 801b868:	4619      	mov	r1, r3
 801b86a:	208b      	movs	r0, #139	; 0x8b
 801b86c:	f000 fa60 	bl	801bd30 <SUBGRF_WriteCommand>
        break;
 801b870:	e058      	b.n	801b924 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801b872:	2304      	movs	r3, #4
 801b874:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	691b      	ldr	r3, [r3, #16]
 801b87a:	4a2f      	ldr	r2, [pc, #188]	; (801b938 <SUBGRF_SetModulationParams+0x19c>)
 801b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 801b880:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b882:	697b      	ldr	r3, [r7, #20]
 801b884:	0c1b      	lsrs	r3, r3, #16
 801b886:	b2db      	uxtb	r3, r3
 801b888:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b88a:	697b      	ldr	r3, [r7, #20]
 801b88c:	0a1b      	lsrs	r3, r3, #8
 801b88e:	b2db      	uxtb	r3, r3
 801b890:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b892:	697b      	ldr	r3, [r7, #20]
 801b894:	b2db      	uxtb	r3, r3
 801b896:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	7d1b      	ldrb	r3, [r3, #20]
 801b89c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b89e:	7cfb      	ldrb	r3, [r7, #19]
 801b8a0:	b29a      	uxth	r2, r3
 801b8a2:	f107 0308 	add.w	r3, r7, #8
 801b8a6:	4619      	mov	r1, r3
 801b8a8:	208b      	movs	r0, #139	; 0x8b
 801b8aa:	f000 fa41 	bl	801bd30 <SUBGRF_WriteCommand>
        break;
 801b8ae:	e039      	b.n	801b924 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801b8b0:	2304      	movs	r3, #4
 801b8b2:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801b8b4:	687b      	ldr	r3, [r7, #4]
 801b8b6:	7e1b      	ldrb	r3, [r3, #24]
 801b8b8:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	7e5b      	ldrb	r3, [r3, #25]
 801b8be:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	7e9b      	ldrb	r3, [r3, #26]
 801b8c4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	7edb      	ldrb	r3, [r3, #27]
 801b8ca:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b8cc:	7cfb      	ldrb	r3, [r7, #19]
 801b8ce:	b29a      	uxth	r2, r3
 801b8d0:	f107 0308 	add.w	r3, r7, #8
 801b8d4:	4619      	mov	r1, r3
 801b8d6:	208b      	movs	r0, #139	; 0x8b
 801b8d8:	f000 fa2a 	bl	801bd30 <SUBGRF_WriteCommand>

        break;
 801b8dc:	e022      	b.n	801b924 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801b8de:	2305      	movs	r3, #5
 801b8e0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	685b      	ldr	r3, [r3, #4]
 801b8e6:	4a14      	ldr	r2, [pc, #80]	; (801b938 <SUBGRF_SetModulationParams+0x19c>)
 801b8e8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8ec:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801b8ee:	697b      	ldr	r3, [r7, #20]
 801b8f0:	0c1b      	lsrs	r3, r3, #16
 801b8f2:	b2db      	uxtb	r3, r3
 801b8f4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801b8f6:	697b      	ldr	r3, [r7, #20]
 801b8f8:	0a1b      	lsrs	r3, r3, #8
 801b8fa:	b2db      	uxtb	r3, r3
 801b8fc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801b8fe:	697b      	ldr	r3, [r7, #20]
 801b900:	b2db      	uxtb	r3, r3
 801b902:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	7b1b      	ldrb	r3, [r3, #12]
 801b908:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	7b5b      	ldrb	r3, [r3, #13]
 801b90e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801b910:	7cfb      	ldrb	r3, [r7, #19]
 801b912:	b29a      	uxth	r2, r3
 801b914:	f107 0308 	add.w	r3, r7, #8
 801b918:	4619      	mov	r1, r3
 801b91a:	208b      	movs	r0, #139	; 0x8b
 801b91c:	f000 fa08 	bl	801bd30 <SUBGRF_WriteCommand>
        break;
 801b920:	e000      	b.n	801b924 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801b922:	bf00      	nop
    }
}
 801b924:	bf00      	nop
 801b926:	3718      	adds	r7, #24
 801b928:	46bd      	mov	sp, r7
 801b92a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801b92e:	bf00      	nop
 801b930:	0801e990 	.word	0x0801e990
 801b934:	20001c41 	.word	0x20001c41
 801b938:	3d090000 	.word	0x3d090000
 801b93c:	01e84800 	.word	0x01e84800

0801b940 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801b940:	b580      	push	{r7, lr}
 801b942:	b086      	sub	sp, #24
 801b944:	af00      	add	r7, sp, #0
 801b946:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801b948:	2300      	movs	r3, #0
 801b94a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801b94c:	4a48      	ldr	r2, [pc, #288]	; (801ba70 <SUBGRF_SetPacketParams+0x130>)
 801b94e:	f107 030c 	add.w	r3, r7, #12
 801b952:	ca07      	ldmia	r2, {r0, r1, r2}
 801b954:	c303      	stmia	r3!, {r0, r1}
 801b956:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	781a      	ldrb	r2, [r3, #0]
 801b95c:	4b45      	ldr	r3, [pc, #276]	; (801ba74 <SUBGRF_SetPacketParams+0x134>)
 801b95e:	781b      	ldrb	r3, [r3, #0]
 801b960:	429a      	cmp	r2, r3
 801b962:	d004      	beq.n	801b96e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	781b      	ldrb	r3, [r3, #0]
 801b968:	4618      	mov	r0, r3
 801b96a:	f7ff fe23 	bl	801b5b4 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	781b      	ldrb	r3, [r3, #0]
 801b972:	2b03      	cmp	r3, #3
 801b974:	d878      	bhi.n	801ba68 <SUBGRF_SetPacketParams+0x128>
 801b976:	a201      	add	r2, pc, #4	; (adr r2, 801b97c <SUBGRF_SetPacketParams+0x3c>)
 801b978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b97c:	0801b98d 	.word	0x0801b98d
 801b980:	0801ba1d 	.word	0x0801ba1d
 801b984:	0801ba11 	.word	0x0801ba11
 801b988:	0801b98d 	.word	0x0801b98d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	7a5b      	ldrb	r3, [r3, #9]
 801b990:	2bf1      	cmp	r3, #241	; 0xf1
 801b992:	d10a      	bne.n	801b9aa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801b994:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b998:	f7ff faae 	bl	801aef8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801b99c:	f248 0005 	movw	r0, #32773	; 0x8005
 801b9a0:	f7ff faca 	bl	801af38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801b9a4:	2302      	movs	r3, #2
 801b9a6:	75bb      	strb	r3, [r7, #22]
 801b9a8:	e011      	b.n	801b9ce <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	7a5b      	ldrb	r3, [r3, #9]
 801b9ae:	2bf2      	cmp	r3, #242	; 0xf2
 801b9b0:	d10a      	bne.n	801b9c8 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801b9b2:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801b9b6:	f7ff fa9f 	bl	801aef8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801b9ba:	f241 0021 	movw	r0, #4129	; 0x1021
 801b9be:	f7ff fabb 	bl	801af38 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801b9c2:	2306      	movs	r3, #6
 801b9c4:	75bb      	strb	r3, [r7, #22]
 801b9c6:	e002      	b.n	801b9ce <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801b9c8:	687b      	ldr	r3, [r7, #4]
 801b9ca:	7a5b      	ldrb	r3, [r3, #9]
 801b9cc:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801b9ce:	2309      	movs	r3, #9
 801b9d0:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	885b      	ldrh	r3, [r3, #2]
 801b9d6:	0a1b      	lsrs	r3, r3, #8
 801b9d8:	b29b      	uxth	r3, r3
 801b9da:	b2db      	uxtb	r3, r3
 801b9dc:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	885b      	ldrh	r3, [r3, #2]
 801b9e2:	b2db      	uxtb	r3, r3
 801b9e4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	791b      	ldrb	r3, [r3, #4]
 801b9ea:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	795b      	ldrb	r3, [r3, #5]
 801b9f0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	799b      	ldrb	r3, [r3, #6]
 801b9f6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	79db      	ldrb	r3, [r3, #7]
 801b9fc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	7a1b      	ldrb	r3, [r3, #8]
 801ba02:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801ba04:	7dbb      	ldrb	r3, [r7, #22]
 801ba06:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801ba08:	687b      	ldr	r3, [r7, #4]
 801ba0a:	7a9b      	ldrb	r3, [r3, #10]
 801ba0c:	753b      	strb	r3, [r7, #20]
        break;
 801ba0e:	e022      	b.n	801ba56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801ba10:	2301      	movs	r3, #1
 801ba12:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	7b1b      	ldrb	r3, [r3, #12]
 801ba18:	733b      	strb	r3, [r7, #12]
        break;
 801ba1a:	e01c      	b.n	801ba56 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801ba1c:	2306      	movs	r3, #6
 801ba1e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	89db      	ldrh	r3, [r3, #14]
 801ba24:	0a1b      	lsrs	r3, r3, #8
 801ba26:	b29b      	uxth	r3, r3
 801ba28:	b2db      	uxtb	r3, r3
 801ba2a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	89db      	ldrh	r3, [r3, #14]
 801ba30:	b2db      	uxtb	r3, r3
 801ba32:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	7c1a      	ldrb	r2, [r3, #16]
 801ba38:	4b0f      	ldr	r3, [pc, #60]	; (801ba78 <SUBGRF_SetPacketParams+0x138>)
 801ba3a:	4611      	mov	r1, r2
 801ba3c:	7019      	strb	r1, [r3, #0]
 801ba3e:	4613      	mov	r3, r2
 801ba40:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	7c5b      	ldrb	r3, [r3, #17]
 801ba46:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	7c9b      	ldrb	r3, [r3, #18]
 801ba4c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	7cdb      	ldrb	r3, [r3, #19]
 801ba52:	747b      	strb	r3, [r7, #17]
        break;
 801ba54:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801ba56:	7dfb      	ldrb	r3, [r7, #23]
 801ba58:	b29a      	uxth	r2, r3
 801ba5a:	f107 030c 	add.w	r3, r7, #12
 801ba5e:	4619      	mov	r1, r3
 801ba60:	208c      	movs	r0, #140	; 0x8c
 801ba62:	f000 f965 	bl	801bd30 <SUBGRF_WriteCommand>
 801ba66:	e000      	b.n	801ba6a <SUBGRF_SetPacketParams+0x12a>
        return;
 801ba68:	bf00      	nop
}
 801ba6a:	3718      	adds	r7, #24
 801ba6c:	46bd      	mov	sp, r7
 801ba6e:	bd80      	pop	{r7, pc}
 801ba70:	0801e998 	.word	0x0801e998
 801ba74:	20001c41 	.word	0x20001c41
 801ba78:	20001c42 	.word	0x20001c42

0801ba7c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	b084      	sub	sp, #16
 801ba80:	af00      	add	r7, sp, #0
 801ba82:	4603      	mov	r3, r0
 801ba84:	460a      	mov	r2, r1
 801ba86:	71fb      	strb	r3, [r7, #7]
 801ba88:	4613      	mov	r3, r2
 801ba8a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801ba8c:	79fb      	ldrb	r3, [r7, #7]
 801ba8e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801ba90:	79bb      	ldrb	r3, [r7, #6]
 801ba92:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801ba94:	f107 030c 	add.w	r3, r7, #12
 801ba98:	2202      	movs	r2, #2
 801ba9a:	4619      	mov	r1, r3
 801ba9c:	208f      	movs	r0, #143	; 0x8f
 801ba9e:	f000 f947 	bl	801bd30 <SUBGRF_WriteCommand>
}
 801baa2:	bf00      	nop
 801baa4:	3710      	adds	r7, #16
 801baa6:	46bd      	mov	sp, r7
 801baa8:	bd80      	pop	{r7, pc}

0801baaa <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801baaa:	b580      	push	{r7, lr}
 801baac:	b082      	sub	sp, #8
 801baae:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801bab0:	2300      	movs	r3, #0
 801bab2:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801bab4:	1d3b      	adds	r3, r7, #4
 801bab6:	2201      	movs	r2, #1
 801bab8:	4619      	mov	r1, r3
 801baba:	2015      	movs	r0, #21
 801babc:	f000 f95a 	bl	801bd74 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801bac0:	793b      	ldrb	r3, [r7, #4]
 801bac2:	425b      	negs	r3, r3
 801bac4:	105b      	asrs	r3, r3, #1
 801bac6:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801bac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801bacc:	4618      	mov	r0, r3
 801bace:	3708      	adds	r7, #8
 801bad0:	46bd      	mov	sp, r7
 801bad2:	bd80      	pop	{r7, pc}

0801bad4 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b084      	sub	sp, #16
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]
 801badc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801bade:	f107 030c 	add.w	r3, r7, #12
 801bae2:	2202      	movs	r2, #2
 801bae4:	4619      	mov	r1, r3
 801bae6:	2013      	movs	r0, #19
 801bae8:	f000 f944 	bl	801bd74 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801baec:	f7ff fd7e 	bl	801b5ec <SUBGRF_GetPacketType>
 801baf0:	4603      	mov	r3, r0
 801baf2:	2b01      	cmp	r3, #1
 801baf4:	d10d      	bne.n	801bb12 <SUBGRF_GetRxBufferStatus+0x3e>
 801baf6:	4b0c      	ldr	r3, [pc, #48]	; (801bb28 <SUBGRF_GetRxBufferStatus+0x54>)
 801baf8:	781b      	ldrb	r3, [r3, #0]
 801bafa:	b2db      	uxtb	r3, r3
 801bafc:	2b01      	cmp	r3, #1
 801bafe:	d108      	bne.n	801bb12 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801bb00:	f240 7002 	movw	r0, #1794	; 0x702
 801bb04:	f000 f878 	bl	801bbf8 <SUBGRF_ReadRegister>
 801bb08:	4603      	mov	r3, r0
 801bb0a:	461a      	mov	r2, r3
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	701a      	strb	r2, [r3, #0]
 801bb10:	e002      	b.n	801bb18 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801bb12:	7b3a      	ldrb	r2, [r7, #12]
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801bb18:	7b7a      	ldrb	r2, [r7, #13]
 801bb1a:	683b      	ldr	r3, [r7, #0]
 801bb1c:	701a      	strb	r2, [r3, #0]
}
 801bb1e:	bf00      	nop
 801bb20:	3710      	adds	r7, #16
 801bb22:	46bd      	mov	sp, r7
 801bb24:	bd80      	pop	{r7, pc}
 801bb26:	bf00      	nop
 801bb28:	20001c42 	.word	0x20001c42

0801bb2c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801bb2c:	b580      	push	{r7, lr}
 801bb2e:	b084      	sub	sp, #16
 801bb30:	af00      	add	r7, sp, #0
 801bb32:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801bb34:	f107 030c 	add.w	r3, r7, #12
 801bb38:	2203      	movs	r2, #3
 801bb3a:	4619      	mov	r1, r3
 801bb3c:	2014      	movs	r0, #20
 801bb3e:	f000 f919 	bl	801bd74 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801bb42:	f7ff fd53 	bl	801b5ec <SUBGRF_GetPacketType>
 801bb46:	4603      	mov	r3, r0
 801bb48:	461a      	mov	r2, r3
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d002      	beq.n	801bb5c <SUBGRF_GetPacketStatus+0x30>
 801bb56:	2b01      	cmp	r3, #1
 801bb58:	d013      	beq.n	801bb82 <SUBGRF_GetPacketStatus+0x56>
 801bb5a:	e02a      	b.n	801bbb2 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801bb5c:	7b3a      	ldrb	r2, [r7, #12]
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801bb62:	7b7b      	ldrb	r3, [r7, #13]
 801bb64:	425b      	negs	r3, r3
 801bb66:	105b      	asrs	r3, r3, #1
 801bb68:	b25a      	sxtb	r2, r3
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801bb6e:	7bbb      	ldrb	r3, [r7, #14]
 801bb70:	425b      	negs	r3, r3
 801bb72:	105b      	asrs	r3, r3, #1
 801bb74:	b25a      	sxtb	r2, r3
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	2200      	movs	r2, #0
 801bb7e:	609a      	str	r2, [r3, #8]
            break;
 801bb80:	e020      	b.n	801bbc4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801bb82:	7b3b      	ldrb	r3, [r7, #12]
 801bb84:	425b      	negs	r3, r3
 801bb86:	105b      	asrs	r3, r3, #1
 801bb88:	b25a      	sxtb	r2, r3
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801bb8e:	7b7b      	ldrb	r3, [r7, #13]
 801bb90:	b25b      	sxtb	r3, r3
 801bb92:	3302      	adds	r3, #2
 801bb94:	109b      	asrs	r3, r3, #2
 801bb96:	b25a      	sxtb	r2, r3
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801bb9c:	7bbb      	ldrb	r3, [r7, #14]
 801bb9e:	425b      	negs	r3, r3
 801bba0:	105b      	asrs	r3, r3, #1
 801bba2:	b25a      	sxtb	r2, r3
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801bba8:	4b08      	ldr	r3, [pc, #32]	; (801bbcc <SUBGRF_GetPacketStatus+0xa0>)
 801bbaa:	681a      	ldr	r2, [r3, #0]
 801bbac:	687b      	ldr	r3, [r7, #4]
 801bbae:	611a      	str	r2, [r3, #16]
            break;
 801bbb0:	e008      	b.n	801bbc4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801bbb2:	2214      	movs	r2, #20
 801bbb4:	2100      	movs	r1, #0
 801bbb6:	6878      	ldr	r0, [r7, #4]
 801bbb8:	f000 fbbd 	bl	801c336 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	220f      	movs	r2, #15
 801bbc0:	701a      	strb	r2, [r3, #0]
            break;
 801bbc2:	bf00      	nop
    }
}
 801bbc4:	bf00      	nop
 801bbc6:	3710      	adds	r7, #16
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	bd80      	pop	{r7, pc}
 801bbcc:	20001c44 	.word	0x20001c44

0801bbd0 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801bbd0:	b580      	push	{r7, lr}
 801bbd2:	b082      	sub	sp, #8
 801bbd4:	af00      	add	r7, sp, #0
 801bbd6:	4603      	mov	r3, r0
 801bbd8:	460a      	mov	r2, r1
 801bbda:	80fb      	strh	r3, [r7, #6]
 801bbdc:	4613      	mov	r3, r2
 801bbde:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801bbe0:	1d7a      	adds	r2, r7, #5
 801bbe2:	88f9      	ldrh	r1, [r7, #6]
 801bbe4:	2301      	movs	r3, #1
 801bbe6:	4803      	ldr	r0, [pc, #12]	; (801bbf4 <SUBGRF_WriteRegister+0x24>)
 801bbe8:	f7eb ff94 	bl	8007b14 <HAL_SUBGHZ_WriteRegisters>
}
 801bbec:	bf00      	nop
 801bbee:	3708      	adds	r7, #8
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	bd80      	pop	{r7, pc}
 801bbf4:	20000278 	.word	0x20000278

0801bbf8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801bbf8:	b580      	push	{r7, lr}
 801bbfa:	b084      	sub	sp, #16
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	4603      	mov	r3, r0
 801bc00:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801bc02:	f107 020f 	add.w	r2, r7, #15
 801bc06:	88f9      	ldrh	r1, [r7, #6]
 801bc08:	2301      	movs	r3, #1
 801bc0a:	4804      	ldr	r0, [pc, #16]	; (801bc1c <SUBGRF_ReadRegister+0x24>)
 801bc0c:	f7eb ffe1 	bl	8007bd2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801bc10:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc12:	4618      	mov	r0, r3
 801bc14:	3710      	adds	r7, #16
 801bc16:	46bd      	mov	sp, r7
 801bc18:	bd80      	pop	{r7, pc}
 801bc1a:	bf00      	nop
 801bc1c:	20000278 	.word	0x20000278

0801bc20 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bc20:	b580      	push	{r7, lr}
 801bc22:	b086      	sub	sp, #24
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	4603      	mov	r3, r0
 801bc28:	6039      	str	r1, [r7, #0]
 801bc2a:	80fb      	strh	r3, [r7, #6]
 801bc2c:	4613      	mov	r3, r2
 801bc2e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc30:	f3ef 8310 	mrs	r3, PRIMASK
 801bc34:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc36:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bc38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc3a:	b672      	cpsid	i
}
 801bc3c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801bc3e:	88bb      	ldrh	r3, [r7, #4]
 801bc40:	88f9      	ldrh	r1, [r7, #6]
 801bc42:	683a      	ldr	r2, [r7, #0]
 801bc44:	4806      	ldr	r0, [pc, #24]	; (801bc60 <SUBGRF_WriteRegisters+0x40>)
 801bc46:	f7eb ff65 	bl	8007b14 <HAL_SUBGHZ_WriteRegisters>
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc4e:	693b      	ldr	r3, [r7, #16]
 801bc50:	f383 8810 	msr	PRIMASK, r3
}
 801bc54:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc56:	bf00      	nop
 801bc58:	3718      	adds	r7, #24
 801bc5a:	46bd      	mov	sp, r7
 801bc5c:	bd80      	pop	{r7, pc}
 801bc5e:	bf00      	nop
 801bc60:	20000278 	.word	0x20000278

0801bc64 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b086      	sub	sp, #24
 801bc68:	af00      	add	r7, sp, #0
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	6039      	str	r1, [r7, #0]
 801bc6e:	80fb      	strh	r3, [r7, #6]
 801bc70:	4613      	mov	r3, r2
 801bc72:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc74:	f3ef 8310 	mrs	r3, PRIMASK
 801bc78:	60fb      	str	r3, [r7, #12]
  return(result);
 801bc7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bc7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc7e:	b672      	cpsid	i
}
 801bc80:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801bc82:	88bb      	ldrh	r3, [r7, #4]
 801bc84:	88f9      	ldrh	r1, [r7, #6]
 801bc86:	683a      	ldr	r2, [r7, #0]
 801bc88:	4806      	ldr	r0, [pc, #24]	; (801bca4 <SUBGRF_ReadRegisters+0x40>)
 801bc8a:	f7eb ffa2 	bl	8007bd2 <HAL_SUBGHZ_ReadRegisters>
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc92:	693b      	ldr	r3, [r7, #16]
 801bc94:	f383 8810 	msr	PRIMASK, r3
}
 801bc98:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bc9a:	bf00      	nop
 801bc9c:	3718      	adds	r7, #24
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	bd80      	pop	{r7, pc}
 801bca2:	bf00      	nop
 801bca4:	20000278 	.word	0x20000278

0801bca8 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b086      	sub	sp, #24
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	4603      	mov	r3, r0
 801bcb0:	6039      	str	r1, [r7, #0]
 801bcb2:	71fb      	strb	r3, [r7, #7]
 801bcb4:	4613      	mov	r3, r2
 801bcb6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcb8:	f3ef 8310 	mrs	r3, PRIMASK
 801bcbc:	60fb      	str	r3, [r7, #12]
  return(result);
 801bcbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bcc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bcc2:	b672      	cpsid	i
}
 801bcc4:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801bcc6:	79bb      	ldrb	r3, [r7, #6]
 801bcc8:	b29b      	uxth	r3, r3
 801bcca:	79f9      	ldrb	r1, [r7, #7]
 801bccc:	683a      	ldr	r2, [r7, #0]
 801bcce:	4806      	ldr	r0, [pc, #24]	; (801bce8 <SUBGRF_WriteBuffer+0x40>)
 801bcd0:	f7ec f893 	bl	8007dfa <HAL_SUBGHZ_WriteBuffer>
 801bcd4:	697b      	ldr	r3, [r7, #20]
 801bcd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bcd8:	693b      	ldr	r3, [r7, #16]
 801bcda:	f383 8810 	msr	PRIMASK, r3
}
 801bcde:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bce0:	bf00      	nop
 801bce2:	3718      	adds	r7, #24
 801bce4:	46bd      	mov	sp, r7
 801bce6:	bd80      	pop	{r7, pc}
 801bce8:	20000278 	.word	0x20000278

0801bcec <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b086      	sub	sp, #24
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	4603      	mov	r3, r0
 801bcf4:	6039      	str	r1, [r7, #0]
 801bcf6:	71fb      	strb	r3, [r7, #7]
 801bcf8:	4613      	mov	r3, r2
 801bcfa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bcfc:	f3ef 8310 	mrs	r3, PRIMASK
 801bd00:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd06:	b672      	cpsid	i
}
 801bd08:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801bd0a:	79bb      	ldrb	r3, [r7, #6]
 801bd0c:	b29b      	uxth	r3, r3
 801bd0e:	79f9      	ldrb	r1, [r7, #7]
 801bd10:	683a      	ldr	r2, [r7, #0]
 801bd12:	4806      	ldr	r0, [pc, #24]	; (801bd2c <SUBGRF_ReadBuffer+0x40>)
 801bd14:	f7ec f8c4 	bl	8007ea0 <HAL_SUBGHZ_ReadBuffer>
 801bd18:	697b      	ldr	r3, [r7, #20]
 801bd1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd1c:	693b      	ldr	r3, [r7, #16]
 801bd1e:	f383 8810 	msr	PRIMASK, r3
}
 801bd22:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bd24:	bf00      	nop
 801bd26:	3718      	adds	r7, #24
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	bd80      	pop	{r7, pc}
 801bd2c:	20000278 	.word	0x20000278

0801bd30 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bd30:	b580      	push	{r7, lr}
 801bd32:	b086      	sub	sp, #24
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	4603      	mov	r3, r0
 801bd38:	6039      	str	r1, [r7, #0]
 801bd3a:	71fb      	strb	r3, [r7, #7]
 801bd3c:	4613      	mov	r3, r2
 801bd3e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd40:	f3ef 8310 	mrs	r3, PRIMASK
 801bd44:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd4a:	b672      	cpsid	i
}
 801bd4c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801bd4e:	88bb      	ldrh	r3, [r7, #4]
 801bd50:	79f9      	ldrb	r1, [r7, #7]
 801bd52:	683a      	ldr	r2, [r7, #0]
 801bd54:	4806      	ldr	r0, [pc, #24]	; (801bd70 <SUBGRF_WriteCommand+0x40>)
 801bd56:	f7eb ff9d 	bl	8007c94 <HAL_SUBGHZ_ExecSetCmd>
 801bd5a:	697b      	ldr	r3, [r7, #20]
 801bd5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd5e:	693b      	ldr	r3, [r7, #16]
 801bd60:	f383 8810 	msr	PRIMASK, r3
}
 801bd64:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bd66:	bf00      	nop
 801bd68:	3718      	adds	r7, #24
 801bd6a:	46bd      	mov	sp, r7
 801bd6c:	bd80      	pop	{r7, pc}
 801bd6e:	bf00      	nop
 801bd70:	20000278 	.word	0x20000278

0801bd74 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801bd74:	b580      	push	{r7, lr}
 801bd76:	b086      	sub	sp, #24
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	6039      	str	r1, [r7, #0]
 801bd7e:	71fb      	strb	r3, [r7, #7]
 801bd80:	4613      	mov	r3, r2
 801bd82:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd84:	f3ef 8310 	mrs	r3, PRIMASK
 801bd88:	60fb      	str	r3, [r7, #12]
  return(result);
 801bd8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801bd8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd8e:	b672      	cpsid	i
}
 801bd90:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801bd92:	88bb      	ldrh	r3, [r7, #4]
 801bd94:	79f9      	ldrb	r1, [r7, #7]
 801bd96:	683a      	ldr	r2, [r7, #0]
 801bd98:	4806      	ldr	r0, [pc, #24]	; (801bdb4 <SUBGRF_ReadCommand+0x40>)
 801bd9a:	f7eb ffda 	bl	8007d52 <HAL_SUBGHZ_ExecGetCmd>
 801bd9e:	697b      	ldr	r3, [r7, #20]
 801bda0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	f383 8810 	msr	PRIMASK, r3
}
 801bda8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801bdaa:	bf00      	nop
 801bdac:	3718      	adds	r7, #24
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}
 801bdb2:	bf00      	nop
 801bdb4:	20000278 	.word	0x20000278

0801bdb8 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b084      	sub	sp, #16
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	4603      	mov	r3, r0
 801bdc0:	460a      	mov	r2, r1
 801bdc2:	71fb      	strb	r3, [r7, #7]
 801bdc4:	4613      	mov	r3, r2
 801bdc6:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801bdc8:	2301      	movs	r3, #1
 801bdca:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801bdcc:	79bb      	ldrb	r3, [r7, #6]
 801bdce:	2b01      	cmp	r3, #1
 801bdd0:	d10d      	bne.n	801bdee <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801bdd2:	79fb      	ldrb	r3, [r7, #7]
 801bdd4:	2b01      	cmp	r3, #1
 801bdd6:	d104      	bne.n	801bde2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801bdd8:	2302      	movs	r3, #2
 801bdda:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801bddc:	2004      	movs	r0, #4
 801bdde:	f000 f8df 	bl	801bfa0 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801bde2:	79fb      	ldrb	r3, [r7, #7]
 801bde4:	2b02      	cmp	r3, #2
 801bde6:	d107      	bne.n	801bdf8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801bde8:	2303      	movs	r3, #3
 801bdea:	73fb      	strb	r3, [r7, #15]
 801bdec:	e004      	b.n	801bdf8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801bdee:	79bb      	ldrb	r3, [r7, #6]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d101      	bne.n	801bdf8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801bdf8:	7bfb      	ldrb	r3, [r7, #15]
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	f7ef fa09 	bl	800b212 <RBI_ConfigRFSwitch>
}
 801be00:	bf00      	nop
 801be02:	3710      	adds	r7, #16
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}

0801be08 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b084      	sub	sp, #16
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	4603      	mov	r3, r0
 801be10:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801be12:	2301      	movs	r3, #1
 801be14:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801be16:	f7ef fa0a 	bl	800b22e <RBI_GetTxConfig>
 801be1a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801be1c:	68bb      	ldr	r3, [r7, #8]
 801be1e:	2b02      	cmp	r3, #2
 801be20:	d016      	beq.n	801be50 <SUBGRF_SetRfTxPower+0x48>
 801be22:	68bb      	ldr	r3, [r7, #8]
 801be24:	2b02      	cmp	r3, #2
 801be26:	dc16      	bgt.n	801be56 <SUBGRF_SetRfTxPower+0x4e>
 801be28:	68bb      	ldr	r3, [r7, #8]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d003      	beq.n	801be36 <SUBGRF_SetRfTxPower+0x2e>
 801be2e:	68bb      	ldr	r3, [r7, #8]
 801be30:	2b01      	cmp	r3, #1
 801be32:	d00a      	beq.n	801be4a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801be34:	e00f      	b.n	801be56 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801be36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be3a:	2b0f      	cmp	r3, #15
 801be3c:	dd02      	ble.n	801be44 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801be3e:	2302      	movs	r3, #2
 801be40:	73fb      	strb	r3, [r7, #15]
            break;
 801be42:	e009      	b.n	801be58 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801be44:	2301      	movs	r3, #1
 801be46:	73fb      	strb	r3, [r7, #15]
            break;
 801be48:	e006      	b.n	801be58 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801be4a:	2301      	movs	r3, #1
 801be4c:	73fb      	strb	r3, [r7, #15]
            break;
 801be4e:	e003      	b.n	801be58 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801be50:	2302      	movs	r3, #2
 801be52:	73fb      	strb	r3, [r7, #15]
            break;
 801be54:	e000      	b.n	801be58 <SUBGRF_SetRfTxPower+0x50>
            break;
 801be56:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801be58:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801be5c:	7bfb      	ldrb	r3, [r7, #15]
 801be5e:	2202      	movs	r2, #2
 801be60:	4618      	mov	r0, r3
 801be62:	f7ff fbcd 	bl	801b600 <SUBGRF_SetTxParams>

    return paSelect;
 801be66:	7bfb      	ldrb	r3, [r7, #15]
}
 801be68:	4618      	mov	r0, r3
 801be6a:	3710      	adds	r7, #16
 801be6c:	46bd      	mov	sp, r7
 801be6e:	bd80      	pop	{r7, pc}

0801be70 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801be70:	b480      	push	{r7}
 801be72:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801be74:	2301      	movs	r3, #1
}
 801be76:	4618      	mov	r0, r3
 801be78:	46bd      	mov	sp, r7
 801be7a:	bc80      	pop	{r7}
 801be7c:	4770      	bx	lr
	...

0801be80 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be80:	b580      	push	{r7, lr}
 801be82:	b082      	sub	sp, #8
 801be84:	af00      	add	r7, sp, #0
 801be86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801be88:	4b03      	ldr	r3, [pc, #12]	; (801be98 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801be8a:	681b      	ldr	r3, [r3, #0]
 801be8c:	2001      	movs	r0, #1
 801be8e:	4798      	blx	r3
}
 801be90:	bf00      	nop
 801be92:	3708      	adds	r7, #8
 801be94:	46bd      	mov	sp, r7
 801be96:	bd80      	pop	{r7, pc}
 801be98:	20001c4c 	.word	0x20001c4c

0801be9c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801be9c:	b580      	push	{r7, lr}
 801be9e:	b082      	sub	sp, #8
 801bea0:	af00      	add	r7, sp, #0
 801bea2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801bea4:	4b03      	ldr	r3, [pc, #12]	; (801beb4 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	2002      	movs	r0, #2
 801beaa:	4798      	blx	r3
}
 801beac:	bf00      	nop
 801beae:	3708      	adds	r7, #8
 801beb0:	46bd      	mov	sp, r7
 801beb2:	bd80      	pop	{r7, pc}
 801beb4:	20001c4c 	.word	0x20001c4c

0801beb8 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801beb8:	b580      	push	{r7, lr}
 801beba:	b082      	sub	sp, #8
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801bec0:	4b03      	ldr	r3, [pc, #12]	; (801bed0 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801bec2:	681b      	ldr	r3, [r3, #0]
 801bec4:	2040      	movs	r0, #64	; 0x40
 801bec6:	4798      	blx	r3
}
 801bec8:	bf00      	nop
 801beca:	3708      	adds	r7, #8
 801becc:	46bd      	mov	sp, r7
 801bece:	bd80      	pop	{r7, pc}
 801bed0:	20001c4c 	.word	0x20001c4c

0801bed4 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801bed4:	b580      	push	{r7, lr}
 801bed6:	b082      	sub	sp, #8
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
 801bedc:	460b      	mov	r3, r1
 801bede:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801bee0:	78fb      	ldrb	r3, [r7, #3]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d002      	beq.n	801beec <HAL_SUBGHZ_CADStatusCallback+0x18>
 801bee6:	2b01      	cmp	r3, #1
 801bee8:	d005      	beq.n	801bef6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801beea:	e00a      	b.n	801bf02 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801beec:	4b07      	ldr	r3, [pc, #28]	; (801bf0c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	2080      	movs	r0, #128	; 0x80
 801bef2:	4798      	blx	r3
            break;
 801bef4:	e005      	b.n	801bf02 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801bef6:	4b05      	ldr	r3, [pc, #20]	; (801bf0c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	f44f 7080 	mov.w	r0, #256	; 0x100
 801befe:	4798      	blx	r3
            break;
 801bf00:	bf00      	nop
    }
}
 801bf02:	bf00      	nop
 801bf04:	3708      	adds	r7, #8
 801bf06:	46bd      	mov	sp, r7
 801bf08:	bd80      	pop	{r7, pc}
 801bf0a:	bf00      	nop
 801bf0c:	20001c4c 	.word	0x20001c4c

0801bf10 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf10:	b580      	push	{r7, lr}
 801bf12:	b082      	sub	sp, #8
 801bf14:	af00      	add	r7, sp, #0
 801bf16:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801bf18:	4b04      	ldr	r3, [pc, #16]	; (801bf2c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801bf20:	4798      	blx	r3
}
 801bf22:	bf00      	nop
 801bf24:	3708      	adds	r7, #8
 801bf26:	46bd      	mov	sp, r7
 801bf28:	bd80      	pop	{r7, pc}
 801bf2a:	bf00      	nop
 801bf2c:	20001c4c 	.word	0x20001c4c

0801bf30 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b082      	sub	sp, #8
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801bf38:	4b03      	ldr	r3, [pc, #12]	; (801bf48 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801bf3a:	681b      	ldr	r3, [r3, #0]
 801bf3c:	2020      	movs	r0, #32
 801bf3e:	4798      	blx	r3
}
 801bf40:	bf00      	nop
 801bf42:	3708      	adds	r7, #8
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd80      	pop	{r7, pc}
 801bf48:	20001c4c 	.word	0x20001c4c

0801bf4c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b082      	sub	sp, #8
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801bf54:	4b03      	ldr	r3, [pc, #12]	; (801bf64 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	2004      	movs	r0, #4
 801bf5a:	4798      	blx	r3
}
 801bf5c:	bf00      	nop
 801bf5e:	3708      	adds	r7, #8
 801bf60:	46bd      	mov	sp, r7
 801bf62:	bd80      	pop	{r7, pc}
 801bf64:	20001c4c 	.word	0x20001c4c

0801bf68 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf68:	b580      	push	{r7, lr}
 801bf6a:	b082      	sub	sp, #8
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801bf70:	4b03      	ldr	r3, [pc, #12]	; (801bf80 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	2008      	movs	r0, #8
 801bf76:	4798      	blx	r3
}
 801bf78:	bf00      	nop
 801bf7a:	3708      	adds	r7, #8
 801bf7c:	46bd      	mov	sp, r7
 801bf7e:	bd80      	pop	{r7, pc}
 801bf80:	20001c4c 	.word	0x20001c4c

0801bf84 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801bf84:	b580      	push	{r7, lr}
 801bf86:	b082      	sub	sp, #8
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801bf8c:	4b03      	ldr	r3, [pc, #12]	; (801bf9c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	2010      	movs	r0, #16
 801bf92:	4798      	blx	r3
}
 801bf94:	bf00      	nop
 801bf96:	3708      	adds	r7, #8
 801bf98:	46bd      	mov	sp, r7
 801bf9a:	bd80      	pop	{r7, pc}
 801bf9c:	20001c4c 	.word	0x20001c4c

0801bfa0 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801bfa0:	b580      	push	{r7, lr}
 801bfa2:	b084      	sub	sp, #16
 801bfa4:	af00      	add	r7, sp, #0
 801bfa6:	4603      	mov	r3, r0
 801bfa8:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801bfaa:	f7ef f94e 	bl	800b24a <RBI_IsDCDC>
 801bfae:	4603      	mov	r3, r0
 801bfb0:	2b01      	cmp	r3, #1
 801bfb2:	d112      	bne.n	801bfda <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801bfb4:	f640 1023 	movw	r0, #2339	; 0x923
 801bfb8:	f7ff fe1e 	bl	801bbf8 <SUBGRF_ReadRegister>
 801bfbc:	4603      	mov	r3, r0
 801bfbe:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801bfc0:	7bfb      	ldrb	r3, [r7, #15]
 801bfc2:	f023 0306 	bic.w	r3, r3, #6
 801bfc6:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801bfc8:	7bfa      	ldrb	r2, [r7, #15]
 801bfca:	79fb      	ldrb	r3, [r7, #7]
 801bfcc:	4313      	orrs	r3, r2
 801bfce:	b2db      	uxtb	r3, r3
 801bfd0:	4619      	mov	r1, r3
 801bfd2:	f640 1023 	movw	r0, #2339	; 0x923
 801bfd6:	f7ff fdfb 	bl	801bbd0 <SUBGRF_WriteRegister>
  }
}
 801bfda:	bf00      	nop
 801bfdc:	3710      	adds	r7, #16
 801bfde:	46bd      	mov	sp, r7
 801bfe0:	bd80      	pop	{r7, pc}
	...

0801bfe4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801bfe4:	b480      	push	{r7}
 801bfe6:	b085      	sub	sp, #20
 801bfe8:	af00      	add	r7, sp, #0
 801bfea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d101      	bne.n	801bff6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801bff2:	231f      	movs	r3, #31
 801bff4:	e016      	b.n	801c024 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801bff6:	2300      	movs	r3, #0
 801bff8:	73fb      	strb	r3, [r7, #15]
 801bffa:	e00f      	b.n	801c01c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801bffc:	7bfb      	ldrb	r3, [r7, #15]
 801bffe:	4a0c      	ldr	r2, [pc, #48]	; (801c030 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c000:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801c004:	687a      	ldr	r2, [r7, #4]
 801c006:	429a      	cmp	r2, r3
 801c008:	d205      	bcs.n	801c016 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801c00a:	7bfb      	ldrb	r3, [r7, #15]
 801c00c:	4a08      	ldr	r2, [pc, #32]	; (801c030 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801c00e:	00db      	lsls	r3, r3, #3
 801c010:	4413      	add	r3, r2
 801c012:	791b      	ldrb	r3, [r3, #4]
 801c014:	e006      	b.n	801c024 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801c016:	7bfb      	ldrb	r3, [r7, #15]
 801c018:	3301      	adds	r3, #1
 801c01a:	73fb      	strb	r3, [r7, #15]
 801c01c:	7bfb      	ldrb	r3, [r7, #15]
 801c01e:	2b15      	cmp	r3, #21
 801c020:	d9ec      	bls.n	801bffc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801c022:	e7fe      	b.n	801c022 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801c024:	4618      	mov	r0, r3
 801c026:	3714      	adds	r7, #20
 801c028:	46bd      	mov	sp, r7
 801c02a:	bc80      	pop	{r7}
 801c02c:	4770      	bx	lr
 801c02e:	bf00      	nop
 801c030:	0801ef80 	.word	0x0801ef80

0801c034 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b08a      	sub	sp, #40	; 0x28
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
 801c03c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801c03e:	4b35      	ldr	r3, [pc, #212]	; (801c114 <SUBGRF_GetCFO+0xe0>)
 801c040:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801c042:	f640 0007 	movw	r0, #2055	; 0x807
 801c046:	f7ff fdd7 	bl	801bbf8 <SUBGRF_ReadRegister>
 801c04a:	4603      	mov	r3, r0
 801c04c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801c04e:	7ffb      	ldrb	r3, [r7, #31]
 801c050:	08db      	lsrs	r3, r3, #3
 801c052:	b2db      	uxtb	r3, r3
 801c054:	f003 0303 	and.w	r3, r3, #3
 801c058:	3328      	adds	r3, #40	; 0x28
 801c05a:	443b      	add	r3, r7
 801c05c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801c060:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801c062:	7ffb      	ldrb	r3, [r7, #31]
 801c064:	f003 0307 	and.w	r3, r3, #7
 801c068:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801c06a:	7fba      	ldrb	r2, [r7, #30]
 801c06c:	7f7b      	ldrb	r3, [r7, #29]
 801c06e:	3b01      	subs	r3, #1
 801c070:	fa02 f303 	lsl.w	r3, r2, r3
 801c074:	461a      	mov	r2, r3
 801c076:	4b28      	ldr	r3, [pc, #160]	; (801c118 <SUBGRF_GetCFO+0xe4>)
 801c078:	fbb3 f3f2 	udiv	r3, r3, r2
 801c07c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801c07e:	69ba      	ldr	r2, [r7, #24]
 801c080:	687b      	ldr	r3, [r7, #4]
 801c082:	fbb2 f3f3 	udiv	r3, r2, r3
 801c086:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801c088:	2301      	movs	r3, #1
 801c08a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801c08e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c092:	697a      	ldr	r2, [r7, #20]
 801c094:	fb02 f303 	mul.w	r3, r2, r3
 801c098:	2b07      	cmp	r3, #7
 801c09a:	d802      	bhi.n	801c0a2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801c09c:	2302      	movs	r3, #2
 801c09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801c0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c0a6:	697a      	ldr	r2, [r7, #20]
 801c0a8:	fb02 f303 	mul.w	r3, r2, r3
 801c0ac:	2b03      	cmp	r3, #3
 801c0ae:	d802      	bhi.n	801c0b6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801c0b0:	2304      	movs	r3, #4
 801c0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801c0b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c0ba:	69bb      	ldr	r3, [r7, #24]
 801c0bc:	fb02 f303 	mul.w	r3, r2, r3
 801c0c0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801c0c2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801c0c6:	f7ff fd97 	bl	801bbf8 <SUBGRF_ReadRegister>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	021b      	lsls	r3, r3, #8
 801c0ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801c0d2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801c0d4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801c0d8:	f7ff fd8e 	bl	801bbf8 <SUBGRF_ReadRegister>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	461a      	mov	r2, r3
 801c0e0:	6a3b      	ldr	r3, [r7, #32]
 801c0e2:	4313      	orrs	r3, r2
 801c0e4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801c0e6:	6a3b      	ldr	r3, [r7, #32]
 801c0e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d005      	beq.n	801c0fc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801c0f0:	6a3b      	ldr	r3, [r7, #32]
 801c0f2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801c0f6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801c0fa:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801c0fc:	693b      	ldr	r3, [r7, #16]
 801c0fe:	095b      	lsrs	r3, r3, #5
 801c100:	6a3a      	ldr	r2, [r7, #32]
 801c102:	fb02 f303 	mul.w	r3, r2, r3
 801c106:	11da      	asrs	r2, r3, #7
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	601a      	str	r2, [r3, #0]
}
 801c10c:	bf00      	nop
 801c10e:	3728      	adds	r7, #40	; 0x28
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}
 801c114:	0c0a0804 	.word	0x0c0a0804
 801c118:	01e84800 	.word	0x01e84800

0801c11c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801c11c:	b480      	push	{r7}
 801c11e:	b087      	sub	sp, #28
 801c120:	af00      	add	r7, sp, #0
 801c122:	4603      	mov	r3, r0
 801c124:	60b9      	str	r1, [r7, #8]
 801c126:	607a      	str	r2, [r7, #4]
 801c128:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801c12a:	2300      	movs	r3, #0
 801c12c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801c12e:	f04f 33ff 	mov.w	r3, #4294967295
 801c132:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801c134:	697b      	ldr	r3, [r7, #20]
}
 801c136:	4618      	mov	r0, r3
 801c138:	371c      	adds	r7, #28
 801c13a:	46bd      	mov	sp, r7
 801c13c:	bc80      	pop	{r7}
 801c13e:	4770      	bx	lr

0801c140 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801c140:	b480      	push	{r7}
 801c142:	b087      	sub	sp, #28
 801c144:	af00      	add	r7, sp, #0
 801c146:	4603      	mov	r3, r0
 801c148:	60b9      	str	r1, [r7, #8]
 801c14a:	607a      	str	r2, [r7, #4]
 801c14c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801c14e:	2300      	movs	r3, #0
 801c150:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801c152:	f04f 33ff 	mov.w	r3, #4294967295
 801c156:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801c158:	697b      	ldr	r3, [r7, #20]
}
 801c15a:	4618      	mov	r0, r3
 801c15c:	371c      	adds	r7, #28
 801c15e:	46bd      	mov	sp, r7
 801c160:	bc80      	pop	{r7}
 801c162:	4770      	bx	lr

0801c164 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801c164:	b480      	push	{r7}
 801c166:	b085      	sub	sp, #20
 801c168:	af00      	add	r7, sp, #0
 801c16a:	60f8      	str	r0, [r7, #12]
 801c16c:	60b9      	str	r1, [r7, #8]
 801c16e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801c170:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c174:	4618      	mov	r0, r3
 801c176:	3714      	adds	r7, #20
 801c178:	46bd      	mov	sp, r7
 801c17a:	bc80      	pop	{r7}
 801c17c:	4770      	bx	lr

0801c17e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801c17e:	b480      	push	{r7}
 801c180:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801c182:	bf00      	nop
 801c184:	46bd      	mov	sp, r7
 801c186:	bc80      	pop	{r7}
 801c188:	4770      	bx	lr

0801c18a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801c18a:	b480      	push	{r7}
 801c18c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801c18e:	2300      	movs	r3, #0
#endif
}
 801c190:	4618      	mov	r0, r3
 801c192:	46bd      	mov	sp, r7
 801c194:	bc80      	pop	{r7}
 801c196:	4770      	bx	lr

0801c198 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801c198:	b480      	push	{r7}
 801c19a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801c19c:	2300      	movs	r3, #0
#endif
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	bc80      	pop	{r7}
 801c1a4:	4770      	bx	lr

0801c1a6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801c1a6:	b480      	push	{r7}
 801c1a8:	b083      	sub	sp, #12
 801c1aa:	af00      	add	r7, sp, #0
 801c1ac:	4603      	mov	r3, r0
 801c1ae:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801c1b0:	bf00      	nop
 801c1b2:	370c      	adds	r7, #12
 801c1b4:	46bd      	mov	sp, r7
 801c1b6:	bc80      	pop	{r7}
 801c1b8:	4770      	bx	lr

0801c1ba <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801c1ba:	b480      	push	{r7}
 801c1bc:	b087      	sub	sp, #28
 801c1be:	af00      	add	r7, sp, #0
 801c1c0:	60f8      	str	r0, [r7, #12]
 801c1c2:	460b      	mov	r3, r1
 801c1c4:	607a      	str	r2, [r7, #4]
 801c1c6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801c1c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c1cc:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801c1ce:	697b      	ldr	r3, [r7, #20]
}
 801c1d0:	4618      	mov	r0, r3
 801c1d2:	371c      	adds	r7, #28
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	bc80      	pop	{r7}
 801c1d8:	4770      	bx	lr

0801c1da <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801c1da:	b480      	push	{r7}
 801c1dc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801c1de:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801c1e2:	4618      	mov	r0, r3
 801c1e4:	46bd      	mov	sp, r7
 801c1e6:	bc80      	pop	{r7}
 801c1e8:	4770      	bx	lr

0801c1ea <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801c1ea:	b480      	push	{r7}
 801c1ec:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801c1ee:	bf00      	nop
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	bc80      	pop	{r7}
 801c1f4:	4770      	bx	lr

0801c1f6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801c1f6:	b480      	push	{r7}
 801c1f8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801c1fa:	bf00      	nop
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bc80      	pop	{r7}
 801c200:	4770      	bx	lr

0801c202 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801c202:	b480      	push	{r7}
 801c204:	b083      	sub	sp, #12
 801c206:	af00      	add	r7, sp, #0
 801c208:	4603      	mov	r3, r0
 801c20a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801c20c:	bf00      	nop
 801c20e:	370c      	adds	r7, #12
 801c210:	46bd      	mov	sp, r7
 801c212:	bc80      	pop	{r7}
 801c214:	4770      	bx	lr
	...

0801c218 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801c218:	b480      	push	{r7}
 801c21a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801c21c:	4b04      	ldr	r3, [pc, #16]	; (801c230 <UTIL_LPM_Init+0x18>)
 801c21e:	2200      	movs	r2, #0
 801c220:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801c222:	4b04      	ldr	r3, [pc, #16]	; (801c234 <UTIL_LPM_Init+0x1c>)
 801c224:	2200      	movs	r2, #0
 801c226:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801c228:	bf00      	nop
 801c22a:	46bd      	mov	sp, r7
 801c22c:	bc80      	pop	{r7}
 801c22e:	4770      	bx	lr
 801c230:	20001c50 	.word	0x20001c50
 801c234:	20001c54 	.word	0x20001c54

0801c238 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c238:	b480      	push	{r7}
 801c23a:	b087      	sub	sp, #28
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
 801c240:	460b      	mov	r3, r1
 801c242:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c244:	f3ef 8310 	mrs	r3, PRIMASK
 801c248:	613b      	str	r3, [r7, #16]
  return(result);
 801c24a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c24c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c24e:	b672      	cpsid	i
}
 801c250:	bf00      	nop
  
  switch( state )
 801c252:	78fb      	ldrb	r3, [r7, #3]
 801c254:	2b00      	cmp	r3, #0
 801c256:	d008      	beq.n	801c26a <UTIL_LPM_SetStopMode+0x32>
 801c258:	2b01      	cmp	r3, #1
 801c25a:	d10e      	bne.n	801c27a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801c25c:	4b0d      	ldr	r3, [pc, #52]	; (801c294 <UTIL_LPM_SetStopMode+0x5c>)
 801c25e:	681a      	ldr	r2, [r3, #0]
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	4313      	orrs	r3, r2
 801c264:	4a0b      	ldr	r2, [pc, #44]	; (801c294 <UTIL_LPM_SetStopMode+0x5c>)
 801c266:	6013      	str	r3, [r2, #0]
      break;
 801c268:	e008      	b.n	801c27c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	43da      	mvns	r2, r3
 801c26e:	4b09      	ldr	r3, [pc, #36]	; (801c294 <UTIL_LPM_SetStopMode+0x5c>)
 801c270:	681b      	ldr	r3, [r3, #0]
 801c272:	4013      	ands	r3, r2
 801c274:	4a07      	ldr	r2, [pc, #28]	; (801c294 <UTIL_LPM_SetStopMode+0x5c>)
 801c276:	6013      	str	r3, [r2, #0]
      break;
 801c278:	e000      	b.n	801c27c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801c27a:	bf00      	nop
 801c27c:	697b      	ldr	r3, [r7, #20]
 801c27e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c280:	68fb      	ldr	r3, [r7, #12]
 801c282:	f383 8810 	msr	PRIMASK, r3
}
 801c286:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c288:	bf00      	nop
 801c28a:	371c      	adds	r7, #28
 801c28c:	46bd      	mov	sp, r7
 801c28e:	bc80      	pop	{r7}
 801c290:	4770      	bx	lr
 801c292:	bf00      	nop
 801c294:	20001c50 	.word	0x20001c50

0801c298 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801c298:	b480      	push	{r7}
 801c29a:	b087      	sub	sp, #28
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	6078      	str	r0, [r7, #4]
 801c2a0:	460b      	mov	r3, r1
 801c2a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2a4:	f3ef 8310 	mrs	r3, PRIMASK
 801c2a8:	613b      	str	r3, [r7, #16]
  return(result);
 801c2aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801c2ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2ae:	b672      	cpsid	i
}
 801c2b0:	bf00      	nop
  
  switch(state)
 801c2b2:	78fb      	ldrb	r3, [r7, #3]
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d008      	beq.n	801c2ca <UTIL_LPM_SetOffMode+0x32>
 801c2b8:	2b01      	cmp	r3, #1
 801c2ba:	d10e      	bne.n	801c2da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801c2bc:	4b0d      	ldr	r3, [pc, #52]	; (801c2f4 <UTIL_LPM_SetOffMode+0x5c>)
 801c2be:	681a      	ldr	r2, [r3, #0]
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	4313      	orrs	r3, r2
 801c2c4:	4a0b      	ldr	r2, [pc, #44]	; (801c2f4 <UTIL_LPM_SetOffMode+0x5c>)
 801c2c6:	6013      	str	r3, [r2, #0]
      break;
 801c2c8:	e008      	b.n	801c2dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	43da      	mvns	r2, r3
 801c2ce:	4b09      	ldr	r3, [pc, #36]	; (801c2f4 <UTIL_LPM_SetOffMode+0x5c>)
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	4013      	ands	r3, r2
 801c2d4:	4a07      	ldr	r2, [pc, #28]	; (801c2f4 <UTIL_LPM_SetOffMode+0x5c>)
 801c2d6:	6013      	str	r3, [r2, #0]
      break;
 801c2d8:	e000      	b.n	801c2dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801c2da:	bf00      	nop
 801c2dc:	697b      	ldr	r3, [r7, #20]
 801c2de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2e0:	68fb      	ldr	r3, [r7, #12]
 801c2e2:	f383 8810 	msr	PRIMASK, r3
}
 801c2e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801c2e8:	bf00      	nop
 801c2ea:	371c      	adds	r7, #28
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bc80      	pop	{r7}
 801c2f0:	4770      	bx	lr
 801c2f2:	bf00      	nop
 801c2f4:	20001c54 	.word	0x20001c54

0801c2f8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801c2f8:	b480      	push	{r7}
 801c2fa:	b087      	sub	sp, #28
 801c2fc:	af00      	add	r7, sp, #0
 801c2fe:	60f8      	str	r0, [r7, #12]
 801c300:	60b9      	str	r1, [r7, #8]
 801c302:	4613      	mov	r3, r2
 801c304:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801c30a:	68bb      	ldr	r3, [r7, #8]
 801c30c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801c30e:	e007      	b.n	801c320 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801c310:	693a      	ldr	r2, [r7, #16]
 801c312:	1c53      	adds	r3, r2, #1
 801c314:	613b      	str	r3, [r7, #16]
 801c316:	697b      	ldr	r3, [r7, #20]
 801c318:	1c59      	adds	r1, r3, #1
 801c31a:	6179      	str	r1, [r7, #20]
 801c31c:	7812      	ldrb	r2, [r2, #0]
 801c31e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c320:	88fb      	ldrh	r3, [r7, #6]
 801c322:	1e5a      	subs	r2, r3, #1
 801c324:	80fa      	strh	r2, [r7, #6]
 801c326:	2b00      	cmp	r3, #0
 801c328:	d1f2      	bne.n	801c310 <UTIL_MEM_cpy_8+0x18>
    }
}
 801c32a:	bf00      	nop
 801c32c:	bf00      	nop
 801c32e:	371c      	adds	r7, #28
 801c330:	46bd      	mov	sp, r7
 801c332:	bc80      	pop	{r7}
 801c334:	4770      	bx	lr

0801c336 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801c336:	b480      	push	{r7}
 801c338:	b085      	sub	sp, #20
 801c33a:	af00      	add	r7, sp, #0
 801c33c:	6078      	str	r0, [r7, #4]
 801c33e:	460b      	mov	r3, r1
 801c340:	70fb      	strb	r3, [r7, #3]
 801c342:	4613      	mov	r3, r2
 801c344:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801c34a:	e004      	b.n	801c356 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801c34c:	68fb      	ldr	r3, [r7, #12]
 801c34e:	1c5a      	adds	r2, r3, #1
 801c350:	60fa      	str	r2, [r7, #12]
 801c352:	78fa      	ldrb	r2, [r7, #3]
 801c354:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801c356:	883b      	ldrh	r3, [r7, #0]
 801c358:	1e5a      	subs	r2, r3, #1
 801c35a:	803a      	strh	r2, [r7, #0]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d1f5      	bne.n	801c34c <UTIL_MEM_set_8+0x16>
  }
}
 801c360:	bf00      	nop
 801c362:	bf00      	nop
 801c364:	3714      	adds	r7, #20
 801c366:	46bd      	mov	sp, r7
 801c368:	bc80      	pop	{r7}
 801c36a:	4770      	bx	lr

0801c36c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801c36c:	b082      	sub	sp, #8
 801c36e:	b480      	push	{r7}
 801c370:	b087      	sub	sp, #28
 801c372:	af00      	add	r7, sp, #0
 801c374:	60f8      	str	r0, [r7, #12]
 801c376:	1d38      	adds	r0, r7, #4
 801c378:	e880 0006 	stmia.w	r0, {r1, r2}
 801c37c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801c37e:	2300      	movs	r3, #0
 801c380:	613b      	str	r3, [r7, #16]
 801c382:	2300      	movs	r3, #0
 801c384:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801c386:	687a      	ldr	r2, [r7, #4]
 801c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c38a:	4413      	add	r3, r2
 801c38c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801c38e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c392:	b29a      	uxth	r2, r3
 801c394:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c398:	b29b      	uxth	r3, r3
 801c39a:	4413      	add	r3, r2
 801c39c:	b29b      	uxth	r3, r3
 801c39e:	b21b      	sxth	r3, r3
 801c3a0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801c3a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c3a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801c3aa:	db0a      	blt.n	801c3c2 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801c3ac:	693b      	ldr	r3, [r7, #16]
 801c3ae:	3301      	adds	r3, #1
 801c3b0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801c3b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c3b6:	b29b      	uxth	r3, r3
 801c3b8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801c3bc:	b29b      	uxth	r3, r3
 801c3be:	b21b      	sxth	r3, r3
 801c3c0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	461a      	mov	r2, r3
 801c3c6:	f107 0310 	add.w	r3, r7, #16
 801c3ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c3ce:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c3d2:	68f8      	ldr	r0, [r7, #12]
 801c3d4:	371c      	adds	r7, #28
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bc80      	pop	{r7}
 801c3da:	b002      	add	sp, #8
 801c3dc:	4770      	bx	lr

0801c3de <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801c3de:	b082      	sub	sp, #8
 801c3e0:	b480      	push	{r7}
 801c3e2:	b087      	sub	sp, #28
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	60f8      	str	r0, [r7, #12]
 801c3e8:	1d38      	adds	r0, r7, #4
 801c3ea:	e880 0006 	stmia.w	r0, {r1, r2}
 801c3ee:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801c3f0:	2300      	movs	r3, #0
 801c3f2:	613b      	str	r3, [r7, #16]
 801c3f4:	2300      	movs	r3, #0
 801c3f6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801c3f8:	687a      	ldr	r2, [r7, #4]
 801c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3fc:	1ad3      	subs	r3, r2, r3
 801c3fe:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801c400:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801c404:	b29a      	uxth	r2, r3
 801c406:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801c40a:	b29b      	uxth	r3, r3
 801c40c:	1ad3      	subs	r3, r2, r3
 801c40e:	b29b      	uxth	r3, r3
 801c410:	b21b      	sxth	r3, r3
 801c412:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801c414:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	da0a      	bge.n	801c432 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801c41c:	693b      	ldr	r3, [r7, #16]
 801c41e:	3b01      	subs	r3, #1
 801c420:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801c422:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c426:	b29b      	uxth	r3, r3
 801c428:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801c42c:	b29b      	uxth	r3, r3
 801c42e:	b21b      	sxth	r3, r3
 801c430:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	461a      	mov	r2, r3
 801c436:	f107 0310 	add.w	r3, r7, #16
 801c43a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c43e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c442:	68f8      	ldr	r0, [r7, #12]
 801c444:	371c      	adds	r7, #28
 801c446:	46bd      	mov	sp, r7
 801c448:	bc80      	pop	{r7}
 801c44a:	b002      	add	sp, #8
 801c44c:	4770      	bx	lr
	...

0801c450 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801c450:	b580      	push	{r7, lr}
 801c452:	b088      	sub	sp, #32
 801c454:	af02      	add	r7, sp, #8
 801c456:	463b      	mov	r3, r7
 801c458:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c45c:	2300      	movs	r3, #0
 801c45e:	60bb      	str	r3, [r7, #8]
 801c460:	2300      	movs	r3, #0
 801c462:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c464:	4b10      	ldr	r3, [pc, #64]	; (801c4a8 <SysTimeSet+0x58>)
 801c466:	691b      	ldr	r3, [r3, #16]
 801c468:	f107 0208 	add.w	r2, r7, #8
 801c46c:	3204      	adds	r2, #4
 801c46e:	4610      	mov	r0, r2
 801c470:	4798      	blx	r3
 801c472:	4603      	mov	r3, r0
 801c474:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801c476:	f107 0010 	add.w	r0, r7, #16
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	9300      	str	r3, [sp, #0]
 801c47e:	68bb      	ldr	r3, [r7, #8]
 801c480:	463a      	mov	r2, r7
 801c482:	ca06      	ldmia	r2, {r1, r2}
 801c484:	f7ff ffab 	bl	801c3de <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801c488:	4b07      	ldr	r3, [pc, #28]	; (801c4a8 <SysTimeSet+0x58>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	693a      	ldr	r2, [r7, #16]
 801c48e:	4610      	mov	r0, r2
 801c490:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801c492:	4b05      	ldr	r3, [pc, #20]	; (801c4a8 <SysTimeSet+0x58>)
 801c494:	689b      	ldr	r3, [r3, #8]
 801c496:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801c49a:	4610      	mov	r0, r2
 801c49c:	4798      	blx	r3
}
 801c49e:	bf00      	nop
 801c4a0:	3718      	adds	r7, #24
 801c4a2:	46bd      	mov	sp, r7
 801c4a4:	bd80      	pop	{r7, pc}
 801c4a6:	bf00      	nop
 801c4a8:	0801eac8 	.word	0x0801eac8

0801c4ac <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801c4ac:	b580      	push	{r7, lr}
 801c4ae:	b08a      	sub	sp, #40	; 0x28
 801c4b0:	af02      	add	r7, sp, #8
 801c4b2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	61bb      	str	r3, [r7, #24]
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801c4bc:	2300      	movs	r3, #0
 801c4be:	613b      	str	r3, [r7, #16]
 801c4c0:	2300      	movs	r3, #0
 801c4c2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c4c4:	4b14      	ldr	r3, [pc, #80]	; (801c518 <SysTimeGet+0x6c>)
 801c4c6:	691b      	ldr	r3, [r3, #16]
 801c4c8:	f107 0218 	add.w	r2, r7, #24
 801c4cc:	3204      	adds	r2, #4
 801c4ce:	4610      	mov	r0, r2
 801c4d0:	4798      	blx	r3
 801c4d2:	4603      	mov	r3, r0
 801c4d4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c4d6:	4b10      	ldr	r3, [pc, #64]	; (801c518 <SysTimeGet+0x6c>)
 801c4d8:	68db      	ldr	r3, [r3, #12]
 801c4da:	4798      	blx	r3
 801c4dc:	4603      	mov	r3, r0
 801c4de:	b21b      	sxth	r3, r3
 801c4e0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c4e2:	4b0d      	ldr	r3, [pc, #52]	; (801c518 <SysTimeGet+0x6c>)
 801c4e4:	685b      	ldr	r3, [r3, #4]
 801c4e6:	4798      	blx	r3
 801c4e8:	4603      	mov	r3, r0
 801c4ea:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801c4ec:	f107 0010 	add.w	r0, r7, #16
 801c4f0:	69fb      	ldr	r3, [r7, #28]
 801c4f2:	9300      	str	r3, [sp, #0]
 801c4f4:	69bb      	ldr	r3, [r7, #24]
 801c4f6:	f107 0208 	add.w	r2, r7, #8
 801c4fa:	ca06      	ldmia	r2, {r1, r2}
 801c4fc:	f7ff ff36 	bl	801c36c <SysTimeAdd>

  return sysTime;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	461a      	mov	r2, r3
 801c504:	f107 0310 	add.w	r3, r7, #16
 801c508:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c50c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c510:	6878      	ldr	r0, [r7, #4]
 801c512:	3720      	adds	r7, #32
 801c514:	46bd      	mov	sp, r7
 801c516:	bd80      	pop	{r7, pc}
 801c518:	0801eac8 	.word	0x0801eac8

0801c51c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801c51c:	b580      	push	{r7, lr}
 801c51e:	b084      	sub	sp, #16
 801c520:	af00      	add	r7, sp, #0
 801c522:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801c524:	2300      	movs	r3, #0
 801c526:	60bb      	str	r3, [r7, #8]
 801c528:	2300      	movs	r3, #0
 801c52a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801c52c:	4b0a      	ldr	r3, [pc, #40]	; (801c558 <SysTimeGetMcuTime+0x3c>)
 801c52e:	691b      	ldr	r3, [r3, #16]
 801c530:	f107 0208 	add.w	r2, r7, #8
 801c534:	3204      	adds	r2, #4
 801c536:	4610      	mov	r0, r2
 801c538:	4798      	blx	r3
 801c53a:	4603      	mov	r3, r0
 801c53c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	461a      	mov	r2, r3
 801c542:	f107 0308 	add.w	r3, r7, #8
 801c546:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c54a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801c54e:	6878      	ldr	r0, [r7, #4]
 801c550:	3710      	adds	r7, #16
 801c552:	46bd      	mov	sp, r7
 801c554:	bd80      	pop	{r7, pc}
 801c556:	bf00      	nop
 801c558:	0801eac8 	.word	0x0801eac8

0801c55c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801c55c:	b580      	push	{r7, lr}
 801c55e:	b088      	sub	sp, #32
 801c560:	af02      	add	r7, sp, #8
 801c562:	463b      	mov	r3, r7
 801c564:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c568:	4b0f      	ldr	r3, [pc, #60]	; (801c5a8 <SysTimeToMs+0x4c>)
 801c56a:	68db      	ldr	r3, [r3, #12]
 801c56c:	4798      	blx	r3
 801c56e:	4603      	mov	r3, r0
 801c570:	b21b      	sxth	r3, r3
 801c572:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c574:	4b0c      	ldr	r3, [pc, #48]	; (801c5a8 <SysTimeToMs+0x4c>)
 801c576:	685b      	ldr	r3, [r3, #4]
 801c578:	4798      	blx	r3
 801c57a:	4603      	mov	r3, r0
 801c57c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801c57e:	f107 0008 	add.w	r0, r7, #8
 801c582:	697b      	ldr	r3, [r7, #20]
 801c584:	9300      	str	r3, [sp, #0]
 801c586:	693b      	ldr	r3, [r7, #16]
 801c588:	463a      	mov	r2, r7
 801c58a:	ca06      	ldmia	r2, {r1, r2}
 801c58c:	f7ff ff27 	bl	801c3de <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801c590:	68bb      	ldr	r3, [r7, #8]
 801c592:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801c596:	fb02 f303 	mul.w	r3, r2, r3
 801c59a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801c59e:	4413      	add	r3, r2
}
 801c5a0:	4618      	mov	r0, r3
 801c5a2:	3718      	adds	r7, #24
 801c5a4:	46bd      	mov	sp, r7
 801c5a6:	bd80      	pop	{r7, pc}
 801c5a8:	0801eac8 	.word	0x0801eac8

0801c5ac <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b08a      	sub	sp, #40	; 0x28
 801c5b0:	af02      	add	r7, sp, #8
 801c5b2:	6078      	str	r0, [r7, #4]
 801c5b4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801c5b6:	683b      	ldr	r3, [r7, #0]
 801c5b8:	4a19      	ldr	r2, [pc, #100]	; (801c620 <SysTimeFromMs+0x74>)
 801c5ba:	fba2 2303 	umull	r2, r3, r2, r3
 801c5be:	099b      	lsrs	r3, r3, #6
 801c5c0:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801c5c2:	69fb      	ldr	r3, [r7, #28]
 801c5c4:	617b      	str	r3, [r7, #20]
 801c5c6:	683b      	ldr	r3, [r7, #0]
 801c5c8:	b29a      	uxth	r2, r3
 801c5ca:	69fb      	ldr	r3, [r7, #28]
 801c5cc:	b29b      	uxth	r3, r3
 801c5ce:	4619      	mov	r1, r3
 801c5d0:	0149      	lsls	r1, r1, #5
 801c5d2:	1ac9      	subs	r1, r1, r3
 801c5d4:	0089      	lsls	r1, r1, #2
 801c5d6:	440b      	add	r3, r1
 801c5d8:	00db      	lsls	r3, r3, #3
 801c5da:	b29b      	uxth	r3, r3
 801c5dc:	1ad3      	subs	r3, r2, r3
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	b21b      	sxth	r3, r3
 801c5e2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801c5e4:	f107 030c 	add.w	r3, r7, #12
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	601a      	str	r2, [r3, #0]
 801c5ec:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801c5ee:	4b0d      	ldr	r3, [pc, #52]	; (801c624 <SysTimeFromMs+0x78>)
 801c5f0:	68db      	ldr	r3, [r3, #12]
 801c5f2:	4798      	blx	r3
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	b21b      	sxth	r3, r3
 801c5f8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801c5fa:	4b0a      	ldr	r3, [pc, #40]	; (801c624 <SysTimeFromMs+0x78>)
 801c5fc:	685b      	ldr	r3, [r3, #4]
 801c5fe:	4798      	blx	r3
 801c600:	4603      	mov	r3, r0
 801c602:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801c604:	6878      	ldr	r0, [r7, #4]
 801c606:	693b      	ldr	r3, [r7, #16]
 801c608:	9300      	str	r3, [sp, #0]
 801c60a:	68fb      	ldr	r3, [r7, #12]
 801c60c:	f107 0214 	add.w	r2, r7, #20
 801c610:	ca06      	ldmia	r2, {r1, r2}
 801c612:	f7ff feab 	bl	801c36c <SysTimeAdd>
}
 801c616:	6878      	ldr	r0, [r7, #4]
 801c618:	3720      	adds	r7, #32
 801c61a:	46bd      	mov	sp, r7
 801c61c:	bd80      	pop	{r7, pc}
 801c61e:	bf00      	nop
 801c620:	10624dd3 	.word	0x10624dd3
 801c624:	0801eac8 	.word	0x0801eac8

0801c628 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801c628:	b480      	push	{r7}
 801c62a:	b085      	sub	sp, #20
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801c630:	2300      	movs	r3, #0
 801c632:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801c634:	e00e      	b.n	801c654 <ee_skip_atoi+0x2c>
 801c636:	68fa      	ldr	r2, [r7, #12]
 801c638:	4613      	mov	r3, r2
 801c63a:	009b      	lsls	r3, r3, #2
 801c63c:	4413      	add	r3, r2
 801c63e:	005b      	lsls	r3, r3, #1
 801c640:	4618      	mov	r0, r3
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	1c59      	adds	r1, r3, #1
 801c648:	687a      	ldr	r2, [r7, #4]
 801c64a:	6011      	str	r1, [r2, #0]
 801c64c:	781b      	ldrb	r3, [r3, #0]
 801c64e:	4403      	add	r3, r0
 801c650:	3b30      	subs	r3, #48	; 0x30
 801c652:	60fb      	str	r3, [r7, #12]
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	781b      	ldrb	r3, [r3, #0]
 801c65a:	2b2f      	cmp	r3, #47	; 0x2f
 801c65c:	d904      	bls.n	801c668 <ee_skip_atoi+0x40>
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	681b      	ldr	r3, [r3, #0]
 801c662:	781b      	ldrb	r3, [r3, #0]
 801c664:	2b39      	cmp	r3, #57	; 0x39
 801c666:	d9e6      	bls.n	801c636 <ee_skip_atoi+0xe>
  return i;
 801c668:	68fb      	ldr	r3, [r7, #12]
}
 801c66a:	4618      	mov	r0, r3
 801c66c:	3714      	adds	r7, #20
 801c66e:	46bd      	mov	sp, r7
 801c670:	bc80      	pop	{r7}
 801c672:	4770      	bx	lr

0801c674 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801c674:	b480      	push	{r7}
 801c676:	b099      	sub	sp, #100	; 0x64
 801c678:	af00      	add	r7, sp, #0
 801c67a:	60f8      	str	r0, [r7, #12]
 801c67c:	60b9      	str	r1, [r7, #8]
 801c67e:	607a      	str	r2, [r7, #4]
 801c680:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801c682:	4b71      	ldr	r3, [pc, #452]	; (801c848 <ee_number+0x1d4>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801c688:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d002      	beq.n	801c698 <ee_number+0x24>
 801c692:	4b6e      	ldr	r3, [pc, #440]	; (801c84c <ee_number+0x1d8>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801c698:	683b      	ldr	r3, [r7, #0]
 801c69a:	2b01      	cmp	r3, #1
 801c69c:	dd02      	ble.n	801c6a4 <ee_number+0x30>
 801c69e:	683b      	ldr	r3, [r7, #0]
 801c6a0:	2b24      	cmp	r3, #36	; 0x24
 801c6a2:	dd01      	ble.n	801c6a8 <ee_number+0x34>
 801c6a4:	2300      	movs	r3, #0
 801c6a6:	e0ca      	b.n	801c83e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801c6a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c6aa:	f003 0301 	and.w	r3, r3, #1
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d001      	beq.n	801c6b6 <ee_number+0x42>
 801c6b2:	2330      	movs	r3, #48	; 0x30
 801c6b4:	e000      	b.n	801c6b8 <ee_number+0x44>
 801c6b6:	2320      	movs	r3, #32
 801c6b8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801c6bc:	2300      	movs	r3, #0
 801c6be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801c6c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c6c4:	f003 0302 	and.w	r3, r3, #2
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d00b      	beq.n	801c6e4 <ee_number+0x70>
  {
    if (num < 0)
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	da08      	bge.n	801c6e4 <ee_number+0x70>
    {
      sign = '-';
 801c6d2:	232d      	movs	r3, #45	; 0x2d
 801c6d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	425b      	negs	r3, r3
 801c6dc:	607b      	str	r3, [r7, #4]
      size--;
 801c6de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c6e0:	3b01      	subs	r3, #1
 801c6e2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801c6e4:	2300      	movs	r3, #0
 801c6e6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d11e      	bne.n	801c72c <ee_number+0xb8>
    tmp[i++] = '0';
 801c6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c6f0:	1c5a      	adds	r2, r3, #1
 801c6f2:	657a      	str	r2, [r7, #84]	; 0x54
 801c6f4:	3360      	adds	r3, #96	; 0x60
 801c6f6:	443b      	add	r3, r7
 801c6f8:	2230      	movs	r2, #48	; 0x30
 801c6fa:	f803 2c50 	strb.w	r2, [r3, #-80]
 801c6fe:	e018      	b.n	801c732 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	683a      	ldr	r2, [r7, #0]
 801c704:	fbb3 f1f2 	udiv	r1, r3, r2
 801c708:	fb01 f202 	mul.w	r2, r1, r2
 801c70c:	1a9b      	subs	r3, r3, r2
 801c70e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801c710:	441a      	add	r2, r3
 801c712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c714:	1c59      	adds	r1, r3, #1
 801c716:	6579      	str	r1, [r7, #84]	; 0x54
 801c718:	7812      	ldrb	r2, [r2, #0]
 801c71a:	3360      	adds	r3, #96	; 0x60
 801c71c:	443b      	add	r3, r7
 801c71e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801c722:	687a      	ldr	r2, [r7, #4]
 801c724:	683b      	ldr	r3, [r7, #0]
 801c726:	fbb2 f3f3 	udiv	r3, r2, r3
 801c72a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d1e6      	bne.n	801c700 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801c732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c736:	429a      	cmp	r2, r3
 801c738:	dd01      	ble.n	801c73e <ee_number+0xca>
 801c73a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c73c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801c73e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c742:	1ad3      	subs	r3, r2, r3
 801c744:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801c746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c748:	f003 0301 	and.w	r3, r3, #1
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d112      	bne.n	801c776 <ee_number+0x102>
 801c750:	e00c      	b.n	801c76c <ee_number+0xf8>
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	1c5a      	adds	r2, r3, #1
 801c756:	60fa      	str	r2, [r7, #12]
 801c758:	2220      	movs	r2, #32
 801c75a:	701a      	strb	r2, [r3, #0]
 801c75c:	68bb      	ldr	r3, [r7, #8]
 801c75e:	3b01      	subs	r3, #1
 801c760:	60bb      	str	r3, [r7, #8]
 801c762:	68bb      	ldr	r3, [r7, #8]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d101      	bne.n	801c76c <ee_number+0xf8>
 801c768:	68fb      	ldr	r3, [r7, #12]
 801c76a:	e068      	b.n	801c83e <ee_number+0x1ca>
 801c76c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c76e:	1e5a      	subs	r2, r3, #1
 801c770:	66ba      	str	r2, [r7, #104]	; 0x68
 801c772:	2b00      	cmp	r3, #0
 801c774:	dced      	bgt.n	801c752 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801c776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d01b      	beq.n	801c7b6 <ee_number+0x142>
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	1c5a      	adds	r2, r3, #1
 801c782:	60fa      	str	r2, [r7, #12]
 801c784:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801c788:	701a      	strb	r2, [r3, #0]
 801c78a:	68bb      	ldr	r3, [r7, #8]
 801c78c:	3b01      	subs	r3, #1
 801c78e:	60bb      	str	r3, [r7, #8]
 801c790:	68bb      	ldr	r3, [r7, #8]
 801c792:	2b00      	cmp	r3, #0
 801c794:	d10f      	bne.n	801c7b6 <ee_number+0x142>
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	e051      	b.n	801c83e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	1c5a      	adds	r2, r3, #1
 801c79e:	60fa      	str	r2, [r7, #12]
 801c7a0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801c7a4:	701a      	strb	r2, [r3, #0]
 801c7a6:	68bb      	ldr	r3, [r7, #8]
 801c7a8:	3b01      	subs	r3, #1
 801c7aa:	60bb      	str	r3, [r7, #8]
 801c7ac:	68bb      	ldr	r3, [r7, #8]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d101      	bne.n	801c7b6 <ee_number+0x142>
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	e043      	b.n	801c83e <ee_number+0x1ca>
 801c7b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c7b8:	1e5a      	subs	r2, r3, #1
 801c7ba:	66ba      	str	r2, [r7, #104]	; 0x68
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	dcec      	bgt.n	801c79a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801c7c0:	e00c      	b.n	801c7dc <ee_number+0x168>
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	1c5a      	adds	r2, r3, #1
 801c7c6:	60fa      	str	r2, [r7, #12]
 801c7c8:	2230      	movs	r2, #48	; 0x30
 801c7ca:	701a      	strb	r2, [r3, #0]
 801c7cc:	68bb      	ldr	r3, [r7, #8]
 801c7ce:	3b01      	subs	r3, #1
 801c7d0:	60bb      	str	r3, [r7, #8]
 801c7d2:	68bb      	ldr	r3, [r7, #8]
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d101      	bne.n	801c7dc <ee_number+0x168>
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	e030      	b.n	801c83e <ee_number+0x1ca>
 801c7dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c7de:	1e5a      	subs	r2, r3, #1
 801c7e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 801c7e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c7e4:	429a      	cmp	r2, r3
 801c7e6:	dbec      	blt.n	801c7c2 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801c7e8:	e010      	b.n	801c80c <ee_number+0x198>
 801c7ea:	68fb      	ldr	r3, [r7, #12]
 801c7ec:	1c5a      	adds	r2, r3, #1
 801c7ee:	60fa      	str	r2, [r7, #12]
 801c7f0:	f107 0110 	add.w	r1, r7, #16
 801c7f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c7f6:	440a      	add	r2, r1
 801c7f8:	7812      	ldrb	r2, [r2, #0]
 801c7fa:	701a      	strb	r2, [r3, #0]
 801c7fc:	68bb      	ldr	r3, [r7, #8]
 801c7fe:	3b01      	subs	r3, #1
 801c800:	60bb      	str	r3, [r7, #8]
 801c802:	68bb      	ldr	r3, [r7, #8]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d101      	bne.n	801c80c <ee_number+0x198>
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	e018      	b.n	801c83e <ee_number+0x1ca>
 801c80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c80e:	1e5a      	subs	r2, r3, #1
 801c810:	657a      	str	r2, [r7, #84]	; 0x54
 801c812:	2b00      	cmp	r3, #0
 801c814:	dce9      	bgt.n	801c7ea <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801c816:	e00c      	b.n	801c832 <ee_number+0x1be>
 801c818:	68fb      	ldr	r3, [r7, #12]
 801c81a:	1c5a      	adds	r2, r3, #1
 801c81c:	60fa      	str	r2, [r7, #12]
 801c81e:	2220      	movs	r2, #32
 801c820:	701a      	strb	r2, [r3, #0]
 801c822:	68bb      	ldr	r3, [r7, #8]
 801c824:	3b01      	subs	r3, #1
 801c826:	60bb      	str	r3, [r7, #8]
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d101      	bne.n	801c832 <ee_number+0x1be>
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	e005      	b.n	801c83e <ee_number+0x1ca>
 801c832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801c834:	1e5a      	subs	r2, r3, #1
 801c836:	66ba      	str	r2, [r7, #104]	; 0x68
 801c838:	2b00      	cmp	r3, #0
 801c83a:	dced      	bgt.n	801c818 <ee_number+0x1a4>

  return str;
 801c83c:	68fb      	ldr	r3, [r7, #12]
}
 801c83e:	4618      	mov	r0, r3
 801c840:	3764      	adds	r7, #100	; 0x64
 801c842:	46bd      	mov	sp, r7
 801c844:	bc80      	pop	{r7}
 801c846:	4770      	bx	lr
 801c848:	20000148 	.word	0x20000148
 801c84c:	2000014c 	.word	0x2000014c

0801c850 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801c850:	b580      	push	{r7, lr}
 801c852:	b092      	sub	sp, #72	; 0x48
 801c854:	af04      	add	r7, sp, #16
 801c856:	60f8      	str	r0, [r7, #12]
 801c858:	60b9      	str	r1, [r7, #8]
 801c85a:	607a      	str	r2, [r7, #4]
 801c85c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	2b00      	cmp	r3, #0
 801c862:	dc01      	bgt.n	801c868 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801c864:	2300      	movs	r3, #0
 801c866:	e142      	b.n	801caee <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c86c:	e12a      	b.n	801cac4 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801c86e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c870:	68fb      	ldr	r3, [r7, #12]
 801c872:	1ad2      	subs	r2, r2, r3
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	3b01      	subs	r3, #1
 801c878:	429a      	cmp	r2, r3
 801c87a:	f280 8131 	bge.w	801cae0 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	781b      	ldrb	r3, [r3, #0]
 801c882:	2b25      	cmp	r3, #37	; 0x25
 801c884:	d006      	beq.n	801c894 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801c886:	687a      	ldr	r2, [r7, #4]
 801c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c88a:	1c59      	adds	r1, r3, #1
 801c88c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c88e:	7812      	ldrb	r2, [r2, #0]
 801c890:	701a      	strb	r2, [r3, #0]
      continue;
 801c892:	e114      	b.n	801cabe <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801c894:	2300      	movs	r3, #0
 801c896:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	3301      	adds	r3, #1
 801c89c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801c89e:	687b      	ldr	r3, [r7, #4]
 801c8a0:	781b      	ldrb	r3, [r3, #0]
 801c8a2:	2b30      	cmp	r3, #48	; 0x30
 801c8a4:	d103      	bne.n	801c8ae <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801c8a6:	6a3b      	ldr	r3, [r7, #32]
 801c8a8:	f043 0301 	orr.w	r3, r3, #1
 801c8ac:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801c8ae:	f04f 33ff 	mov.w	r3, #4294967295
 801c8b2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	781b      	ldrb	r3, [r3, #0]
 801c8b8:	2b2f      	cmp	r3, #47	; 0x2f
 801c8ba:	d908      	bls.n	801c8ce <tiny_vsnprintf_like+0x7e>
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	781b      	ldrb	r3, [r3, #0]
 801c8c0:	2b39      	cmp	r3, #57	; 0x39
 801c8c2:	d804      	bhi.n	801c8ce <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801c8c4:	1d3b      	adds	r3, r7, #4
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f7ff feae 	bl	801c628 <ee_skip_atoi>
 801c8cc:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801c8ce:	f04f 33ff 	mov.w	r3, #4294967295
 801c8d2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801c8d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c8d8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801c8da:	230a      	movs	r3, #10
 801c8dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	781b      	ldrb	r3, [r3, #0]
 801c8e2:	3b58      	subs	r3, #88	; 0x58
 801c8e4:	2b20      	cmp	r3, #32
 801c8e6:	f200 8094 	bhi.w	801ca12 <tiny_vsnprintf_like+0x1c2>
 801c8ea:	a201      	add	r2, pc, #4	; (adr r2, 801c8f0 <tiny_vsnprintf_like+0xa0>)
 801c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c8f0:	0801c9fb 	.word	0x0801c9fb
 801c8f4:	0801ca13 	.word	0x0801ca13
 801c8f8:	0801ca13 	.word	0x0801ca13
 801c8fc:	0801ca13 	.word	0x0801ca13
 801c900:	0801ca13 	.word	0x0801ca13
 801c904:	0801ca13 	.word	0x0801ca13
 801c908:	0801ca13 	.word	0x0801ca13
 801c90c:	0801ca13 	.word	0x0801ca13
 801c910:	0801ca13 	.word	0x0801ca13
 801c914:	0801ca13 	.word	0x0801ca13
 801c918:	0801ca13 	.word	0x0801ca13
 801c91c:	0801c97f 	.word	0x0801c97f
 801c920:	0801ca09 	.word	0x0801ca09
 801c924:	0801ca13 	.word	0x0801ca13
 801c928:	0801ca13 	.word	0x0801ca13
 801c92c:	0801ca13 	.word	0x0801ca13
 801c930:	0801ca13 	.word	0x0801ca13
 801c934:	0801ca09 	.word	0x0801ca09
 801c938:	0801ca13 	.word	0x0801ca13
 801c93c:	0801ca13 	.word	0x0801ca13
 801c940:	0801ca13 	.word	0x0801ca13
 801c944:	0801ca13 	.word	0x0801ca13
 801c948:	0801ca13 	.word	0x0801ca13
 801c94c:	0801ca13 	.word	0x0801ca13
 801c950:	0801ca13 	.word	0x0801ca13
 801c954:	0801ca13 	.word	0x0801ca13
 801c958:	0801ca13 	.word	0x0801ca13
 801c95c:	0801c99f 	.word	0x0801c99f
 801c960:	0801ca13 	.word	0x0801ca13
 801c964:	0801ca5f 	.word	0x0801ca5f
 801c968:	0801ca13 	.word	0x0801ca13
 801c96c:	0801ca13 	.word	0x0801ca13
 801c970:	0801ca03 	.word	0x0801ca03
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c976:	1c5a      	adds	r2, r3, #1
 801c978:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c97a:	2220      	movs	r2, #32
 801c97c:	701a      	strb	r2, [r3, #0]
 801c97e:	69fb      	ldr	r3, [r7, #28]
 801c980:	3b01      	subs	r3, #1
 801c982:	61fb      	str	r3, [r7, #28]
 801c984:	69fb      	ldr	r3, [r7, #28]
 801c986:	2b00      	cmp	r3, #0
 801c988:	dcf4      	bgt.n	801c974 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	1d1a      	adds	r2, r3, #4
 801c98e:	603a      	str	r2, [r7, #0]
 801c990:	6819      	ldr	r1, [r3, #0]
 801c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c994:	1c5a      	adds	r2, r3, #1
 801c996:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c998:	b2ca      	uxtb	r2, r1
 801c99a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801c99c:	e08f      	b.n	801cabe <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801c99e:	683b      	ldr	r3, [r7, #0]
 801c9a0:	1d1a      	adds	r2, r3, #4
 801c9a2:	603a      	str	r2, [r7, #0]
 801c9a4:	681b      	ldr	r3, [r3, #0]
 801c9a6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801c9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d101      	bne.n	801c9b2 <tiny_vsnprintf_like+0x162>
 801c9ae:	4b52      	ldr	r3, [pc, #328]	; (801caf8 <tiny_vsnprintf_like+0x2a8>)
 801c9b0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801c9b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c9b4:	f7e3 fbe4 	bl	8000180 <strlen>
 801c9b8:	4603      	mov	r3, r0
 801c9ba:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801c9bc:	e004      	b.n	801c9c8 <tiny_vsnprintf_like+0x178>
 801c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9c0:	1c5a      	adds	r2, r3, #1
 801c9c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c9c4:	2220      	movs	r2, #32
 801c9c6:	701a      	strb	r2, [r3, #0]
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	1e5a      	subs	r2, r3, #1
 801c9cc:	61fa      	str	r2, [r7, #28]
 801c9ce:	693a      	ldr	r2, [r7, #16]
 801c9d0:	429a      	cmp	r2, r3
 801c9d2:	dbf4      	blt.n	801c9be <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 801c9d8:	e00a      	b.n	801c9f0 <tiny_vsnprintf_like+0x1a0>
 801c9da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c9dc:	1c53      	adds	r3, r2, #1
 801c9de:	627b      	str	r3, [r7, #36]	; 0x24
 801c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c9e2:	1c59      	adds	r1, r3, #1
 801c9e4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801c9e6:	7812      	ldrb	r2, [r2, #0]
 801c9e8:	701a      	strb	r2, [r3, #0]
 801c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9ec:	3301      	adds	r3, #1
 801c9ee:	62bb      	str	r3, [r7, #40]	; 0x28
 801c9f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c9f2:	693b      	ldr	r3, [r7, #16]
 801c9f4:	429a      	cmp	r2, r3
 801c9f6:	dbf0      	blt.n	801c9da <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801c9f8:	e061      	b.n	801cabe <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801c9fa:	6a3b      	ldr	r3, [r7, #32]
 801c9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ca00:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801ca02:	2310      	movs	r3, #16
 801ca04:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801ca06:	e02d      	b.n	801ca64 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801ca08:	6a3b      	ldr	r3, [r7, #32]
 801ca0a:	f043 0302 	orr.w	r3, r3, #2
 801ca0e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801ca10:	e025      	b.n	801ca5e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	2b25      	cmp	r3, #37	; 0x25
 801ca18:	d004      	beq.n	801ca24 <tiny_vsnprintf_like+0x1d4>
 801ca1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca1c:	1c5a      	adds	r2, r3, #1
 801ca1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ca20:	2225      	movs	r2, #37	; 0x25
 801ca22:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801ca24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	1ad2      	subs	r2, r2, r3
 801ca2a:	68bb      	ldr	r3, [r7, #8]
 801ca2c:	3b01      	subs	r3, #1
 801ca2e:	429a      	cmp	r2, r3
 801ca30:	da17      	bge.n	801ca62 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	781b      	ldrb	r3, [r3, #0]
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d006      	beq.n	801ca48 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801ca3a:	687a      	ldr	r2, [r7, #4]
 801ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca3e:	1c59      	adds	r1, r3, #1
 801ca40:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ca42:	7812      	ldrb	r2, [r2, #0]
 801ca44:	701a      	strb	r2, [r3, #0]
 801ca46:	e002      	b.n	801ca4e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	3b01      	subs	r3, #1
 801ca4c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801ca4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ca50:	68fb      	ldr	r3, [r7, #12]
 801ca52:	1ad2      	subs	r2, r2, r3
 801ca54:	68bb      	ldr	r3, [r7, #8]
 801ca56:	3b01      	subs	r3, #1
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	db2f      	blt.n	801cabc <tiny_vsnprintf_like+0x26c>
 801ca5c:	e002      	b.n	801ca64 <tiny_vsnprintf_like+0x214>
        break;
 801ca5e:	bf00      	nop
 801ca60:	e000      	b.n	801ca64 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801ca62:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801ca64:	697b      	ldr	r3, [r7, #20]
 801ca66:	2b6c      	cmp	r3, #108	; 0x6c
 801ca68:	d105      	bne.n	801ca76 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801ca6a:	683b      	ldr	r3, [r7, #0]
 801ca6c:	1d1a      	adds	r2, r3, #4
 801ca6e:	603a      	str	r2, [r7, #0]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	637b      	str	r3, [r7, #52]	; 0x34
 801ca74:	e00f      	b.n	801ca96 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801ca76:	6a3b      	ldr	r3, [r7, #32]
 801ca78:	f003 0302 	and.w	r3, r3, #2
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d005      	beq.n	801ca8c <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801ca80:	683b      	ldr	r3, [r7, #0]
 801ca82:	1d1a      	adds	r2, r3, #4
 801ca84:	603a      	str	r2, [r7, #0]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	637b      	str	r3, [r7, #52]	; 0x34
 801ca8a:	e004      	b.n	801ca96 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801ca8c:	683b      	ldr	r3, [r7, #0]
 801ca8e:	1d1a      	adds	r2, r3, #4
 801ca90:	603a      	str	r2, [r7, #0]
 801ca92:	681b      	ldr	r3, [r3, #0]
 801ca94:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ca96:	68bb      	ldr	r3, [r7, #8]
 801ca98:	1e5a      	subs	r2, r3, #1
 801ca9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	1acb      	subs	r3, r1, r3
 801caa0:	1ad1      	subs	r1, r2, r3
 801caa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801caa4:	6a3b      	ldr	r3, [r7, #32]
 801caa6:	9302      	str	r3, [sp, #8]
 801caa8:	69bb      	ldr	r3, [r7, #24]
 801caaa:	9301      	str	r3, [sp, #4]
 801caac:	69fb      	ldr	r3, [r7, #28]
 801caae:	9300      	str	r3, [sp, #0]
 801cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801cab4:	f7ff fdde 	bl	801c674 <ee_number>
 801cab8:	62f8      	str	r0, [r7, #44]	; 0x2c
 801caba:	e000      	b.n	801cabe <tiny_vsnprintf_like+0x26e>
        continue;
 801cabc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	3301      	adds	r3, #1
 801cac2:	607b      	str	r3, [r7, #4]
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	781b      	ldrb	r3, [r3, #0]
 801cac8:	2b00      	cmp	r3, #0
 801caca:	f47f aed0 	bne.w	801c86e <tiny_vsnprintf_like+0x1e>
 801cace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cad0:	68fb      	ldr	r3, [r7, #12]
 801cad2:	1ad2      	subs	r2, r2, r3
 801cad4:	68bb      	ldr	r3, [r7, #8]
 801cad6:	3b01      	subs	r3, #1
 801cad8:	429a      	cmp	r2, r3
 801cada:	f6bf aec8 	bge.w	801c86e <tiny_vsnprintf_like+0x1e>
 801cade:	e000      	b.n	801cae2 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801cae0:	bf00      	nop
  }

  *str = '\0';
 801cae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cae4:	2200      	movs	r2, #0
 801cae6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801cae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	1ad3      	subs	r3, r2, r3
}
 801caee:	4618      	mov	r0, r3
 801caf0:	3738      	adds	r7, #56	; 0x38
 801caf2:	46bd      	mov	sp, r7
 801caf4:	bd80      	pop	{r7, pc}
 801caf6:	bf00      	nop
 801caf8:	0801e9f4 	.word	0x0801e9f4

0801cafc <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801cafc:	b580      	push	{r7, lr}
 801cafe:	b088      	sub	sp, #32
 801cb00:	af00      	add	r7, sp, #0
 801cb02:	60f8      	str	r0, [r7, #12]
 801cb04:	60b9      	str	r1, [r7, #8]
 801cb06:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb08:	f3ef 8310 	mrs	r3, PRIMASK
 801cb0c:	617b      	str	r3, [r7, #20]
  return(result);
 801cb0e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801cb10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb12:	b672      	cpsid	i
}
 801cb14:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801cb16:	68f8      	ldr	r0, [r7, #12]
 801cb18:	f000 f83e 	bl	801cb98 <SEQ_BitPosition>
 801cb1c:	4603      	mov	r3, r0
 801cb1e:	4619      	mov	r1, r3
 801cb20:	4a06      	ldr	r2, [pc, #24]	; (801cb3c <UTIL_SEQ_RegTask+0x40>)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801cb28:	69fb      	ldr	r3, [r7, #28]
 801cb2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb2c:	69bb      	ldr	r3, [r7, #24]
 801cb2e:	f383 8810 	msr	PRIMASK, r3
}
 801cb32:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801cb34:	bf00      	nop
}
 801cb36:	3720      	adds	r7, #32
 801cb38:	46bd      	mov	sp, r7
 801cb3a:	bd80      	pop	{r7, pc}
 801cb3c:	20001c5c 	.word	0x20001c5c

0801cb40 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801cb40:	b480      	push	{r7}
 801cb42:	b087      	sub	sp, #28
 801cb44:	af00      	add	r7, sp, #0
 801cb46:	6078      	str	r0, [r7, #4]
 801cb48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb4a:	f3ef 8310 	mrs	r3, PRIMASK
 801cb4e:	60fb      	str	r3, [r7, #12]
  return(result);
 801cb50:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801cb52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb54:	b672      	cpsid	i
}
 801cb56:	bf00      	nop

  TaskSet |= TaskId_bm;
 801cb58:	4b0d      	ldr	r3, [pc, #52]	; (801cb90 <UTIL_SEQ_SetTask+0x50>)
 801cb5a:	681a      	ldr	r2, [r3, #0]
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	4a0b      	ldr	r2, [pc, #44]	; (801cb90 <UTIL_SEQ_SetTask+0x50>)
 801cb62:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801cb64:	4a0b      	ldr	r2, [pc, #44]	; (801cb94 <UTIL_SEQ_SetTask+0x54>)
 801cb66:	683b      	ldr	r3, [r7, #0]
 801cb68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	431a      	orrs	r2, r3
 801cb70:	4908      	ldr	r1, [pc, #32]	; (801cb94 <UTIL_SEQ_SetTask+0x54>)
 801cb72:	683b      	ldr	r3, [r7, #0]
 801cb74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801cb78:	697b      	ldr	r3, [r7, #20]
 801cb7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cb7c:	693b      	ldr	r3, [r7, #16]
 801cb7e:	f383 8810 	msr	PRIMASK, r3
}
 801cb82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801cb84:	bf00      	nop
}
 801cb86:	371c      	adds	r7, #28
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	bc80      	pop	{r7}
 801cb8c:	4770      	bx	lr
 801cb8e:	bf00      	nop
 801cb90:	20001c58 	.word	0x20001c58
 801cb94:	20001c6c 	.word	0x20001c6c

0801cb98 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801cb98:	b480      	push	{r7}
 801cb9a:	b085      	sub	sp, #20
 801cb9c:	af00      	add	r7, sp, #0
 801cb9e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801cba0:	2300      	movs	r3, #0
 801cba2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801cba8:	68bb      	ldr	r3, [r7, #8]
 801cbaa:	0c1b      	lsrs	r3, r3, #16
 801cbac:	041b      	lsls	r3, r3, #16
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d104      	bne.n	801cbbc <SEQ_BitPosition+0x24>
 801cbb2:	2310      	movs	r3, #16
 801cbb4:	73fb      	strb	r3, [r7, #15]
 801cbb6:	68bb      	ldr	r3, [r7, #8]
 801cbb8:	041b      	lsls	r3, r3, #16
 801cbba:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801cbbc:	68bb      	ldr	r3, [r7, #8]
 801cbbe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d105      	bne.n	801cbd2 <SEQ_BitPosition+0x3a>
 801cbc6:	7bfb      	ldrb	r3, [r7, #15]
 801cbc8:	3308      	adds	r3, #8
 801cbca:	73fb      	strb	r3, [r7, #15]
 801cbcc:	68bb      	ldr	r3, [r7, #8]
 801cbce:	021b      	lsls	r3, r3, #8
 801cbd0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801cbd2:	68bb      	ldr	r3, [r7, #8]
 801cbd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d105      	bne.n	801cbe8 <SEQ_BitPosition+0x50>
 801cbdc:	7bfb      	ldrb	r3, [r7, #15]
 801cbde:	3304      	adds	r3, #4
 801cbe0:	73fb      	strb	r3, [r7, #15]
 801cbe2:	68bb      	ldr	r3, [r7, #8]
 801cbe4:	011b      	lsls	r3, r3, #4
 801cbe6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801cbe8:	68bb      	ldr	r3, [r7, #8]
 801cbea:	0f1b      	lsrs	r3, r3, #28
 801cbec:	4a06      	ldr	r2, [pc, #24]	; (801cc08 <SEQ_BitPosition+0x70>)
 801cbee:	5cd2      	ldrb	r2, [r2, r3]
 801cbf0:	7bfb      	ldrb	r3, [r7, #15]
 801cbf2:	4413      	add	r3, r2
 801cbf4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801cbf6:	7bfb      	ldrb	r3, [r7, #15]
 801cbf8:	f1c3 031f 	rsb	r3, r3, #31
 801cbfc:	b2db      	uxtb	r3, r3
}
 801cbfe:	4618      	mov	r0, r3
 801cc00:	3714      	adds	r7, #20
 801cc02:	46bd      	mov	sp, r7
 801cc04:	bc80      	pop	{r7}
 801cc06:	4770      	bx	lr
 801cc08:	0801f030 	.word	0x0801f030

0801cc0c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801cc10:	4b04      	ldr	r3, [pc, #16]	; (801cc24 <UTIL_TIMER_Init+0x18>)
 801cc12:	2200      	movs	r2, #0
 801cc14:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801cc16:	4b04      	ldr	r3, [pc, #16]	; (801cc28 <UTIL_TIMER_Init+0x1c>)
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	4798      	blx	r3
 801cc1c:	4603      	mov	r3, r0
}
 801cc1e:	4618      	mov	r0, r3
 801cc20:	bd80      	pop	{r7, pc}
 801cc22:	bf00      	nop
 801cc24:	20001c74 	.word	0x20001c74
 801cc28:	0801ea9c 	.word	0x0801ea9c

0801cc2c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b084      	sub	sp, #16
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	60f8      	str	r0, [r7, #12]
 801cc34:	60b9      	str	r1, [r7, #8]
 801cc36:	603b      	str	r3, [r7, #0]
 801cc38:	4613      	mov	r3, r2
 801cc3a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801cc3c:	68fb      	ldr	r3, [r7, #12]
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d023      	beq.n	801cc8a <UTIL_TIMER_Create+0x5e>
 801cc42:	683b      	ldr	r3, [r7, #0]
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d020      	beq.n	801cc8a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801cc4e:	4b11      	ldr	r3, [pc, #68]	; (801cc94 <UTIL_TIMER_Create+0x68>)
 801cc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cc52:	68b8      	ldr	r0, [r7, #8]
 801cc54:	4798      	blx	r3
 801cc56:	4602      	mov	r2, r0
 801cc58:	68fb      	ldr	r3, [r7, #12]
 801cc5a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	2200      	movs	r2, #0
 801cc60:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	2200      	movs	r2, #0
 801cc66:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	2200      	movs	r2, #0
 801cc6c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	683a      	ldr	r2, [r7, #0]
 801cc72:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	69ba      	ldr	r2, [r7, #24]
 801cc78:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	79fa      	ldrb	r2, [r7, #7]
 801cc7e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801cc80:	68fb      	ldr	r3, [r7, #12]
 801cc82:	2200      	movs	r2, #0
 801cc84:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801cc86:	2300      	movs	r3, #0
 801cc88:	e000      	b.n	801cc8c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801cc8a:	2301      	movs	r3, #1
  }
}
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	3710      	adds	r7, #16
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}
 801cc94:	0801ea9c 	.word	0x0801ea9c

0801cc98 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801cc98:	b580      	push	{r7, lr}
 801cc9a:	b08a      	sub	sp, #40	; 0x28
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cca0:	2300      	movs	r3, #0
 801cca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	d056      	beq.n	801cd5a <UTIL_TIMER_Start+0xc2>
 801ccac:	6878      	ldr	r0, [r7, #4]
 801ccae:	f000 f9a9 	bl	801d004 <TimerExists>
 801ccb2:	4603      	mov	r3, r0
 801ccb4:	f083 0301 	eor.w	r3, r3, #1
 801ccb8:	b2db      	uxtb	r3, r3
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d04d      	beq.n	801cd5a <UTIL_TIMER_Start+0xc2>
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	7a5b      	ldrb	r3, [r3, #9]
 801ccc2:	2b00      	cmp	r3, #0
 801ccc4:	d149      	bne.n	801cd5a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ccc6:	f3ef 8310 	mrs	r3, PRIMASK
 801ccca:	613b      	str	r3, [r7, #16]
  return(result);
 801cccc:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ccce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ccd0:	b672      	cpsid	i
}
 801ccd2:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	685b      	ldr	r3, [r3, #4]
 801ccd8:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ccda:	4b24      	ldr	r3, [pc, #144]	; (801cd6c <UTIL_TIMER_Start+0xd4>)
 801ccdc:	6a1b      	ldr	r3, [r3, #32]
 801ccde:	4798      	blx	r3
 801cce0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801cce2:	6a3a      	ldr	r2, [r7, #32]
 801cce4:	69bb      	ldr	r3, [r7, #24]
 801cce6:	429a      	cmp	r2, r3
 801cce8:	d201      	bcs.n	801ccee <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ccea:	69bb      	ldr	r3, [r7, #24]
 801ccec:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	6a3a      	ldr	r2, [r7, #32]
 801ccf2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	2201      	movs	r2, #1
 801ccfe:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	2200      	movs	r2, #0
 801cd04:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801cd06:	4b1a      	ldr	r3, [pc, #104]	; (801cd70 <UTIL_TIMER_Start+0xd8>)
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d106      	bne.n	801cd1c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801cd0e:	4b17      	ldr	r3, [pc, #92]	; (801cd6c <UTIL_TIMER_Start+0xd4>)
 801cd10:	691b      	ldr	r3, [r3, #16]
 801cd12:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801cd14:	6878      	ldr	r0, [r7, #4]
 801cd16:	f000 f9eb 	bl	801d0f0 <TimerInsertNewHeadTimer>
 801cd1a:	e017      	b.n	801cd4c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801cd1c:	4b13      	ldr	r3, [pc, #76]	; (801cd6c <UTIL_TIMER_Start+0xd4>)
 801cd1e:	699b      	ldr	r3, [r3, #24]
 801cd20:	4798      	blx	r3
 801cd22:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	681a      	ldr	r2, [r3, #0]
 801cd28:	697b      	ldr	r3, [r7, #20]
 801cd2a:	441a      	add	r2, r3
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	681a      	ldr	r2, [r3, #0]
 801cd34:	4b0e      	ldr	r3, [pc, #56]	; (801cd70 <UTIL_TIMER_Start+0xd8>)
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	429a      	cmp	r2, r3
 801cd3c:	d203      	bcs.n	801cd46 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801cd3e:	6878      	ldr	r0, [r7, #4]
 801cd40:	f000 f9d6 	bl	801d0f0 <TimerInsertNewHeadTimer>
 801cd44:	e002      	b.n	801cd4c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801cd46:	6878      	ldr	r0, [r7, #4]
 801cd48:	f000 f9a2 	bl	801d090 <TimerInsertTimer>
 801cd4c:	69fb      	ldr	r3, [r7, #28]
 801cd4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd50:	68fb      	ldr	r3, [r7, #12]
 801cd52:	f383 8810 	msr	PRIMASK, r3
}
 801cd56:	bf00      	nop
  {
 801cd58:	e002      	b.n	801cd60 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801cd5a:	2301      	movs	r3, #1
 801cd5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801cd60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801cd64:	4618      	mov	r0, r3
 801cd66:	3728      	adds	r7, #40	; 0x28
 801cd68:	46bd      	mov	sp, r7
 801cd6a:	bd80      	pop	{r7, pc}
 801cd6c:	0801ea9c 	.word	0x0801ea9c
 801cd70:	20001c74 	.word	0x20001c74

0801cd74 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801cd74:	b580      	push	{r7, lr}
 801cd76:	b088      	sub	sp, #32
 801cd78:	af00      	add	r7, sp, #0
 801cd7a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801cd7c:	2300      	movs	r3, #0
 801cd7e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801cd80:	687b      	ldr	r3, [r7, #4]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d05b      	beq.n	801ce3e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd86:	f3ef 8310 	mrs	r3, PRIMASK
 801cd8a:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd8c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801cd8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd90:	b672      	cpsid	i
}
 801cd92:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801cd94:	4b2d      	ldr	r3, [pc, #180]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801cd9a:	4b2c      	ldr	r3, [pc, #176]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cd9c:	681b      	ldr	r3, [r3, #0]
 801cd9e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801cda0:	687b      	ldr	r3, [r7, #4]
 801cda2:	2201      	movs	r2, #1
 801cda4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801cda6:	4b29      	ldr	r3, [pc, #164]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cda8:	681b      	ldr	r3, [r3, #0]
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d041      	beq.n	801ce32 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	2200      	movs	r2, #0
 801cdb2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801cdb4:	4b25      	ldr	r3, [pc, #148]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cdb6:	681b      	ldr	r3, [r3, #0]
 801cdb8:	687a      	ldr	r2, [r7, #4]
 801cdba:	429a      	cmp	r2, r3
 801cdbc:	d134      	bne.n	801ce28 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801cdbe:	4b23      	ldr	r3, [pc, #140]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cdc0:	681b      	ldr	r3, [r3, #0]
 801cdc2:	2200      	movs	r2, #0
 801cdc4:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801cdc6:	4b21      	ldr	r3, [pc, #132]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	695b      	ldr	r3, [r3, #20]
 801cdcc:	2b00      	cmp	r3, #0
 801cdce:	d00a      	beq.n	801cde6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801cdd0:	4b1e      	ldr	r3, [pc, #120]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	695b      	ldr	r3, [r3, #20]
 801cdd6:	4a1d      	ldr	r2, [pc, #116]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cdd8:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801cdda:	4b1c      	ldr	r3, [pc, #112]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	4618      	mov	r0, r3
 801cde0:	f000 f92c 	bl	801d03c <TimerSetTimeout>
 801cde4:	e023      	b.n	801ce2e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801cde6:	4b1a      	ldr	r3, [pc, #104]	; (801ce50 <UTIL_TIMER_Stop+0xdc>)
 801cde8:	68db      	ldr	r3, [r3, #12]
 801cdea:	4798      	blx	r3
            TimerListHead = NULL;
 801cdec:	4b17      	ldr	r3, [pc, #92]	; (801ce4c <UTIL_TIMER_Stop+0xd8>)
 801cdee:	2200      	movs	r2, #0
 801cdf0:	601a      	str	r2, [r3, #0]
 801cdf2:	e01c      	b.n	801ce2e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801cdf4:	697a      	ldr	r2, [r7, #20]
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	429a      	cmp	r2, r3
 801cdfa:	d110      	bne.n	801ce1e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801cdfc:	697b      	ldr	r3, [r7, #20]
 801cdfe:	695b      	ldr	r3, [r3, #20]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	d006      	beq.n	801ce12 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ce04:	697b      	ldr	r3, [r7, #20]
 801ce06:	695b      	ldr	r3, [r3, #20]
 801ce08:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ce0a:	69bb      	ldr	r3, [r7, #24]
 801ce0c:	697a      	ldr	r2, [r7, #20]
 801ce0e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ce10:	e00d      	b.n	801ce2e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ce12:	2300      	movs	r3, #0
 801ce14:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ce16:	69bb      	ldr	r3, [r7, #24]
 801ce18:	697a      	ldr	r2, [r7, #20]
 801ce1a:	615a      	str	r2, [r3, #20]
            break;
 801ce1c:	e007      	b.n	801ce2e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ce1e:	697b      	ldr	r3, [r7, #20]
 801ce20:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ce22:	697b      	ldr	r3, [r7, #20]
 801ce24:	695b      	ldr	r3, [r3, #20]
 801ce26:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ce28:	697b      	ldr	r3, [r7, #20]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d1e2      	bne.n	801cdf4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ce2e:	2300      	movs	r3, #0
 801ce30:	77fb      	strb	r3, [r7, #31]
 801ce32:	693b      	ldr	r3, [r7, #16]
 801ce34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce36:	68bb      	ldr	r3, [r7, #8]
 801ce38:	f383 8810 	msr	PRIMASK, r3
}
 801ce3c:	e001      	b.n	801ce42 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801ce3e:	2301      	movs	r3, #1
 801ce40:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801ce42:	7ffb      	ldrb	r3, [r7, #31]
}
 801ce44:	4618      	mov	r0, r3
 801ce46:	3720      	adds	r7, #32
 801ce48:	46bd      	mov	sp, r7
 801ce4a:	bd80      	pop	{r7, pc}
 801ce4c:	20001c74 	.word	0x20001c74
 801ce50:	0801ea9c 	.word	0x0801ea9c

0801ce54 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b084      	sub	sp, #16
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
 801ce5c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ce5e:	2300      	movs	r3, #0
 801ce60:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801ce62:	687b      	ldr	r3, [r7, #4]
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d102      	bne.n	801ce6e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801ce68:	2301      	movs	r3, #1
 801ce6a:	73fb      	strb	r3, [r7, #15]
 801ce6c:	e014      	b.n	801ce98 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ce6e:	4b0d      	ldr	r3, [pc, #52]	; (801cea4 <UTIL_TIMER_SetPeriod+0x50>)
 801ce70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce72:	6838      	ldr	r0, [r7, #0]
 801ce74:	4798      	blx	r3
 801ce76:	4602      	mov	r2, r0
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801ce7c:	6878      	ldr	r0, [r7, #4]
 801ce7e:	f000 f8c1 	bl	801d004 <TimerExists>
 801ce82:	4603      	mov	r3, r0
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d007      	beq.n	801ce98 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801ce88:	6878      	ldr	r0, [r7, #4]
 801ce8a:	f7ff ff73 	bl	801cd74 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ce8e:	6878      	ldr	r0, [r7, #4]
 801ce90:	f7ff ff02 	bl	801cc98 <UTIL_TIMER_Start>
 801ce94:	4603      	mov	r3, r0
 801ce96:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ce98:	7bfb      	ldrb	r3, [r7, #15]
}
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	3710      	adds	r7, #16
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	bd80      	pop	{r7, pc}
 801cea2:	bf00      	nop
 801cea4:	0801ea9c 	.word	0x0801ea9c

0801cea8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801cea8:	b590      	push	{r4, r7, lr}
 801ceaa:	b089      	sub	sp, #36	; 0x24
 801ceac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ceae:	f3ef 8310 	mrs	r3, PRIMASK
 801ceb2:	60bb      	str	r3, [r7, #8]
  return(result);
 801ceb4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ceb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceb8:	b672      	cpsid	i
}
 801ceba:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801cebc:	4b38      	ldr	r3, [pc, #224]	; (801cfa0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cebe:	695b      	ldr	r3, [r3, #20]
 801cec0:	4798      	blx	r3
 801cec2:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801cec4:	4b36      	ldr	r3, [pc, #216]	; (801cfa0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cec6:	691b      	ldr	r3, [r3, #16]
 801cec8:	4798      	blx	r3
 801ceca:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801cecc:	693a      	ldr	r2, [r7, #16]
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	1ad3      	subs	r3, r2, r3
 801ced2:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ced4:	4b33      	ldr	r3, [pc, #204]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d037      	beq.n	801cf4c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801cedc:	4b31      	ldr	r3, [pc, #196]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cede:	681b      	ldr	r3, [r3, #0]
 801cee0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801cee2:	69fb      	ldr	r3, [r7, #28]
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	68fa      	ldr	r2, [r7, #12]
 801cee8:	429a      	cmp	r2, r3
 801ceea:	d206      	bcs.n	801cefa <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ceec:	69fb      	ldr	r3, [r7, #28]
 801ceee:	681a      	ldr	r2, [r3, #0]
 801cef0:	68fb      	ldr	r3, [r7, #12]
 801cef2:	1ad2      	subs	r2, r2, r3
 801cef4:	69fb      	ldr	r3, [r7, #28]
 801cef6:	601a      	str	r2, [r3, #0]
 801cef8:	e002      	b.n	801cf00 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801cefa:	69fb      	ldr	r3, [r7, #28]
 801cefc:	2200      	movs	r2, #0
 801cefe:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801cf00:	69fb      	ldr	r3, [r7, #28]
 801cf02:	695b      	ldr	r3, [r3, #20]
 801cf04:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801cf06:	69fb      	ldr	r3, [r7, #28]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d1ea      	bne.n	801cee2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf0c:	e01e      	b.n	801cf4c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801cf0e:	4b25      	ldr	r3, [pc, #148]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801cf14:	4b23      	ldr	r3, [pc, #140]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	695b      	ldr	r3, [r3, #20]
 801cf1a:	4a22      	ldr	r2, [pc, #136]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf1c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801cf1e:	69fb      	ldr	r3, [r7, #28]
 801cf20:	2200      	movs	r2, #0
 801cf22:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801cf24:	69fb      	ldr	r3, [r7, #28]
 801cf26:	2200      	movs	r2, #0
 801cf28:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801cf2a:	69fb      	ldr	r3, [r7, #28]
 801cf2c:	68db      	ldr	r3, [r3, #12]
 801cf2e:	69fa      	ldr	r2, [r7, #28]
 801cf30:	6912      	ldr	r2, [r2, #16]
 801cf32:	4610      	mov	r0, r2
 801cf34:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801cf36:	69fb      	ldr	r3, [r7, #28]
 801cf38:	7adb      	ldrb	r3, [r3, #11]
 801cf3a:	2b01      	cmp	r3, #1
 801cf3c:	d106      	bne.n	801cf4c <UTIL_TIMER_IRQ_Handler+0xa4>
 801cf3e:	69fb      	ldr	r3, [r7, #28]
 801cf40:	7a9b      	ldrb	r3, [r3, #10]
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	d102      	bne.n	801cf4c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801cf46:	69f8      	ldr	r0, [r7, #28]
 801cf48:	f7ff fea6 	bl	801cc98 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801cf4c:	4b15      	ldr	r3, [pc, #84]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d00d      	beq.n	801cf70 <UTIL_TIMER_IRQ_Handler+0xc8>
 801cf54:	4b13      	ldr	r3, [pc, #76]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d0d7      	beq.n	801cf0e <UTIL_TIMER_IRQ_Handler+0x66>
 801cf5e:	4b11      	ldr	r3, [pc, #68]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	681c      	ldr	r4, [r3, #0]
 801cf64:	4b0e      	ldr	r3, [pc, #56]	; (801cfa0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801cf66:	699b      	ldr	r3, [r3, #24]
 801cf68:	4798      	blx	r3
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	429c      	cmp	r4, r3
 801cf6e:	d3ce      	bcc.n	801cf0e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801cf70:	4b0c      	ldr	r3, [pc, #48]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d009      	beq.n	801cf8c <UTIL_TIMER_IRQ_Handler+0xe4>
 801cf78:	4b0a      	ldr	r3, [pc, #40]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	7a1b      	ldrb	r3, [r3, #8]
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d104      	bne.n	801cf8c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801cf82:	4b08      	ldr	r3, [pc, #32]	; (801cfa4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	4618      	mov	r0, r3
 801cf88:	f000 f858 	bl	801d03c <TimerSetTimeout>
 801cf8c:	69bb      	ldr	r3, [r7, #24]
 801cf8e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	f383 8810 	msr	PRIMASK, r3
}
 801cf96:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801cf98:	bf00      	nop
 801cf9a:	3724      	adds	r7, #36	; 0x24
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	bd90      	pop	{r4, r7, pc}
 801cfa0:	0801ea9c 	.word	0x0801ea9c
 801cfa4:	20001c74 	.word	0x20001c74

0801cfa8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801cfa8:	b580      	push	{r7, lr}
 801cfaa:	b082      	sub	sp, #8
 801cfac:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801cfae:	4b06      	ldr	r3, [pc, #24]	; (801cfc8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cfb0:	69db      	ldr	r3, [r3, #28]
 801cfb2:	4798      	blx	r3
 801cfb4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801cfb6:	4b04      	ldr	r3, [pc, #16]	; (801cfc8 <UTIL_TIMER_GetCurrentTime+0x20>)
 801cfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfba:	6878      	ldr	r0, [r7, #4]
 801cfbc:	4798      	blx	r3
 801cfbe:	4603      	mov	r3, r0
}
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	3708      	adds	r7, #8
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	bd80      	pop	{r7, pc}
 801cfc8:	0801ea9c 	.word	0x0801ea9c

0801cfcc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b084      	sub	sp, #16
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801cfd4:	4b0a      	ldr	r3, [pc, #40]	; (801d000 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cfd6:	69db      	ldr	r3, [r3, #28]
 801cfd8:	4798      	blx	r3
 801cfda:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801cfdc:	4b08      	ldr	r3, [pc, #32]	; (801d000 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	4798      	blx	r3
 801cfe4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801cfe6:	4b06      	ldr	r3, [pc, #24]	; (801d000 <UTIL_TIMER_GetElapsedTime+0x34>)
 801cfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfea:	68f9      	ldr	r1, [r7, #12]
 801cfec:	68ba      	ldr	r2, [r7, #8]
 801cfee:	1a8a      	subs	r2, r1, r2
 801cff0:	4610      	mov	r0, r2
 801cff2:	4798      	blx	r3
 801cff4:	4603      	mov	r3, r0
}
 801cff6:	4618      	mov	r0, r3
 801cff8:	3710      	adds	r7, #16
 801cffa:	46bd      	mov	sp, r7
 801cffc:	bd80      	pop	{r7, pc}
 801cffe:	bf00      	nop
 801d000:	0801ea9c 	.word	0x0801ea9c

0801d004 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801d004:	b480      	push	{r7}
 801d006:	b085      	sub	sp, #20
 801d008:	af00      	add	r7, sp, #0
 801d00a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d00c:	4b0a      	ldr	r3, [pc, #40]	; (801d038 <TimerExists+0x34>)
 801d00e:	681b      	ldr	r3, [r3, #0]
 801d010:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801d012:	e008      	b.n	801d026 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801d014:	68fa      	ldr	r2, [r7, #12]
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	429a      	cmp	r2, r3
 801d01a:	d101      	bne.n	801d020 <TimerExists+0x1c>
    {
      return true;
 801d01c:	2301      	movs	r3, #1
 801d01e:	e006      	b.n	801d02e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	695b      	ldr	r3, [r3, #20]
 801d024:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801d026:	68fb      	ldr	r3, [r7, #12]
 801d028:	2b00      	cmp	r3, #0
 801d02a:	d1f3      	bne.n	801d014 <TimerExists+0x10>
  }
  return false;
 801d02c:	2300      	movs	r3, #0
}
 801d02e:	4618      	mov	r0, r3
 801d030:	3714      	adds	r7, #20
 801d032:	46bd      	mov	sp, r7
 801d034:	bc80      	pop	{r7}
 801d036:	4770      	bx	lr
 801d038:	20001c74 	.word	0x20001c74

0801d03c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801d03c:	b590      	push	{r4, r7, lr}
 801d03e:	b085      	sub	sp, #20
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801d044:	4b11      	ldr	r3, [pc, #68]	; (801d08c <TimerSetTimeout+0x50>)
 801d046:	6a1b      	ldr	r3, [r3, #32]
 801d048:	4798      	blx	r3
 801d04a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	2201      	movs	r2, #1
 801d050:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	681c      	ldr	r4, [r3, #0]
 801d056:	4b0d      	ldr	r3, [pc, #52]	; (801d08c <TimerSetTimeout+0x50>)
 801d058:	699b      	ldr	r3, [r3, #24]
 801d05a:	4798      	blx	r3
 801d05c:	4602      	mov	r2, r0
 801d05e:	68fb      	ldr	r3, [r7, #12]
 801d060:	4413      	add	r3, r2
 801d062:	429c      	cmp	r4, r3
 801d064:	d207      	bcs.n	801d076 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801d066:	4b09      	ldr	r3, [pc, #36]	; (801d08c <TimerSetTimeout+0x50>)
 801d068:	699b      	ldr	r3, [r3, #24]
 801d06a:	4798      	blx	r3
 801d06c:	4602      	mov	r2, r0
 801d06e:	68fb      	ldr	r3, [r7, #12]
 801d070:	441a      	add	r2, r3
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801d076:	4b05      	ldr	r3, [pc, #20]	; (801d08c <TimerSetTimeout+0x50>)
 801d078:	689b      	ldr	r3, [r3, #8]
 801d07a:	687a      	ldr	r2, [r7, #4]
 801d07c:	6812      	ldr	r2, [r2, #0]
 801d07e:	4610      	mov	r0, r2
 801d080:	4798      	blx	r3
}
 801d082:	bf00      	nop
 801d084:	3714      	adds	r7, #20
 801d086:	46bd      	mov	sp, r7
 801d088:	bd90      	pop	{r4, r7, pc}
 801d08a:	bf00      	nop
 801d08c:	0801ea9c 	.word	0x0801ea9c

0801d090 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801d090:	b480      	push	{r7}
 801d092:	b085      	sub	sp, #20
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d098:	4b14      	ldr	r3, [pc, #80]	; (801d0ec <TimerInsertTimer+0x5c>)
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801d09e:	4b13      	ldr	r3, [pc, #76]	; (801d0ec <TimerInsertTimer+0x5c>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	695b      	ldr	r3, [r3, #20]
 801d0a4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801d0a6:	e012      	b.n	801d0ce <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	681a      	ldr	r2, [r3, #0]
 801d0ac:	68bb      	ldr	r3, [r7, #8]
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	429a      	cmp	r2, r3
 801d0b2:	d905      	bls.n	801d0c0 <TimerInsertTimer+0x30>
    {
        cur = next;
 801d0b4:	68bb      	ldr	r3, [r7, #8]
 801d0b6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801d0b8:	68bb      	ldr	r3, [r7, #8]
 801d0ba:	695b      	ldr	r3, [r3, #20]
 801d0bc:	60bb      	str	r3, [r7, #8]
 801d0be:	e006      	b.n	801d0ce <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801d0c0:	68fb      	ldr	r3, [r7, #12]
 801d0c2:	687a      	ldr	r2, [r7, #4]
 801d0c4:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	68ba      	ldr	r2, [r7, #8]
 801d0ca:	615a      	str	r2, [r3, #20]
        return;
 801d0cc:	e009      	b.n	801d0e2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801d0ce:	68fb      	ldr	r3, [r7, #12]
 801d0d0:	695b      	ldr	r3, [r3, #20]
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d1e8      	bne.n	801d0a8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801d0d6:	68fb      	ldr	r3, [r7, #12]
 801d0d8:	687a      	ldr	r2, [r7, #4]
 801d0da:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	2200      	movs	r2, #0
 801d0e0:	615a      	str	r2, [r3, #20]
}
 801d0e2:	3714      	adds	r7, #20
 801d0e4:	46bd      	mov	sp, r7
 801d0e6:	bc80      	pop	{r7}
 801d0e8:	4770      	bx	lr
 801d0ea:	bf00      	nop
 801d0ec:	20001c74 	.word	0x20001c74

0801d0f0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801d0f0:	b580      	push	{r7, lr}
 801d0f2:	b084      	sub	sp, #16
 801d0f4:	af00      	add	r7, sp, #0
 801d0f6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801d0f8:	4b0b      	ldr	r3, [pc, #44]	; (801d128 <TimerInsertNewHeadTimer+0x38>)
 801d0fa:	681b      	ldr	r3, [r3, #0]
 801d0fc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801d0fe:	68fb      	ldr	r3, [r7, #12]
 801d100:	2b00      	cmp	r3, #0
 801d102:	d002      	beq.n	801d10a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	2200      	movs	r2, #0
 801d108:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	68fa      	ldr	r2, [r7, #12]
 801d10e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801d110:	4a05      	ldr	r2, [pc, #20]	; (801d128 <TimerInsertNewHeadTimer+0x38>)
 801d112:	687b      	ldr	r3, [r7, #4]
 801d114:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801d116:	4b04      	ldr	r3, [pc, #16]	; (801d128 <TimerInsertNewHeadTimer+0x38>)
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	4618      	mov	r0, r3
 801d11c:	f7ff ff8e 	bl	801d03c <TimerSetTimeout>
}
 801d120:	bf00      	nop
 801d122:	3710      	adds	r7, #16
 801d124:	46bd      	mov	sp, r7
 801d126:	bd80      	pop	{r7, pc}
 801d128:	20001c74 	.word	0x20001c74

0801d12c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801d12c:	b580      	push	{r7, lr}
 801d12e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801d130:	2218      	movs	r2, #24
 801d132:	2100      	movs	r1, #0
 801d134:	4807      	ldr	r0, [pc, #28]	; (801d154 <UTIL_ADV_TRACE_Init+0x28>)
 801d136:	f7ff f8fe 	bl	801c336 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801d13a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d13e:	2100      	movs	r1, #0
 801d140:	4805      	ldr	r0, [pc, #20]	; (801d158 <UTIL_ADV_TRACE_Init+0x2c>)
 801d142:	f7ff f8f8 	bl	801c336 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801d146:	4b05      	ldr	r3, [pc, #20]	; (801d15c <UTIL_ADV_TRACE_Init+0x30>)
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	4805      	ldr	r0, [pc, #20]	; (801d160 <UTIL_ADV_TRACE_Init+0x34>)
 801d14c:	4798      	blx	r3
 801d14e:	4603      	mov	r3, r0
}
 801d150:	4618      	mov	r0, r3
 801d152:	bd80      	pop	{r7, pc}
 801d154:	20001c78 	.word	0x20001c78
 801d158:	20001c90 	.word	0x20001c90
 801d15c:	0801eadc 	.word	0x0801eadc
 801d160:	0801d3cd 	.word	0x0801d3cd

0801d164 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801d164:	b480      	push	{r7}
 801d166:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d168:	4b06      	ldr	r3, [pc, #24]	; (801d184 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d16a:	8a5a      	ldrh	r2, [r3, #18]
 801d16c:	4b05      	ldr	r3, [pc, #20]	; (801d184 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801d16e:	8a1b      	ldrh	r3, [r3, #16]
 801d170:	429a      	cmp	r2, r3
 801d172:	d101      	bne.n	801d178 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801d174:	2301      	movs	r3, #1
 801d176:	e000      	b.n	801d17a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801d178:	2300      	movs	r3, #0
}
 801d17a:	4618      	mov	r0, r3
 801d17c:	46bd      	mov	sp, r7
 801d17e:	bc80      	pop	{r7}
 801d180:	4770      	bx	lr
 801d182:	bf00      	nop
 801d184:	20001c78 	.word	0x20001c78

0801d188 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801d188:	b408      	push	{r3}
 801d18a:	b580      	push	{r7, lr}
 801d18c:	b08d      	sub	sp, #52	; 0x34
 801d18e:	af00      	add	r7, sp, #0
 801d190:	60f8      	str	r0, [r7, #12]
 801d192:	60b9      	str	r1, [r7, #8]
 801d194:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801d196:	2300      	movs	r3, #0
 801d198:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801d19a:	2300      	movs	r3, #0
 801d19c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801d19e:	4b37      	ldr	r3, [pc, #220]	; (801d27c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1a0:	7a1b      	ldrb	r3, [r3, #8]
 801d1a2:	461a      	mov	r2, r3
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	4293      	cmp	r3, r2
 801d1a8:	d902      	bls.n	801d1b0 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801d1aa:	f06f 0304 	mvn.w	r3, #4
 801d1ae:	e05e      	b.n	801d26e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801d1b0:	4b32      	ldr	r3, [pc, #200]	; (801d27c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1b2:	68da      	ldr	r2, [r3, #12]
 801d1b4:	68bb      	ldr	r3, [r7, #8]
 801d1b6:	4013      	ands	r3, r2
 801d1b8:	68ba      	ldr	r2, [r7, #8]
 801d1ba:	429a      	cmp	r2, r3
 801d1bc:	d002      	beq.n	801d1c4 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801d1be:	f06f 0305 	mvn.w	r3, #5
 801d1c2:	e054      	b.n	801d26e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801d1c4:	4b2d      	ldr	r3, [pc, #180]	; (801d27c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1c6:	685b      	ldr	r3, [r3, #4]
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d00a      	beq.n	801d1e2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	2b00      	cmp	r3, #0
 801d1d0:	d007      	beq.n	801d1e2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801d1d2:	4b2a      	ldr	r3, [pc, #168]	; (801d27c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801d1d4:	685b      	ldr	r3, [r3, #4]
 801d1d6:	f107 0116 	add.w	r1, r7, #22
 801d1da:	f107 0218 	add.w	r2, r7, #24
 801d1de:	4610      	mov	r0, r2
 801d1e0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801d1e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d1e6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d1ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d1f0:	4823      	ldr	r0, [pc, #140]	; (801d280 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801d1f2:	f7ff fb2d 	bl	801c850 <tiny_vsnprintf_like>
 801d1f6:	4603      	mov	r3, r0
 801d1f8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801d1fa:	f000 f9f1 	bl	801d5e0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801d1fe:	8afa      	ldrh	r2, [r7, #22]
 801d200:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d202:	4413      	add	r3, r2
 801d204:	b29b      	uxth	r3, r3
 801d206:	f107 0214 	add.w	r2, r7, #20
 801d20a:	4611      	mov	r1, r2
 801d20c:	4618      	mov	r0, r3
 801d20e:	f000 f969 	bl	801d4e4 <TRACE_AllocateBufer>
 801d212:	4603      	mov	r3, r0
 801d214:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d218:	d025      	beq.n	801d266 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801d21a:	2300      	movs	r3, #0
 801d21c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d21e:	e00e      	b.n	801d23e <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801d220:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d222:	8aba      	ldrh	r2, [r7, #20]
 801d224:	3330      	adds	r3, #48	; 0x30
 801d226:	443b      	add	r3, r7
 801d228:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801d22c:	4b15      	ldr	r3, [pc, #84]	; (801d284 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d22e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801d230:	8abb      	ldrh	r3, [r7, #20]
 801d232:	3301      	adds	r3, #1
 801d234:	b29b      	uxth	r3, r3
 801d236:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801d238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d23a:	3301      	adds	r3, #1
 801d23c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801d23e:	8afb      	ldrh	r3, [r7, #22]
 801d240:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801d242:	429a      	cmp	r2, r3
 801d244:	d3ec      	bcc.n	801d220 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801d246:	8abb      	ldrh	r3, [r7, #20]
 801d248:	461a      	mov	r2, r3
 801d24a:	4b0e      	ldr	r3, [pc, #56]	; (801d284 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801d24c:	18d0      	adds	r0, r2, r3
 801d24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d250:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d252:	f44f 7100 	mov.w	r1, #512	; 0x200
 801d256:	f7ff fafb 	bl	801c850 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801d25a:	f000 f9df 	bl	801d61c <TRACE_UnLock>

    return TRACE_Send();
 801d25e:	f000 f831 	bl	801d2c4 <TRACE_Send>
 801d262:	4603      	mov	r3, r0
 801d264:	e003      	b.n	801d26e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801d266:	f000 f9d9 	bl	801d61c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801d26a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801d26e:	4618      	mov	r0, r3
 801d270:	3734      	adds	r7, #52	; 0x34
 801d272:	46bd      	mov	sp, r7
 801d274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d278:	b001      	add	sp, #4
 801d27a:	4770      	bx	lr
 801d27c:	20001c78 	.word	0x20001c78
 801d280:	20002090 	.word	0x20002090
 801d284:	20001c90 	.word	0x20001c90

0801d288 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801d288:	b480      	push	{r7}
 801d28a:	b083      	sub	sp, #12
 801d28c:	af00      	add	r7, sp, #0
 801d28e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801d290:	4a03      	ldr	r2, [pc, #12]	; (801d2a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	6053      	str	r3, [r2, #4]
}
 801d296:	bf00      	nop
 801d298:	370c      	adds	r7, #12
 801d29a:	46bd      	mov	sp, r7
 801d29c:	bc80      	pop	{r7}
 801d29e:	4770      	bx	lr
 801d2a0:	20001c78 	.word	0x20001c78

0801d2a4 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801d2a4:	b480      	push	{r7}
 801d2a6:	b083      	sub	sp, #12
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801d2ae:	4a04      	ldr	r2, [pc, #16]	; (801d2c0 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801d2b0:	79fb      	ldrb	r3, [r7, #7]
 801d2b2:	7213      	strb	r3, [r2, #8]
}
 801d2b4:	bf00      	nop
 801d2b6:	370c      	adds	r7, #12
 801d2b8:	46bd      	mov	sp, r7
 801d2ba:	bc80      	pop	{r7}
 801d2bc:	4770      	bx	lr
 801d2be:	bf00      	nop
 801d2c0:	20001c78 	.word	0x20001c78

0801d2c4 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	b088      	sub	sp, #32
 801d2c8:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801d2ca:	2300      	movs	r3, #0
 801d2cc:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d2d2:	f3ef 8310 	mrs	r3, PRIMASK
 801d2d6:	613b      	str	r3, [r7, #16]
  return(result);
 801d2d8:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d2da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d2dc:	b672      	cpsid	i
}
 801d2de:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801d2e0:	f000 f9ba 	bl	801d658 <TRACE_IsLocked>
 801d2e4:	4603      	mov	r3, r0
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	d15d      	bne.n	801d3a6 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801d2ea:	f000 f979 	bl	801d5e0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801d2ee:	4b34      	ldr	r3, [pc, #208]	; (801d3c0 <TRACE_Send+0xfc>)
 801d2f0:	8a1a      	ldrh	r2, [r3, #16]
 801d2f2:	4b33      	ldr	r3, [pc, #204]	; (801d3c0 <TRACE_Send+0xfc>)
 801d2f4:	8a5b      	ldrh	r3, [r3, #18]
 801d2f6:	429a      	cmp	r2, r3
 801d2f8:	d04d      	beq.n	801d396 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d2fa:	4b31      	ldr	r3, [pc, #196]	; (801d3c0 <TRACE_Send+0xfc>)
 801d2fc:	789b      	ldrb	r3, [r3, #2]
 801d2fe:	2b01      	cmp	r3, #1
 801d300:	d117      	bne.n	801d332 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801d302:	4b2f      	ldr	r3, [pc, #188]	; (801d3c0 <TRACE_Send+0xfc>)
 801d304:	881a      	ldrh	r2, [r3, #0]
 801d306:	4b2e      	ldr	r3, [pc, #184]	; (801d3c0 <TRACE_Send+0xfc>)
 801d308:	8a1b      	ldrh	r3, [r3, #16]
 801d30a:	1ad3      	subs	r3, r2, r3
 801d30c:	b29a      	uxth	r2, r3
 801d30e:	4b2c      	ldr	r3, [pc, #176]	; (801d3c0 <TRACE_Send+0xfc>)
 801d310:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d312:	4b2b      	ldr	r3, [pc, #172]	; (801d3c0 <TRACE_Send+0xfc>)
 801d314:	2202      	movs	r2, #2
 801d316:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d318:	4b29      	ldr	r3, [pc, #164]	; (801d3c0 <TRACE_Send+0xfc>)
 801d31a:	2200      	movs	r2, #0
 801d31c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d31e:	4b28      	ldr	r3, [pc, #160]	; (801d3c0 <TRACE_Send+0xfc>)
 801d320:	8a9b      	ldrh	r3, [r3, #20]
 801d322:	2b00      	cmp	r3, #0
 801d324:	d105      	bne.n	801d332 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d326:	4b26      	ldr	r3, [pc, #152]	; (801d3c0 <TRACE_Send+0xfc>)
 801d328:	2200      	movs	r2, #0
 801d32a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d32c:	4b24      	ldr	r3, [pc, #144]	; (801d3c0 <TRACE_Send+0xfc>)
 801d32e:	2200      	movs	r2, #0
 801d330:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d332:	4b23      	ldr	r3, [pc, #140]	; (801d3c0 <TRACE_Send+0xfc>)
 801d334:	789b      	ldrb	r3, [r3, #2]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d115      	bne.n	801d366 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d33a:	4b21      	ldr	r3, [pc, #132]	; (801d3c0 <TRACE_Send+0xfc>)
 801d33c:	8a5a      	ldrh	r2, [r3, #18]
 801d33e:	4b20      	ldr	r3, [pc, #128]	; (801d3c0 <TRACE_Send+0xfc>)
 801d340:	8a1b      	ldrh	r3, [r3, #16]
 801d342:	429a      	cmp	r2, r3
 801d344:	d908      	bls.n	801d358 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d346:	4b1e      	ldr	r3, [pc, #120]	; (801d3c0 <TRACE_Send+0xfc>)
 801d348:	8a5a      	ldrh	r2, [r3, #18]
 801d34a:	4b1d      	ldr	r3, [pc, #116]	; (801d3c0 <TRACE_Send+0xfc>)
 801d34c:	8a1b      	ldrh	r3, [r3, #16]
 801d34e:	1ad3      	subs	r3, r2, r3
 801d350:	b29a      	uxth	r2, r3
 801d352:	4b1b      	ldr	r3, [pc, #108]	; (801d3c0 <TRACE_Send+0xfc>)
 801d354:	829a      	strh	r2, [r3, #20]
 801d356:	e006      	b.n	801d366 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d358:	4b19      	ldr	r3, [pc, #100]	; (801d3c0 <TRACE_Send+0xfc>)
 801d35a:	8a1b      	ldrh	r3, [r3, #16]
 801d35c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d360:	b29a      	uxth	r2, r3
 801d362:	4b17      	ldr	r3, [pc, #92]	; (801d3c0 <TRACE_Send+0xfc>)
 801d364:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d366:	4b16      	ldr	r3, [pc, #88]	; (801d3c0 <TRACE_Send+0xfc>)
 801d368:	8a1b      	ldrh	r3, [r3, #16]
 801d36a:	461a      	mov	r2, r3
 801d36c:	4b15      	ldr	r3, [pc, #84]	; (801d3c4 <TRACE_Send+0x100>)
 801d36e:	4413      	add	r3, r2
 801d370:	61bb      	str	r3, [r7, #24]
 801d372:	697b      	ldr	r3, [r7, #20]
 801d374:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d376:	68fb      	ldr	r3, [r7, #12]
 801d378:	f383 8810 	msr	PRIMASK, r3
}
 801d37c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801d37e:	f7e4 fd09 	bl	8001d94 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d382:	4b11      	ldr	r3, [pc, #68]	; (801d3c8 <TRACE_Send+0x104>)
 801d384:	68db      	ldr	r3, [r3, #12]
 801d386:	4a0e      	ldr	r2, [pc, #56]	; (801d3c0 <TRACE_Send+0xfc>)
 801d388:	8a92      	ldrh	r2, [r2, #20]
 801d38a:	4611      	mov	r1, r2
 801d38c:	69b8      	ldr	r0, [r7, #24]
 801d38e:	4798      	blx	r3
 801d390:	4603      	mov	r3, r0
 801d392:	77fb      	strb	r3, [r7, #31]
 801d394:	e00d      	b.n	801d3b2 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801d396:	f000 f941 	bl	801d61c <TRACE_UnLock>
 801d39a:	697b      	ldr	r3, [r7, #20]
 801d39c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d39e:	68bb      	ldr	r3, [r7, #8]
 801d3a0:	f383 8810 	msr	PRIMASK, r3
}
 801d3a4:	e005      	b.n	801d3b2 <TRACE_Send+0xee>
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	f383 8810 	msr	PRIMASK, r3
}
 801d3b0:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801d3b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d3b6:	4618      	mov	r0, r3
 801d3b8:	3720      	adds	r7, #32
 801d3ba:	46bd      	mov	sp, r7
 801d3bc:	bd80      	pop	{r7, pc}
 801d3be:	bf00      	nop
 801d3c0:	20001c78 	.word	0x20001c78
 801d3c4:	20001c90 	.word	0x20001c90
 801d3c8:	0801eadc 	.word	0x0801eadc

0801d3cc <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801d3cc:	b580      	push	{r7, lr}
 801d3ce:	b088      	sub	sp, #32
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3d8:	f3ef 8310 	mrs	r3, PRIMASK
 801d3dc:	617b      	str	r3, [r7, #20]
  return(result);
 801d3de:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d3e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3e2:	b672      	cpsid	i
}
 801d3e4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801d3e6:	4b3c      	ldr	r3, [pc, #240]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d3e8:	789b      	ldrb	r3, [r3, #2]
 801d3ea:	2b02      	cmp	r3, #2
 801d3ec:	d106      	bne.n	801d3fc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d3ee:	4b3a      	ldr	r3, [pc, #232]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d3f0:	2200      	movs	r2, #0
 801d3f2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d3f4:	4b38      	ldr	r3, [pc, #224]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	821a      	strh	r2, [r3, #16]
 801d3fa:	e00a      	b.n	801d412 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d3fc:	4b36      	ldr	r3, [pc, #216]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d3fe:	8a1a      	ldrh	r2, [r3, #16]
 801d400:	4b35      	ldr	r3, [pc, #212]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d402:	8a9b      	ldrh	r3, [r3, #20]
 801d404:	4413      	add	r3, r2
 801d406:	b29b      	uxth	r3, r3
 801d408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d40c:	b29a      	uxth	r2, r3
 801d40e:	4b32      	ldr	r3, [pc, #200]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d410:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801d412:	4b31      	ldr	r3, [pc, #196]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d414:	8a1a      	ldrh	r2, [r3, #16]
 801d416:	4b30      	ldr	r3, [pc, #192]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d418:	8a5b      	ldrh	r3, [r3, #18]
 801d41a:	429a      	cmp	r2, r3
 801d41c:	d04d      	beq.n	801d4ba <TRACE_TxCpltCallback+0xee>
 801d41e:	4b2e      	ldr	r3, [pc, #184]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d420:	8adb      	ldrh	r3, [r3, #22]
 801d422:	2b01      	cmp	r3, #1
 801d424:	d149      	bne.n	801d4ba <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801d426:	4b2c      	ldr	r3, [pc, #176]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d428:	789b      	ldrb	r3, [r3, #2]
 801d42a:	2b01      	cmp	r3, #1
 801d42c:	d117      	bne.n	801d45e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801d42e:	4b2a      	ldr	r3, [pc, #168]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d430:	881a      	ldrh	r2, [r3, #0]
 801d432:	4b29      	ldr	r3, [pc, #164]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d434:	8a1b      	ldrh	r3, [r3, #16]
 801d436:	1ad3      	subs	r3, r2, r3
 801d438:	b29a      	uxth	r2, r3
 801d43a:	4b27      	ldr	r3, [pc, #156]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d43c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801d43e:	4b26      	ldr	r3, [pc, #152]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d440:	2202      	movs	r2, #2
 801d442:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801d444:	4b24      	ldr	r3, [pc, #144]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d446:	2200      	movs	r2, #0
 801d448:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801d44a:	4b23      	ldr	r3, [pc, #140]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d44c:	8a9b      	ldrh	r3, [r3, #20]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d105      	bne.n	801d45e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801d452:	4b21      	ldr	r3, [pc, #132]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d454:	2200      	movs	r2, #0
 801d456:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801d458:	4b1f      	ldr	r3, [pc, #124]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d45a:	2200      	movs	r2, #0
 801d45c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801d45e:	4b1e      	ldr	r3, [pc, #120]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d460:	789b      	ldrb	r3, [r3, #2]
 801d462:	2b00      	cmp	r3, #0
 801d464:	d115      	bne.n	801d492 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d466:	4b1c      	ldr	r3, [pc, #112]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d468:	8a5a      	ldrh	r2, [r3, #18]
 801d46a:	4b1b      	ldr	r3, [pc, #108]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d46c:	8a1b      	ldrh	r3, [r3, #16]
 801d46e:	429a      	cmp	r2, r3
 801d470:	d908      	bls.n	801d484 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801d472:	4b19      	ldr	r3, [pc, #100]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d474:	8a5a      	ldrh	r2, [r3, #18]
 801d476:	4b18      	ldr	r3, [pc, #96]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d478:	8a1b      	ldrh	r3, [r3, #16]
 801d47a:	1ad3      	subs	r3, r2, r3
 801d47c:	b29a      	uxth	r2, r3
 801d47e:	4b16      	ldr	r3, [pc, #88]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d480:	829a      	strh	r2, [r3, #20]
 801d482:	e006      	b.n	801d492 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801d484:	4b14      	ldr	r3, [pc, #80]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d486:	8a1b      	ldrh	r3, [r3, #16]
 801d488:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d48c:	b29a      	uxth	r2, r3
 801d48e:	4b12      	ldr	r3, [pc, #72]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d490:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801d492:	4b11      	ldr	r3, [pc, #68]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d494:	8a1b      	ldrh	r3, [r3, #16]
 801d496:	461a      	mov	r2, r3
 801d498:	4b10      	ldr	r3, [pc, #64]	; (801d4dc <TRACE_TxCpltCallback+0x110>)
 801d49a:	4413      	add	r3, r2
 801d49c:	61fb      	str	r3, [r7, #28]
 801d49e:	69bb      	ldr	r3, [r7, #24]
 801d4a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4a2:	693b      	ldr	r3, [r7, #16]
 801d4a4:	f383 8810 	msr	PRIMASK, r3
}
 801d4a8:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801d4aa:	4b0d      	ldr	r3, [pc, #52]	; (801d4e0 <TRACE_TxCpltCallback+0x114>)
 801d4ac:	68db      	ldr	r3, [r3, #12]
 801d4ae:	4a0a      	ldr	r2, [pc, #40]	; (801d4d8 <TRACE_TxCpltCallback+0x10c>)
 801d4b0:	8a92      	ldrh	r2, [r2, #20]
 801d4b2:	4611      	mov	r1, r2
 801d4b4:	69f8      	ldr	r0, [r7, #28]
 801d4b6:	4798      	blx	r3
 801d4b8:	e00a      	b.n	801d4d0 <TRACE_TxCpltCallback+0x104>
 801d4ba:	69bb      	ldr	r3, [r7, #24]
 801d4bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	f383 8810 	msr	PRIMASK, r3
}
 801d4c4:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801d4c6:	f7e4 fc6d 	bl	8001da4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801d4ca:	f000 f8a7 	bl	801d61c <TRACE_UnLock>
  }
}
 801d4ce:	bf00      	nop
 801d4d0:	bf00      	nop
 801d4d2:	3720      	adds	r7, #32
 801d4d4:	46bd      	mov	sp, r7
 801d4d6:	bd80      	pop	{r7, pc}
 801d4d8:	20001c78 	.word	0x20001c78
 801d4dc:	20001c90 	.word	0x20001c90
 801d4e0:	0801eadc 	.word	0x0801eadc

0801d4e4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801d4e4:	b480      	push	{r7}
 801d4e6:	b087      	sub	sp, #28
 801d4e8:	af00      	add	r7, sp, #0
 801d4ea:	4603      	mov	r3, r0
 801d4ec:	6039      	str	r1, [r7, #0]
 801d4ee:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801d4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d4f4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d4f6:	f3ef 8310 	mrs	r3, PRIMASK
 801d4fa:	60fb      	str	r3, [r7, #12]
  return(result);
 801d4fc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d4fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801d500:	b672      	cpsid	i
}
 801d502:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801d504:	4b35      	ldr	r3, [pc, #212]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d506:	8a5a      	ldrh	r2, [r3, #18]
 801d508:	4b34      	ldr	r3, [pc, #208]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d50a:	8a1b      	ldrh	r3, [r3, #16]
 801d50c:	429a      	cmp	r2, r3
 801d50e:	d11b      	bne.n	801d548 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d510:	4b32      	ldr	r3, [pc, #200]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d512:	8a5b      	ldrh	r3, [r3, #18]
 801d514:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d518:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801d51a:	88fa      	ldrh	r2, [r7, #6]
 801d51c:	8afb      	ldrh	r3, [r7, #22]
 801d51e:	429a      	cmp	r2, r3
 801d520:	d33a      	bcc.n	801d598 <TRACE_AllocateBufer+0xb4>
 801d522:	4b2e      	ldr	r3, [pc, #184]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d524:	8a1b      	ldrh	r3, [r3, #16]
 801d526:	88fa      	ldrh	r2, [r7, #6]
 801d528:	429a      	cmp	r2, r3
 801d52a:	d235      	bcs.n	801d598 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d52c:	4b2b      	ldr	r3, [pc, #172]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d52e:	2201      	movs	r2, #1
 801d530:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d532:	4b2a      	ldr	r3, [pc, #168]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d534:	8a5a      	ldrh	r2, [r3, #18]
 801d536:	4b29      	ldr	r3, [pc, #164]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d538:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d53a:	4b28      	ldr	r3, [pc, #160]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d53c:	8a1b      	ldrh	r3, [r3, #16]
 801d53e:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d540:	4b26      	ldr	r3, [pc, #152]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d542:	2200      	movs	r2, #0
 801d544:	825a      	strh	r2, [r3, #18]
 801d546:	e027      	b.n	801d598 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801d548:	4b24      	ldr	r3, [pc, #144]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d54a:	8a5a      	ldrh	r2, [r3, #18]
 801d54c:	4b23      	ldr	r3, [pc, #140]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d54e:	8a1b      	ldrh	r3, [r3, #16]
 801d550:	429a      	cmp	r2, r3
 801d552:	d91b      	bls.n	801d58c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801d554:	4b21      	ldr	r3, [pc, #132]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d556:	8a5b      	ldrh	r3, [r3, #18]
 801d558:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801d55c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801d55e:	88fa      	ldrh	r2, [r7, #6]
 801d560:	8afb      	ldrh	r3, [r7, #22]
 801d562:	429a      	cmp	r2, r3
 801d564:	d318      	bcc.n	801d598 <TRACE_AllocateBufer+0xb4>
 801d566:	4b1d      	ldr	r3, [pc, #116]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d568:	8a1b      	ldrh	r3, [r3, #16]
 801d56a:	88fa      	ldrh	r2, [r7, #6]
 801d56c:	429a      	cmp	r2, r3
 801d56e:	d213      	bcs.n	801d598 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801d570:	4b1a      	ldr	r3, [pc, #104]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d572:	2201      	movs	r2, #1
 801d574:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801d576:	4b19      	ldr	r3, [pc, #100]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d578:	8a5a      	ldrh	r2, [r3, #18]
 801d57a:	4b18      	ldr	r3, [pc, #96]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d57c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801d57e:	4b17      	ldr	r3, [pc, #92]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d580:	8a1b      	ldrh	r3, [r3, #16]
 801d582:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801d584:	4b15      	ldr	r3, [pc, #84]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d586:	2200      	movs	r2, #0
 801d588:	825a      	strh	r2, [r3, #18]
 801d58a:	e005      	b.n	801d598 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801d58c:	4b13      	ldr	r3, [pc, #76]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d58e:	8a1a      	ldrh	r2, [r3, #16]
 801d590:	4b12      	ldr	r3, [pc, #72]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d592:	8a5b      	ldrh	r3, [r3, #18]
 801d594:	1ad3      	subs	r3, r2, r3
 801d596:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801d598:	8afa      	ldrh	r2, [r7, #22]
 801d59a:	88fb      	ldrh	r3, [r7, #6]
 801d59c:	429a      	cmp	r2, r3
 801d59e:	d90f      	bls.n	801d5c0 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801d5a0:	4b0e      	ldr	r3, [pc, #56]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d5a2:	8a5a      	ldrh	r2, [r3, #18]
 801d5a4:	683b      	ldr	r3, [r7, #0]
 801d5a6:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801d5a8:	4b0c      	ldr	r3, [pc, #48]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d5aa:	8a5a      	ldrh	r2, [r3, #18]
 801d5ac:	88fb      	ldrh	r3, [r7, #6]
 801d5ae:	4413      	add	r3, r2
 801d5b0:	b29b      	uxth	r3, r3
 801d5b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801d5b6:	b29a      	uxth	r2, r3
 801d5b8:	4b08      	ldr	r3, [pc, #32]	; (801d5dc <TRACE_AllocateBufer+0xf8>)
 801d5ba:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801d5bc:	2300      	movs	r3, #0
 801d5be:	82bb      	strh	r3, [r7, #20]
 801d5c0:	693b      	ldr	r3, [r7, #16]
 801d5c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d5c4:	68bb      	ldr	r3, [r7, #8]
 801d5c6:	f383 8810 	msr	PRIMASK, r3
}
 801d5ca:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801d5cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	371c      	adds	r7, #28
 801d5d4:	46bd      	mov	sp, r7
 801d5d6:	bc80      	pop	{r7}
 801d5d8:	4770      	bx	lr
 801d5da:	bf00      	nop
 801d5dc:	20001c78 	.word	0x20001c78

0801d5e0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801d5e0:	b480      	push	{r7}
 801d5e2:	b085      	sub	sp, #20
 801d5e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d5e6:	f3ef 8310 	mrs	r3, PRIMASK
 801d5ea:	607b      	str	r3, [r7, #4]
  return(result);
 801d5ec:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d5ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d5f0:	b672      	cpsid	i
}
 801d5f2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801d5f4:	4b08      	ldr	r3, [pc, #32]	; (801d618 <TRACE_Lock+0x38>)
 801d5f6:	8adb      	ldrh	r3, [r3, #22]
 801d5f8:	3301      	adds	r3, #1
 801d5fa:	b29a      	uxth	r2, r3
 801d5fc:	4b06      	ldr	r3, [pc, #24]	; (801d618 <TRACE_Lock+0x38>)
 801d5fe:	82da      	strh	r2, [r3, #22]
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d604:	68bb      	ldr	r3, [r7, #8]
 801d606:	f383 8810 	msr	PRIMASK, r3
}
 801d60a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d60c:	bf00      	nop
 801d60e:	3714      	adds	r7, #20
 801d610:	46bd      	mov	sp, r7
 801d612:	bc80      	pop	{r7}
 801d614:	4770      	bx	lr
 801d616:	bf00      	nop
 801d618:	20001c78 	.word	0x20001c78

0801d61c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801d61c:	b480      	push	{r7}
 801d61e:	b085      	sub	sp, #20
 801d620:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d622:	f3ef 8310 	mrs	r3, PRIMASK
 801d626:	607b      	str	r3, [r7, #4]
  return(result);
 801d628:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801d62a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d62c:	b672      	cpsid	i
}
 801d62e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801d630:	4b08      	ldr	r3, [pc, #32]	; (801d654 <TRACE_UnLock+0x38>)
 801d632:	8adb      	ldrh	r3, [r3, #22]
 801d634:	3b01      	subs	r3, #1
 801d636:	b29a      	uxth	r2, r3
 801d638:	4b06      	ldr	r3, [pc, #24]	; (801d654 <TRACE_UnLock+0x38>)
 801d63a:	82da      	strh	r2, [r3, #22]
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d640:	68bb      	ldr	r3, [r7, #8]
 801d642:	f383 8810 	msr	PRIMASK, r3
}
 801d646:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801d648:	bf00      	nop
 801d64a:	3714      	adds	r7, #20
 801d64c:	46bd      	mov	sp, r7
 801d64e:	bc80      	pop	{r7}
 801d650:	4770      	bx	lr
 801d652:	bf00      	nop
 801d654:	20001c78 	.word	0x20001c78

0801d658 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801d658:	b480      	push	{r7}
 801d65a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801d65c:	4b05      	ldr	r3, [pc, #20]	; (801d674 <TRACE_IsLocked+0x1c>)
 801d65e:	8adb      	ldrh	r3, [r3, #22]
 801d660:	2b00      	cmp	r3, #0
 801d662:	bf14      	ite	ne
 801d664:	2301      	movne	r3, #1
 801d666:	2300      	moveq	r3, #0
 801d668:	b2db      	uxtb	r3, r3
}
 801d66a:	4618      	mov	r0, r3
 801d66c:	46bd      	mov	sp, r7
 801d66e:	bc80      	pop	{r7}
 801d670:	4770      	bx	lr
 801d672:	bf00      	nop
 801d674:	20001c78 	.word	0x20001c78

0801d678 <__errno>:
 801d678:	4b01      	ldr	r3, [pc, #4]	; (801d680 <__errno+0x8>)
 801d67a:	6818      	ldr	r0, [r3, #0]
 801d67c:	4770      	bx	lr
 801d67e:	bf00      	nop
 801d680:	20000150 	.word	0x20000150

0801d684 <__libc_init_array>:
 801d684:	b570      	push	{r4, r5, r6, lr}
 801d686:	4d0d      	ldr	r5, [pc, #52]	; (801d6bc <__libc_init_array+0x38>)
 801d688:	4c0d      	ldr	r4, [pc, #52]	; (801d6c0 <__libc_init_array+0x3c>)
 801d68a:	1b64      	subs	r4, r4, r5
 801d68c:	10a4      	asrs	r4, r4, #2
 801d68e:	2600      	movs	r6, #0
 801d690:	42a6      	cmp	r6, r4
 801d692:	d109      	bne.n	801d6a8 <__libc_init_array+0x24>
 801d694:	4d0b      	ldr	r5, [pc, #44]	; (801d6c4 <__libc_init_array+0x40>)
 801d696:	4c0c      	ldr	r4, [pc, #48]	; (801d6c8 <__libc_init_array+0x44>)
 801d698:	f000 fd0e 	bl	801e0b8 <_init>
 801d69c:	1b64      	subs	r4, r4, r5
 801d69e:	10a4      	asrs	r4, r4, #2
 801d6a0:	2600      	movs	r6, #0
 801d6a2:	42a6      	cmp	r6, r4
 801d6a4:	d105      	bne.n	801d6b2 <__libc_init_array+0x2e>
 801d6a6:	bd70      	pop	{r4, r5, r6, pc}
 801d6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6ac:	4798      	blx	r3
 801d6ae:	3601      	adds	r6, #1
 801d6b0:	e7ee      	b.n	801d690 <__libc_init_array+0xc>
 801d6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6b6:	4798      	blx	r3
 801d6b8:	3601      	adds	r6, #1
 801d6ba:	e7f2      	b.n	801d6a2 <__libc_init_array+0x1e>
 801d6bc:	0801f13c 	.word	0x0801f13c
 801d6c0:	0801f13c 	.word	0x0801f13c
 801d6c4:	0801f13c 	.word	0x0801f13c
 801d6c8:	0801f140 	.word	0x0801f140

0801d6cc <memset>:
 801d6cc:	4402      	add	r2, r0
 801d6ce:	4603      	mov	r3, r0
 801d6d0:	4293      	cmp	r3, r2
 801d6d2:	d100      	bne.n	801d6d6 <memset+0xa>
 801d6d4:	4770      	bx	lr
 801d6d6:	f803 1b01 	strb.w	r1, [r3], #1
 801d6da:	e7f9      	b.n	801d6d0 <memset+0x4>

0801d6dc <siprintf>:
 801d6dc:	b40e      	push	{r1, r2, r3}
 801d6de:	b500      	push	{lr}
 801d6e0:	b09c      	sub	sp, #112	; 0x70
 801d6e2:	ab1d      	add	r3, sp, #116	; 0x74
 801d6e4:	9002      	str	r0, [sp, #8]
 801d6e6:	9006      	str	r0, [sp, #24]
 801d6e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d6ec:	4809      	ldr	r0, [pc, #36]	; (801d714 <siprintf+0x38>)
 801d6ee:	9107      	str	r1, [sp, #28]
 801d6f0:	9104      	str	r1, [sp, #16]
 801d6f2:	4909      	ldr	r1, [pc, #36]	; (801d718 <siprintf+0x3c>)
 801d6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6f8:	9105      	str	r1, [sp, #20]
 801d6fa:	6800      	ldr	r0, [r0, #0]
 801d6fc:	9301      	str	r3, [sp, #4]
 801d6fe:	a902      	add	r1, sp, #8
 801d700:	f000 f868 	bl	801d7d4 <_svfiprintf_r>
 801d704:	9b02      	ldr	r3, [sp, #8]
 801d706:	2200      	movs	r2, #0
 801d708:	701a      	strb	r2, [r3, #0]
 801d70a:	b01c      	add	sp, #112	; 0x70
 801d70c:	f85d eb04 	ldr.w	lr, [sp], #4
 801d710:	b003      	add	sp, #12
 801d712:	4770      	bx	lr
 801d714:	20000150 	.word	0x20000150
 801d718:	ffff0208 	.word	0xffff0208

0801d71c <__ssputs_r>:
 801d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d720:	688e      	ldr	r6, [r1, #8]
 801d722:	429e      	cmp	r6, r3
 801d724:	4682      	mov	sl, r0
 801d726:	460c      	mov	r4, r1
 801d728:	4690      	mov	r8, r2
 801d72a:	461f      	mov	r7, r3
 801d72c:	d838      	bhi.n	801d7a0 <__ssputs_r+0x84>
 801d72e:	898a      	ldrh	r2, [r1, #12]
 801d730:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d734:	d032      	beq.n	801d79c <__ssputs_r+0x80>
 801d736:	6825      	ldr	r5, [r4, #0]
 801d738:	6909      	ldr	r1, [r1, #16]
 801d73a:	eba5 0901 	sub.w	r9, r5, r1
 801d73e:	6965      	ldr	r5, [r4, #20]
 801d740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d744:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d748:	3301      	adds	r3, #1
 801d74a:	444b      	add	r3, r9
 801d74c:	106d      	asrs	r5, r5, #1
 801d74e:	429d      	cmp	r5, r3
 801d750:	bf38      	it	cc
 801d752:	461d      	movcc	r5, r3
 801d754:	0553      	lsls	r3, r2, #21
 801d756:	d531      	bpl.n	801d7bc <__ssputs_r+0xa0>
 801d758:	4629      	mov	r1, r5
 801d75a:	f000 fb61 	bl	801de20 <_malloc_r>
 801d75e:	4606      	mov	r6, r0
 801d760:	b950      	cbnz	r0, 801d778 <__ssputs_r+0x5c>
 801d762:	230c      	movs	r3, #12
 801d764:	f8ca 3000 	str.w	r3, [sl]
 801d768:	89a3      	ldrh	r3, [r4, #12]
 801d76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d76e:	81a3      	strh	r3, [r4, #12]
 801d770:	f04f 30ff 	mov.w	r0, #4294967295
 801d774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d778:	6921      	ldr	r1, [r4, #16]
 801d77a:	464a      	mov	r2, r9
 801d77c:	f000 fabe 	bl	801dcfc <memcpy>
 801d780:	89a3      	ldrh	r3, [r4, #12]
 801d782:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d78a:	81a3      	strh	r3, [r4, #12]
 801d78c:	6126      	str	r6, [r4, #16]
 801d78e:	6165      	str	r5, [r4, #20]
 801d790:	444e      	add	r6, r9
 801d792:	eba5 0509 	sub.w	r5, r5, r9
 801d796:	6026      	str	r6, [r4, #0]
 801d798:	60a5      	str	r5, [r4, #8]
 801d79a:	463e      	mov	r6, r7
 801d79c:	42be      	cmp	r6, r7
 801d79e:	d900      	bls.n	801d7a2 <__ssputs_r+0x86>
 801d7a0:	463e      	mov	r6, r7
 801d7a2:	6820      	ldr	r0, [r4, #0]
 801d7a4:	4632      	mov	r2, r6
 801d7a6:	4641      	mov	r1, r8
 801d7a8:	f000 fab6 	bl	801dd18 <memmove>
 801d7ac:	68a3      	ldr	r3, [r4, #8]
 801d7ae:	1b9b      	subs	r3, r3, r6
 801d7b0:	60a3      	str	r3, [r4, #8]
 801d7b2:	6823      	ldr	r3, [r4, #0]
 801d7b4:	4433      	add	r3, r6
 801d7b6:	6023      	str	r3, [r4, #0]
 801d7b8:	2000      	movs	r0, #0
 801d7ba:	e7db      	b.n	801d774 <__ssputs_r+0x58>
 801d7bc:	462a      	mov	r2, r5
 801d7be:	f000 fba3 	bl	801df08 <_realloc_r>
 801d7c2:	4606      	mov	r6, r0
 801d7c4:	2800      	cmp	r0, #0
 801d7c6:	d1e1      	bne.n	801d78c <__ssputs_r+0x70>
 801d7c8:	6921      	ldr	r1, [r4, #16]
 801d7ca:	4650      	mov	r0, sl
 801d7cc:	f000 fabe 	bl	801dd4c <_free_r>
 801d7d0:	e7c7      	b.n	801d762 <__ssputs_r+0x46>
	...

0801d7d4 <_svfiprintf_r>:
 801d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d8:	4698      	mov	r8, r3
 801d7da:	898b      	ldrh	r3, [r1, #12]
 801d7dc:	061b      	lsls	r3, r3, #24
 801d7de:	b09d      	sub	sp, #116	; 0x74
 801d7e0:	4607      	mov	r7, r0
 801d7e2:	460d      	mov	r5, r1
 801d7e4:	4614      	mov	r4, r2
 801d7e6:	d50e      	bpl.n	801d806 <_svfiprintf_r+0x32>
 801d7e8:	690b      	ldr	r3, [r1, #16]
 801d7ea:	b963      	cbnz	r3, 801d806 <_svfiprintf_r+0x32>
 801d7ec:	2140      	movs	r1, #64	; 0x40
 801d7ee:	f000 fb17 	bl	801de20 <_malloc_r>
 801d7f2:	6028      	str	r0, [r5, #0]
 801d7f4:	6128      	str	r0, [r5, #16]
 801d7f6:	b920      	cbnz	r0, 801d802 <_svfiprintf_r+0x2e>
 801d7f8:	230c      	movs	r3, #12
 801d7fa:	603b      	str	r3, [r7, #0]
 801d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 801d800:	e0d1      	b.n	801d9a6 <_svfiprintf_r+0x1d2>
 801d802:	2340      	movs	r3, #64	; 0x40
 801d804:	616b      	str	r3, [r5, #20]
 801d806:	2300      	movs	r3, #0
 801d808:	9309      	str	r3, [sp, #36]	; 0x24
 801d80a:	2320      	movs	r3, #32
 801d80c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d810:	f8cd 800c 	str.w	r8, [sp, #12]
 801d814:	2330      	movs	r3, #48	; 0x30
 801d816:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d9c0 <_svfiprintf_r+0x1ec>
 801d81a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d81e:	f04f 0901 	mov.w	r9, #1
 801d822:	4623      	mov	r3, r4
 801d824:	469a      	mov	sl, r3
 801d826:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d82a:	b10a      	cbz	r2, 801d830 <_svfiprintf_r+0x5c>
 801d82c:	2a25      	cmp	r2, #37	; 0x25
 801d82e:	d1f9      	bne.n	801d824 <_svfiprintf_r+0x50>
 801d830:	ebba 0b04 	subs.w	fp, sl, r4
 801d834:	d00b      	beq.n	801d84e <_svfiprintf_r+0x7a>
 801d836:	465b      	mov	r3, fp
 801d838:	4622      	mov	r2, r4
 801d83a:	4629      	mov	r1, r5
 801d83c:	4638      	mov	r0, r7
 801d83e:	f7ff ff6d 	bl	801d71c <__ssputs_r>
 801d842:	3001      	adds	r0, #1
 801d844:	f000 80aa 	beq.w	801d99c <_svfiprintf_r+0x1c8>
 801d848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d84a:	445a      	add	r2, fp
 801d84c:	9209      	str	r2, [sp, #36]	; 0x24
 801d84e:	f89a 3000 	ldrb.w	r3, [sl]
 801d852:	2b00      	cmp	r3, #0
 801d854:	f000 80a2 	beq.w	801d99c <_svfiprintf_r+0x1c8>
 801d858:	2300      	movs	r3, #0
 801d85a:	f04f 32ff 	mov.w	r2, #4294967295
 801d85e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d862:	f10a 0a01 	add.w	sl, sl, #1
 801d866:	9304      	str	r3, [sp, #16]
 801d868:	9307      	str	r3, [sp, #28]
 801d86a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d86e:	931a      	str	r3, [sp, #104]	; 0x68
 801d870:	4654      	mov	r4, sl
 801d872:	2205      	movs	r2, #5
 801d874:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d878:	4851      	ldr	r0, [pc, #324]	; (801d9c0 <_svfiprintf_r+0x1ec>)
 801d87a:	f7e2 fc89 	bl	8000190 <memchr>
 801d87e:	9a04      	ldr	r2, [sp, #16]
 801d880:	b9d8      	cbnz	r0, 801d8ba <_svfiprintf_r+0xe6>
 801d882:	06d0      	lsls	r0, r2, #27
 801d884:	bf44      	itt	mi
 801d886:	2320      	movmi	r3, #32
 801d888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d88c:	0711      	lsls	r1, r2, #28
 801d88e:	bf44      	itt	mi
 801d890:	232b      	movmi	r3, #43	; 0x2b
 801d892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d896:	f89a 3000 	ldrb.w	r3, [sl]
 801d89a:	2b2a      	cmp	r3, #42	; 0x2a
 801d89c:	d015      	beq.n	801d8ca <_svfiprintf_r+0xf6>
 801d89e:	9a07      	ldr	r2, [sp, #28]
 801d8a0:	4654      	mov	r4, sl
 801d8a2:	2000      	movs	r0, #0
 801d8a4:	f04f 0c0a 	mov.w	ip, #10
 801d8a8:	4621      	mov	r1, r4
 801d8aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d8ae:	3b30      	subs	r3, #48	; 0x30
 801d8b0:	2b09      	cmp	r3, #9
 801d8b2:	d94e      	bls.n	801d952 <_svfiprintf_r+0x17e>
 801d8b4:	b1b0      	cbz	r0, 801d8e4 <_svfiprintf_r+0x110>
 801d8b6:	9207      	str	r2, [sp, #28]
 801d8b8:	e014      	b.n	801d8e4 <_svfiprintf_r+0x110>
 801d8ba:	eba0 0308 	sub.w	r3, r0, r8
 801d8be:	fa09 f303 	lsl.w	r3, r9, r3
 801d8c2:	4313      	orrs	r3, r2
 801d8c4:	9304      	str	r3, [sp, #16]
 801d8c6:	46a2      	mov	sl, r4
 801d8c8:	e7d2      	b.n	801d870 <_svfiprintf_r+0x9c>
 801d8ca:	9b03      	ldr	r3, [sp, #12]
 801d8cc:	1d19      	adds	r1, r3, #4
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	9103      	str	r1, [sp, #12]
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	bfbb      	ittet	lt
 801d8d6:	425b      	neglt	r3, r3
 801d8d8:	f042 0202 	orrlt.w	r2, r2, #2
 801d8dc:	9307      	strge	r3, [sp, #28]
 801d8de:	9307      	strlt	r3, [sp, #28]
 801d8e0:	bfb8      	it	lt
 801d8e2:	9204      	strlt	r2, [sp, #16]
 801d8e4:	7823      	ldrb	r3, [r4, #0]
 801d8e6:	2b2e      	cmp	r3, #46	; 0x2e
 801d8e8:	d10c      	bne.n	801d904 <_svfiprintf_r+0x130>
 801d8ea:	7863      	ldrb	r3, [r4, #1]
 801d8ec:	2b2a      	cmp	r3, #42	; 0x2a
 801d8ee:	d135      	bne.n	801d95c <_svfiprintf_r+0x188>
 801d8f0:	9b03      	ldr	r3, [sp, #12]
 801d8f2:	1d1a      	adds	r2, r3, #4
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	9203      	str	r2, [sp, #12]
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	bfb8      	it	lt
 801d8fc:	f04f 33ff 	movlt.w	r3, #4294967295
 801d900:	3402      	adds	r4, #2
 801d902:	9305      	str	r3, [sp, #20]
 801d904:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 801d9c4 <_svfiprintf_r+0x1f0>
 801d908:	7821      	ldrb	r1, [r4, #0]
 801d90a:	2203      	movs	r2, #3
 801d90c:	4650      	mov	r0, sl
 801d90e:	f7e2 fc3f 	bl	8000190 <memchr>
 801d912:	b140      	cbz	r0, 801d926 <_svfiprintf_r+0x152>
 801d914:	2340      	movs	r3, #64	; 0x40
 801d916:	eba0 000a 	sub.w	r0, r0, sl
 801d91a:	fa03 f000 	lsl.w	r0, r3, r0
 801d91e:	9b04      	ldr	r3, [sp, #16]
 801d920:	4303      	orrs	r3, r0
 801d922:	3401      	adds	r4, #1
 801d924:	9304      	str	r3, [sp, #16]
 801d926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d92a:	4827      	ldr	r0, [pc, #156]	; (801d9c8 <_svfiprintf_r+0x1f4>)
 801d92c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d930:	2206      	movs	r2, #6
 801d932:	f7e2 fc2d 	bl	8000190 <memchr>
 801d936:	2800      	cmp	r0, #0
 801d938:	d038      	beq.n	801d9ac <_svfiprintf_r+0x1d8>
 801d93a:	4b24      	ldr	r3, [pc, #144]	; (801d9cc <_svfiprintf_r+0x1f8>)
 801d93c:	bb1b      	cbnz	r3, 801d986 <_svfiprintf_r+0x1b2>
 801d93e:	9b03      	ldr	r3, [sp, #12]
 801d940:	3307      	adds	r3, #7
 801d942:	f023 0307 	bic.w	r3, r3, #7
 801d946:	3308      	adds	r3, #8
 801d948:	9303      	str	r3, [sp, #12]
 801d94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d94c:	4433      	add	r3, r6
 801d94e:	9309      	str	r3, [sp, #36]	; 0x24
 801d950:	e767      	b.n	801d822 <_svfiprintf_r+0x4e>
 801d952:	fb0c 3202 	mla	r2, ip, r2, r3
 801d956:	460c      	mov	r4, r1
 801d958:	2001      	movs	r0, #1
 801d95a:	e7a5      	b.n	801d8a8 <_svfiprintf_r+0xd4>
 801d95c:	2300      	movs	r3, #0
 801d95e:	3401      	adds	r4, #1
 801d960:	9305      	str	r3, [sp, #20]
 801d962:	4619      	mov	r1, r3
 801d964:	f04f 0c0a 	mov.w	ip, #10
 801d968:	4620      	mov	r0, r4
 801d96a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d96e:	3a30      	subs	r2, #48	; 0x30
 801d970:	2a09      	cmp	r2, #9
 801d972:	d903      	bls.n	801d97c <_svfiprintf_r+0x1a8>
 801d974:	2b00      	cmp	r3, #0
 801d976:	d0c5      	beq.n	801d904 <_svfiprintf_r+0x130>
 801d978:	9105      	str	r1, [sp, #20]
 801d97a:	e7c3      	b.n	801d904 <_svfiprintf_r+0x130>
 801d97c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d980:	4604      	mov	r4, r0
 801d982:	2301      	movs	r3, #1
 801d984:	e7f0      	b.n	801d968 <_svfiprintf_r+0x194>
 801d986:	ab03      	add	r3, sp, #12
 801d988:	9300      	str	r3, [sp, #0]
 801d98a:	462a      	mov	r2, r5
 801d98c:	4b10      	ldr	r3, [pc, #64]	; (801d9d0 <_svfiprintf_r+0x1fc>)
 801d98e:	a904      	add	r1, sp, #16
 801d990:	4638      	mov	r0, r7
 801d992:	f3af 8000 	nop.w
 801d996:	1c42      	adds	r2, r0, #1
 801d998:	4606      	mov	r6, r0
 801d99a:	d1d6      	bne.n	801d94a <_svfiprintf_r+0x176>
 801d99c:	89ab      	ldrh	r3, [r5, #12]
 801d99e:	065b      	lsls	r3, r3, #25
 801d9a0:	f53f af2c 	bmi.w	801d7fc <_svfiprintf_r+0x28>
 801d9a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9a6:	b01d      	add	sp, #116	; 0x74
 801d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9ac:	ab03      	add	r3, sp, #12
 801d9ae:	9300      	str	r3, [sp, #0]
 801d9b0:	462a      	mov	r2, r5
 801d9b2:	4b07      	ldr	r3, [pc, #28]	; (801d9d0 <_svfiprintf_r+0x1fc>)
 801d9b4:	a904      	add	r1, sp, #16
 801d9b6:	4638      	mov	r0, r7
 801d9b8:	f000 f87a 	bl	801dab0 <_printf_i>
 801d9bc:	e7eb      	b.n	801d996 <_svfiprintf_r+0x1c2>
 801d9be:	bf00      	nop
 801d9c0:	0801f040 	.word	0x0801f040
 801d9c4:	0801f046 	.word	0x0801f046
 801d9c8:	0801f04a 	.word	0x0801f04a
 801d9cc:	00000000 	.word	0x00000000
 801d9d0:	0801d71d 	.word	0x0801d71d

0801d9d4 <_printf_common>:
 801d9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d9d8:	4616      	mov	r6, r2
 801d9da:	4699      	mov	r9, r3
 801d9dc:	688a      	ldr	r2, [r1, #8]
 801d9de:	690b      	ldr	r3, [r1, #16]
 801d9e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d9e4:	4293      	cmp	r3, r2
 801d9e6:	bfb8      	it	lt
 801d9e8:	4613      	movlt	r3, r2
 801d9ea:	6033      	str	r3, [r6, #0]
 801d9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d9f0:	4607      	mov	r7, r0
 801d9f2:	460c      	mov	r4, r1
 801d9f4:	b10a      	cbz	r2, 801d9fa <_printf_common+0x26>
 801d9f6:	3301      	adds	r3, #1
 801d9f8:	6033      	str	r3, [r6, #0]
 801d9fa:	6823      	ldr	r3, [r4, #0]
 801d9fc:	0699      	lsls	r1, r3, #26
 801d9fe:	bf42      	ittt	mi
 801da00:	6833      	ldrmi	r3, [r6, #0]
 801da02:	3302      	addmi	r3, #2
 801da04:	6033      	strmi	r3, [r6, #0]
 801da06:	6825      	ldr	r5, [r4, #0]
 801da08:	f015 0506 	ands.w	r5, r5, #6
 801da0c:	d106      	bne.n	801da1c <_printf_common+0x48>
 801da0e:	f104 0a19 	add.w	sl, r4, #25
 801da12:	68e3      	ldr	r3, [r4, #12]
 801da14:	6832      	ldr	r2, [r6, #0]
 801da16:	1a9b      	subs	r3, r3, r2
 801da18:	42ab      	cmp	r3, r5
 801da1a:	dc26      	bgt.n	801da6a <_printf_common+0x96>
 801da1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801da20:	1e13      	subs	r3, r2, #0
 801da22:	6822      	ldr	r2, [r4, #0]
 801da24:	bf18      	it	ne
 801da26:	2301      	movne	r3, #1
 801da28:	0692      	lsls	r2, r2, #26
 801da2a:	d42b      	bmi.n	801da84 <_printf_common+0xb0>
 801da2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801da30:	4649      	mov	r1, r9
 801da32:	4638      	mov	r0, r7
 801da34:	47c0      	blx	r8
 801da36:	3001      	adds	r0, #1
 801da38:	d01e      	beq.n	801da78 <_printf_common+0xa4>
 801da3a:	6823      	ldr	r3, [r4, #0]
 801da3c:	68e5      	ldr	r5, [r4, #12]
 801da3e:	6832      	ldr	r2, [r6, #0]
 801da40:	f003 0306 	and.w	r3, r3, #6
 801da44:	2b04      	cmp	r3, #4
 801da46:	bf08      	it	eq
 801da48:	1aad      	subeq	r5, r5, r2
 801da4a:	68a3      	ldr	r3, [r4, #8]
 801da4c:	6922      	ldr	r2, [r4, #16]
 801da4e:	bf0c      	ite	eq
 801da50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801da54:	2500      	movne	r5, #0
 801da56:	4293      	cmp	r3, r2
 801da58:	bfc4      	itt	gt
 801da5a:	1a9b      	subgt	r3, r3, r2
 801da5c:	18ed      	addgt	r5, r5, r3
 801da5e:	2600      	movs	r6, #0
 801da60:	341a      	adds	r4, #26
 801da62:	42b5      	cmp	r5, r6
 801da64:	d11a      	bne.n	801da9c <_printf_common+0xc8>
 801da66:	2000      	movs	r0, #0
 801da68:	e008      	b.n	801da7c <_printf_common+0xa8>
 801da6a:	2301      	movs	r3, #1
 801da6c:	4652      	mov	r2, sl
 801da6e:	4649      	mov	r1, r9
 801da70:	4638      	mov	r0, r7
 801da72:	47c0      	blx	r8
 801da74:	3001      	adds	r0, #1
 801da76:	d103      	bne.n	801da80 <_printf_common+0xac>
 801da78:	f04f 30ff 	mov.w	r0, #4294967295
 801da7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801da80:	3501      	adds	r5, #1
 801da82:	e7c6      	b.n	801da12 <_printf_common+0x3e>
 801da84:	18e1      	adds	r1, r4, r3
 801da86:	1c5a      	adds	r2, r3, #1
 801da88:	2030      	movs	r0, #48	; 0x30
 801da8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801da8e:	4422      	add	r2, r4
 801da90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801da94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801da98:	3302      	adds	r3, #2
 801da9a:	e7c7      	b.n	801da2c <_printf_common+0x58>
 801da9c:	2301      	movs	r3, #1
 801da9e:	4622      	mov	r2, r4
 801daa0:	4649      	mov	r1, r9
 801daa2:	4638      	mov	r0, r7
 801daa4:	47c0      	blx	r8
 801daa6:	3001      	adds	r0, #1
 801daa8:	d0e6      	beq.n	801da78 <_printf_common+0xa4>
 801daaa:	3601      	adds	r6, #1
 801daac:	e7d9      	b.n	801da62 <_printf_common+0x8e>
	...

0801dab0 <_printf_i>:
 801dab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dab4:	7e0f      	ldrb	r7, [r1, #24]
 801dab6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dab8:	2f78      	cmp	r7, #120	; 0x78
 801daba:	4691      	mov	r9, r2
 801dabc:	4680      	mov	r8, r0
 801dabe:	460c      	mov	r4, r1
 801dac0:	469a      	mov	sl, r3
 801dac2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dac6:	d807      	bhi.n	801dad8 <_printf_i+0x28>
 801dac8:	2f62      	cmp	r7, #98	; 0x62
 801daca:	d80a      	bhi.n	801dae2 <_printf_i+0x32>
 801dacc:	2f00      	cmp	r7, #0
 801dace:	f000 80d8 	beq.w	801dc82 <_printf_i+0x1d2>
 801dad2:	2f58      	cmp	r7, #88	; 0x58
 801dad4:	f000 80a3 	beq.w	801dc1e <_printf_i+0x16e>
 801dad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dadc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dae0:	e03a      	b.n	801db58 <_printf_i+0xa8>
 801dae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dae6:	2b15      	cmp	r3, #21
 801dae8:	d8f6      	bhi.n	801dad8 <_printf_i+0x28>
 801daea:	a101      	add	r1, pc, #4	; (adr r1, 801daf0 <_printf_i+0x40>)
 801daec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801daf0:	0801db49 	.word	0x0801db49
 801daf4:	0801db5d 	.word	0x0801db5d
 801daf8:	0801dad9 	.word	0x0801dad9
 801dafc:	0801dad9 	.word	0x0801dad9
 801db00:	0801dad9 	.word	0x0801dad9
 801db04:	0801dad9 	.word	0x0801dad9
 801db08:	0801db5d 	.word	0x0801db5d
 801db0c:	0801dad9 	.word	0x0801dad9
 801db10:	0801dad9 	.word	0x0801dad9
 801db14:	0801dad9 	.word	0x0801dad9
 801db18:	0801dad9 	.word	0x0801dad9
 801db1c:	0801dc69 	.word	0x0801dc69
 801db20:	0801db8d 	.word	0x0801db8d
 801db24:	0801dc4b 	.word	0x0801dc4b
 801db28:	0801dad9 	.word	0x0801dad9
 801db2c:	0801dad9 	.word	0x0801dad9
 801db30:	0801dc8b 	.word	0x0801dc8b
 801db34:	0801dad9 	.word	0x0801dad9
 801db38:	0801db8d 	.word	0x0801db8d
 801db3c:	0801dad9 	.word	0x0801dad9
 801db40:	0801dad9 	.word	0x0801dad9
 801db44:	0801dc53 	.word	0x0801dc53
 801db48:	682b      	ldr	r3, [r5, #0]
 801db4a:	1d1a      	adds	r2, r3, #4
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	602a      	str	r2, [r5, #0]
 801db50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801db54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801db58:	2301      	movs	r3, #1
 801db5a:	e0a3      	b.n	801dca4 <_printf_i+0x1f4>
 801db5c:	6820      	ldr	r0, [r4, #0]
 801db5e:	6829      	ldr	r1, [r5, #0]
 801db60:	0606      	lsls	r6, r0, #24
 801db62:	f101 0304 	add.w	r3, r1, #4
 801db66:	d50a      	bpl.n	801db7e <_printf_i+0xce>
 801db68:	680e      	ldr	r6, [r1, #0]
 801db6a:	602b      	str	r3, [r5, #0]
 801db6c:	2e00      	cmp	r6, #0
 801db6e:	da03      	bge.n	801db78 <_printf_i+0xc8>
 801db70:	232d      	movs	r3, #45	; 0x2d
 801db72:	4276      	negs	r6, r6
 801db74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801db78:	485e      	ldr	r0, [pc, #376]	; (801dcf4 <_printf_i+0x244>)
 801db7a:	230a      	movs	r3, #10
 801db7c:	e019      	b.n	801dbb2 <_printf_i+0x102>
 801db7e:	680e      	ldr	r6, [r1, #0]
 801db80:	602b      	str	r3, [r5, #0]
 801db82:	f010 0f40 	tst.w	r0, #64	; 0x40
 801db86:	bf18      	it	ne
 801db88:	b236      	sxthne	r6, r6
 801db8a:	e7ef      	b.n	801db6c <_printf_i+0xbc>
 801db8c:	682b      	ldr	r3, [r5, #0]
 801db8e:	6820      	ldr	r0, [r4, #0]
 801db90:	1d19      	adds	r1, r3, #4
 801db92:	6029      	str	r1, [r5, #0]
 801db94:	0601      	lsls	r1, r0, #24
 801db96:	d501      	bpl.n	801db9c <_printf_i+0xec>
 801db98:	681e      	ldr	r6, [r3, #0]
 801db9a:	e002      	b.n	801dba2 <_printf_i+0xf2>
 801db9c:	0646      	lsls	r6, r0, #25
 801db9e:	d5fb      	bpl.n	801db98 <_printf_i+0xe8>
 801dba0:	881e      	ldrh	r6, [r3, #0]
 801dba2:	4854      	ldr	r0, [pc, #336]	; (801dcf4 <_printf_i+0x244>)
 801dba4:	2f6f      	cmp	r7, #111	; 0x6f
 801dba6:	bf0c      	ite	eq
 801dba8:	2308      	moveq	r3, #8
 801dbaa:	230a      	movne	r3, #10
 801dbac:	2100      	movs	r1, #0
 801dbae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dbb2:	6865      	ldr	r5, [r4, #4]
 801dbb4:	60a5      	str	r5, [r4, #8]
 801dbb6:	2d00      	cmp	r5, #0
 801dbb8:	bfa2      	ittt	ge
 801dbba:	6821      	ldrge	r1, [r4, #0]
 801dbbc:	f021 0104 	bicge.w	r1, r1, #4
 801dbc0:	6021      	strge	r1, [r4, #0]
 801dbc2:	b90e      	cbnz	r6, 801dbc8 <_printf_i+0x118>
 801dbc4:	2d00      	cmp	r5, #0
 801dbc6:	d04d      	beq.n	801dc64 <_printf_i+0x1b4>
 801dbc8:	4615      	mov	r5, r2
 801dbca:	fbb6 f1f3 	udiv	r1, r6, r3
 801dbce:	fb03 6711 	mls	r7, r3, r1, r6
 801dbd2:	5dc7      	ldrb	r7, [r0, r7]
 801dbd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dbd8:	4637      	mov	r7, r6
 801dbda:	42bb      	cmp	r3, r7
 801dbdc:	460e      	mov	r6, r1
 801dbde:	d9f4      	bls.n	801dbca <_printf_i+0x11a>
 801dbe0:	2b08      	cmp	r3, #8
 801dbe2:	d10b      	bne.n	801dbfc <_printf_i+0x14c>
 801dbe4:	6823      	ldr	r3, [r4, #0]
 801dbe6:	07de      	lsls	r6, r3, #31
 801dbe8:	d508      	bpl.n	801dbfc <_printf_i+0x14c>
 801dbea:	6923      	ldr	r3, [r4, #16]
 801dbec:	6861      	ldr	r1, [r4, #4]
 801dbee:	4299      	cmp	r1, r3
 801dbf0:	bfde      	ittt	le
 801dbf2:	2330      	movle	r3, #48	; 0x30
 801dbf4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dbf8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801dbfc:	1b52      	subs	r2, r2, r5
 801dbfe:	6122      	str	r2, [r4, #16]
 801dc00:	f8cd a000 	str.w	sl, [sp]
 801dc04:	464b      	mov	r3, r9
 801dc06:	aa03      	add	r2, sp, #12
 801dc08:	4621      	mov	r1, r4
 801dc0a:	4640      	mov	r0, r8
 801dc0c:	f7ff fee2 	bl	801d9d4 <_printf_common>
 801dc10:	3001      	adds	r0, #1
 801dc12:	d14c      	bne.n	801dcae <_printf_i+0x1fe>
 801dc14:	f04f 30ff 	mov.w	r0, #4294967295
 801dc18:	b004      	add	sp, #16
 801dc1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc1e:	4835      	ldr	r0, [pc, #212]	; (801dcf4 <_printf_i+0x244>)
 801dc20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801dc24:	6829      	ldr	r1, [r5, #0]
 801dc26:	6823      	ldr	r3, [r4, #0]
 801dc28:	f851 6b04 	ldr.w	r6, [r1], #4
 801dc2c:	6029      	str	r1, [r5, #0]
 801dc2e:	061d      	lsls	r5, r3, #24
 801dc30:	d514      	bpl.n	801dc5c <_printf_i+0x1ac>
 801dc32:	07df      	lsls	r7, r3, #31
 801dc34:	bf44      	itt	mi
 801dc36:	f043 0320 	orrmi.w	r3, r3, #32
 801dc3a:	6023      	strmi	r3, [r4, #0]
 801dc3c:	b91e      	cbnz	r6, 801dc46 <_printf_i+0x196>
 801dc3e:	6823      	ldr	r3, [r4, #0]
 801dc40:	f023 0320 	bic.w	r3, r3, #32
 801dc44:	6023      	str	r3, [r4, #0]
 801dc46:	2310      	movs	r3, #16
 801dc48:	e7b0      	b.n	801dbac <_printf_i+0xfc>
 801dc4a:	6823      	ldr	r3, [r4, #0]
 801dc4c:	f043 0320 	orr.w	r3, r3, #32
 801dc50:	6023      	str	r3, [r4, #0]
 801dc52:	2378      	movs	r3, #120	; 0x78
 801dc54:	4828      	ldr	r0, [pc, #160]	; (801dcf8 <_printf_i+0x248>)
 801dc56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801dc5a:	e7e3      	b.n	801dc24 <_printf_i+0x174>
 801dc5c:	0659      	lsls	r1, r3, #25
 801dc5e:	bf48      	it	mi
 801dc60:	b2b6      	uxthmi	r6, r6
 801dc62:	e7e6      	b.n	801dc32 <_printf_i+0x182>
 801dc64:	4615      	mov	r5, r2
 801dc66:	e7bb      	b.n	801dbe0 <_printf_i+0x130>
 801dc68:	682b      	ldr	r3, [r5, #0]
 801dc6a:	6826      	ldr	r6, [r4, #0]
 801dc6c:	6961      	ldr	r1, [r4, #20]
 801dc6e:	1d18      	adds	r0, r3, #4
 801dc70:	6028      	str	r0, [r5, #0]
 801dc72:	0635      	lsls	r5, r6, #24
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	d501      	bpl.n	801dc7c <_printf_i+0x1cc>
 801dc78:	6019      	str	r1, [r3, #0]
 801dc7a:	e002      	b.n	801dc82 <_printf_i+0x1d2>
 801dc7c:	0670      	lsls	r0, r6, #25
 801dc7e:	d5fb      	bpl.n	801dc78 <_printf_i+0x1c8>
 801dc80:	8019      	strh	r1, [r3, #0]
 801dc82:	2300      	movs	r3, #0
 801dc84:	6123      	str	r3, [r4, #16]
 801dc86:	4615      	mov	r5, r2
 801dc88:	e7ba      	b.n	801dc00 <_printf_i+0x150>
 801dc8a:	682b      	ldr	r3, [r5, #0]
 801dc8c:	1d1a      	adds	r2, r3, #4
 801dc8e:	602a      	str	r2, [r5, #0]
 801dc90:	681d      	ldr	r5, [r3, #0]
 801dc92:	6862      	ldr	r2, [r4, #4]
 801dc94:	2100      	movs	r1, #0
 801dc96:	4628      	mov	r0, r5
 801dc98:	f7e2 fa7a 	bl	8000190 <memchr>
 801dc9c:	b108      	cbz	r0, 801dca2 <_printf_i+0x1f2>
 801dc9e:	1b40      	subs	r0, r0, r5
 801dca0:	6060      	str	r0, [r4, #4]
 801dca2:	6863      	ldr	r3, [r4, #4]
 801dca4:	6123      	str	r3, [r4, #16]
 801dca6:	2300      	movs	r3, #0
 801dca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dcac:	e7a8      	b.n	801dc00 <_printf_i+0x150>
 801dcae:	6923      	ldr	r3, [r4, #16]
 801dcb0:	462a      	mov	r2, r5
 801dcb2:	4649      	mov	r1, r9
 801dcb4:	4640      	mov	r0, r8
 801dcb6:	47d0      	blx	sl
 801dcb8:	3001      	adds	r0, #1
 801dcba:	d0ab      	beq.n	801dc14 <_printf_i+0x164>
 801dcbc:	6823      	ldr	r3, [r4, #0]
 801dcbe:	079b      	lsls	r3, r3, #30
 801dcc0:	d413      	bmi.n	801dcea <_printf_i+0x23a>
 801dcc2:	68e0      	ldr	r0, [r4, #12]
 801dcc4:	9b03      	ldr	r3, [sp, #12]
 801dcc6:	4298      	cmp	r0, r3
 801dcc8:	bfb8      	it	lt
 801dcca:	4618      	movlt	r0, r3
 801dccc:	e7a4      	b.n	801dc18 <_printf_i+0x168>
 801dcce:	2301      	movs	r3, #1
 801dcd0:	4632      	mov	r2, r6
 801dcd2:	4649      	mov	r1, r9
 801dcd4:	4640      	mov	r0, r8
 801dcd6:	47d0      	blx	sl
 801dcd8:	3001      	adds	r0, #1
 801dcda:	d09b      	beq.n	801dc14 <_printf_i+0x164>
 801dcdc:	3501      	adds	r5, #1
 801dcde:	68e3      	ldr	r3, [r4, #12]
 801dce0:	9903      	ldr	r1, [sp, #12]
 801dce2:	1a5b      	subs	r3, r3, r1
 801dce4:	42ab      	cmp	r3, r5
 801dce6:	dcf2      	bgt.n	801dcce <_printf_i+0x21e>
 801dce8:	e7eb      	b.n	801dcc2 <_printf_i+0x212>
 801dcea:	2500      	movs	r5, #0
 801dcec:	f104 0619 	add.w	r6, r4, #25
 801dcf0:	e7f5      	b.n	801dcde <_printf_i+0x22e>
 801dcf2:	bf00      	nop
 801dcf4:	0801f051 	.word	0x0801f051
 801dcf8:	0801f062 	.word	0x0801f062

0801dcfc <memcpy>:
 801dcfc:	440a      	add	r2, r1
 801dcfe:	4291      	cmp	r1, r2
 801dd00:	f100 33ff 	add.w	r3, r0, #4294967295
 801dd04:	d100      	bne.n	801dd08 <memcpy+0xc>
 801dd06:	4770      	bx	lr
 801dd08:	b510      	push	{r4, lr}
 801dd0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd12:	4291      	cmp	r1, r2
 801dd14:	d1f9      	bne.n	801dd0a <memcpy+0xe>
 801dd16:	bd10      	pop	{r4, pc}

0801dd18 <memmove>:
 801dd18:	4288      	cmp	r0, r1
 801dd1a:	b510      	push	{r4, lr}
 801dd1c:	eb01 0402 	add.w	r4, r1, r2
 801dd20:	d902      	bls.n	801dd28 <memmove+0x10>
 801dd22:	4284      	cmp	r4, r0
 801dd24:	4623      	mov	r3, r4
 801dd26:	d807      	bhi.n	801dd38 <memmove+0x20>
 801dd28:	1e43      	subs	r3, r0, #1
 801dd2a:	42a1      	cmp	r1, r4
 801dd2c:	d008      	beq.n	801dd40 <memmove+0x28>
 801dd2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd32:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dd36:	e7f8      	b.n	801dd2a <memmove+0x12>
 801dd38:	4402      	add	r2, r0
 801dd3a:	4601      	mov	r1, r0
 801dd3c:	428a      	cmp	r2, r1
 801dd3e:	d100      	bne.n	801dd42 <memmove+0x2a>
 801dd40:	bd10      	pop	{r4, pc}
 801dd42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dd46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dd4a:	e7f7      	b.n	801dd3c <memmove+0x24>

0801dd4c <_free_r>:
 801dd4c:	b538      	push	{r3, r4, r5, lr}
 801dd4e:	4605      	mov	r5, r0
 801dd50:	2900      	cmp	r1, #0
 801dd52:	d041      	beq.n	801ddd8 <_free_r+0x8c>
 801dd54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd58:	1f0c      	subs	r4, r1, #4
 801dd5a:	2b00      	cmp	r3, #0
 801dd5c:	bfb8      	it	lt
 801dd5e:	18e4      	addlt	r4, r4, r3
 801dd60:	f000 f912 	bl	801df88 <__malloc_lock>
 801dd64:	4a1d      	ldr	r2, [pc, #116]	; (801dddc <_free_r+0x90>)
 801dd66:	6813      	ldr	r3, [r2, #0]
 801dd68:	b933      	cbnz	r3, 801dd78 <_free_r+0x2c>
 801dd6a:	6063      	str	r3, [r4, #4]
 801dd6c:	6014      	str	r4, [r2, #0]
 801dd6e:	4628      	mov	r0, r5
 801dd70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dd74:	f000 b90e 	b.w	801df94 <__malloc_unlock>
 801dd78:	42a3      	cmp	r3, r4
 801dd7a:	d908      	bls.n	801dd8e <_free_r+0x42>
 801dd7c:	6820      	ldr	r0, [r4, #0]
 801dd7e:	1821      	adds	r1, r4, r0
 801dd80:	428b      	cmp	r3, r1
 801dd82:	bf01      	itttt	eq
 801dd84:	6819      	ldreq	r1, [r3, #0]
 801dd86:	685b      	ldreq	r3, [r3, #4]
 801dd88:	1809      	addeq	r1, r1, r0
 801dd8a:	6021      	streq	r1, [r4, #0]
 801dd8c:	e7ed      	b.n	801dd6a <_free_r+0x1e>
 801dd8e:	461a      	mov	r2, r3
 801dd90:	685b      	ldr	r3, [r3, #4]
 801dd92:	b10b      	cbz	r3, 801dd98 <_free_r+0x4c>
 801dd94:	42a3      	cmp	r3, r4
 801dd96:	d9fa      	bls.n	801dd8e <_free_r+0x42>
 801dd98:	6811      	ldr	r1, [r2, #0]
 801dd9a:	1850      	adds	r0, r2, r1
 801dd9c:	42a0      	cmp	r0, r4
 801dd9e:	d10b      	bne.n	801ddb8 <_free_r+0x6c>
 801dda0:	6820      	ldr	r0, [r4, #0]
 801dda2:	4401      	add	r1, r0
 801dda4:	1850      	adds	r0, r2, r1
 801dda6:	4283      	cmp	r3, r0
 801dda8:	6011      	str	r1, [r2, #0]
 801ddaa:	d1e0      	bne.n	801dd6e <_free_r+0x22>
 801ddac:	6818      	ldr	r0, [r3, #0]
 801ddae:	685b      	ldr	r3, [r3, #4]
 801ddb0:	6053      	str	r3, [r2, #4]
 801ddb2:	4401      	add	r1, r0
 801ddb4:	6011      	str	r1, [r2, #0]
 801ddb6:	e7da      	b.n	801dd6e <_free_r+0x22>
 801ddb8:	d902      	bls.n	801ddc0 <_free_r+0x74>
 801ddba:	230c      	movs	r3, #12
 801ddbc:	602b      	str	r3, [r5, #0]
 801ddbe:	e7d6      	b.n	801dd6e <_free_r+0x22>
 801ddc0:	6820      	ldr	r0, [r4, #0]
 801ddc2:	1821      	adds	r1, r4, r0
 801ddc4:	428b      	cmp	r3, r1
 801ddc6:	bf04      	itt	eq
 801ddc8:	6819      	ldreq	r1, [r3, #0]
 801ddca:	685b      	ldreq	r3, [r3, #4]
 801ddcc:	6063      	str	r3, [r4, #4]
 801ddce:	bf04      	itt	eq
 801ddd0:	1809      	addeq	r1, r1, r0
 801ddd2:	6021      	streq	r1, [r4, #0]
 801ddd4:	6054      	str	r4, [r2, #4]
 801ddd6:	e7ca      	b.n	801dd6e <_free_r+0x22>
 801ddd8:	bd38      	pop	{r3, r4, r5, pc}
 801ddda:	bf00      	nop
 801dddc:	20002290 	.word	0x20002290

0801dde0 <sbrk_aligned>:
 801dde0:	b570      	push	{r4, r5, r6, lr}
 801dde2:	4e0e      	ldr	r6, [pc, #56]	; (801de1c <sbrk_aligned+0x3c>)
 801dde4:	460c      	mov	r4, r1
 801dde6:	6831      	ldr	r1, [r6, #0]
 801dde8:	4605      	mov	r5, r0
 801ddea:	b911      	cbnz	r1, 801ddf2 <sbrk_aligned+0x12>
 801ddec:	f000 f8bc 	bl	801df68 <_sbrk_r>
 801ddf0:	6030      	str	r0, [r6, #0]
 801ddf2:	4621      	mov	r1, r4
 801ddf4:	4628      	mov	r0, r5
 801ddf6:	f000 f8b7 	bl	801df68 <_sbrk_r>
 801ddfa:	1c43      	adds	r3, r0, #1
 801ddfc:	d00a      	beq.n	801de14 <sbrk_aligned+0x34>
 801ddfe:	1cc4      	adds	r4, r0, #3
 801de00:	f024 0403 	bic.w	r4, r4, #3
 801de04:	42a0      	cmp	r0, r4
 801de06:	d007      	beq.n	801de18 <sbrk_aligned+0x38>
 801de08:	1a21      	subs	r1, r4, r0
 801de0a:	4628      	mov	r0, r5
 801de0c:	f000 f8ac 	bl	801df68 <_sbrk_r>
 801de10:	3001      	adds	r0, #1
 801de12:	d101      	bne.n	801de18 <sbrk_aligned+0x38>
 801de14:	f04f 34ff 	mov.w	r4, #4294967295
 801de18:	4620      	mov	r0, r4
 801de1a:	bd70      	pop	{r4, r5, r6, pc}
 801de1c:	20002294 	.word	0x20002294

0801de20 <_malloc_r>:
 801de20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de24:	1ccd      	adds	r5, r1, #3
 801de26:	f025 0503 	bic.w	r5, r5, #3
 801de2a:	3508      	adds	r5, #8
 801de2c:	2d0c      	cmp	r5, #12
 801de2e:	bf38      	it	cc
 801de30:	250c      	movcc	r5, #12
 801de32:	2d00      	cmp	r5, #0
 801de34:	4607      	mov	r7, r0
 801de36:	db01      	blt.n	801de3c <_malloc_r+0x1c>
 801de38:	42a9      	cmp	r1, r5
 801de3a:	d905      	bls.n	801de48 <_malloc_r+0x28>
 801de3c:	230c      	movs	r3, #12
 801de3e:	603b      	str	r3, [r7, #0]
 801de40:	2600      	movs	r6, #0
 801de42:	4630      	mov	r0, r6
 801de44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de48:	4e2e      	ldr	r6, [pc, #184]	; (801df04 <_malloc_r+0xe4>)
 801de4a:	f000 f89d 	bl	801df88 <__malloc_lock>
 801de4e:	6833      	ldr	r3, [r6, #0]
 801de50:	461c      	mov	r4, r3
 801de52:	bb34      	cbnz	r4, 801dea2 <_malloc_r+0x82>
 801de54:	4629      	mov	r1, r5
 801de56:	4638      	mov	r0, r7
 801de58:	f7ff ffc2 	bl	801dde0 <sbrk_aligned>
 801de5c:	1c43      	adds	r3, r0, #1
 801de5e:	4604      	mov	r4, r0
 801de60:	d14d      	bne.n	801defe <_malloc_r+0xde>
 801de62:	6834      	ldr	r4, [r6, #0]
 801de64:	4626      	mov	r6, r4
 801de66:	2e00      	cmp	r6, #0
 801de68:	d140      	bne.n	801deec <_malloc_r+0xcc>
 801de6a:	6823      	ldr	r3, [r4, #0]
 801de6c:	4631      	mov	r1, r6
 801de6e:	4638      	mov	r0, r7
 801de70:	eb04 0803 	add.w	r8, r4, r3
 801de74:	f000 f878 	bl	801df68 <_sbrk_r>
 801de78:	4580      	cmp	r8, r0
 801de7a:	d13a      	bne.n	801def2 <_malloc_r+0xd2>
 801de7c:	6821      	ldr	r1, [r4, #0]
 801de7e:	3503      	adds	r5, #3
 801de80:	1a6d      	subs	r5, r5, r1
 801de82:	f025 0503 	bic.w	r5, r5, #3
 801de86:	3508      	adds	r5, #8
 801de88:	2d0c      	cmp	r5, #12
 801de8a:	bf38      	it	cc
 801de8c:	250c      	movcc	r5, #12
 801de8e:	4629      	mov	r1, r5
 801de90:	4638      	mov	r0, r7
 801de92:	f7ff ffa5 	bl	801dde0 <sbrk_aligned>
 801de96:	3001      	adds	r0, #1
 801de98:	d02b      	beq.n	801def2 <_malloc_r+0xd2>
 801de9a:	6823      	ldr	r3, [r4, #0]
 801de9c:	442b      	add	r3, r5
 801de9e:	6023      	str	r3, [r4, #0]
 801dea0:	e00e      	b.n	801dec0 <_malloc_r+0xa0>
 801dea2:	6822      	ldr	r2, [r4, #0]
 801dea4:	1b52      	subs	r2, r2, r5
 801dea6:	d41e      	bmi.n	801dee6 <_malloc_r+0xc6>
 801dea8:	2a0b      	cmp	r2, #11
 801deaa:	d916      	bls.n	801deda <_malloc_r+0xba>
 801deac:	1961      	adds	r1, r4, r5
 801deae:	42a3      	cmp	r3, r4
 801deb0:	6025      	str	r5, [r4, #0]
 801deb2:	bf18      	it	ne
 801deb4:	6059      	strne	r1, [r3, #4]
 801deb6:	6863      	ldr	r3, [r4, #4]
 801deb8:	bf08      	it	eq
 801deba:	6031      	streq	r1, [r6, #0]
 801debc:	5162      	str	r2, [r4, r5]
 801debe:	604b      	str	r3, [r1, #4]
 801dec0:	4638      	mov	r0, r7
 801dec2:	f104 060b 	add.w	r6, r4, #11
 801dec6:	f000 f865 	bl	801df94 <__malloc_unlock>
 801deca:	f026 0607 	bic.w	r6, r6, #7
 801dece:	1d23      	adds	r3, r4, #4
 801ded0:	1af2      	subs	r2, r6, r3
 801ded2:	d0b6      	beq.n	801de42 <_malloc_r+0x22>
 801ded4:	1b9b      	subs	r3, r3, r6
 801ded6:	50a3      	str	r3, [r4, r2]
 801ded8:	e7b3      	b.n	801de42 <_malloc_r+0x22>
 801deda:	6862      	ldr	r2, [r4, #4]
 801dedc:	42a3      	cmp	r3, r4
 801dede:	bf0c      	ite	eq
 801dee0:	6032      	streq	r2, [r6, #0]
 801dee2:	605a      	strne	r2, [r3, #4]
 801dee4:	e7ec      	b.n	801dec0 <_malloc_r+0xa0>
 801dee6:	4623      	mov	r3, r4
 801dee8:	6864      	ldr	r4, [r4, #4]
 801deea:	e7b2      	b.n	801de52 <_malloc_r+0x32>
 801deec:	4634      	mov	r4, r6
 801deee:	6876      	ldr	r6, [r6, #4]
 801def0:	e7b9      	b.n	801de66 <_malloc_r+0x46>
 801def2:	230c      	movs	r3, #12
 801def4:	603b      	str	r3, [r7, #0]
 801def6:	4638      	mov	r0, r7
 801def8:	f000 f84c 	bl	801df94 <__malloc_unlock>
 801defc:	e7a1      	b.n	801de42 <_malloc_r+0x22>
 801defe:	6025      	str	r5, [r4, #0]
 801df00:	e7de      	b.n	801dec0 <_malloc_r+0xa0>
 801df02:	bf00      	nop
 801df04:	20002290 	.word	0x20002290

0801df08 <_realloc_r>:
 801df08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df0c:	4680      	mov	r8, r0
 801df0e:	4614      	mov	r4, r2
 801df10:	460e      	mov	r6, r1
 801df12:	b921      	cbnz	r1, 801df1e <_realloc_r+0x16>
 801df14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df18:	4611      	mov	r1, r2
 801df1a:	f7ff bf81 	b.w	801de20 <_malloc_r>
 801df1e:	b92a      	cbnz	r2, 801df2c <_realloc_r+0x24>
 801df20:	f7ff ff14 	bl	801dd4c <_free_r>
 801df24:	4625      	mov	r5, r4
 801df26:	4628      	mov	r0, r5
 801df28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df2c:	f000 f838 	bl	801dfa0 <_malloc_usable_size_r>
 801df30:	4284      	cmp	r4, r0
 801df32:	4607      	mov	r7, r0
 801df34:	d802      	bhi.n	801df3c <_realloc_r+0x34>
 801df36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801df3a:	d812      	bhi.n	801df62 <_realloc_r+0x5a>
 801df3c:	4621      	mov	r1, r4
 801df3e:	4640      	mov	r0, r8
 801df40:	f7ff ff6e 	bl	801de20 <_malloc_r>
 801df44:	4605      	mov	r5, r0
 801df46:	2800      	cmp	r0, #0
 801df48:	d0ed      	beq.n	801df26 <_realloc_r+0x1e>
 801df4a:	42bc      	cmp	r4, r7
 801df4c:	4622      	mov	r2, r4
 801df4e:	4631      	mov	r1, r6
 801df50:	bf28      	it	cs
 801df52:	463a      	movcs	r2, r7
 801df54:	f7ff fed2 	bl	801dcfc <memcpy>
 801df58:	4631      	mov	r1, r6
 801df5a:	4640      	mov	r0, r8
 801df5c:	f7ff fef6 	bl	801dd4c <_free_r>
 801df60:	e7e1      	b.n	801df26 <_realloc_r+0x1e>
 801df62:	4635      	mov	r5, r6
 801df64:	e7df      	b.n	801df26 <_realloc_r+0x1e>
	...

0801df68 <_sbrk_r>:
 801df68:	b538      	push	{r3, r4, r5, lr}
 801df6a:	4d06      	ldr	r5, [pc, #24]	; (801df84 <_sbrk_r+0x1c>)
 801df6c:	2300      	movs	r3, #0
 801df6e:	4604      	mov	r4, r0
 801df70:	4608      	mov	r0, r1
 801df72:	602b      	str	r3, [r5, #0]
 801df74:	f7e4 f808 	bl	8001f88 <_sbrk>
 801df78:	1c43      	adds	r3, r0, #1
 801df7a:	d102      	bne.n	801df82 <_sbrk_r+0x1a>
 801df7c:	682b      	ldr	r3, [r5, #0]
 801df7e:	b103      	cbz	r3, 801df82 <_sbrk_r+0x1a>
 801df80:	6023      	str	r3, [r4, #0]
 801df82:	bd38      	pop	{r3, r4, r5, pc}
 801df84:	20002298 	.word	0x20002298

0801df88 <__malloc_lock>:
 801df88:	4801      	ldr	r0, [pc, #4]	; (801df90 <__malloc_lock+0x8>)
 801df8a:	f000 b811 	b.w	801dfb0 <__retarget_lock_acquire_recursive>
 801df8e:	bf00      	nop
 801df90:	2000229c 	.word	0x2000229c

0801df94 <__malloc_unlock>:
 801df94:	4801      	ldr	r0, [pc, #4]	; (801df9c <__malloc_unlock+0x8>)
 801df96:	f000 b80c 	b.w	801dfb2 <__retarget_lock_release_recursive>
 801df9a:	bf00      	nop
 801df9c:	2000229c 	.word	0x2000229c

0801dfa0 <_malloc_usable_size_r>:
 801dfa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dfa4:	1f18      	subs	r0, r3, #4
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	bfbc      	itt	lt
 801dfaa:	580b      	ldrlt	r3, [r1, r0]
 801dfac:	18c0      	addlt	r0, r0, r3
 801dfae:	4770      	bx	lr

0801dfb0 <__retarget_lock_acquire_recursive>:
 801dfb0:	4770      	bx	lr

0801dfb2 <__retarget_lock_release_recursive>:
 801dfb2:	4770      	bx	lr
 801dfb4:	0000      	movs	r0, r0
	...

0801dfb8 <floor>:
 801dfb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfbc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801dfc0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801dfc4:	2e13      	cmp	r6, #19
 801dfc6:	4602      	mov	r2, r0
 801dfc8:	460b      	mov	r3, r1
 801dfca:	4607      	mov	r7, r0
 801dfcc:	460c      	mov	r4, r1
 801dfce:	4605      	mov	r5, r0
 801dfd0:	dc33      	bgt.n	801e03a <floor+0x82>
 801dfd2:	2e00      	cmp	r6, #0
 801dfd4:	da14      	bge.n	801e000 <floor+0x48>
 801dfd6:	a334      	add	r3, pc, #208	; (adr r3, 801e0a8 <floor+0xf0>)
 801dfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfdc:	f7e2 f92e 	bl	800023c <__adddf3>
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	f7e2 fb5e 	bl	80006a4 <__aeabi_dcmpgt>
 801dfe8:	b138      	cbz	r0, 801dffa <floor+0x42>
 801dfea:	2c00      	cmp	r4, #0
 801dfec:	da58      	bge.n	801e0a0 <floor+0xe8>
 801dfee:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801dff2:	431d      	orrs	r5, r3
 801dff4:	d001      	beq.n	801dffa <floor+0x42>
 801dff6:	4c2e      	ldr	r4, [pc, #184]	; (801e0b0 <floor+0xf8>)
 801dff8:	2500      	movs	r5, #0
 801dffa:	4623      	mov	r3, r4
 801dffc:	462f      	mov	r7, r5
 801dffe:	e025      	b.n	801e04c <floor+0x94>
 801e000:	4a2c      	ldr	r2, [pc, #176]	; (801e0b4 <floor+0xfc>)
 801e002:	fa42 f806 	asr.w	r8, r2, r6
 801e006:	ea01 0208 	and.w	r2, r1, r8
 801e00a:	4302      	orrs	r2, r0
 801e00c:	d01e      	beq.n	801e04c <floor+0x94>
 801e00e:	a326      	add	r3, pc, #152	; (adr r3, 801e0a8 <floor+0xf0>)
 801e010:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e014:	f7e2 f912 	bl	800023c <__adddf3>
 801e018:	2200      	movs	r2, #0
 801e01a:	2300      	movs	r3, #0
 801e01c:	f7e2 fb42 	bl	80006a4 <__aeabi_dcmpgt>
 801e020:	2800      	cmp	r0, #0
 801e022:	d0ea      	beq.n	801dffa <floor+0x42>
 801e024:	2c00      	cmp	r4, #0
 801e026:	bfbe      	ittt	lt
 801e028:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e02c:	fa43 f606 	asrlt.w	r6, r3, r6
 801e030:	19a4      	addlt	r4, r4, r6
 801e032:	ea24 0408 	bic.w	r4, r4, r8
 801e036:	2500      	movs	r5, #0
 801e038:	e7df      	b.n	801dffa <floor+0x42>
 801e03a:	2e33      	cmp	r6, #51	; 0x33
 801e03c:	dd0a      	ble.n	801e054 <floor+0x9c>
 801e03e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e042:	d103      	bne.n	801e04c <floor+0x94>
 801e044:	f7e2 f8fa 	bl	800023c <__adddf3>
 801e048:	4607      	mov	r7, r0
 801e04a:	460b      	mov	r3, r1
 801e04c:	4638      	mov	r0, r7
 801e04e:	4619      	mov	r1, r3
 801e050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e054:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801e058:	f04f 32ff 	mov.w	r2, #4294967295
 801e05c:	fa22 f808 	lsr.w	r8, r2, r8
 801e060:	ea18 0f00 	tst.w	r8, r0
 801e064:	d0f2      	beq.n	801e04c <floor+0x94>
 801e066:	a310      	add	r3, pc, #64	; (adr r3, 801e0a8 <floor+0xf0>)
 801e068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e06c:	f7e2 f8e6 	bl	800023c <__adddf3>
 801e070:	2200      	movs	r2, #0
 801e072:	2300      	movs	r3, #0
 801e074:	f7e2 fb16 	bl	80006a4 <__aeabi_dcmpgt>
 801e078:	2800      	cmp	r0, #0
 801e07a:	d0be      	beq.n	801dffa <floor+0x42>
 801e07c:	2c00      	cmp	r4, #0
 801e07e:	da02      	bge.n	801e086 <floor+0xce>
 801e080:	2e14      	cmp	r6, #20
 801e082:	d103      	bne.n	801e08c <floor+0xd4>
 801e084:	3401      	adds	r4, #1
 801e086:	ea25 0508 	bic.w	r5, r5, r8
 801e08a:	e7b6      	b.n	801dffa <floor+0x42>
 801e08c:	2301      	movs	r3, #1
 801e08e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e092:	fa03 f606 	lsl.w	r6, r3, r6
 801e096:	4435      	add	r5, r6
 801e098:	42bd      	cmp	r5, r7
 801e09a:	bf38      	it	cc
 801e09c:	18e4      	addcc	r4, r4, r3
 801e09e:	e7f2      	b.n	801e086 <floor+0xce>
 801e0a0:	2500      	movs	r5, #0
 801e0a2:	462c      	mov	r4, r5
 801e0a4:	e7a9      	b.n	801dffa <floor+0x42>
 801e0a6:	bf00      	nop
 801e0a8:	8800759c 	.word	0x8800759c
 801e0ac:	7e37e43c 	.word	0x7e37e43c
 801e0b0:	bff00000 	.word	0xbff00000
 801e0b4:	000fffff 	.word	0x000fffff

0801e0b8 <_init>:
 801e0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0ba:	bf00      	nop
 801e0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0be:	bc08      	pop	{r3}
 801e0c0:	469e      	mov	lr, r3
 801e0c2:	4770      	bx	lr

0801e0c4 <_fini>:
 801e0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0c6:	bf00      	nop
 801e0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e0ca:	bc08      	pop	{r3}
 801e0cc:	469e      	mov	lr, r3
 801e0ce:	4770      	bx	lr
