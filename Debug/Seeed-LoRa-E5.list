
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cdf0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f6c  0801cf28  0801cf28  0002cf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801de94  0801de94  0002de94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801df54  0801df54  00030158  2**0
                  CONTENTS
  5 .ARM          00000008  0801df54  0801df54  0002df54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801df5c  0801df5c  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801df5c  0801df5c  0002df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801df60  0801df60  0002df60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000158  20000000  0801df64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000202c  20000158  0801e0bc  00030158  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002184  0801e0bc  00032184  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 13 .debug_info   000439d1  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a186  00000000  00000000  00073b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032d8  00000000  00000000  0007dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f18  00000000  00000000  00080fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002815a  00000000  00000000  00083ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003ce42  00000000  00000000  000ac02a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca6e7  00000000  00000000  000e8e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b3553  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d0bc  00000000  00000000  001b35a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000158 	.word	0x20000158
 8000154:	00000000 	.word	0x00000000
 8000158:	0801cf10 	.word	0x0801cf10

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000015c 	.word	0x2000015c
 8000174:	0801cf10 	.word	0x0801cf10

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr

08000f00 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f04:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f06:	4a24      	ldr	r2, [pc, #144]	; (8000f98 <MX_ADC_Init+0x98>)
 8000f08:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f10:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f30:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f80:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_ADC_Init+0x94>)
 8000f82:	f001 ff45 	bl	8002e10 <HAL_ADC_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f8c:	f000 fb80 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000174 	.word	0x20000174
 8000f98:	40012400 	.word	0x40012400

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <HAL_ADC_MspInit+0x24>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d103      	bne.n	8000fb6 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fb2:	f7ff ff7b 	bl	8000eac <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40012400 	.word	0x40012400

08000fc4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_ADC_MspDeInit+0x24>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d103      	bne.n	8000fde <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fda:	f7ff ff7f 	bl	8000edc <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40012400 	.word	0x40012400

08000fec <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <SYS_InitMeasurement+0x14>)
 8000ff2:	4a04      	ldr	r2, [pc, #16]	; (8001004 <SYS_InitMeasurement+0x18>)
 8000ff4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000174 	.word	0x20000174
 8001004:	40012400 	.word	0x40012400

08001008 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001016:	4813      	ldr	r0, [pc, #76]	; (8001064 <SYS_GetBatteryLevel+0x5c>)
 8001018:	f000 f82a 	bl	8001070 <ADC_ReadChannels>
 800101c:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	80fb      	strh	r3, [r7, #6]
 8001028:	e016      	b.n	8001058 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <SYS_GetBatteryLevel+0x60>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001032:	4293      	cmp	r3, r2
 8001034:	d00b      	beq.n	800104e <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <SYS_GetBatteryLevel+0x60>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001040:	fb03 f202 	mul.w	r2, r3, r2
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	80fb      	strh	r3, [r7, #6]
 800104c:	e004      	b.n	8001058 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <SYS_GetBatteryLevel+0x64>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001058:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	b4002000 	.word	0xb4002000
 8001068:	1fff75aa 	.word	0x1fff75aa
 800106c:	004c08d8 	.word	0x004c08d8

08001070 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001088:	f7ff ff3a 	bl	8000f00 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <ADC_ReadChannels+0x88>)
 800108e:	f002 fcee 	bl	8003a6e <HAL_ADCEx_Calibration_Start>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001098:	f000 fafa 	bl	8001690 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	4619      	mov	r1, r3
 80010ae:	4812      	ldr	r0, [pc, #72]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010b0:	f002 f9fa 	bl	80034a8 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010ba:	f000 fae9 	bl	8001690 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010be:	480e      	ldr	r0, [pc, #56]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010c0:	f002 f8d6 	bl	8003270 <HAL_ADC_Start>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010ca:	f000 fae1 	bl	8001690 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010ce:	f04f 31ff 	mov.w	r1, #4294967295
 80010d2:	4809      	ldr	r0, [pc, #36]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010d4:	f002 f944 	bl	8003360 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010d8:	4807      	ldr	r0, [pc, #28]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010da:	f002 f90f 	bl	80032fc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010de:	4806      	ldr	r0, [pc, #24]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010e0:	f002 f9d5 	bl	800348e <HAL_ADC_GetValue>
 80010e4:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010e6:	4804      	ldr	r0, [pc, #16]	; (80010f8 <ADC_ReadChannels+0x88>)
 80010e8:	f002 f846 	bl	8003178 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000174 	.word	0x20000174

080010fc <LL_AHB1_GRP1_EnableClock>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800110a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4313      	orrs	r3, r2
 8001112:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001120:	68fb      	ldr	r3, [r7, #12]
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001130:	2004      	movs	r0, #4
 8001132:	f7ff ffe3 	bl	80010fc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ffe0 	bl	80010fc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2102      	movs	r1, #2
 8001140:	200b      	movs	r0, #11
 8001142:	f002 fe3a 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001146:	200b      	movs	r0, #11
 8001148:	f002 fe51 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001156:	691b      	ldr	r3, [r3, #16]
 8001158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001160:	d101      	bne.n	8001166 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001166:	2300      	movs	r3, #0
#endif
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	58004000 	.word	0x58004000

08001174 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <FLASH_IF_Write+0x174>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0299      	lsls	r1, r3, #10
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <FLASH_IF_Write+0x178>)
 8001194:	400b      	ands	r3, r1
 8001196:	fbb2 f1f3 	udiv	r1, r2, r3
 800119a:	fb01 f303 	mul.w	r3, r1, r3
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	0adb      	lsrs	r3, r3, #11
 80011a2:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80011ae:	3b01      	subs	r3, #1
 80011b0:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <FLASH_IF_Write+0x174>)
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	0291      	lsls	r1, r2, #10
 80011b6:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <FLASH_IF_Write+0x178>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80011be:	fb01 f202 	mul.w	r2, r1, r2
 80011c2:	1a9b      	subs	r3, r3, r2
 80011c4:	0adb      	lsrs	r3, r3, #11
 80011c6:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <FLASH_IF_Write+0x7a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <FLASH_IF_Write+0x7a>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80011ee:	f06f 0304 	mvn.w	r3, #4
 80011f2:	e074      	b.n	80012de <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80011f4:	4b3e      	ldr	r3, [pc, #248]	; (80012f0 <FLASH_IF_Write+0x17c>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da02      	bge.n	8001202 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80011fc:	f06f 0303 	mvn.w	r3, #3
 8001200:	e06d      	b.n	80012de <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	429a      	cmp	r2, r3
 8001208:	d005      	beq.n	8001216 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001210:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e05b      	b.n	80012d4 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f8f8 	bl	8001416 <FLASH_IF_IsEmpty>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d037      	beq.n	800129c <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001232:	f06f 0304 	mvn.w	r3, #4
 8001236:	e052      	b.n	80012de <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800123e:	02db      	lsls	r3, r3, #11
 8001240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001244:	4619      	mov	r1, r3
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f01a faec 	bl	801b824 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	4413      	add	r3, r2
 8001256:	6a39      	ldr	r1, [r7, #32]
 8001258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125a:	b292      	uxth	r2, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f01a fae1 	bl	801b824 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001262:	2200      	movs	r2, #0
 8001264:	2101      	movs	r1, #1
 8001266:	69f8      	ldr	r0, [r7, #28]
 8001268:	f000 f865 	bl	8001336 <FLASH_IF_EraseByPages>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 8001272:	f06f 0301 	mvn.w	r3, #1
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 8001278:	e030      	b.n	80012dc <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001280:	02db      	lsls	r3, r3, #11
 8001282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f88a 	bl	80013a2 <FLASH_IF_Write_Buffer>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d010      	beq.n	80012b6 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001294:	f06f 0302 	mvn.w	r3, #2
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 800129a:	e01f      	b.n	80012dc <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012a0:	4619      	mov	r1, r3
 80012a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012a4:	f000 f87d 	bl	80013a2 <FLASH_IF_Write_Buffer>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80012ae:	f06f 0302 	mvn.w	r3, #2
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80012b4:	e012      	b.n	80012dc <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ba:	4413      	add	r3, r2
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80012be:	6a3a      	ldr	r2, [r7, #32]
 80012c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c2:	4413      	add	r3, r2
 80012c4:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3301      	adds	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	69fa      	ldr	r2, [r7, #28]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d99f      	bls.n	800121c <FLASH_IF_Write+0xa8>
  }

  return status;
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	1fff75e0 	.word	0x1fff75e0
 80012ec:	03fffc00 	.word	0x03fffc00
 80012f0:	58004000 	.word	0x58004000

080012f4 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001300:	e00b      	b.n	800131a <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001302:	bf00      	nop
 8001304:	f7ff ff24 	bl	8001150 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1fa      	bne.n	8001304 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 800130e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	2001      	movs	r0, #1
 8001316:	f003 f971 	bl	80045fc <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001324:	4299      	cmp	r1, r3
 8001326:	bf08      	it	eq
 8001328:	4290      	cmpeq	r0, r2
 800132a:	d1ea      	bne.n	8001302 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 800132c:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b08a      	sub	sp, #40	; 0x28
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	460b      	mov	r3, r1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001344:	2302      	movs	r3, #2
 8001346:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 800134c:	897b      	ldrh	r3, [r7, #10]
 800134e:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d008      	beq.n	8001368 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	4618      	mov	r0, r3
 800135c:	f003 faec 	bl	8004938 <HAL_FLASHEx_Erase_IT>
 8001360:	4603      	mov	r3, r0
 8001362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001366:	e00a      	b.n	800137e <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001368:	f107 0214 	add.w	r2, r7, #20
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f003 fa88 	bl	8004888 <HAL_FLASHEx_Erase>
 8001378:	4603      	mov	r3, r0
 800137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800137e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <FLASH_IF_EraseByPages+0x62>
 8001386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800138a:	2b02      	cmp	r3, #2
 800138c:	d101      	bne.n	8001392 <FLASH_IF_EraseByPages+0x5c>
 800138e:	2301      	movs	r3, #1
 8001390:	e003      	b.n	800139a <FLASH_IF_EraseByPages+0x64>
 8001392:	f06f 0301 	mvn.w	r3, #1
 8001396:	e000      	b.n	800139a <FLASH_IF_EraseByPages+0x64>
 8001398:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 800139a:	4618      	mov	r0, r3
 800139c:	3728      	adds	r7, #40	; 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b08a      	sub	sp, #40	; 0x28
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e020      	b.n	80013fe <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2208      	movs	r2, #8
 80013c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f01a fa2d 	bl	801b824 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d2:	bf08      	it	eq
 80013d4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013d8:	d005      	beq.n	80013e6 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80013da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff ff88 	bl	80012f4 <FLASH_IF_Write64>
 80013e4:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3308      	adds	r3, #8
 80013ea:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	3308      	adds	r3, #8
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 80013f2:	6a3b      	ldr	r3, [r7, #32]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d108      	bne.n	800140a <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3301      	adds	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	69fa      	ldr	r2, [r7, #28]
 8001404:	429a      	cmp	r2, r3
 8001406:	d3d9      	bcc.n	80013bc <FLASH_IF_Write_Buffer+0x1a>
 8001408:	e000      	b.n	800140c <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800140a:	bf00      	nop
    }
  }

  return status;
 800140c:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 800140e:	4618      	mov	r0, r3
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001416:	b480      	push	{r7}
 8001418:	b085      	sub	sp, #20
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
 800141e:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001420:	e00a      	b.n	8001438 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2bff      	cmp	r3, #255	; 0xff
 800142c:	d001      	beq.n	8001432 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800142e:	2301      	movs	r3, #1
 8001430:	e039      	b.n	80014a6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1ef      	bne.n	8001422 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e010      	b.n	800146e <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f103 0208 	add.w	r2, r3, #8
 8001452:	60fa      	str	r2, [r7, #12]
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	bf08      	it	eq
 800145e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001462:	d001      	beq.n	8001468 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001464:	2301      	movs	r3, #1
 8001466:	e01e      	b.n	80014a6 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3301      	adds	r3, #1
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3e9      	bcc.n	800144c <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001486:	e00a      	b.n	800149e <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	607a      	str	r2, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2bff      	cmp	r3, #255	; 0xff
 8001492:	d001      	beq.n	8001498 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001494:	2301      	movs	r3, #1
 8001496:	e006      	b.n	80014a6 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	3b01      	subs	r3, #1
 800149c:	603b      	str	r3, [r7, #0]
  while (size != 0)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f1      	bne.n	8001488 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80014a4:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <LL_AHB2_GRP1_EnableClock>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4013      	ands	r3, r2
 80014d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014d4:	68fb      	ldr	r3, [r7, #12]
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f4:	2004      	movs	r0, #4
 80014f6:	f7ff ffdb 	bl	80014b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2002      	movs	r0, #2
 80014fc:	f7ff ffd8 	bl	80014b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff ffd5 	bl	80014b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <MX_GPIO_Init+0xb4>)
 800150e:	f003 fd05 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	2120      	movs	r1, #32
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <MX_GPIO_Init+0xb4>)
 8001518:	f003 fd00 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2121      	movs	r1, #33	; 0x21
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f003 fcfa 	bl	8004f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001528:	f44f 6387 	mov.w	r3, #1080	; 0x438
 800152c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4815      	ldr	r0, [pc, #84]	; (8001594 <MX_GPIO_Init+0xb4>)
 8001540:	f003 fabe 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL2_Pin;
 8001544:	2321      	movs	r3, #33	; 0x21
 8001546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f003 fab0 	bl	8004ac0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001564:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001566:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800156a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156c:	2301      	movs	r3, #1
 800156e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4807      	ldr	r0, [pc, #28]	; (8001594 <MX_GPIO_Init+0xb4>)
 8001576:	f003 faa3 	bl	8004ac0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2029      	movs	r0, #41	; 0x29
 8001580:	f002 fc1b 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001584:	2029      	movs	r0, #41	; 0x29
 8001586:	f002 fc32 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	48000400 	.word	0x48000400

08001598 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a8:	f023 0218 	bic.w	r2, r3, #24
 80015ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f001 fa35 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f807 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f7ff ff87 	bl	80014e0 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015d2:	f008 fa3b 	bl	8009a4c <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80015d6:	f008 fa41 	bl	8009a5c <MX_LoRaWAN_Process>
 80015da:	e7fc      	b.n	80015d6 <main+0x14>

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b09a      	sub	sp, #104	; 0x68
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	2248      	movs	r2, #72	; 0x48
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f01b fc06 	bl	801cdfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
 8001600:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001602:	f003 fcbb 	bl	8004f7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001606:	2000      	movs	r0, #0
 8001608:	f7ff ffc6 	bl	8001598 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800160c:	4b1f      	ldr	r3, [pc, #124]	; (800168c <SystemClock_Config+0xb0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <SystemClock_Config+0xb0>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <SystemClock_Config+0xb0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001628:	2324      	movs	r3, #36	; 0x24
 800162a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800162c:	2381      	movs	r3, #129	; 0x81
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001634:	2300      	movs	r3, #0
 8001636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001638:	23b0      	movs	r3, #176	; 0xb0
 800163a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800163c:	2300      	movs	r3, #0
 800163e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001640:	f107 0320 	add.w	r3, r7, #32
 8001644:	4618      	mov	r0, r3
 8001646:	f003 ffe5 	bl	8005614 <HAL_RCC_OscConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001650:	f000 f81e 	bl	8001690 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001654:	234f      	movs	r3, #79	; 0x4f
 8001656:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	2102      	movs	r1, #2
 8001672:	4618      	mov	r0, r3
 8001674:	f004 fb6a 	bl	8005d4c <HAL_RCC_ClockConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800167e:	f000 f807 	bl	8001690 <Error_Handler>
  }
}
 8001682:	bf00      	nop
 8001684:	3768      	adds	r7, #104	; 0x68
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	58000400 	.word	0x58000400

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>

0800169a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <LL_APB1_GRP1_EnableClock>:
{
 80016ba:	b480      	push	{r7}
 80016bc:	b085      	sub	sp, #20
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4013      	ands	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
	...

080016ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	222c      	movs	r2, #44	; 0x2c
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f01b fb7f 	bl	801cdfc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016fe:	4b22      	ldr	r3, [pc, #136]	; (8001788 <MX_RTC_Init+0x9c>)
 8001700:	4a22      	ldr	r2, [pc, #136]	; (800178c <MX_RTC_Init+0xa0>)
 8001702:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001704:	4b20      	ldr	r3, [pc, #128]	; (8001788 <MX_RTC_Init+0x9c>)
 8001706:	221f      	movs	r2, #31
 8001708:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <MX_RTC_Init+0x9c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_RTC_Init+0x9c>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_RTC_Init+0x9c>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_RTC_Init+0x9c>)
 800171e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001722:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_RTC_Init+0x9c>)
 8001726:	2200      	movs	r2, #0
 8001728:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_RTC_Init+0x9c>)
 800172c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_RTC_Init+0x9c>)
 8001734:	f004 ffc6 	bl	80066c4 <HAL_RTC_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800173e:	f7ff ffa7 	bl	8001690 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001742:	4811      	ldr	r0, [pc, #68]	; (8001788 <MX_RTC_Init+0x9c>)
 8001744:	f005 fab4 	bl	8006cb0 <HAL_RTCEx_SetSSRU_IT>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800174e:	f7ff ff9f 	bl	8001690 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800175e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001762:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_RTC_Init+0x9c>)
 8001772:	f005 f821 	bl	80067b8 <HAL_RTC_SetAlarm_IT>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800177c:	f7ff ff88 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200001d8 	.word	0x200001d8
 800178c:	40002800 	.word	0x40002800

08001790 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b090      	sub	sp, #64	; 0x40
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	2238      	movs	r2, #56	; 0x38
 800179e:	2100      	movs	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f01b fb2b 	bl	801cdfc <memset>
  if(rtcHandle->Instance==RTC)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a16      	ldr	r2, [pc, #88]	; (8001804 <HAL_RTC_MspInit+0x74>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d125      	bne.n	80017fc <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f004 fe65 	bl	8006490 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017cc:	f7ff ff60 	bl	8001690 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d0:	f7ff ff63 	bl	800169a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017d8:	f7ff ff6f 	bl	80016ba <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	2002      	movs	r0, #2
 80017e2:	f002 faea 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f002 fb01 	bl	8003dee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	202a      	movs	r0, #42	; 0x2a
 80017f2:	f002 fae2 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017f6:	202a      	movs	r0, #42	; 0x2a
 80017f8:	f002 faf9 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017fc:	bf00      	nop
 80017fe:	3740      	adds	r7, #64	; 0x40
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40002800 	.word	0x40002800

08001808 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800180e:	2201      	movs	r2, #1
 8001810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr
 800181c:	58000400 	.word	0x58000400

08001820 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 800183c:	f001 f91a 	bl	8002a74 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001840:	f7ff ffe2 	bl	8001808 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001844:	2001      	movs	r0, #1
 8001846:	f003 fc2b 	bl	80050a0 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}

0800184e <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001852:	f001 f91d 	bl	8002a90 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001856:	f000 ff9d 	bl	8002794 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001862:	f001 f907 	bl	8002a74 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001866:	2101      	movs	r1, #1
 8001868:	2000      	movs	r0, #0
 800186a:	f003 fb95 	bl	8004f98 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}

08001872 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001876:	f001 f90b 	bl	8002a90 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188e:	e7fe      	b.n	800188e <NMI_Handler+0x4>

08001890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <HardFault_Handler+0x4>

08001896 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <MemManage_Handler+0x4>

0800189c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <BusFault_Handler+0x4>

080018a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <UsageFault_Handler+0x4>

080018a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018de:	f005 fa23 	bl	8006d28 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200001d8 	.word	0x200001d8

080018ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA1_Channel1_IRQHandler+0x10>)
 80018f2:	f002 fd13 	bl	800431c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200002b4 	.word	0x200002b4

08001900 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <USART1_IRQHandler+0x10>)
 8001906:	f006 f86f 	bl	80079e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000224 	.word	0x20000224

08001914 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001918:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800191c:	f003 fb16 	bl	8004f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <RTC_Alarm_IRQHandler+0x10>)
 800192a:	f005 f8ad 	bl	8006a88 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001d8 	.word	0x200001d8

08001938 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <SUBGHZ_Radio_IRQHandler+0x10>)
 800193e:	f005 fd5b 	bl	80073f8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000210 	.word	0x20000210

0800194c <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800195a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4313      	orrs	r3, r2
 8001962:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4013      	ands	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001970:	68fb      	ldr	r3, [r7, #12]
}
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr

0800197c <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_SUBGHZ_Init+0x20>)
 8001982:	2208      	movs	r2, #8
 8001984:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_SUBGHZ_Init+0x20>)
 8001988:	f005 faba 	bl	8006f00 <HAL_SUBGHZ_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001992:	f7ff fe7d 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000210 	.word	0x20000210

080019a0 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019a8:	2001      	movs	r0, #1
 80019aa:	f7ff ffcf 	bl	800194c <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	2032      	movs	r0, #50	; 0x32
 80019b4:	f002 fa01 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019b8:	2032      	movs	r0, #50	; 0x32
 80019ba:	f002 fa18 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80019d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80019f0:	4b02      	ldr	r3, [pc, #8]	; (80019fc <LL_FLASH_GetUDN+0x10>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr
 80019fc:	1fff7580 	.word	0x1fff7580

08001a00 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <LL_FLASH_GetDeviceID+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	b2db      	uxtb	r3, r3
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	1fff7584 	.word	0x1fff7584

08001a18 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <LL_FLASH_GetSTCompanyID+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0a1b      	lsrs	r3, r3, #8
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	1fff7584 	.word	0x1fff7584

08001a30 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff ffc6 	bl	80019c6 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a3a:	f01a fc85 	bl	801c348 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <SystemApp_Init+0x48>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a44:	f000 f988 	bl	8001d58 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a48:	f01a ff0e 	bl	801c868 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a4c:	480b      	ldr	r0, [pc, #44]	; (8001a7c <SystemApp_Init+0x4c>)
 8001a4e:	f01a ffb9 	bl	801c9c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a52:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <SystemApp_Init+0x50>)
 8001a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a58:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f01a ffc0 	bl	801c9e0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001a60:	f7ff fac4 	bl	8000fec <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001a64:	f000 f9fe 	bl	8001e64 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001a68:	f019 fe36 	bl	801b6d8 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	2001      	movs	r0, #1
 8001a70:	f019 fe72 	bl	801b758 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000021c 	.word	0x2000021c
 8001a7c:	08001c49 	.word	0x08001c49
 8001a80:	58004000 	.word	0x58004000

08001a84 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001a88:	f019 fe96 	bl	801b7b8 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001a9a:	f7ff fab5 	bl	8001008 <SYS_GetBatteryLevel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d902      	bls.n	8001ab2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001aac:	23fe      	movs	r3, #254	; 0xfe
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	e014      	b.n	8001adc <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001ab8:	d202      	bcs.n	8001ac0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	71fb      	strb	r3, [r7, #7]
 8001abe:	e00d      	b.n	8001adc <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ac0:	88bb      	ldrh	r3, [r7, #4]
 8001ac2:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4613      	mov	r3, r2
 8001aca:	01db      	lsls	r3, r3, #7
 8001acc:	1a9b      	subs	r3, r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <GetBatteryLevel+0x58>)
 8001ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad8:	09db      	lsrs	r3, r3, #7
 8001ada:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001adc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	1b4e81b5 	.word	0x1b4e81b5

08001aec <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f989 	bl	8001e10 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f80b 	bl	8000b1c <__aeabi_f2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b087      	sub	sp, #28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b22:	f7ff ff63 	bl	80019ec <LL_FLASH_GetUDN>
 8001b26:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2e:	d138      	bne.n	8001ba2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b30:	f000 ffbc 	bl	8002aac <HAL_GetUIDw0>
 8001b34:	4604      	mov	r4, r0
 8001b36:	f000 ffcd 	bl	8002ad4 <HAL_GetUIDw2>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4423      	add	r3, r4
 8001b3e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b40:	f000 ffbe 	bl	8002ac0 <HAL_GetUIDw1>
 8001b44:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	0e1a      	lsrs	r2, r3, #24
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	0c1a      	lsrs	r2, r3, #16
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3306      	adds	r3, #6
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	0a1a      	lsrs	r2, r3, #8
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3305      	adds	r3, #5
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	0e1a      	lsrs	r2, r3, #24
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3303      	adds	r3, #3
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	0c1a      	lsrs	r2, r3, #16
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3302      	adds	r3, #2
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0a1a      	lsrs	r2, r3, #8
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001ba0:	e031      	b.n	8001c06 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	0a1a      	lsrs	r2, r3, #8
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	0c1a      	lsrs	r2, r3, #16
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3305      	adds	r3, #5
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	0e1a      	lsrs	r2, r3, #24
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	b2d2      	uxtb	r2, r2
 8001bce:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001bd0:	f7ff ff16 	bl	8001a00 <LL_FLASH_GetDeviceID>
 8001bd4:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3303      	adds	r3, #3
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001be0:	f7ff ff1a 	bl	8001a18 <LL_FLASH_GetSTCompanyID>
 8001be4:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3302      	adds	r3, #2
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	b2d2      	uxtb	r2, r2
 8001bee:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	0a1a      	lsrs	r2, r3, #8
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	0c1b      	lsrs	r3, r3, #16
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	701a      	strb	r2, [r3, #0]
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd90      	pop	{r4, r7, pc}

08001c0e <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c0e:	b590      	push	{r4, r7, lr}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c18:	f7ff fee8 	bl	80019ec <LL_FLASH_GetUDN>
 8001c1c:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d10b      	bne.n	8001c3e <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c26:	f000 ff41 	bl	8002aac <HAL_GetUIDw0>
 8001c2a:	4604      	mov	r4, r0
 8001c2c:	f000 ff48 	bl	8002ac0 <HAL_GetUIDw1>
 8001c30:	4603      	mov	r3, r0
 8001c32:	405c      	eors	r4, r3
 8001c34:	f000 ff4e 	bl	8002ad4 <HAL_GetUIDw2>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4063      	eors	r3, r4
 8001c3c:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c3e:	687b      	ldr	r3, [r7, #4]

}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd90      	pop	{r4, r7, pc}

08001c48 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c52:	f107 0308 	add.w	r3, r7, #8
 8001c56:	4618      	mov	r0, r3
 8001c58:	f019 febe 	bl	801b9d8 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	4a07      	ldr	r2, [pc, #28]	; (8001c84 <TimestampNow+0x3c>)
 8001c66:	2110      	movs	r1, #16
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f81d 	bl	8001ca8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7fe fa82 	bl	8000178 <strlen>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	0801cf28 	.word	0x0801cf28

08001c88 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f019 fd32 	bl	801b6f8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f019 fd2a 	bl	801b6f8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ca8:	b40c      	push	{r2, r3}
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cba:	6839      	ldr	r1, [r7, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f01a f85b 	bl	801bd7c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cd0:	b002      	add	sp, #8
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_GetTick+0x24>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001cfa:	f000 f97f 	bl	8001ffc <TIMER_IF_GetTimerValue>
 8001cfe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000021c 	.word	0x2000021c

08001d10 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f9f5 	bl	800210a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <LL_AHB2_GRP1_EnableClock>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001d5e:	f000 fec3 	bl	8002ae8 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001d62:	f000 fec7 	bl	8002af4 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001d66:	f000 fecb 	bl	8002b00 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff ffcf 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	f7ff ffcc 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001d90:	2002      	movs	r0, #2
 8001d92:	f7ff ffc9 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7ff ffc6 	bl	8001d28 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da8:	f002 fe8a 	bl	8004ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	4619      	mov	r1, r3
 8001db6:	4815      	ldr	r0, [pc, #84]	; (8001e0c <DBG_Init+0xb4>)
 8001db8:	f002 fe82 	bl	8004ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <DBG_Init+0xb4>)
 8001dc6:	f002 fe7b 	bl	8004ac0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001dca:	2310      	movs	r3, #16
 8001dcc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480e      	ldr	r0, [pc, #56]	; (8001e0c <DBG_Init+0xb4>)
 8001dd4:	f002 fe74 	bl	8004ac0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2101      	movs	r1, #1
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de0:	f003 f89c 	bl	8004f1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dea:	4808      	ldr	r0, [pc, #32]	; (8001e0c <DBG_Init+0xb4>)
 8001dec:	f003 f896 	bl	8004f1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2108      	movs	r1, #8
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <DBG_Init+0xb4>)
 8001df6:	f003 f891 	bl	8004f1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2110      	movs	r1, #16
 8001dfe:	4803      	ldr	r0, [pc, #12]	; (8001e0c <DBG_Init+0xb4>)
 8001e00:	f003 f88c 	bl	8004f1c <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e04:	bf00      	nop
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	48000400 	.word	0x48000400

08001e10 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <EnvSensors_Read+0x40>)
 8001e1a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <EnvSensors_Read+0x44>)
 8001e1e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e20:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <EnvSensors_Read+0x48>)
 8001e22:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <EnvSensors_Read+0x4c>)
 8001e3a:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a08      	ldr	r2, [pc, #32]	; (8001e60 <EnvSensors_Read+0x50>)
 8001e40:	611a      	str	r2, [r3, #16]

  return 0;
 8001e42:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	42480000 	.word	0x42480000
 8001e54:	41900000 	.word	0x41900000
 8001e58:	447a0000 	.word	0x447a0000
 8001e5c:	003e090d 	.word	0x003e090d
 8001e60:	000503ab 	.word	0x000503ab

08001e64 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e6e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <TIMER_IF_Init+0x5c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	f083 0301 	eor.w	r3, r3, #1
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d01b      	beq.n	8001eec <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <TIMER_IF_Init+0x60>)
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001ebc:	f7ff fc16 	bl	80016ec <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001ec0:	f000 f856 	bl	8001f70 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ec8:	480c      	ldr	r0, [pc, #48]	; (8001efc <TIMER_IF_Init+0x60>)
 8001eca:	f004 fd81 	bl	80069d0 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <TIMER_IF_Init+0x60>)
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <TIMER_IF_Init+0x60>)
 8001ed8:	f004 feb8 	bl	8006c4c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f000 f9d3 	bl	8002288 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001ee2:	f000 f85f 	bl	8001fa4 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001ee6:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <TIMER_IF_Init+0x5c>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001eec:	79fb      	ldrb	r3, [r7, #7]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000021d 	.word	0x2000021d
 8001efc:	200001d8 	.word	0x200001d8

08001f00 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	222c      	movs	r2, #44	; 0x2c
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f01a ff70 	bl	801cdfc <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f1c:	f000 f828 	bl	8001f70 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <TIMER_IF_StartTimer+0x68>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f38:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f3c:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <TIMER_IF_StartTimer+0x6c>)
 8001f4e:	f004 fc33 	bl	80067b8 <HAL_RTC_SetAlarm_IT>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f58:	f7ff fb9a 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3738      	adds	r7, #56	; 0x38
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000220 	.word	0x20000220
 8001f6c:	200001d8 	.word	0x200001d8

08001f70 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <TIMER_IF_StopTimer+0x2c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <TIMER_IF_StopTimer+0x30>)
 8001f86:	f004 fd23 	bl	80069d0 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <TIMER_IF_StopTimer+0x30>)
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001f92:	79fb      	ldrb	r3, [r7, #7]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40002800 	.word	0x40002800
 8001fa0:	200001d8 	.word	0x200001d8

08001fa4 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001fa8:	f000 f98e 	bl	80022c8 <GetTimerTicks>
 8001fac:	4603      	mov	r3, r0
 8001fae:	4a03      	ldr	r2, [pc, #12]	; (8001fbc <TIMER_IF_SetTimerContext+0x18>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fb2:	4b02      	ldr	r3, [pc, #8]	; (8001fbc <TIMER_IF_SetTimerContext+0x18>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000220 	.word	0x20000220

08001fc0 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <TIMER_IF_GetTimerContext+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bc80      	pop	{r7}
 8001fce:	4770      	bx	lr
 8001fd0:	20000220 	.word	0x20000220

08001fd4 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fde:	f000 f973 	bl	80022c8 <GetTimerTicks>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000220 	.word	0x20000220

08001ffc <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <TIMER_IF_GetTimerValue+0x24>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 800200e:	f000 f95b 	bl	80022c8 <GetTimerTicks>
 8002012:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000021d 	.word	0x2000021d

08002024 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 800202e:	2303      	movs	r3, #3
 8002030:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 800203e:	b5b0      	push	{r4, r5, r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002046:	2100      	movs	r1, #0
 8002048:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	2000      	movs	r0, #0
 800204e:	460a      	mov	r2, r1
 8002050:	4603      	mov	r3, r0
 8002052:	0d95      	lsrs	r5, r2, #22
 8002054:	0294      	lsls	r4, r2, #10
 8002056:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	4620      	mov	r0, r4
 8002060:	4629      	mov	r1, r5
 8002062:	f7fe fda1 	bl	8000ba8 <__aeabi_uldivmod>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4613      	mov	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bdb0      	pop	{r4, r5, r7, pc}

08002078 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002078:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002082:	2100      	movs	r1, #0
 8002084:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	2000      	movs	r0, #0
 800208a:	460c      	mov	r4, r1
 800208c:	4605      	mov	r5, r0
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f04f 0a00 	mov.w	sl, #0
 8002096:	f04f 0b00 	mov.w	fp, #0
 800209a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800209e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 80020a2:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 80020a6:	4650      	mov	r0, sl
 80020a8:	4659      	mov	r1, fp
 80020aa:	1b02      	subs	r2, r0, r4
 80020ac:	eb61 0305 	sbc.w	r3, r1, r5
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0099      	lsls	r1, r3, #2
 80020ba:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020be:	0090      	lsls	r0, r2, #2
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	eb12 0804 	adds.w	r8, r2, r4
 80020c8:	eb43 0905 	adc.w	r9, r3, r5
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020e0:	4690      	mov	r8, r2
 80020e2:	4699      	mov	r9, r3
 80020e4:	4640      	mov	r0, r8
 80020e6:	4649      	mov	r1, r9
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	0a82      	lsrs	r2, r0, #10
 80020f2:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80020f6:	0a8b      	lsrs	r3, r1, #10
 80020f8:	4613      	mov	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002108:	4770      	bx	lr

0800210a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff93 	bl	800203e <TIMER_IF_Convert_ms2Tick>
 8002118:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 800211a:	f000 f8d5 	bl	80022c8 <GetTimerTicks>
 800211e:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002120:	e000      	b.n	8002124 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002122:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002124:	f000 f8d0 	bl	80022c8 <GetTimerTicks>
 8002128:	4602      	mov	r2, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	429a      	cmp	r2, r3
 8002132:	d8f6      	bhi.n	8002122 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002146:	f01a fa4d 	bl	801c5e4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800215a:	f000 f8a5 	bl	80022a8 <TIMER_IF_BkUp_Read_MSBticks>
 800215e:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f88f 	bl	8002288 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002172:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002180:	f000 f8a2 	bl	80022c8 <GetTimerTicks>
 8002184:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002186:	f000 f88f 	bl	80022a8 <TIMER_IF_BkUp_Read_MSBticks>
 800218a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2200      	movs	r2, #0
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	60fa      	str	r2, [r7, #12]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	000b      	movs	r3, r1
 80021a0:	2200      	movs	r2, #0
 80021a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021a4:	2000      	movs	r0, #0
 80021a6:	460c      	mov	r4, r1
 80021a8:	4605      	mov	r5, r0
 80021aa:	eb12 0804 	adds.w	r8, r2, r4
 80021ae:	eb43 0905 	adc.w	r9, r3, r5
 80021b2:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80021b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	0a82      	lsrs	r2, r0, #10
 80021c4:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021c8:	0a8b      	lsrs	r3, r1, #10
 80021ca:	4613      	mov	r3, r2
 80021cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2200      	movs	r2, #0
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80021dc:	f04f 0b00 	mov.w	fp, #0
 80021e0:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff46 	bl	8002078 <TIMER_IF_Convert_Tick2ms>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80021f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3730      	adds	r7, #48	; 0x30
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002200 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	2100      	movs	r1, #0
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800220e:	f004 fdaf 	bl	8006d70 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	200001d8 	.word	0x200001d8

08002220 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	2101      	movs	r1, #1
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800222e:	f004 fd9f 	bl	8006d70 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200001d8 	.word	0x200001d8

08002240 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800224a:	2100      	movs	r1, #0
 800224c:	4804      	ldr	r0, [pc, #16]	; (8002260 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800224e:	f004 fda7 	bl	8006da0 <HAL_RTCEx_BKUPRead>
 8002252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200001d8 	.word	0x200001d8

08002264 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800226e:	2101      	movs	r1, #1
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002272:	f004 fd95 	bl	8006da0 <HAL_RTCEx_BKUPRead>
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002278:	687b      	ldr	r3, [r7, #4]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200001d8 	.word	0x200001d8

08002288 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	2102      	movs	r1, #2
 8002294:	4803      	ldr	r0, [pc, #12]	; (80022a4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002296:	f004 fd6b 	bl	8006d70 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200001d8 	.word	0x200001d8

080022a8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022ae:	2102      	movs	r1, #2
 80022b0:	4804      	ldr	r0, [pc, #16]	; (80022c4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80022b2:	f004 fd75 	bl	8006da0 <HAL_RTCEx_BKUPRead>
 80022b6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022b8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200001d8 	.word	0x200001d8

080022c8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022ce:	480b      	ldr	r0, [pc, #44]	; (80022fc <GetTimerTicks+0x34>)
 80022d0:	f7ff fdd9 	bl	8001e86 <LL_RTC_TIME_GetSubSecond>
 80022d4:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022d6:	e003      	b.n	80022e0 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <GetTimerTicks+0x34>)
 80022da:	f7ff fdd4 	bl	8001e86 <LL_RTC_TIME_GetSubSecond>
 80022de:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <GetTimerTicks+0x34>)
 80022e2:	f7ff fdd0 	bl	8001e86 <LL_RTC_TIME_GetSubSecond>
 80022e6:	4602      	mov	r2, r0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d1f4      	bne.n	80022d8 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40002800 	.word	0x40002800

08002300 <LL_AHB2_GRP1_EnableClock>:
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800230e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4013      	ands	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <LL_APB1_GRP1_EnableClock>:
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800233e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4013      	ands	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002354:	68fb      	ldr	r3, [r7, #12]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <LL_APB1_GRP1_DisableClock>:
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	43db      	mvns	r3, r3
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002376:	4013      	ands	r3, r2
 8002378:	658b      	str	r3, [r1, #88]	; 0x58
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <LL_APB2_GRP1_EnableClock>:
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4313      	orrs	r3, r2
 800239a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4013      	ands	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <LL_APB2_GRP1_DisableClock>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ca:	4013      	ands	r3, r2
 80023cc:	660b      	str	r3, [r1, #96]	; 0x60
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023dc:	4b22      	ldr	r3, [pc, #136]	; (8002468 <MX_USART1_UART_Init+0x90>)
 80023de:	4a23      	ldr	r2, [pc, #140]	; (800246c <MX_USART1_UART_Init+0x94>)
 80023e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <MX_USART1_UART_Init+0x90>)
 80023e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <MX_USART1_UART_Init+0x90>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <MX_USART1_UART_Init+0x90>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <MX_USART1_UART_Init+0x90>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023fc:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <MX_USART1_UART_Init+0x90>)
 80023fe:	220c      	movs	r2, #12
 8002400:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002402:	4b19      	ldr	r3, [pc, #100]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002408:	4b17      	ldr	r3, [pc, #92]	; (8002468 <MX_USART1_UART_Init+0x90>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <MX_USART1_UART_Init+0x90>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002420:	4811      	ldr	r0, [pc, #68]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002422:	f005 f9a8 	bl	8007776 <HAL_UART_Init>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800242c:	f7ff f930 	bl	8001690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002430:	2100      	movs	r1, #0
 8002432:	480d      	ldr	r0, [pc, #52]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002434:	f007 fa1f 	bl	8009876 <HAL_UARTEx_SetTxFifoThreshold>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800243e:	f7ff f927 	bl	8001690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002442:	2100      	movs	r1, #0
 8002444:	4808      	ldr	r0, [pc, #32]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002446:	f007 fa54 	bl	80098f2 <HAL_UARTEx_SetRxFifoThreshold>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002450:	f7ff f91e 	bl	8001690 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002454:	4804      	ldr	r0, [pc, #16]	; (8002468 <MX_USART1_UART_Init+0x90>)
 8002456:	f007 f9d3 	bl	8009800 <HAL_UARTEx_EnableFifoMode>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002460:	f7ff f916 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002464:	bf00      	nop
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20000224 	.word	0x20000224
 800246c:	40013800 	.word	0x40013800

08002470 <HAL_UART_MspInit>:
  /* USER CODE END USART2_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b096      	sub	sp, #88	; 0x58
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002478:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2238      	movs	r2, #56	; 0x38
 800248e:	2100      	movs	r1, #0
 8002490:	4618      	mov	r0, r3
 8002492:	f01a fcb3 	bl	801cdfc <memset>
  if(uartHandle->Instance==USART1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_UART_MspInit+0x140>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d157      	bne.n	8002550 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024a4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80024a8:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024aa:	f107 030c 	add.w	r3, r7, #12
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 ffee 	bl	8006490 <HAL_RCCEx_PeriphCLKConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80024ba:	f7ff f8e9 	bl	8001690 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024be:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024c2:	f7ff ff5f 	bl	8002384 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7ff ff1a 	bl	8002300 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80024cc:	23c0      	movs	r3, #192	; 0xc0
 80024ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d0:	2302      	movs	r3, #2
 80024d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d8:	2303      	movs	r3, #3
 80024da:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024dc:	2307      	movs	r3, #7
 80024de:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80024e4:	4619      	mov	r1, r3
 80024e6:	4833      	ldr	r0, [pc, #204]	; (80025b4 <HAL_UART_MspInit+0x144>)
 80024e8:	f002 faea 	bl	8004ac0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80024ec:	4b32      	ldr	r3, [pc, #200]	; (80025b8 <HAL_UART_MspInit+0x148>)
 80024ee:	4a33      	ldr	r2, [pc, #204]	; (80025bc <HAL_UART_MspInit+0x14c>)
 80024f0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_UART_MspInit+0x148>)
 80024f4:	2212      	movs	r2, #18
 80024f6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024f8:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <HAL_UART_MspInit+0x148>)
 80024fa:	2210      	movs	r2, #16
 80024fc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	; (80025b8 <HAL_UART_MspInit+0x148>)
 8002500:	2200      	movs	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002504:	4b2c      	ldr	r3, [pc, #176]	; (80025b8 <HAL_UART_MspInit+0x148>)
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800250a:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_UART_MspInit+0x148>)
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <HAL_UART_MspInit+0x148>)
 8002512:	2200      	movs	r2, #0
 8002514:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002516:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_UART_MspInit+0x148>)
 8002518:	2200      	movs	r2, #0
 800251a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <HAL_UART_MspInit+0x148>)
 800251e:	2200      	movs	r2, #0
 8002520:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002522:	4825      	ldr	r0, [pc, #148]	; (80025b8 <HAL_UART_MspInit+0x148>)
 8002524:	f001 fc80 	bl	8003e28 <HAL_DMA_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800252e:	f7ff f8af 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <HAL_UART_MspInit+0x148>)
 8002536:	679a      	str	r2, [r3, #120]	; 0x78
 8002538:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_UART_MspInit+0x148>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800253e:	2200      	movs	r2, #0
 8002540:	2102      	movs	r1, #2
 8002542:	2024      	movs	r0, #36	; 0x24
 8002544:	f001 fc39 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002548:	2024      	movs	r0, #36	; 0x24
 800254a:	f001 fc50 	bl	8003dee <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800254e:	e02b      	b.n	80025a8 <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <HAL_UART_MspInit+0x150>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d126      	bne.n	80025a8 <HAL_UART_MspInit+0x138>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800255a:	2302      	movs	r3, #2
 800255c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800255e:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002562:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002564:	f107 030c 	add.w	r3, r7, #12
 8002568:	4618      	mov	r0, r3
 800256a:	f003 ff91 	bl	8006490 <HAL_RCCEx_PeriphCLKConfig>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8002574:	f7ff f88c 	bl	8001690 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002578:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800257c:	f7ff fed8 	bl	8002330 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002580:	2001      	movs	r0, #1
 8002582:	f7ff febd 	bl	8002300 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002586:	230c      	movs	r3, #12
 8002588:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258a:	2302      	movs	r3, #2
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002596:	2307      	movs	r3, #7
 8002598:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f002 fa8c 	bl	8004ac0 <HAL_GPIO_Init>
}
 80025a8:	bf00      	nop
 80025aa:	3758      	adds	r7, #88	; 0x58
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40013800 	.word	0x40013800
 80025b4:	48000400 	.word	0x48000400
 80025b8:	200002b4 	.word	0x200002b4
 80025bc:	40020008 	.word	0x40020008
 80025c0:	40004400 	.word	0x40004400

080025c4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_UART_MspDeInit+0x58>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d110      	bne.n	80025f8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80025d6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025da:	f7ff feeb 	bl	80023b4 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 80025de:	21c0      	movs	r1, #192	; 0xc0
 80025e0:	480f      	ldr	r0, [pc, #60]	; (8002620 <HAL_UART_MspDeInit+0x5c>)
 80025e2:	f002 fbcd 	bl	8004d80 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ea:	4618      	mov	r0, r3
 80025ec:	f001 fcc4 	bl	8003f78 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80025f0:	2024      	movs	r0, #36	; 0x24
 80025f2:	f001 fc0a 	bl	8003e0a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80025f6:	e00d      	b.n	8002614 <HAL_UART_MspDeInit+0x50>
  else if(uartHandle->Instance==USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a09      	ldr	r2, [pc, #36]	; (8002624 <HAL_UART_MspDeInit+0x60>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002602:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002606:	f7ff feab 	bl	8002360 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 800260a:	210c      	movs	r1, #12
 800260c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002610:	f002 fbb6 	bl	8004d80 <HAL_GPIO_DeInit>
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40013800 	.word	0x40013800
 8002620:	48000400 	.word	0x48000400
 8002624:	40004400 	.word	0x40004400

08002628 <LL_APB2_GRP1_ForceReset>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4313      	orrs	r3, r2
 800263e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <LL_APB2_GRP1_ReleaseReset>:
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	43db      	mvns	r3, r3
 800265c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002660:	4013      	ands	r3, r2
 8002662:	640b      	str	r3, [r1, #64]	; 0x40
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr
	...

08002670 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <LL_EXTI_EnableIT_0_31+0x24>)
 800267a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800267e:	4905      	ldr	r1, [pc, #20]	; (8002694 <LL_EXTI_EnableIT_0_31+0x24>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	58000800 	.word	0x58000800

08002698 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80026a0:	4a07      	ldr	r2, [pc, #28]	; (80026c0 <vcom_Init+0x28>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80026a6:	f7fe fd41 	bl	800112c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80026aa:	f7ff fe95 	bl	80023d8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80026ae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026b2:	f7ff ffdd 	bl	8002670 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80026b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000318 	.word	0x20000318

080026c4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80026c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026cc:	f7ff ffac 	bl	8002628 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80026d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026d4:	f7ff ffb9 	bl	800264a <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 80026d8:	4804      	ldr	r0, [pc, #16]	; (80026ec <vcom_DeInit+0x28>)
 80026da:	f7ff ff73 	bl	80025c4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80026de:	200f      	movs	r0, #15
 80026e0:	f001 fb93 	bl	8003e0a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80026e4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000224 	.word	0x20000224

080026f0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80026fc:	887b      	ldrh	r3, [r7, #2]
 80026fe:	461a      	mov	r2, r3
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4804      	ldr	r0, [pc, #16]	; (8002714 <vcom_Trace_DMA+0x24>)
 8002704:	f005 f8de 	bl	80078c4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002708:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000224 	.word	0x20000224

08002718 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <vcom_ReceiveInit+0x70>)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002726:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800272a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002734:	4815      	ldr	r0, [pc, #84]	; (800278c <vcom_ReceiveInit+0x74>)
 8002736:	f006 ffd6 	bl	80096e6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 800273a:	bf00      	nop
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <vcom_ReceiveInit+0x74>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274a:	d0f7      	beq.n	800273c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 800274c:	bf00      	nop
 800274e:	4b0f      	ldr	r3, [pc, #60]	; (800278c <vcom_ReceiveInit+0x74>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275c:	d1f7      	bne.n	800274e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <vcom_ReceiveInit+0x74>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <vcom_ReceiveInit+0x74>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800276c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <vcom_ReceiveInit+0x74>)
 8002770:	f007 f814 	bl	800979c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8002774:	2201      	movs	r2, #1
 8002776:	4906      	ldr	r1, [pc, #24]	; (8002790 <vcom_ReceiveInit+0x78>)
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <vcom_ReceiveInit+0x74>)
 800277a:	f005 f84d 	bl	8007818 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800277e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	2000031c 	.word	0x2000031c
 800278c:	20000224 	.word	0x20000224
 8002790:	20000314 	.word	0x20000314

08002794 <vcom_Resume>:

void vcom_Resume(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <vcom_Resume+0x28>)
 800279a:	f004 ffec 	bl	8007776 <HAL_UART_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80027a4:	f7fe ff74 	bl	8001690 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <vcom_Resume+0x2c>)
 80027aa:	f001 fb3d 	bl	8003e28 <HAL_DMA_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80027b4:	f7fe ff6c 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	20000224 	.word	0x20000224
 80027c0:	200002b4 	.word	0x200002b4

080027c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a05      	ldr	r2, [pc, #20]	; (80027e8 <HAL_UART_TxCpltCallback+0x24>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d103      	bne.n	80027de <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_UART_TxCpltCallback+0x28>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2000      	movs	r0, #0
 80027dc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80027de:	bf00      	nop
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40013800 	.word	0x40013800
 80027ec:	20000318 	.word	0x20000318

080027f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <HAL_UART_RxCpltCallback+0x44>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d113      	bne.n	800282a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_UART_RxCpltCallback+0x48>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <HAL_UART_RxCpltCallback+0x30>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002814:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_UART_RxCpltCallback+0x48>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	2101      	movs	r1, #1
 800281c:	4807      	ldr	r0, [pc, #28]	; (800283c <HAL_UART_RxCpltCallback+0x4c>)
 800281e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002820:	2201      	movs	r2, #1
 8002822:	4906      	ldr	r1, [pc, #24]	; (800283c <HAL_UART_RxCpltCallback+0x4c>)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f004 fff7 	bl	8007818 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40013800 	.word	0x40013800
 8002838:	2000031c 	.word	0x2000031c
 800283c:	20000314 	.word	0x20000314

08002840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002842:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002844:	f7ff fb19 	bl	8001e7a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002848:	480c      	ldr	r0, [pc, #48]	; (800287c <LoopForever+0x6>)
  ldr r1, =_edata
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800284c:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <LoopForever+0xe>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0a      	ldr	r2, [pc, #40]	; (8002888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002860:	4c0a      	ldr	r4, [pc, #40]	; (800288c <LoopForever+0x16>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800286e:	f01a faa1 	bl	801cdb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002872:	f7fe fea6 	bl	80015c2 <main>

08002876 <LoopForever>:

LoopForever:
    b LoopForever
 8002876:	e7fe      	b.n	8002876 <LoopForever>
  ldr   r0, =_estack
 8002878:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8002884:	0801df64 	.word	0x0801df64
  ldr r2, =_sbss
 8002888:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 800288c:	20002184 	.word	0x20002184

08002890 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>

08002892 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002898:	1d3b      	adds	r3, r7, #4
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80028a6:	2310      	movs	r3, #16
 80028a8:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f002 f8ff 	bl	8004ac0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80028c2:	2320      	movs	r3, #32
 80028c4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ce:	f002 f8f7 	bl	8004ac0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80028d2:	2200      	movs	r2, #0
 80028d4:	2120      	movs	r1, #32
 80028d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028da:	f002 fb1f 	bl	8004f1c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80028de:	2200      	movs	r2, #0
 80028e0:	2110      	movs	r1, #16
 80028e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028e6:	f002 fb19 	bl	8004f1c <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d83f      	bhi.n	8002984 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	0800291d 	.word	0x0800291d
 8002910:	08002937 	.word	0x08002937
 8002914:	08002951 	.word	0x08002951
 8002918:	0800296b 	.word	0x0800296b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800291c:	2200      	movs	r2, #0
 800291e:	2110      	movs	r1, #16
 8002920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002924:	f002 fafa 	bl	8004f1c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002928:	2200      	movs	r2, #0
 800292a:	2120      	movs	r1, #32
 800292c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002930:	f002 faf4 	bl	8004f1c <HAL_GPIO_WritePin>
      break;      
 8002934:	e027      	b.n	8002986 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002936:	2201      	movs	r2, #1
 8002938:	2110      	movs	r1, #16
 800293a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800293e:	f002 faed 	bl	8004f1c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002942:	2200      	movs	r2, #0
 8002944:	2120      	movs	r1, #32
 8002946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294a:	f002 fae7 	bl	8004f1c <HAL_GPIO_WritePin>
      break;
 800294e:	e01a      	b.n	8002986 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002950:	2201      	movs	r2, #1
 8002952:	2110      	movs	r1, #16
 8002954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002958:	f002 fae0 	bl	8004f1c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800295c:	2201      	movs	r2, #1
 800295e:	2120      	movs	r1, #32
 8002960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002964:	f002 fada 	bl	8004f1c <HAL_GPIO_WritePin>
      break;
 8002968:	e00d      	b.n	8002986 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800296a:	2200      	movs	r2, #0
 800296c:	2110      	movs	r1, #16
 800296e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002972:	f002 fad3 	bl	8004f1c <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002976:	2201      	movs	r2, #1
 8002978:	2120      	movs	r1, #32
 800297a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800297e:	f002 facd 	bl	8004f1c <HAL_GPIO_WritePin>
      break;
 8002982:	e000      	b.n	8002986 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002984:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002994:	2302      	movs	r3, #2
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80029b0:	2301      	movs	r3, #1
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80029ca:	230f      	movs	r3, #15
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	e001      	b.n	80029d4 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80029d0:	2316      	movs	r3, #22
 80029d2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80029d4:	68fb      	ldr	r3, [r7, #12]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <LL_DBGMCU_DisableDBGSleepMode>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6053      	str	r3, [r2, #4]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	e0042000 	.word	0xe0042000

080029fc <LL_DBGMCU_DisableDBGStopMode>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	4a03      	ldr	r2, [pc, #12]	; (8002a14 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002a06:	f023 0302 	bic.w	r3, r3, #2
 8002a0a:	6053      	str	r3, [r2, #4]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	e0042000 	.word	0xe0042000

08002a18 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a03      	ldr	r2, [pc, #12]	; (8002a30 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	6053      	str	r3, [r2, #4]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	e0042000 	.word	0xe0042000

08002a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3e:	2003      	movs	r0, #3
 8002a40:	f001 f9b0 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a44:	f003 fb46 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a09      	ldr	r2, [pc, #36]	; (8002a70 <HAL_Init+0x3c>)
 8002a4c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a4e:	200f      	movs	r0, #15
 8002a50:	f7ff f940 	bl	8001cd4 <HAL_InitTick>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	71fb      	strb	r3, [r7, #7]
 8002a5e:	e001      	b.n	8002a64 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a60:	f7fe ff0d 	bl	800187e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000000 	.word	0x20000000

08002a74 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <HAL_SuspendTick+0x18>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <HAL_SuspendTick+0x18>)
 8002a7e:	f023 0302 	bic.w	r3, r3, #2
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	e000e010 	.word	0xe000e010

08002a90 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <HAL_ResumeTick+0x18>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a03      	ldr	r2, [pc, #12]	; (8002aa8 <HAL_ResumeTick+0x18>)
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	6013      	str	r3, [r2, #0]
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002ab0:	4b02      	ldr	r3, [pc, #8]	; (8002abc <HAL_GetUIDw0+0x10>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr
 8002abc:	1fff7590 	.word	0x1fff7590

08002ac0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002ac4:	4b02      	ldr	r3, [pc, #8]	; (8002ad0 <HAL_GetUIDw1+0x10>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr
 8002ad0:	1fff7594 	.word	0x1fff7594

08002ad4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002ad8:	4b02      	ldr	r3, [pc, #8]	; (8002ae4 <HAL_GetUIDw2+0x10>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	1fff7598 	.word	0x1fff7598

08002ae8 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002aec:	f7ff ff78 	bl	80029e0 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002af8:	f7ff ff80 	bl	80029fc <LL_DBGMCU_DisableDBGStopMode>
}
 8002afc:	bf00      	nop
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002b04:	f7ff ff88 	bl	8002a18 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002b08:	bf00      	nop
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	695a      	ldr	r2, [r3, #20]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2107      	movs	r1, #7
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	401a      	ands	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
 8002b8e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695a      	ldr	r2, [r3, #20]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2107      	movs	r1, #7
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc80      	pop	{r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	210f      	movs	r1, #15
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	401a      	ands	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0e9b      	lsrs	r3, r3, #26
 8002bfe:	f003 010f 	and.w	r1, r3, #15
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002c54:	43db      	mvns	r3, r3
 8002c56:	401a      	ands	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	695a      	ldr	r2, [r3, #20]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	401a      	ands	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	0219      	lsls	r1, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	400b      	ands	r3, r1
 8002c86:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002c8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cae:	f023 0317 	bic.w	r3, r3, #23
 8002cb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bc80      	pop	{r7}
 8002cc2:	4770      	bx	lr

08002cc4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002cd4:	f023 0317 	bic.w	r3, r3, #23
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6093      	str	r3, [r2, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfa:	d101      	bne.n	8002d00 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d1c:	f023 0317 	bic.w	r3, r3, #23
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d42:	f023 0317 	bic.w	r3, r3, #23
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsEnabled+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsEnabled+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bc80      	pop	{r7}
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d101      	bne.n	8002d94 <LL_ADC_IsDisableOngoing+0x18>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <LL_ADC_IsDisableOngoing+0x1a>
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	f023 0317 	bic.w	r3, r3, #23
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dd6:	f023 0317 	bic.w	r3, r3, #23
 8002dda:	f043 0210 	orr.w	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d101      	bne.n	8002e04 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e19e      	b.n	8003170 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d109      	bne.n	8002e54 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7fe f8ab 	bl	8000f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff44 	bl	8002ce6 <LL_ADC_IsInternalRegulatorEnabled>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d115      	bne.n	8002e90 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff18 	bl	8002c9e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e6e:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <HAL_ADC_Init+0x2c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	4a98      	ldr	r2, [pc, #608]	; (80030d8 <HAL_ADC_Init+0x2c8>)
 8002e76:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e82:	e002      	b.n	8002e8a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f9      	bne.n	8002e84 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff26 	bl	8002ce6 <LL_ADC_IsInternalRegulatorEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	f043 0210 	orr.w	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff93 	bl	8002dec <LL_ADC_REG_IsConversionOngoing>
 8002ec6:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f040 8144 	bne.w	800315e <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f040 8140 	bne.w	800315e <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff30 	bl	8002d58 <LL_ADC_IsEnabled>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f040 80a7 	bne.w	800304e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7e1b      	ldrb	r3, [r3, #24]
 8002f08:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f0a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	7e5b      	ldrb	r3, [r3, #25]
 8002f10:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f12:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7e9b      	ldrb	r3, [r3, #26]
 8002f18:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f1a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f20:	2a00      	cmp	r2, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_ADC_Init+0x11a>
 8002f24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f28:	e000      	b.n	8002f2c <HAL_ADC_Init+0x11c>
 8002f2a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f2c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f32:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da04      	bge.n	8002f46 <HAL_ADC_Init+0x136>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f44:	e001      	b.n	8002f4a <HAL_ADC_Init+0x13a>
 8002f46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002f4a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002f52:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f54:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d114      	bne.n	8002f90 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7e9b      	ldrb	r3, [r3, #26]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e00b      	b.n	8002f90 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f043 0220 	orr.w	r2, r3, #32
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	f043 0201 	orr.w	r2, r3, #1
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d009      	beq.n	8002fac <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002fb6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	69b9      	ldr	r1, [r7, #24]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d111      	bne.n	8003006 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fee:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002ff4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002ffa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_ADC_Init+0x2cc>)
 800300e:	4013      	ands	r3, r2
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	6979      	ldr	r1, [r7, #20]
 8003016:	430b      	orrs	r3, r1
 8003018:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003022:	d014      	beq.n	800304e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302c:	d00f      	beq.n	800304e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003032:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003036:	d00a      	beq.n	800304e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_ADC_Init+0x2d0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003048:	4925      	ldr	r1, [pc, #148]	; (80030e0 <HAL_ADC_Init+0x2d0>)
 800304a:	4313      	orrs	r3, r2
 800304c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	461a      	mov	r2, r3
 8003058:	2100      	movs	r1, #0
 800305a:	f7ff fd76 	bl	8002b4a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	461a      	mov	r2, r3
 8003068:	491e      	ldr	r1, [pc, #120]	; (80030e4 <HAL_ADC_Init+0x2d4>)
 800306a:	f7ff fd6e 	bl	8002b4a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f062 020f 	orn	r2, r2, #15
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
 8003086:	e042      	b.n	800310e <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003090:	d13d      	bne.n	800310e <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e00c      	b.n	80030b2 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d006      	beq.n	80030ba <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3301      	adds	r3, #1
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	d9ef      	bls.n	8003098 <HAL_ADC_Init+0x288>
 80030b8:	e000      	b.n	80030bc <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80030ba:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d112      	bne.n	80030e8 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f062 020f 	orn	r2, r2, #15
 80030d0:	629a      	str	r2, [r3, #40]	; 0x28
 80030d2:	e01c      	b.n	800310e <HAL_ADC_Init+0x2fe>
 80030d4:	20000000 	.word	0x20000000
 80030d8:	053e2d63 	.word	0x053e2d63
 80030dc:	1ffffc02 	.word	0x1ffffc02
 80030e0:	40012708 	.word	0x40012708
 80030e4:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	f003 031c 	and.w	r3, r3, #28
 80030fa:	f06f 020f 	mvn.w	r2, #15
 80030fe:	fa02 f103 	lsl.w	r1, r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fd36 	bl	8002b86 <LL_ADC_GetSamplingTimeCommonChannels>
 800311a:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003120:	429a      	cmp	r2, r3
 8003122:	d10b      	bne.n	800313c <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800313a:	e018      	b.n	800316e <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	f023 0312 	bic.w	r3, r3, #18
 8003144:	f043 0210 	orr.w	r2, r3, #16
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800315c:	e007      	b.n	800316e <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800316e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e06a      	b.n	8003260 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f043 0202 	orr.w	r2, r3, #2
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fabe 	bl	8003718 <ADC_ConversionStop>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fb82 	bl	80038b0 <ADC_Disable>
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fd7f 	bl	8002cc4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 80031d4:	f023 0303 	bic.w	r3, r3, #3
 80031d8:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f240 329f 	movw	r2, #927	; 0x39f
 80031e2:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68d9      	ldr	r1, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b1e      	ldr	r3, [pc, #120]	; (8003268 <HAL_ADC_DeInit+0xf0>)
 80031f0:	400b      	ands	r3, r1
 80031f2:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003202:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0207 	bic.w	r2, r2, #7
 8003212:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a1a      	ldr	r2, [r3, #32]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003222:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2200      	movs	r2, #0
 8003230:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_ADC_DeInit+0xf4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a0d      	ldr	r2, [pc, #52]	; (800326c <HAL_ADC_DeInit+0xf4>)
 8003238:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 800323c:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7fd fec0 	bl	8000fc4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	833e0200 	.word	0x833e0200
 800326c:	40012708 	.word	0x40012708

08003270 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fdb5 	bl	8002dec <LL_ADC_REG_IsConversionOngoing>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d132      	bne.n	80032ee <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_ADC_Start+0x26>
 8003292:	2302      	movs	r3, #2
 8003294:	e02e      	b.n	80032f4 <HAL_ADC_Start+0x84>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fa80 	bl	80037a4 <ADC_Enable>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d11a      	bne.n	80032e4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	221c      	movs	r2, #28
 80032ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd5f 	bl	8002da0 <LL_ADC_REG_StartConversion>
 80032e2:	e006      	b.n	80032f2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80032ec:	e001      	b.n	80032f2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_ADC_Stop+0x16>
 800330e:	2302      	movs	r3, #2
 8003310:	e022      	b.n	8003358 <HAL_ADC_Stop+0x5c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f9fc 	bl	8003718 <ADC_ConversionStop>
 8003320:	4603      	mov	r3, r0
 8003322:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003324:	7bfb      	ldrb	r3, [r7, #15]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d111      	bne.n	800334e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fac0 	bl	80038b0 <ADC_Disable>
 8003330:	4603      	mov	r3, r0
 8003332:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d109      	bne.n	800334e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003342:	f023 0301 	bic.w	r3, r3, #1
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b08      	cmp	r3, #8
 8003370:	d102      	bne.n	8003378 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003372:	2308      	movs	r3, #8
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e010      	b.n	800339a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d007      	beq.n	8003396 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e077      	b.n	8003486 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003396:	2304      	movs	r3, #4
 8003398:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800339a:	f7fe fca5 	bl	8001ce8 <HAL_GetTick>
 800339e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033a0:	e021      	b.n	80033e6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d01d      	beq.n	80033e6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033aa:	f7fe fc9d 	bl	8001ce8 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <HAL_ADC_PollForConversion+0x60>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d112      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e04f      	b.n	8003486 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0d6      	beq.n	80033a2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fbd6 	bl	8002bb6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d031      	beq.n	8003474 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	7e9b      	ldrb	r3, [r3, #26]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d12d      	bne.n	8003474 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b08      	cmp	r3, #8
 8003424:	d126      	bne.n	8003474 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fcde 	bl	8002dec <LL_ADC_REG_IsConversionOngoing>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d112      	bne.n	800345c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 020c 	bic.w	r2, r2, #12
 8003444:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	659a      	str	r2, [r3, #88]	; 0x58
 800345a:	e00b      	b.n	8003474 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7e1b      	ldrb	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d103      	bne.n	8003484 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	220c      	movs	r2, #12
 8003482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bc80      	pop	{r7}
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x28>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e110      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x24a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fc85 	bl	8002dec <LL_ADC_REG_IsConversionOngoing>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 80f7 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	f000 80b1 	beq.w	8003656 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fc:	d004      	beq.n	8003508 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003502:	4a7e      	ldr	r2, [pc, #504]	; (80036fc <HAL_ADC_ConfigChannel+0x254>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7ff fb82 	bl	8002c1c <LL_ADC_REG_SetSequencerChAdd>
 8003518:	e041      	b.n	800359e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	210f      	movs	r1, #15
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	401a      	ands	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_ADC_ConfigChannel+0xa0>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	e011      	b.n	800356c <HAL_ADC_ConfigChannel+0xc4>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	6849      	ldr	r1, [r1, #4]
 8003570:	f001 011f 	and.w	r1, r1, #31
 8003574:	408b      	lsls	r3, r1
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	429a      	cmp	r2, r3
 800358a:	d808      	bhi.n	800359e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	f7ff fb1e 	bl	8002bda <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f7ff fb5b 	bl	8002c66 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f280 8097 	bge.w	80036e8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ba:	4851      	ldr	r0, [pc, #324]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 80035bc:	f7ff fab8 	bl	8002b30 <LL_ADC_GetCommonPathInternalCh>
 80035c0:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a4f      	ldr	r2, [pc, #316]	; (8003704 <HAL_ADC_ConfigChannel+0x25c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d120      	bne.n	800360e <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11b      	bne.n	800360e <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035dc:	4619      	mov	r1, r3
 80035de:	4848      	ldr	r0, [pc, #288]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 80035e0:	f7ff fa94 	bl	8002b0c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e4:	4b48      	ldr	r3, [pc, #288]	; (8003708 <HAL_ADC_ConfigChannel+0x260>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	4a48      	ldr	r2, [pc, #288]	; (800370c <HAL_ADC_ConfigChannel+0x264>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	4613      	mov	r3, r2
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035fe:	e002      	b.n	8003606 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3b01      	subs	r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800360c:	e06c      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3f      	ldr	r2, [pc, #252]	; (8003710 <HAL_ADC_ConfigChannel+0x268>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d10c      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x18a>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003628:	4619      	mov	r1, r3
 800362a:	4835      	ldr	r0, [pc, #212]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 800362c:	f7ff fa6e 	bl	8002b0c <LL_ADC_SetCommonPathInternalCh>
 8003630:	e05a      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a37      	ldr	r2, [pc, #220]	; (8003714 <HAL_ADC_ConfigChannel+0x26c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d155      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003642:	2b00      	cmp	r3, #0
 8003644:	d150      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800364c:	4619      	mov	r1, r3
 800364e:	482c      	ldr	r0, [pc, #176]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 8003650:	f7ff fa5c 	bl	8002b0c <LL_ADC_SetCommonPathInternalCh>
 8003654:	e048      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800365e:	d004      	beq.n	800366a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003664:	4a25      	ldr	r2, [pc, #148]	; (80036fc <HAL_ADC_ConfigChannel+0x254>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d107      	bne.n	800367a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	4610      	mov	r0, r2
 8003676:	f7ff fae3 	bl	8002c40 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	da32      	bge.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003682:	481f      	ldr	r0, [pc, #124]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 8003684:	f7ff fa54 	bl	8002b30 <LL_ADC_GetCommonPathInternalCh>
 8003688:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_ADC_ConfigChannel+0x25c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d107      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800369a:	4619      	mov	r1, r3
 800369c:	4818      	ldr	r0, [pc, #96]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 800369e:	f7ff fa35 	bl	8002b0c <LL_ADC_SetCommonPathInternalCh>
 80036a2:	e021      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a19      	ldr	r2, [pc, #100]	; (8003710 <HAL_ADC_ConfigChannel+0x268>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d107      	bne.n	80036be <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b4:	4619      	mov	r1, r3
 80036b6:	4812      	ldr	r0, [pc, #72]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 80036b8:	f7ff fa28 	bl	8002b0c <LL_ADC_SetCommonPathInternalCh>
 80036bc:	e014      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a14      	ldr	r2, [pc, #80]	; (8003714 <HAL_ADC_ConfigChannel+0x26c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10f      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036ce:	4619      	mov	r1, r3
 80036d0:	480b      	ldr	r0, [pc, #44]	; (8003700 <HAL_ADC_ConfigChannel+0x258>)
 80036d2:	f7ff fa1b 	bl	8002b0c <LL_ADC_SetCommonPathInternalCh>
 80036d6:	e007      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80036f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	80000004 	.word	0x80000004
 8003700:	40012708 	.word	0x40012708
 8003704:	b0001000 	.word	0xb0001000
 8003708:	20000000 	.word	0x20000000
 800370c:	053e2d63 	.word	0x053e2d63
 8003710:	b8004000 	.word	0xb8004000
 8003714:	b4002000 	.word	0xb4002000

08003718 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fb61 	bl	8002dec <LL_ADC_REG_IsConversionOngoing>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d033      	beq.n	8003798 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fb21 	bl	8002d7c <LL_ADC_IsDisableOngoing>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d104      	bne.n	800374a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7ff fb3e 	bl	8002dc6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800374a:	f7fe facd 	bl	8001ce8 <HAL_GetTick>
 800374e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003750:	e01b      	b.n	800378a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003752:	f7fe fac9 	bl	8001ce8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d914      	bls.n	800378a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00d      	beq.n	800378a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	f043 0210 	orr.w	r2, r3, #16
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377e:	f043 0201 	orr.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e007      	b.n	800379a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1dc      	bne.n	8003752 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff facf 	bl	8002d58 <LL_ADC_IsEnabled>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d169      	bne.n	8003894 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <ADC_Enable+0xfc>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	f043 0210 	orr.w	r2, r3, #16
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	f043 0201 	orr.w	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e055      	b.n	8003896 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fa8c 	bl	8002d0c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037f4:	482b      	ldr	r0, [pc, #172]	; (80038a4 <ADC_Enable+0x100>)
 80037f6:	f7ff f99b 	bl	8002b30 <LL_ADC_GetCommonPathInternalCh>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00f      	beq.n	8003824 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003804:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <ADC_Enable+0x104>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	099b      	lsrs	r3, r3, #6
 800380a:	4a28      	ldr	r2, [pc, #160]	; (80038ac <ADC_Enable+0x108>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	3301      	adds	r3, #1
 8003814:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003816:	e002      	b.n	800381e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	3b01      	subs	r3, #1
 800381c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f9      	bne.n	8003818 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7e5b      	ldrb	r3, [r3, #25]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d033      	beq.n	8003894 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800382c:	f7fe fa5c 	bl	8001ce8 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003832:	e028      	b.n	8003886 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fa8d 	bl	8002d58 <LL_ADC_IsEnabled>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d104      	bne.n	800384e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fa5f 	bl	8002d0c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800384e:	f7fe fa4b 	bl	8001ce8 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d914      	bls.n	8003886 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d00d      	beq.n	8003886 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e007      	b.n	8003896 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	d1cf      	bne.n	8003834 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	80000017 	.word	0x80000017
 80038a4:	40012708 	.word	0x40012708
 80038a8:	20000000 	.word	0x20000000
 80038ac:	053e2d63 	.word	0x053e2d63

080038b0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff fa5d 	bl	8002d7c <LL_ADC_IsDisableOngoing>
 80038c2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fa45 	bl	8002d58 <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d047      	beq.n	8003964 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d144      	bne.n	8003964 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 0305 	and.w	r3, r3, #5
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10c      	bne.n	8003902 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fa20 	bl	8002d32 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2203      	movs	r2, #3
 80038f8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038fa:	f7fe f9f5 	bl	8001ce8 <HAL_GetTick>
 80038fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003900:	e029      	b.n	8003956 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e023      	b.n	8003966 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800391e:	f7fe f9e3 	bl	8001ce8 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d914      	bls.n	8003956 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00d      	beq.n	8003956 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	f043 0210 	orr.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	f043 0201 	orr.w	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e007      	b.n	8003966 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1dc      	bne.n	800391e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <LL_ADC_SetCalibrationFactor>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800397e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <LL_ADC_GetCalibrationFactor>:
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <LL_ADC_Enable>:
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039c2:	f023 0317 	bic.w	r3, r3, #23
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	609a      	str	r2, [r3, #8]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_Disable>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039e8:	f023 0317 	bic.w	r3, r3, #23
 80039ec:	f043 0202 	orr.w	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <LL_ADC_IsEnabled>:
{
 80039fe:	b480      	push	{r7}
 8003a00:	b083      	sub	sp, #12
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <LL_ADC_IsEnabled+0x18>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <LL_ADC_IsEnabled+0x1a>
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <LL_ADC_StartCalibration>:
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a32:	f023 0317 	bic.w	r3, r3, #23
 8003a36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <LL_ADC_IsCalibrationOnGoing>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5c:	d101      	bne.n	8003a62 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr

08003a6e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b088      	sub	sp, #32
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_ADCEx_Calibration_Start+0x1e>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0b9      	b.n	8003c00 <HAL_ADCEx_Calibration_Start+0x192>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff ff0b 	bl	80038b0 <ADC_Disable>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ffab 	bl	80039fe <LL_ADC_IsEnabled>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 809d 	bne.w	8003bea <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ab8:	f043 0202 	orr.w	r2, r3, #2
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	f248 0303 	movw	r3, #32771	; 0x8003
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003adc:	f023 0303 	bic.w	r3, r3, #3
 8003ae0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	e02e      	b.n	8003b46 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff98 	bl	8003a22 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003af2:	e014      	b.n	8003b1e <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	3301      	adds	r3, #1
 8003af8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003b00:	d30d      	bcc.n	8003b1e <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	f023 0312 	bic.w	r3, r3, #18
 8003b0a:	f043 0210 	orr.w	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e070      	b.n	8003c00 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff90 	bl	8003a48 <LL_ADC_IsCalibrationOnGoing>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e2      	bne.n	8003af4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7ff ff2f 	bl	8003996 <LL_ADC_GetCalibrationFactor>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3301      	adds	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d9cd      	bls.n	8003ae8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff ff29 	bl	80039b2 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69b9      	ldr	r1, [r7, #24]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff ff01 	bl	800396e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff ff31 	bl	80039d8 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b76:	f7fe f8b7 	bl	8001ce8 <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b7c:	e01c      	b.n	8003bb8 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b7e:	f7fe f8b3 	bl	8001ce8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d915      	bls.n	8003bb8 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff34 	bl	80039fe <LL_ADC_IsEnabled>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f043 0210 	orr.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e023      	b.n	8003c00 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7ff ff1e 	bl	80039fe <LL_ADC_IsEnabled>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1da      	bne.n	8003b7e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68d9      	ldr	r1, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f023 0303 	bic.w	r3, r3, #3
 8003be0:	f043 0201 	orr.w	r2, r3, #1
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	659a      	str	r2, [r3, #88]	; 0x58
 8003be8:	e005      	b.n	8003bf6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bee:	f043 0210 	orr.w	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	60d3      	str	r3, [r2, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <__NVIC_GetPriorityGrouping+0x18>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	0a1b      	lsrs	r3, r3, #8
 8003c5a:	f003 0307 	and.w	r3, r3, #7
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	db0b      	blt.n	8003c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	f003 021f 	and.w	r2, r3, #31
 8003c84:	4906      	ldr	r1, [pc, #24]	; (8003ca0 <__NVIC_EnableIRQ+0x34>)
 8003c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	2001      	movs	r0, #1
 8003c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bc80      	pop	{r7}
 8003c9e:	4770      	bx	lr
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	db12      	blt.n	8003cdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	490a      	ldr	r1, [pc, #40]	; (8003ce8 <__NVIC_DisableIRQ+0x44>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cca:	3320      	adds	r3, #32
 8003ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cd0:	f3bf 8f4f 	dsb	sy
}
 8003cd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cd6:	f3bf 8f6f 	isb	sy
}
 8003cda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	e000e100 	.word	0xe000e100

08003cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	6039      	str	r1, [r7, #0]
 8003cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	db0a      	blt.n	8003d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	490c      	ldr	r1, [pc, #48]	; (8003d38 <__NVIC_SetPriority+0x4c>)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	0112      	lsls	r2, r2, #4
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	440b      	add	r3, r1
 8003d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d14:	e00a      	b.n	8003d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	4908      	ldr	r1, [pc, #32]	; (8003d3c <__NVIC_SetPriority+0x50>)
 8003d1c:	79fb      	ldrb	r3, [r7, #7]
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	3b04      	subs	r3, #4
 8003d24:	0112      	lsls	r2, r2, #4
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	440b      	add	r3, r1
 8003d2a:	761a      	strb	r2, [r3, #24]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc80      	pop	{r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000e100 	.word	0xe000e100
 8003d3c:	e000ed00 	.word	0xe000ed00

08003d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	; 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	f1c3 0307 	rsb	r3, r3, #7
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	bf28      	it	cs
 8003d5e:	2304      	movcs	r3, #4
 8003d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3304      	adds	r3, #4
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d902      	bls.n	8003d70 <NVIC_EncodePriority+0x30>
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3b03      	subs	r3, #3
 8003d6e:	e000      	b.n	8003d72 <NVIC_EncodePriority+0x32>
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	f04f 32ff 	mov.w	r2, #4294967295
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	401a      	ands	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d88:	f04f 31ff 	mov.w	r1, #4294967295
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d92:	43d9      	mvns	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d98:	4313      	orrs	r3, r2
         );
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3724      	adds	r7, #36	; 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff2b 	bl	8003c08 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff42 	bl	8003c50 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ffb4 	bl	8003d40 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff83 	bl	8003cec <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff35 	bl	8003c6c <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	4603      	mov	r3, r0
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff43 	bl	8003ca4 <__NVIC_DisableIRQ>
}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e08e      	b.n	8003f58 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b47      	ldr	r3, [pc, #284]	; (8003f60 <HAL_DMA_Init+0x138>)
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d80f      	bhi.n	8003e66 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <HAL_DMA_Init+0x13c>)
 8003e4e:	4413      	add	r3, r2
 8003e50:	4a45      	ldr	r2, [pc, #276]	; (8003f68 <HAL_DMA_Init+0x140>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	009a      	lsls	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a42      	ldr	r2, [pc, #264]	; (8003f6c <HAL_DMA_Init+0x144>)
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40
 8003e64:	e00e      	b.n	8003e84 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b40      	ldr	r3, [pc, #256]	; (8003f70 <HAL_DMA_Init+0x148>)
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a3d      	ldr	r2, [pc, #244]	; (8003f68 <HAL_DMA_Init+0x140>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	009a      	lsls	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <HAL_DMA_Init+0x14c>)
 8003e82:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e9e:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fb24 	bl	8004524 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee4:	d102      	bne.n	8003eec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ef4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f02:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d010      	beq.n	8003f2e <HAL_DMA_Init+0x106>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d80c      	bhi.n	8003f2e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 fb4d 	bl	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	e008      	b.n	8003f40 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3708      	adds	r7, #8
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40020407 	.word	0x40020407
 8003f64:	bffdfff8 	.word	0xbffdfff8
 8003f68:	cccccccd 	.word	0xcccccccd
 8003f6c:	40020000 	.word	0x40020000
 8003f70:	bffdfbf8 	.word	0xbffdfbf8
 8003f74:	40020400 	.word	0x40020400

08003f78 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07b      	b.n	8004082 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	4b3a      	ldr	r3, [pc, #232]	; (800408c <HAL_DMA_DeInit+0x114>)
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d80f      	bhi.n	8003fc6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <HAL_DMA_DeInit+0x118>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	4a38      	ldr	r2, [pc, #224]	; (8004094 <HAL_DMA_DeInit+0x11c>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	009a      	lsls	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a35      	ldr	r2, [pc, #212]	; (8004098 <HAL_DMA_DeInit+0x120>)
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8003fc4:	e00e      	b.n	8003fe4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	4b33      	ldr	r3, [pc, #204]	; (800409c <HAL_DMA_DeInit+0x124>)
 8003fce:	4413      	add	r3, r2
 8003fd0:	4a30      	ldr	r2, [pc, #192]	; (8004094 <HAL_DMA_DeInit+0x11c>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	009a      	lsls	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <HAL_DMA_DeInit+0x128>)
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f003 021c 	and.w	r2, r3, #28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fa8f 	bl	8004524 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004016:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00f      	beq.n	8004040 <HAL_DMA_DeInit+0xc8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d80b      	bhi.n	8004040 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fac3 	bl	80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800403e:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40020407 	.word	0x40020407
 8004090:	bffdfff8 	.word	0xbffdfff8
 8004094:	cccccccd 	.word	0xcccccccd
 8004098:	40020000 	.word	0x40020000
 800409c:	bffdfbf8 	.word	0xbffdfbf8
 80040a0:	40020400 	.word	0x40020400

080040a4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Start_IT+0x20>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e069      	b.n	8004198 <HAL_DMA_Start_IT+0xf4>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d155      	bne.n	8004184 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0201 	bic.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f9d3 	bl	80044a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 020e 	orr.w	r2, r2, #14
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e00f      	b.n	800413c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0204 	bic.w	r2, r2, #4
 800412a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f042 020a 	orr.w	r2, r2, #10
 800413a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d007      	beq.n	800415a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004158:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004170:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	e008      	b.n	8004196 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e04f      	b.n	8004252 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d008      	beq.n	80041d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e040      	b.n	8004252 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020e 	bic.w	r2, r2, #14
 80041de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004204:	f003 021c 	and.w	r2, r3, #28
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	2101      	movs	r1, #1
 800420e:	fa01 f202 	lsl.w	r2, r1, r2
 8004212:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800421c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00c      	beq.n	8004240 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800423e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d005      	beq.n	8004280 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
 800427e:	e047      	b.n	8004310 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 020e 	bic.w	r2, r2, #14
 800428e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b4:	f003 021c 	and.w	r2, r3, #28
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2101      	movs	r1, #1
 80042be:	fa01 f202 	lsl.w	r2, r1, r2
 80042c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00c      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	4798      	blx	r3
    }
  }
  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f003 031c 	and.w	r3, r3, #28
 800433c:	2204      	movs	r2, #4
 800433e:	409a      	lsls	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d027      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7c>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d022      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d107      	bne.n	8004370 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0204 	bic.w	r2, r2, #4
 800436e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004374:	f003 021c 	and.w	r2, r3, #28
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	2104      	movs	r1, #4
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8081 	beq.w	8004490 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004396:	e07b      	b.n	8004490 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f003 031c 	and.w	r3, r3, #28
 80043a0:	2202      	movs	r2, #2
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d03d      	beq.n	8004428 <HAL_DMA_IRQHandler+0x10c>
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d038      	beq.n	8004428 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020a 	bic.w	r2, r2, #10
 80043d2:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_DMA_IRQHandler+0x180>)
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d909      	bls.n	80043fc <HAL_DMA_IRQHandler+0xe0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f003 031c 	and.w	r3, r3, #28
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <HAL_DMA_IRQHandler+0x184>)
 80043f2:	2102      	movs	r1, #2
 80043f4:	fa01 f303 	lsl.w	r3, r1, r3
 80043f8:	6053      	str	r3, [r2, #4]
 80043fa:	e008      	b.n	800440e <HAL_DMA_IRQHandler+0xf2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f003 031c 	and.w	r3, r3, #28
 8004404:	4a27      	ldr	r2, [pc, #156]	; (80044a4 <HAL_DMA_IRQHandler+0x188>)
 8004406:	2102      	movs	r1, #2
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d038      	beq.n	8004490 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004426:	e033      	b.n	8004490 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	f003 031c 	and.w	r3, r3, #28
 8004430:	2208      	movs	r2, #8
 8004432:	409a      	lsls	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d02a      	beq.n	8004492 <HAL_DMA_IRQHandler+0x176>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d025      	beq.n	8004492 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 020e 	bic.w	r2, r2, #14
 8004454:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f003 021c 	and.w	r2, r3, #28
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2101      	movs	r1, #1
 8004464:	fa01 f202 	lsl.w	r2, r1, r2
 8004468:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004490:	bf00      	nop
 8004492:	bf00      	nop
}
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40020080 	.word	0x40020080
 80044a0:	40020400 	.word	0x40020400
 80044a4:	40020000 	.word	0x40020000

080044a8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d004      	beq.n	80044d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	f003 021c 	and.w	r2, r3, #28
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	2101      	movs	r1, #1
 80044e0:	fa01 f202 	lsl.w	r2, r1, r2
 80044e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b10      	cmp	r3, #16
 80044f4:	d108      	bne.n	8004508 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004506:	e007      	b.n	8004518 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	60da      	str	r2, [r3, #12]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr
	...

08004524 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004534:	429a      	cmp	r2, r3
 8004536:	d813      	bhi.n	8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	089b      	lsrs	r3, r3, #2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004544:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b08      	subs	r3, #8
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e011      	b.n	8004584 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	009a      	lsls	r2, r3, #2
 8004568:	4b10      	ldr	r3, [pc, #64]	; (80045ac <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 800456a:	4413      	add	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	3b08      	subs	r3, #8
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	3307      	adds	r3, #7
 8004582:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a0a      	ldr	r2, [pc, #40]	; (80045b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004588:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40020407 	.word	0x40020407
 80045a8:	cccccccd 	.word	0xcccccccd
 80045ac:	4002081c 	.word	0x4002081c
 80045b0:	40020880 	.word	0x40020880

080045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	461a      	mov	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80045d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b01      	subs	r3, #1
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2201      	movs	r2, #1
 80045e4:	409a      	lsls	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bc80      	pop	{r7}
 80045f2:	4770      	bx	lr
 80045f4:	1000823f 	.word	0x1000823f
 80045f8:	40020940 	.word	0x40020940

080045fc <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800460a:	4b1c      	ldr	r3, [pc, #112]	; (800467c <HAL_FLASH_Program+0x80>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_FLASH_Program+0x1a>
 8004612:	2302      	movs	r3, #2
 8004614:	e02d      	b.n	8004672 <HAL_FLASH_Program+0x76>
 8004616:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_FLASH_Program+0x80>)
 8004618:	2201      	movs	r2, #1
 800461a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <HAL_FLASH_Program+0x80>)
 800461e:	2200      	movs	r2, #0
 8004620:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004622:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004626:	f000 f869 	bl	80046fc <FLASH_WaitForLastOperation>
 800462a:	4603      	mov	r3, r0
 800462c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800462e:	7dfb      	ldrb	r3, [r7, #23]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d11a      	bne.n	800466a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d105      	bne.n	8004646 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800463a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f000 f8be 	bl	80047c0 <FLASH_Program_DoubleWord>
 8004644:	e004      	b.n	8004650 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4619      	mov	r1, r3
 800464a:	68b8      	ldr	r0, [r7, #8]
 800464c:	f000 f8de 	bl	800480c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004654:	f000 f852 	bl	80046fc <FLASH_WaitForLastOperation>
 8004658:	4603      	mov	r3, r0
 800465a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800465c:	4b08      	ldr	r3, [pc, #32]	; (8004680 <HAL_FLASH_Program+0x84>)
 800465e:	695a      	ldr	r2, [r3, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	43db      	mvns	r3, r3
 8004664:	4906      	ldr	r1, [pc, #24]	; (8004680 <HAL_FLASH_Program+0x84>)
 8004666:	4013      	ands	r3, r2
 8004668:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800466a:	4b04      	ldr	r3, [pc, #16]	; (800467c <HAL_FLASH_Program+0x80>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000320 	.word	0x20000320
 8004680:	58004000 	.word	0x58004000

08004684 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	da0b      	bge.n	80046ae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 8004698:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_FLASH_Unlock+0x3c>)
 800469a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <HAL_FLASH_Unlock+0x40>)
 80046a0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80046a2:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_FLASH_Unlock+0x38>)
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da01      	bge.n	80046ae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046ae:	79fb      	ldrb	r3, [r7, #7]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58004000 	.word	0x58004000
 80046c0:	45670123 	.word	0x45670123
 80046c4:	cdef89ab 	.word	0xcdef89ab

080046c8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <HAL_FLASH_Lock+0x30>)
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <HAL_FLASH_Lock+0x30>)
 80046d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046dc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_FLASH_Lock+0x30>)
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	db01      	blt.n	80046ea <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80046ea:	79fb      	ldrb	r3, [r7, #7]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	58004000 	.word	0x58004000

080046fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7fd faf0 	bl	8001ce8 <HAL_GetTick>
 8004708:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800470a:	e009      	b.n	8004720 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800470c:	f7fd faec 	bl	8001ce8 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	429a      	cmp	r2, r3
 800471a:	d801      	bhi.n	8004720 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e047      	b.n	80047b0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d0ee      	beq.n	800470c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800472e:	4b22      	ldr	r3, [pc, #136]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800473e:	4b1e      	ldr	r3, [pc, #120]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 8004740:	2201      	movs	r2, #1
 8004742:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800474a:	4013      	ands	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d007      	beq.n	8004768 <FLASH_WaitForLastOperation+0x6c>
 8004758:	4b17      	ldr	r3, [pc, #92]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004762:	4915      	ldr	r1, [pc, #84]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 8004764:	4313      	orrs	r3, r2
 8004766:	618b      	str	r3, [r1, #24]
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <FLASH_WaitForLastOperation+0x80>
 8004772:	4a11      	ldr	r2, [pc, #68]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800477a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004782:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <FLASH_WaitForLastOperation+0xc0>)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e011      	b.n	80047b0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800478c:	f7fd faac 	bl	8001ce8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d801      	bhi.n	80047a0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e007      	b.n	80047b0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <FLASH_WaitForLastOperation+0xbc>)
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047ac:	d0ee      	beq.n	800478c <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	58004000 	.word	0x58004000
 80047bc:	20000320 	.word	0x20000320

080047c0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <FLASH_Program_DoubleWord+0x48>)
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	4a0d      	ldr	r2, [pc, #52]	; (8004808 <FLASH_Program_DoubleWord+0x48>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80047de:	f3bf 8f6f 	isb	sy
}
 80047e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80047e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	000a      	movs	r2, r1
 80047f2:	2300      	movs	r3, #0
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	3104      	adds	r1, #4
 80047f8:	4613      	mov	r3, r2
 80047fa:	600b      	str	r3, [r1, #0]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	58004000 	.word	0x58004000

0800480c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004816:	2340      	movs	r3, #64	; 0x40
 8004818:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <FLASH_Program_Fast+0x78>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	4a17      	ldr	r2, [pc, #92]	; (8004884 <FLASH_Program_Fast+0x78>)
 8004828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800482c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482e:	f3ef 8310 	mrs	r3, PRIMASK
 8004832:	60fb      	str	r3, [r7, #12]
  return(result);
 8004834:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004838:	b672      	cpsid	i
}
 800483a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	3304      	adds	r3, #4
 8004848:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	3304      	adds	r3, #4
 800484e:	617b      	str	r3, [r7, #20]
    row_index--;
 8004850:	7ffb      	ldrb	r3, [r7, #31]
 8004852:	3b01      	subs	r3, #1
 8004854:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004856:	7ffb      	ldrb	r3, [r7, #31]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ef      	bne.n	800483c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 800485c:	bf00      	nop
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <FLASH_Program_Fast+0x78>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d0f8      	beq.n	800485e <FLASH_Program_Fast+0x52>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f383 8810 	msr	PRIMASK, r3
}
 8004876:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004878:	bf00      	nop
 800487a:	3724      	adds	r7, #36	; 0x24
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	58004000 	.word	0x58004000

08004888 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004892:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_FLASHEx_Erase+0xac>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_FLASHEx_Erase+0x16>
 800489a:	2302      	movs	r3, #2
 800489c:	e046      	b.n	800492c <HAL_FLASHEx_Erase+0xa4>
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <HAL_FLASHEx_Erase+0xac>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80048a4:	4b23      	ldr	r3, [pc, #140]	; (8004934 <HAL_FLASHEx_Erase+0xac>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048ae:	f7ff ff25 	bl	80046fc <FLASH_WaitForLastOperation>
 80048b2:	4603      	mov	r3, r0
 80048b4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d133      	bne.n	8004924 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d108      	bne.n	80048d6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80048c4:	f000 f880 	bl	80049c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048cc:	f7ff ff16 	bl	80046fc <FLASH_WaitForLastOperation>
 80048d0:	4603      	mov	r3, r0
 80048d2:	73fb      	strb	r3, [r7, #15]
 80048d4:	e024      	b.n	8004920 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	e012      	b.n	800490c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80048e6:	68b8      	ldr	r0, [r7, #8]
 80048e8:	f000 f87e 	bl	80049e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80048ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048f0:	f7ff ff04 	bl	80046fc <FLASH_WaitForLastOperation>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	601a      	str	r2, [r3, #0]
          break;
 8004904:	e00a      	b.n	800491c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	3301      	adds	r3, #1
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4413      	add	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	429a      	cmp	r2, r3
 800491a:	d3e4      	bcc.n	80048e6 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800491c:	f000 f8c0 	bl	8004aa0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004920:	f000 f87a 	bl	8004a18 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <HAL_FLASHEx_Erase+0xac>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]

  return status;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000320 	.word	0x20000320

08004938 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004940:	4b1f      	ldr	r3, [pc, #124]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_FLASHEx_Erase_IT+0x14>
 8004948:	2302      	movs	r3, #2
 800494a:	e034      	b.n	80049b6 <HAL_FLASHEx_Erase_IT+0x7e>
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004952:	4b1b      	ldr	r3, [pc, #108]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004954:	2200      	movs	r2, #0
 8004956:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 800495e:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004964:	f7ff feca 	bl	80046fc <FLASH_WaitForLastOperation>
 8004968:	4603      	mov	r3, r0
 800496a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e01c      	b.n	80049b4 <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_FLASHEx_Erase_IT+0x8c>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	4a11      	ldr	r2, [pc, #68]	; (80049c4 <HAL_FLASHEx_Erase_IT+0x8c>)
 8004980:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004984:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d105      	bne.n	800499a <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 800498e:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004994:	f000 f818 	bl	80049c8 <FLASH_MassErase>
 8004998:	e00c      	b.n	80049b4 <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 80049a0:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <HAL_FLASHEx_Erase_IT+0x88>)
 80049a8:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f81a 	bl	80049e8 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000320 	.word	0x20000320
 80049c4:	58004000 	.word	0x58004000

080049c8 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80049cc:	4b05      	ldr	r3, [pc, #20]	; (80049e4 <FLASH_MassErase+0x1c>)
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4a04      	ldr	r2, [pc, #16]	; (80049e4 <FLASH_MassErase+0x1c>)
 80049d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d6:	f043 0304 	orr.w	r3, r3, #4
 80049da:	6153      	str	r3, [r2, #20]
#endif
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	58004000 	.word	0x58004000

080049e8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80049f0:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <FLASH_PageErase+0x2c>)
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4313      	orrs	r3, r2
 80049fe:	4a05      	ldr	r2, [pc, #20]	; (8004a14 <FLASH_PageErase+0x2c>)
 8004a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a04:	f043 0302 	orr.w	r3, r3, #2
 8004a08:	6153      	str	r3, [r2, #20]
#endif
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	58004000 	.word	0x58004000

08004a18 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d117      	bne.n	8004a58 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a2e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a32:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004a34:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a3e:	6013      	str	r3, [r2, #0]
 8004a40:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a4a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a4c:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a56:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004a58:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d117      	bne.n	8004a94 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a64:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a0c      	ldr	r2, [pc, #48]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a6e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a86:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a03      	ldr	r2, [pc, #12]	; (8004a9c <FLASH_FlushCaches+0x84>)
 8004a8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a92:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr
 8004a9c:	58004000 	.word	0x58004000

08004aa0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <FLASH_AcknowledgePageErase+0x1c>)
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <FLASH_AcknowledgePageErase+0x1c>)
 8004aaa:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8004aae:	f023 0302 	bic.w	r3, r3, #2
 8004ab2:	6153      	str	r3, [r2, #20]
#endif
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	58004000 	.word	0x58004000

08004ac0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ace:	e140      	b.n	8004d52 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	4013      	ands	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8132 	beq.w	8004d4c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d005      	beq.n	8004b00 <HAL_GPIO_Init+0x40>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d130      	bne.n	8004b62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	4013      	ands	r3, r2
 8004b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b36:	2201      	movs	r2, #1
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43db      	mvns	r3, r3
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4013      	ands	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 0201 	and.w	r2, r3, #1
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b03      	cmp	r3, #3
 8004b6c:	d017      	beq.n	8004b9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	2203      	movs	r2, #3
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 0303 	and.w	r3, r3, #3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d123      	bne.n	8004bf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	08da      	lsrs	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3208      	adds	r2, #8
 8004bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	220f      	movs	r2, #15
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	08da      	lsrs	r2, r3, #3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	3208      	adds	r2, #8
 8004bec:	6939      	ldr	r1, [r7, #16]
 8004bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	2203      	movs	r2, #3
 8004bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004c02:	43db      	mvns	r3, r3
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	4013      	ands	r3, r2
 8004c08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 0203 	and.w	r2, r3, #3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 808c 	beq.w	8004d4c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c34:	4a4e      	ldr	r2, [pc, #312]	; (8004d70 <HAL_GPIO_Init+0x2b0>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f003 0303 	and.w	r3, r3, #3
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43db      	mvns	r3, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004c5e:	d00d      	beq.n	8004c7c <HAL_GPIO_Init+0x1bc>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a44      	ldr	r2, [pc, #272]	; (8004d74 <HAL_GPIO_Init+0x2b4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d007      	beq.n	8004c78 <HAL_GPIO_Init+0x1b8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a43      	ldr	r2, [pc, #268]	; (8004d78 <HAL_GPIO_Init+0x2b8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d101      	bne.n	8004c74 <HAL_GPIO_Init+0x1b4>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e004      	b.n	8004c7e <HAL_GPIO_Init+0x1be>
 8004c74:	2307      	movs	r3, #7
 8004c76:	e002      	b.n	8004c7e <HAL_GPIO_Init+0x1be>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_GPIO_Init+0x1be>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	f002 0203 	and.w	r2, r2, #3
 8004c84:	0092      	lsls	r2, r2, #2
 8004c86:	4093      	lsls	r3, r2
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c8e:	4938      	ldr	r1, [pc, #224]	; (8004d70 <HAL_GPIO_Init+0x2b0>)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	3302      	adds	r3, #2
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c9c:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d003      	beq.n	8004cc0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004cc0:	4a2e      	ldr	r2, [pc, #184]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004cc6:	4b2d      	ldr	r3, [pc, #180]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cea:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004cf0:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	43db      	mvns	r3, r3
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004d16:	4a19      	ldr	r2, [pc, #100]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004d1e:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d24:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004d44:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_GPIO_Init+0x2bc>)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f47f aeb7 	bne.w	8004ad0 <HAL_GPIO_Init+0x10>
  }
}
 8004d62:	bf00      	nop
 8004d64:	bf00      	nop
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bc80      	pop	{r7}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	48000400 	.word	0x48000400
 8004d78:	48000800 	.word	0x48000800
 8004d7c:	58000800 	.word	0x58000800

08004d80 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004d8e:	e0af      	b.n	8004ef0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004d90:	2201      	movs	r2, #1
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	fa02 f303 	lsl.w	r3, r2, r3
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a2 	beq.w	8004eea <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004da6:	4a59      	ldr	r2, [pc, #356]	; (8004f0c <HAL_GPIO_DeInit+0x18c>)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	089b      	lsrs	r3, r3, #2
 8004dac:	3302      	adds	r3, #2
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	2207      	movs	r2, #7
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004dce:	d00d      	beq.n	8004dec <HAL_GPIO_DeInit+0x6c>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a4f      	ldr	r2, [pc, #316]	; (8004f10 <HAL_GPIO_DeInit+0x190>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d007      	beq.n	8004de8 <HAL_GPIO_DeInit+0x68>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a4e      	ldr	r2, [pc, #312]	; (8004f14 <HAL_GPIO_DeInit+0x194>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d101      	bne.n	8004de4 <HAL_GPIO_DeInit+0x64>
 8004de0:	2302      	movs	r3, #2
 8004de2:	e004      	b.n	8004dee <HAL_GPIO_DeInit+0x6e>
 8004de4:	2307      	movs	r3, #7
 8004de6:	e002      	b.n	8004dee <HAL_GPIO_DeInit+0x6e>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_GPIO_DeInit+0x6e>
 8004dec:	2300      	movs	r3, #0
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	f002 0203 	and.w	r2, r2, #3
 8004df4:	0092      	lsls	r2, r2, #2
 8004df6:	4093      	lsls	r3, r2
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d136      	bne.n	8004e6c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004dfe:	4b46      	ldr	r3, [pc, #280]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e00:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	43db      	mvns	r3, r3
 8004e08:	4943      	ldr	r1, [pc, #268]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004e10:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	493f      	ldr	r1, [pc, #252]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004e22:	4b3d      	ldr	r3, [pc, #244]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	493b      	ldr	r1, [pc, #236]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004e30:	4b39      	ldr	r3, [pc, #228]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	43db      	mvns	r3, r3
 8004e38:	4937      	ldr	r1, [pc, #220]	; (8004f18 <HAL_GPIO_DeInit+0x198>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	2207      	movs	r2, #7
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004e4e:	4a2f      	ldr	r2, [pc, #188]	; (8004f0c <HAL_GPIO_DeInit+0x18c>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	482b      	ldr	r0, [pc, #172]	; (8004f0c <HAL_GPIO_DeInit+0x18c>)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	089b      	lsrs	r3, r3, #2
 8004e64:	400a      	ands	r2, r1
 8004e66:	3302      	adds	r3, #2
 8004e68:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2103      	movs	r1, #3
 8004e76:	fa01 f303 	lsl.w	r3, r1, r3
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	08da      	lsrs	r2, r3, #3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3208      	adds	r2, #8
 8004e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	220f      	movs	r2, #15
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43db      	mvns	r3, r3
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	08d2      	lsrs	r2, r2, #3
 8004ea0:	4019      	ands	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	3208      	adds	r2, #8
 8004ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	689a      	ldr	r2, [r3, #8]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2103      	movs	r1, #3
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	2103      	movs	r1, #3
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	401a      	ands	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	3301      	adds	r3, #1
 8004eee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f47f af49 	bne.w	8004d90 <HAL_GPIO_DeInit+0x10>
  }
}
 8004efe:	bf00      	nop
 8004f00:	bf00      	nop
 8004f02:	371c      	adds	r7, #28
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	40010000 	.word	0x40010000
 8004f10:	48000400 	.word	0x48000400
 8004f14:	48000800 	.word	0x48000800
 8004f18:	58000800 	.word	0x58000800

08004f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	460b      	mov	r3, r1
 8004f26:	807b      	strh	r3, [r7, #2]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f2c:	787b      	ldrb	r3, [r7, #1]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f32:	887a      	ldrh	r2, [r7, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f38:	e002      	b.n	8004f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f3a:	887a      	ldrh	r2, [r7, #2]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f56:	4b08      	ldr	r3, [pc, #32]	; (8004f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d006      	beq.n	8004f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f62:	4a05      	ldr	r2, [pc, #20]	; (8004f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f64:	88fb      	ldrh	r3, [r7, #6]
 8004f66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f004 fe86 	bl	8009c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	58000800 	.word	0x58000800

08004f7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a03      	ldr	r2, [pc, #12]	; (8004f94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8a:	6013      	str	r3, [r2, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	58000400 	.word	0x58000400

08004f98 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10c      	bne.n	8004fc4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004fb8:	f000 f83c 	bl	8005034 <HAL_PWREx_DisableLowPowerRunMode>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d008      	beq.n	8004fd4 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004fc2:	e015      	b.n	8004ff0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004fd0:	f000 f822 	bl	8005018 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <HAL_PWR_EnterSLEEPMode+0x64>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	4a08      	ldr	r2, [pc, #32]	; (8004ffc <HAL_PWR_EnterSLEEPMode+0x64>)
 8004fda:	f023 0304 	bic.w	r3, r3, #4
 8004fde:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004fe6:	bf30      	wfi
 8004fe8:	e002      	b.n	8004ff0 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004fea:	bf40      	sev
    __WFE();
 8004fec:	bf20      	wfe
    __WFE();
 8004fee:	bf20      	wfe
  }
}
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	58000400 	.word	0x58000400
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <HAL_PWREx_GetVoltageRange+0x14>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	58000400 	.word	0x58000400

08005018 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a03      	ldr	r2, [pc, #12]	; (8005030 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8005022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005026:	6013      	str	r3, [r2, #0]
}
 8005028:	bf00      	nop
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	58000400 	.word	0x58000400

08005034 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800503a:	4b16      	ldr	r3, [pc, #88]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a15      	ldr	r2, [pc, #84]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005044:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2232      	movs	r2, #50	; 0x32
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	4a12      	ldr	r2, [pc, #72]	; (800509c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	0c9b      	lsrs	r3, r3, #18
 8005058:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800505a:	e002      	b.n	8005062 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800506e:	d102      	bne.n	8005076 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f2      	bne.n	800505c <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005076:	4b07      	ldr	r3, [pc, #28]	; (8005094 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800507e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005082:	d101      	bne.n	8005088 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e000      	b.n	800508a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	58000400 	.word	0x58000400
 8005098:	20000000 	.word	0x20000000
 800509c:	431bde83 	.word	0x431bde83

080050a0 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80050aa:	4b10      	ldr	r3, [pc, #64]	; (80050ec <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	4a0e      	ldr	r2, [pc, #56]	; (80050ec <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80050b4:	f043 0302 	orr.w	r3, r3, #2
 80050b8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	4a0c      	ldr	r2, [pc, #48]	; (80050f0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80050c0:	f043 0304 	orr.w	r3, r3, #4
 80050c4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80050c6:	79fb      	ldrb	r3, [r7, #7]
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80050cc:	bf30      	wfi
 80050ce:	e002      	b.n	80050d6 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80050d0:	bf40      	sev
    __WFE();
 80050d2:	bf20      	wfe
    __WFE();
 80050d4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80050dc:	f023 0304 	bic.w	r3, r3, #4
 80050e0:	6113      	str	r3, [r2, #16]
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bc80      	pop	{r7}
 80050ea:	4770      	bx	lr
 80050ec:	58000400 	.word	0x58000400
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005104:	d101      	bne.n	800510a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	58000400 	.word	0x58000400

08005118 <LL_RCC_HSE_EnableTcxo>:
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005126:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <LL_RCC_HSE_DisableTcxo>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005142:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005162:	d101      	bne.n	8005168 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <LL_RCC_HSE_Enable>:
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <LL_RCC_HSE_Disable>:
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_HSE_IsReady>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051bc:	d101      	bne.n	80051c2 <LL_RCC_HSE_IsReady+0x18>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <LL_RCC_HSE_IsReady+0x1a>
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <LL_RCC_HSI_Enable>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051de:	6013      	str	r3, [r2, #0]
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <LL_RCC_HSI_Disable>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <LL_RCC_HSI_IsReady>:
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005216:	d101      	bne.n	800521c <LL_RCC_HSI_IsReady+0x18>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <LL_RCC_HSI_IsReady+0x1a>
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <LL_RCC_LSE_IsReady>:
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d101      	bne.n	8005266 <LL_RCC_LSE_IsReady+0x18>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <LL_RCC_LSE_IsReady+0x1a>
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <LL_RCC_LSI_Enable>:
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <LL_RCC_LSI_Disable>:
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <LL_RCC_LSI_IsReady>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d101      	bne.n	80052c8 <LL_RCC_LSI_IsReady+0x18>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <LL_RCC_LSI_IsReady+0x1a>
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_MSI_Enable>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_MSI_Disable>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	6013      	str	r3, [r2, #0]
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <LL_RCC_MSI_IsReady>:
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d101      	bne.n	8005320 <LL_RCC_MSI_IsReady+0x16>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <LL_RCC_MSI_IsReady+0x18>
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d101      	bne.n	8005340 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <LL_RCC_MSI_GetRange>:
{
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <LL_RCC_SetSysClkSource>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_GetSysClkSource>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 030c 	and.w	r3, r3, #12
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <LL_RCC_SetAHBPrescaler>:
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <LL_RCC_SetAHB3Prescaler>:
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005412:	f023 020f 	bic.w	r2, r3, #15
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	091b      	lsrs	r3, r3, #4
 800541a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	bc80      	pop	{r7}
 800542c:	4770      	bx	lr

0800542e <LL_RCC_SetAPB1Prescaler>:
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005440:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <LL_RCC_SetAPB2Prescaler>:
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005466:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <LL_RCC_GetAHBPrescaler>:
{
 800547a:	b480      	push	{r7}
 800547c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800547e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005488:	4618      	mov	r0, r3
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <LL_RCC_GetAHB3Prescaler>:
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005498:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <LL_RCC_GetAPB1Prescaler>:
{
 80054aa:	b480      	push	{r7}
 80054ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <LL_RCC_GetAPB2Prescaler>:
{
 80054c0:	b480      	push	{r7}
 80054c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80054d6:	b480      	push	{r7}
 80054d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80054da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054e8:	6013      	str	r3, [r2, #0]
}
 80054ea:	bf00      	nop
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80054f2:	b480      	push	{r7}
 80054f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80054f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005500:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr

0800550e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005520:	d101      	bne.n	8005526 <LL_RCC_PLL_IsReady+0x18>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <LL_RCC_PLL_IsReady+0x1a>
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr

08005530 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	0a1b      	lsrs	r3, r3, #8
 800553c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005540:	4618      	mov	r0, r3
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005556:	4618      	mov	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800555e:	b480      	push	{r7}
 8005560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800556c:	4618      	mov	r0, r3
 800556e:	46bd      	mov	sp, r7
 8005570:	bc80      	pop	{r7}
 8005572:	4770      	bx	lr

08005574 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0303 	and.w	r3, r3, #3
}
 8005582:	4618      	mov	r0, r3
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800558e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d101      	bne.n	80055a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bc80      	pop	{r7}
 80055aa:	4770      	bx	lr

080055ac <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c0:	d101      	bne.n	80055c6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e2:	d101      	bne.n	80055e8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80055f2:	b480      	push	{r7}
 80055f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80055f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005604:	d101      	bne.n	800560a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	46bd      	mov	sp, r7
 8005610:	bc80      	pop	{r7}
 8005612:	4770      	bx	lr

08005614 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e38b      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005626:	f7ff fece 	bl	80053c6 <LL_RCC_GetSysClkSource>
 800562a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800562c:	f7ff ffa2 	bl	8005574 <LL_RCC_PLL_GetMainSource>
 8005630:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	f000 80c9 	beq.w	80057d2 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d005      	beq.n	8005652 <HAL_RCC_OscConfig+0x3e>
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2b0c      	cmp	r3, #12
 800564a:	d17b      	bne.n	8005744 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d178      	bne.n	8005744 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005652:	f7ff fe5a 	bl	800530a <LL_RCC_MSI_IsReady>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_RCC_OscConfig+0x54>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e36a      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0308 	and.w	r3, r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_RCC_OscConfig+0x72>
 800567a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005684:	e006      	b.n	8005694 <HAL_RCC_OscConfig+0x80>
 8005686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005694:	4293      	cmp	r3, r2
 8005696:	d222      	bcs.n	80056de <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fd51 	bl	8006144 <RCC_SetFlashLatencyFromMSIRange>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e348      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b6:	f043 0308 	orr.w	r3, r3, #8
 80056ba:	6013      	str	r3, [r2, #0]
 80056bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056ce:	4313      	orrs	r3, r2
 80056d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fe4e 	bl	8005378 <LL_RCC_MSI_SetCalibTrimming>
 80056dc:	e021      	b.n	8005722 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056e8:	f043 0308 	orr.w	r3, r3, #8
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005700:	4313      	orrs	r3, r2
 8005702:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fe35 	bl	8005378 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fd16 	bl	8006144 <RCC_SetFlashLatencyFromMSIRange>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e30d      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005722:	f000 fcd7 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8005726:	4603      	mov	r3, r0
 8005728:	4aa1      	ldr	r2, [pc, #644]	; (80059b0 <HAL_RCC_OscConfig+0x39c>)
 800572a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800572c:	4ba1      	ldr	r3, [pc, #644]	; (80059b4 <HAL_RCC_OscConfig+0x3a0>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f7fc facf 	bl	8001cd4 <HAL_InitTick>
 8005736:	4603      	mov	r3, r0
 8005738:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800573a:	7cfb      	ldrb	r3, [r7, #19]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d047      	beq.n	80057d0 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005740:	7cfb      	ldrb	r3, [r7, #19]
 8005742:	e2fc      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02c      	beq.n	80057a6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800574c:	f7ff fdc1 	bl	80052d2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005750:	f7fc faca 	bl	8001ce8 <HAL_GetTick>
 8005754:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005758:	f7fc fac6 	bl	8001ce8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e2e9      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 800576a:	f7ff fdce 	bl	800530a <LL_RCC_MSI_IsReady>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f1      	beq.n	8005758 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800577e:	f043 0308 	orr.w	r3, r3, #8
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fdea 	bl	8005378 <LL_RCC_MSI_SetCalibTrimming>
 80057a4:	e015      	b.n	80057d2 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057a6:	f7ff fda2 	bl	80052ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057aa:	f7fc fa9d 	bl	8001ce8 <HAL_GetTick>
 80057ae:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057b2:	f7fc fa99 	bl	8001ce8 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e2bc      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80057c4:	f7ff fda1 	bl	800530a <LL_RCC_MSI_IsReady>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f1      	bne.n	80057b2 <HAL_RCC_OscConfig+0x19e>
 80057ce:	e000      	b.n	80057d2 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d05f      	beq.n	800589e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_OscConfig+0x1dc>
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b0c      	cmp	r3, #12
 80057e8:	d10d      	bne.n	8005806 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d10a      	bne.n	8005806 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057f0:	f7ff fcdb 	bl	80051aa <LL_RCC_HSE_IsReady>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d050      	beq.n	800589c <HAL_RCC_OscConfig+0x288>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d14c      	bne.n	800589c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e29b      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005818:	4313      	orrs	r3, r2
 800581a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d102      	bne.n	800582c <HAL_RCC_OscConfig+0x218>
 8005826:	f7ff fca4 	bl	8005172 <LL_RCC_HSE_Enable>
 800582a:	e00d      	b.n	8005848 <HAL_RCC_OscConfig+0x234>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8005834:	d104      	bne.n	8005840 <HAL_RCC_OscConfig+0x22c>
 8005836:	f7ff fc6f 	bl	8005118 <LL_RCC_HSE_EnableTcxo>
 800583a:	f7ff fc9a 	bl	8005172 <LL_RCC_HSE_Enable>
 800583e:	e003      	b.n	8005848 <HAL_RCC_OscConfig+0x234>
 8005840:	f7ff fca5 	bl	800518e <LL_RCC_HSE_Disable>
 8005844:	f7ff fc76 	bl	8005134 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d012      	beq.n	8005876 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005850:	f7fc fa4a 	bl	8001ce8 <HAL_GetTick>
 8005854:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005856:	e008      	b.n	800586a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005858:	f7fc fa46 	bl	8001ce8 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	; 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e269      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 800586a:	f7ff fc9e 	bl	80051aa <LL_RCC_HSE_IsReady>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d0f1      	beq.n	8005858 <HAL_RCC_OscConfig+0x244>
 8005874:	e013      	b.n	800589e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005876:	f7fc fa37 	bl	8001ce8 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800587c:	e008      	b.n	8005890 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800587e:	f7fc fa33 	bl	8001ce8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b64      	cmp	r3, #100	; 0x64
 800588a:	d901      	bls.n	8005890 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e256      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005890:	f7ff fc8b 	bl	80051aa <LL_RCC_HSE_IsReady>
 8005894:	4603      	mov	r3, r0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f1      	bne.n	800587e <HAL_RCC_OscConfig+0x26a>
 800589a:	e000      	b.n	800589e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800589c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d04b      	beq.n	8005942 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d005      	beq.n	80058bc <HAL_RCC_OscConfig+0x2a8>
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	d113      	bne.n	80058de <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d110      	bne.n	80058de <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058bc:	f7ff fca2 	bl	8005204 <LL_RCC_HSI_IsReady>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_RCC_OscConfig+0x2be>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e235      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fca5 	bl	8005226 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058dc:	e031      	b.n	8005942 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d019      	beq.n	800591a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058e6:	f7ff fc71 	bl	80051cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ea:	f7fc f9fd 	bl	8001ce8 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f2:	f7fc f9f9 	bl	8001ce8 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e21c      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005904:	f7ff fc7e 	bl	8005204 <LL_RCC_HSI_IsReady>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f1      	beq.n	80058f2 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	695b      	ldr	r3, [r3, #20]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fc87 	bl	8005226 <LL_RCC_HSI_SetCalibTrimming>
 8005918:	e013      	b.n	8005942 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591a:	f7ff fc65 	bl	80051e8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591e:	f7fc f9e3 	bl	8001ce8 <HAL_GetTick>
 8005922:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005926:	f7fc f9df 	bl	8001ce8 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e202      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005938:	f7ff fc64 	bl	8005204 <LL_RCC_HSI_IsReady>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f1      	bne.n	8005926 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d06f      	beq.n	8005a2e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d057      	beq.n	8005a06 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8005956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800595a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800595e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	429a      	cmp	r2, r3
 800596c:	d036      	beq.n	80059dc <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d006      	beq.n	8005986 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e1db      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d018      	beq.n	80059c2 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8005990:	f7ff fc7e 	bl	8005290 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005994:	f7fc f9a8 	bl	8001ce8 <HAL_GetTick>
 8005998:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800599a:	e00d      	b.n	80059b8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800599c:	f7fc f9a4 	bl	8001ce8 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b11      	cmp	r3, #17
 80059a8:	d906      	bls.n	80059b8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e1c7      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
 80059ae:	bf00      	nop
 80059b0:	20000000 	.word	0x20000000
 80059b4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80059b8:	f7ff fc7a 	bl	80052b0 <LL_RCC_LSI_IsReady>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1ec      	bne.n	800599c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ca:	f023 0210 	bic.w	r2, r3, #16
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059dc:	f7ff fc48 	bl	8005270 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e0:	f7fc f982 	bl	8001ce8 <HAL_GetTick>
 80059e4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e8:	f7fc f97e 	bl	8001ce8 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b11      	cmp	r3, #17
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e1a1      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 80059fa:	f7ff fc59 	bl	80052b0 <LL_RCC_LSI_IsReady>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d0f1      	beq.n	80059e8 <HAL_RCC_OscConfig+0x3d4>
 8005a04:	e013      	b.n	8005a2e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a06:	f7ff fc43 	bl	8005290 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0a:	f7fc f96d 	bl	8001ce8 <HAL_GetTick>
 8005a0e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a10:	e008      	b.n	8005a24 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a12:	f7fc f969 	bl	8001ce8 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	2b11      	cmp	r3, #17
 8005a1e:	d901      	bls.n	8005a24 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	e18c      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a24:	f7ff fc44 	bl	80052b0 <LL_RCC_LSI_IsReady>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f1      	bne.n	8005a12 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80d8 	beq.w	8005bec <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a3c:	f7ff fb5a 	bl	80050f4 <LL_PWR_IsEnabledBkUpAccess>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d113      	bne.n	8005a6e <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a46:	f7ff fa99 	bl	8004f7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4a:	f7fc f94d 	bl	8001ce8 <HAL_GetTick>
 8005a4e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a52:	f7fc f949 	bl	8001ce8 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e16c      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a64:	f7ff fb46 	bl	80050f4 <LL_PWR_IsEnabledBkUpAccess>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d0f1      	beq.n	8005a52 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d07b      	beq.n	8005b6e <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b85      	cmp	r3, #133	; 0x85
 8005a7c:	d003      	beq.n	8005a86 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d109      	bne.n	8005a9a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a92:	f043 0304 	orr.w	r3, r3, #4
 8005a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fc f925 	bl	8001ce8 <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aac:	f043 0301 	orr.w	r3, r3, #1
 8005ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ab4:	e00a      	b.n	8005acc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab6:	f7fc f917 	bl	8001ce8 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d901      	bls.n	8005acc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e138      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005acc:	f7ff fbbf 	bl	800524e <LL_RCC_LSE_IsReady>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0ef      	beq.n	8005ab6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b81      	cmp	r3, #129	; 0x81
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	2b85      	cmp	r3, #133	; 0x85
 8005ae4:	d121      	bne.n	8005b2a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae6:	f7fc f8ff 	bl	8001ce8 <HAL_GetTick>
 8005aea:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b00:	e00a      	b.n	8005b18 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b02:	f7fc f8f1 	bl	8001ce8 <HAL_GetTick>
 8005b06:	4602      	mov	r2, r0
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e112      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d0ec      	beq.n	8005b02 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005b28:	e060      	b.n	8005bec <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2a:	f7fc f8dd 	bl	8001ce8 <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fc f8cf 	bl	8001ce8 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0f0      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1ec      	bne.n	8005b46 <HAL_RCC_OscConfig+0x532>
 8005b6c:	e03e      	b.n	8005bec <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6e:	f7fc f8bb 	bl	8001ce8 <HAL_GetTick>
 8005b72:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b88:	e00a      	b.n	8005ba0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b8a:	f7fc f8ad 	bl	8001ce8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e0ce      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1ec      	bne.n	8005b8a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb0:	f7fc f89a 	bl	8001ce8 <HAL_GetTick>
 8005bb4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc2:	f023 0301 	bic.w	r3, r3, #1
 8005bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bcc:	f7fc f88c 	bl	8001ce8 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0ad      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005be2:	f7ff fb34 	bl	800524e <LL_RCC_LSE_IsReady>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1ef      	bne.n	8005bcc <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80a3 	beq.w	8005d3c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b0c      	cmp	r3, #12
 8005bfa:	d076      	beq.n	8005cea <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d14b      	bne.n	8005c9c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c04:	f7ff fc75 	bl	80054f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fc f86e 	bl	8001ce8 <HAL_GetTick>
 8005c0c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fc f86a 	bl	8001ce8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b0a      	cmp	r3, #10
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e08d      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c22:	f7ff fc74 	bl	800550e <LL_RCC_PLL_IsReady>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1f1      	bne.n	8005c10 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	4b45      	ldr	r3, [pc, #276]	; (8005d48 <HAL_RCC_OscConfig+0x734>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c3e:	4311      	orrs	r1, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c44:	0212      	lsls	r2, r2, #8
 8005c46:	4311      	orrs	r1, r2
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c4c:	4311      	orrs	r1, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c52:	4311      	orrs	r1, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c62:	f7ff fc38 	bl	80054d6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fc f837 	bl	8001ce8 <HAL_GetTick>
 8005c7a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005c7c:	e008      	b.n	8005c90 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c7e:	f7fc f833 	bl	8001ce8 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b0a      	cmp	r3, #10
 8005c8a:	d901      	bls.n	8005c90 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e056      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005c90:	f7ff fc3d 	bl	800550e <LL_RCC_PLL_IsReady>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f1      	beq.n	8005c7e <HAL_RCC_OscConfig+0x66a>
 8005c9a:	e04f      	b.n	8005d3c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9c:	f7ff fc29 	bl	80054f2 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cba:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc2:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fc f810 	bl	8001ce8 <HAL_GetTick>
 8005cc8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fc f80c 	bl	8001ce8 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b0a      	cmp	r3, #10
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e02f      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005cde:	f7ff fc16 	bl	800550e <LL_RCC_PLL_IsReady>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f1      	bne.n	8005ccc <HAL_RCC_OscConfig+0x6b8>
 8005ce8:	e028      	b.n	8005d3c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e023      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f003 0203 	and.w	r2, r3, #3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d115      	bne.n	8005d38 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d10e      	bne.n	8005d38 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	021b      	lsls	r3, r3, #8
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d106      	bne.n	8005d38 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d001      	beq.n	8005d3c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	11c1808c 	.word	0x11c1808c

08005d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d101      	bne.n	8005d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e10f      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d60:	4b89      	ldr	r3, [pc, #548]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d91b      	bls.n	8005da6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b86      	ldr	r3, [pc, #536]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f023 0207 	bic.w	r2, r3, #7
 8005d76:	4984      	ldr	r1, [pc, #528]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7e:	f7fb ffb3 	bl	8001ce8 <HAL_GetTick>
 8005d82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d84:	e008      	b.n	8005d98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d86:	f7fb ffaf 	bl	8001ce8 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e0f3      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d98:	4b7b      	ldr	r3, [pc, #492]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d1ef      	bne.n	8005d86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d016      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fb10 	bl	80053dc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dbc:	f7fb ff94 	bl	8001ce8 <HAL_GetTick>
 8005dc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dc4:	f7fb ff90 	bl	8001ce8 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e0d4      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dd6:	f7ff fbd8 	bl	800558a <LL_RCC_IsActiveFlag_HPRE>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f1      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d016      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	4618      	mov	r0, r3
 8005df2:	f7ff fb06 	bl	8005402 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005df6:	f7fb ff77 	bl	8001ce8 <HAL_GetTick>
 8005dfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005dfc:	e008      	b.n	8005e10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dfe:	f7fb ff73 	bl	8001ce8 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e0b7      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e10:	f7ff fbcc 	bl	80055ac <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f1      	beq.n	8005dfe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d016      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f7ff faff 	bl	800542e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e30:	f7fb ff5a 	bl	8001ce8 <HAL_GetTick>
 8005e34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e36:	e008      	b.n	8005e4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e38:	f7fb ff56 	bl	8001ce8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d901      	bls.n	8005e4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e09a      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e4a:	f7ff fbc1 	bl	80055d0 <LL_RCC_IsActiveFlag_PPRE1>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f1      	beq.n	8005e38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff faf4 	bl	8005454 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e6c:	f7fb ff3c 	bl	8001ce8 <HAL_GetTick>
 8005e70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e74:	f7fb ff38 	bl	8001ce8 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e07c      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e86:	f7ff fbb4 	bl	80055f2 <LL_RCC_IsActiveFlag_PPRE2>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f1      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d043      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d106      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ea4:	f7ff f981 	bl	80051aa <LL_RCC_HSE_IsReady>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d11e      	bne.n	8005eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e066      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b03      	cmp	r3, #3
 8005eb8:	d106      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005eba:	f7ff fb28 	bl	800550e <LL_RCC_PLL_IsReady>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d113      	bne.n	8005eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e05b      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005ed0:	f7ff fa1b 	bl	800530a <LL_RCC_MSI_IsReady>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d108      	bne.n	8005eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e050      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ede:	f7ff f991 	bl	8005204 <LL_RCC_HSI_IsReady>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e049      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fa55 	bl	80053a0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef6:	f7fb fef7 	bl	8001ce8 <HAL_GetTick>
 8005efa:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efc:	e00a      	b.n	8005f14 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005efe:	f7fb fef3 	bl	8001ce8 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e035      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f14:	f7ff fa57 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d1ec      	bne.n	8005efe <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f24:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d21b      	bcs.n	8005f6a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f023 0207 	bic.w	r2, r3, #7
 8005f3a:	4913      	ldr	r1, [pc, #76]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f42:	f7fb fed1 	bl	8001ce8 <HAL_GetTick>
 8005f46:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f4a:	f7fb fecd 	bl	8001ce8 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e011      	b.n	8005f80 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_RCC_ClockConfig+0x23c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0307 	and.w	r3, r3, #7
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d1ef      	bne.n	8005f4a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f6a:	f000 f8b3 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4a06      	ldr	r2, [pc, #24]	; (8005f8c <HAL_RCC_ClockConfig+0x240>)
 8005f72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f74:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_RCC_ClockConfig+0x244>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fb feab 	bl	8001cd4 <HAL_InitTick>
 8005f7e:	4603      	mov	r3, r0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	58004000 	.word	0x58004000
 8005f8c:	20000000 	.word	0x20000000
 8005f90:	20000004 	.word	0x20000004

08005f94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fa2:	f7ff fa10 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8005fa6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fa8:	f7ff fae4 	bl	8005574 <LL_RCC_PLL_GetMainSource>
 8005fac:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x2c>
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d139      	bne.n	800602e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d136      	bne.n	800602e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005fc0:	f7ff f9b3 	bl	800532a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d115      	bne.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x62>
 8005fca:	f7ff f9ae 	bl	800532a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d106      	bne.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x4e>
 8005fd4:	f7ff f9b9 	bl	800534a <LL_RCC_MSI_GetRange>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	e005      	b.n	8005fee <HAL_RCC_GetSysClockFreq+0x5a>
 8005fe2:	f7ff f9bd 	bl	8005360 <LL_RCC_MSI_GetRangeAfterStandby>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	0a1b      	lsrs	r3, r3, #8
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	4a36      	ldr	r2, [pc, #216]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ff4:	e014      	b.n	8006020 <HAL_RCC_GetSysClockFreq+0x8c>
 8005ff6:	f7ff f998 	bl	800532a <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <HAL_RCC_GetSysClockFreq+0x7a>
 8006000:	f7ff f9a3 	bl	800534a <LL_RCC_MSI_GetRange>
 8006004:	4603      	mov	r3, r0
 8006006:	091b      	lsrs	r3, r3, #4
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	e005      	b.n	800601a <HAL_RCC_GetSysClockFreq+0x86>
 800600e:	f7ff f9a7 	bl	8005360 <LL_RCC_MSI_GetRangeAfterStandby>
 8006012:	4603      	mov	r3, r0
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x134>)
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d115      	bne.n	8006054 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800602c:	e012      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b04      	cmp	r3, #4
 8006032:	d102      	bne.n	800603a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_RCC_GetSysClockFreq+0x138>)
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	e00c      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b08      	cmp	r3, #8
 800603e:	d109      	bne.n	8006054 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006040:	f7ff f886 	bl	8005150 <LL_RCC_HSE_IsEnabledDiv2>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d102      	bne.n	8006050 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <HAL_RCC_GetSysClockFreq+0x138>)
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006050:	4b1f      	ldr	r3, [pc, #124]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006052:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006054:	f7ff f9b7 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8006058:	4603      	mov	r3, r0
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d12f      	bne.n	80060be <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800605e:	f7ff fa89 	bl	8005574 <LL_RCC_PLL_GetMainSource>
 8006062:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b02      	cmp	r3, #2
 8006068:	d003      	beq.n	8006072 <HAL_RCC_GetSysClockFreq+0xde>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d003      	beq.n	8006078 <HAL_RCC_GetSysClockFreq+0xe4>
 8006070:	e00d      	b.n	800608e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006072:	4b16      	ldr	r3, [pc, #88]	; (80060cc <HAL_RCC_GetSysClockFreq+0x138>)
 8006074:	60fb      	str	r3, [r7, #12]
        break;
 8006076:	e00d      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006078:	f7ff f86a 	bl	8005150 <LL_RCC_HSE_IsEnabledDiv2>
 800607c:	4603      	mov	r3, r0
 800607e:	2b01      	cmp	r3, #1
 8006080:	d102      	bne.n	8006088 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006082:	4b12      	ldr	r3, [pc, #72]	; (80060cc <HAL_RCC_GetSysClockFreq+0x138>)
 8006084:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006086:	e005      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006088:	4b11      	ldr	r3, [pc, #68]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800608a:	60fb      	str	r3, [r7, #12]
        break;
 800608c:	e002      	b.n	8006094 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	60fb      	str	r3, [r7, #12]
        break;
 8006092:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006094:	f7ff fa4c 	bl	8005530 <LL_RCC_PLL_GetN>
 8006098:	4602      	mov	r2, r0
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	fb03 f402 	mul.w	r4, r3, r2
 80060a0:	f7ff fa5d 	bl	800555e <LL_RCC_PLL_GetDivider>
 80060a4:	4603      	mov	r3, r0
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	3301      	adds	r3, #1
 80060aa:	fbb4 f4f3 	udiv	r4, r4, r3
 80060ae:	f7ff fa4b 	bl	8005548 <LL_RCC_PLL_GetR>
 80060b2:	4603      	mov	r3, r0
 80060b4:	0f5b      	lsrs	r3, r3, #29
 80060b6:	3301      	adds	r3, #1
 80060b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80060bc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80060be:	697b      	ldr	r3, [r7, #20]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd90      	pop	{r4, r7, pc}
 80060c8:	0801d8c8 	.word	0x0801d8c8
 80060cc:	00f42400 	.word	0x00f42400
 80060d0:	01e84800 	.word	0x01e84800

080060d4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060d4:	b598      	push	{r3, r4, r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80060d8:	f7ff ff5c 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 80060dc:	4604      	mov	r4, r0
 80060de:	f7ff f9cc 	bl	800547a <LL_RCC_GetAHBPrescaler>
 80060e2:	4603      	mov	r3, r0
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	4a03      	ldr	r2, [pc, #12]	; (80060f8 <HAL_RCC_GetHCLKFreq+0x24>)
 80060ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	bd98      	pop	{r3, r4, r7, pc}
 80060f8:	0801d868 	.word	0x0801d868

080060fc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060fc:	b598      	push	{r3, r4, r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006100:	f7ff ffe8 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8006104:	4604      	mov	r4, r0
 8006106:	f7ff f9d0 	bl	80054aa <LL_RCC_GetAPB1Prescaler>
 800610a:	4603      	mov	r3, r0
 800610c:	0a1b      	lsrs	r3, r3, #8
 800610e:	4a03      	ldr	r2, [pc, #12]	; (800611c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006114:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006118:	4618      	mov	r0, r3
 800611a:	bd98      	pop	{r3, r4, r7, pc}
 800611c:	0801d8a8 	.word	0x0801d8a8

08006120 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006120:	b598      	push	{r3, r4, r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006124:	f7ff ffd6 	bl	80060d4 <HAL_RCC_GetHCLKFreq>
 8006128:	4604      	mov	r4, r0
 800612a:	f7ff f9c9 	bl	80054c0 <LL_RCC_GetAPB2Prescaler>
 800612e:	4603      	mov	r3, r0
 8006130:	0adb      	lsrs	r3, r3, #11
 8006132:	4a03      	ldr	r2, [pc, #12]	; (8006140 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	fa24 f303 	lsr.w	r3, r4, r3
}
 800613c:	4618      	mov	r0, r3
 800613e:	bd98      	pop	{r3, r4, r7, pc}
 8006140:	0801d8a8 	.word	0x0801d8a8

08006144 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	091b      	lsrs	r3, r3, #4
 8006150:	f003 030f 	and.w	r3, r3, #15
 8006154:	4a10      	ldr	r2, [pc, #64]	; (8006198 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8006156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800615c:	f7ff f998 	bl	8005490 <LL_RCC_GetAHB3Prescaler>
 8006160:	4603      	mov	r3, r0
 8006162:	091b      	lsrs	r3, r3, #4
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	4a0c      	ldr	r2, [pc, #48]	; (800619c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800616a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	0c9c      	lsrs	r4, r3, #18
 8006180:	f7fe ff3e 	bl	8005000 <HAL_PWREx_GetVoltageRange>
 8006184:	4603      	mov	r3, r0
 8006186:	4619      	mov	r1, r3
 8006188:	4620      	mov	r0, r4
 800618a:	f000 f80b 	bl	80061a4 <RCC_SetFlashLatency>
 800618e:	4603      	mov	r3, r0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	bd90      	pop	{r4, r7, pc}
 8006198:	0801d8c8 	.word	0x0801d8c8
 800619c:	0801d868 	.word	0x0801d868
 80061a0:	431bde83 	.word	0x431bde83

080061a4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	; 0x38
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80061ae:	4a3a      	ldr	r2, [pc, #232]	; (8006298 <RCC_SetFlashLatency+0xf4>)
 80061b0:	f107 0320 	add.w	r3, r7, #32
 80061b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061b8:	6018      	str	r0, [r3, #0]
 80061ba:	3304      	adds	r3, #4
 80061bc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80061be:	4a37      	ldr	r2, [pc, #220]	; (800629c <RCC_SetFlashLatency+0xf8>)
 80061c0:	f107 0318 	add.w	r3, r7, #24
 80061c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	3304      	adds	r3, #4
 80061cc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80061ce:	4a34      	ldr	r2, [pc, #208]	; (80062a0 <RCC_SetFlashLatency+0xfc>)
 80061d0:	f107 030c 	add.w	r3, r7, #12
 80061d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80061d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80061da:	2300      	movs	r3, #0
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e4:	d11b      	bne.n	800621e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061e6:	2300      	movs	r3, #0
 80061e8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ea:	e014      	b.n	8006216 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	3338      	adds	r3, #56	; 0x38
 80061f2:	443b      	add	r3, r7
 80061f4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d807      	bhi.n	8006210 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	3338      	adds	r3, #56	; 0x38
 8006206:	443b      	add	r3, r7
 8006208:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800620e:	e021      	b.n	8006254 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	3301      	adds	r3, #1
 8006214:	633b      	str	r3, [r7, #48]	; 0x30
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2b02      	cmp	r3, #2
 800621a:	d9e7      	bls.n	80061ec <RCC_SetFlashLatency+0x48>
 800621c:	e01a      	b.n	8006254 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800621e:	2300      	movs	r3, #0
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006222:	e014      	b.n	800624e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	3338      	adds	r3, #56	; 0x38
 800622a:	443b      	add	r3, r7
 800622c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006230:	461a      	mov	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4293      	cmp	r3, r2
 8006236:	d807      	bhi.n	8006248 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	3338      	adds	r3, #56	; 0x38
 800623e:	443b      	add	r3, r7
 8006240:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006246:	e005      	b.n	8006254 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	3301      	adds	r3, #1
 800624c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800624e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006250:	2b02      	cmp	r3, #2
 8006252:	d9e7      	bls.n	8006224 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006254:	4b13      	ldr	r3, [pc, #76]	; (80062a4 <RCC_SetFlashLatency+0x100>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f023 0207 	bic.w	r2, r3, #7
 800625c:	4911      	ldr	r1, [pc, #68]	; (80062a4 <RCC_SetFlashLatency+0x100>)
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	4313      	orrs	r3, r2
 8006262:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006264:	f7fb fd40 	bl	8001ce8 <HAL_GetTick>
 8006268:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800626a:	e008      	b.n	800627e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800626c:	f7fb fd3c 	bl	8001ce8 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	2b02      	cmp	r3, #2
 8006278:	d901      	bls.n	800627e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e007      	b.n	800628e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <RCC_SetFlashLatency+0x100>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0307 	and.w	r3, r3, #7
 8006286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006288:	429a      	cmp	r2, r3
 800628a:	d1ef      	bne.n	800626c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3738      	adds	r7, #56	; 0x38
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	0801cf34 	.word	0x0801cf34
 800629c:	0801cf3c 	.word	0x0801cf3c
 80062a0:	0801cf44 	.word	0x0801cf44
 80062a4:	58004000 	.word	0x58004000

080062a8 <LL_RCC_LSE_IsReady>:
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d101      	bne.n	80062c0 <LL_RCC_LSE_IsReady+0x18>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <LL_RCC_LSE_IsReady+0x1a>
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bc80      	pop	{r7}
 80062c8:	4770      	bx	lr

080062ca <LL_RCC_SetUSARTClockSource>:
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	0c1b      	lsrs	r3, r3, #16
 80062de:	43db      	mvns	r3, r3
 80062e0:	401a      	ands	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <LL_RCC_SetI2SClockSource>:
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800630e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr

08006324 <LL_RCC_SetLPUARTClockSource>:
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800632c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006334:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006338:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	bc80      	pop	{r7}
 800634c:	4770      	bx	lr

0800634e <LL_RCC_SetI2CClockSource>:
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006366:	43db      	mvns	r3, r3
 8006368:	401a      	ands	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	011b      	lsls	r3, r3, #4
 800636e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006376:	4313      	orrs	r3, r2
 8006378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	bc80      	pop	{r7}
 8006384:	4770      	bx	lr

08006386 <LL_RCC_SetLPTIMClockSource>:
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800638e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006392:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	43db      	mvns	r3, r3
 800639e:	401a      	ands	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	041b      	lsls	r3, r3, #16
 80063a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <LL_RCC_SetRNGClockSource>:
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80063c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80063cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <LL_RCC_SetADCClockSource>:
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80063ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	bc80      	pop	{r7}
 800640a:	4770      	bx	lr

0800640c <LL_RCC_SetRTCClockSource>:
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006420:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <LL_RCC_GetRTCClockSource>:
{
 8006436:	b480      	push	{r7}
 8006438:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800643a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr

0800644e <LL_RCC_ForceBackupDomainReset>:
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800645e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006466:	bf00      	nop
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr

0800646e <LL_RCC_ReleaseBackupDomainReset>:
{
 800646e:	b480      	push	{r7}
 8006470:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800647e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006486:	bf00      	nop
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr
	...

08006490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006498:	2300      	movs	r3, #0
 800649a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800649c:	2300      	movs	r3, #0
 800649e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80064a0:	2300      	movs	r3, #0
 80064a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d058      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80064b0:	f7fe fd64 	bl	8004f7c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064b4:	f7fb fc18 	bl	8001ce8 <HAL_GetTick>
 80064b8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80064ba:	e009      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064bc:	f7fb fc14 	bl	8001ce8 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d902      	bls.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	74fb      	strb	r3, [r7, #19]
        break;
 80064ce:	e006      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80064d0:	4b7b      	ldr	r3, [pc, #492]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064dc:	d1ee      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80064de:	7cfb      	ldrb	r3, [r7, #19]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d13c      	bne.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80064e4:	f7ff ffa7 	bl	8006436 <LL_RCC_GetRTCClockSource>
 80064e8:	4602      	mov	r2, r0
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d00f      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006500:	f7ff ffa5 	bl	800644e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006504:	f7ff ffb3 	bl	800646e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d014      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651c:	f7fb fbe4 	bl	8001ce8 <HAL_GetTick>
 8006520:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8006522:	e00b      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006524:	f7fb fbe0 	bl	8001ce8 <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006532:	4293      	cmp	r3, r2
 8006534:	d902      	bls.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	74fb      	strb	r3, [r7, #19]
            break;
 800653a:	e004      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 800653c:	f7ff feb4 	bl	80062a8 <LL_RCC_LSE_IsReady>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d1ee      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8006546:	7cfb      	ldrb	r3, [r7, #19]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff ff5b 	bl	800640c <LL_RCC_SetRTCClockSource>
 8006556:	e004      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006558:	7cfb      	ldrb	r3, [r7, #19]
 800655a:	74bb      	strb	r3, [r7, #18]
 800655c:	e001      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655e:	7cfb      	ldrb	r3, [r7, #19]
 8006560:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d004      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff fea9 	bl	80062ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d004      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff fe9e 	bl	80062ca <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d004      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fec0 	bl	8006324 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d004      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a1b      	ldr	r3, [r3, #32]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fee6 	bl	8006386 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fedb 	bl	8006386 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fed0 	bl	8006386 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fea9 	bl	800634e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fe9e 	bl	800634e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fe93 	bl	800634e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0310 	and.w	r3, r3, #16
 8006630:	2b00      	cmp	r3, #0
 8006632:	d011      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fe5e 	bl	80062fa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006656:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d010      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006668:	4618      	mov	r0, r3
 800666a:	f7ff fea5 	bl	80063b8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	2b00      	cmp	r3, #0
 8006674:	d107      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006680:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006684:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d011      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fea3 	bl	80063e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066a4:	d107      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066b4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80066b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	58000400 	.word	0x58000400

080066c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d068      	beq.n	80067a8 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7fb f850 	bl	8001790 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066f8:	4b2e      	ldr	r3, [pc, #184]	; (80067b4 <HAL_RTC_Init+0xf0>)
 80066fa:	22ca      	movs	r2, #202	; 0xca
 80066fc:	625a      	str	r2, [r3, #36]	; 0x24
 80066fe:	4b2d      	ldr	r3, [pc, #180]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006700:	2253      	movs	r2, #83	; 0x53
 8006702:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fa0f 	bl	8006b28 <RTC_EnterInitMode>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d13f      	bne.n	8006794 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006714:	4b27      	ldr	r3, [pc, #156]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	4a26      	ldr	r2, [pc, #152]	; (80067b4 <HAL_RTC_Init+0xf0>)
 800671a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800671e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006722:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006724:	4b23      	ldr	r3, [pc, #140]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6859      	ldr	r1, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	4319      	orrs	r1, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	430b      	orrs	r3, r1
 8006738:	491e      	ldr	r1, [pc, #120]	; (80067b4 <HAL_RTC_Init+0xf0>)
 800673a:	4313      	orrs	r3, r2
 800673c:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68da      	ldr	r2, [r3, #12]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	041b      	lsls	r3, r3, #16
 8006748:	491a      	ldr	r1, [pc, #104]	; (80067b4 <HAL_RTC_Init+0xf0>)
 800674a:	4313      	orrs	r3, r2
 800674c:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	430b      	orrs	r3, r1
 8006760:	4914      	ldr	r1, [pc, #80]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006762:	4313      	orrs	r3, r2
 8006764:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa12 	bl	8006b90 <RTC_ExitInitMode>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10e      	bne.n	8006794 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8006776:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a19      	ldr	r1, [r3, #32]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	4319      	orrs	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	430b      	orrs	r3, r1
 800678e:	4909      	ldr	r1, [pc, #36]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006790:	4313      	orrs	r3, r2
 8006792:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <HAL_RTC_Init+0xf0>)
 8006796:	22ff      	movs	r2, #255	; 0xff
 8006798:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	40002800 	.word	0x40002800

080067b8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d101      	bne.n	80067d6 <HAL_RTC_SetAlarm_IT+0x1e>
 80067d2:	2302      	movs	r3, #2
 80067d4:	e0f3      	b.n	80069be <HAL_RTC_SetAlarm_IT+0x206>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80067e6:	4b78      	ldr	r3, [pc, #480]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ee:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f6:	d06a      	beq.n	80068ce <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d13a      	bne.n	8006874 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067fe:	4b72      	ldr	r3, [pc, #456]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2200      	movs	r2, #0
 800680e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f000 f9f5 	bl	8006c0c <RTC_ByteToBcd2>
 8006822:	4603      	mov	r3, r0
 8006824:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f9ee 	bl	8006c0c <RTC_ByteToBcd2>
 8006830:	4603      	mov	r3, r0
 8006832:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006834:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	789b      	ldrb	r3, [r3, #2]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f9e6 	bl	8006c0c <RTC_ByteToBcd2>
 8006840:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006842:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	78db      	ldrb	r3, [r3, #3]
 800684a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800684c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006856:	4618      	mov	r0, r3
 8006858:	f000 f9d8 	bl	8006c0c <RTC_ByteToBcd2>
 800685c:	4603      	mov	r3, r0
 800685e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006860:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006868:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e02c      	b.n	80068ce <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800687c:	d00d      	beq.n	800689a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006886:	d008      	beq.n	800689a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006888:	4b4f      	ldr	r3, [pc, #316]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2200      	movs	r2, #0
 8006898:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	785b      	ldrb	r3, [r3, #1]
 80068a4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068a6:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80068ac:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	78db      	ldrb	r3, [r3, #3]
 80068b2:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80068b4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068bc:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80068be:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80068c4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ce:	4b3e      	ldr	r3, [pc, #248]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d0:	22ca      	movs	r2, #202	; 0xca
 80068d2:	625a      	str	r2, [r3, #36]	; 0x24
 80068d4:	4b3c      	ldr	r3, [pc, #240]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d6:	2253      	movs	r2, #83	; 0x53
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e2:	d12c      	bne.n	800693e <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068e4:	4b38      	ldr	r3, [pc, #224]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	4a37      	ldr	r2, [pc, #220]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068ee:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068f0:	4b35      	ldr	r3, [pc, #212]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80068f2:	2201      	movs	r2, #1
 80068f4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fc:	d107      	bne.n	800690e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4930      	ldr	r1, [pc, #192]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006908:	4313      	orrs	r3, r2
 800690a:	644b      	str	r3, [r1, #68]	; 0x44
 800690c:	e006      	b.n	800691c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800690e:	4a2e      	ldr	r2, [pc, #184]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006914:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800691c:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	f043 0201 	orr.w	r2, r3, #1
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	4a24      	ldr	r2, [pc, #144]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006936:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 800693a:	6193      	str	r3, [r2, #24]
 800693c:	e02b      	b.n	8006996 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800693e:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	4a21      	ldr	r2, [pc, #132]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006944:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006948:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800694a:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800694c:	2202      	movs	r2, #2
 800694e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d107      	bne.n	8006968 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4919      	ldr	r1, [pc, #100]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006962:	4313      	orrs	r3, r2
 8006964:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006966:	e006      	b.n	8006976 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006968:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800696e:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006976:	4a14      	ldr	r2, [pc, #80]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f043 0202 	orr.w	r2, r3, #2
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800698a:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	4a0e      	ldr	r2, [pc, #56]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 8006990:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8006994:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <HAL_RTC_SetAlarm_IT+0x214>)
 8006998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800699c:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <HAL_RTC_SetAlarm_IT+0x214>)
 800699e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069a6:	4b08      	ldr	r3, [pc, #32]	; (80069c8 <HAL_RTC_SetAlarm_IT+0x210>)
 80069a8:	22ff      	movs	r2, #255	; 0xff
 80069aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd90      	pop	{r4, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	40002800 	.word	0x40002800
 80069cc:	58000800 	.word	0x58000800

080069d0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <HAL_RTC_DeactivateAlarm+0x18>
 80069e4:	2302      	movs	r3, #2
 80069e6:	e048      	b.n	8006a7a <HAL_RTC_DeactivateAlarm+0xaa>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069f8:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 80069fa:	22ca      	movs	r2, #202	; 0xca
 80069fc:	625a      	str	r2, [r3, #36]	; 0x24
 80069fe:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a00:	2253      	movs	r2, #83	; 0x53
 8006a02:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0a:	d115      	bne.n	8006a38 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a16:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006a18:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1c:	4a19      	ldr	r2, [pc, #100]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a28:	f023 0201 	bic.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a30:	4b14      	ldr	r3, [pc, #80]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	65da      	str	r2, [r3, #92]	; 0x5c
 8006a36:	e014      	b.n	8006a62 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006a38:	4b12      	ldr	r3, [pc, #72]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	4a11      	ldr	r2, [pc, #68]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a3e:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006a42:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a48:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	f023 0202 	bic.w	r2, r3, #2
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a5c:	4b09      	ldr	r3, [pc, #36]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a5e:	2202      	movs	r2, #2
 8006a60:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a62:	4b08      	ldr	r3, [pc, #32]	; (8006a84 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr
 8006a84:	40002800 	.word	0x40002800

08006a88 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006a90:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006a92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d005      	beq.n	8006ab2 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006aa6:	4b0c      	ldr	r3, [pc, #48]	; (8006ad8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7fb fb46 	bl	800213e <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006abe:	2202      	movs	r2, #2
 8006ac0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f94a 	bl	8006d5c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40002800 	.word	0x40002800

08006adc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006ae4:	4b0f      	ldr	r3, [pc, #60]	; (8006b24 <HAL_RTC_WaitForSynchro+0x48>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4a0e      	ldr	r2, [pc, #56]	; (8006b24 <HAL_RTC_WaitForSynchro+0x48>)
 8006aea:	f023 0320 	bic.w	r3, r3, #32
 8006aee:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006af0:	f7fb f8fa 	bl	8001ce8 <HAL_GetTick>
 8006af4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006af6:	e009      	b.n	8006b0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006af8:	f7fb f8f6 	bl	8001ce8 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b06:	d901      	bls.n	8006b0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e006      	b.n	8006b1a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <HAL_RTC_WaitForSynchro+0x48>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0320 	and.w	r3, r3, #32
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0ef      	beq.n	8006af8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40002800 	.word	0x40002800

08006b28 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006b34:	4b15      	ldr	r3, [pc, #84]	; (8006b8c <RTC_EnterInitMode+0x64>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d120      	bne.n	8006b82 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b40:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <RTC_EnterInitMode+0x64>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	4a11      	ldr	r2, [pc, #68]	; (8006b8c <RTC_EnterInitMode+0x64>)
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006b4c:	f7fb f8cc 	bl	8001ce8 <HAL_GetTick>
 8006b50:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b52:	e00d      	b.n	8006b70 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b54:	f7fb f8c8 	bl	8001ce8 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b62:	d905      	bls.n	8006b70 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <RTC_EnterInitMode+0x64>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <RTC_EnterInitMode+0x5a>
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d1e8      	bne.n	8006b54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3710      	adds	r7, #16
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40002800 	.word	0x40002800

08006b90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4a19      	ldr	r2, [pc, #100]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10c      	bne.n	8006bce <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ff91 	bl	8006adc <HAL_RTC_WaitForSynchro>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01e      	beq.n	8006bfe <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2203      	movs	r2, #3
 8006bc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	73fb      	strb	r3, [r7, #15]
 8006bcc:	e017      	b.n	8006bfe <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bce:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	4a0d      	ldr	r2, [pc, #52]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006bd4:	f023 0320 	bic.w	r3, r3, #32
 8006bd8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff ff7e 	bl	8006adc <HAL_RTC_WaitForSynchro>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2203      	movs	r2, #3
 8006bea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	4a04      	ldr	r2, [pc, #16]	; (8006c08 <RTC_ExitInitMode+0x78>)
 8006bf8:	f043 0320 	orr.w	r3, r3, #32
 8006bfc:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40002800 	.word	0x40002800

08006c0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006c1e:	e005      	b.n	8006c2c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006c26:	7afb      	ldrb	r3, [r7, #11]
 8006c28:	3b0a      	subs	r3, #10
 8006c2a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006c2c:	7afb      	ldrb	r3, [r7, #11]
 8006c2e:	2b09      	cmp	r3, #9
 8006c30:	d8f6      	bhi.n	8006c20 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b2db      	uxtb	r3, r3
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bc80      	pop	{r7}
 8006c48:	4770      	bx	lr
	...

08006c4c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e01f      	b.n	8006ca2 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c72:	4b0e      	ldr	r3, [pc, #56]	; (8006cac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c74:	22ca      	movs	r2, #202	; 0xca
 8006c76:	625a      	str	r2, [r3, #36]	; 0x24
 8006c78:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c7a:	2253      	movs	r2, #83	; 0x53
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c84:	f043 0320 	orr.w	r3, r3, #32
 8006c88:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c8a:	4b08      	ldr	r3, [pc, #32]	; (8006cac <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c8c:	22ff      	movs	r2, #255	; 0xff
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr
 8006cac:	40002800 	.word	0x40002800

08006cb0 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RTCEx_SetSSRU_IT+0x16>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e027      	b.n	8006d16 <HAL_RTCEx_SetSSRU_IT+0x66>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006cd8:	22ca      	movs	r2, #202	; 0xca
 8006cda:	625a      	str	r2, [r3, #36]	; 0x24
 8006cdc:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006cde:	2253      	movs	r2, #83	; 0x53
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006cee:	4b0d      	ldr	r3, [pc, #52]	; (8006d24 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf4:	4a0b      	ldr	r2, [pc, #44]	; (8006d24 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006cfa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cfe:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006d00:	22ff      	movs	r2, #255	; 0xff
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr
 8006d20:	40002800 	.word	0x40002800
 8006d24:	58000800 	.word	0x58000800

08006d28 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006d30:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fb fa05 	bl	8002152 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	40002800 	.word	0x40002800

08006d5c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr
	...

08006d70 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b087      	sub	sp, #28
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d7c:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <HAL_RTCEx_BKUPWrite+0x2c>)
 8006d7e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4413      	add	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	4000b100 	.word	0x4000b100

08006da0 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006daa:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <HAL_RTCEx_BKUPRead+0x28>)
 8006dac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	4000b100 	.word	0x4000b100

08006dcc <LL_PWR_SetRadioBusyTrigger>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006dd4:	4b06      	ldr	r3, [pc, #24]	; (8006df0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ddc:	4904      	ldr	r1, [pc, #16]	; (8006df0 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	608b      	str	r3, [r1, #8]
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	58000400 	.word	0x58000400

08006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfe:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bc80      	pop	{r7}
 8006e0e:	4770      	bx	lr
 8006e10:	58000400 	.word	0x58000400

08006e14 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1e:	4a04      	ldr	r2, [pc, #16]	; (8006e30 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006e20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006e28:	bf00      	nop
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bc80      	pop	{r7}
 8006e2e:	4770      	bx	lr
 8006e30:	58000400 	.word	0x58000400

08006e34 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006e38:	4b03      	ldr	r3, [pc, #12]	; (8006e48 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e3e:	619a      	str	r2, [r3, #24]
}
 8006e40:	bf00      	nop
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bc80      	pop	{r7}
 8006e46:	4770      	bx	lr
 8006e48:	58000400 	.word	0x58000400

08006e4c <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006e50:	4b06      	ldr	r3, [pc, #24]	; (8006e6c <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d101      	bne.n	8006e60 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	58000400 	.word	0x58000400

08006e70 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006e70:	b480      	push	{r7}
 8006e72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006e74:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	f003 0304 	and.w	r3, r3, #4
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	d101      	bne.n	8006e84 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bc80      	pop	{r7}
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	58000400 	.word	0x58000400

08006e94 <LL_RCC_RF_DisableReset>:
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ea0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ea4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006eac:	bf00      	nop
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bc80      	pop	{r7}
 8006eb2:	4770      	bx	lr

08006eb4 <LL_RCC_IsRFUnderReset>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ec8:	d101      	bne.n	8006ece <LL_RCC_IsRFUnderReset+0x1a>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <LL_RCC_IsRFUnderReset+0x1c>
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006ee0:	4b06      	ldr	r3, [pc, #24]	; (8006efc <LL_EXTI_EnableIT_32_63+0x24>)
 8006ee2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006ee6:	4905      	ldr	r1, [pc, #20]	; (8006efc <LL_EXTI_EnableIT_32_63+0x24>)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc80      	pop	{r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	58000800 	.word	0x58000800

08006f00 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d103      	bne.n	8006f16 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	73fb      	strb	r3, [r7, #15]
    return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	e04b      	b.n	8006fae <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	799b      	ldrb	r3, [r3, #6]
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fa fd38 	bl	80019a0 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006f36:	f7ff ffad 	bl	8006e94 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006f3a:	4b1f      	ldr	r3, [pc, #124]	; (8006fb8 <HAL_SUBGHZ_Init+0xb8>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	1a9b      	subs	r3, r3, r2
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	0cdb      	lsrs	r3, r3, #19
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d105      	bne.n	8006f62 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	609a      	str	r2, [r3, #8]
      break;
 8006f60:	e007      	b.n	8006f72 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006f68:	f7ff ffa4 	bl	8006eb4 <LL_RCC_IsRFUnderReset>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1ee      	bne.n	8006f50 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f72:	f7ff ff3f 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006f76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f7a:	f7ff ffad 	bl	8006ed8 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006f7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f82:	f7ff ff23 	bl	8006dcc <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006f86:	f7ff ff55 	bl	8006e34 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 faad 	bl	80074f4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	719a      	strb	r2, [r3, #6]

  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000000 	.word	0x20000000

08006fbc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	817b      	strh	r3, [r7, #10]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	799b      	ldrb	r3, [r3, #6]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d14a      	bne.n	8007070 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	795b      	ldrb	r3, [r3, #5]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	e045      	b.n	8007072 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fb4c 	bl	8007690 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ff8:	f7ff ff0c 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006ffc:	210d      	movs	r1, #13
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fa98 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007004:	897b      	ldrh	r3, [r7, #10]
 8007006:	0a1b      	lsrs	r3, r3, #8
 8007008:	b29b      	uxth	r3, r3
 800700a:	b2db      	uxtb	r3, r3
 800700c:	4619      	mov	r1, r3
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 fa90 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007014:	897b      	ldrh	r3, [r7, #10]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	4619      	mov	r1, r3
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fa8a 	bl	8007534 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007020:	2300      	movs	r3, #0
 8007022:	82bb      	strh	r3, [r7, #20]
 8007024:	e00a      	b.n	800703c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007026:	8abb      	ldrh	r3, [r7, #20]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	4619      	mov	r1, r3
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 fa7f 	bl	8007534 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007036:	8abb      	ldrh	r3, [r7, #20]
 8007038:	3301      	adds	r3, #1
 800703a:	82bb      	strh	r3, [r7, #20]
 800703c:	8aba      	ldrh	r2, [r7, #20]
 800703e:	893b      	ldrh	r3, [r7, #8]
 8007040:	429a      	cmp	r2, r3
 8007042:	d3f0      	bcc.n	8007026 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007044:	f7ff fed6 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 fb45 	bl	80076d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
 800705a:	e001      	b.n	8007060 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	715a      	strb	r2, [r3, #5]

    return status;
 800706c:	7dfb      	ldrb	r3, [r7, #23]
 800706e:	e000      	b.n	8007072 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007070:	2302      	movs	r3, #2
  }
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b088      	sub	sp, #32
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	461a      	mov	r2, r3
 8007086:	460b      	mov	r3, r1
 8007088:	817b      	strh	r3, [r7, #10]
 800708a:	4613      	mov	r3, r2
 800708c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	799b      	ldrb	r3, [r3, #6]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d14a      	bne.n	8007132 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	795b      	ldrb	r3, [r3, #5]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e045      	b.n	8007134 <HAL_SUBGHZ_ReadRegisters+0xba>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2201      	movs	r2, #1
 80070ac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 faee 	bl	8007690 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070b4:	f7ff feae 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80070b8:	211d      	movs	r1, #29
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 fa3a 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80070c0:	897b      	ldrh	r3, [r7, #10]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	4619      	mov	r1, r3
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 fa32 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80070d0:	897b      	ldrh	r3, [r7, #10]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	4619      	mov	r1, r3
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa2c 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80070dc:	2100      	movs	r1, #0
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fa28 	bl	8007534 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070e4:	2300      	movs	r3, #0
 80070e6:	82fb      	strh	r3, [r7, #22]
 80070e8:	e009      	b.n	80070fe <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80070ea:	69b9      	ldr	r1, [r7, #24]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 fa77 	bl	80075e0 <SUBGHZSPI_Receive>
      pData++;
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	3301      	adds	r3, #1
 80070f6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80070f8:	8afb      	ldrh	r3, [r7, #22]
 80070fa:	3301      	adds	r3, #1
 80070fc:	82fb      	strh	r3, [r7, #22]
 80070fe:	8afa      	ldrh	r2, [r7, #22]
 8007100:	893b      	ldrh	r3, [r7, #8]
 8007102:	429a      	cmp	r2, r3
 8007104:	d3f1      	bcc.n	80070ea <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007106:	f7ff fe75 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 fae4 	bl	80076d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e001      	b.n	8007122 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2201      	movs	r2, #1
 8007126:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	715a      	strb	r2, [r3, #5]

    return status;
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	e000      	b.n	8007134 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007132:	2302      	movs	r3, #2
  }
}
 8007134:	4618      	mov	r0, r3
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	461a      	mov	r2, r3
 8007148:	460b      	mov	r3, r1
 800714a:	72fb      	strb	r3, [r7, #11]
 800714c:	4613      	mov	r3, r2
 800714e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	799b      	ldrb	r3, [r3, #6]
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	d14a      	bne.n	80071f0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	795b      	ldrb	r3, [r3, #5]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d101      	bne.n	8007166 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007162:	2302      	movs	r3, #2
 8007164:	e045      	b.n	80071f2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2201      	movs	r2, #1
 800716a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fa8f 	bl	8007690 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007172:	7afb      	ldrb	r3, [r7, #11]
 8007174:	2b84      	cmp	r3, #132	; 0x84
 8007176:	d002      	beq.n	800717e <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	2b94      	cmp	r3, #148	; 0x94
 800717c:	d103      	bne.n	8007186 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2201      	movs	r2, #1
 8007182:	711a      	strb	r2, [r3, #4]
 8007184:	e002      	b.n	800718c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800718c:	f7ff fe42 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	4619      	mov	r1, r3
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f9cd 	bl	8007534 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800719a:	2300      	movs	r3, #0
 800719c:	82bb      	strh	r3, [r7, #20]
 800719e:	e00a      	b.n	80071b6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80071a0:	8abb      	ldrh	r3, [r7, #20]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	4619      	mov	r1, r3
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f9c2 	bl	8007534 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80071b0:	8abb      	ldrh	r3, [r7, #20]
 80071b2:	3301      	adds	r3, #1
 80071b4:	82bb      	strh	r3, [r7, #20]
 80071b6:	8aba      	ldrh	r2, [r7, #20]
 80071b8:	893b      	ldrh	r3, [r7, #8]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3f0      	bcc.n	80071a0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071be:	f7ff fe19 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80071c2:	7afb      	ldrb	r3, [r7, #11]
 80071c4:	2b84      	cmp	r3, #132	; 0x84
 80071c6:	d002      	beq.n	80071ce <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 fa85 	bl	80076d8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	75fb      	strb	r3, [r7, #23]
 80071da:	e001      	b.n	80071e0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	715a      	strb	r2, [r3, #5]

    return status;
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	e000      	b.n	80071f2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b088      	sub	sp, #32
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	461a      	mov	r2, r3
 8007206:	460b      	mov	r3, r1
 8007208:	72fb      	strb	r3, [r7, #11]
 800720a:	4613      	mov	r3, r2
 800720c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	799b      	ldrb	r3, [r3, #6]
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d13d      	bne.n	8007298 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	795b      	ldrb	r3, [r3, #5]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007224:	2302      	movs	r3, #2
 8007226:	e038      	b.n	800729a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2201      	movs	r2, #1
 800722c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 fa2e 	bl	8007690 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007234:	f7ff fdee 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007238:	7afb      	ldrb	r3, [r7, #11]
 800723a:	4619      	mov	r1, r3
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 f979 	bl	8007534 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007242:	2100      	movs	r1, #0
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 f975 	bl	8007534 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800724a:	2300      	movs	r3, #0
 800724c:	82fb      	strh	r3, [r7, #22]
 800724e:	e009      	b.n	8007264 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007250:	69b9      	ldr	r1, [r7, #24]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f9c4 	bl	80075e0 <SUBGHZSPI_Receive>
      pData++;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	3301      	adds	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800725e:	8afb      	ldrh	r3, [r7, #22]
 8007260:	3301      	adds	r3, #1
 8007262:	82fb      	strh	r3, [r7, #22]
 8007264:	8afa      	ldrh	r2, [r7, #22]
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	429a      	cmp	r2, r3
 800726a:	d3f1      	bcc.n	8007250 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800726c:	f7ff fdc2 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fa31 	bl	80076d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	77fb      	strb	r3, [r7, #31]
 8007282:	e001      	b.n	8007288 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2201      	movs	r2, #1
 800728c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	715a      	strb	r2, [r3, #5]

    return status;
 8007294:	7ffb      	ldrb	r3, [r7, #31]
 8007296:	e000      	b.n	800729a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
  }
}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	461a      	mov	r2, r3
 80072ae:	460b      	mov	r3, r1
 80072b0:	72fb      	strb	r3, [r7, #11]
 80072b2:	4613      	mov	r3, r2
 80072b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	799b      	ldrb	r3, [r3, #6]
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d13e      	bne.n	800733e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	795b      	ldrb	r3, [r3, #5]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d101      	bne.n	80072cc <HAL_SUBGHZ_WriteBuffer+0x2a>
 80072c8:	2302      	movs	r3, #2
 80072ca:	e039      	b.n	8007340 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f9dc 	bl	8007690 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072d8:	f7ff fd9c 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80072dc:	210e      	movs	r1, #14
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 f928 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	4619      	mov	r1, r3
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f923 	bl	8007534 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072ee:	2300      	movs	r3, #0
 80072f0:	82bb      	strh	r3, [r7, #20]
 80072f2:	e00a      	b.n	800730a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80072f4:	8abb      	ldrh	r3, [r7, #20]
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 f918 	bl	8007534 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007304:	8abb      	ldrh	r3, [r7, #20]
 8007306:	3301      	adds	r3, #1
 8007308:	82bb      	strh	r3, [r7, #20]
 800730a:	8aba      	ldrh	r2, [r7, #20]
 800730c:	893b      	ldrh	r3, [r7, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	d3f0      	bcc.n	80072f4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007312:	f7ff fd6f 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 f9de 	bl	80076d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	75fb      	strb	r3, [r7, #23]
 8007328:	e001      	b.n	800732e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	715a      	strb	r2, [r3, #5]

    return status;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	e000      	b.n	8007340 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800733e:	2302      	movs	r3, #2
  }
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b088      	sub	sp, #32
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	461a      	mov	r2, r3
 8007354:	460b      	mov	r3, r1
 8007356:	72fb      	strb	r3, [r7, #11]
 8007358:	4613      	mov	r3, r2
 800735a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	799b      	ldrb	r3, [r3, #6]
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d141      	bne.n	80073ee <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	795b      	ldrb	r3, [r3, #5]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007372:	2302      	movs	r3, #2
 8007374:	e03c      	b.n	80073f0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 f987 	bl	8007690 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007382:	f7ff fd47 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007386:	211e      	movs	r1, #30
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 f8d3 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800738e:	7afb      	ldrb	r3, [r7, #11]
 8007390:	4619      	mov	r1, r3
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f000 f8ce 	bl	8007534 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007398:	2100      	movs	r1, #0
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 f8ca 	bl	8007534 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80073a0:	2300      	movs	r3, #0
 80073a2:	82fb      	strh	r3, [r7, #22]
 80073a4:	e009      	b.n	80073ba <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80073a6:	69b9      	ldr	r1, [r7, #24]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f919 	bl	80075e0 <SUBGHZSPI_Receive>
      pData++;
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	3301      	adds	r3, #1
 80073b2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80073b4:	8afb      	ldrh	r3, [r7, #22]
 80073b6:	3301      	adds	r3, #1
 80073b8:	82fb      	strh	r3, [r7, #22]
 80073ba:	8afa      	ldrh	r2, [r7, #22]
 80073bc:	893b      	ldrh	r3, [r7, #8]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d3f1      	bcc.n	80073a6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80073c2:	f7ff fd17 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f000 f986 	bl	80076d8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	77fb      	strb	r3, [r7, #31]
 80073d8:	e001      	b.n	80073de <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2200      	movs	r2, #0
 80073e8:	715a      	strb	r2, [r3, #5]

    return status;
 80073ea:	7ffb      	ldrb	r3, [r7, #31]
 80073ec:	e000      	b.n	80073f0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80073ee:	2302      	movs	r3, #2
  }
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3720      	adds	r7, #32
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007400:	2300      	movs	r3, #0
 8007402:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007404:	f107 020c 	add.w	r2, r7, #12
 8007408:	2302      	movs	r3, #2
 800740a:	2112      	movs	r1, #18
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff fef4 	bl	80071fa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007412:	7b3b      	ldrb	r3, [r7, #12]
 8007414:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8007416:	89fb      	ldrh	r3, [r7, #14]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	b21a      	sxth	r2, r3
 800741c:	7b7b      	ldrb	r3, [r7, #13]
 800741e:	b21b      	sxth	r3, r3
 8007420:	4313      	orrs	r3, r2
 8007422:	b21b      	sxth	r3, r3
 8007424:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007426:	89fb      	ldrh	r3, [r7, #14]
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f013 ff85 	bl	801b340 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007436:	89fb      	ldrh	r3, [r7, #14]
 8007438:	085b      	lsrs	r3, r3, #1
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f013 ff8a 	bl	801b35c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007448:	89fb      	ldrh	r3, [r7, #14]
 800744a:	089b      	lsrs	r3, r3, #2
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d002      	beq.n	800745a <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f013 ffd9 	bl	801b40c <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800745a:	89fb      	ldrh	r3, [r7, #14]
 800745c:	08db      	lsrs	r3, r3, #3
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f013 ffde 	bl	801b428 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800746c:	89fb      	ldrh	r3, [r7, #14]
 800746e:	091b      	lsrs	r3, r3, #4
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f013 ffe3 	bl	801b444 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	095b      	lsrs	r3, r3, #5
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f013 ffb0 	bl	801b3f0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007490:	89fb      	ldrh	r3, [r7, #14]
 8007492:	099b      	lsrs	r3, r3, #6
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f013 ff6b 	bl	801b378 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80074a2:	89fb      	ldrh	r3, [r7, #14]
 80074a4:	09db      	lsrs	r3, r3, #7
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00e      	beq.n	80074cc <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80074ae:	89fb      	ldrh	r3, [r7, #14]
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80074ba:	2101      	movs	r1, #1
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f013 ff69 	bl	801b394 <HAL_SUBGHZ_CADStatusCallback>
 80074c2:	e003      	b.n	80074cc <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f013 ff64 	bl	801b394 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80074cc:	89fb      	ldrh	r3, [r7, #14]
 80074ce:	0a5b      	lsrs	r3, r3, #9
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f013 ff79 	bl	801b3d0 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80074de:	f107 020c 	add.w	r2, r7, #12
 80074e2:	2302      	movs	r3, #2
 80074e4:	2102      	movs	r1, #2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7ff fe28 	bl	800713c <HAL_SUBGHZ_ExecSetCmd>
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074fc:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <SUBGHZSPI_Init+0x3c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0b      	ldr	r2, [pc, #44]	; (8007530 <SUBGHZSPI_Init+0x3c>)
 8007502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007506:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007508:	4a09      	ldr	r2, [pc, #36]	; (8007530 <SUBGHZSPI_Init+0x3c>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007510:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <SUBGHZSPI_Init+0x3c>)
 8007514:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007518:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800751a:	4b05      	ldr	r3, [pc, #20]	; (8007530 <SUBGHZSPI_Init+0x3c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a04      	ldr	r2, [pc, #16]	; (8007530 <SUBGHZSPI_Init+0x3c>)
 8007520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007524:	6013      	str	r3, [r2, #0]
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr
 8007530:	58010000 	.word	0x58010000

08007534 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	460b      	mov	r3, r1
 800753e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007544:	4b23      	ldr	r3, [pc, #140]	; (80075d4 <SUBGHZSPI_Transmit+0xa0>)
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	1a9b      	subs	r3, r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	0cdb      	lsrs	r3, r3, #19
 8007552:	2264      	movs	r2, #100	; 0x64
 8007554:	fb02 f303 	mul.w	r3, r2, r3
 8007558:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d105      	bne.n	800756c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	609a      	str	r2, [r3, #8]
      break;
 800756a:	e008      	b.n	800757e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	3b01      	subs	r3, #1
 8007570:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007572:	4b19      	ldr	r3, [pc, #100]	; (80075d8 <SUBGHZSPI_Transmit+0xa4>)
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	2b02      	cmp	r3, #2
 800757c:	d1ed      	bne.n	800755a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800757e:	4b17      	ldr	r3, [pc, #92]	; (80075dc <SUBGHZSPI_Transmit+0xa8>)
 8007580:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007588:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <SUBGHZSPI_Transmit+0xa0>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	0cdb      	lsrs	r3, r3, #19
 8007596:	2264      	movs	r2, #100	; 0x64
 8007598:	fb02 f303 	mul.w	r3, r2, r3
 800759c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	609a      	str	r2, [r3, #8]
      break;
 80075ae:	e008      	b.n	80075c2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80075b6:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <SUBGHZSPI_Transmit+0xa4>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d1ed      	bne.n	800759e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <SUBGHZSPI_Transmit+0xa4>)
 80075c4:	68db      	ldr	r3, [r3, #12]

  return status;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bc80      	pop	{r7}
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	20000000 	.word	0x20000000
 80075d8:	58010000 	.word	0x58010000
 80075dc:	5801000c 	.word	0x5801000c

080075e0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075ee:	4b25      	ldr	r3, [pc, #148]	; (8007684 <SUBGHZSPI_Receive+0xa4>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	0cdb      	lsrs	r3, r3, #19
 80075fc:	2264      	movs	r2, #100	; 0x64
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	609a      	str	r2, [r3, #8]
      break;
 8007614:	e008      	b.n	8007628 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3b01      	subs	r3, #1
 800761a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800761c:	4b1a      	ldr	r3, [pc, #104]	; (8007688 <SUBGHZSPI_Receive+0xa8>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b02      	cmp	r3, #2
 8007626:	d1ed      	bne.n	8007604 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007628:	4b18      	ldr	r3, [pc, #96]	; (800768c <SUBGHZSPI_Receive+0xac>)
 800762a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	22ff      	movs	r2, #255	; 0xff
 8007630:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007632:	4b14      	ldr	r3, [pc, #80]	; (8007684 <SUBGHZSPI_Receive+0xa4>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	0cdb      	lsrs	r3, r3, #19
 8007640:	2264      	movs	r2, #100	; 0x64
 8007642:	fb02 f303 	mul.w	r3, r2, r3
 8007646:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d105      	bne.n	800765a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	609a      	str	r2, [r3, #8]
      break;
 8007658:	e008      	b.n	800766c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b01      	subs	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <SUBGHZSPI_Receive+0xa8>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b01      	cmp	r3, #1
 800766a:	d1ed      	bne.n	8007648 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <SUBGHZSPI_Receive+0xa8>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	b2da      	uxtb	r2, r3
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	701a      	strb	r2, [r3, #0]

  return status;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
}
 8007678:	4618      	mov	r0, r3
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000000 	.word	0x20000000
 8007688:	58010000 	.word	0x58010000
 800768c:	5801000c 	.word	0x5801000c

08007690 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	791b      	ldrb	r3, [r3, #4]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d111      	bne.n	80076c4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80076a0:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <SUBGHZ_CheckDeviceReady+0x44>)
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	4613      	mov	r3, r2
 80076a6:	005b      	lsls	r3, r3, #1
 80076a8:	4413      	add	r3, r2
 80076aa:	00db      	lsls	r3, r3, #3
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076b0:	f7ff fbb0 	bl	8006e14 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	3b01      	subs	r3, #1
 80076b8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1f9      	bne.n	80076b4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076c0:	f7ff fb98 	bl	8006df4 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f807 	bl	80076d8 <SUBGHZ_WaitOnBusy>
 80076ca:	4603      	mov	r3, r0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	20000000 	.word	0x20000000

080076d8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80076e4:	4b12      	ldr	r3, [pc, #72]	; (8007730 <SUBGHZ_WaitOnBusy+0x58>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	4613      	mov	r3, r2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	00db      	lsls	r3, r3, #3
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	2264      	movs	r2, #100	; 0x64
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 80076fa:	f7ff fbb9 	bl	8006e70 <LL_PWR_IsActiveFlag_RFBUSYMS>
 80076fe:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2202      	movs	r2, #2
 800770e:	609a      	str	r2, [r3, #8]
      break;
 8007710:	e009      	b.n	8007726 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3b01      	subs	r3, #1
 8007716:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007718:	f7ff fb98 	bl	8006e4c <LL_PWR_IsActiveFlag_RFBUSYS>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	4013      	ands	r3, r2
 8007722:	2b01      	cmp	r3, #1
 8007724:	d0e9      	beq.n	80076fa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007726:	7dfb      	ldrb	r3, [r7, #23]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000000 	.word	0x20000000

08007734 <LL_RCC_GetUSARTClockSource>:
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800773c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007740:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	401a      	ands	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	4313      	orrs	r3, r2
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr

08007758 <LL_RCC_GetLPUARTClockSource>:
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007764:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4013      	ands	r3, r2
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr

08007776 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e042      	b.n	800780e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa fe68 	bl	8002470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2224      	movs	r2, #36	; 0x24
 80077a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc4b 	bl	8008054 <UART_SetConfig>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d101      	bne.n	80077c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e022      	b.n	800780e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 feb3 	bl	800853c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0201 	orr.w	r2, r2, #1
 8007804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 ff39 	bl	800867e <UART_CheckIdleState>
 800780c:	4603      	mov	r3, r0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	; 0x28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782c:	2b20      	cmp	r3, #32
 800782e:	d142      	bne.n	80078b6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d002      	beq.n	800783c <HAL_UART_Receive_IT+0x24>
 8007836:	88fb      	ldrh	r3, [r7, #6]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	e03b      	b.n	80078b8 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_UART_Receive_IT+0x36>
 800784a:	2302      	movs	r3, #2
 800784c:	e034      	b.n	80078b8 <HAL_UART_Receive_IT+0xa0>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a17      	ldr	r2, [pc, #92]	; (80078c0 <HAL_UART_Receive_IT+0xa8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d01f      	beq.n	80078a6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d018      	beq.n	80078a6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	613b      	str	r3, [r7, #16]
   return(result);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	623b      	str	r3, [r7, #32]
 8007894:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007896:	69f9      	ldr	r1, [r7, #28]
 8007898:	6a3a      	ldr	r2, [r7, #32]
 800789a:	e841 2300 	strex	r3, r2, [r1]
 800789e:	61bb      	str	r3, [r7, #24]
   return(result);
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1e6      	bne.n	8007874 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80078a6:	88fb      	ldrh	r3, [r7, #6]
 80078a8:	461a      	mov	r2, r3
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 fff9 	bl	80088a4 <UART_Start_Receive_IT>
 80078b2:	4603      	mov	r3, r0
 80078b4:	e000      	b.n	80078b8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80078b6:	2302      	movs	r3, #2
  }
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3728      	adds	r7, #40	; 0x28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	40008000 	.word	0x40008000

080078c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d17a      	bne.n	80079d2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_UART_Transmit_DMA+0x24>
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e073      	b.n	80079d4 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d101      	bne.n	80078fa <HAL_UART_Transmit_DMA+0x36>
 80078f6:	2302      	movs	r3, #2
 80078f8:	e06c      	b.n	80079d4 <HAL_UART_Transmit_DMA+0x110>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	88fa      	ldrh	r2, [r7, #6]
 800790c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	88fa      	ldrh	r2, [r7, #6]
 8007914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2221      	movs	r2, #33	; 0x21
 8007924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02c      	beq.n	800798a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007934:	4a29      	ldr	r2, [pc, #164]	; (80079dc <HAL_UART_Transmit_DMA+0x118>)
 8007936:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793c:	4a28      	ldr	r2, [pc, #160]	; (80079e0 <HAL_UART_Transmit_DMA+0x11c>)
 800793e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007944:	4a27      	ldr	r2, [pc, #156]	; (80079e4 <HAL_UART_Transmit_DMA+0x120>)
 8007946:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800794c:	2200      	movs	r2, #0
 800794e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	4619      	mov	r1, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3328      	adds	r3, #40	; 0x28
 8007960:	461a      	mov	r2, r3
 8007962:	88fb      	ldrh	r3, [r7, #6]
 8007964:	f7fc fb9e 	bl	80040a4 <HAL_DMA_Start_IT>
 8007968:	4603      	mov	r3, r0
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00d      	beq.n	800798a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2210      	movs	r2, #16
 8007972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e024      	b.n	80079d4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	2240      	movs	r2, #64	; 0x40
 8007990:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	613b      	str	r3, [r7, #16]
   return(result);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	623a      	str	r2, [r7, #32]
 80079bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	69f9      	ldr	r1, [r7, #28]
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e5      	bne.n	800799a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	e000      	b.n	80079d4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3728      	adds	r7, #40	; 0x28
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	08008c3f 	.word	0x08008c3f
 80079e0:	08008cd9 	.word	0x08008cd9
 80079e4:	08008cf5 	.word	0x08008cf5

080079e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0ba      	sub	sp, #232	; 0xe8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a12:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a16:	4013      	ands	r3, r2
 8007a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11b      	bne.n	8007a5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d015      	beq.n	8007a5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d105      	bne.n	8007a48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d009      	beq.n	8007a5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 82d6 	beq.w	8007ffe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	4798      	blx	r3
      }
      return;
 8007a5a:	e2d0      	b.n	8007ffe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 811f 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a6a:	4b8b      	ldr	r3, [pc, #556]	; (8007c98 <HAL_UART_IRQHandler+0x2b0>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a76:	4b89      	ldr	r3, [pc, #548]	; (8007c9c <HAL_UART_IRQHandler+0x2b4>)
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	f000 8112 	beq.w	8007ca4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d011      	beq.n	8007ab0 <HAL_UART_IRQHandler+0xc8>
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00b      	beq.n	8007ab0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aa6:	f043 0201 	orr.w	r2, r3, #1
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d011      	beq.n	8007ae0 <HAL_UART_IRQHandler+0xf8>
 8007abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2202      	movs	r2, #2
 8007ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ad6:	f043 0204 	orr.w	r2, r3, #4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d011      	beq.n	8007b10 <HAL_UART_IRQHandler+0x128>
 8007aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d00b      	beq.n	8007b10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2204      	movs	r2, #4
 8007afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b06:	f043 0202 	orr.w	r2, r3, #2
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d017      	beq.n	8007b4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d105      	bne.n	8007b34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007b28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b2c:	4b5a      	ldr	r3, [pc, #360]	; (8007c98 <HAL_UART_IRQHandler+0x2b0>)
 8007b2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2208      	movs	r2, #8
 8007b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b42:	f043 0208 	orr.w	r2, r3, #8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d012      	beq.n	8007b7e <HAL_UART_IRQHandler+0x196>
 8007b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00c      	beq.n	8007b7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b74:	f043 0220 	orr.w	r2, r3, #32
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 823c 	beq.w	8008002 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d013      	beq.n	8007bbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd2:	2b40      	cmp	r3, #64	; 0x40
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d04f      	beq.n	8007c82 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 ffc6 	bl	8008b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b40      	cmp	r3, #64	; 0x40
 8007bf4:	d141      	bne.n	8007c7a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1d9      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d013      	beq.n	8007c72 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4e:	4a14      	ldr	r2, [pc, #80]	; (8007ca0 <HAL_UART_IRQHandler+0x2b8>)
 8007c50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fc fb00 	bl	800425c <HAL_DMA_Abort_IT>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d017      	beq.n	8007c92 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c70:	e00f      	b.n	8007c92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f9d9 	bl	800802a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c78:	e00b      	b.n	8007c92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f9d5 	bl	800802a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c80:	e007      	b.n	8007c92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f9d1 	bl	800802a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c90:	e1b7      	b.n	8008002 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c92:	bf00      	nop
    return;
 8007c94:	e1b5      	b.n	8008002 <HAL_UART_IRQHandler+0x61a>
 8007c96:	bf00      	nop
 8007c98:	10000001 	.word	0x10000001
 8007c9c:	04000120 	.word	0x04000120
 8007ca0:	08008d75 	.word	0x08008d75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	f040 814a 	bne.w	8007f42 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cb2:	f003 0310 	and.w	r3, r3, #16
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8143 	beq.w	8007f42 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 813c 	beq.w	8007f42 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2210      	movs	r2, #16
 8007cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	f040 80b5 	bne.w	8007e4c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007cee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8187 	beq.w	8008006 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d02:	429a      	cmp	r2, r3
 8007d04:	f080 817f 	bcs.w	8008006 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f040 8086 	bne.w	8007e30 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1da      	bne.n	8007d24 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d9e:	e841 2300 	strex	r3, r2, [r1]
 8007da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e1      	bne.n	8007d6e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007db4:	e853 3f00 	ldrex	r3, [r3]
 8007db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e3      	bne.n	8007daa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2220      	movs	r2, #32
 8007de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e00:	f023 0310 	bic.w	r3, r3, #16
 8007e04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e12:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e4      	bne.n	8007df0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fc f9b8 	bl	80041a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 f8f9 	bl	800803c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e4a:	e0dc      	b.n	8008006 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f000 80ce 	beq.w	800800a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007e6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 80c9 	beq.w	800800a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8007e9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e4      	bne.n	8007e78 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ebe:	6a3b      	ldr	r3, [r7, #32]
 8007ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ed6:	633a      	str	r2, [r7, #48]	; 0x30
 8007ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e1      	bne.n	8007eae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0310 	bic.w	r3, r3, #16
 8007f12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f24:	69b9      	ldr	r1, [r7, #24]
 8007f26:	69fa      	ldr	r2, [r7, #28]
 8007f28:	e841 2300 	strex	r3, r2, [r1]
 8007f2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e4      	bne.n	8007efe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f38:	4619      	mov	r1, r3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f87e 	bl	800803c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007f40:	e063      	b.n	800800a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00e      	beq.n	8007f6c <HAL_UART_IRQHandler+0x584>
 8007f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d008      	beq.n	8007f6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 fba3 	bl	80096b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f6a:	e051      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d014      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d105      	bne.n	8007f90 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d03a      	beq.n	800800e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
    }
    return;
 8007fa0:	e035      	b.n	800800e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d009      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x5da>
 8007fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fef0 	bl	8008da0 <UART_EndTransmit_IT>
    return;
 8007fc0:	e026      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d009      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x5fa>
 8007fce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d003      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f001 fb7a 	bl	80096d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fe0:	e016      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d010      	beq.n	8008010 <HAL_UART_IRQHandler+0x628>
 8007fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	da0c      	bge.n	8008010 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 fb63 	bl	80096c2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ffc:	e008      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
      return;
 8007ffe:	bf00      	nop
 8008000:	e006      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
    return;
 8008002:	bf00      	nop
 8008004:	e004      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
      return;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
      return;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <HAL_UART_IRQHandler+0x628>
    return;
 800800e:	bf00      	nop
  }
}
 8008010:	37e8      	adds	r7, #232	; 0xe8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop

08008018 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr

0800802a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800802a:	b480      	push	{r7}
 800802c:	b083      	sub	sp, #12
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008032:	bf00      	nop
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	bc80      	pop	{r7}
 800803a:	4770      	bx	lr

0800803c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	bc80      	pop	{r7}
 8008050:	4770      	bx	lr
	...

08008054 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008058:	b08c      	sub	sp, #48	; 0x30
 800805a:	af00      	add	r7, sp, #0
 800805c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	431a      	orrs	r2, r3
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	431a      	orrs	r2, r3
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4313      	orrs	r3, r2
 800807a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	4b94      	ldr	r3, [pc, #592]	; (80082d4 <UART_SetConfig+0x280>)
 8008084:	4013      	ands	r3, r2
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	6812      	ldr	r2, [r2, #0]
 800808a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800808c:	430b      	orrs	r3, r1
 800808e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	430a      	orrs	r2, r1
 80080a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	699b      	ldr	r3, [r3, #24]
 80080aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a89      	ldr	r2, [pc, #548]	; (80082d8 <UART_SetConfig+0x284>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d004      	beq.n	80080c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080bc:	4313      	orrs	r3, r2
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080de:	f023 010f 	bic.w	r1, r3, #15
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a7a      	ldr	r2, [pc, #488]	; (80082dc <UART_SetConfig+0x288>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d127      	bne.n	8008148 <UART_SetConfig+0xf4>
 80080f8:	2003      	movs	r0, #3
 80080fa:	f7ff fb1b 	bl	8007734 <LL_RCC_GetUSARTClockSource>
 80080fe:	4603      	mov	r3, r0
 8008100:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008104:	2b03      	cmp	r3, #3
 8008106:	d81b      	bhi.n	8008140 <UART_SetConfig+0xec>
 8008108:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <UART_SetConfig+0xbc>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008121 	.word	0x08008121
 8008114:	08008131 	.word	0x08008131
 8008118:	08008129 	.word	0x08008129
 800811c:	08008139 	.word	0x08008139
 8008120:	2301      	movs	r3, #1
 8008122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008126:	e080      	b.n	800822a <UART_SetConfig+0x1d6>
 8008128:	2302      	movs	r3, #2
 800812a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812e:	e07c      	b.n	800822a <UART_SetConfig+0x1d6>
 8008130:	2304      	movs	r3, #4
 8008132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008136:	e078      	b.n	800822a <UART_SetConfig+0x1d6>
 8008138:	2308      	movs	r3, #8
 800813a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800813e:	e074      	b.n	800822a <UART_SetConfig+0x1d6>
 8008140:	2310      	movs	r3, #16
 8008142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008146:	e070      	b.n	800822a <UART_SetConfig+0x1d6>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a64      	ldr	r2, [pc, #400]	; (80082e0 <UART_SetConfig+0x28c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d138      	bne.n	80081c4 <UART_SetConfig+0x170>
 8008152:	200c      	movs	r0, #12
 8008154:	f7ff faee 	bl	8007734 <LL_RCC_GetUSARTClockSource>
 8008158:	4603      	mov	r3, r0
 800815a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800815e:	2b0c      	cmp	r3, #12
 8008160:	d82c      	bhi.n	80081bc <UART_SetConfig+0x168>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0x114>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080081bd 	.word	0x080081bd
 8008170:	080081bd 	.word	0x080081bd
 8008174:	080081bd 	.word	0x080081bd
 8008178:	080081ad 	.word	0x080081ad
 800817c:	080081bd 	.word	0x080081bd
 8008180:	080081bd 	.word	0x080081bd
 8008184:	080081bd 	.word	0x080081bd
 8008188:	080081a5 	.word	0x080081a5
 800818c:	080081bd 	.word	0x080081bd
 8008190:	080081bd 	.word	0x080081bd
 8008194:	080081bd 	.word	0x080081bd
 8008198:	080081b5 	.word	0x080081b5
 800819c:	2300      	movs	r3, #0
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081a2:	e042      	b.n	800822a <UART_SetConfig+0x1d6>
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081aa:	e03e      	b.n	800822a <UART_SetConfig+0x1d6>
 80081ac:	2304      	movs	r3, #4
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081b2:	e03a      	b.n	800822a <UART_SetConfig+0x1d6>
 80081b4:	2308      	movs	r3, #8
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ba:	e036      	b.n	800822a <UART_SetConfig+0x1d6>
 80081bc:	2310      	movs	r3, #16
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081c2:	e032      	b.n	800822a <UART_SetConfig+0x1d6>
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a43      	ldr	r2, [pc, #268]	; (80082d8 <UART_SetConfig+0x284>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d12a      	bne.n	8008224 <UART_SetConfig+0x1d0>
 80081ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80081d2:	f7ff fac1 	bl	8007758 <LL_RCC_GetLPUARTClockSource>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081dc:	d01a      	beq.n	8008214 <UART_SetConfig+0x1c0>
 80081de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e2:	d81b      	bhi.n	800821c <UART_SetConfig+0x1c8>
 80081e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081e8:	d00c      	beq.n	8008204 <UART_SetConfig+0x1b0>
 80081ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ee:	d815      	bhi.n	800821c <UART_SetConfig+0x1c8>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <UART_SetConfig+0x1a8>
 80081f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f8:	d008      	beq.n	800820c <UART_SetConfig+0x1b8>
 80081fa:	e00f      	b.n	800821c <UART_SetConfig+0x1c8>
 80081fc:	2300      	movs	r3, #0
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008202:	e012      	b.n	800822a <UART_SetConfig+0x1d6>
 8008204:	2302      	movs	r3, #2
 8008206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800820a:	e00e      	b.n	800822a <UART_SetConfig+0x1d6>
 800820c:	2304      	movs	r3, #4
 800820e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008212:	e00a      	b.n	800822a <UART_SetConfig+0x1d6>
 8008214:	2308      	movs	r3, #8
 8008216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800821a:	e006      	b.n	800822a <UART_SetConfig+0x1d6>
 800821c:	2310      	movs	r3, #16
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008222:	e002      	b.n	800822a <UART_SetConfig+0x1d6>
 8008224:	2310      	movs	r3, #16
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a2a      	ldr	r2, [pc, #168]	; (80082d8 <UART_SetConfig+0x284>)
 8008230:	4293      	cmp	r3, r2
 8008232:	f040 80a4 	bne.w	800837e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800823a:	2b08      	cmp	r3, #8
 800823c:	d823      	bhi.n	8008286 <UART_SetConfig+0x232>
 800823e:	a201      	add	r2, pc, #4	; (adr r2, 8008244 <UART_SetConfig+0x1f0>)
 8008240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008244:	08008269 	.word	0x08008269
 8008248:	08008287 	.word	0x08008287
 800824c:	08008271 	.word	0x08008271
 8008250:	08008287 	.word	0x08008287
 8008254:	08008277 	.word	0x08008277
 8008258:	08008287 	.word	0x08008287
 800825c:	08008287 	.word	0x08008287
 8008260:	08008287 	.word	0x08008287
 8008264:	0800827f 	.word	0x0800827f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008268:	f7fd ff48 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 800826c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800826e:	e010      	b.n	8008292 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008270:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <UART_SetConfig+0x290>)
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008274:	e00d      	b.n	8008292 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008276:	f7fd fe8d 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 800827a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800827c:	e009      	b.n	8008292 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800827e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008282:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008284:	e005      	b.n	8008292 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008286:	2300      	movs	r3, #0
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 8137 	beq.w	8008508 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	4a12      	ldr	r2, [pc, #72]	; (80082e8 <UART_SetConfig+0x294>)
 80082a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d305      	bcc.n	80082ca <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082c4:	69ba      	ldr	r2, [r7, #24]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d910      	bls.n	80082ec <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80082d0:	e11a      	b.n	8008508 <UART_SetConfig+0x4b4>
 80082d2:	bf00      	nop
 80082d4:	cfff69f3 	.word	0xcfff69f3
 80082d8:	40008000 	.word	0x40008000
 80082dc:	40013800 	.word	0x40013800
 80082e0:	40004400 	.word	0x40004400
 80082e4:	00f42400 	.word	0x00f42400
 80082e8:	0801d958 	.word	0x0801d958
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	2200      	movs	r2, #0
 80082f0:	60bb      	str	r3, [r7, #8]
 80082f2:	60fa      	str	r2, [r7, #12]
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	4a8e      	ldr	r2, [pc, #568]	; (8008534 <UART_SetConfig+0x4e0>)
 80082fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2200      	movs	r2, #0
 8008302:	603b      	str	r3, [r7, #0]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800830a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800830e:	f7f8 fc4b 	bl	8000ba8 <__aeabi_uldivmod>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4610      	mov	r0, r2
 8008318:	4619      	mov	r1, r3
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	020b      	lsls	r3, r1, #8
 8008324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008328:	0202      	lsls	r2, r0, #8
 800832a:	6979      	ldr	r1, [r7, #20]
 800832c:	6849      	ldr	r1, [r1, #4]
 800832e:	0849      	lsrs	r1, r1, #1
 8008330:	2000      	movs	r0, #0
 8008332:	460c      	mov	r4, r1
 8008334:	4605      	mov	r5, r0
 8008336:	eb12 0804 	adds.w	r8, r2, r4
 800833a:	eb43 0905 	adc.w	r9, r3, r5
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	469a      	mov	sl, r3
 8008346:	4693      	mov	fp, r2
 8008348:	4652      	mov	r2, sl
 800834a:	465b      	mov	r3, fp
 800834c:	4640      	mov	r0, r8
 800834e:	4649      	mov	r1, r9
 8008350:	f7f8 fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8008354:	4602      	mov	r2, r0
 8008356:	460b      	mov	r3, r1
 8008358:	4613      	mov	r3, r2
 800835a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008362:	d308      	bcc.n	8008376 <UART_SetConfig+0x322>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800836a:	d204      	bcs.n	8008376 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6a3a      	ldr	r2, [r7, #32]
 8008372:	60da      	str	r2, [r3, #12]
 8008374:	e0c8      	b.n	8008508 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800837c:	e0c4      	b.n	8008508 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008386:	d168      	bne.n	800845a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008388:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800838c:	2b08      	cmp	r3, #8
 800838e:	d828      	bhi.n	80083e2 <UART_SetConfig+0x38e>
 8008390:	a201      	add	r2, pc, #4	; (adr r2, 8008398 <UART_SetConfig+0x344>)
 8008392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008396:	bf00      	nop
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	080083e3 	.word	0x080083e3
 80083a8:	080083d3 	.word	0x080083d3
 80083ac:	080083e3 	.word	0x080083e3
 80083b0:	080083e3 	.word	0x080083e3
 80083b4:	080083e3 	.word	0x080083e3
 80083b8:	080083db 	.word	0x080083db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083bc:	f7fd fe9e 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 80083c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083c2:	e014      	b.n	80083ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083c4:	f7fd feac 	bl	8006120 <HAL_RCC_GetPCLK2Freq>
 80083c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ca:	e010      	b.n	80083ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083cc:	4b5a      	ldr	r3, [pc, #360]	; (8008538 <UART_SetConfig+0x4e4>)
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083d0:	e00d      	b.n	80083ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083d2:	f7fd fddf 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 80083d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083d8:	e009      	b.n	80083ee <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083e0:	e005      	b.n	80083ee <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80083ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f000 8089 	beq.w	8008508 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	4a4e      	ldr	r2, [pc, #312]	; (8008534 <UART_SetConfig+0x4e0>)
 80083fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008400:	461a      	mov	r2, r3
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	fbb3 f3f2 	udiv	r3, r3, r2
 8008408:	005a      	lsls	r2, r3, #1
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	085b      	lsrs	r3, r3, #1
 8008410:	441a      	add	r2, r3
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	b29b      	uxth	r3, r3
 800841c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	2b0f      	cmp	r3, #15
 8008422:	d916      	bls.n	8008452 <UART_SetConfig+0x3fe>
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800842a:	d212      	bcs.n	8008452 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	b29b      	uxth	r3, r3
 8008430:	f023 030f 	bic.w	r3, r3, #15
 8008434:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	b29b      	uxth	r3, r3
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	b29a      	uxth	r2, r3
 8008442:	8bfb      	ldrh	r3, [r7, #30]
 8008444:	4313      	orrs	r3, r2
 8008446:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	8bfa      	ldrh	r2, [r7, #30]
 800844e:	60da      	str	r2, [r3, #12]
 8008450:	e05a      	b.n	8008508 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008458:	e056      	b.n	8008508 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800845a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800845e:	2b08      	cmp	r3, #8
 8008460:	d827      	bhi.n	80084b2 <UART_SetConfig+0x45e>
 8008462:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <UART_SetConfig+0x414>)
 8008464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008468:	0800848d 	.word	0x0800848d
 800846c:	08008495 	.word	0x08008495
 8008470:	0800849d 	.word	0x0800849d
 8008474:	080084b3 	.word	0x080084b3
 8008478:	080084a3 	.word	0x080084a3
 800847c:	080084b3 	.word	0x080084b3
 8008480:	080084b3 	.word	0x080084b3
 8008484:	080084b3 	.word	0x080084b3
 8008488:	080084ab 	.word	0x080084ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800848c:	f7fd fe36 	bl	80060fc <HAL_RCC_GetPCLK1Freq>
 8008490:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008492:	e014      	b.n	80084be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008494:	f7fd fe44 	bl	8006120 <HAL_RCC_GetPCLK2Freq>
 8008498:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800849a:	e010      	b.n	80084be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800849c:	4b26      	ldr	r3, [pc, #152]	; (8008538 <UART_SetConfig+0x4e4>)
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084a0:	e00d      	b.n	80084be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084a2:	f7fd fd77 	bl	8005f94 <HAL_RCC_GetSysClockFreq>
 80084a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084a8:	e009      	b.n	80084be <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084b0:	e005      	b.n	80084be <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084bc:	bf00      	nop
    }

    if (pclk != 0U)
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d021      	beq.n	8008508 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c8:	4a1a      	ldr	r2, [pc, #104]	; (8008534 <UART_SetConfig+0x4e0>)
 80084ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ce:	461a      	mov	r2, r3
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	085b      	lsrs	r3, r3, #1
 80084dc:	441a      	add	r2, r3
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	2b0f      	cmp	r3, #15
 80084ee:	d908      	bls.n	8008502 <UART_SetConfig+0x4ae>
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f6:	d204      	bcs.n	8008502 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6a3a      	ldr	r2, [r7, #32]
 80084fe:	60da      	str	r2, [r3, #12]
 8008500:	e002      	b.n	8008508 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2201      	movs	r2, #1
 800850c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2201      	movs	r2, #1
 8008514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	2200      	movs	r2, #0
 800851c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008524:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008528:	4618      	mov	r0, r3
 800852a:	3730      	adds	r7, #48	; 0x30
 800852c:	46bd      	mov	sp, r7
 800852e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008532:	bf00      	nop
 8008534:	0801d958 	.word	0x0801d958
 8008538:	00f42400 	.word	0x00f42400

0800853c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	430a      	orrs	r2, r1
 8008564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00a      	beq.n	8008588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	f003 0304 	and.w	r3, r3, #4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	f003 0310 	and.w	r3, r3, #16
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01a      	beq.n	8008652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800863a:	d10a      	bne.n	8008652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	605a      	str	r2, [r3, #4]
  }
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	bc80      	pop	{r7}
 800867c:	4770      	bx	lr

0800867e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b086      	sub	sp, #24
 8008682:	af02      	add	r7, sp, #8
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800868e:	f7f9 fb2b 	bl	8001ce8 <HAL_GetTick>
 8008692:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0308 	and.w	r3, r3, #8
 800869e:	2b08      	cmp	r3, #8
 80086a0:	d10e      	bne.n	80086c0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f82f 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e025      	b.n	800870c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b04      	cmp	r3, #4
 80086cc:	d10e      	bne.n	80086ec <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 f819 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e00f      	b.n	800870c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2220      	movs	r2, #32
 80086f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b09c      	sub	sp, #112	; 0x70
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	4613      	mov	r3, r2
 8008722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008724:	e0a9      	b.n	800887a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008726:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872c:	f000 80a5 	beq.w	800887a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008730:	f7f9 fada 	bl	8001ce8 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800873c:	429a      	cmp	r2, r3
 800873e:	d302      	bcc.n	8008746 <UART_WaitOnFlagUntilTimeout+0x32>
 8008740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008742:	2b00      	cmp	r3, #0
 8008744:	d140      	bne.n	80087c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008756:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800875a:	667b      	str	r3, [r7, #100]	; 0x64
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	461a      	mov	r2, r3
 8008762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008764:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008766:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008768:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800876a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800876c:	e841 2300 	strex	r3, r2, [r1]
 8008770:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1e6      	bne.n	8008746 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	663b      	str	r3, [r7, #96]	; 0x60
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008798:	64ba      	str	r2, [r7, #72]	; 0x48
 800879a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800879e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2220      	movs	r2, #32
 80087b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e069      	b.n	800889c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d051      	beq.n	800887a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	69db      	ldr	r3, [r3, #28]
 80087dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e4:	d149      	bne.n	800887a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008804:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880e:	637b      	str	r3, [r7, #52]	; 0x34
 8008810:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800881c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e6      	bne.n	80087f0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3308      	adds	r3, #8
 8008828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	e853 3f00 	ldrex	r3, [r3]
 8008830:	613b      	str	r3, [r7, #16]
   return(result);
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	66bb      	str	r3, [r7, #104]	; 0x68
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3308      	adds	r3, #8
 8008840:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008842:	623a      	str	r2, [r7, #32]
 8008844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008846:	69f9      	ldr	r1, [r7, #28]
 8008848:	6a3a      	ldr	r2, [r7, #32]
 800884a:	e841 2300 	strex	r3, r2, [r1]
 800884e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1e5      	bne.n	8008822 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2220      	movs	r2, #32
 800885a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2220      	movs	r2, #32
 800886a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e010      	b.n	800889c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69da      	ldr	r2, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	4013      	ands	r3, r2
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	429a      	cmp	r2, r3
 8008888:	bf0c      	ite	eq
 800888a:	2301      	moveq	r3, #1
 800888c:	2300      	movne	r3, #0
 800888e:	b2db      	uxtb	r3, r3
 8008890:	461a      	mov	r2, r3
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	429a      	cmp	r2, r3
 8008896:	f43f af46 	beq.w	8008726 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3770      	adds	r7, #112	; 0x70
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b0a3      	sub	sp, #140	; 0x8c
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	4613      	mov	r3, r2
 80088b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88fa      	ldrh	r2, [r7, #6]
 80088c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d6:	d10e      	bne.n	80088f6 <UART_Start_Receive_IT+0x52>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d105      	bne.n	80088ec <UART_Start_Receive_IT+0x48>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80088e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088ea:	e02d      	b.n	8008948 <UART_Start_Receive_IT+0xa4>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	22ff      	movs	r2, #255	; 0xff
 80088f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80088f4:	e028      	b.n	8008948 <UART_Start_Receive_IT+0xa4>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10d      	bne.n	800891a <UART_Start_Receive_IT+0x76>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <UART_Start_Receive_IT+0x6c>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	22ff      	movs	r2, #255	; 0xff
 800890a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800890e:	e01b      	b.n	8008948 <UART_Start_Receive_IT+0xa4>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	227f      	movs	r2, #127	; 0x7f
 8008914:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008918:	e016      	b.n	8008948 <UART_Start_Receive_IT+0xa4>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008922:	d10d      	bne.n	8008940 <UART_Start_Receive_IT+0x9c>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d104      	bne.n	8008936 <UART_Start_Receive_IT+0x92>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	227f      	movs	r2, #127	; 0x7f
 8008930:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008934:	e008      	b.n	8008948 <UART_Start_Receive_IT+0xa4>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	223f      	movs	r2, #63	; 0x3f
 800893a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800893e:	e003      	b.n	8008948 <UART_Start_Receive_IT+0xa4>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2222      	movs	r2, #34	; 0x22
 8008954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008962:	e853 3f00 	ldrex	r3, [r3]
 8008966:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008968:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800896a:	f043 0301 	orr.w	r3, r3, #1
 800896e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800897c:	673a      	str	r2, [r7, #112]	; 0x70
 800897e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008982:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800898a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e3      	bne.n	8008958 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008998:	d153      	bne.n	8008a42 <UART_Start_Receive_IT+0x19e>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089a0:	88fa      	ldrh	r2, [r7, #6]
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d34d      	bcc.n	8008a42 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ae:	d107      	bne.n	80089c0 <UART_Start_Receive_IT+0x11c>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4a4a      	ldr	r2, [pc, #296]	; (8008ae4 <UART_Start_Receive_IT+0x240>)
 80089bc:	671a      	str	r2, [r3, #112]	; 0x70
 80089be:	e002      	b.n	80089c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a49      	ldr	r2, [pc, #292]	; (8008ae8 <UART_Start_Receive_IT+0x244>)
 80089c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d01a      	beq.n	8008a0c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a00:	e841 2300 	strex	r3, r2, [r1]
 8008a04:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e4      	bne.n	80089d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3308      	adds	r3, #8
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3308      	adds	r3, #8
 8008a2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008a2c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a2e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a30:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a34:	e841 2300 	strex	r3, r2, [r1]
 8008a38:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1e5      	bne.n	8008a0c <UART_Start_Receive_IT+0x168>
 8008a40:	e04a      	b.n	8008ad8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a4a:	d107      	bne.n	8008a5c <UART_Start_Receive_IT+0x1b8>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d103      	bne.n	8008a5c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a25      	ldr	r2, [pc, #148]	; (8008aec <UART_Start_Receive_IT+0x248>)
 8008a58:	671a      	str	r2, [r3, #112]	; 0x70
 8008a5a:	e002      	b.n	8008a62 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4a24      	ldr	r2, [pc, #144]	; (8008af0 <UART_Start_Receive_IT+0x24c>)
 8008a60:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d019      	beq.n	8008aa6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008a86:	677b      	str	r3, [r7, #116]	; 0x74
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
 8008a92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e6      	bne.n	8008a72 <UART_Start_Receive_IT+0x1ce>
 8008aa4:	e018      	b.n	8008ad8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	f043 0320 	orr.w	r3, r3, #32
 8008aba:	67bb      	str	r3, [r7, #120]	; 0x78
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ac4:	623b      	str	r3, [r7, #32]
 8008ac6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	69f9      	ldr	r1, [r7, #28]
 8008aca:	6a3a      	ldr	r2, [r7, #32]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e6      	bne.n	8008aa6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	378c      	adds	r7, #140	; 0x8c
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr
 8008ae4:	080093b1 	.word	0x080093b1
 8008ae8:	080090b9 	.word	0x080090b9
 8008aec:	08008f57 	.word	0x08008f57
 8008af0:	08008df7 	.word	0x08008df7

08008af4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b08f      	sub	sp, #60	; 0x3c
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6a3b      	ldr	r3, [r7, #32]
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008b10:	637b      	str	r3, [r7, #52]	; 0x34
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	461a      	mov	r2, r3
 8008b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b1c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b22:	e841 2300 	strex	r3, r2, [r1]
 8008b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1e6      	bne.n	8008afc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3308      	adds	r3, #8
 8008b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b44:	633b      	str	r3, [r7, #48]	; 0x30
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3308      	adds	r3, #8
 8008b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b4e:	61ba      	str	r2, [r7, #24]
 8008b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e5      	bne.n	8008b2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8008b6a:	bf00      	nop
 8008b6c:	373c      	adds	r7, #60	; 0x3c
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bc80      	pop	{r7}
 8008b72:	4770      	bx	lr

08008b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b095      	sub	sp, #84	; 0x54
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8008b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e6      	bne.n	8008b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	e853 3f00 	ldrex	r3, [r3]
 8008bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bc4:	f023 0301 	bic.w	r3, r3, #1
 8008bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3308      	adds	r3, #8
 8008bd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e3      	bne.n	8008bae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d118      	bne.n	8008c20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f023 0310 	bic.w	r3, r3, #16
 8008c02:	647b      	str	r3, [r7, #68]	; 0x44
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0c:	61bb      	str	r3, [r7, #24]
 8008c0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	6979      	ldr	r1, [r7, #20]
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	613b      	str	r3, [r7, #16]
   return(result);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e6      	bne.n	8008bee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008c34:	bf00      	nop
 8008c36:	3754      	adds	r7, #84	; 0x54
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bc80      	pop	{r7}
 8008c3c:	4770      	bx	lr

08008c3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b090      	sub	sp, #64	; 0x40
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d137      	bne.n	8008cca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3308      	adds	r3, #8
 8008c68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	623b      	str	r3, [r7, #32]
   return(result);
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3308      	adds	r3, #8
 8008c80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c82:	633a      	str	r2, [r7, #48]	; 0x30
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e5      	bne.n	8008c62 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	e853 3f00 	ldrex	r3, [r3]
 8008ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
 8008cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	e841 2300 	strex	r3, r2, [r1]
 8008cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e6      	bne.n	8008c96 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cc8:	e002      	b.n	8008cd0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008cca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008ccc:	f7f9 fd7a 	bl	80027c4 <HAL_UART_TxCpltCallback>
}
 8008cd0:	bf00      	nop
 8008cd2:	3740      	adds	r7, #64	; 0x40
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ce6:	68f8      	ldr	r0, [r7, #12]
 8008ce8:	f7ff f996 	bl	8008018 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cec:	bf00      	nop
 8008cee:	3710      	adds	r7, #16
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b086      	sub	sp, #24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d00:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d08:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d10:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1c:	2b80      	cmp	r3, #128	; 0x80
 8008d1e:	d109      	bne.n	8008d34 <UART_DMAError+0x40>
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	2b21      	cmp	r3, #33	; 0x21
 8008d24:	d106      	bne.n	8008d34 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008d2e:	6978      	ldr	r0, [r7, #20]
 8008d30:	f7ff fee0 	bl	8008af4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3e:	2b40      	cmp	r3, #64	; 0x40
 8008d40:	d109      	bne.n	8008d56 <UART_DMAError+0x62>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b22      	cmp	r3, #34	; 0x22
 8008d46:	d106      	bne.n	8008d56 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d50:	6978      	ldr	r0, [r7, #20]
 8008d52:	f7ff ff0f 	bl	8008b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d5c:	f043 0210 	orr.w	r2, r3, #16
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d66:	6978      	ldr	r0, [r7, #20]
 8008d68:	f7ff f95f 	bl	800802a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d6c:	bf00      	nop
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f7ff f949 	bl	800802a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d98:	bf00      	nop
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dbc:	61fb      	str	r3, [r7, #28]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	61bb      	str	r3, [r7, #24]
 8008dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6979      	ldr	r1, [r7, #20]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e6      	bne.n	8008da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7f9 fceb 	bl	80027c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dee:	bf00      	nop
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b096      	sub	sp, #88	; 0x58
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008e04:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0e:	2b22      	cmp	r3, #34	; 0x22
 8008e10:	f040 8095 	bne.w	8008f3e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e1e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008e22:	b2d9      	uxtb	r1, r3
 8008e24:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	400a      	ands	r2, r1
 8008e30:	b2d2      	uxtb	r2, r2
 8008e32:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e38:	1c5a      	adds	r2, r3, #1
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d178      	bne.n	8008f4e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e70:	653b      	str	r3, [r7, #80]	; 0x50
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	461a      	mov	r2, r3
 8008e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e6      	bne.n	8008e5c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3308      	adds	r3, #8
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	f023 0301 	bic.w	r3, r3, #1
 8008ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3308      	adds	r3, #8
 8008eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eae:	633a      	str	r2, [r7, #48]	; 0x30
 8008eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e5      	bne.n	8008e8e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d12e      	bne.n	8008f36 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f023 0310 	bic.w	r3, r3, #16
 8008ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008efc:	61fb      	str	r3, [r7, #28]
 8008efe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	69b9      	ldr	r1, [r7, #24]
 8008f02:	69fa      	ldr	r2, [r7, #28]
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	617b      	str	r3, [r7, #20]
   return(result);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d103      	bne.n	8008f26 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2210      	movs	r2, #16
 8008f24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7ff f884 	bl	800803c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f34:	e00b      	b.n	8008f4e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f7f9 fc5a 	bl	80027f0 <HAL_UART_RxCpltCallback>
}
 8008f3c:	e007      	b.n	8008f4e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f042 0208 	orr.w	r2, r2, #8
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	3758      	adds	r7, #88	; 0x58
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b096      	sub	sp, #88	; 0x58
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6e:	2b22      	cmp	r3, #34	; 0x22
 8008f70:	f040 8095 	bne.w	800909e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f84:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008f88:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f8c:	4013      	ands	r3, r2
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f92:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f98:	1c9a      	adds	r2, r3, #2
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d178      	bne.n	80090ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fda:	643b      	str	r3, [r7, #64]	; 0x40
 8008fdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e6      	bne.n	8008fbc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	64bb      	str	r3, [r7, #72]	; 0x48
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800900e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009010:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800901c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e5      	bne.n	8008fee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d12e      	bne.n	8009096 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	60bb      	str	r3, [r7, #8]
   return(result);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f023 0310 	bic.w	r3, r3, #16
 8009052:	647b      	str	r3, [r7, #68]	; 0x44
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800905c:	61bb      	str	r3, [r7, #24]
 800905e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6979      	ldr	r1, [r7, #20]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	613b      	str	r3, [r7, #16]
   return(result);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e6      	bne.n	800903e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f003 0310 	and.w	r3, r3, #16
 800907a:	2b10      	cmp	r3, #16
 800907c:	d103      	bne.n	8009086 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2210      	movs	r2, #16
 8009084:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800908c:	4619      	mov	r1, r3
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f7fe ffd4 	bl	800803c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009094:	e00b      	b.n	80090ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7f9 fbaa 	bl	80027f0 <HAL_UART_RxCpltCallback>
}
 800909c:	e007      	b.n	80090ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	699a      	ldr	r2, [r3, #24]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0208 	orr.w	r2, r2, #8
 80090ac:	619a      	str	r2, [r3, #24]
}
 80090ae:	bf00      	nop
 80090b0:	3758      	adds	r7, #88	; 0x58
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b0a6      	sub	sp, #152	; 0x98
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69db      	ldr	r3, [r3, #28]
 80090d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ee:	2b22      	cmp	r3, #34	; 0x22
 80090f0:	f040 814f 	bne.w	8009392 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80090fe:	e0f6      	b.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009106:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800910a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800910e:	b2d9      	uxtb	r1, r3
 8009110:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009114:	b2da      	uxtb	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911a:	400a      	ands	r2, r1
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009130:	b29b      	uxth	r3, r3
 8009132:	3b01      	subs	r3, #1
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009146:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d053      	beq.n	80091fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009152:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d011      	beq.n	8009182 <UART_RxISR_8BIT_FIFOEN+0xca>
 800915e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00b      	beq.n	8009182 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2201      	movs	r2, #1
 8009170:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009178:	f043 0201 	orr.w	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800918e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2202      	movs	r2, #2
 80091a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091a8:	f043 0204 	orr.w	r2, r3, #4
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d011      	beq.n	80091e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80091be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2204      	movs	r2, #4
 80091d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d8:	f043 0202 	orr.w	r2, r3, #2
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f7fe ff1c 	bl	800802a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009200:	b29b      	uxth	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d173      	bne.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800921a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009228:	66bb      	str	r3, [r7, #104]	; 0x68
 800922a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800922e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e4      	bne.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800924c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800924e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009252:	f023 0301 	bic.w	r3, r3, #1
 8009256:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	3308      	adds	r3, #8
 800925e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009260:	657a      	str	r2, [r7, #84]	; 0x54
 8009262:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009266:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800926e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e3      	bne.n	800923c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009286:	2b01      	cmp	r3, #1
 8009288:	d12e      	bne.n	80092e8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a0:	f023 0310 	bic.w	r3, r3, #16
 80092a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ae:	643b      	str	r3, [r7, #64]	; 0x40
 80092b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e6      	bne.n	8009290 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	f003 0310 	and.w	r3, r3, #16
 80092cc:	2b10      	cmp	r3, #16
 80092ce:	d103      	bne.n	80092d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2210      	movs	r2, #16
 80092d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7fe feab 	bl	800803c <HAL_UARTEx_RxEventCallback>
 80092e6:	e002      	b.n	80092ee <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7f9 fa81 	bl	80027f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80092ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d006      	beq.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80092f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	f47f aefe 	bne.w	8009100 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800930a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800930e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009312:	2b00      	cmp	r3, #0
 8009314:	d045      	beq.n	80093a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800931c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009320:	429a      	cmp	r2, r3
 8009322:	d23e      	bcs.n	80093a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	e853 3f00 	ldrex	r3, [r3]
 8009332:	61fb      	str	r3, [r7, #28]
   return(result);
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800933a:	673b      	str	r3, [r7, #112]	; 0x70
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3308      	adds	r3, #8
 8009342:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009344:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800934a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e5      	bne.n	8009324 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a14      	ldr	r2, [pc, #80]	; (80093ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800935c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	e853 3f00 	ldrex	r3, [r3]
 800936a:	60bb      	str	r3, [r7, #8]
   return(result);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f043 0320 	orr.w	r3, r3, #32
 8009372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	461a      	mov	r2, r3
 800937a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6979      	ldr	r1, [r7, #20]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	613b      	str	r3, [r7, #16]
   return(result);
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e6      	bne.n	800935e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009390:	e007      	b.n	80093a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0208 	orr.w	r2, r2, #8
 80093a0:	619a      	str	r2, [r3, #24]
}
 80093a2:	bf00      	nop
 80093a4:	3798      	adds	r7, #152	; 0x98
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	08008df7 	.word	0x08008df7

080093b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b0a8      	sub	sp, #160	; 0xa0
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e6:	2b22      	cmp	r3, #34	; 0x22
 80093e8:	f040 8153 	bne.w	8009692 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093f6:	e0fa      	b.n	80095ee <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800940a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800940e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009412:	4013      	ands	r3, r2
 8009414:	b29a      	uxth	r2, r3
 8009416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800941a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009420:	1c9a      	adds	r2, r3, #2
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	2b00      	cmp	r3, #0
 800944c:	d053      	beq.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800944e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d011      	beq.n	800947e <UART_RxISR_16BIT_FIFOEN+0xce>
 800945a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800945e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00b      	beq.n	800947e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2201      	movs	r2, #1
 800946c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009474:	f043 0201 	orr.w	r2, r3, #1
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800947e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b00      	cmp	r3, #0
 8009488:	d011      	beq.n	80094ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800948a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00b      	beq.n	80094ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2202      	movs	r2, #2
 800949c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a4:	f043 0204 	orr.w	r2, r3, #4
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d011      	beq.n	80094de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80094ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2204      	movs	r2, #4
 80094cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094d4:	f043 0202 	orr.w	r2, r3, #2
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d006      	beq.n	80094f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7fe fd9e 	bl	800802a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d175      	bne.n	80095ee <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	461a      	mov	r2, r3
 8009520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009526:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009528:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800952a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800952c:	e841 2300 	strex	r3, r2, [r1]
 8009530:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009534:	2b00      	cmp	r3, #0
 8009536:	d1e4      	bne.n	8009502 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3308      	adds	r3, #8
 800953e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009542:	e853 3f00 	ldrex	r3, [r3]
 8009546:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800954e:	f023 0301 	bic.w	r3, r3, #1
 8009552:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3308      	adds	r3, #8
 800955c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009560:	65ba      	str	r2, [r7, #88]	; 0x58
 8009562:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009566:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800956e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e1      	bne.n	8009538 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2220      	movs	r2, #32
 8009578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009586:	2b01      	cmp	r3, #1
 8009588:	d12e      	bne.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800959e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a0:	f023 0310 	bic.w	r3, r3, #16
 80095a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80095ae:	647b      	str	r3, [r7, #68]	; 0x44
 80095b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e6      	bne.n	8009590 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	69db      	ldr	r3, [r3, #28]
 80095c8:	f003 0310 	and.w	r3, r3, #16
 80095cc:	2b10      	cmp	r3, #16
 80095ce:	d103      	bne.n	80095d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	2210      	movs	r2, #16
 80095d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095de:	4619      	mov	r1, r3
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7fe fd2b 	bl	800803c <HAL_UARTEx_RxEventCallback>
 80095e6:	e002      	b.n	80095ee <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7f9 f901 	bl	80027f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d006      	beq.n	8009604 <UART_RxISR_16BIT_FIFOEN+0x254>
 80095f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095fa:	f003 0320 	and.w	r3, r3, #32
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f47f aefa 	bne.w	80093f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800960a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800960e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009612:	2b00      	cmp	r3, #0
 8009614:	d045      	beq.n	80096a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800961c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009620:	429a      	cmp	r2, r3
 8009622:	d23e      	bcs.n	80096a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	3308      	adds	r3, #8
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	623b      	str	r3, [r7, #32]
   return(result);
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800963a:	677b      	str	r3, [r7, #116]	; 0x74
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3308      	adds	r3, #8
 8009642:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009644:	633a      	str	r2, [r7, #48]	; 0x30
 8009646:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800964a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a14      	ldr	r2, [pc, #80]	; (80096ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800965c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	60fb      	str	r3, [r7, #12]
   return(result);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f043 0320 	orr.w	r3, r3, #32
 8009672:	673b      	str	r3, [r7, #112]	; 0x70
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	69b9      	ldr	r1, [r7, #24]
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	617b      	str	r3, [r7, #20]
   return(result);
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e6      	bne.n	800965e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009690:	e007      	b.n	80096a2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f042 0208 	orr.w	r2, r2, #8
 80096a0:	619a      	str	r2, [r3, #24]
}
 80096a2:	bf00      	nop
 80096a4:	37a0      	adds	r7, #160	; 0xa0
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	08008f57 	.word	0x08008f57

080096b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	bc80      	pop	{r7}
 80096c0:	4770      	bx	lr

080096c2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bc80      	pop	{r7}
 80096d2:	4770      	bx	lr

080096d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bc80      	pop	{r7}
 80096e4:	4770      	bx	lr

080096e6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b088      	sub	sp, #32
 80096ea:	af02      	add	r7, sp, #8
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	1d3b      	adds	r3, r7, #4
 80096f0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d101      	bne.n	8009706 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009702:	2302      	movs	r3, #2
 8009704:	e046      	b.n	8009794 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2201      	movs	r2, #1
 800970a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2224      	movs	r2, #36	; 0x24
 8009712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f022 0201 	bic.w	r2, r2, #1
 8009724:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d105      	bne.n	800974c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 f911 	bl	800996e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0201 	orr.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800975c:	f7f8 fac4 	bl	8001ce8 <HAL_GetTick>
 8009760:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009762:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	2200      	movs	r2, #0
 800976c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7fe ffcf 	bl	8008714 <UART_WaitOnFlagUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d002      	beq.n	8009782 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800977c:	2303      	movs	r3, #3
 800977e:	75fb      	strb	r3, [r7, #23]
 8009780:	e003      	b.n	800978a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2220      	movs	r2, #32
 8009786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b089      	sub	sp, #36	; 0x24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_UARTEx_EnableStopMode+0x16>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e021      	b.n	80097f6 <HAL_UARTEx_EnableStopMode+0x5a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f043 0302 	orr.w	r3, r3, #2
 80097ce:	61fb      	str	r3, [r7, #28]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	61bb      	str	r3, [r7, #24]
 80097da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6979      	ldr	r1, [r7, #20]
 80097de:	69ba      	ldr	r2, [r7, #24]
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	613b      	str	r3, [r7, #16]
   return(result);
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e6      	bne.n	80097ba <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3724      	adds	r7, #36	; 0x24
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bc80      	pop	{r7}
 80097fe:	4770      	bx	lr

08009800 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800980e:	2b01      	cmp	r3, #1
 8009810:	d101      	bne.n	8009816 <HAL_UARTEx_EnableFifoMode+0x16>
 8009812:	2302      	movs	r3, #2
 8009814:	e02b      	b.n	800986e <HAL_UARTEx_EnableFifoMode+0x6e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2201      	movs	r2, #1
 800981a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2224      	movs	r2, #36	; 0x24
 8009822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0201 	bic.w	r2, r2, #1
 800983c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009844:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800984c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f8ac 	bl	80099b4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800988a:	2302      	movs	r3, #2
 800988c:	e02d      	b.n	80098ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2224      	movs	r2, #36	; 0x24
 800989a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0201 	bic.w	r2, r2, #1
 80098b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f872 	bl	80099b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009906:	2302      	movs	r3, #2
 8009908:	e02d      	b.n	8009966 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2224      	movs	r2, #36	; 0x24
 8009916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0201 	bic.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f834 	bl	80099b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f023 0210 	bic.w	r2, r3, #16
 8009986:	893b      	ldrh	r3, [r7, #8]
 8009988:	4619      	mov	r1, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800999c:	7abb      	ldrb	r3, [r7, #10]
 800999e:	061a      	lsls	r2, r3, #24
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	430a      	orrs	r2, r1
 80099a6:	605a      	str	r2, [r3, #4]
}
 80099a8:	bf00      	nop
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bc80      	pop	{r7}
 80099b0:	4770      	bx	lr
	...

080099b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d108      	bne.n	80099d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099d4:	e031      	b.n	8009a3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099d6:	2308      	movs	r3, #8
 80099d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099da:	2308      	movs	r3, #8
 80099dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	0e5b      	lsrs	r3, r3, #25
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	f003 0307 	and.w	r3, r3, #7
 80099ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	0f5b      	lsrs	r3, r3, #29
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	f003 0307 	and.w	r3, r3, #7
 80099fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099fe:	7bbb      	ldrb	r3, [r7, #14]
 8009a00:	7b3a      	ldrb	r2, [r7, #12]
 8009a02:	4910      	ldr	r1, [pc, #64]	; (8009a44 <UARTEx_SetNbDataToProcess+0x90>)
 8009a04:	5c8a      	ldrb	r2, [r1, r2]
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a0a:	7b3a      	ldrb	r2, [r7, #12]
 8009a0c:	490e      	ldr	r1, [pc, #56]	; (8009a48 <UARTEx_SetNbDataToProcess+0x94>)
 8009a0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	7b7a      	ldrb	r2, [r7, #13]
 8009a20:	4908      	ldr	r1, [pc, #32]	; (8009a44 <UARTEx_SetNbDataToProcess+0x90>)
 8009a22:	5c8a      	ldrb	r2, [r1, r2]
 8009a24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a28:	7b7a      	ldrb	r2, [r7, #13]
 8009a2a:	4907      	ldr	r1, [pc, #28]	; (8009a48 <UARTEx_SetNbDataToProcess+0x94>)
 8009a2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a3a:	bf00      	nop
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bc80      	pop	{r7}
 8009a42:	4770      	bx	lr
 8009a44:	0801d970 	.word	0x0801d970
 8009a48:	0801d978 	.word	0x0801d978

08009a4c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009a50:	f7f7 ffee 	bl	8001a30 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009a54:	f000 f820 	bl	8009a98 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009a58:	bf00      	nop
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009a60:	f04f 30ff 	mov.w	r0, #4294967295
 8009a64:	f012 fae0 	bl	801c028 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009a68:	bf00      	nop
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009a70:	f3bf 8f4f 	dsb	sy
}
 8009a74:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009a76:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <__NVIC_SystemReset+0x24>)
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009a7e:	4904      	ldr	r1, [pc, #16]	; (8009a90 <__NVIC_SystemReset+0x24>)
 8009a80:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <__NVIC_SystemReset+0x28>)
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009a86:	f3bf 8f4f 	dsb	sy
}
 8009a8a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <__NVIC_SystemReset+0x20>
 8009a90:	e000ed00 	.word	0xe000ed00
 8009a94:	05fa0004 	.word	0x05fa0004

08009a98 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9302      	str	r3, [sp, #8]
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	9301      	str	r3, [sp, #4]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	9300      	str	r3, [sp, #0]
 8009aae:	4b5a      	ldr	r3, [pc, #360]	; (8009c18 <LoRaWAN_Init+0x180>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	2002      	movs	r0, #2
 8009ab6:	f012 ff05 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8009aba:	2300      	movs	r3, #0
 8009abc:	9302      	str	r3, [sp, #8]
 8009abe:	2304      	movs	r3, #4
 8009ac0:	9301      	str	r3, [sp, #4]
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4b55      	ldr	r3, [pc, #340]	; (8009c1c <LoRaWAN_Init+0x184>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	2100      	movs	r1, #0
 8009acc:	2002      	movs	r0, #2
 8009ace:	f012 fef9 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	9302      	str	r3, [sp, #8]
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	2301      	movs	r3, #1
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	4b50      	ldr	r3, [pc, #320]	; (8009c20 <LoRaWAN_Init+0x188>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	2002      	movs	r0, #2
 8009ae6:	f012 feed 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009aea:	1d3b      	adds	r3, r7, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	2000      	movs	r0, #0
 8009af0:	f003 f98a 	bl	800ce08 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	0e1b      	lsrs	r3, r3, #24
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	0c1b      	lsrs	r3, r3, #16
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	4619      	mov	r1, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	0a1b      	lsrs	r3, r3, #8
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	9302      	str	r3, [sp, #8]
 8009b0c:	9101      	str	r1, [sp, #4]
 8009b0e:	9200      	str	r2, [sp, #0]
 8009b10:	4b44      	ldr	r3, [pc, #272]	; (8009c24 <LoRaWAN_Init+0x18c>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	2100      	movs	r1, #0
 8009b16:	2002      	movs	r0, #2
 8009b18:	f012 fed4 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009b1c:	1d3b      	adds	r3, r7, #4
 8009b1e:	4619      	mov	r1, r3
 8009b20:	2001      	movs	r0, #1
 8009b22:	f003 f971 	bl	800ce08 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	0e1b      	lsrs	r3, r3, #24
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	0c1b      	lsrs	r3, r3, #16
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	4619      	mov	r1, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	0a1b      	lsrs	r3, r3, #8
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	b2c0      	uxtb	r0, r0
 8009b40:	9003      	str	r0, [sp, #12]
 8009b42:	9302      	str	r3, [sp, #8]
 8009b44:	9101      	str	r1, [sp, #4]
 8009b46:	9200      	str	r2, [sp, #0]
 8009b48:	4b37      	ldr	r3, [pc, #220]	; (8009c28 <LoRaWAN_Init+0x190>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	2002      	movs	r0, #2
 8009b50:	f012 feb8 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009b54:	2300      	movs	r3, #0
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	4b34      	ldr	r3, [pc, #208]	; (8009c2c <LoRaWAN_Init+0x194>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009b60:	4833      	ldr	r0, [pc, #204]	; (8009c30 <LoRaWAN_Init+0x198>)
 8009b62:	f012 fc01 	bl	801c368 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009b66:	2300      	movs	r3, #0
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	4b32      	ldr	r3, [pc, #200]	; (8009c34 <LoRaWAN_Init+0x19c>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009b72:	4831      	ldr	r0, [pc, #196]	; (8009c38 <LoRaWAN_Init+0x1a0>)
 8009b74:	f012 fbf8 	bl	801c368 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	4b2f      	ldr	r3, [pc, #188]	; (8009c3c <LoRaWAN_Init+0x1a4>)
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8009b84:	482e      	ldr	r0, [pc, #184]	; (8009c40 <LoRaWAN_Init+0x1a8>)
 8009b86:	f012 fbef 	bl	801c368 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	4b2d      	ldr	r3, [pc, #180]	; (8009c44 <LoRaWAN_Init+0x1ac>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009b96:	482c      	ldr	r0, [pc, #176]	; (8009c48 <LoRaWAN_Init+0x1b0>)
 8009b98:	f012 fbe6 	bl	801c368 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009b9c:	4a2b      	ldr	r2, [pc, #172]	; (8009c4c <LoRaWAN_Init+0x1b4>)
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	2001      	movs	r0, #1
 8009ba2:	f012 fb3d 	bl	801c220 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009ba6:	4a2a      	ldr	r2, [pc, #168]	; (8009c50 <LoRaWAN_Init+0x1b8>)
 8009ba8:	2100      	movs	r1, #0
 8009baa:	2002      	movs	r0, #2
 8009bac:	f012 fb38 	bl	801c220 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009bb0:	4a28      	ldr	r2, [pc, #160]	; (8009c54 <LoRaWAN_Init+0x1bc>)
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	2004      	movs	r0, #4
 8009bb6:	f012 fb33 	bl	801c220 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009bba:	4a27      	ldr	r2, [pc, #156]	; (8009c58 <LoRaWAN_Init+0x1c0>)
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	2008      	movs	r0, #8
 8009bc0:	f012 fb2e 	bl	801c220 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009bc4:	f000 fd3c 	bl	800a640 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009bc8:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 8009bcc:	4823      	ldr	r0, [pc, #140]	; (8009c5c <LoRaWAN_Init+0x1c4>)
 8009bce:	f002 f9ff 	bl	800bfd0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009bd2:	4823      	ldr	r0, [pc, #140]	; (8009c60 <LoRaWAN_Init+0x1c8>)
 8009bd4:	f002 fa5a 	bl	800c08c <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009bd8:	4819      	ldr	r0, [pc, #100]	; (8009c40 <LoRaWAN_Init+0x1a8>)
 8009bda:	f012 fbfb 	bl	801c3d4 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009bde:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <LoRaWAN_Init+0x1cc>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	4a21      	ldr	r2, [pc, #132]	; (8009c68 <LoRaWAN_Init+0x1d0>)
 8009be4:	7812      	ldrb	r2, [r2, #0]
 8009be6:	4611      	mov	r1, r2
 8009be8:	4618      	mov	r0, r3
 8009bea:	f002 fbc9 	bl	800c380 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009bee:	4b1f      	ldr	r3, [pc, #124]	; (8009c6c <LoRaWAN_Init+0x1d4>)
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <LoRaWAN_Init+0x1d8>)
 8009bf8:	6819      	ldr	r1, [r3, #0]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9300      	str	r3, [sp, #0]
 8009bfe:	4b1d      	ldr	r3, [pc, #116]	; (8009c74 <LoRaWAN_Init+0x1dc>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	481d      	ldr	r0, [pc, #116]	; (8009c78 <LoRaWAN_Init+0x1e0>)
 8009c04:	f012 fbb0 	bl	801c368 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009c08:	481b      	ldr	r0, [pc, #108]	; (8009c78 <LoRaWAN_Init+0x1e0>)
 8009c0a:	f012 fbe3 	bl	801c3d4 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009c0e:	bf00      	nop
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	0801cf70 	.word	0x0801cf70
 8009c1c:	0801cf94 	.word	0x0801cf94
 8009c20:	0801cfb8 	.word	0x0801cfb8
 8009c24:	0801cfdc 	.word	0x0801cfdc
 8009c28:	0801d000 	.word	0x0801d000
 8009c2c:	0800a131 	.word	0x0800a131
 8009c30:	20000460 	.word	0x20000460
 8009c34:	0800a143 	.word	0x0800a143
 8009c38:	20000478 	.word	0x20000478
 8009c3c:	0800a155 	.word	0x0800a155
 8009c40:	20000490 	.word	0x20000490
 8009c44:	0800a509 	.word	0x0800a509
 8009c48:	20000354 	.word	0x20000354
 8009c4c:	0800c315 	.word	0x0800c315
 8009c50:	08009df1 	.word	0x08009df1
 8009c54:	0800a52d 	.word	0x0800a52d
 8009c58:	0800a489 	.word	0x0800a489
 8009c5c:	20000024 	.word	0x20000024
 8009c60:	20000070 	.word	0x20000070
 8009c64:	20000020 	.word	0x20000020
 8009c68:	20000021 	.word	0x20000021
 8009c6c:	20000338 	.word	0x20000338
 8009c70:	20000084 	.word	0x20000084
 8009c74:	0800a10d 	.word	0x0800a10d
 8009c78:	2000033c 	.word	0x2000033c

08009c7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b082      	sub	sp, #8
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009c86:	88fb      	ldrh	r3, [r7, #6]
 8009c88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c8c:	d104      	bne.n	8009c98 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009c8e:	2100      	movs	r1, #0
 8009c90:	2002      	movs	r0, #2
 8009c92:	f012 fae7 	bl	801c264 <UTIL_SEQ_SetTask>
      }
      break;
 8009c96:	e000      	b.n	8009c9a <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009c98:	bf00      	nop
  }
}
 8009c9a:	bf00      	nop
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009ca4:	b5b0      	push	{r4, r5, r7, lr}
 8009ca6:	b08a      	sub	sp, #40	; 0x28
 8009ca8:	af06      	add	r7, sp, #24
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8088 	beq.w	8009dca <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009cba:	4846      	ldr	r0, [pc, #280]	; (8009dd4 <OnRxData+0x130>)
 8009cbc:	f012 fb8a 	bl	801c3d4 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d057      	beq.n	8009d78 <OnRxData+0xd4>
    {
      if (appData != NULL)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d054      	beq.n	8009d78 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d04d      	beq.n	8009d78 <OnRxData+0xd4>
        {
          switch (appData->Port)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d021      	beq.n	8009d28 <OnRxData+0x84>
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	d149      	bne.n	8009d7c <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	785b      	ldrb	r3, [r3, #1]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d117      	bne.n	8009d20 <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d00e      	beq.n	8009d18 <OnRxData+0x74>
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	dc12      	bgt.n	8009d24 <OnRxData+0x80>
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d002      	beq.n	8009d08 <OnRxData+0x64>
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d004      	beq.n	8009d10 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 8009d06:	e00d      	b.n	8009d24 <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 8009d08:	2000      	movs	r0, #0
 8009d0a:	f002 fcc5 	bl	800c698 <LmHandlerRequestClass>
                    break;
 8009d0e:	e00a      	b.n	8009d26 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 8009d10:	2001      	movs	r0, #1
 8009d12:	f002 fcc1 	bl	800c698 <LmHandlerRequestClass>
                    break;
 8009d16:	e006      	b.n	8009d26 <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 8009d18:	2002      	movs	r0, #2
 8009d1a:	f002 fcbd 	bl	800c698 <LmHandlerRequestClass>
                    break;
 8009d1e:	e002      	b.n	8009d26 <OnRxData+0x82>
                }
              }
 8009d20:	bf00      	nop
 8009d22:	e02e      	b.n	8009d82 <OnRxData+0xde>
                    break;
 8009d24:	bf00      	nop
              break;
 8009d26:	e02c      	b.n	8009d82 <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	785b      	ldrb	r3, [r3, #1]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d127      	bne.n	8009d80 <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	f003 0301 	and.w	r3, r3, #1
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	4b26      	ldr	r3, [pc, #152]	; (8009dd8 <OnRxData+0x134>)
 8009d3e:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 8009d40:	4b25      	ldr	r3, [pc, #148]	; (8009dd8 <OnRxData+0x134>)
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10b      	bne.n	8009d60 <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8009d48:	4b24      	ldr	r3, [pc, #144]	; (8009ddc <OnRxData+0x138>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	2003      	movs	r0, #3
 8009d50:	f012 fdb8 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009d54:	2201      	movs	r2, #1
 8009d56:	2120      	movs	r1, #32
 8009d58:	4821      	ldr	r0, [pc, #132]	; (8009de0 <OnRxData+0x13c>)
 8009d5a:	f7fb f8df 	bl	8004f1c <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 8009d5e:	e00f      	b.n	8009d80 <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009d60:	4b20      	ldr	r3, [pc, #128]	; (8009de4 <OnRxData+0x140>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	2100      	movs	r1, #0
 8009d66:	2003      	movs	r0, #3
 8009d68:	f012 fdac 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2120      	movs	r1, #32
 8009d70:	481b      	ldr	r0, [pc, #108]	; (8009de0 <OnRxData+0x13c>)
 8009d72:	f7fb f8d3 	bl	8004f1c <HAL_GPIO_WritePin>
              break;
 8009d76:	e003      	b.n	8009d80 <OnRxData+0xdc>

            default:

              break;
          }
        }
 8009d78:	bf00      	nop
 8009d7a:	e002      	b.n	8009d82 <OnRxData+0xde>
              break;
 8009d7c:	bf00      	nop
 8009d7e:	e000      	b.n	8009d82 <OnRxData+0xde>
              break;
 8009d80:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	7c1b      	ldrb	r3, [r3, #16]
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d81f      	bhi.n	8009dca <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	7bfa      	ldrb	r2, [r7, #15]
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	f991 1008 	ldrsb.w	r1, [r1, #8]
 8009d96:	460c      	mov	r4, r1
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	7c09      	ldrb	r1, [r1, #16]
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	4912      	ldr	r1, [pc, #72]	; (8009de8 <OnRxData+0x144>)
 8009da0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009da4:	6838      	ldr	r0, [r7, #0]
 8009da6:	f990 0009 	ldrsb.w	r0, [r0, #9]
 8009daa:	4605      	mov	r5, r0
 8009dac:	6838      	ldr	r0, [r7, #0]
 8009dae:	f990 000a 	ldrsb.w	r0, [r0, #10]
 8009db2:	9005      	str	r0, [sp, #20]
 8009db4:	9504      	str	r5, [sp, #16]
 8009db6:	9103      	str	r1, [sp, #12]
 8009db8:	9402      	str	r4, [sp, #8]
 8009dba:	9201      	str	r2, [sp, #4]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <OnRxData+0x148>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	2003      	movs	r0, #3
 8009dc6:	f012 fd7d 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bdb0      	pop	{r4, r5, r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20000478 	.word	0x20000478
 8009dd8:	2000045e 	.word	0x2000045e
 8009ddc:	0801d024 	.word	0x0801d024
 8009de0:	48000400 	.word	0x48000400
 8009de4:	0801d030 	.word	0x0801d030
 8009de8:	20000008 	.word	0x20000008
 8009dec:	0801d03c 	.word	0x0801d03c

08009df0 <SendTxData>:

static void SendTxData(void)
{
 8009df0:	b590      	push	{r4, r7, lr}
 8009df2:	b091      	sub	sp, #68	; 0x44
 8009df4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009df6:	23ff      	movs	r3, #255	; 0xff
 8009df8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 8009dfc:	f7f7 fe48 	bl	8001a90 <GetBatteryLevel>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009e06:	2300      	movs	r3, #0
 8009e08:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 8009e12:	2300      	movs	r3, #0
 8009e14:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 8009e16:	2300      	movs	r3, #0
 8009e18:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009e26:	1d3b      	adds	r3, r7, #4
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f7f7 fff1 	bl	8001e10 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8009e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	4b8f      	ldr	r3, [pc, #572]	; (800a074 <SendTxData+0x284>)
 8009e36:	2201      	movs	r2, #1
 8009e38:	2100      	movs	r1, #0
 8009e3a:	2002      	movs	r0, #2
 8009e3c:	f012 fd42 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f6 fe6a 	bl	8000b1c <__aeabi_f2iz>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	b21b      	sxth	r3, r3
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	4b8a      	ldr	r3, [pc, #552]	; (800a078 <SendTxData+0x288>)
 8009e50:	2201      	movs	r2, #1
 8009e52:	2100      	movs	r1, #0
 8009e54:	2002      	movs	r0, #2
 8009e56:	f012 fd35 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009e5a:	4b88      	ldr	r3, [pc, #544]	; (800a07c <SendTxData+0x28c>)
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4987      	ldr	r1, [pc, #540]	; (800a080 <SendTxData+0x290>)
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f6 fd09 	bl	800087c <__aeabi_fmul>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7f6 fe7b 	bl	8000b68 <__aeabi_f2uiz>
 8009e72:	4603      	mov	r3, r0
 8009e74:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f7f6 fe4f 	bl	8000b1c <__aeabi_f2iz>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	497f      	ldr	r1, [pc, #508]	; (800a084 <SendTxData+0x294>)
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f6 fcf8 	bl	800087c <__aeabi_fmul>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	497c      	ldr	r1, [pc, #496]	; (800a080 <SendTxData+0x290>)
 8009e90:	4618      	mov	r0, r3
 8009e92:	f7f6 fda7 	bl	80009e4 <__aeabi_fdiv>
 8009e96:	4603      	mov	r3, r0
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7f6 fe65 	bl	8000b68 <__aeabi_f2uiz>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 8009ea2:	4b76      	ldr	r3, [pc, #472]	; (800a07c <SendTxData+0x28c>)
 8009ea4:	685a      	ldr	r2, [r3, #4]
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	1c59      	adds	r1, r3, #1
 8009eaa:	6339      	str	r1, [r7, #48]	; 0x30
 8009eac:	4413      	add	r3, r2
 8009eae:	4a76      	ldr	r2, [pc, #472]	; (800a088 <SendTxData+0x298>)
 8009eb0:	7812      	ldrb	r2, [r2, #0]
 8009eb2:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009eb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	b298      	uxth	r0, r3
 8009eba:	4b70      	ldr	r3, [pc, #448]	; (800a07c <SendTxData+0x28c>)
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	1c59      	adds	r1, r3, #1
 8009ec2:	6339      	str	r1, [r7, #48]	; 0x30
 8009ec4:	4413      	add	r3, r2
 8009ec6:	b2c2      	uxtb	r2, r0
 8009ec8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009eca:	4b6c      	ldr	r3, [pc, #432]	; (800a07c <SendTxData+0x28c>)
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	1c59      	adds	r1, r3, #1
 8009ed2:	6339      	str	r1, [r7, #48]	; 0x30
 8009ed4:	4413      	add	r3, r2
 8009ed6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009edc:	4b67      	ldr	r3, [pc, #412]	; (800a07c <SendTxData+0x28c>)
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	1c59      	adds	r1, r3, #1
 8009ee4:	6339      	str	r1, [r7, #48]	; 0x30
 8009ee6:	4413      	add	r3, r2
 8009ee8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009eea:	b2d2      	uxtb	r2, r2
 8009eec:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009eee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ef0:	0a1b      	lsrs	r3, r3, #8
 8009ef2:	b298      	uxth	r0, r3
 8009ef4:	4b61      	ldr	r3, [pc, #388]	; (800a07c <SendTxData+0x28c>)
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	1c59      	adds	r1, r3, #1
 8009efc:	6339      	str	r1, [r7, #48]	; 0x30
 8009efe:	4413      	add	r3, r2
 8009f00:	b2c2      	uxtb	r2, r0
 8009f02:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009f04:	4b5d      	ldr	r3, [pc, #372]	; (800a07c <SendTxData+0x28c>)
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	1c59      	adds	r1, r3, #1
 8009f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8009f0e:	4413      	add	r3, r2
 8009f10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009f16:	4b5d      	ldr	r3, [pc, #372]	; (800a08c <SendTxData+0x29c>)
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d007      	beq.n	8009f2e <SendTxData+0x13e>
 8009f1e:	4b5b      	ldr	r3, [pc, #364]	; (800a08c <SendTxData+0x29c>)
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d003      	beq.n	8009f2e <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009f26:	4b59      	ldr	r3, [pc, #356]	; (800a08c <SendTxData+0x29c>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d120      	bne.n	8009f70 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 8009f2e:	4b53      	ldr	r3, [pc, #332]	; (800a07c <SendTxData+0x28c>)
 8009f30:	685a      	ldr	r2, [r3, #4]
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	1c59      	adds	r1, r3, #1
 8009f36:	6339      	str	r1, [r7, #48]	; 0x30
 8009f38:	4413      	add	r3, r2
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009f3e:	4b4f      	ldr	r3, [pc, #316]	; (800a07c <SendTxData+0x28c>)
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	1c59      	adds	r1, r3, #1
 8009f46:	6339      	str	r1, [r7, #48]	; 0x30
 8009f48:	4413      	add	r3, r2
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009f4e:	4b4b      	ldr	r3, [pc, #300]	; (800a07c <SendTxData+0x28c>)
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	1c59      	adds	r1, r3, #1
 8009f56:	6339      	str	r1, [r7, #48]	; 0x30
 8009f58:	4413      	add	r3, r2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009f5e:	4b47      	ldr	r3, [pc, #284]	; (800a07c <SendTxData+0x28c>)
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f64:	1c59      	adds	r1, r3, #1
 8009f66:	6339      	str	r1, [r7, #48]	; 0x30
 8009f68:	4413      	add	r3, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	e05b      	b.n	800a028 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009f78:	4b40      	ldr	r3, [pc, #256]	; (800a07c <SendTxData+0x28c>)
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	6339      	str	r1, [r7, #48]	; 0x30
 8009f82:	18d4      	adds	r4, r2, r3
 8009f84:	f7f7 fd84 	bl	8001a90 <GetBatteryLevel>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	1418      	asrs	r0, r3, #16
 8009f90:	4b3a      	ldr	r3, [pc, #232]	; (800a07c <SendTxData+0x28c>)
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f96:	1c59      	adds	r1, r3, #1
 8009f98:	6339      	str	r1, [r7, #48]	; 0x30
 8009f9a:	4413      	add	r3, r2
 8009f9c:	b2c2      	uxtb	r2, r0
 8009f9e:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1218      	asrs	r0, r3, #8
 8009fa4:	4b35      	ldr	r3, [pc, #212]	; (800a07c <SendTxData+0x28c>)
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	1c59      	adds	r1, r3, #1
 8009fac:	6339      	str	r1, [r7, #48]	; 0x30
 8009fae:	4413      	add	r3, r2
 8009fb0:	b2c2      	uxtb	r2, r0
 8009fb2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8009fb4:	4b31      	ldr	r3, [pc, #196]	; (800a07c <SendTxData+0x28c>)
 8009fb6:	685a      	ldr	r2, [r3, #4]
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	1c59      	adds	r1, r3, #1
 8009fbc:	6339      	str	r1, [r7, #48]	; 0x30
 8009fbe:	4413      	add	r3, r2
 8009fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	1418      	asrs	r0, r3, #16
 8009fca:	4b2c      	ldr	r3, [pc, #176]	; (800a07c <SendTxData+0x28c>)
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	1c59      	adds	r1, r3, #1
 8009fd2:	6339      	str	r1, [r7, #48]	; 0x30
 8009fd4:	4413      	add	r3, r2
 8009fd6:	b2c2      	uxtb	r2, r0
 8009fd8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	1218      	asrs	r0, r3, #8
 8009fde:	4b27      	ldr	r3, [pc, #156]	; (800a07c <SendTxData+0x28c>)
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	1c59      	adds	r1, r3, #1
 8009fe6:	6339      	str	r1, [r7, #48]	; 0x30
 8009fe8:	4413      	add	r3, r2
 8009fea:	b2c2      	uxtb	r2, r0
 8009fec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8009fee:	4b23      	ldr	r3, [pc, #140]	; (800a07c <SendTxData+0x28c>)
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	1c59      	adds	r1, r3, #1
 8009ff6:	6339      	str	r1, [r7, #48]	; 0x30
 8009ff8:	4413      	add	r3, r2
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	b2d2      	uxtb	r2, r2
 8009ffe:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800a000:	8bfb      	ldrh	r3, [r7, #30]
 800a002:	0a1b      	lsrs	r3, r3, #8
 800a004:	b298      	uxth	r0, r3
 800a006:	4b1d      	ldr	r3, [pc, #116]	; (800a07c <SendTxData+0x28c>)
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	1c59      	adds	r1, r3, #1
 800a00e:	6339      	str	r1, [r7, #48]	; 0x30
 800a010:	4413      	add	r3, r2
 800a012:	b2c2      	uxtb	r2, r0
 800a014:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800a016:	4b19      	ldr	r3, [pc, #100]	; (800a07c <SendTxData+0x28c>)
 800a018:	685a      	ldr	r2, [r3, #4]
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	1c59      	adds	r1, r3, #1
 800a01e:	6339      	str	r1, [r7, #48]	; 0x30
 800a020:	4413      	add	r3, r2
 800a022:	8bfa      	ldrh	r2, [r7, #30]
 800a024:	b2d2      	uxtb	r2, r2
 800a026:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800a028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	4b13      	ldr	r3, [pc, #76]	; (800a07c <SendTxData+0x28c>)
 800a02e:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a030:	4b17      	ldr	r3, [pc, #92]	; (800a090 <SendTxData+0x2a0>)
 800a032:	7a5b      	ldrb	r3, [r3, #9]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d007      	beq.n	800a048 <SendTxData+0x258>
 800a038:	f002 fa24 	bl	800c484 <LmHandlerJoinStatus>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d102      	bne.n	800a048 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800a042:	4813      	ldr	r0, [pc, #76]	; (800a090 <SendTxData+0x2a0>)
 800a044:	f012 fa34 	bl	801c4b0 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800a048:	4b10      	ldr	r3, [pc, #64]	; (800a08c <SendTxData+0x29c>)
 800a04a:	78db      	ldrb	r3, [r3, #3]
 800a04c:	2200      	movs	r2, #0
 800a04e:	4619      	mov	r1, r3
 800a050:	480a      	ldr	r0, [pc, #40]	; (800a07c <SendTxData+0x28c>)
 800a052:	f002 fa33 	bl	800c4bc <LmHandlerSend>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800a05c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a060:	2b00      	cmp	r3, #0
 800a062:	d119      	bne.n	800a098 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800a064:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <SendTxData+0x2a4>)
 800a066:	2201      	movs	r2, #1
 800a068:	2100      	movs	r1, #0
 800a06a:	2001      	movs	r0, #1
 800a06c:	f012 fc2a 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800a070:	e029      	b.n	800a0c6 <SendTxData+0x2d6>
 800a072:	bf00      	nop
 800a074:	0801d084 	.word	0x0801d084
 800a078:	0801d090 	.word	0x0801d090
 800a07c:	20000088 	.word	0x20000088
 800a080:	41200000 	.word	0x41200000
 800a084:	42c80000 	.word	0x42c80000
 800a088:	2000045e 	.word	0x2000045e
 800a08c:	20000070 	.word	0x20000070
 800a090:	20000490 	.word	0x20000490
 800a094:	0801d09c 	.word	0x0801d09c
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800a098:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a09c:	f113 0f06 	cmn.w	r3, #6
 800a0a0:	d111      	bne.n	800a0c6 <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800a0a2:	f002 f963 	bl	800c36c <LmHandlerGetDutyCycleWaitTime>
 800a0a6:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800a0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00b      	beq.n	800a0c6 <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800a0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b0:	4a11      	ldr	r2, [pc, #68]	; (800a0f8 <SendTxData+0x308>)
 800a0b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b6:	099b      	lsrs	r3, r3, #6
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	4b10      	ldr	r3, [pc, #64]	; (800a0fc <SendTxData+0x30c>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	2100      	movs	r1, #0
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	f012 fbff 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800a0c6:	4b0e      	ldr	r3, [pc, #56]	; (800a100 <SendTxData+0x310>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10f      	bne.n	800a0ee <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800a0ce:	480d      	ldr	r0, [pc, #52]	; (800a104 <SendTxData+0x314>)
 800a0d0:	f012 f9ee 	bl	801c4b0 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800a0d4:	4b0c      	ldr	r3, [pc, #48]	; (800a108 <SendTxData+0x318>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	bf38      	it	cc
 800a0de:	4613      	movcc	r3, r2
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	4808      	ldr	r0, [pc, #32]	; (800a104 <SendTxData+0x314>)
 800a0e4:	f012 fa54 	bl	801c590 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800a0e8:	4806      	ldr	r0, [pc, #24]	; (800a104 <SendTxData+0x314>)
 800a0ea:	f012 f973 	bl	801c3d4 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a0ee:	bf00      	nop
 800a0f0:	373c      	adds	r7, #60	; 0x3c
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd90      	pop	{r4, r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	10624dd3 	.word	0x10624dd3
 800a0fc:	0801d0ac 	.word	0x0801d0ac
 800a100:	20000338 	.word	0x20000338
 800a104:	2000033c 	.word	0x2000033c
 800a108:	20000084 	.word	0x20000084

0800a10c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a114:	2100      	movs	r1, #0
 800a116:	2002      	movs	r0, #2
 800a118:	f012 f8a4 	bl	801c264 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a11c:	4803      	ldr	r0, [pc, #12]	; (800a12c <OnTxTimerEvent+0x20>)
 800a11e:	f012 f959 	bl	801c3d4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	2000033c 	.word	0x2000033c

0800a130 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bc80      	pop	{r7}
 800a140:	4770      	bx	lr

0800a142 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	bc80      	pop	{r7}
 800a152:	4770      	bx	lr

0800a154 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	bc80      	pop	{r7}
 800a164:	4770      	bx	lr
	...

0800a168 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af04      	add	r7, sp, #16
 800a16e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d041      	beq.n	800a1fa <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d03d      	beq.n	800a1fa <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a17e:	4821      	ldr	r0, [pc, #132]	; (800a204 <OnTxData+0x9c>)
 800a180:	f012 f928 	bl	801c3d4 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a184:	4b20      	ldr	r3, [pc, #128]	; (800a208 <OnTxData+0xa0>)
 800a186:	2200      	movs	r2, #0
 800a188:	2100      	movs	r1, #0
 800a18a:	2002      	movs	r0, #2
 800a18c:	f012 fb9a 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	7c12      	ldrb	r2, [r2, #16]
 800a198:	4611      	mov	r1, r2
 800a19a:	687a      	ldr	r2, [r7, #4]
 800a19c:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a1a0:	4610      	mov	r0, r2
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a1a8:	9203      	str	r2, [sp, #12]
 800a1aa:	9002      	str	r0, [sp, #8]
 800a1ac:	9101      	str	r1, [sp, #4]
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	4b16      	ldr	r3, [pc, #88]	; (800a20c <OnTxData+0xa4>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	2003      	movs	r0, #3
 800a1b8:	f012 fb84 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a1bc:	4b14      	ldr	r3, [pc, #80]	; (800a210 <OnTxData+0xa8>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	2003      	movs	r0, #3
 800a1c4:	f012 fb7e 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	7a1b      	ldrb	r3, [r3, #8]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d10e      	bne.n	800a1ee <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	7a5b      	ldrb	r3, [r3, #9]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <OnTxData+0x74>
 800a1d8:	4b0e      	ldr	r3, [pc, #56]	; (800a214 <OnTxData+0xac>)
 800a1da:	e000      	b.n	800a1de <OnTxData+0x76>
 800a1dc:	4b0e      	ldr	r3, [pc, #56]	; (800a218 <OnTxData+0xb0>)
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	4b0e      	ldr	r3, [pc, #56]	; (800a21c <OnTxData+0xb4>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	2003      	movs	r0, #3
 800a1e8:	f012 fb6c 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a1ec:	e005      	b.n	800a1fa <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a1ee:	4b0c      	ldr	r3, [pc, #48]	; (800a220 <OnTxData+0xb8>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	2003      	movs	r0, #3
 800a1f6:	f012 fb65 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20000460 	.word	0x20000460
 800a208:	0801d0cc 	.word	0x0801d0cc
 800a20c:	0801d100 	.word	0x0801d100
 800a210:	0801d134 	.word	0x0801d134
 800a214:	0801d144 	.word	0x0801d144
 800a218:	0801d148 	.word	0x0801d148
 800a21c:	0801d150 	.word	0x0801d150
 800a220:	0801d164 	.word	0x0801d164

0800a224 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d039      	beq.n	800a2a6 <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d11e      	bne.n	800a27a <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a23c:	2100      	movs	r1, #0
 800a23e:	2004      	movs	r0, #4
 800a240:	f012 f810 	bl	801c264 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a244:	481a      	ldr	r0, [pc, #104]	; (800a2b0 <OnJoinRequest+0x8c>)
 800a246:	f012 f933 	bl	801c4b0 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a24a:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <OnJoinRequest+0x90>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	2002      	movs	r0, #2
 800a252:	f012 fb37 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	799b      	ldrb	r3, [r3, #6]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d106      	bne.n	800a26c <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a25e:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <OnJoinRequest+0x94>)
 800a260:	2200      	movs	r2, #0
 800a262:	2100      	movs	r1, #0
 800a264:	2002      	movs	r0, #2
 800a266:	f012 fb2d 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a26a:	e01c      	b.n	800a2a6 <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a26c:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <OnJoinRequest+0x98>)
 800a26e:	2200      	movs	r2, #0
 800a270:	2100      	movs	r1, #0
 800a272:	2002      	movs	r0, #2
 800a274:	f012 fb26 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a278:	e015      	b.n	800a2a6 <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a27a:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <OnJoinRequest+0x9c>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	2100      	movs	r1, #0
 800a280:	2002      	movs	r0, #2
 800a282:	f012 fb1f 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	799b      	ldrb	r3, [r3, #6]
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d10b      	bne.n	800a2a6 <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a28e:	4b0d      	ldr	r3, [pc, #52]	; (800a2c4 <OnJoinRequest+0xa0>)
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	2002      	movs	r0, #2
 800a296:	f012 fb15 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a29a:	4b0b      	ldr	r3, [pc, #44]	; (800a2c8 <OnJoinRequest+0xa4>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2101      	movs	r1, #1
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f002 f86d 	bl	800c380 <LmHandlerJoin>
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000490 	.word	0x20000490
 800a2b4:	0801d174 	.word	0x0801d174
 800a2b8:	0801d18c 	.word	0x0801d18c
 800a2bc:	0801d1ac 	.word	0x0801d1ac
 800a2c0:	0801d1cc 	.word	0x0801d1cc
 800a2c4:	0801d1e8 	.word	0x0801d1e8
 800a2c8:	20000020 	.word	0x20000020

0800a2cc <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ce:	b093      	sub	sp, #76	; 0x4c
 800a2d0:	af0c      	add	r7, sp, #48	; 0x30
 800a2d2:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d056      	beq.n	800a388 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	2b02      	cmp	r3, #2
 800a2e0:	d008      	beq.n	800a2f4 <OnBeaconStatusChange+0x28>
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d049      	beq.n	800a37a <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a2e6:	4b2b      	ldr	r3, [pc, #172]	; (800a394 <OnBeaconStatusChange+0xc8>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	2002      	movs	r0, #2
 800a2ee:	f012 fae9 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a2f2:	e04a      	b.n	800a38a <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	7c1b      	ldrb	r3, [r3, #16]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a300:	461c      	mov	r4, r3
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a308:	461d      	mov	r5, r3
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	6852      	ldr	r2, [r2, #4]
 800a312:	6979      	ldr	r1, [r7, #20]
 800a314:	7d89      	ldrb	r1, [r1, #22]
 800a316:	460e      	mov	r6, r1
 800a318:	6979      	ldr	r1, [r7, #20]
 800a31a:	7dc9      	ldrb	r1, [r1, #23]
 800a31c:	6139      	str	r1, [r7, #16]
 800a31e:	6979      	ldr	r1, [r7, #20]
 800a320:	7e09      	ldrb	r1, [r1, #24]
 800a322:	60f9      	str	r1, [r7, #12]
 800a324:	6979      	ldr	r1, [r7, #20]
 800a326:	7e49      	ldrb	r1, [r1, #25]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	6979      	ldr	r1, [r7, #20]
 800a32c:	7e89      	ldrb	r1, [r1, #26]
 800a32e:	6079      	str	r1, [r7, #4]
 800a330:	6979      	ldr	r1, [r7, #20]
 800a332:	7ec9      	ldrb	r1, [r1, #27]
 800a334:	6039      	str	r1, [r7, #0]
 800a336:	6979      	ldr	r1, [r7, #20]
 800a338:	7f09      	ldrb	r1, [r1, #28]
 800a33a:	910b      	str	r1, [sp, #44]	; 0x2c
 800a33c:	f8d7 c000 	ldr.w	ip, [r7]
 800a340:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800a344:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a348:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800a34c:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a350:	f8cd c020 	str.w	ip, [sp, #32]
 800a354:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a358:	f8cd c01c 	str.w	ip, [sp, #28]
 800a35c:	6939      	ldr	r1, [r7, #16]
 800a35e:	9106      	str	r1, [sp, #24]
 800a360:	9605      	str	r6, [sp, #20]
 800a362:	9204      	str	r2, [sp, #16]
 800a364:	9303      	str	r3, [sp, #12]
 800a366:	9502      	str	r5, [sp, #8]
 800a368:	9401      	str	r4, [sp, #4]
 800a36a:	9000      	str	r0, [sp, #0]
 800a36c:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <OnBeaconStatusChange+0xcc>)
 800a36e:	2200      	movs	r2, #0
 800a370:	2100      	movs	r1, #0
 800a372:	2002      	movs	r0, #2
 800a374:	f012 faa6 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a378:	e007      	b.n	800a38a <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a37a:	4b08      	ldr	r3, [pc, #32]	; (800a39c <OnBeaconStatusChange+0xd0>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	2100      	movs	r1, #0
 800a380:	2002      	movs	r0, #2
 800a382:	f012 fa9f 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a386:	e000      	b.n	800a38a <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800a388:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a38a:	bf00      	nop
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	bf00      	nop
 800a394:	0801d20c 	.word	0x0801d20c
 800a398:	0801d224 	.word	0x0801d224
 800a39c:	0801d298 	.word	0x0801d298

0800a3a0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a3aa:	79fb      	ldrb	r3, [r7, #7]
 800a3ac:	4a06      	ldr	r2, [pc, #24]	; (800a3c8 <OnClassChange+0x28>)
 800a3ae:	5cd3      	ldrb	r3, [r2, r3]
 800a3b0:	9300      	str	r3, [sp, #0]
 800a3b2:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <OnClassChange+0x2c>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	2002      	movs	r0, #2
 800a3ba:	f012 fa83 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0801d2d4 	.word	0x0801d2d4
 800a3cc:	0801d2b8 	.word	0x0801d2b8

0800a3d0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	2001      	movs	r0, #1
 800a3d8:	f011 ff44 	bl	801c264 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a3dc:	bf00      	nop
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a3e8:	4a0d      	ldr	r2, [pc, #52]	; (800a420 <OnTxPeriodicityChanged+0x40>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <OnTxPeriodicityChanged+0x40>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d103      	bne.n	800a3fe <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a3f6:	4b0a      	ldr	r3, [pc, #40]	; (800a420 <OnTxPeriodicityChanged+0x40>)
 800a3f8:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3fc:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a3fe:	4809      	ldr	r0, [pc, #36]	; (800a424 <OnTxPeriodicityChanged+0x44>)
 800a400:	f012 f856 	bl	801c4b0 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a404:	4b06      	ldr	r3, [pc, #24]	; (800a420 <OnTxPeriodicityChanged+0x40>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4619      	mov	r1, r3
 800a40a:	4806      	ldr	r0, [pc, #24]	; (800a424 <OnTxPeriodicityChanged+0x44>)
 800a40c:	f012 f8c0 	bl	801c590 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a410:	4804      	ldr	r0, [pc, #16]	; (800a424 <OnTxPeriodicityChanged+0x44>)
 800a412:	f011 ffdf 	bl	801c3d4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	20000084 	.word	0x20000084
 800a424:	2000033c 	.word	0x2000033c

0800a428 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	4603      	mov	r3, r0
 800a430:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a432:	4a04      	ldr	r2, [pc, #16]	; (800a444 <OnTxFrameCtrlChanged+0x1c>)
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a438:	bf00      	nop
 800a43a:	370c      	adds	r7, #12
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20000070 	.word	0x20000070

0800a448 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a452:	4a04      	ldr	r2, [pc, #16]	; (800a464 <OnPingSlotPeriodicityChanged+0x1c>)
 800a454:	79fb      	ldrb	r3, [r7, #7]
 800a456:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	20000070 	.word	0x20000070

0800a468 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a46c:	f002 fcfd 	bl	800ce6a <LmHandlerHalt>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d106      	bne.n	800a484 <OnSystemReset+0x1c>
 800a476:	f002 f805 	bl	800c484 <LmHandlerJoinStatus>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a480:	f7ff faf4 	bl	8009a6c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a484:	bf00      	nop
 800a486:	bd80      	pop	{r7, pc}

0800a488 <StopJoin>:

static void StopJoin(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a48c:	4817      	ldr	r0, [pc, #92]	; (800a4ec <StopJoin+0x64>)
 800a48e:	f012 f80f 	bl	801c4b0 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a492:	f002 fcdd 	bl	800ce50 <LmHandlerStop>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d006      	beq.n	800a4aa <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a49c:	4b14      	ldr	r3, [pc, #80]	; (800a4f0 <StopJoin+0x68>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	2002      	movs	r0, #2
 800a4a4:	f012 fa0e 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800a4a8:	e01a      	b.n	800a4e0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a4aa:	4b12      	ldr	r3, [pc, #72]	; (800a4f4 <StopJoin+0x6c>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f012 fa07 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a4b6:	4b10      	ldr	r3, [pc, #64]	; (800a4f8 <StopJoin+0x70>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a4bc:	4b0f      	ldr	r3, [pc, #60]	; (800a4fc <StopJoin+0x74>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	2002      	movs	r0, #2
 800a4c4:	f012 f9fe 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a4c8:	480d      	ldr	r0, [pc, #52]	; (800a500 <StopJoin+0x78>)
 800a4ca:	f001 fddf 	bl	800c08c <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <StopJoin+0x70>)
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f001 ff53 	bl	800c380 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a4da:	4804      	ldr	r0, [pc, #16]	; (800a4ec <StopJoin+0x64>)
 800a4dc:	f011 ff7a 	bl	801c3d4 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a4e0:	4808      	ldr	r0, [pc, #32]	; (800a504 <StopJoin+0x7c>)
 800a4e2:	f011 ff77 	bl	801c3d4 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a4e6:	bf00      	nop
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	2000033c 	.word	0x2000033c
 800a4f0:	0801d2d8 	.word	0x0801d2d8
 800a4f4:	0801d2f8 	.word	0x0801d2f8
 800a4f8:	20000020 	.word	0x20000020
 800a4fc:	0801d30c 	.word	0x0801d30c
 800a500:	20000070 	.word	0x20000070
 800a504:	20000354 	.word	0x20000354

0800a508 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a510:	4b05      	ldr	r3, [pc, #20]	; (800a528 <OnStopJoinTimerEvent+0x20>)
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	2b02      	cmp	r3, #2
 800a516:	d103      	bne.n	800a520 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a518:	2100      	movs	r1, #0
 800a51a:	2008      	movs	r0, #8
 800a51c:	f011 fea2 	bl	801c264 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	20000020 	.word	0x20000020

0800a52c <StoreContext>:

static void StoreContext(void)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a532:	23ff      	movs	r3, #255	; 0xff
 800a534:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a536:	f002 fca5 	bl	800ce84 <LmHandlerNvmDataStore>
 800a53a:	4603      	mov	r3, r0
 800a53c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a53e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a542:	f113 0f08 	cmn.w	r3, #8
 800a546:	d106      	bne.n	800a556 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a548:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <StoreContext+0x48>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	2100      	movs	r1, #0
 800a54e:	2002      	movs	r0, #2
 800a550:	f012 f9b8 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a554:	e00a      	b.n	800a56c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d105      	bne.n	800a56c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <StoreContext+0x4c>)
 800a562:	2200      	movs	r2, #0
 800a564:	2100      	movs	r1, #0
 800a566:	2002      	movs	r0, #2
 800a568:	f012 f9ac 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	0801d32c 	.word	0x0801d32c
 800a578:	0801d344 	.word	0x0801d344

0800a57c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d106      	bne.n	800a59a <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a58c:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <OnNvmDataChange+0x34>)
 800a58e:	2200      	movs	r2, #0
 800a590:	2100      	movs	r1, #0
 800a592:	2002      	movs	r0, #2
 800a594:	f012 f996 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a598:	e005      	b.n	800a5a6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a59a:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <OnNvmDataChange+0x38>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	2100      	movs	r1, #0
 800a5a0:	2002      	movs	r0, #2
 800a5a2:	f012 f98f 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	0801d35c 	.word	0x0801d35c
 800a5b4:	0801d370 	.word	0x0801d370

0800a5b8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a5c2:	f7fa f85f 	bl	8004684 <HAL_FLASH_Unlock>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d11c      	bne.n	800a606 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a5cc:	4b10      	ldr	r3, [pc, #64]	; (800a610 <OnStoreContextRequest+0x58>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	029a      	lsls	r2, r3, #10
 800a5d2:	4b10      	ldr	r3, [pc, #64]	; (800a614 <OnStoreContextRequest+0x5c>)
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800a5da:	fbb2 f1f3 	udiv	r1, r2, r3
 800a5de:	fb01 f303 	mul.w	r3, r1, r3
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	0adb      	lsrs	r3, r3, #11
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7f6 fea3 	bl	8001336 <FLASH_IF_EraseByPages>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d105      	bne.n	800a602 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	6879      	ldr	r1, [r7, #4]
 800a5fc:	4806      	ldr	r0, [pc, #24]	; (800a618 <OnStoreContextRequest+0x60>)
 800a5fe:	f7f6 fdb9 	bl	8001174 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a602:	f7fa f861 	bl	80046c8 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	1fff75e0 	.word	0x1fff75e0
 800a614:	03fffc00 	.word	0x03fffc00
 800a618:	0803f000 	.word	0x0803f000

0800a61c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	461a      	mov	r2, r3
 800a62c:	4903      	ldr	r1, [pc, #12]	; (800a63c <OnRestoreContextRequest+0x20>)
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f011 f8f8 	bl	801b824 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	0803f000 	.word	0x0803f000

0800a640 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a644:	4b18      	ldr	r3, [pc, #96]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a646:	2200      	movs	r2, #0
 800a648:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a64a:	4b17      	ldr	r3, [pc, #92]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a650:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a652:	2200      	movs	r2, #0
 800a654:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a658:	2200      	movs	r2, #0
 800a65a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a65c:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f043 0320 	orr.w	r3, r3, #32
 800a664:	4a10      	ldr	r2, [pc, #64]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a666:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 800a668:	4b0f      	ldr	r3, [pc, #60]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a670:	4a0d      	ldr	r2, [pc, #52]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a672:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d10c      	bne.n	800a696 <LoraInfo_Init+0x56>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a67c:	4b0b      	ldr	r3, [pc, #44]	; (800a6ac <LoraInfo_Init+0x6c>)
 800a67e:	2200      	movs	r2, #0
 800a680:	2100      	movs	r1, #0
 800a682:	2000      	movs	r0, #0
 800a684:	f012 f91e 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a688:	bf00      	nop
 800a68a:	f012 f909 	bl	801c8a0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b01      	cmp	r3, #1
 800a692:	d1fa      	bne.n	800a68a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a694:	e7fe      	b.n	800a694 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a696:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a698:	2200      	movs	r2, #0
 800a69a:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <LoraInfo_Init+0x68>)
 800a69e:	2203      	movs	r2, #3
 800a6a0:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a6a2:	bf00      	nop
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	200004a8 	.word	0x200004a8
 800a6ac:	0801d384 	.word	0x0801d384

0800a6b0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a6b4:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <LoraInfo_GetPtr+0x10>)
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bc80      	pop	{r7}
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	200004a8 	.word	0x200004a8

0800a6c4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a6c8:	f7f8 f8e3 	bl	8002892 <BSP_RADIO_Init>
 800a6cc:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	4603      	mov	r3, r0
 800a6da:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7f8 f908 	bl	80028f4 <BSP_RADIO_ConfigRFSwitch>
 800a6e4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a6f2:	f7f8 f94d 	bl	8002990 <BSP_RADIO_GetTxConfig>
 800a6f6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a700:	f7f8 f94d 	bl	800299e <BSP_RADIO_IsTCXO>
 800a704:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a706:	4618      	mov	r0, r3
 800a708:	bd80      	pop	{r7, pc}

0800a70a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a70e:	f7f8 f94d 	bl	80029ac <BSP_RADIO_IsDCDC>
 800a712:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a714:	4618      	mov	r0, r3
 800a716:	bd80      	pop	{r7, pc}

0800a718 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	4603      	mov	r3, r0
 800a720:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a722:	79fb      	ldrb	r3, [r7, #7]
 800a724:	4618      	mov	r0, r3
 800a726:	f7f8 f948 	bl	80029ba <BSP_RADIO_GetRFOMaxPowerConfig>
 800a72a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	33f1      	adds	r3, #241	; 0xf1
 800a740:	2210      	movs	r2, #16
 800a742:	2100      	movs	r1, #0
 800a744:	4618      	mov	r0, r3
 800a746:	f00d fda3 	bl	8018290 <memset1>
    ctx->M_n = 0;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	22f0      	movs	r2, #240	; 0xf0
 800a756:	2100      	movs	r1, #0
 800a758:	4618      	mov	r0, r3
 800a75a:	f00d fd99 	bl	8018290 <memset1>
}
 800a75e:	bf00      	nop
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b082      	sub	sp, #8
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	461a      	mov	r2, r3
 800a774:	2110      	movs	r1, #16
 800a776:	6838      	ldr	r0, [r7, #0]
 800a778:	f000 fe5c 	bl	800b434 <lorawan_aes_set_key>
}
 800a77c:	bf00      	nop
 800a77e:	3708      	adds	r7, #8
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b08c      	sub	sp, #48	; 0x30
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a796:	2b00      	cmp	r3, #0
 800a798:	f000 80a1 	beq.w	800a8de <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a7a2:	f1c3 0310 	rsb	r3, r3, #16
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	bf28      	it	cs
 800a7ac:	4613      	movcs	r3, r2
 800a7ae:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a7bc:	4413      	add	r3, r2
 800a7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c0:	b292      	uxth	r2, r2
 800a7c2:	68b9      	ldr	r1, [r7, #8]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f00d fd28 	bl	801821a <memcpy1>
        ctx->M_n += mlen;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d2:	441a      	add	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a7e0:	2b0f      	cmp	r3, #15
 800a7e2:	f240 808d 	bls.w	800a900 <AES_CMAC_Update+0x17c>
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	f000 8088 	beq.w	800a900 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7f4:	e015      	b.n	800a822 <AES_CMAC_Update+0x9e>
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	4413      	add	r3, r2
 800a7fc:	33f1      	adds	r3, #241	; 0xf1
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	68f9      	ldr	r1, [r7, #12]
 800a802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a804:	440b      	add	r3, r1
 800a806:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	4053      	eors	r3, r2
 800a80e:	b2d9      	uxtb	r1, r3
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	4413      	add	r3, r2
 800a816:	33f1      	adds	r3, #241	; 0xf1
 800a818:	460a      	mov	r2, r1
 800a81a:	701a      	strb	r2, [r3, #0]
 800a81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a81e:	3301      	adds	r3, #1
 800a820:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a824:	2b0f      	cmp	r3, #15
 800a826:	dde6      	ble.n	800a7f6 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a82e:	f107 0314 	add.w	r3, r7, #20
 800a832:	2210      	movs	r2, #16
 800a834:	4618      	mov	r0, r3
 800a836:	f00d fcf0 	bl	801821a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	f107 0114 	add.w	r1, r7, #20
 800a840:	f107 0314 	add.w	r3, r7, #20
 800a844:	4618      	mov	r0, r3
 800a846:	f000 fed3 	bl	800b5f0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	33f1      	adds	r3, #241	; 0xf1
 800a84e:	f107 0114 	add.w	r1, r7, #20
 800a852:	2210      	movs	r2, #16
 800a854:	4618      	mov	r0, r3
 800a856:	f00d fce0 	bl	801821a <memcpy1>

        data += mlen;
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85e:	4413      	add	r3, r2
 800a860:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a86a:	e038      	b.n	800a8de <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a86c:	2300      	movs	r3, #0
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a870:	e013      	b.n	800a89a <AES_CMAC_Update+0x116>
 800a872:	68fa      	ldr	r2, [r7, #12]
 800a874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a876:	4413      	add	r3, r2
 800a878:	33f1      	adds	r3, #241	; 0xf1
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	440b      	add	r3, r1
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	4053      	eors	r3, r2
 800a886:	b2d9      	uxtb	r1, r3
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88c:	4413      	add	r3, r2
 800a88e:	33f1      	adds	r3, #241	; 0xf1
 800a890:	460a      	mov	r2, r1
 800a892:	701a      	strb	r2, [r3, #0]
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	3301      	adds	r3, #1
 800a898:	62bb      	str	r3, [r7, #40]	; 0x28
 800a89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89c:	2b0f      	cmp	r3, #15
 800a89e:	dde8      	ble.n	800a872 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800a8a6:	f107 0314 	add.w	r3, r7, #20
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f00d fcb4 	bl	801821a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	f107 0114 	add.w	r1, r7, #20
 800a8b8:	f107 0314 	add.w	r3, r7, #20
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fe97 	bl	800b5f0 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	33f1      	adds	r3, #241	; 0xf1
 800a8c6:	f107 0114 	add.w	r1, r7, #20
 800a8ca:	2210      	movs	r2, #16
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f00d fca4 	bl	801821a <memcpy1>

        data += 16;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	3310      	adds	r3, #16
 800a8d6:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3b10      	subs	r3, #16
 800a8dc:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b10      	cmp	r3, #16
 800a8e2:	d8c3      	bhi.n	800a86c <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	b292      	uxth	r2, r2
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f00d fc92 	bl	801821a <memcpy1>
    ctx->M_n = len;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800a8fe:	e000      	b.n	800a902 <AES_CMAC_Update+0x17e>
            return;
 800a900:	bf00      	nop
}
 800a902:	3730      	adds	r7, #48	; 0x30
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b092      	sub	sp, #72	; 0x48
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a912:	f107 031c 	add.w	r3, r7, #28
 800a916:	2210      	movs	r2, #16
 800a918:	2100      	movs	r1, #0
 800a91a:	4618      	mov	r0, r3
 800a91c:	f00d fcb8 	bl	8018290 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	f107 011c 	add.w	r1, r7, #28
 800a926:	f107 031c 	add.w	r3, r7, #28
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 fe60 	bl	800b5f0 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a930:	7f3b      	ldrb	r3, [r7, #28]
 800a932:	b25b      	sxtb	r3, r3
 800a934:	2b00      	cmp	r3, #0
 800a936:	da30      	bge.n	800a99a <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a938:	2300      	movs	r3, #0
 800a93a:	647b      	str	r3, [r7, #68]	; 0x44
 800a93c:	e01b      	b.n	800a976 <AES_CMAC_Final+0x6e>
 800a93e:	f107 021c 	add.w	r2, r7, #28
 800a942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a944:	4413      	add	r3, r2
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	b25a      	sxtb	r2, r3
 800a94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94e:	3301      	adds	r3, #1
 800a950:	3348      	adds	r3, #72	; 0x48
 800a952:	443b      	add	r3, r7
 800a954:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a958:	09db      	lsrs	r3, r3, #7
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	b25b      	sxtb	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b25b      	sxtb	r3, r3
 800a962:	b2d9      	uxtb	r1, r3
 800a964:	f107 021c 	add.w	r2, r7, #28
 800a968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a96a:	4413      	add	r3, r2
 800a96c:	460a      	mov	r2, r1
 800a96e:	701a      	strb	r2, [r3, #0]
 800a970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a972:	3301      	adds	r3, #1
 800a974:	647b      	str	r3, [r7, #68]	; 0x44
 800a976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a978:	2b0e      	cmp	r3, #14
 800a97a:	dde0      	ble.n	800a93e <AES_CMAC_Final+0x36>
 800a97c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800a988:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a98c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800a990:	43db      	mvns	r3, r3
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a998:	e027      	b.n	800a9ea <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a99a:	2300      	movs	r3, #0
 800a99c:	643b      	str	r3, [r7, #64]	; 0x40
 800a99e:	e01b      	b.n	800a9d8 <AES_CMAC_Final+0xd0>
 800a9a0:	f107 021c 	add.w	r2, r7, #28
 800a9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9a6:	4413      	add	r3, r2
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	b25a      	sxtb	r2, r3
 800a9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	3348      	adds	r3, #72	; 0x48
 800a9b4:	443b      	add	r3, r7
 800a9b6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a9ba:	09db      	lsrs	r3, r3, #7
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	b25b      	sxtb	r3, r3
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	b25b      	sxtb	r3, r3
 800a9c4:	b2d9      	uxtb	r1, r3
 800a9c6:	f107 021c 	add.w	r2, r7, #28
 800a9ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9cc:	4413      	add	r3, r2
 800a9ce:	460a      	mov	r2, r1
 800a9d0:	701a      	strb	r2, [r3, #0]
 800a9d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a9d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9da:	2b0e      	cmp	r3, #14
 800a9dc:	dde0      	ble.n	800a9a0 <AES_CMAC_Final+0x98>
 800a9de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d11d      	bne.n	800aa30 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9f8:	e016      	b.n	800aa28 <AES_CMAC_Final+0x120>
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9fe:	4413      	add	r3, r2
 800aa00:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa04:	781a      	ldrb	r2, [r3, #0]
 800aa06:	f107 011c 	add.w	r1, r7, #28
 800aa0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa0c:	440b      	add	r3, r1
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	4053      	eors	r3, r2
 800aa12:	b2d9      	uxtb	r1, r3
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa18:	4413      	add	r3, r2
 800aa1a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800aa1e:	460a      	mov	r2, r1
 800aa20:	701a      	strb	r2, [r3, #0]
 800aa22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa24:	3301      	adds	r3, #1
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	dde5      	ble.n	800a9fa <AES_CMAC_Final+0xf2>
 800aa2e:	e096      	b.n	800ab5e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800aa30:	7f3b      	ldrb	r3, [r7, #28]
 800aa32:	b25b      	sxtb	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	da30      	bge.n	800aa9a <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa3c:	e01b      	b.n	800aa76 <AES_CMAC_Final+0x16e>
 800aa3e:	f107 021c 	add.w	r2, r7, #28
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	4413      	add	r3, r2
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	b25a      	sxtb	r2, r3
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	3301      	adds	r3, #1
 800aa50:	3348      	adds	r3, #72	; 0x48
 800aa52:	443b      	add	r3, r7
 800aa54:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aa58:	09db      	lsrs	r3, r3, #7
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	b25b      	sxtb	r3, r3
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	b25b      	sxtb	r3, r3
 800aa62:	b2d9      	uxtb	r1, r3
 800aa64:	f107 021c 	add.w	r2, r7, #28
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	4413      	add	r3, r2
 800aa6c:	460a      	mov	r2, r1
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	3301      	adds	r3, #1
 800aa74:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa78:	2b0e      	cmp	r3, #14
 800aa7a:	dde0      	ble.n	800aa3e <AES_CMAC_Final+0x136>
 800aa7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa80:	005b      	lsls	r3, r3, #1
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800aa88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa8c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800aa90:	43db      	mvns	r3, r3
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa98:	e027      	b.n	800aaea <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa9e:	e01b      	b.n	800aad8 <AES_CMAC_Final+0x1d0>
 800aaa0:	f107 021c 	add.w	r2, r7, #28
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa6:	4413      	add	r3, r2
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	b25a      	sxtb	r2, r3
 800aaae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab0:	3301      	adds	r3, #1
 800aab2:	3348      	adds	r3, #72	; 0x48
 800aab4:	443b      	add	r3, r7
 800aab6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800aaba:	09db      	lsrs	r3, r3, #7
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	b25b      	sxtb	r3, r3
 800aac0:	4313      	orrs	r3, r2
 800aac2:	b25b      	sxtb	r3, r3
 800aac4:	b2d9      	uxtb	r1, r3
 800aac6:	f107 021c 	add.w	r2, r7, #28
 800aaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aacc:	4413      	add	r3, r2
 800aace:	460a      	mov	r2, r1
 800aad0:	701a      	strb	r2, [r3, #0]
 800aad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aad4:	3301      	adds	r3, #1
 800aad6:	637b      	str	r3, [r7, #52]	; 0x34
 800aad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aada:	2b0e      	cmp	r3, #14
 800aadc:	dde0      	ble.n	800aaa0 <AES_CMAC_Final+0x198>
 800aade:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	2280      	movs	r2, #128	; 0x80
 800aaf6:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800aafa:	e007      	b.n	800ab0c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	4413      	add	r3, r2
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ab20:	2b0f      	cmp	r3, #15
 800ab22:	d9eb      	bls.n	800aafc <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800ab24:	2300      	movs	r3, #0
 800ab26:	633b      	str	r3, [r7, #48]	; 0x30
 800ab28:	e016      	b.n	800ab58 <AES_CMAC_Final+0x250>
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2e:	4413      	add	r3, r2
 800ab30:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab34:	781a      	ldrb	r2, [r3, #0]
 800ab36:	f107 011c 	add.w	r1, r7, #28
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	440b      	add	r3, r1
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	4053      	eors	r3, r2
 800ab42:	b2d9      	uxtb	r1, r3
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	4413      	add	r3, r2
 800ab4a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab4e:	460a      	mov	r2, r1
 800ab50:	701a      	strb	r2, [r3, #0]
 800ab52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab54:	3301      	adds	r3, #1
 800ab56:	633b      	str	r3, [r7, #48]	; 0x30
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	2b0f      	cmp	r3, #15
 800ab5c:	dde5      	ble.n	800ab2a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800ab5e:	2300      	movs	r3, #0
 800ab60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab62:	e015      	b.n	800ab90 <AES_CMAC_Final+0x288>
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab68:	4413      	add	r3, r2
 800ab6a:	33f1      	adds	r3, #241	; 0xf1
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	440b      	add	r3, r1
 800ab74:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	4053      	eors	r3, r2
 800ab7c:	b2d9      	uxtb	r1, r3
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	4413      	add	r3, r2
 800ab84:	33f1      	adds	r3, #241	; 0xf1
 800ab86:	460a      	mov	r2, r1
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab92:	2b0f      	cmp	r3, #15
 800ab94:	dde6      	ble.n	800ab64 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800ab9c:	f107 030c 	add.w	r3, r7, #12
 800aba0:	2210      	movs	r2, #16
 800aba2:	4618      	mov	r0, r3
 800aba4:	f00d fb39 	bl	801821a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800aba8:	683a      	ldr	r2, [r7, #0]
 800abaa:	f107 030c 	add.w	r3, r7, #12
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fd1d 	bl	800b5f0 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800abb6:	f107 031c 	add.w	r3, r7, #28
 800abba:	2210      	movs	r2, #16
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f00d fb66 	bl	8018290 <memset1>
}
 800abc4:	bf00      	nop
 800abc6:	3748      	adds	r7, #72	; 0x48
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	781a      	ldrb	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3301      	adds	r3, #1
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	7852      	ldrb	r2, [r2, #1]
 800abe6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3302      	adds	r3, #2
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	7892      	ldrb	r2, [r2, #2]
 800abf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	3303      	adds	r3, #3
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	78d2      	ldrb	r2, [r2, #3]
 800abfa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	3304      	adds	r3, #4
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	7912      	ldrb	r2, [r2, #4]
 800ac04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	3305      	adds	r3, #5
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	7952      	ldrb	r2, [r2, #5]
 800ac0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	3306      	adds	r3, #6
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	7992      	ldrb	r2, [r2, #6]
 800ac18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	3307      	adds	r3, #7
 800ac1e:	683a      	ldr	r2, [r7, #0]
 800ac20:	79d2      	ldrb	r2, [r2, #7]
 800ac22:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	3308      	adds	r3, #8
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	7a12      	ldrb	r2, [r2, #8]
 800ac2c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3309      	adds	r3, #9
 800ac32:	683a      	ldr	r2, [r7, #0]
 800ac34:	7a52      	ldrb	r2, [r2, #9]
 800ac36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	330a      	adds	r3, #10
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	7a92      	ldrb	r2, [r2, #10]
 800ac40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	330b      	adds	r3, #11
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	7ad2      	ldrb	r2, [r2, #11]
 800ac4a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	330c      	adds	r3, #12
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	7b12      	ldrb	r2, [r2, #12]
 800ac54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	330d      	adds	r3, #13
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	7b52      	ldrb	r2, [r2, #13]
 800ac5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	330e      	adds	r3, #14
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	7b92      	ldrb	r2, [r2, #14]
 800ac68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	330f      	adds	r3, #15
 800ac6e:	683a      	ldr	r2, [r7, #0]
 800ac70:	7bd2      	ldrb	r2, [r2, #15]
 800ac72:	701a      	strb	r2, [r3, #0]
#endif
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bc80      	pop	{r7}
 800ac7c:	4770      	bx	lr

0800ac7e <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b085      	sub	sp, #20
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ac8c:	e007      	b.n	800ac9e <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	1c53      	adds	r3, r2, #1
 800ac92:	60bb      	str	r3, [r7, #8]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	1c59      	adds	r1, r3, #1
 800ac98:	60f9      	str	r1, [r7, #12]
 800ac9a:	7812      	ldrb	r2, [r2, #0]
 800ac9c:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800ac9e:	79fb      	ldrb	r3, [r7, #7]
 800aca0:	1e5a      	subs	r2, r3, #1
 800aca2:	71fa      	strb	r2, [r7, #7]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1f2      	bne.n	800ac8e <copy_block_nn+0x10>
}
 800aca8:	bf00      	nop
 800acaa:	bf00      	nop
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	bc80      	pop	{r7}
 800acb2:	4770      	bx	lr

0800acb4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	781a      	ldrb	r2, [r3, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	4053      	eors	r3, r2
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	3301      	adds	r3, #1
 800acd2:	7819      	ldrb	r1, [r3, #0]
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	3301      	adds	r3, #1
 800acd8:	781a      	ldrb	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	3301      	adds	r3, #1
 800acde:	404a      	eors	r2, r1
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3302      	adds	r3, #2
 800ace8:	7819      	ldrb	r1, [r3, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	3302      	adds	r3, #2
 800acee:	781a      	ldrb	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	3302      	adds	r3, #2
 800acf4:	404a      	eors	r2, r1
 800acf6:	b2d2      	uxtb	r2, r2
 800acf8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3303      	adds	r3, #3
 800acfe:	7819      	ldrb	r1, [r3, #0]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	3303      	adds	r3, #3
 800ad04:	781a      	ldrb	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	3303      	adds	r3, #3
 800ad0a:	404a      	eors	r2, r1
 800ad0c:	b2d2      	uxtb	r2, r2
 800ad0e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	3304      	adds	r3, #4
 800ad14:	7819      	ldrb	r1, [r3, #0]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	3304      	adds	r3, #4
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	3304      	adds	r3, #4
 800ad20:	404a      	eors	r2, r1
 800ad22:	b2d2      	uxtb	r2, r2
 800ad24:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	3305      	adds	r3, #5
 800ad2a:	7819      	ldrb	r1, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	3305      	adds	r3, #5
 800ad30:	781a      	ldrb	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	3305      	adds	r3, #5
 800ad36:	404a      	eors	r2, r1
 800ad38:	b2d2      	uxtb	r2, r2
 800ad3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3306      	adds	r3, #6
 800ad40:	7819      	ldrb	r1, [r3, #0]
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	3306      	adds	r3, #6
 800ad46:	781a      	ldrb	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3306      	adds	r3, #6
 800ad4c:	404a      	eors	r2, r1
 800ad4e:	b2d2      	uxtb	r2, r2
 800ad50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	3307      	adds	r3, #7
 800ad56:	7819      	ldrb	r1, [r3, #0]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	3307      	adds	r3, #7
 800ad5c:	781a      	ldrb	r2, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3307      	adds	r3, #7
 800ad62:	404a      	eors	r2, r1
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	7819      	ldrb	r1, [r3, #0]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	3308      	adds	r3, #8
 800ad72:	781a      	ldrb	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3308      	adds	r3, #8
 800ad78:	404a      	eors	r2, r1
 800ad7a:	b2d2      	uxtb	r2, r2
 800ad7c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3309      	adds	r3, #9
 800ad82:	7819      	ldrb	r1, [r3, #0]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	3309      	adds	r3, #9
 800ad88:	781a      	ldrb	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3309      	adds	r3, #9
 800ad8e:	404a      	eors	r2, r1
 800ad90:	b2d2      	uxtb	r2, r2
 800ad92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	330a      	adds	r3, #10
 800ad98:	7819      	ldrb	r1, [r3, #0]
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	330a      	adds	r3, #10
 800ad9e:	781a      	ldrb	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	330a      	adds	r3, #10
 800ada4:	404a      	eors	r2, r1
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	330b      	adds	r3, #11
 800adae:	7819      	ldrb	r1, [r3, #0]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	330b      	adds	r3, #11
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	330b      	adds	r3, #11
 800adba:	404a      	eors	r2, r1
 800adbc:	b2d2      	uxtb	r2, r2
 800adbe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	330c      	adds	r3, #12
 800adc4:	7819      	ldrb	r1, [r3, #0]
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	330c      	adds	r3, #12
 800adca:	781a      	ldrb	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	330c      	adds	r3, #12
 800add0:	404a      	eors	r2, r1
 800add2:	b2d2      	uxtb	r2, r2
 800add4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	330d      	adds	r3, #13
 800adda:	7819      	ldrb	r1, [r3, #0]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	330d      	adds	r3, #13
 800ade0:	781a      	ldrb	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	330d      	adds	r3, #13
 800ade6:	404a      	eors	r2, r1
 800ade8:	b2d2      	uxtb	r2, r2
 800adea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	330e      	adds	r3, #14
 800adf0:	7819      	ldrb	r1, [r3, #0]
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	330e      	adds	r3, #14
 800adf6:	781a      	ldrb	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	330e      	adds	r3, #14
 800adfc:	404a      	eors	r2, r1
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	330f      	adds	r3, #15
 800ae06:	7819      	ldrb	r1, [r3, #0]
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	330f      	adds	r3, #15
 800ae0c:	781a      	ldrb	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	330f      	adds	r3, #15
 800ae12:	404a      	eors	r2, r1
 800ae14:	b2d2      	uxtb	r2, r2
 800ae16:	701a      	strb	r2, [r3, #0]
#endif
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bc80      	pop	{r7}
 800ae20:	4770      	bx	lr

0800ae22 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	60f8      	str	r0, [r7, #12]
 800ae2a:	60b9      	str	r1, [r7, #8]
 800ae2c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	781a      	ldrb	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	781b      	ldrb	r3, [r3, #0]
 800ae36:	4053      	eors	r3, r2
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	3301      	adds	r3, #1
 800ae42:	7819      	ldrb	r1, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3301      	adds	r3, #1
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	404a      	eors	r2, r1
 800ae50:	b2d2      	uxtb	r2, r2
 800ae52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	3302      	adds	r3, #2
 800ae58:	7819      	ldrb	r1, [r3, #0]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3302      	adds	r3, #2
 800ae5e:	781a      	ldrb	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	3302      	adds	r3, #2
 800ae64:	404a      	eors	r2, r1
 800ae66:	b2d2      	uxtb	r2, r2
 800ae68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	3303      	adds	r3, #3
 800ae6e:	7819      	ldrb	r1, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3303      	adds	r3, #3
 800ae74:	781a      	ldrb	r2, [r3, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	3303      	adds	r3, #3
 800ae7a:	404a      	eors	r2, r1
 800ae7c:	b2d2      	uxtb	r2, r2
 800ae7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	3304      	adds	r3, #4
 800ae84:	7819      	ldrb	r1, [r3, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	3304      	adds	r3, #4
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3304      	adds	r3, #4
 800ae90:	404a      	eors	r2, r1
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	3305      	adds	r3, #5
 800ae9a:	7819      	ldrb	r1, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3305      	adds	r3, #5
 800aea0:	781a      	ldrb	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3305      	adds	r3, #5
 800aea6:	404a      	eors	r2, r1
 800aea8:	b2d2      	uxtb	r2, r2
 800aeaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	3306      	adds	r3, #6
 800aeb0:	7819      	ldrb	r1, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	3306      	adds	r3, #6
 800aeb6:	781a      	ldrb	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3306      	adds	r3, #6
 800aebc:	404a      	eors	r2, r1
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	3307      	adds	r3, #7
 800aec6:	7819      	ldrb	r1, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	3307      	adds	r3, #7
 800aecc:	781a      	ldrb	r2, [r3, #0]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3307      	adds	r3, #7
 800aed2:	404a      	eors	r2, r1
 800aed4:	b2d2      	uxtb	r2, r2
 800aed6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	3308      	adds	r3, #8
 800aedc:	7819      	ldrb	r1, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3308      	adds	r3, #8
 800aee2:	781a      	ldrb	r2, [r3, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3308      	adds	r3, #8
 800aee8:	404a      	eors	r2, r1
 800aeea:	b2d2      	uxtb	r2, r2
 800aeec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	3309      	adds	r3, #9
 800aef2:	7819      	ldrb	r1, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	3309      	adds	r3, #9
 800aef8:	781a      	ldrb	r2, [r3, #0]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3309      	adds	r3, #9
 800aefe:	404a      	eors	r2, r1
 800af00:	b2d2      	uxtb	r2, r2
 800af02:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	330a      	adds	r3, #10
 800af08:	7819      	ldrb	r1, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	330a      	adds	r3, #10
 800af0e:	781a      	ldrb	r2, [r3, #0]
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	330a      	adds	r3, #10
 800af14:	404a      	eors	r2, r1
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	330b      	adds	r3, #11
 800af1e:	7819      	ldrb	r1, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	330b      	adds	r3, #11
 800af24:	781a      	ldrb	r2, [r3, #0]
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	330b      	adds	r3, #11
 800af2a:	404a      	eors	r2, r1
 800af2c:	b2d2      	uxtb	r2, r2
 800af2e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	330c      	adds	r3, #12
 800af34:	7819      	ldrb	r1, [r3, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	330c      	adds	r3, #12
 800af3a:	781a      	ldrb	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	330c      	adds	r3, #12
 800af40:	404a      	eors	r2, r1
 800af42:	b2d2      	uxtb	r2, r2
 800af44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	330d      	adds	r3, #13
 800af4a:	7819      	ldrb	r1, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	330d      	adds	r3, #13
 800af50:	781a      	ldrb	r2, [r3, #0]
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	330d      	adds	r3, #13
 800af56:	404a      	eors	r2, r1
 800af58:	b2d2      	uxtb	r2, r2
 800af5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	330e      	adds	r3, #14
 800af60:	7819      	ldrb	r1, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	330e      	adds	r3, #14
 800af66:	781a      	ldrb	r2, [r3, #0]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	330e      	adds	r3, #14
 800af6c:	404a      	eors	r2, r1
 800af6e:	b2d2      	uxtb	r2, r2
 800af70:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	330f      	adds	r3, #15
 800af76:	7819      	ldrb	r1, [r3, #0]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	330f      	adds	r3, #15
 800af7c:	781a      	ldrb	r2, [r3, #0]
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	330f      	adds	r3, #15
 800af82:	404a      	eors	r2, r1
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800af88:	bf00      	nop
 800af8a:	3714      	adds	r7, #20
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc80      	pop	{r7}
 800af90:	4770      	bx	lr

0800af92 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b082      	sub	sp, #8
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff fe88 	bl	800acb4 <xor_block>
}
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	461a      	mov	r2, r3
 800afba:	4b48      	ldr	r3, [pc, #288]	; (800b0dc <shift_sub_rows+0x130>)
 800afbc:	5c9a      	ldrb	r2, [r3, r2]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	3304      	adds	r3, #4
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	4619      	mov	r1, r3
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3304      	adds	r3, #4
 800afce:	4a43      	ldr	r2, [pc, #268]	; (800b0dc <shift_sub_rows+0x130>)
 800afd0:	5c52      	ldrb	r2, [r2, r1]
 800afd2:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3308      	adds	r3, #8
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	4619      	mov	r1, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3308      	adds	r3, #8
 800afe0:	4a3e      	ldr	r2, [pc, #248]	; (800b0dc <shift_sub_rows+0x130>)
 800afe2:	5c52      	ldrb	r2, [r2, r1]
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	330c      	adds	r3, #12
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	4619      	mov	r1, r3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	330c      	adds	r3, #12
 800aff2:	4a3a      	ldr	r2, [pc, #232]	; (800b0dc <shift_sub_rows+0x130>)
 800aff4:	5c52      	ldrb	r2, [r2, r1]
 800aff6:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	73fb      	strb	r3, [r7, #15]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3305      	adds	r3, #5
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	4619      	mov	r1, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3301      	adds	r3, #1
 800b00a:	4a34      	ldr	r2, [pc, #208]	; (800b0dc <shift_sub_rows+0x130>)
 800b00c:	5c52      	ldrb	r2, [r2, r1]
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3309      	adds	r3, #9
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	4619      	mov	r1, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3305      	adds	r3, #5
 800b01c:	4a2f      	ldr	r2, [pc, #188]	; (800b0dc <shift_sub_rows+0x130>)
 800b01e:	5c52      	ldrb	r2, [r2, r1]
 800b020:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	330d      	adds	r3, #13
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	4619      	mov	r1, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	3309      	adds	r3, #9
 800b02e:	4a2b      	ldr	r2, [pc, #172]	; (800b0dc <shift_sub_rows+0x130>)
 800b030:	5c52      	ldrb	r2, [r2, r1]
 800b032:	701a      	strb	r2, [r3, #0]
 800b034:	7bfa      	ldrb	r2, [r7, #15]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	330d      	adds	r3, #13
 800b03a:	4928      	ldr	r1, [pc, #160]	; (800b0dc <shift_sub_rows+0x130>)
 800b03c:	5c8a      	ldrb	r2, [r1, r2]
 800b03e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	789b      	ldrb	r3, [r3, #2]
 800b044:	73fb      	strb	r3, [r7, #15]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	330a      	adds	r3, #10
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	4619      	mov	r1, r3
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3302      	adds	r3, #2
 800b052:	4a22      	ldr	r2, [pc, #136]	; (800b0dc <shift_sub_rows+0x130>)
 800b054:	5c52      	ldrb	r2, [r2, r1]
 800b056:	701a      	strb	r2, [r3, #0]
 800b058:	7bfa      	ldrb	r2, [r7, #15]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	330a      	adds	r3, #10
 800b05e:	491f      	ldr	r1, [pc, #124]	; (800b0dc <shift_sub_rows+0x130>)
 800b060:	5c8a      	ldrb	r2, [r1, r2]
 800b062:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	799b      	ldrb	r3, [r3, #6]
 800b068:	73fb      	strb	r3, [r7, #15]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	330e      	adds	r3, #14
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	4619      	mov	r1, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	3306      	adds	r3, #6
 800b076:	4a19      	ldr	r2, [pc, #100]	; (800b0dc <shift_sub_rows+0x130>)
 800b078:	5c52      	ldrb	r2, [r2, r1]
 800b07a:	701a      	strb	r2, [r3, #0]
 800b07c:	7bfa      	ldrb	r2, [r7, #15]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	330e      	adds	r3, #14
 800b082:	4916      	ldr	r1, [pc, #88]	; (800b0dc <shift_sub_rows+0x130>)
 800b084:	5c8a      	ldrb	r2, [r1, r2]
 800b086:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	7bdb      	ldrb	r3, [r3, #15]
 800b08c:	73fb      	strb	r3, [r7, #15]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	330b      	adds	r3, #11
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	4619      	mov	r1, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	330f      	adds	r3, #15
 800b09a:	4a10      	ldr	r2, [pc, #64]	; (800b0dc <shift_sub_rows+0x130>)
 800b09c:	5c52      	ldrb	r2, [r2, r1]
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	3307      	adds	r3, #7
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	330b      	adds	r3, #11
 800b0ac:	4a0b      	ldr	r2, [pc, #44]	; (800b0dc <shift_sub_rows+0x130>)
 800b0ae:	5c52      	ldrb	r2, [r2, r1]
 800b0b0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	3303      	adds	r3, #3
 800b0b6:	781b      	ldrb	r3, [r3, #0]
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	3307      	adds	r3, #7
 800b0be:	4a07      	ldr	r2, [pc, #28]	; (800b0dc <shift_sub_rows+0x130>)
 800b0c0:	5c52      	ldrb	r2, [r2, r1]
 800b0c2:	701a      	strb	r2, [r3, #0]
 800b0c4:	7bfa      	ldrb	r2, [r7, #15]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3303      	adds	r3, #3
 800b0ca:	4904      	ldr	r1, [pc, #16]	; (800b0dc <shift_sub_rows+0x130>)
 800b0cc:	5c8a      	ldrb	r2, [r1, r2]
 800b0ce:	701a      	strb	r2, [r3, #0]
}
 800b0d0:	bf00      	nop
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bc80      	pop	{r7}
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	0801d980 	.word	0x0801d980

0800b0e0 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b086      	sub	sp, #24
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800b0e8:	f107 0308 	add.w	r3, r7, #8
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7ff fd6c 	bl	800abcc <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800b0f4:	7a3b      	ldrb	r3, [r7, #8]
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	4b9a      	ldr	r3, [pc, #616]	; (800b364 <mix_sub_columns+0x284>)
 800b0fa:	5c9a      	ldrb	r2, [r3, r2]
 800b0fc:	7b7b      	ldrb	r3, [r7, #13]
 800b0fe:	4619      	mov	r1, r3
 800b100:	4b99      	ldr	r3, [pc, #612]	; (800b368 <mix_sub_columns+0x288>)
 800b102:	5c5b      	ldrb	r3, [r3, r1]
 800b104:	4053      	eors	r3, r2
 800b106:	b2da      	uxtb	r2, r3
 800b108:	7cbb      	ldrb	r3, [r7, #18]
 800b10a:	4619      	mov	r1, r3
 800b10c:	4b97      	ldr	r3, [pc, #604]	; (800b36c <mix_sub_columns+0x28c>)
 800b10e:	5c5b      	ldrb	r3, [r3, r1]
 800b110:	4053      	eors	r3, r2
 800b112:	b2da      	uxtb	r2, r3
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	4619      	mov	r1, r3
 800b118:	4b94      	ldr	r3, [pc, #592]	; (800b36c <mix_sub_columns+0x28c>)
 800b11a:	5c5b      	ldrb	r3, [r3, r1]
 800b11c:	4053      	eors	r3, r2
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b124:	7a3b      	ldrb	r3, [r7, #8]
 800b126:	461a      	mov	r2, r3
 800b128:	4b90      	ldr	r3, [pc, #576]	; (800b36c <mix_sub_columns+0x28c>)
 800b12a:	5c9a      	ldrb	r2, [r3, r2]
 800b12c:	7b7b      	ldrb	r3, [r7, #13]
 800b12e:	4619      	mov	r1, r3
 800b130:	4b8c      	ldr	r3, [pc, #560]	; (800b364 <mix_sub_columns+0x284>)
 800b132:	5c5b      	ldrb	r3, [r3, r1]
 800b134:	4053      	eors	r3, r2
 800b136:	b2da      	uxtb	r2, r3
 800b138:	7cbb      	ldrb	r3, [r7, #18]
 800b13a:	4619      	mov	r1, r3
 800b13c:	4b8a      	ldr	r3, [pc, #552]	; (800b368 <mix_sub_columns+0x288>)
 800b13e:	5c5b      	ldrb	r3, [r3, r1]
 800b140:	4053      	eors	r3, r2
 800b142:	b2d9      	uxtb	r1, r3
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	461a      	mov	r2, r3
 800b148:	4b88      	ldr	r3, [pc, #544]	; (800b36c <mix_sub_columns+0x28c>)
 800b14a:	5c9a      	ldrb	r2, [r3, r2]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3301      	adds	r3, #1
 800b150:	404a      	eors	r2, r1
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b156:	7a3b      	ldrb	r3, [r7, #8]
 800b158:	461a      	mov	r2, r3
 800b15a:	4b84      	ldr	r3, [pc, #528]	; (800b36c <mix_sub_columns+0x28c>)
 800b15c:	5c9a      	ldrb	r2, [r3, r2]
 800b15e:	7b7b      	ldrb	r3, [r7, #13]
 800b160:	4619      	mov	r1, r3
 800b162:	4b82      	ldr	r3, [pc, #520]	; (800b36c <mix_sub_columns+0x28c>)
 800b164:	5c5b      	ldrb	r3, [r3, r1]
 800b166:	4053      	eors	r3, r2
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	7cbb      	ldrb	r3, [r7, #18]
 800b16c:	4619      	mov	r1, r3
 800b16e:	4b7d      	ldr	r3, [pc, #500]	; (800b364 <mix_sub_columns+0x284>)
 800b170:	5c5b      	ldrb	r3, [r3, r1]
 800b172:	4053      	eors	r3, r2
 800b174:	b2d9      	uxtb	r1, r3
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	461a      	mov	r2, r3
 800b17a:	4b7b      	ldr	r3, [pc, #492]	; (800b368 <mix_sub_columns+0x288>)
 800b17c:	5c9a      	ldrb	r2, [r3, r2]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	3302      	adds	r3, #2
 800b182:	404a      	eors	r2, r1
 800b184:	b2d2      	uxtb	r2, r2
 800b186:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b188:	7a3b      	ldrb	r3, [r7, #8]
 800b18a:	461a      	mov	r2, r3
 800b18c:	4b76      	ldr	r3, [pc, #472]	; (800b368 <mix_sub_columns+0x288>)
 800b18e:	5c9a      	ldrb	r2, [r3, r2]
 800b190:	7b7b      	ldrb	r3, [r7, #13]
 800b192:	4619      	mov	r1, r3
 800b194:	4b75      	ldr	r3, [pc, #468]	; (800b36c <mix_sub_columns+0x28c>)
 800b196:	5c5b      	ldrb	r3, [r3, r1]
 800b198:	4053      	eors	r3, r2
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	7cbb      	ldrb	r3, [r7, #18]
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4b72      	ldr	r3, [pc, #456]	; (800b36c <mix_sub_columns+0x28c>)
 800b1a2:	5c5b      	ldrb	r3, [r3, r1]
 800b1a4:	4053      	eors	r3, r2
 800b1a6:	b2d9      	uxtb	r1, r3
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	4b6d      	ldr	r3, [pc, #436]	; (800b364 <mix_sub_columns+0x284>)
 800b1ae:	5c9a      	ldrb	r2, [r3, r2]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	404a      	eors	r2, r1
 800b1b6:	b2d2      	uxtb	r2, r2
 800b1b8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b1ba:	7b3b      	ldrb	r3, [r7, #12]
 800b1bc:	461a      	mov	r2, r3
 800b1be:	4b69      	ldr	r3, [pc, #420]	; (800b364 <mix_sub_columns+0x284>)
 800b1c0:	5c9a      	ldrb	r2, [r3, r2]
 800b1c2:	7c7b      	ldrb	r3, [r7, #17]
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4b68      	ldr	r3, [pc, #416]	; (800b368 <mix_sub_columns+0x288>)
 800b1c8:	5c5b      	ldrb	r3, [r3, r1]
 800b1ca:	4053      	eors	r3, r2
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	7dbb      	ldrb	r3, [r7, #22]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	4b66      	ldr	r3, [pc, #408]	; (800b36c <mix_sub_columns+0x28c>)
 800b1d4:	5c5b      	ldrb	r3, [r3, r1]
 800b1d6:	4053      	eors	r3, r2
 800b1d8:	b2d9      	uxtb	r1, r3
 800b1da:	7afb      	ldrb	r3, [r7, #11]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4b63      	ldr	r3, [pc, #396]	; (800b36c <mix_sub_columns+0x28c>)
 800b1e0:	5c9a      	ldrb	r2, [r3, r2]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	404a      	eors	r2, r1
 800b1e8:	b2d2      	uxtb	r2, r2
 800b1ea:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b1ec:	7b3b      	ldrb	r3, [r7, #12]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	4b5e      	ldr	r3, [pc, #376]	; (800b36c <mix_sub_columns+0x28c>)
 800b1f2:	5c9a      	ldrb	r2, [r3, r2]
 800b1f4:	7c7b      	ldrb	r3, [r7, #17]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	4b5a      	ldr	r3, [pc, #360]	; (800b364 <mix_sub_columns+0x284>)
 800b1fa:	5c5b      	ldrb	r3, [r3, r1]
 800b1fc:	4053      	eors	r3, r2
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	7dbb      	ldrb	r3, [r7, #22]
 800b202:	4619      	mov	r1, r3
 800b204:	4b58      	ldr	r3, [pc, #352]	; (800b368 <mix_sub_columns+0x288>)
 800b206:	5c5b      	ldrb	r3, [r3, r1]
 800b208:	4053      	eors	r3, r2
 800b20a:	b2d9      	uxtb	r1, r3
 800b20c:	7afb      	ldrb	r3, [r7, #11]
 800b20e:	461a      	mov	r2, r3
 800b210:	4b56      	ldr	r3, [pc, #344]	; (800b36c <mix_sub_columns+0x28c>)
 800b212:	5c9a      	ldrb	r2, [r3, r2]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3305      	adds	r3, #5
 800b218:	404a      	eors	r2, r1
 800b21a:	b2d2      	uxtb	r2, r2
 800b21c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b21e:	7b3b      	ldrb	r3, [r7, #12]
 800b220:	461a      	mov	r2, r3
 800b222:	4b52      	ldr	r3, [pc, #328]	; (800b36c <mix_sub_columns+0x28c>)
 800b224:	5c9a      	ldrb	r2, [r3, r2]
 800b226:	7c7b      	ldrb	r3, [r7, #17]
 800b228:	4619      	mov	r1, r3
 800b22a:	4b50      	ldr	r3, [pc, #320]	; (800b36c <mix_sub_columns+0x28c>)
 800b22c:	5c5b      	ldrb	r3, [r3, r1]
 800b22e:	4053      	eors	r3, r2
 800b230:	b2da      	uxtb	r2, r3
 800b232:	7dbb      	ldrb	r3, [r7, #22]
 800b234:	4619      	mov	r1, r3
 800b236:	4b4b      	ldr	r3, [pc, #300]	; (800b364 <mix_sub_columns+0x284>)
 800b238:	5c5b      	ldrb	r3, [r3, r1]
 800b23a:	4053      	eors	r3, r2
 800b23c:	b2d9      	uxtb	r1, r3
 800b23e:	7afb      	ldrb	r3, [r7, #11]
 800b240:	461a      	mov	r2, r3
 800b242:	4b49      	ldr	r3, [pc, #292]	; (800b368 <mix_sub_columns+0x288>)
 800b244:	5c9a      	ldrb	r2, [r3, r2]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3306      	adds	r3, #6
 800b24a:	404a      	eors	r2, r1
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b250:	7b3b      	ldrb	r3, [r7, #12]
 800b252:	461a      	mov	r2, r3
 800b254:	4b44      	ldr	r3, [pc, #272]	; (800b368 <mix_sub_columns+0x288>)
 800b256:	5c9a      	ldrb	r2, [r3, r2]
 800b258:	7c7b      	ldrb	r3, [r7, #17]
 800b25a:	4619      	mov	r1, r3
 800b25c:	4b43      	ldr	r3, [pc, #268]	; (800b36c <mix_sub_columns+0x28c>)
 800b25e:	5c5b      	ldrb	r3, [r3, r1]
 800b260:	4053      	eors	r3, r2
 800b262:	b2da      	uxtb	r2, r3
 800b264:	7dbb      	ldrb	r3, [r7, #22]
 800b266:	4619      	mov	r1, r3
 800b268:	4b40      	ldr	r3, [pc, #256]	; (800b36c <mix_sub_columns+0x28c>)
 800b26a:	5c5b      	ldrb	r3, [r3, r1]
 800b26c:	4053      	eors	r3, r2
 800b26e:	b2d9      	uxtb	r1, r3
 800b270:	7afb      	ldrb	r3, [r7, #11]
 800b272:	461a      	mov	r2, r3
 800b274:	4b3b      	ldr	r3, [pc, #236]	; (800b364 <mix_sub_columns+0x284>)
 800b276:	5c9a      	ldrb	r2, [r3, r2]
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	3307      	adds	r3, #7
 800b27c:	404a      	eors	r2, r1
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b282:	7c3b      	ldrb	r3, [r7, #16]
 800b284:	461a      	mov	r2, r3
 800b286:	4b37      	ldr	r3, [pc, #220]	; (800b364 <mix_sub_columns+0x284>)
 800b288:	5c9a      	ldrb	r2, [r3, r2]
 800b28a:	7d7b      	ldrb	r3, [r7, #21]
 800b28c:	4619      	mov	r1, r3
 800b28e:	4b36      	ldr	r3, [pc, #216]	; (800b368 <mix_sub_columns+0x288>)
 800b290:	5c5b      	ldrb	r3, [r3, r1]
 800b292:	4053      	eors	r3, r2
 800b294:	b2da      	uxtb	r2, r3
 800b296:	7abb      	ldrb	r3, [r7, #10]
 800b298:	4619      	mov	r1, r3
 800b29a:	4b34      	ldr	r3, [pc, #208]	; (800b36c <mix_sub_columns+0x28c>)
 800b29c:	5c5b      	ldrb	r3, [r3, r1]
 800b29e:	4053      	eors	r3, r2
 800b2a0:	b2d9      	uxtb	r1, r3
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4b31      	ldr	r3, [pc, #196]	; (800b36c <mix_sub_columns+0x28c>)
 800b2a8:	5c9a      	ldrb	r2, [r3, r2]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	404a      	eors	r2, r1
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b2b4:	7c3b      	ldrb	r3, [r7, #16]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	4b2c      	ldr	r3, [pc, #176]	; (800b36c <mix_sub_columns+0x28c>)
 800b2ba:	5c9a      	ldrb	r2, [r3, r2]
 800b2bc:	7d7b      	ldrb	r3, [r7, #21]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	4b28      	ldr	r3, [pc, #160]	; (800b364 <mix_sub_columns+0x284>)
 800b2c2:	5c5b      	ldrb	r3, [r3, r1]
 800b2c4:	4053      	eors	r3, r2
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	7abb      	ldrb	r3, [r7, #10]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4b26      	ldr	r3, [pc, #152]	; (800b368 <mix_sub_columns+0x288>)
 800b2ce:	5c5b      	ldrb	r3, [r3, r1]
 800b2d0:	4053      	eors	r3, r2
 800b2d2:	b2d9      	uxtb	r1, r3
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <mix_sub_columns+0x28c>)
 800b2da:	5c9a      	ldrb	r2, [r3, r2]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3309      	adds	r3, #9
 800b2e0:	404a      	eors	r2, r1
 800b2e2:	b2d2      	uxtb	r2, r2
 800b2e4:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b2e6:	7c3b      	ldrb	r3, [r7, #16]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4b20      	ldr	r3, [pc, #128]	; (800b36c <mix_sub_columns+0x28c>)
 800b2ec:	5c9a      	ldrb	r2, [r3, r2]
 800b2ee:	7d7b      	ldrb	r3, [r7, #21]
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4b1e      	ldr	r3, [pc, #120]	; (800b36c <mix_sub_columns+0x28c>)
 800b2f4:	5c5b      	ldrb	r3, [r3, r1]
 800b2f6:	4053      	eors	r3, r2
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	7abb      	ldrb	r3, [r7, #10]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4b19      	ldr	r3, [pc, #100]	; (800b364 <mix_sub_columns+0x284>)
 800b300:	5c5b      	ldrb	r3, [r3, r1]
 800b302:	4053      	eors	r3, r2
 800b304:	b2d9      	uxtb	r1, r3
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	461a      	mov	r2, r3
 800b30a:	4b17      	ldr	r3, [pc, #92]	; (800b368 <mix_sub_columns+0x288>)
 800b30c:	5c9a      	ldrb	r2, [r3, r2]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	330a      	adds	r3, #10
 800b312:	404a      	eors	r2, r1
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b318:	7c3b      	ldrb	r3, [r7, #16]
 800b31a:	461a      	mov	r2, r3
 800b31c:	4b12      	ldr	r3, [pc, #72]	; (800b368 <mix_sub_columns+0x288>)
 800b31e:	5c9a      	ldrb	r2, [r3, r2]
 800b320:	7d7b      	ldrb	r3, [r7, #21]
 800b322:	4619      	mov	r1, r3
 800b324:	4b11      	ldr	r3, [pc, #68]	; (800b36c <mix_sub_columns+0x28c>)
 800b326:	5c5b      	ldrb	r3, [r3, r1]
 800b328:	4053      	eors	r3, r2
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	7abb      	ldrb	r3, [r7, #10]
 800b32e:	4619      	mov	r1, r3
 800b330:	4b0e      	ldr	r3, [pc, #56]	; (800b36c <mix_sub_columns+0x28c>)
 800b332:	5c5b      	ldrb	r3, [r3, r1]
 800b334:	4053      	eors	r3, r2
 800b336:	b2d9      	uxtb	r1, r3
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	461a      	mov	r2, r3
 800b33c:	4b09      	ldr	r3, [pc, #36]	; (800b364 <mix_sub_columns+0x284>)
 800b33e:	5c9a      	ldrb	r2, [r3, r2]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	330b      	adds	r3, #11
 800b344:	404a      	eors	r2, r1
 800b346:	b2d2      	uxtb	r2, r2
 800b348:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b34a:	7d3b      	ldrb	r3, [r7, #20]
 800b34c:	461a      	mov	r2, r3
 800b34e:	4b05      	ldr	r3, [pc, #20]	; (800b364 <mix_sub_columns+0x284>)
 800b350:	5c9a      	ldrb	r2, [r3, r2]
 800b352:	7a7b      	ldrb	r3, [r7, #9]
 800b354:	4619      	mov	r1, r3
 800b356:	4b04      	ldr	r3, [pc, #16]	; (800b368 <mix_sub_columns+0x288>)
 800b358:	5c5b      	ldrb	r3, [r3, r1]
 800b35a:	4053      	eors	r3, r2
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	4619      	mov	r1, r3
 800b362:	e005      	b.n	800b370 <mix_sub_columns+0x290>
 800b364:	0801da80 	.word	0x0801da80
 800b368:	0801db80 	.word	0x0801db80
 800b36c:	0801d980 	.word	0x0801d980
 800b370:	4b2d      	ldr	r3, [pc, #180]	; (800b428 <mix_sub_columns+0x348>)
 800b372:	5c5b      	ldrb	r3, [r3, r1]
 800b374:	4053      	eors	r3, r2
 800b376:	b2d9      	uxtb	r1, r3
 800b378:	7cfb      	ldrb	r3, [r7, #19]
 800b37a:	461a      	mov	r2, r3
 800b37c:	4b2a      	ldr	r3, [pc, #168]	; (800b428 <mix_sub_columns+0x348>)
 800b37e:	5c9a      	ldrb	r2, [r3, r2]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	330c      	adds	r3, #12
 800b384:	404a      	eors	r2, r1
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b38a:	7d3b      	ldrb	r3, [r7, #20]
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b26      	ldr	r3, [pc, #152]	; (800b428 <mix_sub_columns+0x348>)
 800b390:	5c9a      	ldrb	r2, [r3, r2]
 800b392:	7a7b      	ldrb	r3, [r7, #9]
 800b394:	4619      	mov	r1, r3
 800b396:	4b25      	ldr	r3, [pc, #148]	; (800b42c <mix_sub_columns+0x34c>)
 800b398:	5c5b      	ldrb	r3, [r3, r1]
 800b39a:	4053      	eors	r3, r2
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	4b23      	ldr	r3, [pc, #140]	; (800b430 <mix_sub_columns+0x350>)
 800b3a4:	5c5b      	ldrb	r3, [r3, r1]
 800b3a6:	4053      	eors	r3, r2
 800b3a8:	b2d9      	uxtb	r1, r3
 800b3aa:	7cfb      	ldrb	r3, [r7, #19]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	4b1e      	ldr	r3, [pc, #120]	; (800b428 <mix_sub_columns+0x348>)
 800b3b0:	5c9a      	ldrb	r2, [r3, r2]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	330d      	adds	r3, #13
 800b3b6:	404a      	eors	r2, r1
 800b3b8:	b2d2      	uxtb	r2, r2
 800b3ba:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b3bc:	7d3b      	ldrb	r3, [r7, #20]
 800b3be:	461a      	mov	r2, r3
 800b3c0:	4b19      	ldr	r3, [pc, #100]	; (800b428 <mix_sub_columns+0x348>)
 800b3c2:	5c9a      	ldrb	r2, [r3, r2]
 800b3c4:	7a7b      	ldrb	r3, [r7, #9]
 800b3c6:	4619      	mov	r1, r3
 800b3c8:	4b17      	ldr	r3, [pc, #92]	; (800b428 <mix_sub_columns+0x348>)
 800b3ca:	5c5b      	ldrb	r3, [r3, r1]
 800b3cc:	4053      	eors	r3, r2
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4b15      	ldr	r3, [pc, #84]	; (800b42c <mix_sub_columns+0x34c>)
 800b3d6:	5c5b      	ldrb	r3, [r3, r1]
 800b3d8:	4053      	eors	r3, r2
 800b3da:	b2d9      	uxtb	r1, r3
 800b3dc:	7cfb      	ldrb	r3, [r7, #19]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	4b13      	ldr	r3, [pc, #76]	; (800b430 <mix_sub_columns+0x350>)
 800b3e2:	5c9a      	ldrb	r2, [r3, r2]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	330e      	adds	r3, #14
 800b3e8:	404a      	eors	r2, r1
 800b3ea:	b2d2      	uxtb	r2, r2
 800b3ec:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b3ee:	7d3b      	ldrb	r3, [r7, #20]
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	4b0f      	ldr	r3, [pc, #60]	; (800b430 <mix_sub_columns+0x350>)
 800b3f4:	5c9a      	ldrb	r2, [r3, r2]
 800b3f6:	7a7b      	ldrb	r3, [r7, #9]
 800b3f8:	4619      	mov	r1, r3
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <mix_sub_columns+0x348>)
 800b3fc:	5c5b      	ldrb	r3, [r3, r1]
 800b3fe:	4053      	eors	r3, r2
 800b400:	b2da      	uxtb	r2, r3
 800b402:	7bbb      	ldrb	r3, [r7, #14]
 800b404:	4619      	mov	r1, r3
 800b406:	4b08      	ldr	r3, [pc, #32]	; (800b428 <mix_sub_columns+0x348>)
 800b408:	5c5b      	ldrb	r3, [r3, r1]
 800b40a:	4053      	eors	r3, r2
 800b40c:	b2d9      	uxtb	r1, r3
 800b40e:	7cfb      	ldrb	r3, [r7, #19]
 800b410:	461a      	mov	r2, r3
 800b412:	4b06      	ldr	r3, [pc, #24]	; (800b42c <mix_sub_columns+0x34c>)
 800b414:	5c9a      	ldrb	r2, [r3, r2]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	330f      	adds	r3, #15
 800b41a:	404a      	eors	r2, r1
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	701a      	strb	r2, [r3, #0]
  }
 800b420:	bf00      	nop
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	0801d980 	.word	0x0801d980
 800b42c:	0801da80 	.word	0x0801da80
 800b430:	0801db80 	.word	0x0801db80

0800b434 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	460b      	mov	r3, r1
 800b43e:	607a      	str	r2, [r7, #4]
 800b440:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	3b10      	subs	r3, #16
 800b446:	2b10      	cmp	r3, #16
 800b448:	bf8c      	ite	hi
 800b44a:	2201      	movhi	r2, #1
 800b44c:	2200      	movls	r2, #0
 800b44e:	b2d2      	uxtb	r2, r2
 800b450:	2a00      	cmp	r2, #0
 800b452:	d10d      	bne.n	800b470 <lorawan_aes_set_key+0x3c>
 800b454:	2201      	movs	r2, #1
 800b456:	fa02 f303 	lsl.w	r3, r2, r3
 800b45a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b45e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b462:	2b00      	cmp	r3, #0
 800b464:	bf14      	ite	ne
 800b466:	2301      	movne	r3, #1
 800b468:	2300      	moveq	r3, #0
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d105      	bne.n	800b47c <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800b478:	23ff      	movs	r3, #255	; 0xff
 800b47a:	e0b2      	b.n	800b5e2 <lorawan_aes_set_key+0x1ae>
        break;
 800b47c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	7afa      	ldrb	r2, [r7, #11]
 800b482:	68f9      	ldr	r1, [r7, #12]
 800b484:	4618      	mov	r0, r3
 800b486:	f7ff fbfa 	bl	800ac7e <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	331c      	adds	r3, #28
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b494:	7c7b      	ldrb	r3, [r7, #17]
 800b496:	091b      	lsrs	r3, r3, #4
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	3b01      	subs	r3, #1
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	75fb      	strb	r3, [r7, #23]
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	75bb      	strb	r3, [r7, #22]
 800b4ac:	e093      	b.n	800b5d6 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	5cd3      	ldrb	r3, [r2, r3]
 800b4b6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	3b03      	subs	r3, #3
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	5cd3      	ldrb	r3, [r2, r3]
 800b4c0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
 800b4c4:	3b02      	subs	r3, #2
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	5cd3      	ldrb	r3, [r2, r3]
 800b4ca:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b4cc:	7dfb      	ldrb	r3, [r7, #23]
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	5cd3      	ldrb	r3, [r2, r3]
 800b4d4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	7afa      	ldrb	r2, [r7, #11]
 800b4da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4de:	fb01 f202 	mul.w	r2, r1, r2
 800b4e2:	1a9b      	subs	r3, r3, r2
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d127      	bne.n	800b53a <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800b4ea:	7d7b      	ldrb	r3, [r7, #21]
 800b4ec:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b4ee:	7d3b      	ldrb	r3, [r7, #20]
 800b4f0:	4a3e      	ldr	r2, [pc, #248]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b4f2:	5cd2      	ldrb	r2, [r2, r3]
 800b4f4:	7dbb      	ldrb	r3, [r7, #22]
 800b4f6:	4053      	eors	r3, r2
 800b4f8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b4fa:	7cfb      	ldrb	r3, [r7, #19]
 800b4fc:	4a3b      	ldr	r2, [pc, #236]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b4fe:	5cd3      	ldrb	r3, [r2, r3]
 800b500:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b502:	7cbb      	ldrb	r3, [r7, #18]
 800b504:	4a39      	ldr	r2, [pc, #228]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b506:	5cd3      	ldrb	r3, [r2, r3]
 800b508:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b50a:	7c3b      	ldrb	r3, [r7, #16]
 800b50c:	4a37      	ldr	r2, [pc, #220]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b50e:	5cd3      	ldrb	r3, [r2, r3]
 800b510:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b512:	7dbb      	ldrb	r3, [r7, #22]
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	b25a      	sxtb	r2, r3
 800b518:	7dbb      	ldrb	r3, [r7, #22]
 800b51a:	09db      	lsrs	r3, r3, #7
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	4619      	mov	r1, r3
 800b520:	0049      	lsls	r1, r1, #1
 800b522:	440b      	add	r3, r1
 800b524:	4619      	mov	r1, r3
 800b526:	00c8      	lsls	r0, r1, #3
 800b528:	4619      	mov	r1, r3
 800b52a:	4603      	mov	r3, r0
 800b52c:	440b      	add	r3, r1
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	b25b      	sxtb	r3, r3
 800b532:	4053      	eors	r3, r2
 800b534:	b25b      	sxtb	r3, r3
 800b536:	75bb      	strb	r3, [r7, #22]
 800b538:	e01c      	b.n	800b574 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b53a:	7afb      	ldrb	r3, [r7, #11]
 800b53c:	2b18      	cmp	r3, #24
 800b53e:	d919      	bls.n	800b574 <lorawan_aes_set_key+0x140>
 800b540:	7dfb      	ldrb	r3, [r7, #23]
 800b542:	7afa      	ldrb	r2, [r7, #11]
 800b544:	fbb3 f1f2 	udiv	r1, r3, r2
 800b548:	fb01 f202 	mul.w	r2, r1, r2
 800b54c:	1a9b      	subs	r3, r3, r2
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b10      	cmp	r3, #16
 800b552:	d10f      	bne.n	800b574 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800b554:	7d7b      	ldrb	r3, [r7, #21]
 800b556:	4a25      	ldr	r2, [pc, #148]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b558:	5cd3      	ldrb	r3, [r2, r3]
 800b55a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b55c:	7d3b      	ldrb	r3, [r7, #20]
 800b55e:	4a23      	ldr	r2, [pc, #140]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b560:	5cd3      	ldrb	r3, [r2, r3]
 800b562:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b564:	7cfb      	ldrb	r3, [r7, #19]
 800b566:	4a21      	ldr	r2, [pc, #132]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b568:	5cd3      	ldrb	r3, [r2, r3]
 800b56a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b56c:	7cbb      	ldrb	r3, [r7, #18]
 800b56e:	4a1f      	ldr	r2, [pc, #124]	; (800b5ec <lorawan_aes_set_key+0x1b8>)
 800b570:	5cd3      	ldrb	r3, [r2, r3]
 800b572:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b574:	7dfa      	ldrb	r2, [r7, #23]
 800b576:	7afb      	ldrb	r3, [r7, #11]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b57c:	7c3b      	ldrb	r3, [r7, #16]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	5cd1      	ldrb	r1, [r2, r3]
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	7d7a      	ldrb	r2, [r7, #21]
 800b586:	404a      	eors	r2, r1
 800b588:	b2d1      	uxtb	r1, r2
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b58e:	7c3b      	ldrb	r3, [r7, #16]
 800b590:	3301      	adds	r3, #1
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	5cd1      	ldrb	r1, [r2, r3]
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	3301      	adds	r3, #1
 800b59a:	7d3a      	ldrb	r2, [r7, #20]
 800b59c:	404a      	eors	r2, r1
 800b59e:	b2d1      	uxtb	r1, r2
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b5a4:	7c3b      	ldrb	r3, [r7, #16]
 800b5a6:	3302      	adds	r3, #2
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	5cd1      	ldrb	r1, [r2, r3]
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	3302      	adds	r3, #2
 800b5b0:	7cfa      	ldrb	r2, [r7, #19]
 800b5b2:	404a      	eors	r2, r1
 800b5b4:	b2d1      	uxtb	r1, r2
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b5ba:	7c3b      	ldrb	r3, [r7, #16]
 800b5bc:	3303      	adds	r3, #3
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	5cd1      	ldrb	r1, [r2, r3]
 800b5c2:	7dfb      	ldrb	r3, [r7, #23]
 800b5c4:	3303      	adds	r3, #3
 800b5c6:	7cba      	ldrb	r2, [r7, #18]
 800b5c8:	404a      	eors	r2, r1
 800b5ca:	b2d1      	uxtb	r1, r2
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	75fb      	strb	r3, [r7, #23]
 800b5d6:	7dfa      	ldrb	r2, [r7, #23]
 800b5d8:	7c7b      	ldrb	r3, [r7, #17]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	f4ff af67 	bcc.w	800b4ae <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	0801d980 	.word	0x0801d980

0800b5f0 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b08a      	sub	sp, #40	; 0x28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d038      	beq.n	800b678 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	f107 0314 	add.w	r3, r7, #20
 800b60c:	68f9      	ldr	r1, [r7, #12]
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fc07 	bl	800ae22 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b614:	2301      	movs	r3, #1
 800b616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b61a:	e014      	b.n	800b646 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b61c:	f107 0314 	add.w	r3, r7, #20
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff fd5d 	bl	800b0e0 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b62c:	0112      	lsls	r2, r2, #4
 800b62e:	441a      	add	r2, r3
 800b630:	f107 0314 	add.w	r3, r7, #20
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fcab 	bl	800af92 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b63c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b640:	3301      	adds	r3, #1
 800b642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b64c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b650:	429a      	cmp	r2, r3
 800b652:	d3e3      	bcc.n	800b61c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b654:	f107 0314 	add.w	r3, r7, #20
 800b658:	4618      	mov	r0, r3
 800b65a:	f7ff fca7 	bl	800afac <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b664:	0112      	lsls	r2, r2, #4
 800b666:	441a      	add	r2, r3
 800b668:	f107 0314 	add.w	r3, r7, #20
 800b66c:	4619      	mov	r1, r3
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff fbd7 	bl	800ae22 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b674:	2300      	movs	r3, #0
 800b676:	e000      	b.n	800b67a <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b678:	23ff      	movs	r3, #255	; 0xff
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3728      	adds	r7, #40	; 0x28
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
	...

0800b684 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b686:	b09d      	sub	sp, #116	; 0x74
 800b688:	af10      	add	r7, sp, #64	; 0x40
 800b68a:	4603      	mov	r3, r0
 800b68c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b690:	2306      	movs	r3, #6
 800b692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b696:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b69a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b69e:	4611      	mov	r1, r2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f9af 	bl	800ba04 <SecureElementGetKeyByID>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b6ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f040 80b0 	bne.w	800b816 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b6be:	4b58      	ldr	r3, [pc, #352]	; (800b820 <PrintKey+0x19c>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	2002      	movs	r0, #2
 800b6c6:	f011 f8fd 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b6ca:	e056      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b6cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d106      	bne.n	800b6e2 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b6d4:	4b53      	ldr	r3, [pc, #332]	; (800b824 <PrintKey+0x1a0>)
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2100      	movs	r1, #0
 800b6da:	2002      	movs	r0, #2
 800b6dc:	f011 f8f2 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b6e0:	e04b      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d106      	bne.n	800b6f8 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b6ea:	4b4f      	ldr	r3, [pc, #316]	; (800b828 <PrintKey+0x1a4>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	2002      	movs	r0, #2
 800b6f2:	f011 f8e7 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b6f6:	e040      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b6f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	d106      	bne.n	800b70e <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b700:	4b4a      	ldr	r3, [pc, #296]	; (800b82c <PrintKey+0x1a8>)
 800b702:	2200      	movs	r2, #0
 800b704:	2100      	movs	r1, #0
 800b706:	2002      	movs	r0, #2
 800b708:	f011 f8dc 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b70c:	e035      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b70e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b712:	2b04      	cmp	r3, #4
 800b714:	d106      	bne.n	800b724 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b716:	4b46      	ldr	r3, [pc, #280]	; (800b830 <PrintKey+0x1ac>)
 800b718:	2200      	movs	r2, #0
 800b71a:	2100      	movs	r1, #0
 800b71c:	2002      	movs	r0, #2
 800b71e:	f011 f8d1 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b722:	e02a      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b728:	2b7f      	cmp	r3, #127	; 0x7f
 800b72a:	d106      	bne.n	800b73a <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b72c:	4b41      	ldr	r3, [pc, #260]	; (800b834 <PrintKey+0x1b0>)
 800b72e:	2200      	movs	r2, #0
 800b730:	2100      	movs	r1, #0
 800b732:	2002      	movs	r0, #2
 800b734:	f011 f8c6 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b738:	e01f      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b73a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b73e:	2b80      	cmp	r3, #128	; 0x80
 800b740:	d106      	bne.n	800b750 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b742:	4b3d      	ldr	r3, [pc, #244]	; (800b838 <PrintKey+0x1b4>)
 800b744:	2200      	movs	r2, #0
 800b746:	2100      	movs	r1, #0
 800b748:	2002      	movs	r0, #2
 800b74a:	f011 f8bb 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b74e:	e014      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b754:	2b81      	cmp	r3, #129	; 0x81
 800b756:	d106      	bne.n	800b766 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b758:	4b38      	ldr	r3, [pc, #224]	; (800b83c <PrintKey+0x1b8>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	2002      	movs	r0, #2
 800b760:	f011 f8b0 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 800b764:	e009      	b.n	800b77a <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b76a:	2b82      	cmp	r3, #130	; 0x82
 800b76c:	d105      	bne.n	800b77a <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b76e:	4b34      	ldr	r3, [pc, #208]	; (800b840 <PrintKey+0x1bc>)
 800b770:	2200      	movs	r2, #0
 800b772:	2100      	movs	r1, #0
 800b774:	2002      	movs	r0, #2
 800b776:	f011 f8a5 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	4618      	mov	r0, r3
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	789b      	ldrb	r3, [r3, #2]
 800b784:	461c      	mov	r4, r3
 800b786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b788:	78db      	ldrb	r3, [r3, #3]
 800b78a:	461d      	mov	r5, r3
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	791b      	ldrb	r3, [r3, #4]
 800b790:	461e      	mov	r6, r3
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	795b      	ldrb	r3, [r3, #5]
 800b796:	623b      	str	r3, [r7, #32]
 800b798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b79a:	799b      	ldrb	r3, [r3, #6]
 800b79c:	61fb      	str	r3, [r7, #28]
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	79db      	ldrb	r3, [r3, #7]
 800b7a2:	61bb      	str	r3, [r7, #24]
 800b7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a6:	7a1b      	ldrb	r3, [r3, #8]
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	7a5b      	ldrb	r3, [r3, #9]
 800b7ae:	613b      	str	r3, [r7, #16]
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	7a9b      	ldrb	r3, [r3, #10]
 800b7b4:	60fb      	str	r3, [r7, #12]
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	7adb      	ldrb	r3, [r3, #11]
 800b7ba:	60bb      	str	r3, [r7, #8]
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	7b1b      	ldrb	r3, [r3, #12]
 800b7c0:	607b      	str	r3, [r7, #4]
 800b7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c4:	7b5b      	ldrb	r3, [r3, #13]
 800b7c6:	603b      	str	r3, [r7, #0]
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	7b9b      	ldrb	r3, [r3, #14]
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d0:	7bdb      	ldrb	r3, [r3, #15]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d6:	7c1b      	ldrb	r3, [r3, #16]
 800b7d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7da:	920e      	str	r2, [sp, #56]	; 0x38
 800b7dc:	910d      	str	r1, [sp, #52]	; 0x34
 800b7de:	683a      	ldr	r2, [r7, #0]
 800b7e0:	920c      	str	r2, [sp, #48]	; 0x30
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7e6:	68ba      	ldr	r2, [r7, #8]
 800b7e8:	920a      	str	r2, [sp, #40]	; 0x28
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	9208      	str	r2, [sp, #32]
 800b7f2:	697a      	ldr	r2, [r7, #20]
 800b7f4:	9207      	str	r2, [sp, #28]
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	9206      	str	r2, [sp, #24]
 800b7fa:	69fa      	ldr	r2, [r7, #28]
 800b7fc:	9205      	str	r2, [sp, #20]
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	9603      	str	r6, [sp, #12]
 800b804:	9502      	str	r5, [sp, #8]
 800b806:	9401      	str	r4, [sp, #4]
 800b808:	9000      	str	r0, [sp, #0]
 800b80a:	4b0e      	ldr	r3, [pc, #56]	; (800b844 <PrintKey+0x1c0>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	2100      	movs	r1, #0
 800b810:	2002      	movs	r0, #2
 800b812:	f011 f857 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800b816:	bf00      	nop
 800b818:	3734      	adds	r7, #52	; 0x34
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b81e:	bf00      	nop
 800b820:	0801d3d4 	.word	0x0801d3d4
 800b824:	0801d3ec 	.word	0x0801d3ec
 800b828:	0801d404 	.word	0x0801d404
 800b82c:	0801d41c 	.word	0x0801d41c
 800b830:	0801d434 	.word	0x0801d434
 800b834:	0801d44c 	.word	0x0801d44c
 800b838:	0801d464 	.word	0x0801d464
 800b83c:	0801d47c 	.word	0x0801d47c
 800b840:	0801d494 	.word	0x0801d494
 800b844:	0801d4ac 	.word	0x0801d4ac

0800b848 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	4603      	mov	r3, r0
 800b850:	6039      	str	r1, [r7, #0]
 800b852:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b854:	2300      	movs	r3, #0
 800b856:	73fb      	strb	r3, [r7, #15]
 800b858:	e01a      	b.n	800b890 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b85a:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <GetKeyByID+0x5c>)
 800b85c:	6819      	ldr	r1, [r3, #0]
 800b85e:	7bfa      	ldrb	r2, [r7, #15]
 800b860:	4613      	mov	r3, r2
 800b862:	011b      	lsls	r3, r3, #4
 800b864:	4413      	add	r3, r2
 800b866:	440b      	add	r3, r1
 800b868:	3310      	adds	r3, #16
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	79fa      	ldrb	r2, [r7, #7]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d10b      	bne.n	800b88a <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b872:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <GetKeyByID+0x5c>)
 800b874:	6819      	ldr	r1, [r3, #0]
 800b876:	7bfa      	ldrb	r2, [r7, #15]
 800b878:	4613      	mov	r3, r2
 800b87a:	011b      	lsls	r3, r3, #4
 800b87c:	4413      	add	r3, r2
 800b87e:	3310      	adds	r3, #16
 800b880:	18ca      	adds	r2, r1, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b886:	2300      	movs	r3, #0
 800b888:	e006      	b.n	800b898 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b88a:	7bfb      	ldrb	r3, [r7, #15]
 800b88c:	3301      	adds	r3, #1
 800b88e:	73fb      	strb	r3, [r7, #15]
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	2b09      	cmp	r3, #9
 800b894:	d9e1      	bls.n	800b85a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b896:	2303      	movs	r3, #3
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3714      	adds	r7, #20
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bc80      	pop	{r7}
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	200004b8 	.word	0x200004b8

0800b8a8 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b8a8:	b590      	push	{r4, r7, lr}
 800b8aa:	b0d1      	sub	sp, #324	; 0x144
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800b8b2:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800b8b6:	6020      	str	r0, [r4, #0]
 800b8b8:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800b8bc:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800b8c0:	6001      	str	r1, [r0, #0]
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b8c8:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b8cc:	801a      	strh	r2, [r3, #0]
 800b8ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b8d2:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800b8d6:	460a      	mov	r2, r1
 800b8d8:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b8da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b8de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d003      	beq.n	800b8f0 <ComputeCmac+0x48>
 800b8e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	e05c      	b.n	800b9ae <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b8f4:	f107 0314 	add.w	r3, r7, #20
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe ff1b 	bl	800a734 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b8fe:	f107 0210 	add.w	r2, r7, #16
 800b902:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b906:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	4611      	mov	r1, r2
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff ff9a 	bl	800b848 <GetKeyByID>
 800b914:	4603      	mov	r3, r0
 800b916:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b91a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d143      	bne.n	800b9aa <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b922:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	1c5a      	adds	r2, r3, #1
 800b92e:	f107 0314 	add.w	r3, r7, #20
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f7fe ff16 	bl	800a766 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b93a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b93e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d009      	beq.n	800b95c <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b948:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b94c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b950:	f107 0014 	add.w	r0, r7, #20
 800b954:	2210      	movs	r2, #16
 800b956:	6819      	ldr	r1, [r3, #0]
 800b958:	f7fe ff14 	bl	800a784 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b95c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b960:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b964:	881a      	ldrh	r2, [r3, #0]
 800b966:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800b96a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b96e:	f107 0014 	add.w	r0, r7, #20
 800b972:	6819      	ldr	r1, [r3, #0]
 800b974:	f7fe ff06 	bl	800a784 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b978:	f107 0214 	add.w	r2, r7, #20
 800b97c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800b980:	4611      	mov	r1, r2
 800b982:	4618      	mov	r0, r3
 800b984:	f7fe ffc0 	bl	800a908 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b988:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800b98c:	061a      	lsls	r2, r3, #24
 800b98e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800b992:	041b      	lsls	r3, r3, #16
 800b994:	431a      	orrs	r2, r3
 800b996:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800b99a:	021b      	lsls	r3, r3, #8
 800b99c:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b99e:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800b9a8:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b9aa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd90      	pop	{r4, r7, pc}

0800b9b8 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b9c8:	2302      	movs	r3, #2
 800b9ca:	e013      	b.n	800b9f4 <SecureElementInit+0x3c>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b9cc:	4a0b      	ldr	r2, [pc, #44]	; (800b9fc <SecureElementInit+0x44>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b9d2:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <SecureElementInit+0x44>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	22c0      	movs	r2, #192	; 0xc0
 800b9d8:	4909      	ldr	r1, [pc, #36]	; (800ba00 <SecureElementInit+0x48>)
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f00c fc1d 	bl	801821a <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d005      	beq.n	800b9f2 <SecureElementInit+0x3a>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <SecureElementInit+0x44>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	4610      	mov	r0, r2
 800b9f0:	4798      	blx	r3
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	200004b8 	.word	0x200004b8
 800ba00:	0801de94 	.word	0x0801de94

0800ba04 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	6039      	str	r1, [r7, #0]
 800ba0e:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
 800ba14:	e01a      	b.n	800ba4c <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ba16:	4b12      	ldr	r3, [pc, #72]	; (800ba60 <SecureElementGetKeyByID+0x5c>)
 800ba18:	6819      	ldr	r1, [r3, #0]
 800ba1a:	7bfa      	ldrb	r2, [r7, #15]
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	011b      	lsls	r3, r3, #4
 800ba20:	4413      	add	r3, r2
 800ba22:	440b      	add	r3, r1
 800ba24:	3310      	adds	r3, #16
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	79fa      	ldrb	r2, [r7, #7]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d10b      	bne.n	800ba46 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ba2e:	4b0c      	ldr	r3, [pc, #48]	; (800ba60 <SecureElementGetKeyByID+0x5c>)
 800ba30:	6819      	ldr	r1, [r3, #0]
 800ba32:	7bfa      	ldrb	r2, [r7, #15]
 800ba34:	4613      	mov	r3, r2
 800ba36:	011b      	lsls	r3, r3, #4
 800ba38:	4413      	add	r3, r2
 800ba3a:	3310      	adds	r3, #16
 800ba3c:	18ca      	adds	r2, r1, r3
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ba42:	2300      	movs	r3, #0
 800ba44:	e006      	b.n	800ba54 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	73fb      	strb	r3, [r7, #15]
 800ba4c:	7bfb      	ldrb	r3, [r7, #15]
 800ba4e:	2b09      	cmp	r3, #9
 800ba50:	d9e1      	bls.n	800ba16 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ba52:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	200004b8 	.word	0x200004b8

0800ba64 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba66:	b08b      	sub	sp, #44	; 0x2c
 800ba68:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800ba6a:	4b3f      	ldr	r3, [pc, #252]	; (800bb68 <SecureElementPrintKeys+0x104>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2100      	movs	r1, #0
 800ba70:	2002      	movs	r0, #2
 800ba72:	f010 ff27 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800ba76:	2000      	movs	r0, #0
 800ba78:	f7ff fe04 	bl	800b684 <PrintKey>
    PrintKey(NWK_KEY);
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	f7ff fe01 	bl	800b684 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800ba82:	4b3a      	ldr	r3, [pc, #232]	; (800bb6c <SecureElementPrintKeys+0x108>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	2100      	movs	r1, #0
 800ba88:	2002      	movs	r0, #2
 800ba8a:	f010 ff1b 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800ba8e:	2003      	movs	r0, #3
 800ba90:	f7ff fdf8 	bl	800b684 <PrintKey>
    PrintKey(NWK_S_KEY);
 800ba94:	2002      	movs	r0, #2
 800ba96:	f7ff fdf5 	bl	800b684 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800ba9a:	4b35      	ldr	r3, [pc, #212]	; (800bb70 <SecureElementPrintKeys+0x10c>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2100      	movs	r1, #0
 800baa0:	2002      	movs	r0, #2
 800baa2:	f010 ff0f 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800baa6:	4b33      	ldr	r3, [pc, #204]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	461a      	mov	r2, r3
 800baae:	4b31      	ldr	r3, [pc, #196]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	785b      	ldrb	r3, [r3, #1]
 800bab4:	4619      	mov	r1, r3
 800bab6:	4b2f      	ldr	r3, [pc, #188]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	789b      	ldrb	r3, [r3, #2]
 800babc:	4618      	mov	r0, r3
 800babe:	4b2d      	ldr	r3, [pc, #180]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	78db      	ldrb	r3, [r3, #3]
 800bac4:	461c      	mov	r4, r3
 800bac6:	4b2b      	ldr	r3, [pc, #172]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	791b      	ldrb	r3, [r3, #4]
 800bacc:	461d      	mov	r5, r3
 800bace:	4b29      	ldr	r3, [pc, #164]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	795b      	ldrb	r3, [r3, #5]
 800bad4:	461e      	mov	r6, r3
 800bad6:	4b27      	ldr	r3, [pc, #156]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	799b      	ldrb	r3, [r3, #6]
 800badc:	607b      	str	r3, [r7, #4]
 800bade:	4b25      	ldr	r3, [pc, #148]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	79db      	ldrb	r3, [r3, #7]
 800bae4:	9307      	str	r3, [sp, #28]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	9306      	str	r3, [sp, #24]
 800baea:	9605      	str	r6, [sp, #20]
 800baec:	9504      	str	r5, [sp, #16]
 800baee:	9403      	str	r4, [sp, #12]
 800baf0:	9002      	str	r0, [sp, #8]
 800baf2:	9101      	str	r1, [sp, #4]
 800baf4:	9200      	str	r2, [sp, #0]
 800baf6:	4b20      	ldr	r3, [pc, #128]	; (800bb78 <SecureElementPrintKeys+0x114>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	2100      	movs	r1, #0
 800bafc:	2002      	movs	r0, #2
 800bafe:	f010 fee1 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800bb02:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	7a1b      	ldrb	r3, [r3, #8]
 800bb08:	461a      	mov	r2, r3
 800bb0a:	4b1a      	ldr	r3, [pc, #104]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	7a5b      	ldrb	r3, [r3, #9]
 800bb10:	4619      	mov	r1, r3
 800bb12:	4b18      	ldr	r3, [pc, #96]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	7a9b      	ldrb	r3, [r3, #10]
 800bb18:	4618      	mov	r0, r3
 800bb1a:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	7adb      	ldrb	r3, [r3, #11]
 800bb20:	461c      	mov	r4, r3
 800bb22:	4b14      	ldr	r3, [pc, #80]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	7b1b      	ldrb	r3, [r3, #12]
 800bb28:	461d      	mov	r5, r3
 800bb2a:	4b12      	ldr	r3, [pc, #72]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	7b5b      	ldrb	r3, [r3, #13]
 800bb30:	461e      	mov	r6, r3
 800bb32:	4b10      	ldr	r3, [pc, #64]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	7b9b      	ldrb	r3, [r3, #14]
 800bb38:	607b      	str	r3, [r7, #4]
 800bb3a:	4b0e      	ldr	r3, [pc, #56]	; (800bb74 <SecureElementPrintKeys+0x110>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	7bdb      	ldrb	r3, [r3, #15]
 800bb40:	9307      	str	r3, [sp, #28]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	9306      	str	r3, [sp, #24]
 800bb46:	9605      	str	r6, [sp, #20]
 800bb48:	9504      	str	r5, [sp, #16]
 800bb4a:	9403      	str	r4, [sp, #12]
 800bb4c:	9002      	str	r0, [sp, #8]
 800bb4e:	9101      	str	r1, [sp, #4]
 800bb50:	9200      	str	r2, [sp, #0]
 800bb52:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <SecureElementPrintKeys+0x118>)
 800bb54:	2200      	movs	r2, #0
 800bb56:	2100      	movs	r1, #0
 800bb58:	2002      	movs	r0, #2
 800bb5a:	f010 feb3 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb68:	0801d500 	.word	0x0801d500
 800bb6c:	0801d518 	.word	0x0801d518
 800bb70:	0801d530 	.word	0x0801d530
 800bb74:	200004b8 	.word	0x200004b8
 800bb78:	0801d548 	.word	0x0801d548
 800bb7c:	0801d588 	.word	0x0801d588

0800bb80 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800bb84:	2004      	movs	r0, #4
 800bb86:	f7ff fd7d 	bl	800b684 <PrintKey>
    PrintKey(MC_KE_KEY);
 800bb8a:	207f      	movs	r0, #127	; 0x7f
 800bb8c:	f7ff fd7a 	bl	800b684 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800bb90:	2002      	movs	r0, #2
 800bb92:	f7ff fd77 	bl	800b684 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800bb96:	2003      	movs	r0, #3
 800bb98:	f7ff fd74 	bl	800b684 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	bd80      	pop	{r7, pc}
	...

0800bba4 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b088      	sub	sp, #32
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	4603      	mov	r3, r0
 800bbac:	6039      	str	r1, [r7, #0]
 800bbae:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d101      	bne.n	800bbba <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbb6:	2302      	movs	r3, #2
 800bbb8:	e04c      	b.n	800bc54 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bbba:	2300      	movs	r3, #0
 800bbbc:	77fb      	strb	r3, [r7, #31]
 800bbbe:	e045      	b.n	800bc4c <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bbc0:	4b26      	ldr	r3, [pc, #152]	; (800bc5c <SecureElementSetKey+0xb8>)
 800bbc2:	6819      	ldr	r1, [r3, #0]
 800bbc4:	7ffa      	ldrb	r2, [r7, #31]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	011b      	lsls	r3, r3, #4
 800bbca:	4413      	add	r3, r2
 800bbcc:	440b      	add	r3, r1
 800bbce:	3310      	adds	r3, #16
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	79fa      	ldrb	r2, [r7, #7]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d136      	bne.n	800bc46 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	2b80      	cmp	r3, #128	; 0x80
 800bbdc:	d123      	bne.n	800bc26 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bbde:	2306      	movs	r3, #6
 800bbe0:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	60fb      	str	r3, [r7, #12]
 800bbe6:	f107 0310 	add.w	r3, r7, #16
 800bbea:	2200      	movs	r2, #0
 800bbec:	601a      	str	r2, [r3, #0]
 800bbee:	605a      	str	r2, [r3, #4]
 800bbf0:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bbf2:	f107 030c 	add.w	r3, r7, #12
 800bbf6:	227f      	movs	r2, #127	; 0x7f
 800bbf8:	2110      	movs	r1, #16
 800bbfa:	6838      	ldr	r0, [r7, #0]
 800bbfc:	f000 f87d 	bl	800bcfa <SecureElementAesEncrypt>
 800bc00:	4603      	mov	r3, r0
 800bc02:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800bc04:	4b15      	ldr	r3, [pc, #84]	; (800bc5c <SecureElementSetKey+0xb8>)
 800bc06:	6819      	ldr	r1, [r3, #0]
 800bc08:	7ffa      	ldrb	r2, [r7, #31]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	011b      	lsls	r3, r3, #4
 800bc0e:	4413      	add	r3, r2
 800bc10:	3310      	adds	r3, #16
 800bc12:	440b      	add	r3, r1
 800bc14:	3301      	adds	r3, #1
 800bc16:	f107 010c 	add.w	r1, r7, #12
 800bc1a:	2210      	movs	r2, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f00c fafc 	bl	801821a <memcpy1>
                return retval;
 800bc22:	7fbb      	ldrb	r3, [r7, #30]
 800bc24:	e016      	b.n	800bc54 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bc26:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <SecureElementSetKey+0xb8>)
 800bc28:	6819      	ldr	r1, [r3, #0]
 800bc2a:	7ffa      	ldrb	r2, [r7, #31]
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	4413      	add	r3, r2
 800bc32:	3310      	adds	r3, #16
 800bc34:	440b      	add	r3, r1
 800bc36:	3301      	adds	r3, #1
 800bc38:	2210      	movs	r2, #16
 800bc3a:	6839      	ldr	r1, [r7, #0]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f00c faec 	bl	801821a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bc42:	2300      	movs	r3, #0
 800bc44:	e006      	b.n	800bc54 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bc46:	7ffb      	ldrb	r3, [r7, #31]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	77fb      	strb	r3, [r7, #31]
 800bc4c:	7ffb      	ldrb	r3, [r7, #31]
 800bc4e:	2b09      	cmp	r3, #9
 800bc50:	d9b6      	bls.n	800bbc0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc52:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	3720      	adds	r7, #32
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	200004b8 	.word	0x200004b8

0800bc60 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af02      	add	r7, sp, #8
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	460b      	mov	r3, r1
 800bc70:	80fb      	strh	r3, [r7, #6]
 800bc72:	4613      	mov	r3, r2
 800bc74:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bc76:	797b      	ldrb	r3, [r7, #5]
 800bc78:	2b7e      	cmp	r3, #126	; 0x7e
 800bc7a:	d901      	bls.n	800bc80 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	e009      	b.n	800bc94 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bc80:	7979      	ldrb	r1, [r7, #5]
 800bc82:	88fa      	ldrh	r2, [r7, #6]
 800bc84:	69bb      	ldr	r3, [r7, #24]
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f7ff fe0b 	bl	800b8a8 <ComputeCmac>
 800bc92:	4603      	mov	r3, r0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3710      	adds	r7, #16
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b088      	sub	sp, #32
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	60f8      	str	r0, [r7, #12]
 800bca4:	607a      	str	r2, [r7, #4]
 800bca6:	461a      	mov	r2, r3
 800bca8:	460b      	mov	r3, r1
 800bcaa:	817b      	strh	r3, [r7, #10]
 800bcac:	4613      	mov	r3, r2
 800bcae:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d101      	bne.n	800bcba <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e01b      	b.n	800bcf2 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bcba:	2306      	movs	r3, #6
 800bcbc:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bcc2:	7a79      	ldrb	r1, [r7, #9]
 800bcc4:	897a      	ldrh	r2, [r7, #10]
 800bcc6:	f107 0310 	add.w	r3, r7, #16
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	460b      	mov	r3, r1
 800bcce:	68f9      	ldr	r1, [r7, #12]
 800bcd0:	2000      	movs	r0, #0
 800bcd2:	f7ff fde9 	bl	800b8a8 <ComputeCmac>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bcda:	7dfb      	ldrb	r3, [r7, #23]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d001      	beq.n	800bce4 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	e006      	b.n	800bcf2 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d001      	beq.n	800bcf0 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bcec:	2301      	movs	r3, #1
 800bcee:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bcf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3718      	adds	r7, #24
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b0c2      	sub	sp, #264	; 0x108
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	4608      	mov	r0, r1
 800bd04:	4611      	mov	r1, r2
 800bd06:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bd0a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	4603      	mov	r3, r0
 800bd12:	817b      	strh	r3, [r7, #10]
 800bd14:	460b      	mov	r3, r1
 800bd16:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d006      	beq.n	800bd2c <SecureElementAesEncrypt+0x32>
 800bd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d101      	bne.n	800bd30 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd2c:	2302      	movs	r3, #2
 800bd2e:	e046      	b.n	800bdbe <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bd30:	897b      	ldrh	r3, [r7, #10]
 800bd32:	f003 030f 	and.w	r3, r3, #15
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d001      	beq.n	800bd40 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bd3c:	2305      	movs	r3, #5
 800bd3e:	e03e      	b.n	800bdbe <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bd40:	f107 0314 	add.w	r3, r7, #20
 800bd44:	22f0      	movs	r2, #240	; 0xf0
 800bd46:	2100      	movs	r1, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f00c faa1 	bl	8018290 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bd4e:	f107 0210 	add.w	r2, r7, #16
 800bd52:	7a7b      	ldrb	r3, [r7, #9]
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff fd76 	bl	800b848 <GetKeyByID>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bd62:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d127      	bne.n	800bdba <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	f107 0214 	add.w	r2, r7, #20
 800bd72:	2110      	movs	r1, #16
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7ff fb5d 	bl	800b434 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800bd80:	e018      	b.n	800bdb4 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bd82:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	18d0      	adds	r0, r2, r3
 800bd8a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bd8e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800bd92:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800bd96:	6812      	ldr	r2, [r2, #0]
 800bd98:	4413      	add	r3, r2
 800bd9a:	f107 0214 	add.w	r2, r7, #20
 800bd9e:	4619      	mov	r1, r3
 800bda0:	f7ff fc26 	bl	800b5f0 <lorawan_aes_encrypt>
            block = block + 16;
 800bda4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800bda8:	3310      	adds	r3, #16
 800bdaa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800bdae:	897b      	ldrh	r3, [r7, #10]
 800bdb0:	3b10      	subs	r3, #16
 800bdb2:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bdb4:	897b      	ldrh	r3, [r7, #10]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1e3      	bne.n	800bd82 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bdba:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	70fb      	strb	r3, [r7, #3]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bdde:	2302      	movs	r3, #2
 800bde0:	e02e      	b.n	800be40 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bde2:	2306      	movs	r3, #6
 800bde4:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bde6:	78bb      	ldrb	r3, [r7, #2]
 800bde8:	2b7f      	cmp	r3, #127	; 0x7f
 800bdea:	d104      	bne.n	800bdf6 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bdec:	78fb      	ldrb	r3, [r7, #3]
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d001      	beq.n	800bdf6 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	e024      	b.n	800be40 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60fb      	str	r3, [r7, #12]
 800bdfa:	f107 0310 	add.w	r3, r7, #16
 800bdfe:	2200      	movs	r2, #0
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	605a      	str	r2, [r3, #4]
 800be04:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800be06:	f107 030c 	add.w	r3, r7, #12
 800be0a:	78fa      	ldrb	r2, [r7, #3]
 800be0c:	2110      	movs	r1, #16
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f7ff ff73 	bl	800bcfa <SecureElementAesEncrypt>
 800be14:	4603      	mov	r3, r0
 800be16:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800be18:	7ffb      	ldrb	r3, [r7, #31]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800be1e:	7ffb      	ldrb	r3, [r7, #31]
 800be20:	e00e      	b.n	800be40 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800be22:	f107 020c 	add.w	r2, r7, #12
 800be26:	78bb      	ldrb	r3, [r7, #2]
 800be28:	4611      	mov	r1, r2
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7ff feba 	bl	800bba4 <SecureElementSetKey>
 800be30:	4603      	mov	r3, r0
 800be32:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800be34:	7ffb      	ldrb	r3, [r7, #31]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800be3a:	7ffb      	ldrb	r3, [r7, #31]
 800be3c:	e000      	b.n	800be40 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800be3e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800be40:	4618      	mov	r0, r3
 800be42:	3720      	adds	r7, #32
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607b      	str	r3, [r7, #4]
 800be52:	4603      	mov	r3, r0
 800be54:	73fb      	strb	r3, [r7, #15]
 800be56:	4613      	mov	r3, r2
 800be58:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <SecureElementProcessJoinAccept+0x24>
 800be60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be62:	2b00      	cmp	r3, #0
 800be64:	d002      	beq.n	800be6c <SecureElementProcessJoinAccept+0x24>
 800be66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d101      	bne.n	800be70 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be6c:	2302      	movs	r3, #2
 800be6e:	e064      	b.n	800bf3a <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800be70:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be74:	2b21      	cmp	r3, #33	; 0x21
 800be76:	d901      	bls.n	800be7c <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800be78:	2305      	movs	r3, #5
 800be7a:	e05e      	b.n	800bf3a <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800be7c:	2301      	movs	r3, #1
 800be7e:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800be80:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be84:	b29b      	uxth	r3, r3
 800be86:	461a      	mov	r2, r3
 800be88:	6879      	ldr	r1, [r7, #4]
 800be8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be8c:	f00c f9c5 	bl	801821a <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	1c58      	adds	r0, r3, #1
 800be94:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be98:	b29b      	uxth	r3, r3
 800be9a:	3b01      	subs	r3, #1
 800be9c:	b299      	uxth	r1, r3
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	3301      	adds	r3, #1
 800bea2:	7dfa      	ldrb	r2, [r7, #23]
 800bea4:	f7ff ff29 	bl	800bcfa <SecureElementAesEncrypt>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800beae:	2307      	movs	r3, #7
 800beb0:	e043      	b.n	800bf3a <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800beb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb4:	330b      	adds	r3, #11
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	09db      	lsrs	r3, r3, #7
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bebe:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bec4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bec8:	3b04      	subs	r3, #4
 800beca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800becc:	4413      	add	r3, r2
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bed2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bed6:	3b03      	subs	r3, #3
 800bed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beda:	4413      	add	r3, r2
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	021b      	lsls	r3, r3, #8
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bee6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800beea:	3b02      	subs	r3, #2
 800beec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beee:	4413      	add	r3, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	041b      	lsls	r3, r3, #16
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800befa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800befe:	3b01      	subs	r3, #1
 800bf00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf02:	4413      	add	r3, r2
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	061b      	lsls	r3, r3, #24
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10e      	bne.n	800bf34 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800bf16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	3b04      	subs	r3, #4
 800bf1e:	b299      	uxth	r1, r3
 800bf20:	2301      	movs	r3, #1
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf26:	f7ff feb9 	bl	800bc9c <SecureElementVerifyAesCmac>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d003      	beq.n	800bf38 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e002      	b.n	800bf3a <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800bf34:	2304      	movs	r3, #4
 800bf36:	e000      	b.n	800bf3a <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3718      	adds	r7, #24
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf52:	2302      	movs	r3, #2
 800bf54:	e007      	b.n	800bf66 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800bf56:	4b06      	ldr	r3, [pc, #24]	; (800bf70 <SecureElementSetDevEui+0x2c>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	6879      	ldr	r1, [r7, #4]
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f00c f95b 	bl	801821a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	200004b8 	.word	0x200004b8

0800bf74 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800bf74:	b480      	push	{r7}
 800bf76:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800bf78:	4b02      	ldr	r3, [pc, #8]	; (800bf84 <SecureElementGetDevEui+0x10>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bc80      	pop	{r7}
 800bf82:	4770      	bx	lr
 800bf84:	200004b8 	.word	0x200004b8

0800bf88 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d101      	bne.n	800bf9a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bf96:	2302      	movs	r3, #2
 800bf98:	e008      	b.n	800bfac <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800bf9a:	4b06      	ldr	r3, [pc, #24]	; (800bfb4 <SecureElementSetJoinEui+0x2c>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	2208      	movs	r2, #8
 800bfa2:	6879      	ldr	r1, [r7, #4]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f00c f938 	bl	801821a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	200004b8 	.word	0x200004b8

0800bfb8 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800bfb8:	b480      	push	{r7}
 800bfba:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800bfbc:	4b03      	ldr	r3, [pc, #12]	; (800bfcc <SecureElementGetJoinEui+0x14>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3308      	adds	r3, #8
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bc80      	pop	{r7}
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	200004b8 	.word	0x200004b8

0800bfd0 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bfda:	4a23      	ldr	r2, [pc, #140]	; (800c068 <LmHandlerInit+0x98>)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bfe0:	4b22      	ldr	r3, [pc, #136]	; (800c06c <LmHandlerInit+0x9c>)
 800bfe2:	4a23      	ldr	r2, [pc, #140]	; (800c070 <LmHandlerInit+0xa0>)
 800bfe4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800bfe6:	4b21      	ldr	r3, [pc, #132]	; (800c06c <LmHandlerInit+0x9c>)
 800bfe8:	4a22      	ldr	r2, [pc, #136]	; (800c074 <LmHandlerInit+0xa4>)
 800bfea:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bfec:	4b1f      	ldr	r3, [pc, #124]	; (800c06c <LmHandlerInit+0x9c>)
 800bfee:	4a22      	ldr	r2, [pc, #136]	; (800c078 <LmHandlerInit+0xa8>)
 800bff0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bff2:	4b1e      	ldr	r3, [pc, #120]	; (800c06c <LmHandlerInit+0x9c>)
 800bff4:	4a21      	ldr	r2, [pc, #132]	; (800c07c <LmHandlerInit+0xac>)
 800bff6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800bff8:	4b1b      	ldr	r3, [pc, #108]	; (800c068 <LmHandlerInit+0x98>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a20      	ldr	r2, [pc, #128]	; (800c080 <LmHandlerInit+0xb0>)
 800c000:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800c002:	4b19      	ldr	r3, [pc, #100]	; (800c068 <LmHandlerInit+0x98>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	4a1d      	ldr	r2, [pc, #116]	; (800c080 <LmHandlerInit+0xb0>)
 800c00a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800c00c:	4b16      	ldr	r3, [pc, #88]	; (800c068 <LmHandlerInit+0x98>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	4a1b      	ldr	r2, [pc, #108]	; (800c080 <LmHandlerInit+0xb0>)
 800c014:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800c016:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <LmHandlerInit+0xb0>)
 800c018:	4a1a      	ldr	r2, [pc, #104]	; (800c084 <LmHandlerInit+0xb4>)
 800c01a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800c01c:	4b12      	ldr	r3, [pc, #72]	; (800c068 <LmHandlerInit+0x98>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699b      	ldr	r3, [r3, #24]
 800c022:	4a17      	ldr	r2, [pc, #92]	; (800c080 <LmHandlerInit+0xb0>)
 800c024:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800c026:	4a18      	ldr	r2, [pc, #96]	; (800c088 <LmHandlerInit+0xb8>)
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800c02c:	4b0e      	ldr	r3, [pc, #56]	; (800c068 <LmHandlerInit+0x98>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c032:	4a15      	ldr	r2, [pc, #84]	; (800c088 <LmHandlerInit+0xb8>)
 800c034:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800c036:	4b0c      	ldr	r3, [pc, #48]	; (800c068 <LmHandlerInit+0x98>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03c:	4a12      	ldr	r2, [pc, #72]	; (800c088 <LmHandlerInit+0xb8>)
 800c03e:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800c040:	4b09      	ldr	r3, [pc, #36]	; (800c068 <LmHandlerInit+0x98>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c046:	4a10      	ldr	r2, [pc, #64]	; (800c088 <LmHandlerInit+0xb8>)
 800c048:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800c04a:	490f      	ldr	r1, [pc, #60]	; (800c088 <LmHandlerInit+0xb8>)
 800c04c:	2000      	movs	r0, #0
 800c04e:	f000 fd87 	bl	800cb60 <LmHandlerPackageRegister>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c058:	f04f 33ff 	mov.w	r3, #4294967295
 800c05c:	e000      	b.n	800c060 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	200004f4 	.word	0x200004f4
 800c06c:	200004f8 	.word	0x200004f8
 800c070:	0800c86d 	.word	0x0800c86d
 800c074:	0800c8d5 	.word	0x0800c8d5
 800c078:	0800c9a1 	.word	0x0800c9a1
 800c07c:	0800cab9 	.word	0x0800cab9
 800c080:	20000508 	.word	0x20000508
 800c084:	0800cf35 	.word	0x0800cf35
 800c088:	200004bc 	.word	0x200004bc

0800c08c <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b094      	sub	sp, #80	; 0x50
 800c090:	af04      	add	r7, sp, #16
 800c092:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800c094:	2214      	movs	r2, #20
 800c096:	6879      	ldr	r1, [r7, #4]
 800c098:	4890      	ldr	r0, [pc, #576]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c09a:	f00f fbc3 	bl	801b824 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800c09e:	4b90      	ldr	r3, [pc, #576]	; (800c2e0 <LmHandlerConfigure+0x254>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800c0a4:	f7fe fb04 	bl	800a6b0 <LoraInfo_GetPtr>
 800c0a8:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800c0aa:	4b8c      	ldr	r3, [pc, #560]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	4093      	lsls	r3, r2
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d106      	bne.n	800c0ce <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800c0c0:	4b88      	ldr	r3, [pc, #544]	; (800c2e4 <LmHandlerConfigure+0x258>)
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f010 fbfc 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800c0cc:	e7fe      	b.n	800c0cc <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800c0ce:	4b83      	ldr	r3, [pc, #524]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4984      	ldr	r1, [pc, #528]	; (800c2e8 <LmHandlerConfigure+0x25c>)
 800c0d6:	4885      	ldr	r0, [pc, #532]	; (800c2ec <LmHandlerConfigure+0x260>)
 800c0d8:	f004 fe8c 	bl	8010df4 <LoRaMacInitialization>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d002      	beq.n	800c0e8 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800c0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e6:	e0f5      	b.n	800c2d4 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800c0e8:	2327      	movs	r3, #39	; 0x27
 800c0ea:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c0ec:	f107 0318 	add.w	r3, r7, #24
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f005 fbcf 	bl	8011894 <LoRaMacMibSetRequestConfirm>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d103      	bne.n	800c104 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800c0fc:	4b7c      	ldr	r3, [pc, #496]	; (800c2f0 <LmHandlerConfigure+0x264>)
 800c0fe:	2201      	movs	r2, #1
 800c100:	701a      	strb	r2, [r3, #0]
 800c102:	e02a      	b.n	800c15a <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800c104:	2328      	movs	r3, #40	; 0x28
 800c106:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800c108:	4b7a      	ldr	r3, [pc, #488]	; (800c2f4 <LmHandlerConfigure+0x268>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	691b      	ldr	r3, [r3, #16]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d00c      	beq.n	800c12c <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c112:	f107 0318 	add.w	r3, r7, #24
 800c116:	4618      	mov	r0, r3
 800c118:	f005 fa16 	bl	8011548 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c11c:	4b75      	ldr	r3, [pc, #468]	; (800c2f4 <LmHandlerConfigure+0x268>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	691b      	ldr	r3, [r3, #16]
 800c122:	69fa      	ldr	r2, [r7, #28]
 800c124:	f240 518c 	movw	r1, #1420	; 0x58c
 800c128:	4610      	mov	r0, r2
 800c12a:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c12c:	2327      	movs	r3, #39	; 0x27
 800c12e:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c130:	f107 0318 	add.w	r3, r7, #24
 800c134:	4618      	mov	r0, r3
 800c136:	f005 fbad 	bl	8011894 <LoRaMacMibSetRequestConfirm>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10c      	bne.n	800c15a <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c140:	2301      	movs	r3, #1
 800c142:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c144:	f107 0318 	add.w	r3, r7, #24
 800c148:	4618      	mov	r0, r3
 800c14a:	f005 f9fd 	bl	8011548 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c14e:	7f3b      	ldrb	r3, [r7, #28]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d002      	beq.n	800c15a <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800c154:	4b66      	ldr	r3, [pc, #408]	; (800c2f0 <LmHandlerConfigure+0x264>)
 800c156:	2201      	movs	r2, #1
 800c158:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c15a:	4b65      	ldr	r3, [pc, #404]	; (800c2f0 <LmHandlerConfigure+0x264>)
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d02a      	beq.n	800c1b8 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c162:	4b64      	ldr	r3, [pc, #400]	; (800c2f4 <LmHandlerConfigure+0x268>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	69db      	ldr	r3, [r3, #28]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c16c:	4b61      	ldr	r3, [pc, #388]	; (800c2f4 <LmHandlerConfigure+0x268>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	69db      	ldr	r3, [r3, #28]
 800c172:	2000      	movs	r0, #0
 800c174:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c176:	2306      	movs	r3, #6
 800c178:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c17a:	f107 0318 	add.w	r3, r7, #24
 800c17e:	4618      	mov	r0, r3
 800c180:	f005 f9e2 	bl	8011548 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	4a5c      	ldr	r2, [pc, #368]	; (800c2f8 <LmHandlerConfigure+0x26c>)
 800c188:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c18a:	2327      	movs	r3, #39	; 0x27
 800c18c:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c18e:	f107 0318 	add.w	r3, r7, #24
 800c192:	4618      	mov	r0, r3
 800c194:	f005 f9d8 	bl	8011548 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c19e:	4b4f      	ldr	r3, [pc, #316]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c1a0:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800c1a8:	4b4c      	ldr	r3, [pc, #304]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c1aa:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800c1b2:	4b4a      	ldr	r3, [pc, #296]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c1b4:	709a      	strb	r2, [r3, #2]
 800c1b6:	e019      	b.n	800c1ec <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c1b8:	2305      	movs	r3, #5
 800c1ba:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c1c0:	f107 0318 	add.w	r3, r7, #24
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f005 fb65 	bl	8011894 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800c1ca:	4b4a      	ldr	r3, [pc, #296]	; (800c2f4 <LmHandlerConfigure+0x268>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	4798      	blx	r3
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	4a48      	ldr	r2, [pc, #288]	; (800c2f8 <LmHandlerConfigure+0x26c>)
 800c1d6:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c1d8:	2306      	movs	r3, #6
 800c1da:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c1dc:	4b46      	ldr	r3, [pc, #280]	; (800c2f8 <LmHandlerConfigure+0x26c>)
 800c1de:	695b      	ldr	r3, [r3, #20]
 800c1e0:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c1e2:	f107 0318 	add.w	r3, r7, #24
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f005 fb54 	bl	8011894 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c1ec:	2302      	movs	r3, #2
 800c1ee:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c1f0:	f107 0318 	add.w	r3, r7, #24
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f005 f9a7 	bl	8011548 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c1fa:	69fb      	ldr	r3, [r7, #28]
 800c1fc:	2208      	movs	r2, #8
 800c1fe:	4619      	mov	r1, r3
 800c200:	483d      	ldr	r0, [pc, #244]	; (800c2f8 <LmHandlerConfigure+0x26c>)
 800c202:	f00c f80a 	bl	801821a <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c206:	2303      	movs	r3, #3
 800c208:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c20a:	f107 0318 	add.w	r3, r7, #24
 800c20e:	4618      	mov	r0, r3
 800c210:	f005 f99a 	bl	8011548 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	2208      	movs	r2, #8
 800c218:	4619      	mov	r1, r3
 800c21a:	4838      	ldr	r0, [pc, #224]	; (800c2fc <LmHandlerConfigure+0x270>)
 800c21c:	f00b fffd 	bl	801821a <memcpy1>

    SecureElementPrintKeys();
 800c220:	f7ff fc20 	bl	800ba64 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c224:	4b36      	ldr	r3, [pc, #216]	; (800c300 <LmHandlerConfigure+0x274>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	461a      	mov	r2, r3
 800c22a:	4b36      	ldr	r3, [pc, #216]	; (800c304 <LmHandlerConfigure+0x278>)
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	4619      	mov	r1, r3
 800c230:	4b35      	ldr	r3, [pc, #212]	; (800c308 <LmHandlerConfigure+0x27c>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	4b35      	ldr	r3, [pc, #212]	; (800c30c <LmHandlerConfigure+0x280>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	9303      	str	r3, [sp, #12]
 800c23c:	9002      	str	r0, [sp, #8]
 800c23e:	9101      	str	r1, [sp, #4]
 800c240:	9200      	str	r2, [sp, #0]
 800c242:	4b33      	ldr	r3, [pc, #204]	; (800c310 <LmHandlerConfigure+0x284>)
 800c244:	2200      	movs	r2, #0
 800c246:	2100      	movs	r1, #0
 800c248:	2002      	movs	r0, #2
 800c24a:	f010 fb3b 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c24e:	230f      	movs	r3, #15
 800c250:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c252:	2301      	movs	r3, #1
 800c254:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c256:	f107 0318 	add.w	r3, r7, #24
 800c25a:	4618      	mov	r0, r3
 800c25c:	f005 fb1a 	bl	8011894 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c260:	2310      	movs	r3, #16
 800c262:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c264:	2300      	movs	r3, #0
 800c266:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c268:	f107 0318 	add.w	r3, r7, #24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f005 fb11 	bl	8011894 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c272:	2304      	movs	r3, #4
 800c274:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c276:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c278:	789b      	ldrb	r3, [r3, #2]
 800c27a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c27c:	f107 0318 	add.w	r3, r7, #24
 800c280:	4618      	mov	r0, r3
 800c282:	f005 fb07 	bl	8011894 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c286:	2338      	movs	r3, #56	; 0x38
 800c288:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c28a:	4b14      	ldr	r3, [pc, #80]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c290:	f107 0318 	add.w	r3, r7, #24
 800c294:	4618      	mov	r0, r3
 800c296:	f005 fafd 	bl	8011894 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c29a:	230f      	movs	r3, #15
 800c29c:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c29e:	4b0f      	ldr	r3, [pc, #60]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	f107 0210 	add.w	r2, r7, #16
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f008 f9b8 	bl	801461e <RegionGetPhyParam>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bf14      	ite	ne
 800c2b8:	2301      	movne	r3, #1
 800c2ba:	2300      	moveq	r3, #0
 800c2bc:	b2da      	uxtb	r2, r3
 800c2be:	4b07      	ldr	r3, [pc, #28]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c2c0:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c2c2:	2014      	movs	r0, #20
 800c2c4:	f000 faba 	bl	800c83c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c2c8:	4b04      	ldr	r3, [pc, #16]	; (800c2dc <LmHandlerConfigure+0x250>)
 800c2ca:	799b      	ldrb	r3, [r3, #6]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f006 f90f 	bl	80124f0 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3740      	adds	r7, #64	; 0x40
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	200004e0 	.word	0x200004e0
 800c2e0:	20000520 	.word	0x20000520
 800c2e4:	0801d5c8 	.word	0x0801d5c8
 800c2e8:	20000508 	.word	0x20000508
 800c2ec:	200004f8 	.word	0x200004f8
 800c2f0:	20000616 	.word	0x20000616
 800c2f4:	200004f4 	.word	0x200004f4
 800c2f8:	20000090 	.word	0x20000090
 800c2fc:	20000098 	.word	0x20000098
 800c300:	200000a7 	.word	0x200000a7
 800c304:	200000a6 	.word	0x200000a6
 800c308:	200000a5 	.word	0x200000a5
 800c30c:	200000a4 	.word	0x200000a4
 800c310:	0801d614 	.word	0x0801d614

0800c314 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c31a:	f002 fd49 	bl	800edb0 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c31e:	f000 fd3f 	bl	800cda0 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c322:	f000 fd13 	bl	800cd4c <LmHandlerPackageIsTxPending>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d117      	bne.n	800c35c <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c32c:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <LmHandlerProcess+0x50>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d014      	beq.n	800c35e <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c334:	2300      	movs	r3, #0
 800c336:	703b      	strb	r3, [r7, #0]
 800c338:	2300      	movs	r3, #0
 800c33a:	707b      	strb	r3, [r7, #1]
 800c33c:	2300      	movs	r3, #0
 800c33e:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c340:	4b09      	ldr	r3, [pc, #36]	; (800c368 <LmHandlerProcess+0x54>)
 800c342:	78d9      	ldrb	r1, [r3, #3]
 800c344:	463b      	mov	r3, r7
 800c346:	2200      	movs	r2, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 f8b7 	bl	800c4bc <LmHandlerSend>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d104      	bne.n	800c35e <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c354:	4b03      	ldr	r3, [pc, #12]	; (800c364 <LmHandlerProcess+0x50>)
 800c356:	2200      	movs	r2, #0
 800c358:	701a      	strb	r2, [r3, #0]
 800c35a:	e000      	b.n	800c35e <LmHandlerProcess+0x4a>
        return;
 800c35c:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c35e:	3708      	adds	r7, #8
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20000520 	.word	0x20000520
 800c368:	200004e0 	.word	0x200004e0

0800c36c <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c36c:	b480      	push	{r7}
 800c36e:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c370:	4b02      	ldr	r3, [pc, #8]	; (800c37c <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c372:	681b      	ldr	r3, [r3, #0]
}
 800c374:	4618      	mov	r0, r3
 800c376:	46bd      	mov	sp, r7
 800c378:	bc80      	pop	{r7}
 800c37a:	4770      	bx	lr
 800c37c:	2000051c 	.word	0x2000051c

0800c380 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b090      	sub	sp, #64	; 0x40
 800c384:	af00      	add	r7, sp, #0
 800c386:	4603      	mov	r3, r0
 800c388:	460a      	mov	r2, r1
 800c38a:	71fb      	strb	r3, [r7, #7]
 800c38c:	4613      	mov	r3, r2
 800c38e:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c390:	2301      	movs	r3, #1
 800c392:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c396:	4b36      	ldr	r3, [pc, #216]	; (800c470 <LmHandlerJoin+0xf0>)
 800c398:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c3a2:	79fb      	ldrb	r3, [r7, #7]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d10b      	bne.n	800c3c0 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c3ae:	4b31      	ldr	r3, [pc, #196]	; (800c474 <LmHandlerJoin+0xf4>)
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c3b4:	4a2f      	ldr	r2, [pc, #188]	; (800c474 <LmHandlerJoin+0xf4>)
 800c3b6:	79bb      	ldrb	r3, [r7, #6]
 800c3b8:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c3ba:	f004 ffd3 	bl	8011364 <LoRaMacStart>
 800c3be:	e041      	b.n	800c444 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c3c6:	4b2b      	ldr	r3, [pc, #172]	; (800c474 <LmHandlerJoin+0xf4>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c3cc:	4b28      	ldr	r3, [pc, #160]	; (800c470 <LmHandlerJoin+0xf0>)
 800c3ce:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c3d2:	4b28      	ldr	r3, [pc, #160]	; (800c474 <LmHandlerJoin+0xf4>)
 800c3d4:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c3d6:	4b27      	ldr	r3, [pc, #156]	; (800c474 <LmHandlerJoin+0xf4>)
 800c3d8:	2200      	movs	r2, #0
 800c3da:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c3dc:	4a25      	ldr	r2, [pc, #148]	; (800c474 <LmHandlerJoin+0xf4>)
 800c3de:	79bb      	ldrb	r3, [r7, #6]
 800c3e0:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c3e2:	4b25      	ldr	r3, [pc, #148]	; (800c478 <LmHandlerJoin+0xf8>)
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	f083 0301 	eor.w	r3, r3, #1
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01e      	beq.n	800c42e <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c3f0:	231f      	movs	r3, #31
 800c3f2:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c3f4:	4b1e      	ldr	r3, [pc, #120]	; (800c470 <LmHandlerJoin+0xf0>)
 800c3f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c3fa:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c3fc:	f107 0308 	add.w	r3, r7, #8
 800c400:	4618      	mov	r0, r3
 800c402:	f005 fa47 	bl	8011894 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c406:	2320      	movs	r3, #32
 800c408:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c40a:	4b19      	ldr	r3, [pc, #100]	; (800c470 <LmHandlerJoin+0xf0>)
 800c40c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c410:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c412:	f107 0308 	add.w	r3, r7, #8
 800c416:	4618      	mov	r0, r3
 800c418:	f005 fa3c 	bl	8011894 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c41c:	2329      	movs	r3, #41	; 0x29
 800c41e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c420:	4b16      	ldr	r3, [pc, #88]	; (800c47c <LmHandlerJoin+0xfc>)
 800c422:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c424:	f107 0308 	add.w	r3, r7, #8
 800c428:	4618      	mov	r0, r3
 800c42a:	f005 fa33 	bl	8011894 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c42e:	f004 ff99 	bl	8011364 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c432:	2301      	movs	r3, #1
 800c434:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c436:	2301      	movs	r3, #1
 800c438:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c43a:	f107 0308 	add.w	r3, r7, #8
 800c43e:	4618      	mov	r0, r3
 800c440:	f005 fa28 	bl	8011894 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c444:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <LmHandlerJoin+0xf8>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	f083 0301 	eor.w	r3, r3, #1
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d102      	bne.n	800c458 <LmHandlerJoin+0xd8>
 800c452:	79bb      	ldrb	r3, [r7, #6]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d004      	beq.n	800c462 <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c458:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c45c:	4618      	mov	r0, r3
 800c45e:	f005 fd89 	bl	8011f74 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c464:	4a06      	ldr	r2, [pc, #24]	; (800c480 <LmHandlerJoin+0x100>)
 800c466:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c468:	bf00      	nop
 800c46a:	3740      	adds	r7, #64	; 0x40
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	200004e0 	.word	0x200004e0
 800c474:	200000a8 	.word	0x200000a8
 800c478:	20000616 	.word	0x20000616
 800c47c:	01000400 	.word	0x01000400
 800c480:	2000051c 	.word	0x2000051c

0800c484 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b08a      	sub	sp, #40	; 0x28
 800c488:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c48a:	2301      	movs	r3, #1
 800c48c:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c48e:	463b      	mov	r3, r7
 800c490:	4618      	mov	r0, r3
 800c492:	f005 f859 	bl	8011548 <LoRaMacMibGetRequestConfirm>
 800c496:	4603      	mov	r3, r0
 800c498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800c49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c4a4:	793b      	ldrb	r3, [r7, #4]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d101      	bne.n	800c4ae <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e002      	b.n	800c4b4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	e000      	b.n	800c4b4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c4b2:	2300      	movs	r3, #0
    }
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3728      	adds	r7, #40	; 0x28
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}

0800c4bc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08a      	sub	sp, #40	; 0x28
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	70fb      	strb	r3, [r7, #3]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c4cc:	23ff      	movs	r3, #255	; 0xff
 800c4ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c4d2:	f002 f9cd 	bl	800e870 <LoRaMacIsBusy>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d002      	beq.n	800c4e2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c4dc:	f06f 0301 	mvn.w	r3, #1
 800c4e0:	e0a3      	b.n	800c62a <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c4e2:	f7ff ffcf 	bl	800c484 <LmHandlerJoinStatus>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d00a      	beq.n	800c502 <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c4ec:	4b51      	ldr	r3, [pc, #324]	; (800c634 <LmHandlerSend+0x178>)
 800c4ee:	799b      	ldrb	r3, [r3, #6]
 800c4f0:	4a50      	ldr	r2, [pc, #320]	; (800c634 <LmHandlerSend+0x178>)
 800c4f2:	79d2      	ldrb	r2, [r2, #7]
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff ff42 	bl	800c380 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c4fc:	f06f 0302 	mvn.w	r3, #2
 800c500:	e093      	b.n	800c62a <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c502:	4a4d      	ldr	r2, [pc, #308]	; (800c638 <LmHandlerSend+0x17c>)
 800c504:	78fb      	ldrb	r3, [r7, #3]
 800c506:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	bf14      	ite	ne
 800c50e:	2301      	movne	r3, #1
 800c510:	2300      	moveq	r3, #0
 800c512:	b2db      	uxtb	r3, r3
 800c514:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c516:	4b49      	ldr	r3, [pc, #292]	; (800c63c <LmHandlerSend+0x180>)
 800c518:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c51c:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	785b      	ldrb	r3, [r3, #1]
 800c522:	f107 020c 	add.w	r2, r7, #12
 800c526:	4611      	mov	r1, r2
 800c528:	4618      	mov	r0, r3
 800c52a:	f004 ff7d 	bl	8011428 <LoRaMacQueryTxPossible>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d009      	beq.n	800c548 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c534:	2300      	movs	r3, #0
 800c536:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c540:	23f9      	movs	r3, #249	; 0xf9
 800c542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c546:	e009      	b.n	800c55c <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	785b      	ldrb	r3, [r3, #1]
 800c552:	b29b      	uxth	r3, r3
 800c554:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c55c:	4b36      	ldr	r3, [pc, #216]	; (800c638 <LmHandlerSend+0x17c>)
 800c55e:	687a      	ldr	r2, [r7, #4]
 800c560:	3310      	adds	r3, #16
 800c562:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c566:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c56a:	4b34      	ldr	r3, [pc, #208]	; (800c63c <LmHandlerSend+0x180>)
 800c56c:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c570:	4b31      	ldr	r3, [pc, #196]	; (800c638 <LmHandlerSend+0x17c>)
 800c572:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c574:	78ba      	ldrb	r2, [r7, #2]
 800c576:	f107 0310 	add.w	r3, r7, #16
 800c57a:	4611      	mov	r1, r2
 800c57c:	4618      	mov	r0, r3
 800c57e:	f005 fe7f 	bl	8012280 <LoRaMacMcpsRequest>
 800c582:	4603      	mov	r3, r0
 800c584:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c588:	6a3b      	ldr	r3, [r7, #32]
 800c58a:	4a2d      	ldr	r2, [pc, #180]	; (800c640 <LmHandlerSend+0x184>)
 800c58c:	6013      	str	r3, [r2, #0]

    switch (status)
 800c58e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c592:	2b11      	cmp	r3, #17
 800c594:	d842      	bhi.n	800c61c <LmHandlerSend+0x160>
 800c596:	a201      	add	r2, pc, #4	; (adr r2, 800c59c <LmHandlerSend+0xe0>)
 800c598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59c:	0800c5e5 	.word	0x0800c5e5
 800c5a0:	0800c5fd 	.word	0x0800c5fd
 800c5a4:	0800c61d 	.word	0x0800c61d
 800c5a8:	0800c61d 	.word	0x0800c61d
 800c5ac:	0800c61d 	.word	0x0800c61d
 800c5b0:	0800c61d 	.word	0x0800c61d
 800c5b4:	0800c61d 	.word	0x0800c61d
 800c5b8:	0800c605 	.word	0x0800c605
 800c5bc:	0800c61d 	.word	0x0800c61d
 800c5c0:	0800c61d 	.word	0x0800c61d
 800c5c4:	0800c61d 	.word	0x0800c61d
 800c5c8:	0800c615 	.word	0x0800c615
 800c5cc:	0800c61d 	.word	0x0800c61d
 800c5d0:	0800c61d 	.word	0x0800c61d
 800c5d4:	0800c5fd 	.word	0x0800c5fd
 800c5d8:	0800c5fd 	.word	0x0800c5fd
 800c5dc:	0800c5fd 	.word	0x0800c5fd
 800c5e0:	0800c60d 	.word	0x0800c60d
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c5e4:	4b17      	ldr	r3, [pc, #92]	; (800c644 <LmHandlerSend+0x188>)
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c5ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5ee:	f113 0f07 	cmn.w	r3, #7
 800c5f2:	d017      	beq.n	800c624 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800c5fa:	e013      	b.n	800c624 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c5fc:	23fe      	movs	r3, #254	; 0xfe
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c602:	e010      	b.n	800c626 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c604:	23fd      	movs	r3, #253	; 0xfd
 800c606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c60a:	e00c      	b.n	800c626 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c60c:	23fb      	movs	r3, #251	; 0xfb
 800c60e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c612:	e008      	b.n	800c626 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c614:	23fa      	movs	r3, #250	; 0xfa
 800c616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c61a:	e004      	b.n	800c626 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c61c:	23ff      	movs	r3, #255	; 0xff
 800c61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800c622:	e000      	b.n	800c626 <LmHandlerSend+0x16a>
            break;
 800c624:	bf00      	nop
    }

    return lmhStatus;
 800c626:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3728      	adds	r7, #40	; 0x28
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	200000a8 	.word	0x200000a8
 800c638:	200000b0 	.word	0x200000b0
 800c63c:	200004e0 	.word	0x200004e0
 800c640:	2000051c 	.word	0x2000051c
 800c644:	20000520 	.word	0x20000520

0800c648 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c64e:	2309      	movs	r3, #9
 800c650:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c652:	463b      	mov	r3, r7
 800c654:	4618      	mov	r0, r3
 800c656:	f005 fc8d 	bl	8011f74 <LoRaMacMlmeRequest>
 800c65a:	4603      	mov	r3, r0
 800c65c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	4a06      	ldr	r2, [pc, #24]	; (800c67c <LmHandlerDeviceTimeReq+0x34>)
 800c662:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d101      	bne.n	800c66e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c66a:	2300      	movs	r3, #0
 800c66c:	e001      	b.n	800c672 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c66e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	2000051c 	.word	0x2000051c

0800c680 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	4603      	mov	r3, r0
 800c688:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c68a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	bc80      	pop	{r7}
 800c696:	4770      	bx	lr

0800c698 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08c      	sub	sp, #48	; 0x30
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	4603      	mov	r3, r0
 800c6a0:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800c6a8:	f002 f8e2 	bl	800e870 <LoRaMacIsBusy>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c6b2:	f06f 0301 	mvn.w	r3, #1
 800c6b6:	e073      	b.n	800c7a0 <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c6b8:	f7ff fee4 	bl	800c484 <LmHandlerJoinStatus>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d002      	beq.n	800c6c8 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c6c2:	f06f 0302 	mvn.w	r3, #2
 800c6c6:	e06b      	b.n	800c7a0 <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c6cc:	f107 0308 	add.w	r3, r7, #8
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f004 ff39 	bl	8011548 <LoRaMacMibGetRequestConfirm>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e0:	e05e      	b.n	800c7a0 <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800c6e2:	7b3b      	ldrb	r3, [r7, #12]
 800c6e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c6e8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c6ec:	79fb      	ldrb	r3, [r7, #7]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d04d      	beq.n	800c78e <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800c6f2:	79fb      	ldrb	r3, [r7, #7]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d028      	beq.n	800c74a <LmHandlerRequestClass+0xb2>
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	dc4a      	bgt.n	800c792 <LmHandlerRequestClass+0xfa>
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <LmHandlerRequestClass+0x6e>
 800c700:	2b01      	cmp	r3, #1
 800c702:	d01e      	beq.n	800c742 <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c704:	e045      	b.n	800c792 <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800c706:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d043      	beq.n	800c796 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c712:	f107 0308 	add.w	r3, r7, #8
 800c716:	4618      	mov	r0, r3
 800c718:	f005 f8bc 	bl	8011894 <LoRaMacMibSetRequestConfirm>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10b      	bne.n	800c73a <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c722:	4b21      	ldr	r3, [pc, #132]	; (800c7a8 <LmHandlerRequestClass+0x110>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d034      	beq.n	800c796 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c72c:	4b1e      	ldr	r3, [pc, #120]	; (800c7a8 <LmHandlerRequestClass+0x110>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c732:	79fa      	ldrb	r2, [r7, #7]
 800c734:	4610      	mov	r0, r2
 800c736:	4798      	blx	r3
            break;
 800c738:	e02d      	b.n	800c796 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c73a:	23ff      	movs	r3, #255	; 0xff
 800c73c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c740:	e029      	b.n	800c796 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c742:	23ff      	movs	r3, #255	; 0xff
 800c744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c748:	e028      	b.n	800c79c <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800c74a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d003      	beq.n	800c75a <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c752:	23ff      	movs	r3, #255	; 0xff
 800c754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c758:	e01f      	b.n	800c79a <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800c75a:	79fb      	ldrb	r3, [r7, #7]
 800c75c:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c75e:	f107 0308 	add.w	r3, r7, #8
 800c762:	4618      	mov	r0, r3
 800c764:	f005 f896 	bl	8011894 <LoRaMacMibSetRequestConfirm>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10b      	bne.n	800c786 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c76e:	4b0e      	ldr	r3, [pc, #56]	; (800c7a8 <LmHandlerRequestClass+0x110>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c774:	2b00      	cmp	r3, #0
 800c776:	d010      	beq.n	800c79a <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c778:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <LmHandlerRequestClass+0x110>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77e:	79fa      	ldrb	r2, [r7, #7]
 800c780:	4610      	mov	r0, r2
 800c782:	4798      	blx	r3
            break;
 800c784:	e009      	b.n	800c79a <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c786:	23ff      	movs	r3, #255	; 0xff
 800c788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800c78c:	e005      	b.n	800c79a <LmHandlerRequestClass+0x102>
        }
    }
 800c78e:	bf00      	nop
 800c790:	e004      	b.n	800c79c <LmHandlerRequestClass+0x104>
            break;
 800c792:	bf00      	nop
 800c794:	e002      	b.n	800c79c <LmHandlerRequestClass+0x104>
            break;
 800c796:	bf00      	nop
 800c798:	e000      	b.n	800c79c <LmHandlerRequestClass+0x104>
            break;
 800c79a:	bf00      	nop
    return errorStatus;
 800c79c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3730      	adds	r7, #48	; 0x30
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	200004f4 	.word	0x200004f4

0800c7ac <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08c      	sub	sp, #48	; 0x30
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d102      	bne.n	800c7c0 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c7be:	e010      	b.n	800c7e2 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c7c4:	f107 030c 	add.w	r3, r7, #12
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f004 febd 	bl	8011548 <LoRaMacMibGetRequestConfirm>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d8:	e003      	b.n	800c7e2 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c7da:	7c3a      	ldrb	r2, [r7, #16]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3730      	adds	r7, #48	; 0x30
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b08c      	sub	sp, #48	; 0x30
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800c7fe:	e016      	b.n	800c82e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c800:	2320      	movs	r3, #32
 800c802:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c804:	f107 030c 	add.w	r3, r7, #12
 800c808:	4618      	mov	r0, r3
 800c80a:	f004 fe9d 	bl	8011548 <LoRaMacMibGetRequestConfirm>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c814:	f04f 33ff 	mov.w	r3, #4294967295
 800c818:	e009      	b.n	800c82e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c81a:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f993 2000 	ldrsb.w	r2, [r3]
 800c828:	4b03      	ldr	r3, [pc, #12]	; (800c838 <LmHandlerGetTxDatarate+0x4c>)
 800c82a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3730      	adds	r7, #48	; 0x30
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	200004e0 	.word	0x200004e0

0800c83c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08c      	sub	sp, #48	; 0x30
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c844:	2323      	movs	r3, #35	; 0x23
 800c846:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c84c:	f107 030c 	add.w	r3, r7, #12
 800c850:	4618      	mov	r0, r3
 800c852:	f005 f81f 	bl	8011894 <LoRaMacMibSetRequestConfirm>
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d002      	beq.n	800c862 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c85c:	f04f 33ff 	mov.w	r3, #4294967295
 800c860:	e000      	b.n	800c864 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3730      	adds	r7, #48	; 0x30
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c874:	4b15      	ldr	r3, [pc, #84]	; (800c8cc <McpsConfirm+0x60>)
 800c876:	2201      	movs	r2, #1
 800c878:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	785a      	ldrb	r2, [r3, #1]
 800c87e:	4b13      	ldr	r3, [pc, #76]	; (800c8cc <McpsConfirm+0x60>)
 800c880:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	789b      	ldrb	r3, [r3, #2]
 800c886:	b25a      	sxtb	r2, r3
 800c888:	4b10      	ldr	r3, [pc, #64]	; (800c8cc <McpsConfirm+0x60>)
 800c88a:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	4a0e      	ldr	r2, [pc, #56]	; (800c8cc <McpsConfirm+0x60>)
 800c892:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c89a:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <McpsConfirm+0x60>)
 800c89c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	691b      	ldr	r3, [r3, #16]
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <McpsConfirm+0x60>)
 800c8a6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	791b      	ldrb	r3, [r3, #4]
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	4b07      	ldr	r3, [pc, #28]	; (800c8cc <McpsConfirm+0x60>)
 800c8b0:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c8b2:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <McpsConfirm+0x64>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8b8:	4804      	ldr	r0, [pc, #16]	; (800c8cc <McpsConfirm+0x60>)
 800c8ba:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c8bc:	6879      	ldr	r1, [r7, #4]
 800c8be:	2000      	movs	r0, #0
 800c8c0:	f000 f9c6 	bl	800cc50 <LmHandlerPackagesNotify>
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	200000b0 	.word	0x200000b0
 800c8d0:	200004f4 	.word	0x200004f4

0800c8d4 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b086      	sub	sp, #24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c8e2:	4b2c      	ldr	r3, [pc, #176]	; (800c994 <McpsIndication+0xc0>)
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	785a      	ldrb	r2, [r3, #1]
 800c8ec:	4b29      	ldr	r3, [pc, #164]	; (800c994 <McpsIndication+0xc0>)
 800c8ee:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c8f0:	4b28      	ldr	r3, [pc, #160]	; (800c994 <McpsIndication+0xc0>)
 800c8f2:	785b      	ldrb	r3, [r3, #1]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d149      	bne.n	800c98c <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	791b      	ldrb	r3, [r3, #4]
 800c8fc:	b25a      	sxtb	r2, r3
 800c8fe:	4b25      	ldr	r3, [pc, #148]	; (800c994 <McpsIndication+0xc0>)
 800c900:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c908:	b25a      	sxtb	r2, r3
 800c90a:	4b22      	ldr	r3, [pc, #136]	; (800c994 <McpsIndication+0xc0>)
 800c90c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c914:	4b1f      	ldr	r3, [pc, #124]	; (800c994 <McpsIndication+0xc0>)
 800c916:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	78da      	ldrb	r2, [r3, #3]
 800c91c:	4b1d      	ldr	r3, [pc, #116]	; (800c994 <McpsIndication+0xc0>)
 800c91e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	4a1b      	ldr	r2, [pc, #108]	; (800c994 <McpsIndication+0xc0>)
 800c926:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	78db      	ldrb	r3, [r3, #3]
 800c92c:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7b1b      	ldrb	r3, [r3, #12]
 800c932:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c93a:	4b17      	ldr	r3, [pc, #92]	; (800c998 <McpsIndication+0xc4>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c940:	f107 0210 	add.w	r2, r7, #16
 800c944:	4913      	ldr	r1, [pc, #76]	; (800c994 <McpsIndication+0xc0>)
 800c946:	4610      	mov	r0, r2
 800c948:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c94a:	4b13      	ldr	r3, [pc, #76]	; (800c998 <McpsIndication+0xc4>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c950:	2b00      	cmp	r3, #0
 800c952:	d007      	beq.n	800c964 <McpsIndication+0x90>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	7e1b      	ldrb	r3, [r3, #24]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d003      	beq.n	800c964 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c95c:	4b0e      	ldr	r3, [pc, #56]	; (800c998 <McpsIndication+0xc4>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c962:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c964:	6879      	ldr	r1, [r7, #4]
 800c966:	2001      	movs	r0, #1
 800c968:	f000 f972 	bl	800cc50 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c96c:	f107 030f 	add.w	r3, r7, #15
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff ff1b 	bl	800c7ac <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	795b      	ldrb	r3, [r3, #5]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d107      	bne.n	800c98e <McpsIndication+0xba>
 800c97e:	7bfb      	ldrb	r3, [r7, #15]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d104      	bne.n	800c98e <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800c984:	4b05      	ldr	r3, [pc, #20]	; (800c99c <McpsIndication+0xc8>)
 800c986:	2201      	movs	r2, #1
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	e000      	b.n	800c98e <McpsIndication+0xba>
        return;
 800c98c:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c98e:	3718      	adds	r7, #24
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	200000cc 	.word	0x200000cc
 800c998:	200004f4 	.word	0x200004f4
 800c99c:	20000520 	.word	0x20000520

0800c9a0 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08c      	sub	sp, #48	; 0x30
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c9a8:	4b3c      	ldr	r3, [pc, #240]	; (800ca9c <MlmeConfirm+0xfc>)
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	785a      	ldrb	r2, [r3, #1]
 800c9b2:	4b3a      	ldr	r3, [pc, #232]	; (800ca9c <MlmeConfirm+0xfc>)
 800c9b4:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c9b6:	4b3a      	ldr	r3, [pc, #232]	; (800caa0 <MlmeConfirm+0x100>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9bc:	4837      	ldr	r0, [pc, #220]	; (800ca9c <MlmeConfirm+0xfc>)
 800c9be:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c9c0:	6879      	ldr	r1, [r7, #4]
 800c9c2:	2002      	movs	r0, #2
 800c9c4:	f000 f944 	bl	800cc50 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	2b0b      	cmp	r3, #11
 800c9d0:	d85c      	bhi.n	800ca8c <MlmeConfirm+0xec>
 800c9d2:	a201      	add	r2, pc, #4	; (adr r2, 800c9d8 <MlmeConfirm+0x38>)
 800c9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d8:	0800ca09 	.word	0x0800ca09
 800c9dc:	0800ca8d 	.word	0x0800ca8d
 800c9e0:	0800ca8d 	.word	0x0800ca8d
 800c9e4:	0800ca5b 	.word	0x0800ca5b
 800c9e8:	0800ca8d 	.word	0x0800ca8d
 800c9ec:	0800ca8d 	.word	0x0800ca8d
 800c9f0:	0800ca8d 	.word	0x0800ca8d
 800c9f4:	0800ca8d 	.word	0x0800ca8d
 800c9f8:	0800ca8d 	.word	0x0800ca8d
 800c9fc:	0800ca8d 	.word	0x0800ca8d
 800ca00:	0800ca73 	.word	0x0800ca73
 800ca04:	0800ca8d 	.word	0x0800ca8d
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800ca08:	2306      	movs	r3, #6
 800ca0a:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800ca0c:	f107 030c 	add.w	r3, r7, #12
 800ca10:	4618      	mov	r0, r3
 800ca12:	f004 fd99 	bl	8011548 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	4a22      	ldr	r2, [pc, #136]	; (800caa4 <MlmeConfirm+0x104>)
 800ca1a:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800ca1c:	4822      	ldr	r0, [pc, #136]	; (800caa8 <MlmeConfirm+0x108>)
 800ca1e:	f7ff fee5 	bl	800c7ec <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	785b      	ldrb	r3, [r3, #1]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d108      	bne.n	800ca3c <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ca2a:	4b20      	ldr	r3, [pc, #128]	; (800caac <MlmeConfirm+0x10c>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800ca30:	4b1f      	ldr	r3, [pc, #124]	; (800cab0 <MlmeConfirm+0x110>)
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fe2f 	bl	800c698 <LmHandlerRequestClass>
 800ca3a:	e002      	b.n	800ca42 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800ca3c:	4b1b      	ldr	r3, [pc, #108]	; (800caac <MlmeConfirm+0x10c>)
 800ca3e:	22ff      	movs	r2, #255	; 0xff
 800ca40:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800ca42:	4b17      	ldr	r3, [pc, #92]	; (800caa0 <MlmeConfirm+0x100>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca48:	4818      	ldr	r0, [pc, #96]	; (800caac <MlmeConfirm+0x10c>)
 800ca4a:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	785b      	ldrb	r3, [r3, #1]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d11d      	bne.n	800ca90 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800ca54:	f7ff f894 	bl	800bb80 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800ca58:	e01a      	b.n	800ca90 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800ca5a:	4b16      	ldr	r3, [pc, #88]	; (800cab4 <MlmeConfirm+0x114>)
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	7a1a      	ldrb	r2, [r3, #8]
 800ca64:	4b13      	ldr	r3, [pc, #76]	; (800cab4 <MlmeConfirm+0x114>)
 800ca66:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	7a5a      	ldrb	r2, [r3, #9]
 800ca6c:	4b11      	ldr	r3, [pc, #68]	; (800cab4 <MlmeConfirm+0x114>)
 800ca6e:	74da      	strb	r2, [r3, #19]
        }
        break;
 800ca70:	e00f      	b.n	800ca92 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	785b      	ldrb	r3, [r3, #1]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d105      	bne.n	800ca86 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800ca7a:	4b0d      	ldr	r3, [pc, #52]	; (800cab0 <MlmeConfirm+0x110>)
 800ca7c:	7b1b      	ldrb	r3, [r3, #12]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7ff fdfe 	bl	800c680 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800ca84:	e005      	b.n	800ca92 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800ca86:	f7ff fddf 	bl	800c648 <LmHandlerDeviceTimeReq>
        break;
 800ca8a:	e002      	b.n	800ca92 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ca8c:	bf00      	nop
 800ca8e:	e000      	b.n	800ca92 <MlmeConfirm+0xf2>
        break;
 800ca90:	bf00      	nop
    }
}
 800ca92:	bf00      	nop
 800ca94:	3730      	adds	r7, #48	; 0x30
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	200000b0 	.word	0x200000b0
 800caa0:	200004f4 	.word	0x200004f4
 800caa4:	20000090 	.word	0x20000090
 800caa8:	200000ac 	.word	0x200000ac
 800caac:	200000a8 	.word	0x200000a8
 800cab0:	200004e0 	.word	0x200004e0
 800cab4:	200000cc 	.word	0x200000cc

0800cab8 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800cac2:	4b24      	ldr	r3, [pc, #144]	; (800cb54 <MlmeIndication+0x9c>)
 800cac4:	2200      	movs	r2, #0
 800cac6:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	785a      	ldrb	r2, [r3, #1]
 800cacc:	4b21      	ldr	r3, [pc, #132]	; (800cb54 <MlmeIndication+0x9c>)
 800cace:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	789b      	ldrb	r3, [r3, #2]
 800cad4:	b25a      	sxtb	r2, r3
 800cad6:	4b1f      	ldr	r3, [pc, #124]	; (800cb54 <MlmeIndication+0x9c>)
 800cad8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cae0:	b25a      	sxtb	r2, r3
 800cae2:	4b1c      	ldr	r3, [pc, #112]	; (800cb54 <MlmeIndication+0x9c>)
 800cae4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800caec:	4b19      	ldr	r3, [pc, #100]	; (800cb54 <MlmeIndication+0x9c>)
 800caee:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	78da      	ldrb	r2, [r3, #3]
 800caf4:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <MlmeIndication+0x9c>)
 800caf6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	4a15      	ldr	r2, [pc, #84]	; (800cb54 <MlmeIndication+0x9c>)
 800cafe:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	2b0a      	cmp	r3, #10
 800cb06:	d009      	beq.n	800cb1c <MlmeIndication+0x64>
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b0e      	cmp	r3, #14
 800cb0e:	d005      	beq.n	800cb1c <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800cb10:	4b11      	ldr	r3, [pc, #68]	; (800cb58 <MlmeIndication+0xa0>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb16:	490f      	ldr	r1, [pc, #60]	; (800cb54 <MlmeIndication+0x9c>)
 800cb18:	2000      	movs	r0, #0
 800cb1a:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	2003      	movs	r0, #3
 800cb20:	f000 f896 	bl	800cc50 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	2b0e      	cmp	r3, #14
 800cb2a:	d00a      	beq.n	800cb42 <MlmeIndication+0x8a>
 800cb2c:	2b0e      	cmp	r3, #14
 800cb2e:	dc0a      	bgt.n	800cb46 <MlmeIndication+0x8e>
 800cb30:	2b06      	cmp	r3, #6
 800cb32:	d002      	beq.n	800cb3a <MlmeIndication+0x82>
 800cb34:	2b0a      	cmp	r3, #10
 800cb36:	d008      	beq.n	800cb4a <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800cb38:	e005      	b.n	800cb46 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800cb3a:	4b08      	ldr	r3, [pc, #32]	; (800cb5c <MlmeIndication+0xa4>)
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	701a      	strb	r2, [r3, #0]
        break;
 800cb40:	e004      	b.n	800cb4c <MlmeIndication+0x94>
        break;
 800cb42:	bf00      	nop
 800cb44:	e002      	b.n	800cb4c <MlmeIndication+0x94>
        break;
 800cb46:	bf00      	nop
 800cb48:	e000      	b.n	800cb4c <MlmeIndication+0x94>
        break;
 800cb4a:	bf00      	nop
    }
}
 800cb4c:	bf00      	nop
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	200000cc 	.word	0x200000cc
 800cb58:	200004f4 	.word	0x200004f4
 800cb5c:	20000520 	.word	0x20000520

0800cb60 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	4603      	mov	r3, r0
 800cb68:	6039      	str	r1, [r7, #0]
 800cb6a:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60fb      	str	r3, [r7, #12]
    switch( id )
 800cb70:	79fb      	ldrb	r3, [r7, #7]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d103      	bne.n	800cb7e <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800cb76:	f000 fa1f 	bl	800cfb8 <LmhpCompliancePackageFactory>
 800cb7a:	60f8      	str	r0, [r7, #12]
            break;
 800cb7c:	e000      	b.n	800cb80 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800cb7e:	bf00      	nop
        }
    }
    if( package != NULL )
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d035      	beq.n	800cbf2 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800cb86:	79fb      	ldrb	r3, [r7, #7]
 800cb88:	491d      	ldr	r1, [pc, #116]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800cb90:	79fb      	ldrb	r3, [r7, #7]
 800cb92:	4a1b      	ldr	r2, [pc, #108]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb98:	4a1a      	ldr	r2, [pc, #104]	; (800cc04 <LmHandlerPackageRegister+0xa4>)
 800cb9a:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	; (800cc08 <LmHandlerPackageRegister+0xa8>)
 800cb9e:	681a      	ldr	r2, [r3, #0]
 800cba0:	79fb      	ldrb	r3, [r7, #7]
 800cba2:	4917      	ldr	r1, [pc, #92]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cba8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cbaa:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800cbac:	4b16      	ldr	r3, [pc, #88]	; (800cc08 <LmHandlerPackageRegister+0xa8>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	79fb      	ldrb	r3, [r7, #7]
 800cbb2:	4913      	ldr	r1, [pc, #76]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cbb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cbb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cbba:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800cbbc:	79fb      	ldrb	r3, [r7, #7]
 800cbbe:	4a10      	ldr	r2, [pc, #64]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc4:	4a11      	ldr	r2, [pc, #68]	; (800cc0c <LmHandlerPackageRegister+0xac>)
 800cbc6:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800cbc8:	4b0f      	ldr	r3, [pc, #60]	; (800cc08 <LmHandlerPackageRegister+0xa8>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	490c      	ldr	r1, [pc, #48]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cbd0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cbd4:	6992      	ldr	r2, [r2, #24]
 800cbd6:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cbd8:	79fb      	ldrb	r3, [r7, #7]
 800cbda:	4a09      	ldr	r2, [pc, #36]	; (800cc00 <LmHandlerPackageRegister+0xa0>)
 800cbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	4a0b      	ldr	r2, [pc, #44]	; (800cc10 <LmHandlerPackageRegister+0xb0>)
 800cbe4:	6851      	ldr	r1, [r2, #4]
 800cbe6:	4a0a      	ldr	r2, [pc, #40]	; (800cc10 <LmHandlerPackageRegister+0xb0>)
 800cbe8:	7852      	ldrb	r2, [r2, #1]
 800cbea:	6838      	ldr	r0, [r7, #0]
 800cbec:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	e001      	b.n	800cbf6 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200004cc 	.word	0x200004cc
 800cc04:	0800c381 	.word	0x0800c381
 800cc08:	200004f4 	.word	0x200004f4
 800cc0c:	0800c649 	.word	0x0800c649
 800cc10:	200000e0 	.word	0x200000e0

0800cc14 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d80e      	bhi.n	800cc42 <LmHandlerPackageIsInitialized+0x2e>
 800cc24:	79fb      	ldrb	r3, [r7, #7]
 800cc26:	4a09      	ldr	r2, [pc, #36]	; (800cc4c <LmHandlerPackageIsInitialized+0x38>)
 800cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d007      	beq.n	800cc42 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	4a05      	ldr	r2, [pc, #20]	; (800cc4c <LmHandlerPackageIsInitialized+0x38>)
 800cc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	4798      	blx	r3
 800cc3e:	4603      	mov	r3, r0
 800cc40:	e000      	b.n	800cc44 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cc42:	2300      	movs	r3, #0
    }
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	200004cc 	.word	0x200004cc

0800cc50 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	4603      	mov	r3, r0
 800cc58:	6039      	str	r1, [r7, #0]
 800cc5a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
 800cc60:	e069      	b.n	800cd36 <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800cc62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc66:	4a38      	ldr	r2, [pc, #224]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800cc68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d051      	beq.n	800cd14 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800cc70:	79fb      	ldrb	r3, [r7, #7]
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d850      	bhi.n	800cd18 <LmHandlerPackagesNotify+0xc8>
 800cc76:	a201      	add	r2, pc, #4	; (adr r2, 800cc7c <LmHandlerPackagesNotify+0x2c>)
 800cc78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc7c:	0800cc8d 	.word	0x0800cc8d
 800cc80:	0800ccaf 	.word	0x0800ccaf
 800cc84:	0800ccd1 	.word	0x0800ccd1
 800cc88:	0800ccf3 	.word	0x0800ccf3
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cc8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc90:	4a2d      	ldr	r2, [pc, #180]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800cc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d03f      	beq.n	800cd1c <LmHandlerPackagesNotify+0xcc>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca0:	4a29      	ldr	r2, [pc, #164]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800cca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	6838      	ldr	r0, [r7, #0]
 800ccaa:	4798      	blx	r3
                    }
                    break;
 800ccac:	e036      	b.n	800cd1c <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800ccae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccb2:	4a25      	ldr	r2, [pc, #148]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800ccb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d030      	beq.n	800cd20 <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800ccbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccc2:	4a21      	ldr	r2, [pc, #132]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800ccc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc8:	69db      	ldr	r3, [r3, #28]
 800ccca:	6838      	ldr	r0, [r7, #0]
 800cccc:	4798      	blx	r3
                    }
                    break;
 800ccce:	e027      	b.n	800cd20 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800ccd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccd4:	4a1c      	ldr	r2, [pc, #112]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccda:	6a1b      	ldr	r3, [r3, #32]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d021      	beq.n	800cd24 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce4:	4a18      	ldr	r2, [pc, #96]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800cce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccea:	6a1b      	ldr	r3, [r3, #32]
 800ccec:	6838      	ldr	r0, [r7, #0]
 800ccee:	4798      	blx	r3
                    }
                    break;
 800ccf0:	e018      	b.n	800cd24 <LmHandlerPackagesNotify+0xd4>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800ccf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf6:	4a14      	ldr	r2, [pc, #80]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800ccf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d012      	beq.n	800cd28 <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cd02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd06:	4a10      	ldr	r2, [pc, #64]	; (800cd48 <LmHandlerPackagesNotify+0xf8>)
 800cd08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0e:	6838      	ldr	r0, [r7, #0]
 800cd10:	4798      	blx	r3
                    }
                    break;
 800cd12:	e009      	b.n	800cd28 <LmHandlerPackagesNotify+0xd8>
                default:
                {
                    break;
                }
            }
        }
 800cd14:	bf00      	nop
 800cd16:	e008      	b.n	800cd2a <LmHandlerPackagesNotify+0xda>
                    break;
 800cd18:	bf00      	nop
 800cd1a:	e006      	b.n	800cd2a <LmHandlerPackagesNotify+0xda>
                    break;
 800cd1c:	bf00      	nop
 800cd1e:	e004      	b.n	800cd2a <LmHandlerPackagesNotify+0xda>
                    break;
 800cd20:	bf00      	nop
 800cd22:	e002      	b.n	800cd2a <LmHandlerPackagesNotify+0xda>
                    break;
 800cd24:	bf00      	nop
 800cd26:	e000      	b.n	800cd2a <LmHandlerPackagesNotify+0xda>
                    break;
 800cd28:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	3301      	adds	r3, #1
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	73fb      	strb	r3, [r7, #15]
 800cd36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	dd91      	ble.n	800cc62 <LmHandlerPackagesNotify+0x12>
    }
}
 800cd3e:	bf00      	nop
 800cd40:	bf00      	nop
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	200004cc 	.word	0x200004cc

0800cd4c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd52:	2300      	movs	r3, #0
 800cd54:	71fb      	strb	r3, [r7, #7]
 800cd56:	e018      	b.n	800cd8a <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800cd58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd5c:	4a0f      	ldr	r2, [pc, #60]	; (800cd9c <LmHandlerPackageIsTxPending+0x50>)
 800cd5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d00b      	beq.n	800cd7e <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cd66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd6a:	4a0c      	ldr	r2, [pc, #48]	; (800cd9c <LmHandlerPackageIsTxPending+0x50>)
 800cd6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	4798      	blx	r3
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e00a      	b.n	800cd94 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cd7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd82:	b2db      	uxtb	r3, r3
 800cd84:	3301      	adds	r3, #1
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	71fb      	strb	r3, [r7, #7]
 800cd8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	dde2      	ble.n	800cd58 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cd92:	2300      	movs	r3, #0
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3708      	adds	r7, #8
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}
 800cd9c:	200004cc 	.word	0x200004cc

0800cda0 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cda6:	2300      	movs	r3, #0
 800cda8:	71fb      	strb	r3, [r7, #7]
 800cdaa:	e022      	b.n	800cdf2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cdac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdb0:	4a14      	ldr	r2, [pc, #80]	; (800ce04 <LmHandlerPackagesProcess+0x64>)
 800cdb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d015      	beq.n	800cde6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cdba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdbe:	4a11      	ldr	r2, [pc, #68]	; (800ce04 <LmHandlerPackagesProcess+0x64>)
 800cdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d00d      	beq.n	800cde6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff ff21 	bl	800cc14 <LmHandlerPackageIsInitialized>
 800cdd2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d006      	beq.n	800cde6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800cdd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cddc:	4a09      	ldr	r2, [pc, #36]	; (800ce04 <LmHandlerPackagesProcess+0x64>)
 800cdde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde2:	691b      	ldr	r3, [r3, #16]
 800cde4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cde6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	3301      	adds	r3, #1
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	71fb      	strb	r3, [r7, #7]
 800cdf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	ddd8      	ble.n	800cdac <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800cdfa:	bf00      	nop
 800cdfc:	bf00      	nop
 800cdfe:	3708      	adds	r7, #8
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	200004cc 	.word	0x200004cc

0800ce08 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b083      	sub	sp, #12
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	4603      	mov	r3, r0
 800ce10:	6039      	str	r1, [r7, #0]
 800ce12:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d102      	bne.n	800ce20 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ce1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1e:	e00e      	b.n	800ce3e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d002      	beq.n	800ce2c <LmHandlerGetVersion+0x24>
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d004      	beq.n	800ce34 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800ce2a:	e007      	b.n	800ce3c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	4a06      	ldr	r2, [pc, #24]	; (800ce48 <LmHandlerGetVersion+0x40>)
 800ce30:	601a      	str	r2, [r3, #0]
            break;
 800ce32:	e003      	b.n	800ce3c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	4a05      	ldr	r2, [pc, #20]	; (800ce4c <LmHandlerGetVersion+0x44>)
 800ce38:	601a      	str	r2, [r3, #0]
            break;
 800ce3a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800ce3c:	2300      	movs	r3, #0
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bc80      	pop	{r7}
 800ce46:	4770      	bx	lr
 800ce48:	01000400 	.word	0x01000400
 800ce4c:	02010001 	.word	0x02010001

0800ce50 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800ce54:	f005 fb6a 	bl	801252c <LoRaMacDeInitialization>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d101      	bne.n	800ce62 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e001      	b.n	800ce66 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ce62:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800ce6e:	f004 faa3 	bl	80113b8 <LoRaMacHalt>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d101      	bne.n	800ce7c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e001      	b.n	800ce80 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ce7c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b08e      	sub	sp, #56	; 0x38
 800ce88:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800ce94:	f7ff ffe9 	bl	800ce6a <LmHandlerHalt>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800ce9e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d12f      	bne.n	800cf06 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cea6:	f000 f859 	bl	800cf5c <NvmDataMgmtStoreBegin>
 800ceaa:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	f113 0f02 	cmn.w	r3, #2
 800ceb2:	d103      	bne.n	800cebc <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800ceb4:	23f8      	movs	r3, #248	; 0xf8
 800ceb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ceba:	e01c      	b.n	800cef6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d104      	bne.n	800cecc <LmHandlerNvmDataStore+0x48>
 800cec2:	4b1b      	ldr	r3, [pc, #108]	; (800cf30 <LmHandlerNvmDataStore+0xac>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	695b      	ldr	r3, [r3, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d103      	bne.n	800ced4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cecc:	23ff      	movs	r3, #255	; 0xff
 800cece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ced2:	e010      	b.n	800cef6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800ced4:	2327      	movs	r3, #39	; 0x27
 800ced6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800ced8:	1d3b      	adds	r3, r7, #4
 800ceda:	4618      	mov	r0, r3
 800cedc:	f004 fb34 	bl	8011548 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800cee4:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 800cee8:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800ceea:	4b11      	ldr	r3, [pc, #68]	; (800cf30 <LmHandlerNvmDataStore+0xac>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cef4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800cef6:	f000 f847 	bl	800cf88 <NvmDataMgmtStoreEnd>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cf00:	23ff      	movs	r3, #255	; 0xff
 800cf02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800cf06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d109      	bne.n	800cf22 <LmHandlerNvmDataStore+0x9e>
 800cf0e:	4b08      	ldr	r3, [pc, #32]	; (800cf30 <LmHandlerNvmDataStore+0xac>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d004      	beq.n	800cf22 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800cf18:	4b05      	ldr	r3, [pc, #20]	; (800cf30 <LmHandlerNvmDataStore+0xac>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	2001      	movs	r0, #1
 800cf20:	4798      	blx	r3
    }

    return lmhStatus;
 800cf22:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3738      	adds	r7, #56	; 0x38
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	200004f4 	.word	0x200004f4

0800cf34 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800cf3e:	4b06      	ldr	r3, [pc, #24]	; (800cf58 <NvmDataMgmtEvent+0x24>)
 800cf40:	881a      	ldrh	r2, [r3, #0]
 800cf42:	88fb      	ldrh	r3, [r7, #6]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	4b03      	ldr	r3, [pc, #12]	; (800cf58 <NvmDataMgmtEvent+0x24>)
 800cf4a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800cf4c:	bf00      	nop
 800cf4e:	370c      	adds	r7, #12
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bc80      	pop	{r7}
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	20000618 	.word	0x20000618

0800cf5c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800cf60:	4b08      	ldr	r3, [pc, #32]	; (800cf84 <NvmDataMgmtStoreBegin+0x28>)
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d102      	bne.n	800cf6e <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800cf68:	f06f 0301 	mvn.w	r3, #1
 800cf6c:	e008      	b.n	800cf80 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800cf6e:	f004 fa07 	bl	8011380 <LoRaMacStop>
 800cf72:	4603      	mov	r3, r0
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800cf78:	f06f 0302 	mvn.w	r3, #2
 800cf7c:	e000      	b.n	800cf80 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800cf7e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	20000618 	.word	0x20000618

0800cf88 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800cf8c:	4b03      	ldr	r3, [pc, #12]	; (800cf9c <NvmDataMgmtStoreEnd+0x14>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800cf92:	f004 f9e7 	bl	8011364 <LoRaMacStart>
    return NVM_DATA_OK;
 800cf96:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	bd80      	pop	{r7, pc}
 800cf9c:	20000618 	.word	0x20000618

0800cfa0 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	2100      	movs	r1, #0
 800cfa8:	4802      	ldr	r0, [pc, #8]	; (800cfb4 <ClassBStatusReset+0x14>)
 800cfaa:	f00b f971 	bl	8018290 <memset1>
}
 800cfae:	bf00      	nop
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	20000630 	.word	0x20000630

0800cfb8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800cfb8:	b480      	push	{r7}
 800cfba:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800cfbc:	4b02      	ldr	r3, [pc, #8]	; (800cfc8 <LmhpCompliancePackageFactory+0x10>)
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bc80      	pop	{r7}
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	200000e8 	.word	0x200000e8

0800cfcc <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af02      	add	r7, sp, #8
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d018      	beq.n	800d012 <LmhpComplianceInit+0x46>
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d015      	beq.n	800d012 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800cfe6:	4a19      	ldr	r2, [pc, #100]	; (800d04c <LmhpComplianceInit+0x80>)
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800cfec:	4a18      	ldr	r2, [pc, #96]	; (800d050 <LmhpComplianceInit+0x84>)
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800cff2:	4a17      	ldr	r2, [pc, #92]	; (800d050 <LmhpComplianceInit+0x84>)
 800cff4:	79fb      	ldrb	r3, [r7, #7]
 800cff6:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800cff8:	4b15      	ldr	r3, [pc, #84]	; (800d050 <LmhpComplianceInit+0x84>)
 800cffa:	2201      	movs	r2, #1
 800cffc:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800cffe:	2300      	movs	r3, #0
 800d000:	9300      	str	r3, [sp, #0]
 800d002:	4b14      	ldr	r3, [pc, #80]	; (800d054 <LmhpComplianceInit+0x88>)
 800d004:	2200      	movs	r2, #0
 800d006:	f04f 31ff 	mov.w	r1, #4294967295
 800d00a:	4813      	ldr	r0, [pc, #76]	; (800d058 <LmhpComplianceInit+0x8c>)
 800d00c:	f00f f9ac 	bl	801c368 <UTIL_TIMER_Create>
 800d010:	e005      	b.n	800d01e <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800d012:	4b0e      	ldr	r3, [pc, #56]	; (800d04c <LmhpComplianceInit+0x80>)
 800d014:	2200      	movs	r2, #0
 800d016:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800d018:	4b0d      	ldr	r3, [pc, #52]	; (800d050 <LmhpComplianceInit+0x84>)
 800d01a:	2200      	movs	r2, #0
 800d01c:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800d01e:	4b0c      	ldr	r3, [pc, #48]	; (800d050 <LmhpComplianceInit+0x84>)
 800d020:	2200      	movs	r2, #0
 800d022:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800d024:	f7ff ffbc 	bl	800cfa0 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800d028:	4b09      	ldr	r3, [pc, #36]	; (800d050 <LmhpComplianceInit+0x84>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d02e:	4b08      	ldr	r3, [pc, #32]	; (800d050 <LmhpComplianceInit+0x84>)
 800d030:	2200      	movs	r2, #0
 800d032:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d034:	4b06      	ldr	r3, [pc, #24]	; (800d050 <LmhpComplianceInit+0x84>)
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d03c:	4b04      	ldr	r3, [pc, #16]	; (800d050 <LmhpComplianceInit+0x84>)
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800d044:	bf00      	nop
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	20000654 	.word	0x20000654
 800d050:	2000061c 	.word	0x2000061c
 800d054:	0800d941 	.word	0x0800d941
 800d058:	20000658 	.word	0x20000658

0800d05c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800d060:	4b02      	ldr	r3, [pc, #8]	; (800d06c <LmhpComplianceIsInitialized+0x10>)
 800d062:	781b      	ldrb	r3, [r3, #0]
}
 800d064:	4618      	mov	r0, r3
 800d066:	46bd      	mov	sp, r7
 800d068:	bc80      	pop	{r7}
 800d06a:	4770      	bx	lr
 800d06c:	2000061c 	.word	0x2000061c

0800d070 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800d074:	4b02      	ldr	r3, [pc, #8]	; (800d080 <LmhpComplianceIsTxPending+0x10>)
 800d076:	785b      	ldrb	r3, [r3, #1]
}
 800d078:	4618      	mov	r0, r3
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bc80      	pop	{r7}
 800d07e:	4770      	bx	lr
 800d080:	2000061c 	.word	0x2000061c

0800d084 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800d084:	b590      	push	{r4, r7, lr}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800d08a:	4b33      	ldr	r3, [pc, #204]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d08c:	785b      	ldrb	r3, [r3, #1]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d03f      	beq.n	800d112 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800d092:	f00f fb27 	bl	801c6e4 <UTIL_TIMER_GetCurrentTime>
 800d096:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d098:	4b2f      	ldr	r3, [pc, #188]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d09a:	685c      	ldr	r4, [r3, #4]
 800d09c:	f7ff f966 	bl	800c36c <LmHandlerGetDutyCycleWaitTime>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4423      	add	r3, r4
 800d0a4:	68fa      	ldr	r2, [r7, #12]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d942      	bls.n	800d130 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800d0aa:	4b2b      	ldr	r3, [pc, #172]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d0ac:	7a9b      	ldrb	r3, [r3, #10]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d03e      	beq.n	800d130 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800d0b2:	23e0      	movs	r3, #224	; 0xe0
 800d0b4:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800d0b6:	4b28      	ldr	r3, [pc, #160]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d0b8:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800d0ba:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d0bc:	4b26      	ldr	r3, [pc, #152]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d0be:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800d0c0:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d0c2:	23ff      	movs	r3, #255	; 0xff
 800d0c4:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d0c6:	4b24      	ldr	r3, [pc, #144]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d0c8:	7a19      	ldrb	r1, [r3, #8]
 800d0ca:	463b      	mov	r3, r7
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7ff f9f4 	bl	800c4bc <LmHandlerSend>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800d0d8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d0dc:	f113 0f02 	cmn.w	r3, #2
 800d0e0:	d004      	beq.n	800d0ec <LmhpComplianceProcess+0x68>
 800d0e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d0e6:	f113 0f06 	cmn.w	r3, #6
 800d0ea:	d108      	bne.n	800d0fe <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800d0ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d0f0:	481a      	ldr	r0, [pc, #104]	; (800d15c <LmhpComplianceProcess+0xd8>)
 800d0f2:	f00f fa4d 	bl	801c590 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800d0f6:	4819      	ldr	r0, [pc, #100]	; (800d15c <LmhpComplianceProcess+0xd8>)
 800d0f8:	f00f f96c 	bl	801c3d4 <UTIL_TIMER_Start>
 800d0fc:	e005      	b.n	800d10a <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800d0fe:	4b16      	ldr	r3, [pc, #88]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d100:	2200      	movs	r2, #0
 800d102:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d104:	4b14      	ldr	r3, [pc, #80]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d106:	2200      	movs	r2, #0
 800d108:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800d10a:	4a13      	ldr	r2, [pc, #76]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6053      	str	r3, [r2, #4]
 800d110:	e00e      	b.n	800d130 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d112:	4b11      	ldr	r3, [pc, #68]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d009      	beq.n	800d130 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800d11c:	4b0e      	ldr	r3, [pc, #56]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d124:	4b0c      	ldr	r3, [pc, #48]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d126:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7ff fab4 	bl	800c698 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d130:	4b09      	ldr	r3, [pc, #36]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00a      	beq.n	800d150 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d13a:	4b07      	ldr	r3, [pc, #28]	; (800d158 <LmhpComplianceProcess+0xd4>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d142:	4b07      	ldr	r3, [pc, #28]	; (800d160 <LmhpComplianceProcess+0xdc>)
 800d144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d146:	2b00      	cmp	r3, #0
 800d148:	d002      	beq.n	800d150 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d14a:	4b05      	ldr	r3, [pc, #20]	; (800d160 <LmhpComplianceProcess+0xdc>)
 800d14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14e:	4798      	blx	r3
        }
    }
}
 800d150:	bf00      	nop
 800d152:	3714      	adds	r7, #20
 800d154:	46bd      	mov	sp, r7
 800d156:	bd90      	pop	{r4, r7, pc}
 800d158:	2000061c 	.word	0x2000061c
 800d15c:	20000658 	.word	0x20000658
 800d160:	200000e8 	.word	0x200000e8

0800d164 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d164:	b5b0      	push	{r4, r5, r7, lr}
 800d166:	b0a4      	sub	sp, #144	; 0x90
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d16c:	2300      	movs	r3, #0
 800d16e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d172:	4bce      	ldr	r3, [pc, #824]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	f083 0301 	eor.w	r3, r3, #1
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	f040 83b5 	bne.w	800d8ec <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	78db      	ldrb	r3, [r3, #3]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d103      	bne.n	800d192 <LmhpComplianceOnMcpsIndication+0x2e>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	7b9b      	ldrb	r3, [r3, #14]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d005      	beq.n	800d19e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d192:	4bc6      	ldr	r3, [pc, #792]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d194:	8a1b      	ldrh	r3, [r3, #16]
 800d196:	3301      	adds	r3, #1
 800d198:	b29a      	uxth	r2, r3
 800d19a:	4bc4      	ldr	r3, [pc, #784]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d19c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	7b5b      	ldrb	r3, [r3, #13]
 800d1a2:	f083 0301 	eor.w	r3, r3, #1
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	f040 83a1 	bne.w	800d8f0 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	78db      	ldrb	r3, [r3, #3]
 800d1b2:	2be0      	cmp	r3, #224	; 0xe0
 800d1b4:	f040 839e 	bne.w	800d8f4 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d1b8:	4bbc      	ldr	r3, [pc, #752]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	689a      	ldr	r2, [r3, #8]
 800d1c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d1c6:	1c59      	adds	r1, r3, #1
 800d1c8:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d1cc:	4413      	add	r3, r2
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	2b7f      	cmp	r3, #127	; 0x7f
 800d1d2:	f200 836e 	bhi.w	800d8b2 <LmhpComplianceOnMcpsIndication+0x74e>
 800d1d6:	a201      	add	r2, pc, #4	; (adr r2, 800d1dc <LmhpComplianceOnMcpsIndication+0x78>)
 800d1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1dc:	0800d3dd 	.word	0x0800d3dd
 800d1e0:	0800d421 	.word	0x0800d421
 800d1e4:	0800d42b 	.word	0x0800d42b
 800d1e8:	0800d437 	.word	0x0800d437
 800d1ec:	0800d459 	.word	0x0800d459
 800d1f0:	0800d487 	.word	0x0800d487
 800d1f4:	0800d4b5 	.word	0x0800d4b5
 800d1f8:	0800d513 	.word	0x0800d513
 800d1fc:	0800d56b 	.word	0x0800d56b
 800d200:	0800d5d7 	.word	0x0800d5d7
 800d204:	0800d627 	.word	0x0800d627
 800d208:	0800d8b3 	.word	0x0800d8b3
 800d20c:	0800d8b3 	.word	0x0800d8b3
 800d210:	0800d8b3 	.word	0x0800d8b3
 800d214:	0800d8b3 	.word	0x0800d8b3
 800d218:	0800d8b3 	.word	0x0800d8b3
 800d21c:	0800d8b3 	.word	0x0800d8b3
 800d220:	0800d8b3 	.word	0x0800d8b3
 800d224:	0800d8b3 	.word	0x0800d8b3
 800d228:	0800d8b3 	.word	0x0800d8b3
 800d22c:	0800d8b3 	.word	0x0800d8b3
 800d230:	0800d8b3 	.word	0x0800d8b3
 800d234:	0800d8b3 	.word	0x0800d8b3
 800d238:	0800d8b3 	.word	0x0800d8b3
 800d23c:	0800d8b3 	.word	0x0800d8b3
 800d240:	0800d8b3 	.word	0x0800d8b3
 800d244:	0800d8b3 	.word	0x0800d8b3
 800d248:	0800d8b3 	.word	0x0800d8b3
 800d24c:	0800d8b3 	.word	0x0800d8b3
 800d250:	0800d8b3 	.word	0x0800d8b3
 800d254:	0800d8b3 	.word	0x0800d8b3
 800d258:	0800d8b3 	.word	0x0800d8b3
 800d25c:	0800d62f 	.word	0x0800d62f
 800d260:	0800d641 	.word	0x0800d641
 800d264:	0800d649 	.word	0x0800d649
 800d268:	0800d8b3 	.word	0x0800d8b3
 800d26c:	0800d8b3 	.word	0x0800d8b3
 800d270:	0800d8b3 	.word	0x0800d8b3
 800d274:	0800d8b3 	.word	0x0800d8b3
 800d278:	0800d8b3 	.word	0x0800d8b3
 800d27c:	0800d8b3 	.word	0x0800d8b3
 800d280:	0800d8b3 	.word	0x0800d8b3
 800d284:	0800d8b3 	.word	0x0800d8b3
 800d288:	0800d8b3 	.word	0x0800d8b3
 800d28c:	0800d8b3 	.word	0x0800d8b3
 800d290:	0800d8b3 	.word	0x0800d8b3
 800d294:	0800d8b3 	.word	0x0800d8b3
 800d298:	0800d8b3 	.word	0x0800d8b3
 800d29c:	0800d8b3 	.word	0x0800d8b3
 800d2a0:	0800d8b3 	.word	0x0800d8b3
 800d2a4:	0800d8b3 	.word	0x0800d8b3
 800d2a8:	0800d8b3 	.word	0x0800d8b3
 800d2ac:	0800d8b3 	.word	0x0800d8b3
 800d2b0:	0800d8b3 	.word	0x0800d8b3
 800d2b4:	0800d8b3 	.word	0x0800d8b3
 800d2b8:	0800d8b3 	.word	0x0800d8b3
 800d2bc:	0800d8b3 	.word	0x0800d8b3
 800d2c0:	0800d8b3 	.word	0x0800d8b3
 800d2c4:	0800d8b3 	.word	0x0800d8b3
 800d2c8:	0800d8b3 	.word	0x0800d8b3
 800d2cc:	0800d8b3 	.word	0x0800d8b3
 800d2d0:	0800d8b3 	.word	0x0800d8b3
 800d2d4:	0800d8b3 	.word	0x0800d8b3
 800d2d8:	0800d8b3 	.word	0x0800d8b3
 800d2dc:	0800d8b3 	.word	0x0800d8b3
 800d2e0:	0800d8b3 	.word	0x0800d8b3
 800d2e4:	0800d8b3 	.word	0x0800d8b3
 800d2e8:	0800d8b3 	.word	0x0800d8b3
 800d2ec:	0800d8b3 	.word	0x0800d8b3
 800d2f0:	0800d8b3 	.word	0x0800d8b3
 800d2f4:	0800d8b3 	.word	0x0800d8b3
 800d2f8:	0800d8b3 	.word	0x0800d8b3
 800d2fc:	0800d8b3 	.word	0x0800d8b3
 800d300:	0800d8b3 	.word	0x0800d8b3
 800d304:	0800d8b3 	.word	0x0800d8b3
 800d308:	0800d8b3 	.word	0x0800d8b3
 800d30c:	0800d8b3 	.word	0x0800d8b3
 800d310:	0800d8b3 	.word	0x0800d8b3
 800d314:	0800d8b3 	.word	0x0800d8b3
 800d318:	0800d8b3 	.word	0x0800d8b3
 800d31c:	0800d8b3 	.word	0x0800d8b3
 800d320:	0800d8b3 	.word	0x0800d8b3
 800d324:	0800d8b3 	.word	0x0800d8b3
 800d328:	0800d8b3 	.word	0x0800d8b3
 800d32c:	0800d8b3 	.word	0x0800d8b3
 800d330:	0800d8b3 	.word	0x0800d8b3
 800d334:	0800d8b3 	.word	0x0800d8b3
 800d338:	0800d8b3 	.word	0x0800d8b3
 800d33c:	0800d8b3 	.word	0x0800d8b3
 800d340:	0800d8b3 	.word	0x0800d8b3
 800d344:	0800d8b3 	.word	0x0800d8b3
 800d348:	0800d8b3 	.word	0x0800d8b3
 800d34c:	0800d8b3 	.word	0x0800d8b3
 800d350:	0800d8b3 	.word	0x0800d8b3
 800d354:	0800d8b3 	.word	0x0800d8b3
 800d358:	0800d8b3 	.word	0x0800d8b3
 800d35c:	0800d8b3 	.word	0x0800d8b3
 800d360:	0800d8b3 	.word	0x0800d8b3
 800d364:	0800d8b3 	.word	0x0800d8b3
 800d368:	0800d8b3 	.word	0x0800d8b3
 800d36c:	0800d8b3 	.word	0x0800d8b3
 800d370:	0800d8b3 	.word	0x0800d8b3
 800d374:	0800d8b3 	.word	0x0800d8b3
 800d378:	0800d8b3 	.word	0x0800d8b3
 800d37c:	0800d8b3 	.word	0x0800d8b3
 800d380:	0800d8b3 	.word	0x0800d8b3
 800d384:	0800d8b3 	.word	0x0800d8b3
 800d388:	0800d8b3 	.word	0x0800d8b3
 800d38c:	0800d8b3 	.word	0x0800d8b3
 800d390:	0800d8b3 	.word	0x0800d8b3
 800d394:	0800d8b3 	.word	0x0800d8b3
 800d398:	0800d8b3 	.word	0x0800d8b3
 800d39c:	0800d8b3 	.word	0x0800d8b3
 800d3a0:	0800d8b3 	.word	0x0800d8b3
 800d3a4:	0800d8b3 	.word	0x0800d8b3
 800d3a8:	0800d8b3 	.word	0x0800d8b3
 800d3ac:	0800d8b3 	.word	0x0800d8b3
 800d3b0:	0800d8b3 	.word	0x0800d8b3
 800d3b4:	0800d8b3 	.word	0x0800d8b3
 800d3b8:	0800d8b3 	.word	0x0800d8b3
 800d3bc:	0800d8b3 	.word	0x0800d8b3
 800d3c0:	0800d8b3 	.word	0x0800d8b3
 800d3c4:	0800d8b3 	.word	0x0800d8b3
 800d3c8:	0800d8b3 	.word	0x0800d8b3
 800d3cc:	0800d8b3 	.word	0x0800d8b3
 800d3d0:	0800d67b 	.word	0x0800d67b
 800d3d4:	0800d72b 	.word	0x0800d72b
 800d3d8:	0800d75d 	.word	0x0800d75d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d3dc:	4b33      	ldr	r3, [pc, #204]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d3de:	68da      	ldr	r2, [r3, #12]
 800d3e0:	4b32      	ldr	r3, [pc, #200]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d3e2:	7a9b      	ldrb	r3, [r3, #10]
 800d3e4:	1c59      	adds	r1, r3, #1
 800d3e6:	b2c8      	uxtb	r0, r1
 800d3e8:	4930      	ldr	r1, [pc, #192]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d3ea:	7288      	strb	r0, [r1, #10]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d3f2:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d3f4:	68da      	ldr	r2, [r3, #12]
 800d3f6:	4b2d      	ldr	r3, [pc, #180]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d3f8:	7a9b      	ldrb	r3, [r3, #10]
 800d3fa:	1c59      	adds	r1, r3, #1
 800d3fc:	b2c8      	uxtb	r0, r1
 800d3fe:	492b      	ldr	r1, [pc, #172]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d400:	7288      	strb	r0, [r1, #10]
 800d402:	4413      	add	r3, r2
 800d404:	2206      	movs	r2, #6
 800d406:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d408:	4b28      	ldr	r3, [pc, #160]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d40a:	68da      	ldr	r2, [r3, #12]
 800d40c:	4b27      	ldr	r3, [pc, #156]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d40e:	7a9b      	ldrb	r3, [r3, #10]
 800d410:	1c59      	adds	r1, r3, #1
 800d412:	b2c8      	uxtb	r0, r1
 800d414:	4925      	ldr	r1, [pc, #148]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d416:	7288      	strb	r0, [r1, #10]
 800d418:	4413      	add	r3, r2
 800d41a:	2201      	movs	r2, #1
 800d41c:	701a      	strb	r2, [r3, #0]
        break;
 800d41e:	e251      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d420:	4b22      	ldr	r3, [pc, #136]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800d428:	e24c      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d42a:	4b21      	ldr	r3, [pc, #132]	; (800d4b0 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d42c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d42e:	2101      	movs	r1, #1
 800d430:	2002      	movs	r0, #2
 800d432:	4798      	blx	r3
        break;
 800d434:	e246      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689a      	ldr	r2, [r3, #8]
 800d43a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d43e:	1c59      	adds	r1, r3, #1
 800d440:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d444:	4413      	add	r3, r2
 800d446:	781a      	ldrb	r2, [r3, #0]
 800d448:	4b18      	ldr	r3, [pc, #96]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d44a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d44e:	4b17      	ldr	r3, [pc, #92]	; (800d4ac <LmhpComplianceOnMcpsIndication+0x348>)
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800d456:	e235      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d458:	2304      	movs	r3, #4
 800d45a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	689a      	ldr	r2, [r3, #8]
 800d460:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d464:	1c59      	adds	r1, r3, #1
 800d466:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d46a:	4413      	add	r3, r2
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	bf14      	ite	ne
 800d472:	2301      	movne	r3, #1
 800d474:	2300      	moveq	r3, #0
 800d476:	b2db      	uxtb	r3, r3
 800d478:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d47a:	f107 030c 	add.w	r3, r7, #12
 800d47e:	4618      	mov	r0, r3
 800d480:	f004 fa08 	bl	8011894 <LoRaMacMibSetRequestConfirm>
        break;
 800d484:	e21e      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	689a      	ldr	r2, [r3, #8]
 800d48a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d48e:	1c59      	adds	r1, r3, #1
 800d490:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d494:	4413      	add	r3, r2
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	bf14      	ite	ne
 800d49c:	2301      	movne	r3, #1
 800d49e:	2300      	moveq	r3, #0
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f005 f824 	bl	80124f0 <LoRaMacTestSetDutyCycleOn>
        break;
 800d4a8:	e20c      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
 800d4aa:	bf00      	nop
 800d4ac:	2000061c 	.word	0x2000061c
 800d4b0:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d4b4:	4ba5      	ldr	r3, [pc, #660]	; (800d74c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d4b6:	f107 040c 	add.w	r4, r7, #12
 800d4ba:	461d      	mov	r5, r3
 800d4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d4c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d4c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d4d4:	1c59      	adds	r1, r3, #1
 800d4d6:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d4da:	4413      	add	r3, r2
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d4e2:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d4e6:	2b0a      	cmp	r3, #10
 800d4e8:	f200 81e5 	bhi.w	800d8b6 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d4ec:	4b98      	ldr	r3, [pc, #608]	; (800d750 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 81df 	beq.w	800d8b6 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d4f8:	4b95      	ldr	r3, [pc, #596]	; (800d750 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	3390      	adds	r3, #144	; 0x90
 800d506:	443b      	add	r3, r7
 800d508:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d50c:	4618      	mov	r0, r3
 800d50e:	4790      	blx	r2
            }
        }
        break;
 800d510:	e1d1      	b.n	800d8b6 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	689a      	ldr	r2, [r3, #8]
 800d516:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d51a:	1c59      	adds	r1, r3, #1
 800d51c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d520:	4413      	add	r3, r2
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d528:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	d004      	beq.n	800d53a <LmhpComplianceOnMcpsIndication+0x3d6>
 800d530:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d534:	2b02      	cmp	r3, #2
 800d536:	f040 81c0 	bne.w	800d8ba <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d53a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800d53e:	2b01      	cmp	r3, #1
 800d540:	bf14      	ite	ne
 800d542:	2301      	movne	r3, #1
 800d544:	2300      	moveq	r3, #0
 800d546:	b2db      	uxtb	r3, r3
 800d548:	461a      	mov	r2, r3
 800d54a:	4b82      	ldr	r3, [pc, #520]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d54c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d54e:	4b80      	ldr	r3, [pc, #512]	; (800d750 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	689b      	ldr	r3, [r3, #8]
 800d554:	2b00      	cmp	r3, #0
 800d556:	f000 81b0 	beq.w	800d8ba <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d55a:	4b7d      	ldr	r3, [pc, #500]	; (800d750 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	4a7c      	ldr	r2, [pc, #496]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d562:	7a12      	ldrb	r2, [r2, #8]
 800d564:	4610      	mov	r0, r2
 800d566:	4798      	blx	r3
            }
        }
        break;
 800d568:	e1a7      	b.n	800d8ba <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d56a:	4b7a      	ldr	r3, [pc, #488]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d56c:	68da      	ldr	r2, [r3, #12]
 800d56e:	4b79      	ldr	r3, [pc, #484]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d570:	7a9b      	ldrb	r3, [r3, #10]
 800d572:	1c59      	adds	r1, r3, #1
 800d574:	b2c8      	uxtb	r0, r1
 800d576:	4977      	ldr	r1, [pc, #476]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d578:	7288      	strb	r0, [r1, #10]
 800d57a:	4413      	add	r3, r2
 800d57c:	2208      	movs	r2, #8
 800d57e:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d580:	2301      	movs	r3, #1
 800d582:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800d586:	e019      	b.n	800d5bc <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	689a      	ldr	r2, [r3, #8]
 800d58c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d590:	1c59      	adds	r1, r3, #1
 800d592:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d596:	4413      	add	r3, r2
 800d598:	781a      	ldrb	r2, [r3, #0]
 800d59a:	4b6e      	ldr	r3, [pc, #440]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d59c:	68d9      	ldr	r1, [r3, #12]
 800d59e:	4b6d      	ldr	r3, [pc, #436]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5a0:	7a9b      	ldrb	r3, [r3, #10]
 800d5a2:	1c58      	adds	r0, r3, #1
 800d5a4:	b2c4      	uxtb	r4, r0
 800d5a6:	486b      	ldr	r0, [pc, #428]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5a8:	7284      	strb	r4, [r0, #10]
 800d5aa:	440b      	add	r3, r1
 800d5ac:	3201      	adds	r2, #1
 800d5ae:	b2d2      	uxtb	r2, r2
 800d5b0:	701a      	strb	r2, [r3, #0]
             i++ )
 800d5b2:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d5bc:	4b65      	ldr	r3, [pc, #404]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5be:	7a5a      	ldrb	r2, [r3, #9]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	7b1b      	ldrb	r3, [r3, #12]
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	bf28      	it	cs
 800d5c8:	4613      	movcs	r3, r2
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d3d9      	bcc.n	800d588 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d5d4:	e176      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d5d6:	4b5f      	ldr	r3, [pc, #380]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5d8:	68da      	ldr	r2, [r3, #12]
 800d5da:	4b5e      	ldr	r3, [pc, #376]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5dc:	7a9b      	ldrb	r3, [r3, #10]
 800d5de:	1c59      	adds	r1, r3, #1
 800d5e0:	b2c8      	uxtb	r0, r1
 800d5e2:	495c      	ldr	r1, [pc, #368]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5e4:	7288      	strb	r0, [r1, #10]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	2209      	movs	r2, #9
 800d5ea:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d5ec:	4b59      	ldr	r3, [pc, #356]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5ee:	8a18      	ldrh	r0, [r3, #16]
 800d5f0:	4b58      	ldr	r3, [pc, #352]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5f2:	68da      	ldr	r2, [r3, #12]
 800d5f4:	4b57      	ldr	r3, [pc, #348]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5f6:	7a9b      	ldrb	r3, [r3, #10]
 800d5f8:	1c59      	adds	r1, r3, #1
 800d5fa:	b2cc      	uxtb	r4, r1
 800d5fc:	4955      	ldr	r1, [pc, #340]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d5fe:	728c      	strb	r4, [r1, #10]
 800d600:	4413      	add	r3, r2
 800d602:	b2c2      	uxtb	r2, r0
 800d604:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d606:	4b53      	ldr	r3, [pc, #332]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d608:	8a1b      	ldrh	r3, [r3, #16]
 800d60a:	0a1b      	lsrs	r3, r3, #8
 800d60c:	b298      	uxth	r0, r3
 800d60e:	4b51      	ldr	r3, [pc, #324]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d610:	68da      	ldr	r2, [r3, #12]
 800d612:	4b50      	ldr	r3, [pc, #320]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d614:	7a9b      	ldrb	r3, [r3, #10]
 800d616:	1c59      	adds	r1, r3, #1
 800d618:	b2cc      	uxtb	r4, r1
 800d61a:	494e      	ldr	r1, [pc, #312]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d61c:	728c      	strb	r4, [r1, #10]
 800d61e:	4413      	add	r3, r2
 800d620:	b2c2      	uxtb	r2, r0
 800d622:	701a      	strb	r2, [r3, #0]
        break;
 800d624:	e14e      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800d626:	4b4b      	ldr	r3, [pc, #300]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d628:	2200      	movs	r2, #0
 800d62a:	821a      	strh	r2, [r3, #16]
        break;
 800d62c:	e14a      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800d62e:	2304      	movs	r3, #4
 800d630:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800d634:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d638:	4618      	mov	r0, r3
 800d63a:	f004 fc9b 	bl	8011f74 <LoRaMacMlmeRequest>
        break;
 800d63e:	e141      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800d640:	4b45      	ldr	r3, [pc, #276]	; (800d758 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d644:	4798      	blx	r3
        break;
 800d646:	e13d      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	689a      	ldr	r2, [r3, #8]
 800d64c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d650:	1c59      	adds	r1, r3, #1
 800d652:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d656:	4413      	add	r3, r2
 800d658:	781a      	ldrb	r2, [r3, #0]
 800d65a:	4b3e      	ldr	r3, [pc, #248]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d65c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d65e:	4b3c      	ldr	r3, [pc, #240]	; (800d750 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68db      	ldr	r3, [r3, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 812a 	beq.w	800d8be <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d66a:	4b39      	ldr	r3, [pc, #228]	; (800d750 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68db      	ldr	r3, [r3, #12]
 800d670:	4a38      	ldr	r2, [pc, #224]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d672:	7d52      	ldrb	r2, [r2, #21]
 800d674:	4610      	mov	r0, r2
 800d676:	4798      	blx	r3
        }
        break;
 800d678:	e121      	b.n	800d8be <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	7b1b      	ldrb	r3, [r3, #12]
 800d67e:	2b07      	cmp	r3, #7
 800d680:	f040 811f 	bne.w	800d8c2 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800d684:	2305      	movs	r3, #5
 800d686:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689a      	ldr	r2, [r3, #8]
 800d68e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d692:	4413      	add	r3, r2
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	b21a      	sxth	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6899      	ldr	r1, [r3, #8]
 800d69c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	440b      	add	r3, r1
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	021b      	lsls	r3, r3, #8
 800d6a8:	b21b      	sxth	r3, r3
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	b21b      	sxth	r3, r3
 800d6ae:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800d6b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800d6b4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6b8:	3302      	adds	r3, #2
 800d6ba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	689a      	ldr	r2, [r3, #8]
 800d6c2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6c6:	4413      	add	r3, r2
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689a      	ldr	r2, [r3, #8]
 800d6d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	4413      	add	r3, r2
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	021b      	lsls	r3, r3, #8
 800d6dc:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6899      	ldr	r1, [r3, #8]
 800d6e4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d6e8:	3302      	adds	r3, #2
 800d6ea:	440b      	add	r3, r1
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d6f4:	2364      	movs	r3, #100	; 0x64
 800d6f6:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800d6fa:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800d6fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d700:	3303      	adds	r3, #3
 800d702:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	689a      	ldr	r2, [r3, #8]
 800d70a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800d70e:	1c59      	adds	r1, r3, #1
 800d710:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800d714:	4413      	add	r3, r2
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	b25b      	sxtb	r3, r3
 800d71a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800d71e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d722:	4618      	mov	r0, r3
 800d724:	f004 fc26 	bl	8011f74 <LoRaMacMlmeRequest>
        }
        break;
 800d728:	e0cb      	b.n	800d8c2 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d72a:	2339      	movs	r3, #57	; 0x39
 800d72c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800d730:	2300      	movs	r3, #0
 800d732:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d736:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d73a:	4618      	mov	r0, r3
 800d73c:	f004 f8aa 	bl	8011894 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800d740:	4b04      	ldr	r3, [pc, #16]	; (800d754 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d742:	2201      	movs	r2, #1
 800d744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800d748:	e0bc      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
 800d74a:	bf00      	nop
 800d74c:	0801d640 	.word	0x0801d640
 800d750:	20000654 	.word	0x20000654
 800d754:	2000061c 	.word	0x2000061c
 800d758:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800d75c:	232a      	movs	r3, #42	; 0x2a
 800d75e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800d760:	f107 030c 	add.w	r3, r7, #12
 800d764:	4618      	mov	r0, r3
 800d766:	f003 feef 	bl	8011548 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d772:	4b62      	ldr	r3, [pc, #392]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	4b61      	ldr	r3, [pc, #388]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d778:	7a9b      	ldrb	r3, [r3, #10]
 800d77a:	1c59      	adds	r1, r3, #1
 800d77c:	b2c8      	uxtb	r0, r1
 800d77e:	495f      	ldr	r1, [pc, #380]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d780:	7288      	strb	r0, [r1, #10]
 800d782:	4413      	add	r3, r2
 800d784:	227f      	movs	r2, #127	; 0x7f
 800d786:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d788:	4b5d      	ldr	r3, [pc, #372]	; (800d900 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	4b5b      	ldr	r3, [pc, #364]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d78e:	68d9      	ldr	r1, [r3, #12]
 800d790:	4b5a      	ldr	r3, [pc, #360]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d792:	7a9b      	ldrb	r3, [r3, #10]
 800d794:	1c58      	adds	r0, r3, #1
 800d796:	b2c4      	uxtb	r4, r0
 800d798:	4858      	ldr	r0, [pc, #352]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d79a:	7284      	strb	r4, [r0, #10]
 800d79c:	440b      	add	r3, r1
 800d79e:	78d2      	ldrb	r2, [r2, #3]
 800d7a0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d7a2:	4b57      	ldr	r3, [pc, #348]	; (800d900 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	4b55      	ldr	r3, [pc, #340]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7a8:	68d9      	ldr	r1, [r3, #12]
 800d7aa:	4b54      	ldr	r3, [pc, #336]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7ac:	7a9b      	ldrb	r3, [r3, #10]
 800d7ae:	1c58      	adds	r0, r3, #1
 800d7b0:	b2c4      	uxtb	r4, r0
 800d7b2:	4852      	ldr	r0, [pc, #328]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7b4:	7284      	strb	r4, [r0, #10]
 800d7b6:	440b      	add	r3, r1
 800d7b8:	7892      	ldrb	r2, [r2, #2]
 800d7ba:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d7bc:	4b50      	ldr	r3, [pc, #320]	; (800d900 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	4b4e      	ldr	r3, [pc, #312]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7c2:	68d9      	ldr	r1, [r3, #12]
 800d7c4:	4b4d      	ldr	r3, [pc, #308]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7c6:	7a9b      	ldrb	r3, [r3, #10]
 800d7c8:	1c58      	adds	r0, r3, #1
 800d7ca:	b2c4      	uxtb	r4, r0
 800d7cc:	484b      	ldr	r0, [pc, #300]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7ce:	7284      	strb	r4, [r0, #10]
 800d7d0:	440b      	add	r3, r1
 800d7d2:	7852      	ldrb	r2, [r2, #1]
 800d7d4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d7d6:	4b4a      	ldr	r3, [pc, #296]	; (800d900 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d7d8:	681a      	ldr	r2, [r3, #0]
 800d7da:	4b48      	ldr	r3, [pc, #288]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7dc:	68d9      	ldr	r1, [r3, #12]
 800d7de:	4b47      	ldr	r3, [pc, #284]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7e0:	7a9b      	ldrb	r3, [r3, #10]
 800d7e2:	1c58      	adds	r0, r3, #1
 800d7e4:	b2c4      	uxtb	r4, r0
 800d7e6:	4845      	ldr	r0, [pc, #276]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7e8:	7284      	strb	r4, [r0, #10]
 800d7ea:	440b      	add	r3, r1
 800d7ec:	7812      	ldrb	r2, [r2, #0]
 800d7ee:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d7f0:	4b42      	ldr	r3, [pc, #264]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7f2:	68da      	ldr	r2, [r3, #12]
 800d7f4:	4b41      	ldr	r3, [pc, #260]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7f6:	7a9b      	ldrb	r3, [r3, #10]
 800d7f8:	1c59      	adds	r1, r3, #1
 800d7fa:	b2c8      	uxtb	r0, r1
 800d7fc:	493f      	ldr	r1, [pc, #252]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7fe:	7288      	strb	r0, [r1, #10]
 800d800:	4413      	add	r3, r2
 800d802:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800d806:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d808:	4b3c      	ldr	r3, [pc, #240]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	4b3b      	ldr	r3, [pc, #236]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d80e:	7a9b      	ldrb	r3, [r3, #10]
 800d810:	1c59      	adds	r1, r3, #1
 800d812:	b2c8      	uxtb	r0, r1
 800d814:	4939      	ldr	r1, [pc, #228]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d816:	7288      	strb	r0, [r1, #10]
 800d818:	4413      	add	r3, r2
 800d81a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800d81e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d820:	4b36      	ldr	r3, [pc, #216]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d822:	68da      	ldr	r2, [r3, #12]
 800d824:	4b35      	ldr	r3, [pc, #212]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d826:	7a9b      	ldrb	r3, [r3, #10]
 800d828:	1c59      	adds	r1, r3, #1
 800d82a:	b2c8      	uxtb	r0, r1
 800d82c:	4933      	ldr	r1, [pc, #204]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d82e:	7288      	strb	r0, [r1, #10]
 800d830:	4413      	add	r3, r2
 800d832:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800d836:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d838:	4b30      	ldr	r3, [pc, #192]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d83a:	68da      	ldr	r2, [r3, #12]
 800d83c:	4b2f      	ldr	r3, [pc, #188]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d83e:	7a9b      	ldrb	r3, [r3, #10]
 800d840:	1c59      	adds	r1, r3, #1
 800d842:	b2c8      	uxtb	r0, r1
 800d844:	492d      	ldr	r1, [pc, #180]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d846:	7288      	strb	r0, [r1, #10]
 800d848:	4413      	add	r3, r2
 800d84a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800d84e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d850:	4b2a      	ldr	r3, [pc, #168]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	4b29      	ldr	r3, [pc, #164]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d856:	7a9b      	ldrb	r3, [r3, #10]
 800d858:	1c59      	adds	r1, r3, #1
 800d85a:	b2c8      	uxtb	r0, r1
 800d85c:	4927      	ldr	r1, [pc, #156]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d85e:	7288      	strb	r0, [r1, #10]
 800d860:	4413      	add	r3, r2
 800d862:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d866:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d868:	4b24      	ldr	r3, [pc, #144]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d86a:	68da      	ldr	r2, [r3, #12]
 800d86c:	4b23      	ldr	r3, [pc, #140]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d86e:	7a9b      	ldrb	r3, [r3, #10]
 800d870:	1c59      	adds	r1, r3, #1
 800d872:	b2c8      	uxtb	r0, r1
 800d874:	4921      	ldr	r1, [pc, #132]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d876:	7288      	strb	r0, [r1, #10]
 800d878:	4413      	add	r3, r2
 800d87a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d87e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d880:	4b1e      	ldr	r3, [pc, #120]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d882:	68da      	ldr	r2, [r3, #12]
 800d884:	4b1d      	ldr	r3, [pc, #116]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d886:	7a9b      	ldrb	r3, [r3, #10]
 800d888:	1c59      	adds	r1, r3, #1
 800d88a:	b2c8      	uxtb	r0, r1
 800d88c:	491b      	ldr	r1, [pc, #108]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d88e:	7288      	strb	r0, [r1, #10]
 800d890:	4413      	add	r3, r2
 800d892:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800d896:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d898:	4b18      	ldr	r3, [pc, #96]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d89a:	68da      	ldr	r2, [r3, #12]
 800d89c:	4b17      	ldr	r3, [pc, #92]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d89e:	7a9b      	ldrb	r3, [r3, #10]
 800d8a0:	1c59      	adds	r1, r3, #1
 800d8a2:	b2c8      	uxtb	r0, r1
 800d8a4:	4915      	ldr	r1, [pc, #84]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d8a6:	7288      	strb	r0, [r1, #10]
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d8ae:	701a      	strb	r2, [r3, #0]
        break;
 800d8b0:	e008      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800d8b2:	bf00      	nop
 800d8b4:	e006      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d8b6:	bf00      	nop
 800d8b8:	e004      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d8ba:	bf00      	nop
 800d8bc:	e002      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d8be:	bf00      	nop
 800d8c0:	e000      	b.n	800d8c4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d8c2:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d8c4:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d8c6:	7a9b      	ldrb	r3, [r3, #10]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d008      	beq.n	800d8de <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800d8cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d8d0:	480c      	ldr	r0, [pc, #48]	; (800d904 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d8d2:	f00e fe5d 	bl	801c590 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800d8d6:	480b      	ldr	r0, [pc, #44]	; (800d904 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d8d8:	f00e fd7c 	bl	801c3d4 <UTIL_TIMER_Start>
 800d8dc:	e00b      	b.n	800d8f6 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800d8de:	4809      	ldr	r0, [pc, #36]	; (800d904 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d8e0:	f00e fde6 	bl	801c4b0 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d8e4:	4b05      	ldr	r3, [pc, #20]	; (800d8fc <LmhpComplianceOnMcpsIndication+0x798>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	705a      	strb	r2, [r3, #1]
 800d8ea:	e004      	b.n	800d8f6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d8ec:	bf00      	nop
 800d8ee:	e002      	b.n	800d8f6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d8f0:	bf00      	nop
 800d8f2:	e000      	b.n	800d8f6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d8f4:	bf00      	nop
    }
}
 800d8f6:	3790      	adds	r7, #144	; 0x90
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bdb0      	pop	{r4, r5, r7, pc}
 800d8fc:	2000061c 	.word	0x2000061c
 800d900:	20000654 	.word	0x20000654
 800d904:	20000658 	.word	0x20000658

0800d908 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800d910:	bf00      	nop
    }
}
 800d912:	bf00      	nop
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	bc80      	pop	{r7}
 800d91a:	4770      	bx	lr

0800d91c <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d924:	4b05      	ldr	r3, [pc, #20]	; (800d93c <LmhpComplianceOnMlmeIndication+0x20>)
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	f083 0301 	eor.w	r3, r3, #1
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b00      	cmp	r3, #0
    {
        return;
 800d930:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	bc80      	pop	{r7}
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	2000061c 	.word	0x2000061c

0800d940 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800d948:	4b04      	ldr	r3, [pc, #16]	; (800d95c <OnProcessTimer+0x1c>)
 800d94a:	2201      	movs	r2, #1
 800d94c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800d94e:	4b04      	ldr	r3, [pc, #16]	; (800d960 <OnProcessTimer+0x20>)
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	4798      	blx	r3
}
 800d954:	bf00      	nop
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	2000061c 	.word	0x2000061c
 800d960:	200000e8 	.word	0x200000e8

0800d964 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d96a:	f00e febb 	bl	801c6e4 <UTIL_TIMER_GetCurrentTime>
 800d96e:	4603      	mov	r3, r0
 800d970:	4a16      	ldr	r2, [pc, #88]	; (800d9cc <OnRadioTxDone+0x68>)
 800d972:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d974:	4c16      	ldr	r4, [pc, #88]	; (800d9d0 <OnRadioTxDone+0x6c>)
 800d976:	463b      	mov	r3, r7
 800d978:	4618      	mov	r0, r3
 800d97a:	f00e f82d 	bl	801b9d8 <SysTimeGet>
 800d97e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800d982:	463a      	mov	r2, r7
 800d984:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d988:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d98c:	4a11      	ldr	r2, [pc, #68]	; (800d9d4 <OnRadioTxDone+0x70>)
 800d98e:	7813      	ldrb	r3, [r2, #0]
 800d990:	f043 0320 	orr.w	r3, r3, #32
 800d994:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d996:	4b0e      	ldr	r3, [pc, #56]	; (800d9d0 <OnRadioTxDone+0x6c>)
 800d998:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d00a      	beq.n	800d9b6 <OnRadioTxDone+0x52>
 800d9a0:	4b0b      	ldr	r3, [pc, #44]	; (800d9d0 <OnRadioTxDone+0x6c>)
 800d9a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9a6:	691b      	ldr	r3, [r3, #16]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d004      	beq.n	800d9b6 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9ac:	4b08      	ldr	r3, [pc, #32]	; (800d9d0 <OnRadioTxDone+0x6c>)
 800d9ae:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800d9b2:	691b      	ldr	r3, [r3, #16]
 800d9b4:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d9b6:	4b08      	ldr	r3, [pc, #32]	; (800d9d8 <OnRadioTxDone+0x74>)
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	2100      	movs	r1, #0
 800d9bc:	2002      	movs	r0, #2
 800d9be:	f00e ff81 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d9c2:	bf00      	nop
 800d9c4:	370c      	adds	r7, #12
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd90      	pop	{r4, r7, pc}
 800d9ca:	bf00      	nop
 800d9cc:	2000173c 	.word	0x2000173c
 800d9d0:	20000670 	.word	0x20000670
 800d9d4:	20001738 	.word	0x20001738
 800d9d8:	0801d66c 	.word	0x0801d66c

0800d9dc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	817b      	strh	r3, [r7, #10]
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	813b      	strh	r3, [r7, #8]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d9f6:	f00e fe75 	bl	801c6e4 <UTIL_TIMER_GetCurrentTime>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	4a18      	ldr	r2, [pc, #96]	; (800da60 <OnRadioRxDone+0x84>)
 800d9fe:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800da00:	4a17      	ldr	r2, [pc, #92]	; (800da60 <OnRadioRxDone+0x84>)
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800da06:	4a16      	ldr	r2, [pc, #88]	; (800da60 <OnRadioRxDone+0x84>)
 800da08:	897b      	ldrh	r3, [r7, #10]
 800da0a:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800da0c:	4a14      	ldr	r2, [pc, #80]	; (800da60 <OnRadioRxDone+0x84>)
 800da0e:	893b      	ldrh	r3, [r7, #8]
 800da10:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800da12:	4a13      	ldr	r2, [pc, #76]	; (800da60 <OnRadioRxDone+0x84>)
 800da14:	79fb      	ldrb	r3, [r7, #7]
 800da16:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800da18:	4a12      	ldr	r2, [pc, #72]	; (800da64 <OnRadioRxDone+0x88>)
 800da1a:	7813      	ldrb	r3, [r2, #0]
 800da1c:	f043 0310 	orr.w	r3, r3, #16
 800da20:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800da22:	4a10      	ldr	r2, [pc, #64]	; (800da64 <OnRadioRxDone+0x88>)
 800da24:	7813      	ldrb	r3, [r2, #0]
 800da26:	f043 0301 	orr.w	r3, r3, #1
 800da2a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800da2c:	4b0e      	ldr	r3, [pc, #56]	; (800da68 <OnRadioRxDone+0x8c>)
 800da2e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da32:	2b00      	cmp	r3, #0
 800da34:	d00a      	beq.n	800da4c <OnRadioRxDone+0x70>
 800da36:	4b0c      	ldr	r3, [pc, #48]	; (800da68 <OnRadioRxDone+0x8c>)
 800da38:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da3c:	691b      	ldr	r3, [r3, #16]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d004      	beq.n	800da4c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800da42:	4b09      	ldr	r3, [pc, #36]	; (800da68 <OnRadioRxDone+0x8c>)
 800da44:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800da4c:	4b07      	ldr	r3, [pc, #28]	; (800da6c <OnRadioRxDone+0x90>)
 800da4e:	2201      	movs	r2, #1
 800da50:	2100      	movs	r1, #0
 800da52:	2002      	movs	r0, #2
 800da54:	f00e ff36 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800da58:	bf00      	nop
 800da5a:	3710      	adds	r7, #16
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	20001740 	.word	0x20001740
 800da64:	20001738 	.word	0x20001738
 800da68:	20000670 	.word	0x20000670
 800da6c:	0801d67c 	.word	0x0801d67c

0800da70 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800da74:	4a0e      	ldr	r2, [pc, #56]	; (800dab0 <OnRadioTxTimeout+0x40>)
 800da76:	7813      	ldrb	r3, [r2, #0]
 800da78:	f043 0308 	orr.w	r3, r3, #8
 800da7c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800da7e:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <OnRadioTxTimeout+0x44>)
 800da80:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da84:	2b00      	cmp	r3, #0
 800da86:	d00a      	beq.n	800da9e <OnRadioTxTimeout+0x2e>
 800da88:	4b0a      	ldr	r3, [pc, #40]	; (800dab4 <OnRadioTxTimeout+0x44>)
 800da8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d004      	beq.n	800da9e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800da94:	4b07      	ldr	r3, [pc, #28]	; (800dab4 <OnRadioTxTimeout+0x44>)
 800da96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800da9a:	691b      	ldr	r3, [r3, #16]
 800da9c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800da9e:	4b06      	ldr	r3, [pc, #24]	; (800dab8 <OnRadioTxTimeout+0x48>)
 800daa0:	2201      	movs	r2, #1
 800daa2:	2100      	movs	r1, #0
 800daa4:	2002      	movs	r0, #2
 800daa6:	f00e ff0d 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800daaa:	bf00      	nop
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	20001738 	.word	0x20001738
 800dab4:	20000670 	.word	0x20000670
 800dab8:	0801d68c 	.word	0x0801d68c

0800dabc <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800dac0:	4a0b      	ldr	r2, [pc, #44]	; (800daf0 <OnRadioRxError+0x34>)
 800dac2:	7813      	ldrb	r3, [r2, #0]
 800dac4:	f043 0304 	orr.w	r3, r3, #4
 800dac8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800daca:	4b0a      	ldr	r3, [pc, #40]	; (800daf4 <OnRadioRxError+0x38>)
 800dacc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00a      	beq.n	800daea <OnRadioRxError+0x2e>
 800dad4:	4b07      	ldr	r3, [pc, #28]	; (800daf4 <OnRadioRxError+0x38>)
 800dad6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d004      	beq.n	800daea <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dae0:	4b04      	ldr	r3, [pc, #16]	; (800daf4 <OnRadioRxError+0x38>)
 800dae2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	4798      	blx	r3
    }
}
 800daea:	bf00      	nop
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	20001738 	.word	0x20001738
 800daf4:	20000670 	.word	0x20000670

0800daf8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800dafc:	4a0e      	ldr	r2, [pc, #56]	; (800db38 <OnRadioRxTimeout+0x40>)
 800dafe:	7813      	ldrb	r3, [r2, #0]
 800db00:	f043 0302 	orr.w	r3, r3, #2
 800db04:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800db06:	4b0d      	ldr	r3, [pc, #52]	; (800db3c <OnRadioRxTimeout+0x44>)
 800db08:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d00a      	beq.n	800db26 <OnRadioRxTimeout+0x2e>
 800db10:	4b0a      	ldr	r3, [pc, #40]	; (800db3c <OnRadioRxTimeout+0x44>)
 800db12:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d004      	beq.n	800db26 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800db1c:	4b07      	ldr	r3, [pc, #28]	; (800db3c <OnRadioRxTimeout+0x44>)
 800db1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800db26:	4b06      	ldr	r3, [pc, #24]	; (800db40 <OnRadioRxTimeout+0x48>)
 800db28:	2201      	movs	r2, #1
 800db2a:	2100      	movs	r1, #0
 800db2c:	2002      	movs	r0, #2
 800db2e:	f00e fec9 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800db32:	bf00      	nop
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	20001738 	.word	0x20001738
 800db3c:	20000670 	.word	0x20000670
 800db40:	0801d69c 	.word	0x0801d69c

0800db44 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800db44:	b480      	push	{r7}
 800db46:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800db48:	4b08      	ldr	r3, [pc, #32]	; (800db6c <UpdateRxSlotIdleState+0x28>)
 800db4a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d004      	beq.n	800db5c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800db52:	4b07      	ldr	r3, [pc, #28]	; (800db70 <UpdateRxSlotIdleState+0x2c>)
 800db54:	2206      	movs	r2, #6
 800db56:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800db5a:	e003      	b.n	800db64 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800db5c:	4b04      	ldr	r3, [pc, #16]	; (800db70 <UpdateRxSlotIdleState+0x2c>)
 800db5e:	2202      	movs	r2, #2
 800db60:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800db64:	bf00      	nop
 800db66:	46bd      	mov	sp, r7
 800db68:	bc80      	pop	{r7}
 800db6a:	4770      	bx	lr
 800db6c:	20000b90 	.word	0x20000b90
 800db70:	20000670 	.word	0x20000670

0800db74 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b08e      	sub	sp, #56	; 0x38
 800db78:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800db7a:	4b3e      	ldr	r3, [pc, #248]	; (800dc74 <ProcessRadioTxDone+0x100>)
 800db7c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800db80:	2b02      	cmp	r3, #2
 800db82:	d002      	beq.n	800db8a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800db84:	4b3c      	ldr	r3, [pc, #240]	; (800dc78 <ProcessRadioTxDone+0x104>)
 800db86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db88:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800db8a:	4b3c      	ldr	r3, [pc, #240]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800db8c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800db90:	4619      	mov	r1, r3
 800db92:	483b      	ldr	r0, [pc, #236]	; (800dc80 <ProcessRadioTxDone+0x10c>)
 800db94:	f00e fcfc 	bl	801c590 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800db98:	4839      	ldr	r0, [pc, #228]	; (800dc80 <ProcessRadioTxDone+0x10c>)
 800db9a:	f00e fc1b 	bl	801c3d4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800db9e:	4b37      	ldr	r3, [pc, #220]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800dba0:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800dba4:	4619      	mov	r1, r3
 800dba6:	4837      	ldr	r0, [pc, #220]	; (800dc84 <ProcessRadioTxDone+0x110>)
 800dba8:	f00e fcf2 	bl	801c590 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800dbac:	4835      	ldr	r0, [pc, #212]	; (800dc84 <ProcessRadioTxDone+0x110>)
 800dbae:	f00e fc11 	bl	801c3d4 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800dbb2:	4b32      	ldr	r3, [pc, #200]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800dbb4:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01a      	beq.n	800dbf2 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800dbbc:	2315      	movs	r3, #21
 800dbbe:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dbc2:	4b2c      	ldr	r3, [pc, #176]	; (800dc74 <ProcessRadioTxDone+0x100>)
 800dbc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dbc8:	f107 0220 	add.w	r2, r7, #32
 800dbcc:	4611      	mov	r1, r2
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f006 fd25 	bl	801461e <RegionGetPhyParam>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dbd8:	4b28      	ldr	r3, [pc, #160]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800dbda:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	4828      	ldr	r0, [pc, #160]	; (800dc88 <ProcessRadioTxDone+0x114>)
 800dbe6:	f00e fcd3 	bl	801c590 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800dbea:	4827      	ldr	r0, [pc, #156]	; (800dc88 <ProcessRadioTxDone+0x114>)
 800dbec:	f00e fbf2 	bl	801c3d4 <UTIL_TIMER_Start>
 800dbf0:	e003      	b.n	800dbfa <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dbf2:	4b22      	ldr	r3, [pc, #136]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dbfa:	4b24      	ldr	r3, [pc, #144]	; (800dc8c <ProcessRadioTxDone+0x118>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	4a1d      	ldr	r2, [pc, #116]	; (800dc74 <ProcessRadioTxDone+0x100>)
 800dc00:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dc02:	4b1e      	ldr	r3, [pc, #120]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800dc04:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800dc08:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800dc0a:	4b20      	ldr	r3, [pc, #128]	; (800dc8c <ProcessRadioTxDone+0x118>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dc10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc14:	4618      	mov	r0, r3
 800dc16:	f00d ff17 	bl	801ba48 <SysTimeGetMcuTime>
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	4b15      	ldr	r3, [pc, #84]	; (800dc74 <ProcessRadioTxDone+0x100>)
 800dc1e:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800dc22:	9200      	str	r2, [sp, #0]
 800dc24:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800dc28:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800dc2c:	ca06      	ldmia	r2, {r1, r2}
 800dc2e:	f00d fe6c 	bl	801b90a <SysTimeSub>
 800dc32:	f107 0314 	add.w	r3, r7, #20
 800dc36:	463a      	mov	r2, r7
 800dc38:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc3c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800dc40:	4b0e      	ldr	r3, [pc, #56]	; (800dc7c <ProcessRadioTxDone+0x108>)
 800dc42:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800dc46:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800dc48:	2301      	movs	r3, #1
 800dc4a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dc4c:	4b09      	ldr	r3, [pc, #36]	; (800dc74 <ProcessRadioTxDone+0x100>)
 800dc4e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800dc56:	2300      	movs	r3, #0
 800dc58:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800dc5a:	4b06      	ldr	r3, [pc, #24]	; (800dc74 <ProcessRadioTxDone+0x100>)
 800dc5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc60:	f107 0208 	add.w	r2, r7, #8
 800dc64:	4611      	mov	r1, r2
 800dc66:	4618      	mov	r0, r3
 800dc68:	f006 fcfa 	bl	8014660 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800dc6c:	bf00      	nop
 800dc6e:	3730      	adds	r7, #48	; 0x30
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	20000b90 	.word	0x20000b90
 800dc78:	0801dd4c 	.word	0x0801dd4c
 800dc7c:	20000670 	.word	0x20000670
 800dc80:	200009f0 	.word	0x200009f0
 800dc84:	20000a08 	.word	0x20000a08
 800dc88:	20000a74 	.word	0x20000a74
 800dc8c:	2000173c 	.word	0x2000173c

0800dc90 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dc94:	4b10      	ldr	r3, [pc, #64]	; (800dcd8 <PrepareRxDoneAbort+0x48>)
 800dc96:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800dc9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc9e:	4a0e      	ldr	r2, [pc, #56]	; (800dcd8 <PrepareRxDoneAbort+0x48>)
 800dca0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800dca4:	4b0c      	ldr	r3, [pc, #48]	; (800dcd8 <PrepareRxDoneAbort+0x48>)
 800dca6:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d002      	beq.n	800dcb4 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800dcae:	2000      	movs	r0, #0
 800dcb0:	f001 f99c 	bl	800efec <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800dcb4:	4a08      	ldr	r2, [pc, #32]	; (800dcd8 <PrepareRxDoneAbort+0x48>)
 800dcb6:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800dcba:	f043 0302 	orr.w	r3, r3, #2
 800dcbe:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800dcc2:	4a05      	ldr	r2, [pc, #20]	; (800dcd8 <PrepareRxDoneAbort+0x48>)
 800dcc4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800dcc8:	f043 0320 	orr.w	r3, r3, #32
 800dccc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800dcd0:	f7ff ff38 	bl	800db44 <UpdateRxSlotIdleState>
}
 800dcd4:	bf00      	nop
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	20000670 	.word	0x20000670

0800dcdc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800dcdc:	b590      	push	{r4, r7, lr}
 800dcde:	b0a7      	sub	sp, #156	; 0x9c
 800dce0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800dce2:	2312      	movs	r3, #18
 800dce4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800dce8:	4bbd      	ldr	r3, [pc, #756]	; (800dfe0 <ProcessRadioRxDone+0x304>)
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800dcf0:	4bbb      	ldr	r3, [pc, #748]	; (800dfe0 <ProcessRadioRxDone+0x304>)
 800dcf2:	891b      	ldrh	r3, [r3, #8]
 800dcf4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800dcf8:	4bb9      	ldr	r3, [pc, #740]	; (800dfe0 <ProcessRadioRxDone+0x304>)
 800dcfa:	895b      	ldrh	r3, [r3, #10]
 800dcfc:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800dd00:	4bb7      	ldr	r3, [pc, #732]	; (800dfe0 <ProcessRadioRxDone+0x304>)
 800dd02:	7b1b      	ldrb	r3, [r3, #12]
 800dd04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800dd12:	4bb4      	ldr	r3, [pc, #720]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800dd14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800dd18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800dd28:	4aaf      	ldr	r2, [pc, #700]	; (800dfe8 <ProcessRadioRxDone+0x30c>)
 800dd2a:	7813      	ldrb	r3, [r2, #0]
 800dd2c:	f36f 0300 	bfc	r3, #0, #1
 800dd30:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800dd32:	4bae      	ldr	r3, [pc, #696]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800dd3a:	4aac      	ldr	r2, [pc, #688]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd3c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800dd40:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800dd44:	4aa9      	ldr	r2, [pc, #676]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800dd4a:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800dd4e:	4ba7      	ldr	r3, [pc, #668]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd50:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800dd54:	4ba5      	ldr	r3, [pc, #660]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd56:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800dd5a:	4ba4      	ldr	r3, [pc, #656]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800dd62:	4ba2      	ldr	r3, [pc, #648]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800dd6a:	4ba0      	ldr	r3, [pc, #640]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800dd72:	4b9e      	ldr	r3, [pc, #632]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800dd7a:	4b9c      	ldr	r3, [pc, #624]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800dd82:	4b9a      	ldr	r3, [pc, #616]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800dd8a:	4b98      	ldr	r3, [pc, #608]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dd92:	4b96      	ldr	r3, [pc, #600]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dd9a:	4b94      	ldr	r3, [pc, #592]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800dda2:	4b92      	ldr	r3, [pc, #584]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ddaa:	4b90      	ldr	r3, [pc, #576]	; (800dfec <ProcessRadioRxDone+0x310>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800ddb2:	4b8e      	ldr	r3, [pc, #568]	; (800dfec <ProcessRadioRxDone+0x310>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ddba:	4b8d      	ldr	r3, [pc, #564]	; (800dff0 <ProcessRadioRxDone+0x314>)
 800ddbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbe:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ddc0:	4b8a      	ldr	r3, [pc, #552]	; (800dfec <ProcessRadioRxDone+0x310>)
 800ddc2:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d102      	bne.n	800ddd0 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ddca:	488a      	ldr	r0, [pc, #552]	; (800dff4 <ProcessRadioRxDone+0x318>)
 800ddcc:	f00e fb70 	bl	801c4b0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ddd0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ddd4:	4619      	mov	r1, r3
 800ddd6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ddda:	f004 fccf 	bl	801277c <LoRaMacClassBRxBeacon>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dde4:	4a81      	ldr	r2, [pc, #516]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dde6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ddea:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ddee:	4a7f      	ldr	r2, [pc, #508]	; (800dfec <ProcessRadioRxDone+0x310>)
 800ddf0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ddf4:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800ddf8:	f000 bc22 	b.w	800e640 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ddfc:	4b79      	ldr	r3, [pc, #484]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800ddfe:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800de02:	2b01      	cmp	r3, #1
 800de04:	d11e      	bne.n	800de44 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800de06:	f004 fccc 	bl	80127a2 <LoRaMacClassBIsPingExpected>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d00a      	beq.n	800de26 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800de10:	2000      	movs	r0, #0
 800de12:	f004 fc7d 	bl	8012710 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800de16:	2000      	movs	r0, #0
 800de18:	f004 fc9e 	bl	8012758 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800de1c:	4b73      	ldr	r3, [pc, #460]	; (800dfec <ProcessRadioRxDone+0x310>)
 800de1e:	2204      	movs	r2, #4
 800de20:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800de24:	e00e      	b.n	800de44 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800de26:	f004 fcc3 	bl	80127b0 <LoRaMacClassBIsMulticastExpected>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d009      	beq.n	800de44 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800de30:	2000      	movs	r0, #0
 800de32:	f004 fc77 	bl	8012724 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800de36:	2000      	movs	r0, #0
 800de38:	f004 fc97 	bl	801276a <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800de3c:	4b6b      	ldr	r3, [pc, #428]	; (800dfec <ProcessRadioRxDone+0x310>)
 800de3e:	2205      	movs	r2, #5
 800de40:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800de44:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800de4e:	461a      	mov	r2, r3
 800de50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de54:	4413      	add	r3, r2
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800de5c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800de60:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800de64:	b2db      	uxtb	r3, r3
 800de66:	3b01      	subs	r3, #1
 800de68:	2b06      	cmp	r3, #6
 800de6a:	f200 83bd 	bhi.w	800e5e8 <ProcessRadioRxDone+0x90c>
 800de6e:	a201      	add	r2, pc, #4	; (adr r2, 800de74 <ProcessRadioRxDone+0x198>)
 800de70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de74:	0800de91 	.word	0x0800de91
 800de78:	0800e5e9 	.word	0x0800e5e9
 800de7c:	0800e025 	.word	0x0800e025
 800de80:	0800e5e9 	.word	0x0800e5e9
 800de84:	0800e01d 	.word	0x0800e01d
 800de88:	0800e5e9 	.word	0x0800e5e9
 800de8c:	0800e57b 	.word	0x0800e57b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800de90:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800de94:	2b10      	cmp	r3, #16
 800de96:	d806      	bhi.n	800dea6 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800de98:	4b54      	ldr	r3, [pc, #336]	; (800dfec <ProcessRadioRxDone+0x310>)
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800dea0:	f7ff fef6 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800dea4:	e3cc      	b.n	800e640 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800dea6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800deaa:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800deac:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800deb4:	4b4b      	ldr	r3, [pc, #300]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800deb6:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800deba:	2b00      	cmp	r3, #0
 800debc:	d006      	beq.n	800decc <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800debe:	4b4b      	ldr	r3, [pc, #300]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dec0:	2201      	movs	r2, #1
 800dec2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800dec6:	f7ff fee3 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800deca:	e3b9      	b.n	800e640 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800decc:	f7fe f874 	bl	800bfb8 <SecureElementGetJoinEui>
 800ded0:	4601      	mov	r1, r0
 800ded2:	f107 030c 	add.w	r3, r7, #12
 800ded6:	461a      	mov	r2, r3
 800ded8:	20ff      	movs	r0, #255	; 0xff
 800deda:	f005 fe1f 	bl	8013b1c <LoRaMacCryptoHandleJoinAccept>
 800dede:	4603      	mov	r3, r0
 800dee0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800dee4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f040 8085 	bne.w	800dff8 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800deee:	7d7b      	ldrb	r3, [r7, #21]
 800def0:	461a      	mov	r2, r3
 800def2:	4b3c      	ldr	r3, [pc, #240]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800def4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800def8:	4b3a      	ldr	r3, [pc, #232]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800defa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800defe:	7dbb      	ldrb	r3, [r7, #22]
 800df00:	021b      	lsls	r3, r3, #8
 800df02:	4313      	orrs	r3, r2
 800df04:	4a37      	ldr	r2, [pc, #220]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df06:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800df0a:	4b36      	ldr	r3, [pc, #216]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df0c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	041b      	lsls	r3, r3, #16
 800df14:	4313      	orrs	r3, r2
 800df16:	4a33      	ldr	r2, [pc, #204]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df18:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	4a31      	ldr	r2, [pc, #196]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df20:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800df24:	7f3b      	ldrb	r3, [r7, #28]
 800df26:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	461a      	mov	r2, r3
 800df2e:	4b2d      	ldr	r3, [pc, #180]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800df34:	7f3b      	ldrb	r3, [r7, #28]
 800df36:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	461a      	mov	r2, r3
 800df3e:	4b29      	ldr	r3, [pc, #164]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800df44:	7f3b      	ldrb	r3, [r7, #28]
 800df46:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	461a      	mov	r2, r3
 800df4e:	4b25      	ldr	r3, [pc, #148]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800df54:	7f7b      	ldrb	r3, [r7, #29]
 800df56:	461a      	mov	r2, r3
 800df58:	4b22      	ldr	r3, [pc, #136]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df5a:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800df5c:	4b21      	ldr	r3, [pc, #132]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df60:	2b00      	cmp	r3, #0
 800df62:	d102      	bne.n	800df6a <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800df64:	4b1f      	ldr	r3, [pc, #124]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df66:	2201      	movs	r2, #1
 800df68:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800df6a:	4b1e      	ldr	r3, [pc, #120]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800df72:	fb02 f303 	mul.w	r3, r2, r3
 800df76:	4a1b      	ldr	r2, [pc, #108]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df78:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800df7a:	4b1a      	ldr	r3, [pc, #104]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df7e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800df82:	4a18      	ldr	r2, [pc, #96]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df84:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800df86:	4b17      	ldr	r3, [pc, #92]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800df8e:	f107 030c 	add.w	r3, r7, #12
 800df92:	3312      	adds	r3, #18
 800df94:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800df96:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	3b11      	subs	r3, #17
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800dfa4:	4b11      	ldr	r3, [pc, #68]	; (800dfec <ProcessRadioRxDone+0x310>)
 800dfa6:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800dfaa:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800dfae:	4b0d      	ldr	r3, [pc, #52]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800dfb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfb4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800dfb8:	4611      	mov	r1, r2
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f006 fba0 	bl	8014700 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dfc0:	4b08      	ldr	r3, [pc, #32]	; (800dfe4 <ProcessRadioRxDone+0x308>)
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dfc8:	2001      	movs	r0, #1
 800dfca:	f005 f8cf 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d01b      	beq.n	800e00c <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	f005 f83c 	bl	8013054 <LoRaMacConfirmQueueSetStatus>
 800dfdc:	e016      	b.n	800e00c <ProcessRadioRxDone+0x330>
 800dfde:	bf00      	nop
 800dfe0:	20001740 	.word	0x20001740
 800dfe4:	20000b90 	.word	0x20000b90
 800dfe8:	20001738 	.word	0x20001738
 800dfec:	20000670 	.word	0x20000670
 800dff0:	0801dd4c 	.word	0x0801dd4c
 800dff4:	20000a08 	.word	0x20000a08
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dff8:	2001      	movs	r0, #1
 800dffa:	f005 f8b7 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d003      	beq.n	800e00c <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e004:	2101      	movs	r1, #1
 800e006:	2007      	movs	r0, #7
 800e008:	f005 f824 	bl	8013054 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800e00c:	4ab9      	ldr	r2, [pc, #740]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e00e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e012:	f043 0308 	orr.w	r3, r3, #8
 800e016:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800e01a:	e2ec      	b.n	800e5f6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e01c:	4bb5      	ldr	r3, [pc, #724]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e024:	4bb4      	ldr	r3, [pc, #720]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e026:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800e02a:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e02e:	4bb1      	ldr	r3, [pc, #708]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e030:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800e034:	b25b      	sxtb	r3, r3
 800e036:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e03a:	230d      	movs	r3, #13
 800e03c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e040:	4bad      	ldr	r3, [pc, #692]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e046:	2b00      	cmp	r3, #0
 800e048:	d002      	beq.n	800e050 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e04a:	230e      	movs	r3, #14
 800e04c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e050:	4ba9      	ldr	r3, [pc, #676]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e056:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800e05a:	4611      	mov	r1, r2
 800e05c:	4618      	mov	r0, r3
 800e05e:	f006 fade 	bl	801461e <RegionGetPhyParam>
 800e062:	4603      	mov	r3, r0
 800e064:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e066:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e06a:	3b0d      	subs	r3, #13
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	b21b      	sxth	r3, r3
 800e070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e074:	b21a      	sxth	r2, r3
 800e076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e078:	b21b      	sxth	r3, r3
 800e07a:	429a      	cmp	r2, r3
 800e07c:	dc03      	bgt.n	800e086 <ProcessRadioRxDone+0x3aa>
 800e07e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e082:	2b0b      	cmp	r3, #11
 800e084:	d806      	bhi.n	800e094 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e086:	4b9b      	ldr	r3, [pc, #620]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e08e:	f7ff fdff 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800e092:	e2d5      	b.n	800e640 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800e094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e098:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800e09a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e0a4:	4b95      	ldr	r3, [pc, #596]	; (800e2fc <ProcessRadioRxDone+0x620>)
 800e0a6:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e0a8:	23ff      	movs	r3, #255	; 0xff
 800e0aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e0ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f006 f831 	bl	801411a <LoRaMacParserData>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d006      	beq.n	800e0cc <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0be:	4b8d      	ldr	r3, [pc, #564]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e0c6:	f7ff fde3 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800e0ca:	e2b9      	b.n	800e640 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e0cc:	4b8a      	ldr	r3, [pc, #552]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e0ce:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d132      	bne.n	800e13c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e0d6:	f004 fb64 	bl	80127a2 <LoRaMacClassBIsPingExpected>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d014      	beq.n	800e10a <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f004 fb15 	bl	8012710 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e0e6:	2000      	movs	r0, #0
 800e0e8:	f004 fb36 	bl	8012758 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e0ec:	4b81      	ldr	r3, [pc, #516]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e0ee:	2204      	movs	r2, #4
 800e0f0:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e0f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e0fa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	4619      	mov	r1, r3
 800e102:	4610      	mov	r0, r2
 800e104:	f004 fbd6 	bl	80128b4 <LoRaMacClassBSetFPendingBit>
 800e108:	e018      	b.n	800e13c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e10a:	f004 fb51 	bl	80127b0 <LoRaMacClassBIsMulticastExpected>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d013      	beq.n	800e13c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e114:	2000      	movs	r0, #0
 800e116:	f004 fb05 	bl	8012724 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e11a:	2000      	movs	r0, #0
 800e11c:	f004 fb25 	bl	801276a <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e120:	4b74      	ldr	r3, [pc, #464]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e122:	2205      	movs	r2, #5
 800e124:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e12a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e12e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e132:	b2db      	uxtb	r3, r3
 800e134:	4619      	mov	r1, r3
 800e136:	4610      	mov	r0, r2
 800e138:	f004 fbbc 	bl	80128b4 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13e:	4a6d      	ldr	r2, [pc, #436]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e140:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e144:	1dba      	adds	r2, r7, #6
 800e146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e14a:	4611      	mov	r1, r2
 800e14c:	4618      	mov	r0, r3
 800e14e:	f002 fd13 	bl	8010b78 <DetermineFrameType>
 800e152:	4603      	mov	r3, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	d006      	beq.n	800e166 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e158:	4b66      	ldr	r3, [pc, #408]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e160:	f7ff fd96 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800e164:	e26c      	b.n	800e640 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800e16c:	2300      	movs	r3, #0
 800e16e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e170:	2300      	movs	r3, #0
 800e172:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800e176:	e049      	b.n	800e20c <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e178:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e17c:	4a5e      	ldr	r2, [pc, #376]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e17e:	212c      	movs	r1, #44	; 0x2c
 800e180:	fb01 f303 	mul.w	r3, r1, r3
 800e184:	4413      	add	r3, r2
 800e186:	33dc      	adds	r3, #220	; 0xdc
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d138      	bne.n	800e202 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e190:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e194:	4a58      	ldr	r2, [pc, #352]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e196:	212c      	movs	r1, #44	; 0x2c
 800e198:	fb01 f303 	mul.w	r3, r1, r3
 800e19c:	4413      	add	r3, r2
 800e19e:	33da      	adds	r3, #218	; 0xda
 800e1a0:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d02d      	beq.n	800e202 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e1ac:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e1b0:	4a51      	ldr	r2, [pc, #324]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e1b2:	212c      	movs	r1, #44	; 0x2c
 800e1b4:	fb01 f303 	mul.w	r3, r1, r3
 800e1b8:	4413      	add	r3, r2
 800e1ba:	33db      	adds	r3, #219	; 0xdb
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e1c2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e1c6:	4a4c      	ldr	r2, [pc, #304]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e1c8:	212c      	movs	r1, #44	; 0x2c
 800e1ca:	fb01 f303 	mul.w	r3, r1, r3
 800e1ce:	4413      	add	r3, r2
 800e1d0:	33f8      	adds	r3, #248	; 0xf8
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e1d8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e1dc:	4a46      	ldr	r2, [pc, #280]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e1de:	212c      	movs	r1, #44	; 0x2c
 800e1e0:	fb01 f303 	mul.w	r3, r1, r3
 800e1e4:	4413      	add	r3, r2
 800e1e6:	33dc      	adds	r3, #220	; 0xdc
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e1ee:	4b42      	ldr	r3, [pc, #264]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e1f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e1f4:	2b02      	cmp	r3, #2
 800e1f6:	d10e      	bne.n	800e216 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e1f8:	4b3e      	ldr	r3, [pc, #248]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e1fa:	2203      	movs	r2, #3
 800e1fc:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800e200:	e009      	b.n	800e216 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e202:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e206:	3301      	adds	r3, #1
 800e208:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800e20c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800e210:	2b00      	cmp	r3, #0
 800e212:	d0b1      	beq.n	800e178 <ProcessRadioRxDone+0x49c>
 800e214:	e000      	b.n	800e218 <ProcessRadioRxDone+0x53c>
                    break;
 800e216:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e218:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d117      	bne.n	800e250 <ProcessRadioRxDone+0x574>
 800e220:	79bb      	ldrb	r3, [r7, #6]
 800e222:	2b03      	cmp	r3, #3
 800e224:	d10d      	bne.n	800e242 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e226:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e22a:	f003 0320 	and.w	r3, r3, #32
 800e22e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e234:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e23c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d006      	beq.n	800e250 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e242:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e244:	2201      	movs	r2, #1
 800e246:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800e24a:	f7ff fd21 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800e24e:	e1f7      	b.n	800e640 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e250:	79b9      	ldrb	r1, [r7, #6]
 800e252:	4c29      	ldr	r4, [pc, #164]	; (800e2f8 <ProcessRadioRxDone+0x61c>)
 800e254:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e258:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800e25c:	f107 0308 	add.w	r3, r7, #8
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	1dfb      	adds	r3, r7, #7
 800e264:	9300      	str	r3, [sp, #0]
 800e266:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800e26a:	f000 fee7 	bl	800f03c <GetFCntDown>
 800e26e:	4603      	mov	r3, r0
 800e270:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e274:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d017      	beq.n	800e2ac <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e27c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e280:	2b07      	cmp	r3, #7
 800e282:	d104      	bne.n	800e28e <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e284:	4b1b      	ldr	r3, [pc, #108]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e286:	2208      	movs	r2, #8
 800e288:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800e28c:	e003      	b.n	800e296 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e28e:	4b19      	ldr	r3, [pc, #100]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e290:	2201      	movs	r2, #1
 800e292:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	4a16      	ldr	r2, [pc, #88]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e29a:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	4a14      	ldr	r2, [pc, #80]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e2a2:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800e2a6:	f7ff fcf3 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800e2aa:	e1c9      	b.n	800e640 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e2ac:	79fa      	ldrb	r2, [r7, #7]
 800e2ae:	68b9      	ldr	r1, [r7, #8]
 800e2b0:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800e2b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e2b8:	9300      	str	r3, [sp, #0]
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e2c0:	f005 fd78 	bl	8013db4 <LoRaMacCryptoUnsecureMessage>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e2ca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d016      	beq.n	800e300 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e2d2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	d104      	bne.n	800e2e4 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e2da:	4b06      	ldr	r3, [pc, #24]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e2dc:	220a      	movs	r2, #10
 800e2de:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800e2e2:	e003      	b.n	800e2ec <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e2e4:	4b03      	ldr	r3, [pc, #12]	; (800e2f4 <ProcessRadioRxDone+0x618>)
 800e2e6:	220b      	movs	r2, #11
 800e2e8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800e2ec:	f7ff fcd0 	bl	800dc90 <PrepareRxDoneAbort>
                return;
 800e2f0:	e1a6      	b.n	800e640 <ProcessRadioRxDone+0x964>
 800e2f2:	bf00      	nop
 800e2f4:	20000670 	.word	0x20000670
 800e2f8:	20000b90 	.word	0x20000b90
 800e2fc:	200008a8 	.word	0x200008a8
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e300:	4bb5      	ldr	r3, [pc, #724]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e302:	2200      	movs	r2, #0
 800e304:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e308:	4ab3      	ldr	r2, [pc, #716]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e30a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e30e:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e312:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e316:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	461a      	mov	r2, r3
 800e31e:	4bae      	ldr	r3, [pc, #696]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e320:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e324:	4bac      	ldr	r3, [pc, #688]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e326:	2200      	movs	r2, #0
 800e328:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e32c:	4baa      	ldr	r3, [pc, #680]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e32e:	2200      	movs	r2, #0
 800e330:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	4aa8      	ldr	r2, [pc, #672]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e338:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	4aa6      	ldr	r2, [pc, #664]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e340:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e344:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e348:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e34c:	b2db      	uxtb	r3, r3
 800e34e:	2b00      	cmp	r3, #0
 800e350:	bf14      	ite	ne
 800e352:	2301      	movne	r3, #1
 800e354:	2300      	moveq	r3, #0
 800e356:	b2da      	uxtb	r2, r3
 800e358:	4b9f      	ldr	r3, [pc, #636]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e35a:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e35e:	4b9e      	ldr	r3, [pc, #632]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e360:	2200      	movs	r2, #0
 800e362:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e366:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e36a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	2b00      	cmp	r3, #0
 800e372:	bf14      	ite	ne
 800e374:	2301      	movne	r3, #1
 800e376:	2300      	moveq	r3, #0
 800e378:	b2da      	uxtb	r2, r3
 800e37a:	4b97      	ldr	r3, [pc, #604]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e37c:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e380:	4b95      	ldr	r3, [pc, #596]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e382:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e386:	2b00      	cmp	r3, #0
 800e388:	d004      	beq.n	800e394 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e38a:	4b93      	ldr	r3, [pc, #588]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e38c:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e390:	2b01      	cmp	r3, #1
 800e392:	d106      	bne.n	800e3a2 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e394:	4b91      	ldr	r3, [pc, #580]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e396:	2200      	movs	r2, #0
 800e398:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e39a:	4b90      	ldr	r3, [pc, #576]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e39c:	2201      	movs	r2, #1
 800e39e:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e3a2:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800e3a6:	2b01      	cmp	r3, #1
 800e3a8:	d104      	bne.n	800e3b4 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e3aa:	4b8b      	ldr	r3, [pc, #556]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e3ac:	2202      	movs	r2, #2
 800e3ae:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800e3b2:	e034      	b.n	800e41e <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e3b4:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800e3b8:	f023 031f 	bic.w	r3, r3, #31
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2ba0      	cmp	r3, #160	; 0xa0
 800e3c0:	d125      	bne.n	800e40e <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e3c2:	4b86      	ldr	r3, [pc, #536]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e3ca:	4b84      	ldr	r3, [pc, #528]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e3cc:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d102      	bne.n	800e3da <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e3d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e3d6:	4a81      	ldr	r2, [pc, #516]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e3d8:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e3da:	4b7f      	ldr	r3, [pc, #508]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e3e2:	4b7d      	ldr	r3, [pc, #500]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e3e4:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d018      	beq.n	800e41e <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e3ec:	4b7a      	ldr	r3, [pc, #488]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e3ee:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d013      	beq.n	800e41e <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e3f6:	4b79      	ldr	r3, [pc, #484]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e3f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3fc:	4a76      	ldr	r2, [pc, #472]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e3fe:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e402:	4b77      	ldr	r3, [pc, #476]	; (800e5e0 <ProcessRadioRxDone+0x904>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a74      	ldr	r2, [pc, #464]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e408:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800e40c:	e007      	b.n	800e41e <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e40e:	4b73      	ldr	r3, [pc, #460]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e410:	2200      	movs	r2, #0
 800e412:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e416:	4b70      	ldr	r3, [pc, #448]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e418:	2200      	movs	r2, #0
 800e41a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e41e:	4b6e      	ldr	r3, [pc, #440]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e420:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e424:	4a6c      	ldr	r2, [pc, #432]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e426:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800e42a:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800e42e:	4618      	mov	r0, r3
 800e430:	f001 ff88 	bl	8010344 <RemoveMacCommands>

            switch( fType )
 800e434:	79bb      	ldrb	r3, [r7, #6]
 800e436:	2b03      	cmp	r3, #3
 800e438:	d873      	bhi.n	800e522 <ProcessRadioRxDone+0x846>
 800e43a:	a201      	add	r2, pc, #4	; (adr r2, 800e440 <ProcessRadioRxDone+0x764>)
 800e43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e440:	0800e451 	.word	0x0800e451
 800e444:	0800e4a1 	.word	0x0800e4a1
 800e448:	0800e4d7 	.word	0x0800e4d7
 800e44c:	0800e4fd 	.word	0x0800e4fd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e450:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e454:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	461c      	mov	r4, r3
 800e45c:	4b5e      	ldr	r3, [pc, #376]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e45e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e462:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e466:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e46a:	f102 0010 	add.w	r0, r2, #16
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	460b      	mov	r3, r1
 800e472:	4622      	mov	r2, r4
 800e474:	2100      	movs	r1, #0
 800e476:	f000 ff45 	bl	800f304 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e47a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e47e:	4b56      	ldr	r3, [pc, #344]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e480:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e486:	4a54      	ldr	r2, [pc, #336]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e488:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e48c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e490:	4b51      	ldr	r3, [pc, #324]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e492:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e496:	4b50      	ldr	r3, [pc, #320]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e498:	2201      	movs	r2, #1
 800e49a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800e49e:	e047      	b.n	800e530 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e4a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e4a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	461c      	mov	r4, r3
 800e4ac:	4b4a      	ldr	r3, [pc, #296]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e4ae:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e4b2:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e4b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e4ba:	f102 0010 	add.w	r0, r2, #16
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	460b      	mov	r3, r1
 800e4c2:	4622      	mov	r2, r4
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	f000 ff1d 	bl	800f304 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e4ca:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e4ce:	4b42      	ldr	r3, [pc, #264]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e4d0:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800e4d4:	e02c      	b.n	800e530 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e4d6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e4d8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e4dc:	4b3e      	ldr	r3, [pc, #248]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e4de:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e4e2:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	2100      	movs	r1, #0
 800e4ec:	f000 ff0a 	bl	800f304 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e4f0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e4f4:	4b38      	ldr	r3, [pc, #224]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e4f6:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800e4fa:	e019      	b.n	800e530 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e4fc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e500:	4b35      	ldr	r3, [pc, #212]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e502:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e508:	4a33      	ldr	r2, [pc, #204]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e50a:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e50e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800e512:	4b31      	ldr	r3, [pc, #196]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e514:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e518:	4b2f      	ldr	r3, [pc, #188]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800e520:	e006      	b.n	800e530 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e522:	4b2d      	ldr	r3, [pc, #180]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e524:	2201      	movs	r2, #1
 800e526:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800e52a:	f7ff fbb1 	bl	800dc90 <PrepareRxDoneAbort>
                    break;
 800e52e:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e530:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800e534:	2be0      	cmp	r3, #224	; 0xe0
 800e536:	d118      	bne.n	800e56a <ProcessRadioRxDone+0x88e>
 800e538:	4b28      	ldr	r3, [pc, #160]	; (800e5dc <ProcessRadioRxDone+0x900>)
 800e53a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800e53e:	f083 0301 	eor.w	r3, r3, #1
 800e542:	b2db      	uxtb	r3, r3
 800e544:	2b00      	cmp	r3, #0
 800e546:	d010      	beq.n	800e56a <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e548:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800e54c:	4b22      	ldr	r3, [pc, #136]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e54e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e552:	4b21      	ldr	r3, [pc, #132]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e554:	2200      	movs	r2, #0
 800e556:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e55a:	4b1f      	ldr	r3, [pc, #124]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e55c:	2200      	movs	r2, #0
 800e55e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800e562:	4b1d      	ldr	r3, [pc, #116]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e564:	2200      	movs	r2, #0
 800e566:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e56a:	4a1b      	ldr	r2, [pc, #108]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e56c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e570:	f043 0302 	orr.w	r3, r3, #2
 800e574:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 800e578:	e03d      	b.n	800e5f6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e57a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e57e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e582:	18d1      	adds	r1, r2, r3
 800e584:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e588:	b29b      	uxth	r3, r3
 800e58a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	b29b      	uxth	r3, r3
 800e592:	461a      	mov	r2, r3
 800e594:	4813      	ldr	r0, [pc, #76]	; (800e5e4 <ProcessRadioRxDone+0x908>)
 800e596:	f009 fe40 	bl	801821a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e59c:	2203      	movs	r2, #3
 800e59e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e5a2:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e5aa:	4b0b      	ldr	r3, [pc, #44]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e5ac:	4a0d      	ldr	r2, [pc, #52]	; (800e5e4 <ProcessRadioRxDone+0x908>)
 800e5ae:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e5b2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	4b05      	ldr	r3, [pc, #20]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e5c2:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e5c6:	4a04      	ldr	r2, [pc, #16]	; (800e5d8 <ProcessRadioRxDone+0x8fc>)
 800e5c8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e5cc:	f043 0302 	orr.w	r3, r3, #2
 800e5d0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800e5d4:	e00f      	b.n	800e5f6 <ProcessRadioRxDone+0x91a>
 800e5d6:	bf00      	nop
 800e5d8:	20000670 	.word	0x20000670
 800e5dc:	20000b90 	.word	0x20000b90
 800e5e0:	20001740 	.word	0x20001740
 800e5e4:	200008a8 	.word	0x200008a8
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5e8:	4b17      	ldr	r3, [pc, #92]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800e5f0:	f7ff fb4e 	bl	800dc90 <PrepareRxDoneAbort>
            break;
 800e5f4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e5f6:	4b14      	ldr	r3, [pc, #80]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e5f8:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e600:	4b11      	ldr	r3, [pc, #68]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e602:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e606:	2b01      	cmp	r3, #1
 800e608:	d10c      	bne.n	800e624 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e60a:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e60c:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e610:	2b00      	cmp	r3, #0
 800e612:	d007      	beq.n	800e624 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e614:	4b0c      	ldr	r3, [pc, #48]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e616:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d002      	beq.n	800e624 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e61e:	2000      	movs	r0, #0
 800e620:	f000 fce4 	bl	800efec <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e624:	4b08      	ldr	r3, [pc, #32]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e626:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d006      	beq.n	800e63c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e62e:	4a06      	ldr	r2, [pc, #24]	; (800e648 <ProcessRadioRxDone+0x96c>)
 800e630:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e634:	f043 0320 	orr.w	r3, r3, #32
 800e638:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e63c:	f7ff fa82 	bl	800db44 <UpdateRxSlotIdleState>
}
 800e640:	3794      	adds	r7, #148	; 0x94
 800e642:	46bd      	mov	sp, r7
 800e644:	bd90      	pop	{r4, r7, pc}
 800e646:	bf00      	nop
 800e648:	20000670 	.word	0x20000670

0800e64c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e650:	4b11      	ldr	r3, [pc, #68]	; (800e698 <ProcessRadioTxTimeout+0x4c>)
 800e652:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e656:	2b02      	cmp	r3, #2
 800e658:	d002      	beq.n	800e660 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e65a:	4b10      	ldr	r3, [pc, #64]	; (800e69c <ProcessRadioTxTimeout+0x50>)
 800e65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e65e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e660:	f7ff fa70 	bl	800db44 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e664:	4b0e      	ldr	r3, [pc, #56]	; (800e6a0 <ProcessRadioTxTimeout+0x54>)
 800e666:	2202      	movs	r2, #2
 800e668:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e66c:	2002      	movs	r0, #2
 800e66e:	f004 fd49 	bl	8013104 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e672:	4b0b      	ldr	r3, [pc, #44]	; (800e6a0 <ProcessRadioTxTimeout+0x54>)
 800e674:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d003      	beq.n	800e684 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800e67c:	4b08      	ldr	r3, [pc, #32]	; (800e6a0 <ProcessRadioTxTimeout+0x54>)
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e684:	4a06      	ldr	r2, [pc, #24]	; (800e6a0 <ProcessRadioTxTimeout+0x54>)
 800e686:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e68a:	f043 0320 	orr.w	r3, r3, #32
 800e68e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800e692:	bf00      	nop
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20000b90 	.word	0x20000b90
 800e69c:	0801dd4c 	.word	0x0801dd4c
 800e6a0:	20000670 	.word	0x20000670

0800e6a4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	460a      	mov	r2, r1
 800e6ae:	71fb      	strb	r3, [r7, #7]
 800e6b0:	4613      	mov	r3, r2
 800e6b2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e6b8:	4b3d      	ldr	r3, [pc, #244]	; (800e7b0 <HandleRadioRxErrorTimeout+0x10c>)
 800e6ba:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d002      	beq.n	800e6c8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e6c2:	4b3c      	ldr	r3, [pc, #240]	; (800e7b4 <HandleRadioRxErrorTimeout+0x110>)
 800e6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e6c8:	f004 f864 	bl	8012794 <LoRaMacClassBIsBeaconExpected>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d007      	beq.n	800e6e2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e6d2:	2002      	movs	r0, #2
 800e6d4:	f004 f812 	bl	80126fc <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e6d8:	2000      	movs	r0, #0
 800e6da:	f004 f834 	bl	8012746 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e6e2:	4b33      	ldr	r3, [pc, #204]	; (800e7b0 <HandleRadioRxErrorTimeout+0x10c>)
 800e6e4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d119      	bne.n	800e720 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e6ec:	f004 f859 	bl	80127a2 <LoRaMacClassBIsPingExpected>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d007      	beq.n	800e706 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	f004 f80a 	bl	8012710 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e6fc:	2000      	movs	r0, #0
 800e6fe:	f004 f82b 	bl	8012758 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e702:	2301      	movs	r3, #1
 800e704:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e706:	f004 f853 	bl	80127b0 <LoRaMacClassBIsMulticastExpected>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d007      	beq.n	800e720 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e710:	2000      	movs	r0, #0
 800e712:	f004 f807 	bl	8012724 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e716:	2000      	movs	r0, #0
 800e718:	f004 f827 	bl	801276a <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e71c:	2301      	movs	r3, #1
 800e71e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e720:	7bfb      	ldrb	r3, [r7, #15]
 800e722:	f083 0301 	eor.w	r3, r3, #1
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d03b      	beq.n	800e7a4 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e72c:	4b22      	ldr	r3, [pc, #136]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e72e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800e732:	2b00      	cmp	r3, #0
 800e734:	d122      	bne.n	800e77c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e736:	4b20      	ldr	r3, [pc, #128]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e738:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d003      	beq.n	800e748 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e740:	4a1d      	ldr	r2, [pc, #116]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e742:	79fb      	ldrb	r3, [r7, #7]
 800e744:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e748:	79fb      	ldrb	r3, [r7, #7]
 800e74a:	4618      	mov	r0, r3
 800e74c:	f004 fcda 	bl	8013104 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e750:	4b17      	ldr	r3, [pc, #92]	; (800e7b0 <HandleRadioRxErrorTimeout+0x10c>)
 800e752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e754:	4618      	mov	r0, r3
 800e756:	f00d ffd7 	bl	801c708 <UTIL_TIMER_GetElapsedTime>
 800e75a:	4602      	mov	r2, r0
 800e75c:	4b16      	ldr	r3, [pc, #88]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e75e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800e762:	429a      	cmp	r2, r3
 800e764:	d31e      	bcc.n	800e7a4 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e766:	4815      	ldr	r0, [pc, #84]	; (800e7bc <HandleRadioRxErrorTimeout+0x118>)
 800e768:	f00d fea2 	bl	801c4b0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e76c:	4a12      	ldr	r2, [pc, #72]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e76e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e772:	f043 0320 	orr.w	r3, r3, #32
 800e776:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800e77a:	e013      	b.n	800e7a4 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e77c:	4b0e      	ldr	r3, [pc, #56]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e77e:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800e782:	2b00      	cmp	r3, #0
 800e784:	d003      	beq.n	800e78e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e786:	4a0c      	ldr	r2, [pc, #48]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e788:	79bb      	ldrb	r3, [r7, #6]
 800e78a:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e78e:	79bb      	ldrb	r3, [r7, #6]
 800e790:	4618      	mov	r0, r3
 800e792:	f004 fcb7 	bl	8013104 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e796:	4a08      	ldr	r2, [pc, #32]	; (800e7b8 <HandleRadioRxErrorTimeout+0x114>)
 800e798:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e79c:	f043 0320 	orr.w	r3, r3, #32
 800e7a0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e7a4:	f7ff f9ce 	bl	800db44 <UpdateRxSlotIdleState>
}
 800e7a8:	bf00      	nop
 800e7aa:	3710      	adds	r7, #16
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	20000b90 	.word	0x20000b90
 800e7b4:	0801dd4c 	.word	0x0801dd4c
 800e7b8:	20000670 	.word	0x20000670
 800e7bc:	20000a08 	.word	0x20000a08

0800e7c0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e7c4:	2106      	movs	r1, #6
 800e7c6:	2005      	movs	r0, #5
 800e7c8:	f7ff ff6c 	bl	800e6a4 <HandleRadioRxErrorTimeout>
}
 800e7cc:	bf00      	nop
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e7d4:	2104      	movs	r1, #4
 800e7d6:	2003      	movs	r0, #3
 800e7d8:	f7ff ff64 	bl	800e6a4 <HandleRadioRxErrorTimeout>
}
 800e7dc:	bf00      	nop
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e7ea:	607b      	str	r3, [r7, #4]
  return(result);
 800e7ec:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e7ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7f0:	b672      	cpsid	i
}
 800e7f2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e7f4:	4b1d      	ldr	r3, [pc, #116]	; (800e86c <LoRaMacHandleIrqEvents+0x8c>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e7fa:	4b1c      	ldr	r3, [pc, #112]	; (800e86c <LoRaMacHandleIrqEvents+0x8c>)
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	601a      	str	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	f383 8810 	msr	PRIMASK, r3
}
 800e80a:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d027      	beq.n	800e862 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e812:	783b      	ldrb	r3, [r7, #0]
 800e814:	f003 0320 	and.w	r3, r3, #32
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d001      	beq.n	800e822 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e81e:	f7ff f9a9 	bl	800db74 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e822:	783b      	ldrb	r3, [r7, #0]
 800e824:	f003 0310 	and.w	r3, r3, #16
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e82e:	f7ff fa55 	bl	800dcdc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e832:	783b      	ldrb	r3, [r7, #0]
 800e834:	f003 0308 	and.w	r3, r3, #8
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e83e:	f7ff ff05 	bl	800e64c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e842:	783b      	ldrb	r3, [r7, #0]
 800e844:	f003 0304 	and.w	r3, r3, #4
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d001      	beq.n	800e852 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e84e:	f7ff ffb7 	bl	800e7c0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e852:	783b      	ldrb	r3, [r7, #0]
 800e854:	f003 0302 	and.w	r3, r3, #2
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e85e:	f7ff ffb7 	bl	800e7d0 <ProcessRadioRxTimeout>
        }
    }
}
 800e862:	bf00      	nop
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop
 800e86c:	20001738 	.word	0x20001738

0800e870 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e870:	b480      	push	{r7}
 800e872:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e874:	4b0c      	ldr	r3, [pc, #48]	; (800e8a8 <LoRaMacIsBusy+0x38>)
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <LoRaMacIsBusy+0x16>
    {
        return true;
 800e882:	2301      	movs	r3, #1
 800e884:	e00c      	b.n	800e8a0 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e886:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <LoRaMacIsBusy+0x3c>)
 800e888:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d106      	bne.n	800e89e <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e890:	4b06      	ldr	r3, [pc, #24]	; (800e8ac <LoRaMacIsBusy+0x3c>)
 800e892:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e896:	2b01      	cmp	r3, #1
 800e898:	d101      	bne.n	800e89e <LoRaMacIsBusy+0x2e>
    {
        return false;
 800e89a:	2300      	movs	r3, #0
 800e89c:	e000      	b.n	800e8a0 <LoRaMacIsBusy+0x30>
    }
    return true;
 800e89e:	2301      	movs	r3, #1
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bc80      	pop	{r7}
 800e8a6:	4770      	bx	lr
 800e8a8:	20001738 	.word	0x20001738
 800e8ac:	20000670 	.word	0x20000670

0800e8b0 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b083      	sub	sp, #12
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e8ba:	4a04      	ldr	r2, [pc, #16]	; (800e8cc <LoRaMacEnableRequests+0x1c>)
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bc80      	pop	{r7}
 800e8ca:	4770      	bx	lr
 800e8cc:	20000670 	.word	0x20000670

0800e8d0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e8d6:	4b2c      	ldr	r3, [pc, #176]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e8d8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e8dc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e8de:	4b2a      	ldr	r3, [pc, #168]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e8e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d14a      	bne.n	800e97e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e8e8:	4b27      	ldr	r3, [pc, #156]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e8ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e8ee:	f003 0301 	and.w	r3, r3, #1
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d006      	beq.n	800e906 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e8f8:	4a23      	ldr	r2, [pc, #140]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e8fa:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e8fe:	f36f 0300 	bfc	r3, #0, #1
 800e902:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e906:	4b20      	ldr	r3, [pc, #128]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e908:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	b2db      	uxtb	r3, r3
 800e912:	2b00      	cmp	r3, #0
 800e914:	d006      	beq.n	800e924 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e916:	4a1c      	ldr	r2, [pc, #112]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e918:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e91c:	f36f 0382 	bfc	r3, #2, #1
 800e920:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e924:	2001      	movs	r0, #1
 800e926:	f7ff ffc3 	bl	800e8b0 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e92a:	793b      	ldrb	r3, [r7, #4]
 800e92c:	f003 0301 	and.w	r3, r3, #1
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b00      	cmp	r3, #0
 800e934:	d005      	beq.n	800e942 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e936:	4b14      	ldr	r3, [pc, #80]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e938:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	4813      	ldr	r0, [pc, #76]	; (800e98c <LoRaMacHandleRequestEvents+0xbc>)
 800e940:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e942:	793b      	ldrb	r3, [r7, #4]
 800e944:	f003 0304 	and.w	r3, r3, #4
 800e948:	b2db      	uxtb	r3, r3
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d00e      	beq.n	800e96c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e94e:	4810      	ldr	r0, [pc, #64]	; (800e990 <LoRaMacHandleRequestEvents+0xc0>)
 800e950:	f004 fc26 	bl	80131a0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e954:	f004 fc70 	bl	8013238 <LoRaMacConfirmQueueGetCnt>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d006      	beq.n	800e96c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e95e:	4a0a      	ldr	r2, [pc, #40]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e960:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e964:	f043 0304 	orr.w	r3, r3, #4
 800e968:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e96c:	f003 ff3e 	bl	80127ec <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e970:	4a05      	ldr	r2, [pc, #20]	; (800e988 <LoRaMacHandleRequestEvents+0xb8>)
 800e972:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e976:	f36f 1345 	bfc	r3, #5, #1
 800e97a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 800e97e:	bf00      	nop
 800e980:	3708      	adds	r7, #8
 800e982:	46bd      	mov	sp, r7
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	20000670 	.word	0x20000670
 800e98c:	20000ab4 	.word	0x20000ab4
 800e990:	20000ac8 	.word	0x20000ac8

0800e994 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e99a:	4b07      	ldr	r3, [pc, #28]	; (800e9b8 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e99c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d105      	bne.n	800e9b0 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e9a8:	1dfb      	adds	r3, r7, #7
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f004 f9de 	bl	8012d6c <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e9b0:	bf00      	nop
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	20000670 	.word	0x20000670

0800e9bc <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e9c0:	4b16      	ldr	r3, [pc, #88]	; (800ea1c <LoRaMacHandleIndicationEvents+0x60>)
 800e9c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e9c6:	f003 0308 	and.w	r3, r3, #8
 800e9ca:	b2db      	uxtb	r3, r3
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d00d      	beq.n	800e9ec <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e9d0:	4a12      	ldr	r2, [pc, #72]	; (800ea1c <LoRaMacHandleIndicationEvents+0x60>)
 800e9d2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800e9d6:	f36f 03c3 	bfc	r3, #3, #1
 800e9da:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e9de:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <LoRaMacHandleIndicationEvents+0x60>)
 800e9e0:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	490e      	ldr	r1, [pc, #56]	; (800ea20 <LoRaMacHandleIndicationEvents+0x64>)
 800e9e8:	480e      	ldr	r0, [pc, #56]	; (800ea24 <LoRaMacHandleIndicationEvents+0x68>)
 800e9ea:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e9ec:	4b0b      	ldr	r3, [pc, #44]	; (800ea1c <LoRaMacHandleIndicationEvents+0x60>)
 800e9ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800e9f2:	f003 0302 	and.w	r3, r3, #2
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00d      	beq.n	800ea18 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e9fc:	4a07      	ldr	r2, [pc, #28]	; (800ea1c <LoRaMacHandleIndicationEvents+0x60>)
 800e9fe:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ea02:	f36f 0341 	bfc	r3, #1, #1
 800ea06:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800ea0a:	4b04      	ldr	r3, [pc, #16]	; (800ea1c <LoRaMacHandleIndicationEvents+0x60>)
 800ea0c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	4903      	ldr	r1, [pc, #12]	; (800ea20 <LoRaMacHandleIndicationEvents+0x64>)
 800ea14:	4804      	ldr	r0, [pc, #16]	; (800ea28 <LoRaMacHandleIndicationEvents+0x6c>)
 800ea16:	4798      	blx	r3
    }
}
 800ea18:	bf00      	nop
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	20000670 	.word	0x20000670
 800ea20:	20000b00 	.word	0x20000b00
 800ea24:	20000adc 	.word	0x20000adc
 800ea28:	20000a94 	.word	0x20000a94

0800ea2c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ea32:	4b2a      	ldr	r3, [pc, #168]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800ea34:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d048      	beq.n	800ead4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800ea42:	2300      	movs	r3, #0
 800ea44:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800ea46:	2300      	movs	r3, #0
 800ea48:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ea4a:	4b24      	ldr	r3, [pc, #144]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800ea4c:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d004      	beq.n	800ea5e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800ea54:	4b21      	ldr	r3, [pc, #132]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800ea56:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800ea5a:	2b03      	cmp	r3, #3
 800ea5c:	d104      	bne.n	800ea68 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800ea5e:	f002 f8ed 	bl	8010c3c <CheckRetransUnconfirmedUplink>
 800ea62:	4603      	mov	r3, r0
 800ea64:	71fb      	strb	r3, [r7, #7]
 800ea66:	e010      	b.n	800ea8a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ea68:	4b1c      	ldr	r3, [pc, #112]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800ea6a:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d10b      	bne.n	800ea8a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800ea72:	4b1a      	ldr	r3, [pc, #104]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800ea74:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d004      	beq.n	800ea86 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ea7c:	f002 f90a 	bl	8010c94 <CheckRetransConfirmedUplink>
 800ea80:	4603      	mov	r3, r0
 800ea82:	71fb      	strb	r3, [r7, #7]
 800ea84:	e001      	b.n	800ea8a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800ea86:	2301      	movs	r3, #1
 800ea88:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800ea8a:	79fb      	ldrb	r3, [r7, #7]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00d      	beq.n	800eaac <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ea90:	4813      	ldr	r0, [pc, #76]	; (800eae0 <LoRaMacHandleMcpsRequest+0xb4>)
 800ea92:	f00d fd0d 	bl	801c4b0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ea96:	4b11      	ldr	r3, [pc, #68]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800ea98:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ea9c:	f023 0320 	bic.w	r3, r3, #32
 800eaa0:	4a0e      	ldr	r2, [pc, #56]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800eaa2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800eaa6:	f002 f92f 	bl	8010d08 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800eaaa:	e013      	b.n	800ead4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800eaac:	79bb      	ldrb	r3, [r7, #6]
 800eaae:	f083 0301 	eor.w	r3, r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d00d      	beq.n	800ead4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800eab8:	4a08      	ldr	r2, [pc, #32]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800eaba:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800eabe:	f36f 1345 	bfc	r3, #5, #1
 800eac2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800eac6:	4b05      	ldr	r3, [pc, #20]	; (800eadc <LoRaMacHandleMcpsRequest+0xb0>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800eace:	2000      	movs	r0, #0
 800ead0:	f000 f9c8 	bl	800ee64 <OnTxDelayedTimerEvent>
}
 800ead4:	bf00      	nop
 800ead6:	3708      	adds	r7, #8
 800ead8:	46bd      	mov	sp, r7
 800eada:	bd80      	pop	{r7, pc}
 800eadc:	20000670 	.word	0x20000670
 800eae0:	200009d8 	.word	0x200009d8

0800eae4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eae8:	4b18      	ldr	r3, [pc, #96]	; (800eb4c <LoRaMacHandleMlmeRequest+0x68>)
 800eaea:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800eaee:	f003 0304 	and.w	r3, r3, #4
 800eaf2:	b2db      	uxtb	r3, r3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d026      	beq.n	800eb46 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800eaf8:	2001      	movs	r0, #1
 800eafa:	f004 fb37 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d012      	beq.n	800eb2a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800eb04:	2001      	movs	r0, #1
 800eb06:	f004 fad3 	bl	80130b0 <LoRaMacConfirmQueueGetStatus>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d103      	bne.n	800eb18 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800eb10:	4b0e      	ldr	r3, [pc, #56]	; (800eb4c <LoRaMacHandleMlmeRequest+0x68>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb18:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <LoRaMacHandleMlmeRequest+0x68>)
 800eb1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb1e:	f023 0302 	bic.w	r3, r3, #2
 800eb22:	4a0a      	ldr	r2, [pc, #40]	; (800eb4c <LoRaMacHandleMlmeRequest+0x68>)
 800eb24:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800eb28:	e00d      	b.n	800eb46 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800eb2a:	2005      	movs	r0, #5
 800eb2c:	f004 fb1e 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d007      	beq.n	800eb46 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb36:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <LoRaMacHandleMlmeRequest+0x68>)
 800eb38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb3c:	f023 0302 	bic.w	r3, r3, #2
 800eb40:	4a02      	ldr	r2, [pc, #8]	; (800eb4c <LoRaMacHandleMlmeRequest+0x68>)
 800eb42:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800eb46:	bf00      	nop
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20000670 	.word	0x20000670

0800eb50 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800eb54:	200b      	movs	r0, #11
 800eb56:	f004 fb09 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d019      	beq.n	800eb94 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800eb60:	4b0e      	ldr	r3, [pc, #56]	; (800eb9c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800eb62:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d111      	bne.n	800eb94 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800eb70:	4b0a      	ldr	r3, [pc, #40]	; (800eb9c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800eb72:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800eb76:	f003 0304 	and.w	r3, r3, #4
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d009      	beq.n	800eb94 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eb80:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800eb82:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800eb86:	f023 0302 	bic.w	r3, r3, #2
 800eb8a:	4a04      	ldr	r2, [pc, #16]	; (800eb9c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800eb8c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800eb90:	2301      	movs	r3, #1
 800eb92:	e000      	b.n	800eb96 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800eb94:	2300      	movs	r3, #0
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20000670 	.word	0x20000670

0800eba0 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	4603      	mov	r3, r0
 800eba8:	71fb      	strb	r3, [r7, #7]
 800ebaa:	460b      	mov	r3, r1
 800ebac:	71bb      	strb	r3, [r7, #6]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800ebb2:	79fb      	ldrb	r3, [r7, #7]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00a      	beq.n	800ebce <CheckForMinimumAbpDatarate+0x2e>
 800ebb8:	79bb      	ldrb	r3, [r7, #6]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d107      	bne.n	800ebce <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800ebbe:	797b      	ldrb	r3, [r7, #5]
 800ebc0:	f083 0301 	eor.w	r3, r3, #1
 800ebc4:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d001      	beq.n	800ebce <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e000      	b.n	800ebd0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bc80      	pop	{r7}
 800ebd8:	4770      	bx	lr
	...

0800ebdc <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800ebe0:	4b0d      	ldr	r3, [pc, #52]	; (800ec18 <LoRaMacCheckForRxAbort+0x3c>)
 800ebe2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ebe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00f      	beq.n	800ec0e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800ebee:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <LoRaMacCheckForRxAbort+0x3c>)
 800ebf0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ebf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebf8:	4a07      	ldr	r2, [pc, #28]	; (800ec18 <LoRaMacCheckForRxAbort+0x3c>)
 800ebfa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ebfe:	4b06      	ldr	r3, [pc, #24]	; (800ec18 <LoRaMacCheckForRxAbort+0x3c>)
 800ec00:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec04:	f023 0302 	bic.w	r3, r3, #2
 800ec08:	4a03      	ldr	r2, [pc, #12]	; (800ec18 <LoRaMacCheckForRxAbort+0x3c>)
 800ec0a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800ec0e:	bf00      	nop
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bc80      	pop	{r7}
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	20000670 	.word	0x20000670

0800ec1c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800ec24:	2300      	movs	r3, #0
 800ec26:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800ec2c:	4b50      	ldr	r3, [pc, #320]	; (800ed70 <LoRaMacHandleNvm+0x154>)
 800ec2e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	f040 8098 	bne.w	800ed68 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2124      	movs	r1, #36	; 0x24
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f009 fb41 	bl	80182c4 <Crc32>
 800ec42:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d006      	beq.n	800ec5c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	68ba      	ldr	r2, [r7, #8]
 800ec52:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ec54:	89fb      	ldrh	r3, [r7, #14]
 800ec56:	f043 0301 	orr.w	r3, r3, #1
 800ec5a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	3328      	adds	r3, #40	; 0x28
 800ec60:	2114      	movs	r1, #20
 800ec62:	4618      	mov	r0, r3
 800ec64:	f009 fb2e 	bl	80182c4 <Crc32>
 800ec68:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec6e:	68ba      	ldr	r2, [r7, #8]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d006      	beq.n	800ec82 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	68ba      	ldr	r2, [r7, #8]
 800ec78:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ec7a:	89fb      	ldrh	r3, [r7, #14]
 800ec7c:	f043 0302 	orr.w	r3, r3, #2
 800ec80:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	3340      	adds	r3, #64	; 0x40
 800ec86:	21e0      	movs	r1, #224	; 0xe0
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f009 fb1b 	bl	80182c4 <Crc32>
 800ec8e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d007      	beq.n	800ecac <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800eca4:	89fb      	ldrh	r3, [r7, #14]
 800eca6:	f043 0304 	orr.w	r3, r3, #4
 800ecaa:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ecb2:	21bc      	movs	r1, #188	; 0xbc
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f009 fb05 	bl	80182c4 <Crc32>
 800ecba:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800ecc2:	68ba      	ldr	r2, [r7, #8]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d007      	beq.n	800ecd8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	68ba      	ldr	r2, [r7, #8]
 800eccc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ecd0:	89fb      	ldrh	r3, [r7, #14]
 800ecd2:	f043 0308 	orr.w	r3, r3, #8
 800ecd6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ecde:	2110      	movs	r1, #16
 800ece0:	4618      	mov	r0, r3
 800ece2:	f009 faef 	bl	80182c4 <Crc32>
 800ece6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800ecee:	68ba      	ldr	r2, [r7, #8]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d007      	beq.n	800ed04 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68ba      	ldr	r2, [r7, #8]
 800ecf8:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ecfc:	89fb      	ldrh	r3, [r7, #14]
 800ecfe:	f043 0310 	orr.w	r3, r3, #16
 800ed02:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800ed0a:	f44f 715e 	mov.w	r1, #888	; 0x378
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f009 fad8 	bl	80182c4 <Crc32>
 800ed14:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 3570 	ldr.w	r3, [r3, #1392]	; 0x570
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	429a      	cmp	r2, r3
 800ed20:	d007      	beq.n	800ed32 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	68ba      	ldr	r2, [r7, #8]
 800ed26:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ed2a:	89fb      	ldrh	r3, [r7, #14]
 800ed2c:	f043 0320 	orr.w	r3, r3, #32
 800ed30:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f203 5374 	addw	r3, r3, #1396	; 0x574
 800ed38:	2114      	movs	r1, #20
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f009 fac2 	bl	80182c4 <Crc32>
 800ed40:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 800ed48:	68ba      	ldr	r2, [r7, #8]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d007      	beq.n	800ed5e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	68ba      	ldr	r2, [r7, #8]
 800ed52:	f8c3 2588 	str.w	r2, [r3, #1416]	; 0x588
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ed56:	89fb      	ldrh	r3, [r7, #14]
 800ed58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed5c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800ed5e:	89fb      	ldrh	r3, [r7, #14]
 800ed60:	4618      	mov	r0, r3
 800ed62:	f002 f80d 	bl	8010d80 <CallNvmDataChangeCallback>
 800ed66:	e000      	b.n	800ed6a <LoRaMacHandleNvm+0x14e>
        return;
 800ed68:	bf00      	nop
}
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	20000670 	.word	0x20000670

0800ed74 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d00d      	beq.n	800eda0 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ed84:	6838      	ldr	r0, [r7, #0]
 800ed86:	f00d fcbf 	bl	801c708 <UTIL_TIMER_GetElapsedTime>
 800ed8a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d905      	bls.n	800eda0 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800ed94:	4b05      	ldr	r3, [pc, #20]	; (800edac <LoRaMacHandleResponseTimeout+0x38>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	e000      	b.n	800eda2 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3710      	adds	r7, #16
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	20000b90 	.word	0x20000b90

0800edb0 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800edb6:	2300      	movs	r3, #0
 800edb8:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800edba:	f7ff fd11 	bl	800e7e0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800edbe:	f003 fd84 	bl	80128ca <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800edc2:	4b26      	ldr	r3, [pc, #152]	; (800ee5c <LoRaMacProcess+0xac>)
 800edc4:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800edc8:	f003 0320 	and.w	r3, r3, #32
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d025      	beq.n	800ee1e <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800edd2:	2000      	movs	r0, #0
 800edd4:	f7ff fd6c 	bl	800e8b0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800edd8:	f7ff ff00 	bl	800ebdc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800eddc:	f001 ffee 	bl	8010dbc <IsRequestPending>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d006      	beq.n	800edf4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ede6:	f7ff feb3 	bl	800eb50 <LoRaMacCheckForBeaconAcquisition>
 800edea:	4603      	mov	r3, r0
 800edec:	461a      	mov	r2, r3
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4313      	orrs	r3, r2
 800edf2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800edf4:	79fb      	ldrb	r3, [r7, #7]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d103      	bne.n	800ee02 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800edfa:	f7ff fe73 	bl	800eae4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800edfe:	f7ff fe15 	bl	800ea2c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ee02:	f7ff fd65 	bl	800e8d0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ee06:	f7ff fdc5 	bl	800e994 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ee0a:	2001      	movs	r0, #1
 800ee0c:	f7ff fd50 	bl	800e8b0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ee10:	4a12      	ldr	r2, [pc, #72]	; (800ee5c <LoRaMacProcess+0xac>)
 800ee12:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ee16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800ee1e:	f7ff fdcd 	bl	800e9bc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ee22:	4b0e      	ldr	r3, [pc, #56]	; (800ee5c <LoRaMacProcess+0xac>)
 800ee24:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d101      	bne.n	800ee30 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ee2c:	f001 fbe0 	bl	80105f0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ee30:	4b0a      	ldr	r3, [pc, #40]	; (800ee5c <LoRaMacProcess+0xac>)
 800ee32:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800ee36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d009      	beq.n	800ee54 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ee40:	4a06      	ldr	r2, [pc, #24]	; (800ee5c <LoRaMacProcess+0xac>)
 800ee42:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ee46:	f36f 1386 	bfc	r3, #6, #1
 800ee4a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800ee4e:	4804      	ldr	r0, [pc, #16]	; (800ee60 <LoRaMacProcess+0xb0>)
 800ee50:	f7ff fee4 	bl	800ec1c <LoRaMacHandleNvm>
    }
}
 800ee54:	bf00      	nop
 800ee56:	3708      	adds	r7, #8
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}
 800ee5c:	20000670 	.word	0x20000670
 800ee60:	20000b90 	.word	0x20000b90

0800ee64 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ee6c:	481e      	ldr	r0, [pc, #120]	; (800eee8 <OnTxDelayedTimerEvent+0x84>)
 800ee6e:	f00d fb1f 	bl	801c4b0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ee72:	4b1e      	ldr	r3, [pc, #120]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800ee74:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ee78:	f023 0320 	bic.w	r3, r3, #32
 800ee7c:	4a1b      	ldr	r2, [pc, #108]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800ee7e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ee82:	4b1b      	ldr	r3, [pc, #108]	; (800eef0 <OnTxDelayedTimerEvent+0x8c>)
 800ee84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee88:	4a18      	ldr	r2, [pc, #96]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800ee8a:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 800ee8e:	4611      	mov	r1, r2
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7ff ff6f 	bl	800ed74 <LoRaMacHandleResponseTimeout>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d11e      	bne.n	800eeda <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ee9c:	2001      	movs	r0, #1
 800ee9e:	f001 f92d 	bl	80100fc <ScheduleTx>
 800eea2:	4603      	mov	r3, r0
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d01a      	beq.n	800eede <OnTxDelayedTimerEvent+0x7a>
 800eea8:	2b0b      	cmp	r3, #11
 800eeaa:	d018      	beq.n	800eede <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800eeac:	4b10      	ldr	r3, [pc, #64]	; (800eef0 <OnTxDelayedTimerEvent+0x8c>)
 800eeae:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	4b0d      	ldr	r3, [pc, #52]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800eeb6:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800eeba:	4b0c      	ldr	r3, [pc, #48]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800eebc:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800eec0:	4b0a      	ldr	r3, [pc, #40]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800eec2:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800eec6:	4b09      	ldr	r3, [pc, #36]	; (800eeec <OnTxDelayedTimerEvent+0x88>)
 800eec8:	2209      	movs	r2, #9
 800eeca:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800eece:	2009      	movs	r0, #9
 800eed0:	f004 f918 	bl	8013104 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800eed4:	f001 ff18 	bl	8010d08 <StopRetransmission>
            break;
 800eed8:	e002      	b.n	800eee0 <OnTxDelayedTimerEvent+0x7c>
        return;
 800eeda:	bf00      	nop
 800eedc:	e000      	b.n	800eee0 <OnTxDelayedTimerEvent+0x7c>
            break;
 800eede:	bf00      	nop
        }
    }
}
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
 800eee6:	bf00      	nop
 800eee8:	200009d8 	.word	0x200009d8
 800eeec:	20000670 	.word	0x20000670
 800eef0:	20000b90 	.word	0x20000b90

0800eef4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800eefc:	4b17      	ldr	r3, [pc, #92]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800eefe:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800ef02:	4b16      	ldr	r3, [pc, #88]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef04:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ef08:	4b15      	ldr	r3, [pc, #84]	; (800ef60 <OnRxWindow1TimerEvent+0x6c>)
 800ef0a:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ef0e:	b25a      	sxtb	r2, r3
 800ef10:	4b12      	ldr	r3, [pc, #72]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef12:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ef16:	4b12      	ldr	r3, [pc, #72]	; (800ef60 <OnRxWindow1TimerEvent+0x6c>)
 800ef18:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ef1c:	4b0f      	ldr	r3, [pc, #60]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef1e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ef22:	4b0f      	ldr	r3, [pc, #60]	; (800ef60 <OnRxWindow1TimerEvent+0x6c>)
 800ef24:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ef28:	4b0c      	ldr	r3, [pc, #48]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef2a:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ef2e:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ef36:	4b09      	ldr	r3, [pc, #36]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef38:	2200      	movs	r2, #0
 800ef3a:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ef3e:	4b08      	ldr	r3, [pc, #32]	; (800ef60 <OnRxWindow1TimerEvent+0x6c>)
 800ef40:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800ef44:	4b05      	ldr	r3, [pc, #20]	; (800ef5c <OnRxWindow1TimerEvent+0x68>)
 800ef46:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ef4a:	4906      	ldr	r1, [pc, #24]	; (800ef64 <OnRxWindow1TimerEvent+0x70>)
 800ef4c:	4806      	ldr	r0, [pc, #24]	; (800ef68 <OnRxWindow1TimerEvent+0x74>)
 800ef4e:	f001 fb1b 	bl	8010588 <RxWindowSetup>
}
 800ef52:	bf00      	nop
 800ef54:	3708      	adds	r7, #8
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	20000670 	.word	0x20000670
 800ef60:	20000b90 	.word	0x20000b90
 800ef64:	20000a28 	.word	0x20000a28
 800ef68:	200009f0 	.word	0x200009f0

0800ef6c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ef74:	4b19      	ldr	r3, [pc, #100]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800ef76:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d029      	beq.n	800efd2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ef7e:	4b17      	ldr	r3, [pc, #92]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800ef80:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800ef84:	4b15      	ldr	r3, [pc, #84]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800ef86:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ef8a:	4b15      	ldr	r3, [pc, #84]	; (800efe0 <OnRxWindow2TimerEvent+0x74>)
 800ef8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef8e:	4a13      	ldr	r2, [pc, #76]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800ef90:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ef94:	4b12      	ldr	r3, [pc, #72]	; (800efe0 <OnRxWindow2TimerEvent+0x74>)
 800ef96:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ef9a:	4b10      	ldr	r3, [pc, #64]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800ef9c:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800efa0:	4b0f      	ldr	r3, [pc, #60]	; (800efe0 <OnRxWindow2TimerEvent+0x74>)
 800efa2:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800efa8:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800efac:	4b0b      	ldr	r3, [pc, #44]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800efae:	2200      	movs	r2, #0
 800efb0:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800efb4:	4b09      	ldr	r3, [pc, #36]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800efb6:	2201      	movs	r2, #1
 800efb8:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800efbc:	4b08      	ldr	r3, [pc, #32]	; (800efe0 <OnRxWindow2TimerEvent+0x74>)
 800efbe:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800efc2:	4b06      	ldr	r3, [pc, #24]	; (800efdc <OnRxWindow2TimerEvent+0x70>)
 800efc4:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800efc8:	4906      	ldr	r1, [pc, #24]	; (800efe4 <OnRxWindow2TimerEvent+0x78>)
 800efca:	4807      	ldr	r0, [pc, #28]	; (800efe8 <OnRxWindow2TimerEvent+0x7c>)
 800efcc:	f001 fadc 	bl	8010588 <RxWindowSetup>
 800efd0:	e000      	b.n	800efd4 <OnRxWindow2TimerEvent+0x68>
        return;
 800efd2:	bf00      	nop
}
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	20000670 	.word	0x20000670
 800efe0:	20000b90 	.word	0x20000b90
 800efe4:	20000a40 	.word	0x20000a40
 800efe8:	20000a08 	.word	0x20000a08

0800efec <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800eff4:	480f      	ldr	r0, [pc, #60]	; (800f034 <OnRetransmitTimeoutTimerEvent+0x48>)
 800eff6:	f00d fa5b 	bl	801c4b0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800effa:	4b0f      	ldr	r3, [pc, #60]	; (800f038 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800effc:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f000:	2b00      	cmp	r3, #0
 800f002:	d003      	beq.n	800f00c <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800f004:	4b0c      	ldr	r3, [pc, #48]	; (800f038 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f006:	2201      	movs	r2, #1
 800f008:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800f00c:	4b0a      	ldr	r3, [pc, #40]	; (800f038 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f00e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00a      	beq.n	800f02c <OnRetransmitTimeoutTimerEvent+0x40>
 800f016:	4b08      	ldr	r3, [pc, #32]	; (800f038 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f018:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f01c:	691b      	ldr	r3, [r3, #16]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d004      	beq.n	800f02c <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800f022:	4b05      	ldr	r3, [pc, #20]	; (800f038 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800f024:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	4798      	blx	r3
    }
}
 800f02c:	bf00      	nop
 800f02e:	3708      	adds	r7, #8
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	20000a74 	.word	0x20000a74
 800f038:	20000670 	.word	0x20000670

0800f03c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	60ba      	str	r2, [r7, #8]
 800f044:	607b      	str	r3, [r7, #4]
 800f046:	4603      	mov	r3, r0
 800f048:	73fb      	strb	r3, [r7, #15]
 800f04a:	460b      	mov	r3, r1
 800f04c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d005      	beq.n	800f060 <GetFCntDown+0x24>
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d002      	beq.n	800f060 <GetFCntDown+0x24>
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d101      	bne.n	800f064 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f060:	2309      	movs	r3, #9
 800f062:	e028      	b.n	800f0b6 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f064:	7bfb      	ldrb	r3, [r7, #15]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d016      	beq.n	800f098 <GetFCntDown+0x5c>
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d118      	bne.n	800f0a0 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f06e:	79bb      	ldrb	r3, [r7, #6]
 800f070:	2b01      	cmp	r3, #1
 800f072:	d10d      	bne.n	800f090 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f074:	7bbb      	ldrb	r3, [r7, #14]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d002      	beq.n	800f080 <GetFCntDown+0x44>
 800f07a:	7bbb      	ldrb	r3, [r7, #14]
 800f07c:	2b03      	cmp	r3, #3
 800f07e:	d103      	bne.n	800f088 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	2202      	movs	r2, #2
 800f084:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f086:	e00d      	b.n	800f0a4 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	2201      	movs	r2, #1
 800f08c:	701a      	strb	r2, [r3, #0]
            break;
 800f08e:	e009      	b.n	800f0a4 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800f090:	69bb      	ldr	r3, [r7, #24]
 800f092:	2203      	movs	r2, #3
 800f094:	701a      	strb	r2, [r3, #0]
            break;
 800f096:	e005      	b.n	800f0a4 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	2204      	movs	r2, #4
 800f09c:	701a      	strb	r2, [r3, #0]
            break;
 800f09e:	e001      	b.n	800f0a4 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f0a0:	2305      	movs	r3, #5
 800f0a2:	e008      	b.n	800f0b6 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800f0a4:	69bb      	ldr	r3, [r7, #24]
 800f0a6:	7818      	ldrb	r0, [r3, #0]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	89db      	ldrh	r3, [r3, #14]
 800f0ac:	69fa      	ldr	r2, [r7, #28]
 800f0ae:	4619      	mov	r1, r3
 800f0b0:	f004 fc52 	bl	8013958 <LoRaMacCryptoGetFCntDown>
 800f0b4:	4603      	mov	r3, r0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
	...

0800f0c0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f0c0:	b5b0      	push	{r4, r5, r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0ca:	2303      	movs	r3, #3
 800f0cc:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800f0ce:	4b62      	ldr	r3, [pc, #392]	; (800f258 <SwitchClass+0x198>)
 800f0d0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f0d4:	2b02      	cmp	r3, #2
 800f0d6:	f000 80a7 	beq.w	800f228 <SwitchClass+0x168>
 800f0da:	2b02      	cmp	r3, #2
 800f0dc:	f300 80b6 	bgt.w	800f24c <SwitchClass+0x18c>
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d003      	beq.n	800f0ec <SwitchClass+0x2c>
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	f000 8091 	beq.w	800f20c <SwitchClass+0x14c>
 800f0ea:	e0af      	b.n	800f24c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d107      	bne.n	800f102 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f0f2:	4b59      	ldr	r3, [pc, #356]	; (800f258 <SwitchClass+0x198>)
 800f0f4:	4a58      	ldr	r2, [pc, #352]	; (800f258 <SwitchClass+0x198>)
 800f0f6:	336c      	adds	r3, #108	; 0x6c
 800f0f8:	3264      	adds	r2, #100	; 0x64
 800f0fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f0fe:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f102:	79fb      	ldrb	r3, [r7, #7]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d10c      	bne.n	800f122 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f003 fb74 	bl	80127f8 <LoRaMacClassBSwitchClass>
 800f110:	4603      	mov	r3, r0
 800f112:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d103      	bne.n	800f122 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f11a:	4a4f      	ldr	r2, [pc, #316]	; (800f258 <SwitchClass+0x198>)
 800f11c:	79fb      	ldrb	r3, [r7, #7]
 800f11e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f122:	79fb      	ldrb	r3, [r7, #7]
 800f124:	2b02      	cmp	r3, #2
 800f126:	f040 808c 	bne.w	800f242 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f12a:	4a4b      	ldr	r2, [pc, #300]	; (800f258 <SwitchClass+0x198>)
 800f12c:	79fb      	ldrb	r3, [r7, #7]
 800f12e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f132:	4a4a      	ldr	r2, [pc, #296]	; (800f25c <SwitchClass+0x19c>)
 800f134:	4b49      	ldr	r3, [pc, #292]	; (800f25c <SwitchClass+0x19c>)
 800f136:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 800f13a:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 800f13e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f142:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f146:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f14a:	4b44      	ldr	r3, [pc, #272]	; (800f25c <SwitchClass+0x19c>)
 800f14c:	2202      	movs	r2, #2
 800f14e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f152:	2300      	movs	r3, #0
 800f154:	73bb      	strb	r3, [r7, #14]
 800f156:	e049      	b.n	800f1ec <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f158:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f15c:	4a3e      	ldr	r2, [pc, #248]	; (800f258 <SwitchClass+0x198>)
 800f15e:	212c      	movs	r1, #44	; 0x2c
 800f160:	fb01 f303 	mul.w	r3, r1, r3
 800f164:	4413      	add	r3, r2
 800f166:	33da      	adds	r3, #218	; 0xda
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d038      	beq.n	800f1e0 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f16e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f172:	4a39      	ldr	r2, [pc, #228]	; (800f258 <SwitchClass+0x198>)
 800f174:	212c      	movs	r1, #44	; 0x2c
 800f176:	fb01 f303 	mul.w	r3, r1, r3
 800f17a:	4413      	add	r3, r2
 800f17c:	33f0      	adds	r3, #240	; 0xf0
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	4a35      	ldr	r2, [pc, #212]	; (800f258 <SwitchClass+0x198>)
 800f182:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f188:	4a33      	ldr	r2, [pc, #204]	; (800f258 <SwitchClass+0x198>)
 800f18a:	212c      	movs	r1, #44	; 0x2c
 800f18c:	fb01 f303 	mul.w	r3, r1, r3
 800f190:	4413      	add	r3, r2
 800f192:	33f4      	adds	r3, #244	; 0xf4
 800f194:	f993 3000 	ldrsb.w	r3, [r3]
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	4b2f      	ldr	r3, [pc, #188]	; (800f258 <SwitchClass+0x198>)
 800f19c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f1a0:	4b2e      	ldr	r3, [pc, #184]	; (800f25c <SwitchClass+0x19c>)
 800f1a2:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800f1a6:	4b2d      	ldr	r3, [pc, #180]	; (800f25c <SwitchClass+0x19c>)
 800f1a8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f1ac:	4b2a      	ldr	r3, [pc, #168]	; (800f258 <SwitchClass+0x198>)
 800f1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1b0:	4a2a      	ldr	r2, [pc, #168]	; (800f25c <SwitchClass+0x19c>)
 800f1b2:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f1b6:	4b28      	ldr	r3, [pc, #160]	; (800f258 <SwitchClass+0x198>)
 800f1b8:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800f1bc:	4b27      	ldr	r3, [pc, #156]	; (800f25c <SwitchClass+0x19c>)
 800f1be:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f1c2:	4b25      	ldr	r3, [pc, #148]	; (800f258 <SwitchClass+0x198>)
 800f1c4:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800f1c8:	4b24      	ldr	r3, [pc, #144]	; (800f25c <SwitchClass+0x19c>)
 800f1ca:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f1ce:	4b23      	ldr	r3, [pc, #140]	; (800f25c <SwitchClass+0x19c>)
 800f1d0:	2203      	movs	r2, #3
 800f1d2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f1d6:	4b21      	ldr	r3, [pc, #132]	; (800f25c <SwitchClass+0x19c>)
 800f1d8:	2201      	movs	r2, #1
 800f1da:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800f1de:	e009      	b.n	800f1f4 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f1e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	73bb      	strb	r3, [r7, #14]
 800f1ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	ddb1      	ble.n	800f158 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f1f4:	4b19      	ldr	r3, [pc, #100]	; (800f25c <SwitchClass+0x19c>)
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f1fc:	4b18      	ldr	r3, [pc, #96]	; (800f260 <SwitchClass+0x1a0>)
 800f1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f200:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f202:	f001 f9f5 	bl	80105f0 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f20a:	e01a      	b.n	800f242 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f20c:	79fb      	ldrb	r3, [r7, #7]
 800f20e:	4618      	mov	r0, r3
 800f210:	f003 faf2 	bl	80127f8 <LoRaMacClassBSwitchClass>
 800f214:	4603      	mov	r3, r0
 800f216:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f218:	7bfb      	ldrb	r3, [r7, #15]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d113      	bne.n	800f246 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f21e:	4a0e      	ldr	r2, [pc, #56]	; (800f258 <SwitchClass+0x198>)
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 800f226:	e00e      	b.n	800f246 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f228:	79fb      	ldrb	r3, [r7, #7]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d10d      	bne.n	800f24a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f22e:	4a0a      	ldr	r2, [pc, #40]	; (800f258 <SwitchClass+0x198>)
 800f230:	79fb      	ldrb	r3, [r7, #7]
 800f232:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f236:	4b0a      	ldr	r3, [pc, #40]	; (800f260 <SwitchClass+0x1a0>)
 800f238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f23c:	2300      	movs	r3, #0
 800f23e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f240:	e003      	b.n	800f24a <SwitchClass+0x18a>
            break;
 800f242:	bf00      	nop
 800f244:	e002      	b.n	800f24c <SwitchClass+0x18c>
            break;
 800f246:	bf00      	nop
 800f248:	e000      	b.n	800f24c <SwitchClass+0x18c>
            break;
 800f24a:	bf00      	nop
        }
    }

    return status;
 800f24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bdb0      	pop	{r4, r5, r7, pc}
 800f256:	bf00      	nop
 800f258:	20000b90 	.word	0x20000b90
 800f25c:	20000670 	.word	0x20000670
 800f260:	0801dd4c 	.word	0x0801dd4c

0800f264 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b086      	sub	sp, #24
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f26e:	4b10      	ldr	r3, [pc, #64]	; (800f2b0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f270:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f274:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f276:	79fb      	ldrb	r3, [r7, #7]
 800f278:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f27a:	230d      	movs	r3, #13
 800f27c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f27e:	4b0c      	ldr	r3, [pc, #48]	; (800f2b0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f280:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f288:	230e      	movs	r3, #14
 800f28a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f28c:	4b08      	ldr	r3, [pc, #32]	; (800f2b0 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f28e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f292:	f107 0210 	add.w	r2, r7, #16
 800f296:	4611      	mov	r1, r2
 800f298:	4618      	mov	r0, r3
 800f29a:	f005 f9c0 	bl	801461e <RegionGetPhyParam>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	b2db      	uxtb	r3, r3
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3718      	adds	r7, #24
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20000b90 	.word	0x20000b90

0800f2b4 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	71fb      	strb	r3, [r7, #7]
 800f2be:	460b      	mov	r3, r1
 800f2c0:	71bb      	strb	r3, [r7, #6]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f2ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff ffc6 	bl	800f264 <GetMaxAppPayloadWithoutFOptsLength>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f2dc:	79fb      	ldrb	r3, [r7, #7]
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	797b      	ldrb	r3, [r7, #5]
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	4413      	add	r3, r2
 800f2e6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f2e8:	89ba      	ldrh	r2, [r7, #12]
 800f2ea:	89fb      	ldrh	r3, [r7, #14]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d804      	bhi.n	800f2fa <ValidatePayloadLength+0x46>
 800f2f0:	89bb      	ldrh	r3, [r7, #12]
 800f2f2:	2bff      	cmp	r3, #255	; 0xff
 800f2f4:	d801      	bhi.n	800f2fa <ValidatePayloadLength+0x46>
    {
        return true;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e000      	b.n	800f2fc <ValidatePayloadLength+0x48>
    }
    return false;
 800f2fa:	2300      	movs	r3, #0
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	3710      	adds	r7, #16
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}

0800f304 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f304:	b590      	push	{r4, r7, lr}
 800f306:	b0a5      	sub	sp, #148	; 0x94
 800f308:	af02      	add	r7, sp, #8
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	4608      	mov	r0, r1
 800f30e:	4611      	mov	r1, r2
 800f310:	461a      	mov	r2, r3
 800f312:	4603      	mov	r3, r0
 800f314:	70fb      	strb	r3, [r7, #3]
 800f316:	460b      	mov	r3, r1
 800f318:	70bb      	strb	r3, [r7, #2]
 800f31a:	4613      	mov	r3, r2
 800f31c:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f31e:	2300      	movs	r3, #0
 800f320:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 800f324:	2300      	movs	r3, #0
 800f326:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f32a:	2300      	movs	r3, #0
 800f32c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f330:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f334:	2b00      	cmp	r3, #0
 800f336:	f000 84ab 	beq.w	800fc90 <ProcessMacCommands+0x98c>
 800f33a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800f33e:	2b01      	cmp	r3, #1
 800f340:	f040 84ac 	bne.w	800fc9c <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f344:	f000 bca4 	b.w	800fc90 <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f348:	78fb      	ldrb	r3, [r7, #3]
 800f34a:	687a      	ldr	r2, [r7, #4]
 800f34c:	4413      	add	r3, r2
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	4618      	mov	r0, r3
 800f352:	f003 fd33 	bl	8012dbc <LoRaMacCommandsGetCmdSize>
 800f356:	4603      	mov	r3, r0
 800f358:	461a      	mov	r2, r3
 800f35a:	78fb      	ldrb	r3, [r7, #3]
 800f35c:	441a      	add	r2, r3
 800f35e:	78bb      	ldrb	r3, [r7, #2]
 800f360:	429a      	cmp	r2, r3
 800f362:	f300 849d 	bgt.w	800fca0 <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f366:	78fb      	ldrb	r3, [r7, #3]
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	70fa      	strb	r2, [r7, #3]
 800f36c:	461a      	mov	r2, r3
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	4413      	add	r3, r2
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	3b02      	subs	r3, #2
 800f376:	2b11      	cmp	r3, #17
 800f378:	f200 8494 	bhi.w	800fca4 <ProcessMacCommands+0x9a0>
 800f37c:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <ProcessMacCommands+0x80>)
 800f37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f382:	bf00      	nop
 800f384:	0800f3cd 	.word	0x0800f3cd
 800f388:	0800f40f 	.word	0x0800f40f
 800f38c:	0800f58b 	.word	0x0800f58b
 800f390:	0800f5c9 	.word	0x0800f5c9
 800f394:	0800f6c1 	.word	0x0800f6c1
 800f398:	0800f711 	.word	0x0800f711
 800f39c:	0800f7cd 	.word	0x0800f7cd
 800f3a0:	0800f823 	.word	0x0800f823
 800f3a4:	0800f907 	.word	0x0800f907
 800f3a8:	0800fca5 	.word	0x0800fca5
 800f3ac:	0800fca5 	.word	0x0800fca5
 800f3b0:	0800f9b1 	.word	0x0800f9b1
 800f3b4:	0800fca5 	.word	0x0800fca5
 800f3b8:	0800fca5 	.word	0x0800fca5
 800f3bc:	0800fad1 	.word	0x0800fad1
 800f3c0:	0800fb05 	.word	0x0800fb05
 800f3c4:	0800fb95 	.word	0x0800fb95
 800f3c8:	0800fc0b 	.word	0x0800fc0b
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f3cc:	2004      	movs	r0, #4
 800f3ce:	f003 fecd 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f000 845b 	beq.w	800fc90 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f3da:	2104      	movs	r1, #4
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f003 fe39 	bl	8013054 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f3e2:	78fb      	ldrb	r3, [r7, #3]
 800f3e4:	1c5a      	adds	r2, r3, #1
 800f3e6:	70fa      	strb	r2, [r7, #3]
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	4413      	add	r3, r2
 800f3ee:	781a      	ldrb	r2, [r3, #0]
 800f3f0:	4bb0      	ldr	r3, [pc, #704]	; (800f6b4 <ProcessMacCommands+0x3b0>)
 800f3f2:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f3f6:	78fb      	ldrb	r3, [r7, #3]
 800f3f8:	1c5a      	adds	r2, r3, #1
 800f3fa:	70fa      	strb	r2, [r7, #3]
 800f3fc:	461a      	mov	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	4413      	add	r3, r2
 800f402:	781a      	ldrb	r2, [r3, #0]
 800f404:	4bab      	ldr	r3, [pc, #684]	; (800f6b4 <ProcessMacCommands+0x3b0>)
 800f406:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 800f40a:	f000 bc41 	b.w	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f40e:	2300      	movs	r3, #0
 800f410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f414:	2300      	movs	r3, #0
 800f416:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f420:	2300      	movs	r3, #0
 800f422:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f426:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800f42a:	f083 0301 	eor.w	r3, r3, #1
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 80a5 	beq.w	800f580 <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 800f436:	2301      	movs	r3, #1
 800f438:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f43c:	78fb      	ldrb	r3, [r7, #3]
 800f43e:	3b01      	subs	r3, #1
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	4413      	add	r3, r2
 800f444:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f446:	4b9c      	ldr	r3, [pc, #624]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f448:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f44c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f450:	4b99      	ldr	r3, [pc, #612]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f452:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f456:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f45a:	4b97      	ldr	r3, [pc, #604]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f45c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f460:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f464:	4b94      	ldr	r3, [pc, #592]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f466:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800f46a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f46e:	4b92      	ldr	r3, [pc, #584]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f470:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800f474:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f478:	4b8f      	ldr	r3, [pc, #572]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f47a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800f47e:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f480:	4b8d      	ldr	r3, [pc, #564]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f482:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800f486:	2b00      	cmp	r3, #0
 800f488:	d008      	beq.n	800f49c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f48a:	78ba      	ldrb	r2, [r7, #2]
 800f48c:	78fb      	ldrb	r3, [r7, #3]
 800f48e:	1ad3      	subs	r3, r2, r3
 800f490:	b2db      	uxtb	r3, r3
 800f492:	3301      	adds	r3, #1
 800f494:	b2db      	uxtb	r3, r3
 800f496:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800f49a:	e002      	b.n	800f4a2 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f49c:	2305      	movs	r3, #5
 800f49e:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f4a2:	4b85      	ldr	r3, [pc, #532]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f4a4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800f4a8:	f107 0456 	add.w	r4, r7, #86	; 0x56
 800f4ac:	f107 0257 	add.w	r2, r7, #87	; 0x57
 800f4b0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f4b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f4b8:	9301      	str	r3, [sp, #4]
 800f4ba:	f107 0355 	add.w	r3, r7, #85	; 0x55
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	4623      	mov	r3, r4
 800f4c2:	f005 f9b3 	bl	801482c <RegionLinkAdrReq>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f4cc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f4d0:	f003 0307 	and.w	r3, r3, #7
 800f4d4:	2b07      	cmp	r3, #7
 800f4d6:	d119      	bne.n	800f50c <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f4d8:	4b77      	ldr	r3, [pc, #476]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f4da:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 800f4de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	da03      	bge.n	800f4ee <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f4e6:	4b74      	ldr	r3, [pc, #464]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f4ee:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 800f4f2:	4b71      	ldr	r3, [pc, #452]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f4f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f4f8:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 800f4fc:	4b6e      	ldr	r3, [pc, #440]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f4fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f502:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800f506:	4b6c      	ldr	r3, [pc, #432]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f508:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f50c:	2300      	movs	r3, #0
 800f50e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f512:	e00b      	b.n	800f52c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f514:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 800f518:	2201      	movs	r2, #1
 800f51a:	4619      	mov	r1, r3
 800f51c:	2003      	movs	r0, #3
 800f51e:	f003 fafd 	bl	8012b1c <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f522:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800f526:	3301      	adds	r3, #1
 800f528:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f52c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f530:	4a62      	ldr	r2, [pc, #392]	; (800f6bc <ProcessMacCommands+0x3b8>)
 800f532:	fba2 2303 	umull	r2, r3, r2, r3
 800f536:	089b      	lsrs	r3, r3, #2
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 800f53e:	429a      	cmp	r2, r3
 800f540:	d3e8      	bcc.n	800f514 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f542:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f546:	78fb      	ldrb	r3, [r7, #3]
 800f548:	4413      	add	r3, r2
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	3b01      	subs	r3, #1
 800f54e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f550:	78fa      	ldrb	r2, [r7, #3]
 800f552:	78bb      	ldrb	r3, [r7, #2]
 800f554:	429a      	cmp	r2, r3
 800f556:	d20a      	bcs.n	800f56e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f558:	78fb      	ldrb	r3, [r7, #3]
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	70fa      	strb	r2, [r7, #3]
 800f55e:	461a      	mov	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4413      	add	r3, r2
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b03      	cmp	r3, #3
 800f568:	f43f af68 	beq.w	800f43c <ProcessMacCommands+0x138>
 800f56c:	e000      	b.n	800f570 <ProcessMacCommands+0x26c>
                            break;
 800f56e:	bf00      	nop

                    if( macIndex < commandsSize )
 800f570:	78fa      	ldrb	r2, [r7, #3]
 800f572:	78bb      	ldrb	r3, [r7, #2]
 800f574:	429a      	cmp	r2, r3
 800f576:	d206      	bcs.n	800f586 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f578:	78fb      	ldrb	r3, [r7, #3]
 800f57a:	3b01      	subs	r3, #1
 800f57c:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f57e:	e002      	b.n	800f586 <ProcessMacCommands+0x282>
                    macIndex += 4;
 800f580:	78fb      	ldrb	r3, [r7, #3]
 800f582:	3304      	adds	r3, #4
 800f584:	70fb      	strb	r3, [r7, #3]
                break;
 800f586:	bf00      	nop
 800f588:	e382      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f58a:	78fb      	ldrb	r3, [r7, #3]
 800f58c:	1c5a      	adds	r2, r3, #1
 800f58e:	70fa      	strb	r2, [r7, #3]
 800f590:	461a      	mov	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	4413      	add	r3, r2
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	f003 030f 	and.w	r3, r3, #15
 800f59c:	b2da      	uxtb	r2, r3
 800f59e:	4b46      	ldr	r3, [pc, #280]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f5a0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f5a4:	4b44      	ldr	r3, [pc, #272]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f5a6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	4093      	lsls	r3, r2
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	4b41      	ldr	r3, [pc, #260]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f5b4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f5b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f5bc:	2200      	movs	r2, #0
 800f5be:	4619      	mov	r1, r3
 800f5c0:	2004      	movs	r0, #4
 800f5c2:	f003 faab 	bl	8012b1c <LoRaMacCommandsAddCmd>
                break;
 800f5c6:	e363      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f5c8:	2307      	movs	r3, #7
 800f5ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f5ce:	78fb      	ldrb	r3, [r7, #3]
 800f5d0:	687a      	ldr	r2, [r7, #4]
 800f5d2:	4413      	add	r3, r2
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	091b      	lsrs	r3, r3, #4
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	b25b      	sxtb	r3, r3
 800f5dc:	f003 0307 	and.w	r3, r3, #7
 800f5e0:	b25b      	sxtb	r3, r3
 800f5e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f5e6:	78fb      	ldrb	r3, [r7, #3]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	b25b      	sxtb	r3, r3
 800f5f0:	f003 030f 	and.w	r3, r3, #15
 800f5f4:	b25b      	sxtb	r3, r3
 800f5f6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 800f5fa:	78fb      	ldrb	r3, [r7, #3]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f600:	78fb      	ldrb	r3, [r7, #3]
 800f602:	1c5a      	adds	r2, r3, #1
 800f604:	70fa      	strb	r2, [r7, #3]
 800f606:	461a      	mov	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	4413      	add	r3, r2
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f610:	78fb      	ldrb	r3, [r7, #3]
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	70fa      	strb	r2, [r7, #3]
 800f616:	461a      	mov	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4413      	add	r3, r2
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	021a      	lsls	r2, r3, #8
 800f620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f622:	4313      	orrs	r3, r2
 800f624:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f626:	78fb      	ldrb	r3, [r7, #3]
 800f628:	1c5a      	adds	r2, r3, #1
 800f62a:	70fa      	strb	r2, [r7, #3]
 800f62c:	461a      	mov	r2, r3
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4413      	add	r3, r2
 800f632:	781b      	ldrb	r3, [r3, #0]
 800f634:	041a      	lsls	r2, r3, #16
 800f636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f638:	4313      	orrs	r3, r2
 800f63a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 800f63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f63e:	2264      	movs	r2, #100	; 0x64
 800f640:	fb02 f303 	mul.w	r3, r2, r3
 800f644:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f646:	4b1c      	ldr	r3, [pc, #112]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f64c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f650:	4611      	mov	r1, r2
 800f652:	4618      	mov	r0, r3
 800f654:	f005 f911 	bl	801487a <RegionRxParamSetupReq>
 800f658:	4603      	mov	r3, r0
 800f65a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f65e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f662:	f003 0307 	and.w	r3, r3, #7
 800f666:	2b07      	cmp	r3, #7
 800f668:	d117      	bne.n	800f69a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f66a:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f66e:	b2da      	uxtb	r2, r3
 800f670:	4b11      	ldr	r3, [pc, #68]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f672:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f676:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 800f67a:	b2da      	uxtb	r2, r3
 800f67c:	4b0e      	ldr	r3, [pc, #56]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f67e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f684:	4a0c      	ldr	r2, [pc, #48]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f686:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68a:	4a0b      	ldr	r2, [pc, #44]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f68c:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f68e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 800f692:	b2da      	uxtb	r2, r3
 800f694:	4b08      	ldr	r3, [pc, #32]	; (800f6b8 <ProcessMacCommands+0x3b4>)
 800f696:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 800f69a:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f69e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f6a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	2005      	movs	r0, #5
 800f6ac:	f003 fa36 	bl	8012b1c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f6b0:	bf00      	nop
 800f6b2:	e2ed      	b.n	800fc90 <ProcessMacCommands+0x98c>
 800f6b4:	20000670 	.word	0x20000670
 800f6b8:	20000b90 	.word	0x20000b90
 800f6bc:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f6c0:	23ff      	movs	r3, #255	; 0xff
 800f6c2:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f6c6:	4bb7      	ldr	r3, [pc, #732]	; (800f9a4 <ProcessMacCommands+0x6a0>)
 800f6c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00d      	beq.n	800f6ec <ProcessMacCommands+0x3e8>
 800f6d0:	4bb4      	ldr	r3, [pc, #720]	; (800f9a4 <ProcessMacCommands+0x6a0>)
 800f6d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d007      	beq.n	800f6ec <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f6dc:	4bb1      	ldr	r3, [pc, #708]	; (800f9a4 <ProcessMacCommands+0x6a0>)
 800f6de:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4798      	blx	r3
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f6ec:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800f6f0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f6f4:	787b      	ldrb	r3, [r7, #1]
 800f6f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f700:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f704:	2202      	movs	r2, #2
 800f706:	4619      	mov	r1, r3
 800f708:	2006      	movs	r0, #6
 800f70a:	f003 fa07 	bl	8012b1c <LoRaMacCommandsAddCmd>
                break;
 800f70e:	e2bf      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f710:	2303      	movs	r3, #3
 800f712:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f716:	78fb      	ldrb	r3, [r7, #3]
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	70fa      	strb	r2, [r7, #3]
 800f71c:	461a      	mov	r2, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4413      	add	r3, r2
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	b25b      	sxtb	r3, r3
 800f726:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 800f72a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f72e:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f730:	78fb      	ldrb	r3, [r7, #3]
 800f732:	1c5a      	adds	r2, r3, #1
 800f734:	70fa      	strb	r2, [r7, #3]
 800f736:	461a      	mov	r2, r3
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	4413      	add	r3, r2
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f740:	78fb      	ldrb	r3, [r7, #3]
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	70fa      	strb	r2, [r7, #3]
 800f746:	461a      	mov	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	4413      	add	r3, r2
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	021a      	lsls	r2, r3, #8
 800f750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f752:	4313      	orrs	r3, r2
 800f754:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f756:	78fb      	ldrb	r3, [r7, #3]
 800f758:	1c5a      	adds	r2, r3, #1
 800f75a:	70fa      	strb	r2, [r7, #3]
 800f75c:	461a      	mov	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4413      	add	r3, r2
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	041a      	lsls	r2, r3, #16
 800f766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f768:	4313      	orrs	r3, r2
 800f76a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 800f76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f76e:	2264      	movs	r2, #100	; 0x64
 800f770:	fb02 f303 	mul.w	r3, r2, r3
 800f774:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f77a:	78fb      	ldrb	r3, [r7, #3]
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	70fa      	strb	r2, [r7, #3]
 800f780:	461a      	mov	r2, r3
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	4413      	add	r3, r2
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	b25b      	sxtb	r3, r3
 800f78a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f78e:	4b86      	ldr	r3, [pc, #536]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f794:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800f798:	4611      	mov	r1, r2
 800f79a:	4618      	mov	r0, r3
 800f79c:	f005 f888 	bl	80148b0 <RegionNewChannelReq>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f7a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f7ac:	b25b      	sxtb	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	db0a      	blt.n	800f7c8 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 800f7b2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f7b6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f7ba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7be:	2201      	movs	r2, #1
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	2007      	movs	r0, #7
 800f7c4:	f003 f9aa 	bl	8012b1c <LoRaMacCommandsAddCmd>
                }
                break;
 800f7c8:	bf00      	nop
 800f7ca:	e261      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f7cc:	78fb      	ldrb	r3, [r7, #3]
 800f7ce:	1c5a      	adds	r2, r3, #1
 800f7d0:	70fa      	strb	r2, [r7, #3]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	f003 030f 	and.w	r3, r3, #15
 800f7de:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 800f7e2:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d104      	bne.n	800f7f4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800f7ea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f7f4:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 800f7f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f7fc:	fb02 f303 	mul.w	r3, r2, r3
 800f800:	461a      	mov	r2, r3
 800f802:	4b69      	ldr	r3, [pc, #420]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f804:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f806:	4b68      	ldr	r3, [pc, #416]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f80a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800f80e:	4a66      	ldr	r2, [pc, #408]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f810:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f812:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f816:	2200      	movs	r2, #0
 800f818:	4619      	mov	r1, r3
 800f81a:	2008      	movs	r0, #8
 800f81c:	f003 f97e 	bl	8012b1c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f820:	e236      	b.n	800fc90 <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f822:	78fb      	ldrb	r3, [r7, #3]
 800f824:	1c5a      	adds	r2, r3, #1
 800f826:	70fa      	strb	r2, [r7, #3]
 800f828:	461a      	mov	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4413      	add	r3, r2
 800f82e:	781b      	ldrb	r3, [r3, #0]
 800f830:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f834:	2300      	movs	r3, #0
 800f836:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f840:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f844:	f003 0320 	and.w	r3, r3, #32
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d002      	beq.n	800f852 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f84c:	2301      	movs	r3, #1
 800f84e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f852:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f856:	f003 0310 	and.w	r3, r3, #16
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f85e:	2301      	movs	r3, #1
 800f860:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f864:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800f868:	f003 030f 	and.w	r3, r3, #15
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f872:	4b4d      	ldr	r3, [pc, #308]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f878:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f87c:	4611      	mov	r1, r2
 800f87e:	4618      	mov	r0, r3
 800f880:	f005 f831 	bl	80148e6 <RegionTxParamSetupReq>
 800f884:	4603      	mov	r3, r0
 800f886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f88a:	d03a      	beq.n	800f902 <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f88c:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800f890:	4b45      	ldr	r3, [pc, #276]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f892:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f896:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800f89a:	4b43      	ldr	r3, [pc, #268]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f89c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f8a0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f8a4:	461a      	mov	r2, r3
 800f8a6:	4b41      	ldr	r3, [pc, #260]	; (800f9ac <ProcessMacCommands+0x6a8>)
 800f8a8:	5c9b      	ldrb	r3, [r3, r2]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7f0 ff8e 	bl	80007cc <__aeabi_ui2f>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	4a3d      	ldr	r2, [pc, #244]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f8b4:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f8b6:	2302      	movs	r3, #2
 800f8b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f8bc:	4b3a      	ldr	r3, [pc, #232]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f8be:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800f8c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f8c6:	4b38      	ldr	r3, [pc, #224]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f8c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f8cc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f8d0:	4611      	mov	r1, r2
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f004 fea3 	bl	801461e <RegionGetPhyParam>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8de:	b25a      	sxtb	r2, r3
 800f8e0:	4b31      	ldr	r3, [pc, #196]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f8e2:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	bfb8      	it	lt
 800f8ea:	4613      	movlt	r3, r2
 800f8ec:	b25a      	sxtb	r2, r3
 800f8ee:	4b2e      	ldr	r3, [pc, #184]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f8f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f8f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	2009      	movs	r0, #9
 800f8fe:	f003 f90d 	bl	8012b1c <LoRaMacCommandsAddCmd>
                }
                break;
 800f902:	bf00      	nop
 800f904:	e1c4      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f906:	2303      	movs	r3, #3
 800f908:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f90c:	78fb      	ldrb	r3, [r7, #3]
 800f90e:	1c5a      	adds	r2, r3, #1
 800f910:	70fa      	strb	r2, [r7, #3]
 800f912:	461a      	mov	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4413      	add	r3, r2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f91e:	78fb      	ldrb	r3, [r7, #3]
 800f920:	1c5a      	adds	r2, r3, #1
 800f922:	70fa      	strb	r2, [r7, #3]
 800f924:	461a      	mov	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4413      	add	r3, r2
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	1c5a      	adds	r2, r3, #1
 800f932:	70fa      	strb	r2, [r7, #3]
 800f934:	461a      	mov	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4413      	add	r3, r2
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	021a      	lsls	r2, r3, #8
 800f93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f940:	4313      	orrs	r3, r2
 800f942:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f944:	78fb      	ldrb	r3, [r7, #3]
 800f946:	1c5a      	adds	r2, r3, #1
 800f948:	70fa      	strb	r2, [r7, #3]
 800f94a:	461a      	mov	r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4413      	add	r3, r2
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	041a      	lsls	r2, r3, #16
 800f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f956:	4313      	orrs	r3, r2
 800f958:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	2264      	movs	r2, #100	; 0x64
 800f95e:	fb02 f303 	mul.w	r3, r2, r3
 800f962:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f964:	4b10      	ldr	r3, [pc, #64]	; (800f9a8 <ProcessMacCommands+0x6a4>)
 800f966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f96a:	f107 0220 	add.w	r2, r7, #32
 800f96e:	4611      	mov	r1, r2
 800f970:	4618      	mov	r0, r3
 800f972:	f004 ffd3 	bl	801491c <RegionDlChannelReq>
 800f976:	4603      	mov	r3, r0
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 800f97e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f982:	b25b      	sxtb	r3, r3
 800f984:	2b00      	cmp	r3, #0
 800f986:	db0a      	blt.n	800f99e <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 800f988:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f98c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f990:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f994:	2201      	movs	r2, #1
 800f996:	4619      	mov	r1, r3
 800f998:	200a      	movs	r0, #10
 800f99a:	f003 f8bf 	bl	8012b1c <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f99e:	bf00      	nop
 800f9a0:	e176      	b.n	800fc90 <ProcessMacCommands+0x98c>
 800f9a2:	bf00      	nop
 800f9a4:	20000670 	.word	0x20000670
 800f9a8:	20000b90 	.word	0x20000b90
 800f9ac:	0801dc80 	.word	0x0801dc80
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f9b0:	2009      	movs	r0, #9
 800f9b2:	f003 fbdb 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 8084 	beq.w	800fac6 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f9be:	2109      	movs	r1, #9
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	f003 fb47 	bl	8013054 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f9c6:	f107 0318 	add.w	r3, r7, #24
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f9d0:	f107 0310 	add.w	r3, r7, #16
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	601a      	str	r2, [r3, #0]
 800f9d8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f9da:	f107 0308 	add.w	r3, r7, #8
 800f9de:	2200      	movs	r2, #0
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f9e4:	78fb      	ldrb	r3, [r7, #3]
 800f9e6:	1c5a      	adds	r2, r3, #1
 800f9e8:	70fa      	strb	r2, [r7, #3]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4413      	add	r3, r2
 800f9f0:	781b      	ldrb	r3, [r3, #0]
 800f9f2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f9f4:	78fb      	ldrb	r3, [r7, #3]
 800f9f6:	1c5a      	adds	r2, r3, #1
 800f9f8:	70fa      	strb	r2, [r7, #3]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	4413      	add	r3, r2
 800fa00:	781b      	ldrb	r3, [r3, #0]
 800fa02:	021a      	lsls	r2, r3, #8
 800fa04:	69bb      	ldr	r3, [r7, #24]
 800fa06:	4313      	orrs	r3, r2
 800fa08:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fa0a:	78fb      	ldrb	r3, [r7, #3]
 800fa0c:	1c5a      	adds	r2, r3, #1
 800fa0e:	70fa      	strb	r2, [r7, #3]
 800fa10:	461a      	mov	r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	4413      	add	r3, r2
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	041a      	lsls	r2, r3, #16
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fa20:	78fb      	ldrb	r3, [r7, #3]
 800fa22:	1c5a      	adds	r2, r3, #1
 800fa24:	70fa      	strb	r2, [r7, #3]
 800fa26:	461a      	mov	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4413      	add	r3, r2
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	061a      	lsls	r2, r3, #24
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800fa36:	78fb      	ldrb	r3, [r7, #3]
 800fa38:	1c5a      	adds	r2, r3, #1
 800fa3a:	70fa      	strb	r2, [r7, #3]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4413      	add	r3, r2
 800fa42:	781b      	ldrb	r3, [r3, #0]
 800fa44:	b21b      	sxth	r3, r3
 800fa46:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800fa48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fa52:	fb02 f303 	mul.w	r3, r2, r3
 800fa56:	121b      	asrs	r3, r3, #8
 800fa58:	b21b      	sxth	r3, r3
 800fa5a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800fa5c:	f107 0310 	add.w	r3, r7, #16
 800fa60:	f107 0218 	add.w	r2, r7, #24
 800fa64:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa68:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	4b8f      	ldr	r3, [pc, #572]	; (800fcac <ProcessMacCommands+0x9a8>)
 800fa70:	4413      	add	r3, r2
 800fa72:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800fa74:	f107 0308 	add.w	r3, r7, #8
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f00b ffad 	bl	801b9d8 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800fa7e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800fa82:	4b8b      	ldr	r3, [pc, #556]	; (800fcb0 <ProcessMacCommands+0x9ac>)
 800fa84:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800fa88:	9200      	str	r2, [sp, #0]
 800fa8a:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800fa8e:	f107 0210 	add.w	r2, r7, #16
 800fa92:	ca06      	ldmia	r2, {r1, r2}
 800fa94:	f00b ff39 	bl	801b90a <SysTimeSub>
 800fa98:	f107 0010 	add.w	r0, r7, #16
 800fa9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faa2:	f107 0208 	add.w	r2, r7, #8
 800faa6:	ca06      	ldmia	r2, {r1, r2}
 800faa8:	f00b fef6 	bl	801b898 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800faac:	f107 0310 	add.w	r3, r7, #16
 800fab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fab4:	f00b ff62 	bl	801b97c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800fab8:	f002 fedc 	bl	8012874 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fabc:	4b7c      	ldr	r3, [pc, #496]	; (800fcb0 <ProcessMacCommands+0x9ac>)
 800fabe:	2201      	movs	r2, #1
 800fac0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800fac4:	e0e4      	b.n	800fc90 <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800fac6:	4b7a      	ldr	r3, [pc, #488]	; (800fcb0 <ProcessMacCommands+0x9ac>)
 800fac8:	2200      	movs	r2, #0
 800faca:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 800face:	e0df      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800fad0:	200c      	movs	r0, #12
 800fad2:	f003 fb4b 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 80d9 	beq.w	800fc90 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800fade:	210c      	movs	r1, #12
 800fae0:	2000      	movs	r0, #0
 800fae2:	f003 fab7 	bl	8013054 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800fae6:	4b72      	ldr	r3, [pc, #456]	; (800fcb0 <ProcessMacCommands+0x9ac>)
 800fae8:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800faec:	2b04      	cmp	r3, #4
 800faee:	f000 80cf 	beq.w	800fc90 <ProcessMacCommands+0x98c>
 800faf2:	4b6f      	ldr	r3, [pc, #444]	; (800fcb0 <ProcessMacCommands+0x9ac>)
 800faf4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800faf8:	2b05      	cmp	r3, #5
 800fafa:	f000 80c9 	beq.w	800fc90 <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800fafe:	f002 fe9a 	bl	8012836 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800fb02:	e0c5      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fb04:	2303      	movs	r3, #3
 800fb06:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fb0e:	78fb      	ldrb	r3, [r7, #3]
 800fb10:	1c5a      	adds	r2, r3, #1
 800fb12:	70fa      	strb	r2, [r7, #3]
 800fb14:	461a      	mov	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4413      	add	r3, r2
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fb1e:	78fb      	ldrb	r3, [r7, #3]
 800fb20:	1c5a      	adds	r2, r3, #1
 800fb22:	70fa      	strb	r2, [r7, #3]
 800fb24:	461a      	mov	r2, r3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4413      	add	r3, r2
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	021b      	lsls	r3, r3, #8
 800fb2e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fb30:	4313      	orrs	r3, r2
 800fb32:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fb34:	78fb      	ldrb	r3, [r7, #3]
 800fb36:	1c5a      	adds	r2, r3, #1
 800fb38:	70fa      	strb	r2, [r7, #3]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	4413      	add	r3, r2
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	041b      	lsls	r3, r3, #16
 800fb44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fb46:	4313      	orrs	r3, r2
 800fb48:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800fb4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb4c:	2264      	movs	r2, #100	; 0x64
 800fb4e:	fb02 f303 	mul.w	r3, r2, r3
 800fb52:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fb54:	78fb      	ldrb	r3, [r7, #3]
 800fb56:	1c5a      	adds	r2, r3, #1
 800fb58:	70fa      	strb	r2, [r7, #3]
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4413      	add	r3, r2
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	f003 030f 	and.w	r3, r3, #15
 800fb66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fb6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800fb6e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fb70:	4618      	mov	r0, r3
 800fb72:	f002 fe66 	bl	8012842 <LoRaMacClassBPingSlotChannelReq>
 800fb76:	4603      	mov	r3, r0
 800fb78:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 800fb7c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800fb80:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800fb84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fb88:	2201      	movs	r2, #1
 800fb8a:	4619      	mov	r1, r3
 800fb8c:	2011      	movs	r0, #17
 800fb8e:	f002 ffc5 	bl	8012b1c <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800fb92:	e07d      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800fb94:	200d      	movs	r0, #13
 800fb96:	f003 fae9 	bl	801316c <LoRaMacConfirmQueueIsCmdActive>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d077      	beq.n	800fc90 <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800fba0:	210d      	movs	r1, #13
 800fba2:	2000      	movs	r0, #0
 800fba4:	f003 fa56 	bl	8013054 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800fbb4:	78fb      	ldrb	r3, [r7, #3]
 800fbb6:	1c5a      	adds	r2, r3, #1
 800fbb8:	70fa      	strb	r2, [r7, #3]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800fbc6:	78fb      	ldrb	r3, [r7, #3]
 800fbc8:	1c5a      	adds	r2, r3, #1
 800fbca:	70fa      	strb	r2, [r7, #3]
 800fbcc:	461a      	mov	r2, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	781b      	ldrb	r3, [r3, #0]
 800fbd4:	021b      	lsls	r3, r3, #8
 800fbd6:	b21a      	sxth	r2, r3
 800fbd8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	b21b      	sxth	r3, r3
 800fbe0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800fbe4:	78fb      	ldrb	r3, [r7, #3]
 800fbe6:	1c5a      	adds	r2, r3, #1
 800fbe8:	70fa      	strb	r2, [r7, #3]
 800fbea:	461a      	mov	r2, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	4413      	add	r3, r2
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fbf6:	4b2f      	ldr	r3, [pc, #188]	; (800fcb4 <ProcessMacCommands+0x9b0>)
 800fbf8:	681a      	ldr	r2, [r3, #0]
 800fbfa:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 800fbfe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fc02:	4618      	mov	r0, r3
 800fc04:	f002 fe29 	bl	801285a <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800fc08:	e042      	b.n	800fc90 <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800fc10:	78fb      	ldrb	r3, [r7, #3]
 800fc12:	1c5a      	adds	r2, r3, #1
 800fc14:	70fa      	strb	r2, [r7, #3]
 800fc16:	461a      	mov	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fc22:	78fb      	ldrb	r3, [r7, #3]
 800fc24:	1c5a      	adds	r2, r3, #1
 800fc26:	70fa      	strb	r2, [r7, #3]
 800fc28:	461a      	mov	r2, r3
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4413      	add	r3, r2
 800fc2e:	781b      	ldrb	r3, [r3, #0]
 800fc30:	021b      	lsls	r3, r3, #8
 800fc32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc36:	4313      	orrs	r3, r2
 800fc38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fc3c:	78fb      	ldrb	r3, [r7, #3]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	70fa      	strb	r2, [r7, #3]
 800fc42:	461a      	mov	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4413      	add	r3, r2
 800fc48:	781b      	ldrb	r3, [r3, #0]
 800fc4a:	041b      	lsls	r3, r3, #16
 800fc4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc50:	4313      	orrs	r3, r2
 800fc52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 800fc56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc5a:	2264      	movs	r2, #100	; 0x64
 800fc5c:	fb02 f303 	mul.w	r3, r2, r3
 800fc60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fc64:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800fc68:	f002 fe0a 	bl	8012880 <LoRaMacClassBBeaconFreqReq>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d003      	beq.n	800fc7a <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 800fc72:	2301      	movs	r3, #1
 800fc74:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 800fc78:	e002      	b.n	800fc80 <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800fc80:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800fc84:	2201      	movs	r2, #1
 800fc86:	4619      	mov	r1, r3
 800fc88:	2013      	movs	r0, #19
 800fc8a:	f002 ff47 	bl	8012b1c <LoRaMacCommandsAddCmd>
                }
                break;
 800fc8e:	bf00      	nop
    while( macIndex < commandsSize )
 800fc90:	78fa      	ldrb	r2, [r7, #3]
 800fc92:	78bb      	ldrb	r3, [r7, #2]
 800fc94:	429a      	cmp	r2, r3
 800fc96:	f4ff ab57 	bcc.w	800f348 <ProcessMacCommands+0x44>
 800fc9a:	e004      	b.n	800fca6 <ProcessMacCommands+0x9a2>
        return;
 800fc9c:	bf00      	nop
 800fc9e:	e002      	b.n	800fca6 <ProcessMacCommands+0x9a2>
            return;
 800fca0:	bf00      	nop
 800fca2:	e000      	b.n	800fca6 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fca4:	bf00      	nop
        }
    }
}
 800fca6:	378c      	adds	r7, #140	; 0x8c
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	bd90      	pop	{r4, r7, pc}
 800fcac:	12d53d80 	.word	0x12d53d80
 800fcb0:	20000670 	.word	0x20000670
 800fcb4:	20001740 	.word	0x20001740

0800fcb8 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b08e      	sub	sp, #56	; 0x38
 800fcbc:	af02      	add	r7, sp, #8
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	607a      	str	r2, [r7, #4]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	460b      	mov	r3, r1
 800fcc6:	72fb      	strb	r3, [r7, #11]
 800fcc8:	4613      	mov	r3, r2
 800fcca:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fccc:	2303      	movs	r3, #3
 800fcce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcd2:	4b66      	ldr	r3, [pc, #408]	; (800fe6c <Send+0x1b4>)
 800fcd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fcd8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fcdc:	4b63      	ldr	r3, [pc, #396]	; (800fe6c <Send+0x1b4>)
 800fcde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fce2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fce6:	4b61      	ldr	r3, [pc, #388]	; (800fe6c <Send+0x1b4>)
 800fce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcea:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fcec:	4b5f      	ldr	r3, [pc, #380]	; (800fe6c <Send+0x1b4>)
 800fcee:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d101      	bne.n	800fcfa <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fcf6:	2307      	movs	r3, #7
 800fcf8:	e0b4      	b.n	800fe64 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fcfa:	4b5c      	ldr	r3, [pc, #368]	; (800fe6c <Send+0x1b4>)
 800fcfc:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d102      	bne.n	800fd0a <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fd04:	4b59      	ldr	r3, [pc, #356]	; (800fe6c <Send+0x1b4>)
 800fd06:	2200      	movs	r2, #0
 800fd08:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fd10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd14:	f36f 0303 	bfc	r3, #0, #4
 800fd18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fd1c:	4b53      	ldr	r3, [pc, #332]	; (800fe6c <Send+0x1b4>)
 800fd1e:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800fd22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd26:	f362 13c7 	bfi	r3, r2, #7, #1
 800fd2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fd2e:	4b4f      	ldr	r3, [pc, #316]	; (800fe6c <Send+0x1b4>)
 800fd30:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d106      	bne.n	800fd46 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fd38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd3c:	f043 0310 	orr.w	r3, r3, #16
 800fd40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800fd44:	e005      	b.n	800fd52 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fd46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd4a:	f36f 1304 	bfc	r3, #4, #1
 800fd4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fd52:	4b46      	ldr	r3, [pc, #280]	; (800fe6c <Send+0x1b4>)
 800fd54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d005      	beq.n	800fd68 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fd5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd60:	f043 0320 	orr.w	r3, r3, #32
 800fd64:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fd6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fd70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	bf14      	ite	ne
 800fd7a:	2301      	movne	r3, #1
 800fd7c:	2300      	moveq	r3, #0
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fd82:	4b3a      	ldr	r3, [pc, #232]	; (800fe6c <Send+0x1b4>)
 800fd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd86:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fd88:	4b39      	ldr	r3, [pc, #228]	; (800fe70 <Send+0x1b8>)
 800fd8a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 800fd8e:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fd90:	4b37      	ldr	r3, [pc, #220]	; (800fe70 <Send+0x1b8>)
 800fd92:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800fd96:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fd98:	4b34      	ldr	r3, [pc, #208]	; (800fe6c <Send+0x1b4>)
 800fd9a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800fd9e:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fda2:	4b32      	ldr	r3, [pc, #200]	; (800fe6c <Send+0x1b4>)
 800fda4:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800fda8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fdac:	4b2f      	ldr	r3, [pc, #188]	; (800fe6c <Send+0x1b4>)
 800fdae:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800fdb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fdb6:	4b2d      	ldr	r3, [pc, #180]	; (800fe6c <Send+0x1b4>)
 800fdb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800fdbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800fdc0:	4b2a      	ldr	r3, [pc, #168]	; (800fe6c <Send+0x1b4>)
 800fdc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fdca:	f107 0014 	add.w	r0, r7, #20
 800fdce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	4b27      	ldr	r3, [pc, #156]	; (800fe74 <Send+0x1bc>)
 800fdd6:	4a28      	ldr	r2, [pc, #160]	; (800fe78 <Send+0x1c0>)
 800fdd8:	4928      	ldr	r1, [pc, #160]	; (800fe7c <Send+0x1c4>)
 800fdda:	f002 fbcb 	bl	8012574 <LoRaMacAdrCalcNext>
 800fdde:	4603      	mov	r3, r0
 800fde0:	461a      	mov	r2, r3
 800fde2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800fde6:	f362 1386 	bfi	r3, r2, #6, #1
 800fdea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fdee:	7afa      	ldrb	r2, [r7, #11]
 800fdf0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fdf4:	893b      	ldrh	r3, [r7, #8]
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f000 fc42 	bl	8010684 <PrepareFrame>
 800fe00:	4603      	mov	r3, r0
 800fe02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fe06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d003      	beq.n	800fe16 <Send+0x15e>
 800fe0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe12:	2b0a      	cmp	r3, #10
 800fe14:	d107      	bne.n	800fe26 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fe16:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f000 f96e 	bl	80100fc <ScheduleTx>
 800fe20:	4603      	mov	r3, r0
 800fe22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fe26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d00a      	beq.n	800fe44 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fe2e:	4a0f      	ldr	r2, [pc, #60]	; (800fe6c <Send+0x1b4>)
 800fe30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fe34:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fe38:	4a0c      	ldr	r2, [pc, #48]	; (800fe6c <Send+0x1b4>)
 800fe3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fe3e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 800fe42:	e00d      	b.n	800fe60 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fe44:	4b09      	ldr	r3, [pc, #36]	; (800fe6c <Send+0x1b4>)
 800fe46:	2200      	movs	r2, #0
 800fe48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fe4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe4e:	4a07      	ldr	r2, [pc, #28]	; (800fe6c <Send+0x1b4>)
 800fe50:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fe52:	f002 fedb 	bl	8012c0c <LoRaMacCommandsRemoveNoneStickyCmds>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d001      	beq.n	800fe60 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fe5c:	2313      	movs	r3, #19
 800fe5e:	e001      	b.n	800fe64 <Send+0x1ac>
        }
    }
    return status;
 800fe60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fe64:	4618      	mov	r0, r3
 800fe66:	3730      	adds	r7, #48	; 0x30
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	20000b90 	.word	0x20000b90
 800fe70:	20000670 	.word	0x20000670
 800fe74:	20000bf0 	.word	0x20000bf0
 800fe78:	20000bc8 	.word	0x20000bc8
 800fe7c:	20000bc9 	.word	0x20000bc9

0800fe80 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	4603      	mov	r3, r0
 800fe88:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fe92:	2301      	movs	r3, #1
 800fe94:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fe96:	79fb      	ldrb	r3, [r7, #7]
 800fe98:	2bff      	cmp	r3, #255	; 0xff
 800fe9a:	d129      	bne.n	800fef0 <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	f7ff f90f 	bl	800f0c0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fea2:	4b1a      	ldr	r3, [pc, #104]	; (800ff0c <SendReJoinReq+0x8c>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800feaa:	4b18      	ldr	r3, [pc, #96]	; (800ff0c <SendReJoinReq+0x8c>)
 800feac:	4a18      	ldr	r2, [pc, #96]	; (800ff10 <SendReJoinReq+0x90>)
 800feae:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800feb2:	4b16      	ldr	r3, [pc, #88]	; (800ff0c <SendReJoinReq+0x8c>)
 800feb4:	22ff      	movs	r2, #255	; 0xff
 800feb6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800feba:	7b3b      	ldrb	r3, [r7, #12]
 800febc:	f36f 1347 	bfc	r3, #5, #3
 800fec0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fec2:	7b3a      	ldrb	r2, [r7, #12]
 800fec4:	4b11      	ldr	r3, [pc, #68]	; (800ff0c <SendReJoinReq+0x8c>)
 800fec6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800feca:	f7fc f875 	bl	800bfb8 <SecureElementGetJoinEui>
 800fece:	4603      	mov	r3, r0
 800fed0:	2208      	movs	r2, #8
 800fed2:	4619      	mov	r1, r3
 800fed4:	480f      	ldr	r0, [pc, #60]	; (800ff14 <SendReJoinReq+0x94>)
 800fed6:	f008 f9a0 	bl	801821a <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800feda:	f7fc f84b 	bl	800bf74 <SecureElementGetDevEui>
 800fede:	4603      	mov	r3, r0
 800fee0:	2208      	movs	r2, #8
 800fee2:	4619      	mov	r1, r3
 800fee4:	480c      	ldr	r0, [pc, #48]	; (800ff18 <SendReJoinReq+0x98>)
 800fee6:	f008 f998 	bl	801821a <memcpy1>

            allowDelayedTx = false;
 800feea:	2300      	movs	r3, #0
 800feec:	73fb      	strb	r3, [r7, #15]

            break;
 800feee:	e002      	b.n	800fef6 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fef0:	2302      	movs	r3, #2
 800fef2:	73bb      	strb	r3, [r7, #14]
            break;
 800fef4:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
 800fef8:	4618      	mov	r0, r3
 800fefa:	f000 f8ff 	bl	80100fc <ScheduleTx>
 800fefe:	4603      	mov	r3, r0
 800ff00:	73bb      	strb	r3, [r7, #14]
    return status;
 800ff02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3710      	adds	r7, #16
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	20000670 	.word	0x20000670
 800ff10:	20000672 	.word	0x20000672
 800ff14:	2000077e 	.word	0x2000077e
 800ff18:	20000786 	.word	0x20000786

0800ff1c <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ff20:	f002 fc38 	bl	8012794 <LoRaMacClassBIsBeaconExpected>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d001      	beq.n	800ff2e <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ff2a:	230e      	movs	r3, #14
 800ff2c:	e013      	b.n	800ff56 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ff2e:	4b0b      	ldr	r3, [pc, #44]	; (800ff5c <CheckForClassBCollision+0x40>)
 800ff30:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d10d      	bne.n	800ff54 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ff38:	f002 fc33 	bl	80127a2 <LoRaMacClassBIsPingExpected>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d001      	beq.n	800ff46 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ff42:	230f      	movs	r3, #15
 800ff44:	e007      	b.n	800ff56 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ff46:	f002 fc33 	bl	80127b0 <LoRaMacClassBIsMulticastExpected>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ff50:	230f      	movs	r3, #15
 800ff52:	e000      	b.n	800ff56 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800ff54:	2300      	movs	r3, #0
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	20000b90 	.word	0x20000b90

0800ff60 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800ff60:	b590      	push	{r4, r7, lr}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff66:	4b2d      	ldr	r3, [pc, #180]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff68:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ff6c:	4b2b      	ldr	r3, [pc, #172]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff6e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 800ff72:	4b2a      	ldr	r3, [pc, #168]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff74:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 800ff78:	4b28      	ldr	r3, [pc, #160]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff7a:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800ff7e:	4b27      	ldr	r3, [pc, #156]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff80:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ff84:	b25b      	sxtb	r3, r3
 800ff86:	f004 fd2d 	bl	80149e4 <RegionApplyDrOffset>
 800ff8a:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ff8c:	b259      	sxtb	r1, r3
 800ff8e:	4b23      	ldr	r3, [pc, #140]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff90:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ff94:	4b21      	ldr	r3, [pc, #132]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ff96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff98:	4821      	ldr	r0, [pc, #132]	; (8010020 <ComputeRxWindowParameters+0xc0>)
 800ff9a:	9000      	str	r0, [sp, #0]
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f004 fbe2 	bl	8014766 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ffa2:	4b1e      	ldr	r3, [pc, #120]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffa4:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800ffa8:	4b1c      	ldr	r3, [pc, #112]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffaa:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ffae:	b259      	sxtb	r1, r3
 800ffb0:	4b1a      	ldr	r3, [pc, #104]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffb2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800ffb6:	4b19      	ldr	r3, [pc, #100]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffba:	4c1a      	ldr	r4, [pc, #104]	; (8010024 <ComputeRxWindowParameters+0xc4>)
 800ffbc:	9400      	str	r4, [sp, #0]
 800ffbe:	f004 fbd2 	bl	8014766 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ffc2:	4b16      	ldr	r3, [pc, #88]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffc6:	4a18      	ldr	r2, [pc, #96]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 800ffc8:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800ffcc:	4413      	add	r3, r2
 800ffce:	4a16      	ldr	r2, [pc, #88]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 800ffd0:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ffd4:	4b11      	ldr	r3, [pc, #68]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffd8:	4a13      	ldr	r2, [pc, #76]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 800ffda:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 800ffde:	4413      	add	r3, r2
 800ffe0:	4a11      	ldr	r2, [pc, #68]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 800ffe2:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ffe6:	4b0d      	ldr	r3, [pc, #52]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800ffe8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d111      	bne.n	8010014 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800fff0:	4b0a      	ldr	r3, [pc, #40]	; (801001c <ComputeRxWindowParameters+0xbc>)
 800fff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff4:	4a0c      	ldr	r2, [pc, #48]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 800fff6:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 800fffa:	4413      	add	r3, r2
 800fffc:	4a0a      	ldr	r2, [pc, #40]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 800fffe:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8010002:	4b06      	ldr	r3, [pc, #24]	; (801001c <ComputeRxWindowParameters+0xbc>)
 8010004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010006:	4a08      	ldr	r2, [pc, #32]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 8010008:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 801000c:	4413      	add	r3, r2
 801000e:	4a06      	ldr	r2, [pc, #24]	; (8010028 <ComputeRxWindowParameters+0xc8>)
 8010010:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8010014:	bf00      	nop
 8010016:	3704      	adds	r7, #4
 8010018:	46bd      	mov	sp, r7
 801001a:	bd90      	pop	{r4, r7, pc}
 801001c:	20000b90 	.word	0x20000b90
 8010020:	20000a28 	.word	0x20000a28
 8010024:	20000a40 	.word	0x20000a40
 8010028:	20000670 	.word	0x20000670

0801002c <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8010032:	2300      	movs	r3, #0
 8010034:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8010036:	4b13      	ldr	r3, [pc, #76]	; (8010084 <VerifyTxFrame+0x58>)
 8010038:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01b      	beq.n	8010078 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010040:	1d3b      	adds	r3, r7, #4
 8010042:	4618      	mov	r0, r3
 8010044:	f002 fe28 	bl	8012c98 <LoRaMacCommandsGetSizeSerializedCmds>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801004e:	2313      	movs	r3, #19
 8010050:	e013      	b.n	801007a <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8010052:	4b0d      	ldr	r3, [pc, #52]	; (8010088 <VerifyTxFrame+0x5c>)
 8010054:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010058:	4a0a      	ldr	r2, [pc, #40]	; (8010084 <VerifyTxFrame+0x58>)
 801005a:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	b2d2      	uxtb	r2, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff f926 	bl	800f2b4 <ValidatePayloadLength>
 8010068:	4603      	mov	r3, r0
 801006a:	f083 0301 	eor.w	r3, r3, #1
 801006e:	b2db      	uxtb	r3, r3
 8010070:	2b00      	cmp	r3, #0
 8010072:	d001      	beq.n	8010078 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8010074:	2308      	movs	r3, #8
 8010076:	e000      	b.n	801007a <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8010078:	2300      	movs	r3, #0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	20000b90 	.word	0x20000b90
 8010088:	20000670 	.word	0x20000670

0801008c <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b082      	sub	sp, #8
 8010090:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 8010092:	4b18      	ldr	r3, [pc, #96]	; (80100f4 <SerializeTxFrame+0x68>)
 8010094:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <SerializeTxFrame+0x16>
 801009c:	2b04      	cmp	r3, #4
 801009e:	d011      	beq.n	80100c4 <SerializeTxFrame+0x38>
 80100a0:	e021      	b.n	80100e6 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80100a2:	4815      	ldr	r0, [pc, #84]	; (80100f8 <SerializeTxFrame+0x6c>)
 80100a4:	f004 f92d 	bl	8014302 <LoRaMacSerializerJoinRequest>
 80100a8:	4603      	mov	r3, r0
 80100aa:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80100ac:	79fb      	ldrb	r3, [r7, #7]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80100b2:	2311      	movs	r3, #17
 80100b4:	e01a      	b.n	80100ec <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80100b6:	4b0f      	ldr	r3, [pc, #60]	; (80100f4 <SerializeTxFrame+0x68>)
 80100b8:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80100bc:	b29a      	uxth	r2, r3
 80100be:	4b0d      	ldr	r3, [pc, #52]	; (80100f4 <SerializeTxFrame+0x68>)
 80100c0:	801a      	strh	r2, [r3, #0]
            break;
 80100c2:	e012      	b.n	80100ea <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80100c4:	480c      	ldr	r0, [pc, #48]	; (80100f8 <SerializeTxFrame+0x6c>)
 80100c6:	f004 f99e 	bl	8014406 <LoRaMacSerializerData>
 80100ca:	4603      	mov	r3, r0
 80100cc:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80100d4:	2311      	movs	r3, #17
 80100d6:	e009      	b.n	80100ec <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80100d8:	4b06      	ldr	r3, [pc, #24]	; (80100f4 <SerializeTxFrame+0x68>)
 80100da:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80100de:	b29a      	uxth	r2, r3
 80100e0:	4b04      	ldr	r3, [pc, #16]	; (80100f4 <SerializeTxFrame+0x68>)
 80100e2:	801a      	strh	r2, [r3, #0]
            break;
 80100e4:	e001      	b.n	80100ea <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80100e6:	2303      	movs	r3, #3
 80100e8:	e000      	b.n	80100ec <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3708      	adds	r7, #8
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	20000670 	.word	0x20000670
 80100f8:	20000778 	.word	0x20000778

080100fc <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b090      	sub	sp, #64	; 0x40
 8010100:	af02      	add	r7, sp, #8
 8010102:	4603      	mov	r3, r0
 8010104:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010106:	2303      	movs	r3, #3
 8010108:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 801010c:	f7ff ff06 	bl	800ff1c <CheckForClassBCollision>
 8010110:	4603      	mov	r3, r0
 8010112:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010116:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <ScheduleTx+0x28>
    {
        return status;
 801011e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010122:	e08f      	b.n	8010244 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010124:	f000 f8f4 	bl	8010310 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010128:	f7ff ffb0 	bl	801008c <SerializeTxFrame>
 801012c:	4603      	mov	r3, r0
 801012e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010136:	2b00      	cmp	r3, #0
 8010138:	d002      	beq.n	8010140 <ScheduleTx+0x44>
    {
        return status;
 801013a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801013e:	e081      	b.n	8010244 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8010140:	4b42      	ldr	r3, [pc, #264]	; (801024c <ScheduleTx+0x150>)
 8010142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010144:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010146:	4b41      	ldr	r3, [pc, #260]	; (801024c <ScheduleTx+0x150>)
 8010148:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801014c:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801014e:	4b3f      	ldr	r3, [pc, #252]	; (801024c <ScheduleTx+0x150>)
 8010150:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 8010154:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801015a:	4618      	mov	r0, r3
 801015c:	f00b fc74 	bl	801ba48 <SysTimeGetMcuTime>
 8010160:	4638      	mov	r0, r7
 8010162:	4b3a      	ldr	r3, [pc, #232]	; (801024c <ScheduleTx+0x150>)
 8010164:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8010168:	9200      	str	r2, [sp, #0]
 801016a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 801016e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010172:	ca06      	ldmia	r2, {r1, r2}
 8010174:	f00b fbc9 	bl	801b90a <SysTimeSub>
 8010178:	f107 0320 	add.w	r3, r7, #32
 801017c:	463a      	mov	r2, r7
 801017e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010182:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010186:	4b31      	ldr	r3, [pc, #196]	; (801024c <ScheduleTx+0x150>)
 8010188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801018a:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 801018c:	2300      	movs	r3, #0
 801018e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 8010192:	2301      	movs	r3, #1
 8010194:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010196:	4b2e      	ldr	r3, [pc, #184]	; (8010250 <ScheduleTx+0x154>)
 8010198:	881b      	ldrh	r3, [r3, #0]
 801019a:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 801019c:	4b2b      	ldr	r3, [pc, #172]	; (801024c <ScheduleTx+0x150>)
 801019e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d104      	bne.n	80101b0 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80101a6:	2301      	movs	r3, #1
 80101a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80101ac:	2300      	movs	r3, #0
 80101ae:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80101b0:	4b26      	ldr	r3, [pc, #152]	; (801024c <ScheduleTx+0x150>)
 80101b2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80101b6:	f107 0114 	add.w	r1, r7, #20
 80101ba:	4b26      	ldr	r3, [pc, #152]	; (8010254 <ScheduleTx+0x158>)
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	4b26      	ldr	r3, [pc, #152]	; (8010258 <ScheduleTx+0x15c>)
 80101c0:	4a26      	ldr	r2, [pc, #152]	; (801025c <ScheduleTx+0x160>)
 80101c2:	f004 fbec 	bl	801499e <RegionNextChannel>
 80101c6:	4603      	mov	r3, r0
 80101c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80101cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d022      	beq.n	801021a <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80101d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80101d8:	2b0b      	cmp	r3, #11
 80101da:	d11b      	bne.n	8010214 <ScheduleTx+0x118>
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d018      	beq.n	8010214 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80101e2:	4b1b      	ldr	r3, [pc, #108]	; (8010250 <ScheduleTx+0x154>)
 80101e4:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d011      	beq.n	8010210 <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80101ec:	4b18      	ldr	r3, [pc, #96]	; (8010250 <ScheduleTx+0x154>)
 80101ee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80101f2:	f043 0320 	orr.w	r3, r3, #32
 80101f6:	4a16      	ldr	r2, [pc, #88]	; (8010250 <ScheduleTx+0x154>)
 80101f8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80101fc:	4b14      	ldr	r3, [pc, #80]	; (8010250 <ScheduleTx+0x154>)
 80101fe:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8010202:	4619      	mov	r1, r3
 8010204:	4816      	ldr	r0, [pc, #88]	; (8010260 <ScheduleTx+0x164>)
 8010206:	f00c f9c3 	bl	801c590 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 801020a:	4815      	ldr	r0, [pc, #84]	; (8010260 <ScheduleTx+0x164>)
 801020c:	f00c f8e2 	bl	801c3d4 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	e017      	b.n	8010244 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010214:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010218:	e014      	b.n	8010244 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801021a:	f7ff fea1 	bl	800ff60 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801021e:	f7ff ff05 	bl	801002c <VerifyTxFrame>
 8010222:	4603      	mov	r3, r0
 8010224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8010228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801022c:	2b00      	cmp	r3, #0
 801022e:	d002      	beq.n	8010236 <ScheduleTx+0x13a>
    {
        return status;
 8010230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010234:	e006      	b.n	8010244 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010236:	4b06      	ldr	r3, [pc, #24]	; (8010250 <ScheduleTx+0x154>)
 8010238:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 801023c:	4618      	mov	r0, r3
 801023e:	f000 fb3d 	bl	80108bc <SendFrameOnChannel>
 8010242:	4603      	mov	r3, r0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3738      	adds	r7, #56	; 0x38
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}
 801024c:	20000b90 	.word	0x20000b90
 8010250:	20000670 	.word	0x20000670
 8010254:	20000bc0 	.word	0x20000bc0
 8010258:	20000b08 	.word	0x20000b08
 801025c:	20000a8f 	.word	0x20000a8f
 8010260:	200009d8 	.word	0x200009d8

08010264 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	4603      	mov	r3, r0
 801026c:	460a      	mov	r2, r1
 801026e:	71fb      	strb	r3, [r7, #7]
 8010270:	4613      	mov	r3, r2
 8010272:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010274:	2312      	movs	r3, #18
 8010276:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010278:	2300      	movs	r3, #0
 801027a:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 801027c:	4b22      	ldr	r3, [pc, #136]	; (8010308 <SecureFrame+0xa4>)
 801027e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010282:	2b00      	cmp	r3, #0
 8010284:	d002      	beq.n	801028c <SecureFrame+0x28>
 8010286:	2b04      	cmp	r3, #4
 8010288:	d011      	beq.n	80102ae <SecureFrame+0x4a>
 801028a:	e036      	b.n	80102fa <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 801028c:	481f      	ldr	r0, [pc, #124]	; (801030c <SecureFrame+0xa8>)
 801028e:	f003 fc07 	bl	8013aa0 <LoRaMacCryptoPrepareJoinRequest>
 8010292:	4603      	mov	r3, r0
 8010294:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010296:	7bfb      	ldrb	r3, [r7, #15]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d001      	beq.n	80102a0 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801029c:	2311      	movs	r3, #17
 801029e:	e02f      	b.n	8010300 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80102a0:	4b19      	ldr	r3, [pc, #100]	; (8010308 <SecureFrame+0xa4>)
 80102a2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	4b17      	ldr	r3, [pc, #92]	; (8010308 <SecureFrame+0xa4>)
 80102aa:	801a      	strh	r2, [r3, #0]
            break;
 80102ac:	e027      	b.n	80102fe <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80102ae:	f107 0308 	add.w	r3, r7, #8
 80102b2:	4618      	mov	r0, r3
 80102b4:	f003 fb38 	bl	8013928 <LoRaMacCryptoGetFCntUp>
 80102b8:	4603      	mov	r3, r0
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d001      	beq.n	80102c2 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80102be:	2312      	movs	r3, #18
 80102c0:	e01e      	b.n	8010300 <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80102c2:	4b11      	ldr	r3, [pc, #68]	; (8010308 <SecureFrame+0xa4>)
 80102c4:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	3b01      	subs	r3, #1
 80102d0:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80102d2:	68b8      	ldr	r0, [r7, #8]
 80102d4:	79ba      	ldrb	r2, [r7, #6]
 80102d6:	79f9      	ldrb	r1, [r7, #7]
 80102d8:	4b0c      	ldr	r3, [pc, #48]	; (801030c <SecureFrame+0xa8>)
 80102da:	f003 fcf3 	bl	8013cc4 <LoRaMacCryptoSecureMessage>
 80102de:	4603      	mov	r3, r0
 80102e0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80102e2:	7bfb      	ldrb	r3, [r7, #15]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d001      	beq.n	80102ec <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80102e8:	2311      	movs	r3, #17
 80102ea:	e009      	b.n	8010300 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80102ec:	4b06      	ldr	r3, [pc, #24]	; (8010308 <SecureFrame+0xa4>)
 80102ee:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	4b04      	ldr	r3, [pc, #16]	; (8010308 <SecureFrame+0xa4>)
 80102f6:	801a      	strh	r2, [r3, #0]
            break;
 80102f8:	e001      	b.n	80102fe <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80102fa:	2303      	movs	r3, #3
 80102fc:	e000      	b.n	8010300 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80102fe:	2300      	movs	r3, #0
}
 8010300:	4618      	mov	r0, r3
 8010302:	3710      	adds	r7, #16
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}
 8010308:	20000670 	.word	0x20000670
 801030c:	20000778 	.word	0x20000778

08010310 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8010310:	b480      	push	{r7}
 8010312:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010314:	4b09      	ldr	r3, [pc, #36]	; (801033c <CalculateBackOff+0x2c>)
 8010316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010318:	2b00      	cmp	r3, #0
 801031a:	d10a      	bne.n	8010332 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801031c:	4b07      	ldr	r3, [pc, #28]	; (801033c <CalculateBackOff+0x2c>)
 801031e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8010322:	3b01      	subs	r3, #1
 8010324:	4a06      	ldr	r2, [pc, #24]	; (8010340 <CalculateBackOff+0x30>)
 8010326:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 801032a:	fb02 f303 	mul.w	r3, r2, r3
 801032e:	4a03      	ldr	r2, [pc, #12]	; (801033c <CalculateBackOff+0x2c>)
 8010330:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8010332:	bf00      	nop
 8010334:	46bd      	mov	sp, r7
 8010336:	bc80      	pop	{r7}
 8010338:	4770      	bx	lr
 801033a:	bf00      	nop
 801033c:	20000b90 	.word	0x20000b90
 8010340:	20000670 	.word	0x20000670

08010344 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b082      	sub	sp, #8
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	7139      	strb	r1, [r7, #4]
 801034e:	71fb      	strb	r3, [r7, #7]
 8010350:	4613      	mov	r3, r2
 8010352:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <RemoveMacCommands+0x1c>
 801035a:	79fb      	ldrb	r3, [r7, #7]
 801035c:	2b01      	cmp	r3, #1
 801035e:	d10d      	bne.n	801037c <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8010360:	79bb      	ldrb	r3, [r7, #6]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d108      	bne.n	8010378 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010366:	793b      	ldrb	r3, [r7, #4]
 8010368:	f003 0320 	and.w	r3, r3, #32
 801036c:	b2db      	uxtb	r3, r3
 801036e:	2b00      	cmp	r3, #0
 8010370:	d004      	beq.n	801037c <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8010372:	f002 fc6f 	bl	8012c54 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010376:	e001      	b.n	801037c <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010378:	f002 fc6c 	bl	8012c54 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 801037c:	bf00      	nop
 801037e:	3708      	adds	r7, #8
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}

08010384 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010384:	b5b0      	push	{r4, r5, r7, lr}
 8010386:	b090      	sub	sp, #64	; 0x40
 8010388:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 801038a:	4b70      	ldr	r3, [pc, #448]	; (801054c <ResetMacParameters+0x1c8>)
 801038c:	2200      	movs	r2, #0
 801038e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 8010392:	4b6e      	ldr	r3, [pc, #440]	; (801054c <ResetMacParameters+0x1c8>)
 8010394:	2200      	movs	r2, #0
 8010396:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010398:	4b6d      	ldr	r3, [pc, #436]	; (8010550 <ResetMacParameters+0x1cc>)
 801039a:	2200      	movs	r2, #0
 801039c:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80103a0:	4b6b      	ldr	r3, [pc, #428]	; (8010550 <ResetMacParameters+0x1cc>)
 80103a2:	2200      	movs	r2, #0
 80103a4:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80103a8:	4b69      	ldr	r3, [pc, #420]	; (8010550 <ResetMacParameters+0x1cc>)
 80103aa:	2200      	movs	r2, #0
 80103ac:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80103b0:	4b66      	ldr	r3, [pc, #408]	; (801054c <ResetMacParameters+0x1c8>)
 80103b2:	2200      	movs	r2, #0
 80103b4:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80103b8:	4b64      	ldr	r3, [pc, #400]	; (801054c <ResetMacParameters+0x1c8>)
 80103ba:	2201      	movs	r2, #1
 80103bc:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80103c0:	4b62      	ldr	r3, [pc, #392]	; (801054c <ResetMacParameters+0x1c8>)
 80103c2:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80103c6:	4b61      	ldr	r3, [pc, #388]	; (801054c <ResetMacParameters+0x1c8>)
 80103c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80103cc:	4b5f      	ldr	r3, [pc, #380]	; (801054c <ResetMacParameters+0x1c8>)
 80103ce:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80103d2:	4b5e      	ldr	r3, [pc, #376]	; (801054c <ResetMacParameters+0x1c8>)
 80103d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80103d8:	4b5c      	ldr	r3, [pc, #368]	; (801054c <ResetMacParameters+0x1c8>)
 80103da:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 80103de:	4b5b      	ldr	r3, [pc, #364]	; (801054c <ResetMacParameters+0x1c8>)
 80103e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80103e4:	4b59      	ldr	r3, [pc, #356]	; (801054c <ResetMacParameters+0x1c8>)
 80103e6:	4a59      	ldr	r2, [pc, #356]	; (801054c <ResetMacParameters+0x1c8>)
 80103e8:	3364      	adds	r3, #100	; 0x64
 80103ea:	32a8      	adds	r2, #168	; 0xa8
 80103ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80103f0:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80103f4:	4b55      	ldr	r3, [pc, #340]	; (801054c <ResetMacParameters+0x1c8>)
 80103f6:	4a55      	ldr	r2, [pc, #340]	; (801054c <ResetMacParameters+0x1c8>)
 80103f8:	336c      	adds	r3, #108	; 0x6c
 80103fa:	32b0      	adds	r2, #176	; 0xb0
 80103fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010400:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010404:	4b51      	ldr	r3, [pc, #324]	; (801054c <ResetMacParameters+0x1c8>)
 8010406:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 801040a:	4b50      	ldr	r3, [pc, #320]	; (801054c <ResetMacParameters+0x1c8>)
 801040c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8010410:	4b4e      	ldr	r3, [pc, #312]	; (801054c <ResetMacParameters+0x1c8>)
 8010412:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8010416:	4b4d      	ldr	r3, [pc, #308]	; (801054c <ResetMacParameters+0x1c8>)
 8010418:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801041c:	4b4b      	ldr	r3, [pc, #300]	; (801054c <ResetMacParameters+0x1c8>)
 801041e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010422:	4a4a      	ldr	r2, [pc, #296]	; (801054c <ResetMacParameters+0x1c8>)
 8010424:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010426:	4b49      	ldr	r3, [pc, #292]	; (801054c <ResetMacParameters+0x1c8>)
 8010428:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801042c:	4a47      	ldr	r2, [pc, #284]	; (801054c <ResetMacParameters+0x1c8>)
 801042e:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 8010430:	4b47      	ldr	r3, [pc, #284]	; (8010550 <ResetMacParameters+0x1cc>)
 8010432:	2200      	movs	r2, #0
 8010434:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010438:	4b44      	ldr	r3, [pc, #272]	; (801054c <ResetMacParameters+0x1c8>)
 801043a:	2200      	movs	r2, #0
 801043c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010440:	4b42      	ldr	r3, [pc, #264]	; (801054c <ResetMacParameters+0x1c8>)
 8010442:	2200      	movs	r2, #0
 8010444:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010448:	4b40      	ldr	r3, [pc, #256]	; (801054c <ResetMacParameters+0x1c8>)
 801044a:	2200      	movs	r2, #0
 801044c:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8010450:	2301      	movs	r3, #1
 8010452:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010454:	4b3f      	ldr	r3, [pc, #252]	; (8010554 <ResetMacParameters+0x1d0>)
 8010456:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010458:	4b3f      	ldr	r3, [pc, #252]	; (8010558 <ResetMacParameters+0x1d4>)
 801045a:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 801045c:	4b3f      	ldr	r3, [pc, #252]	; (801055c <ResetMacParameters+0x1d8>)
 801045e:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010460:	4b3a      	ldr	r3, [pc, #232]	; (801054c <ResetMacParameters+0x1c8>)
 8010462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010466:	1d3a      	adds	r2, r7, #4
 8010468:	4611      	mov	r1, r2
 801046a:	4618      	mov	r0, r3
 801046c:	f004 f90f 	bl	801468e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010470:	4b37      	ldr	r3, [pc, #220]	; (8010550 <ResetMacParameters+0x1cc>)
 8010472:	2200      	movs	r2, #0
 8010474:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010478:	4b35      	ldr	r3, [pc, #212]	; (8010550 <ResetMacParameters+0x1cc>)
 801047a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 801047e:	4b34      	ldr	r3, [pc, #208]	; (8010550 <ResetMacParameters+0x1cc>)
 8010480:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010484:	4b31      	ldr	r3, [pc, #196]	; (801054c <ResetMacParameters+0x1c8>)
 8010486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010488:	4a31      	ldr	r2, [pc, #196]	; (8010550 <ResetMacParameters+0x1cc>)
 801048a:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801048e:	4b2f      	ldr	r3, [pc, #188]	; (801054c <ResetMacParameters+0x1c8>)
 8010490:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010494:	4b2e      	ldr	r3, [pc, #184]	; (8010550 <ResetMacParameters+0x1cc>)
 8010496:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801049a:	4b2c      	ldr	r3, [pc, #176]	; (801054c <ResetMacParameters+0x1c8>)
 801049c:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80104a0:	4b2b      	ldr	r3, [pc, #172]	; (8010550 <ResetMacParameters+0x1cc>)
 80104a2:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80104a6:	4b2a      	ldr	r3, [pc, #168]	; (8010550 <ResetMacParameters+0x1cc>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80104ae:	4b28      	ldr	r3, [pc, #160]	; (8010550 <ResetMacParameters+0x1cc>)
 80104b0:	2201      	movs	r2, #1
 80104b2:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80104b6:	4b25      	ldr	r3, [pc, #148]	; (801054c <ResetMacParameters+0x1c8>)
 80104b8:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80104bc:	4b24      	ldr	r3, [pc, #144]	; (8010550 <ResetMacParameters+0x1cc>)
 80104be:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80104c2:	4a23      	ldr	r2, [pc, #140]	; (8010550 <ResetMacParameters+0x1cc>)
 80104c4:	4b22      	ldr	r3, [pc, #136]	; (8010550 <ResetMacParameters+0x1cc>)
 80104c6:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 80104ca:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 80104ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80104d6:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80104da:	4b1d      	ldr	r3, [pc, #116]	; (8010550 <ResetMacParameters+0x1cc>)
 80104dc:	2201      	movs	r2, #1
 80104de:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80104e2:	4b1b      	ldr	r3, [pc, #108]	; (8010550 <ResetMacParameters+0x1cc>)
 80104e4:	2202      	movs	r2, #2
 80104e6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80104ee:	2300      	movs	r3, #0
 80104f0:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80104f2:	4b17      	ldr	r3, [pc, #92]	; (8010550 <ResetMacParameters+0x1cc>)
 80104f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d009      	beq.n	8010510 <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80104fc:	4b14      	ldr	r3, [pc, #80]	; (8010550 <ResetMacParameters+0x1cc>)
 80104fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010506:	4b12      	ldr	r3, [pc, #72]	; (8010550 <ResetMacParameters+0x1cc>)
 8010508:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801050c:	691b      	ldr	r3, [r3, #16]
 801050e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8010510:	4b13      	ldr	r3, [pc, #76]	; (8010560 <ResetMacParameters+0x1dc>)
 8010512:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010514:	4b13      	ldr	r3, [pc, #76]	; (8010564 <ResetMacParameters+0x1e0>)
 8010516:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010518:	4b13      	ldr	r3, [pc, #76]	; (8010568 <ResetMacParameters+0x1e4>)
 801051a:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801051c:	4b13      	ldr	r3, [pc, #76]	; (801056c <ResetMacParameters+0x1e8>)
 801051e:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8010520:	4b13      	ldr	r3, [pc, #76]	; (8010570 <ResetMacParameters+0x1ec>)
 8010522:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010524:	4b13      	ldr	r3, [pc, #76]	; (8010574 <ResetMacParameters+0x1f0>)
 8010526:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010528:	4b13      	ldr	r3, [pc, #76]	; (8010578 <ResetMacParameters+0x1f4>)
 801052a:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 801052c:	4b13      	ldr	r3, [pc, #76]	; (801057c <ResetMacParameters+0x1f8>)
 801052e:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 8010530:	4b13      	ldr	r3, [pc, #76]	; (8010580 <ResetMacParameters+0x1fc>)
 8010532:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010534:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8010538:	f107 0314 	add.w	r3, r7, #20
 801053c:	4a11      	ldr	r2, [pc, #68]	; (8010584 <ResetMacParameters+0x200>)
 801053e:	4618      	mov	r0, r3
 8010540:	f002 f8d1 	bl	80126e6 <LoRaMacClassBInit>
}
 8010544:	bf00      	nop
 8010546:	3740      	adds	r7, #64	; 0x40
 8010548:	46bd      	mov	sp, r7
 801054a:	bdb0      	pop	{r4, r5, r7, pc}
 801054c:	20000b90 	.word	0x20000b90
 8010550:	20000670 	.word	0x20000670
 8010554:	20000d74 	.word	0x20000d74
 8010558:	20000d88 	.word	0x20000d88
 801055c:	200016a8 	.word	0x200016a8
 8010560:	20000adc 	.word	0x20000adc
 8010564:	20000a94 	.word	0x20000a94
 8010568:	20000ac8 	.word	0x20000ac8
 801056c:	20000b05 	.word	0x20000b05
 8010570:	20000c64 	.word	0x20000c64
 8010574:	20000bd0 	.word	0x20000bd0
 8010578:	20000bd4 	.word	0x20000bd4
 801057c:	20000c68 	.word	0x20000c68
 8010580:	20000cac 	.word	0x20000cac
 8010584:	20001104 	.word	0x20001104

08010588 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b082      	sub	sp, #8
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8010592:	6878      	ldr	r0, [r7, #4]
 8010594:	f00b ff8c 	bl	801c4b0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010598:	4b11      	ldr	r3, [pc, #68]	; (80105e0 <RxWindowSetup+0x58>)
 801059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801059c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801059e:	4b11      	ldr	r3, [pc, #68]	; (80105e4 <RxWindowSetup+0x5c>)
 80105a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80105a4:	4a10      	ldr	r2, [pc, #64]	; (80105e8 <RxWindowSetup+0x60>)
 80105a6:	6839      	ldr	r1, [r7, #0]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f004 f900 	bl	80147ae <RegionRxConfig>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d010      	beq.n	80105d6 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80105b4:	4b0d      	ldr	r3, [pc, #52]	; (80105ec <RxWindowSetup+0x64>)
 80105b6:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 80105ba:	4b0c      	ldr	r3, [pc, #48]	; (80105ec <RxWindowSetup+0x64>)
 80105bc:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80105c0:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <RxWindowSetup+0x58>)
 80105c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c4:	4a07      	ldr	r2, [pc, #28]	; (80105e4 <RxWindowSetup+0x5c>)
 80105c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80105c8:	4610      	mov	r0, r2
 80105ca:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	7cda      	ldrb	r2, [r3, #19]
 80105d0:	4b06      	ldr	r3, [pc, #24]	; (80105ec <RxWindowSetup+0x64>)
 80105d2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80105d6:	bf00      	nop
 80105d8:	3708      	adds	r7, #8
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd80      	pop	{r7, pc}
 80105de:	bf00      	nop
 80105e0:	0801dd4c 	.word	0x0801dd4c
 80105e4:	20000b90 	.word	0x20000b90
 80105e8:	20000a98 	.word	0x20000a98
 80105ec:	20000670 	.word	0x20000670

080105f0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80105f0:	b590      	push	{r4, r7, lr}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80105f6:	4b1e      	ldr	r3, [pc, #120]	; (8010670 <OpenContinuousRxCWindow+0x80>)
 80105f8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80105fc:	4b1c      	ldr	r3, [pc, #112]	; (8010670 <OpenContinuousRxCWindow+0x80>)
 80105fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010602:	b259      	sxtb	r1, r3
 8010604:	4b1a      	ldr	r3, [pc, #104]	; (8010670 <OpenContinuousRxCWindow+0x80>)
 8010606:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801060a:	4b19      	ldr	r3, [pc, #100]	; (8010670 <OpenContinuousRxCWindow+0x80>)
 801060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801060e:	4c19      	ldr	r4, [pc, #100]	; (8010674 <OpenContinuousRxCWindow+0x84>)
 8010610:	9400      	str	r4, [sp, #0]
 8010612:	f004 f8a8 	bl	8014766 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010616:	4b18      	ldr	r3, [pc, #96]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 8010618:	2202      	movs	r2, #2
 801061a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801061e:	4b14      	ldr	r3, [pc, #80]	; (8010670 <OpenContinuousRxCWindow+0x80>)
 8010620:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8010624:	4b14      	ldr	r3, [pc, #80]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 8010626:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801062a:	4b13      	ldr	r3, [pc, #76]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 801062c:	2201      	movs	r2, #1
 801062e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010632:	4b0f      	ldr	r3, [pc, #60]	; (8010670 <OpenContinuousRxCWindow+0x80>)
 8010634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010638:	4a10      	ldr	r2, [pc, #64]	; (801067c <OpenContinuousRxCWindow+0x8c>)
 801063a:	490e      	ldr	r1, [pc, #56]	; (8010674 <OpenContinuousRxCWindow+0x84>)
 801063c:	4618      	mov	r0, r3
 801063e:	f004 f8b6 	bl	80147ae <RegionRxConfig>
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00f      	beq.n	8010668 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010648:	4b0b      	ldr	r3, [pc, #44]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 801064a:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 801064e:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 8010650:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010654:	4b0a      	ldr	r3, [pc, #40]	; (8010680 <OpenContinuousRxCWindow+0x90>)
 8010656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010658:	2000      	movs	r0, #0
 801065a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 801065e:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 8010662:	4b05      	ldr	r3, [pc, #20]	; (8010678 <OpenContinuousRxCWindow+0x88>)
 8010664:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8010668:	bf00      	nop
 801066a:	3704      	adds	r7, #4
 801066c:	46bd      	mov	sp, r7
 801066e:	bd90      	pop	{r4, r7, pc}
 8010670:	20000b90 	.word	0x20000b90
 8010674:	20000a58 	.word	0x20000a58
 8010678:	20000670 	.word	0x20000670
 801067c:	20000a98 	.word	0x20000a98
 8010680:	0801dd4c 	.word	0x0801dd4c

08010684 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b088      	sub	sp, #32
 8010688:	af00      	add	r7, sp, #0
 801068a:	60f8      	str	r0, [r7, #12]
 801068c:	60b9      	str	r1, [r7, #8]
 801068e:	603b      	str	r3, [r7, #0]
 8010690:	4613      	mov	r3, r2
 8010692:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010694:	4b82      	ldr	r3, [pc, #520]	; (80108a0 <PrepareFrame+0x21c>)
 8010696:	2200      	movs	r2, #0
 8010698:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801069a:	4b81      	ldr	r3, [pc, #516]	; (80108a0 <PrepareFrame+0x21c>)
 801069c:	2200      	movs	r2, #0
 801069e:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80106a6:	2300      	movs	r3, #0
 80106a8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80106b4:	2300      	movs	r3, #0
 80106b6:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80106b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106ba:	461a      	mov	r2, r3
 80106bc:	6839      	ldr	r1, [r7, #0]
 80106be:	4879      	ldr	r0, [pc, #484]	; (80108a4 <PrepareFrame+0x220>)
 80106c0:	f007 fdab 	bl	801821a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80106c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106c6:	b2da      	uxtb	r2, r3
 80106c8:	4b75      	ldr	r3, [pc, #468]	; (80108a0 <PrepareFrame+0x21c>)
 80106ca:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	781a      	ldrb	r2, [r3, #0]
 80106d2:	4b73      	ldr	r3, [pc, #460]	; (80108a0 <PrepareFrame+0x21c>)
 80106d4:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	2b07      	cmp	r3, #7
 80106e2:	f000 80b9 	beq.w	8010858 <PrepareFrame+0x1d4>
 80106e6:	2b07      	cmp	r3, #7
 80106e8:	f300 80d0 	bgt.w	801088c <PrepareFrame+0x208>
 80106ec:	2b02      	cmp	r3, #2
 80106ee:	d006      	beq.n	80106fe <PrepareFrame+0x7a>
 80106f0:	2b04      	cmp	r3, #4
 80106f2:	f040 80cb 	bne.w	801088c <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80106f6:	4b6a      	ldr	r3, [pc, #424]	; (80108a0 <PrepareFrame+0x21c>)
 80106f8:	2201      	movs	r2, #1
 80106fa:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80106fe:	4b68      	ldr	r3, [pc, #416]	; (80108a0 <PrepareFrame+0x21c>)
 8010700:	2204      	movs	r2, #4
 8010702:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010706:	4b66      	ldr	r3, [pc, #408]	; (80108a0 <PrepareFrame+0x21c>)
 8010708:	4a67      	ldr	r2, [pc, #412]	; (80108a8 <PrepareFrame+0x224>)
 801070a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801070e:	4b64      	ldr	r3, [pc, #400]	; (80108a0 <PrepareFrame+0x21c>)
 8010710:	22ff      	movs	r2, #255	; 0xff
 8010712:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	781a      	ldrb	r2, [r3, #0]
 801071a:	4b61      	ldr	r3, [pc, #388]	; (80108a0 <PrepareFrame+0x21c>)
 801071c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010720:	4a5f      	ldr	r2, [pc, #380]	; (80108a0 <PrepareFrame+0x21c>)
 8010722:	79fb      	ldrb	r3, [r7, #7]
 8010724:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010728:	4b60      	ldr	r3, [pc, #384]	; (80108ac <PrepareFrame+0x228>)
 801072a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801072e:	4a5c      	ldr	r2, [pc, #368]	; (80108a0 <PrepareFrame+0x21c>)
 8010730:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	781a      	ldrb	r2, [r3, #0]
 8010738:	4b59      	ldr	r3, [pc, #356]	; (80108a0 <PrepareFrame+0x21c>)
 801073a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801073e:	4b58      	ldr	r3, [pc, #352]	; (80108a0 <PrepareFrame+0x21c>)
 8010740:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 8010744:	4b56      	ldr	r3, [pc, #344]	; (80108a0 <PrepareFrame+0x21c>)
 8010746:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 801074a:	4b55      	ldr	r3, [pc, #340]	; (80108a0 <PrepareFrame+0x21c>)
 801074c:	4a55      	ldr	r2, [pc, #340]	; (80108a4 <PrepareFrame+0x220>)
 801074e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010752:	f107 0318 	add.w	r3, r7, #24
 8010756:	4618      	mov	r0, r3
 8010758:	f003 f8e6 	bl	8013928 <LoRaMacCryptoGetFCntUp>
 801075c:	4603      	mov	r3, r0
 801075e:	2b00      	cmp	r3, #0
 8010760:	d001      	beq.n	8010766 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010762:	2312      	movs	r3, #18
 8010764:	e098      	b.n	8010898 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	b29a      	uxth	r2, r3
 801076a:	4b4d      	ldr	r3, [pc, #308]	; (80108a0 <PrepareFrame+0x21c>)
 801076c:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 8010770:	4b4b      	ldr	r3, [pc, #300]	; (80108a0 <PrepareFrame+0x21c>)
 8010772:	2200      	movs	r2, #0
 8010774:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010778:	4b49      	ldr	r3, [pc, #292]	; (80108a0 <PrepareFrame+0x21c>)
 801077a:	2200      	movs	r2, #0
 801077c:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	4a47      	ldr	r2, [pc, #284]	; (80108a0 <PrepareFrame+0x21c>)
 8010784:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010788:	f107 0314 	add.w	r3, r7, #20
 801078c:	4618      	mov	r0, r3
 801078e:	f002 fa83 	bl	8012c98 <LoRaMacCommandsGetSizeSerializedCmds>
 8010792:	4603      	mov	r3, r0
 8010794:	2b00      	cmp	r3, #0
 8010796:	d001      	beq.n	801079c <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010798:	2313      	movs	r3, #19
 801079a:	e07d      	b.n	8010898 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d076      	beq.n	8010890 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80107a2:	4b42      	ldr	r3, [pc, #264]	; (80108ac <PrepareFrame+0x228>)
 80107a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fe fd5b 	bl	800f264 <GetMaxAppPayloadWithoutFOptsLength>
 80107ae:	4603      	mov	r3, r0
 80107b0:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80107b2:	4b3b      	ldr	r3, [pc, #236]	; (80108a0 <PrepareFrame+0x21c>)
 80107b4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d01d      	beq.n	80107f8 <PrepareFrame+0x174>
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	2b0f      	cmp	r3, #15
 80107c0:	d81a      	bhi.n	80107f8 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80107c2:	f107 0314 	add.w	r3, r7, #20
 80107c6:	4a3a      	ldr	r2, [pc, #232]	; (80108b0 <PrepareFrame+0x22c>)
 80107c8:	4619      	mov	r1, r3
 80107ca:	200f      	movs	r0, #15
 80107cc:	f002 fa7a 	bl	8012cc4 <LoRaMacCommandsSerializeCmds>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d001      	beq.n	80107da <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80107d6:	2313      	movs	r3, #19
 80107d8:	e05e      	b.n	8010898 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	f003 030f 	and.w	r3, r3, #15
 80107e0:	b2d9      	uxtb	r1, r3
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	7813      	ldrb	r3, [r2, #0]
 80107e6:	f361 0303 	bfi	r3, r1, #0, #4
 80107ea:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	781a      	ldrb	r2, [r3, #0]
 80107f0:	4b2b      	ldr	r3, [pc, #172]	; (80108a0 <PrepareFrame+0x21c>)
 80107f2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80107f6:	e04b      	b.n	8010890 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80107f8:	4b29      	ldr	r3, [pc, #164]	; (80108a0 <PrepareFrame+0x21c>)
 80107fa:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d010      	beq.n	8010824 <PrepareFrame+0x1a0>
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	2b0f      	cmp	r3, #15
 8010806:	d90d      	bls.n	8010824 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010808:	7ffb      	ldrb	r3, [r7, #31]
 801080a:	f107 0114 	add.w	r1, r7, #20
 801080e:	4a29      	ldr	r2, [pc, #164]	; (80108b4 <PrepareFrame+0x230>)
 8010810:	4618      	mov	r0, r3
 8010812:	f002 fa57 	bl	8012cc4 <LoRaMacCommandsSerializeCmds>
 8010816:	4603      	mov	r3, r0
 8010818:	2b00      	cmp	r3, #0
 801081a:	d001      	beq.n	8010820 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801081c:	2313      	movs	r3, #19
 801081e:	e03b      	b.n	8010898 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010820:	230a      	movs	r3, #10
 8010822:	e039      	b.n	8010898 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010824:	7ffb      	ldrb	r3, [r7, #31]
 8010826:	f107 0114 	add.w	r1, r7, #20
 801082a:	4a22      	ldr	r2, [pc, #136]	; (80108b4 <PrepareFrame+0x230>)
 801082c:	4618      	mov	r0, r3
 801082e:	f002 fa49 	bl	8012cc4 <LoRaMacCommandsSerializeCmds>
 8010832:	4603      	mov	r3, r0
 8010834:	2b00      	cmp	r3, #0
 8010836:	d001      	beq.n	801083c <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010838:	2313      	movs	r3, #19
 801083a:	e02d      	b.n	8010898 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 801083c:	4b18      	ldr	r3, [pc, #96]	; (80108a0 <PrepareFrame+0x21c>)
 801083e:	2200      	movs	r2, #0
 8010840:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010844:	4b16      	ldr	r3, [pc, #88]	; (80108a0 <PrepareFrame+0x21c>)
 8010846:	4a1b      	ldr	r2, [pc, #108]	; (80108b4 <PrepareFrame+0x230>)
 8010848:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	b2da      	uxtb	r2, r3
 8010850:	4b13      	ldr	r3, [pc, #76]	; (80108a0 <PrepareFrame+0x21c>)
 8010852:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 8010856:	e01b      	b.n	8010890 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d01a      	beq.n	8010894 <PrepareFrame+0x210>
 801085e:	4b10      	ldr	r3, [pc, #64]	; (80108a0 <PrepareFrame+0x21c>)
 8010860:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010864:	2b00      	cmp	r3, #0
 8010866:	d015      	beq.n	8010894 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010868:	4813      	ldr	r0, [pc, #76]	; (80108b8 <PrepareFrame+0x234>)
 801086a:	4b0d      	ldr	r3, [pc, #52]	; (80108a0 <PrepareFrame+0x21c>)
 801086c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010870:	b29b      	uxth	r3, r3
 8010872:	461a      	mov	r2, r3
 8010874:	6839      	ldr	r1, [r7, #0]
 8010876:	f007 fcd0 	bl	801821a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 801087a:	4b09      	ldr	r3, [pc, #36]	; (80108a0 <PrepareFrame+0x21c>)
 801087c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8010880:	b29b      	uxth	r3, r3
 8010882:	3301      	adds	r3, #1
 8010884:	b29a      	uxth	r2, r3
 8010886:	4b06      	ldr	r3, [pc, #24]	; (80108a0 <PrepareFrame+0x21c>)
 8010888:	801a      	strh	r2, [r3, #0]
            }
            break;
 801088a:	e003      	b.n	8010894 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801088c:	2302      	movs	r3, #2
 801088e:	e003      	b.n	8010898 <PrepareFrame+0x214>
            break;
 8010890:	bf00      	nop
 8010892:	e000      	b.n	8010896 <PrepareFrame+0x212>
            break;
 8010894:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8010896:	2300      	movs	r3, #0
}
 8010898:	4618      	mov	r0, r3
 801089a:	3720      	adds	r7, #32
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	20000670 	.word	0x20000670
 80108a4:	200007a8 	.word	0x200007a8
 80108a8:	20000672 	.word	0x20000672
 80108ac:	20000b90 	.word	0x20000b90
 80108b0:	20000788 	.word	0x20000788
 80108b4:	20000b10 	.word	0x20000b10
 80108b8:	20000673 	.word	0x20000673

080108bc <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b08a      	sub	sp, #40	; 0x28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	4603      	mov	r3, r0
 80108c4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80108c6:	2303      	movs	r3, #3
 80108c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80108cc:	2300      	movs	r3, #0
 80108ce:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80108d0:	79fb      	ldrb	r3, [r7, #7]
 80108d2:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80108d4:	4b4a      	ldr	r3, [pc, #296]	; (8010a00 <SendFrameOnChannel+0x144>)
 80108d6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80108da:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80108dc:	4b48      	ldr	r3, [pc, #288]	; (8010a00 <SendFrameOnChannel+0x144>)
 80108de:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80108e2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80108e4:	4b46      	ldr	r3, [pc, #280]	; (8010a00 <SendFrameOnChannel+0x144>)
 80108e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80108e8:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80108ea:	4b45      	ldr	r3, [pc, #276]	; (8010a00 <SendFrameOnChannel+0x144>)
 80108ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108ee:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80108f0:	4b44      	ldr	r3, [pc, #272]	; (8010a04 <SendFrameOnChannel+0x148>)
 80108f2:	881b      	ldrh	r3, [r3, #0]
 80108f4:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80108f6:	4b42      	ldr	r3, [pc, #264]	; (8010a00 <SendFrameOnChannel+0x144>)
 80108f8:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80108fc:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80108fe:	4b40      	ldr	r3, [pc, #256]	; (8010a00 <SendFrameOnChannel+0x144>)
 8010900:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010904:	f107 020f 	add.w	r2, r7, #15
 8010908:	f107 0110 	add.w	r1, r7, #16
 801090c:	4b3e      	ldr	r3, [pc, #248]	; (8010a08 <SendFrameOnChannel+0x14c>)
 801090e:	f003 ff6c 	bl	80147ea <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010912:	4b3c      	ldr	r3, [pc, #240]	; (8010a04 <SendFrameOnChannel+0x148>)
 8010914:	2201      	movs	r2, #1
 8010916:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801091a:	4b39      	ldr	r3, [pc, #228]	; (8010a00 <SendFrameOnChannel+0x144>)
 801091c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010920:	b2da      	uxtb	r2, r3
 8010922:	4b38      	ldr	r3, [pc, #224]	; (8010a04 <SendFrameOnChannel+0x148>)
 8010924:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010928:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801092c:	4b35      	ldr	r3, [pc, #212]	; (8010a04 <SendFrameOnChannel+0x148>)
 801092e:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 8010932:	79fb      	ldrb	r3, [r7, #7]
 8010934:	4a33      	ldr	r2, [pc, #204]	; (8010a04 <SendFrameOnChannel+0x148>)
 8010936:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801093a:	4b32      	ldr	r3, [pc, #200]	; (8010a04 <SendFrameOnChannel+0x148>)
 801093c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010940:	4a30      	ldr	r2, [pc, #192]	; (8010a04 <SendFrameOnChannel+0x148>)
 8010942:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010946:	4b2f      	ldr	r3, [pc, #188]	; (8010a04 <SendFrameOnChannel+0x148>)
 8010948:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801094c:	4a2d      	ldr	r2, [pc, #180]	; (8010a04 <SendFrameOnChannel+0x148>)
 801094e:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010952:	f001 ff34 	bl	80127be <LoRaMacClassBIsBeaconModeActive>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00b      	beq.n	8010974 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 801095c:	4b29      	ldr	r3, [pc, #164]	; (8010a04 <SendFrameOnChannel+0x148>)
 801095e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8010962:	4618      	mov	r0, r3
 8010964:	f001 ff96 	bl	8012894 <LoRaMacClassBIsUplinkCollision>
 8010968:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 801096a:	6a3b      	ldr	r3, [r7, #32]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010970:	2310      	movs	r3, #16
 8010972:	e040      	b.n	80109f6 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010974:	4b22      	ldr	r3, [pc, #136]	; (8010a00 <SendFrameOnChannel+0x144>)
 8010976:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801097a:	2b01      	cmp	r3, #1
 801097c:	d101      	bne.n	8010982 <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 801097e:	f001 ff93 	bl	80128a8 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8010982:	f001 ff2d 	bl	80127e0 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8010986:	4b1e      	ldr	r3, [pc, #120]	; (8010a00 <SendFrameOnChannel+0x144>)
 8010988:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801098c:	b2db      	uxtb	r3, r3
 801098e:	4a1d      	ldr	r2, [pc, #116]	; (8010a04 <SendFrameOnChannel+0x148>)
 8010990:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 8010994:	4611      	mov	r1, r2
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff fc64 	bl	8010264 <SecureFrame>
 801099c:	4603      	mov	r3, r0
 801099e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80109a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d002      	beq.n	80109b0 <SendFrameOnChannel+0xf4>
    {
        return status;
 80109aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109ae:	e022      	b.n	80109f6 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80109b0:	4b14      	ldr	r3, [pc, #80]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109b2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80109b6:	f043 0302 	orr.w	r3, r3, #2
 80109ba:	4a12      	ldr	r2, [pc, #72]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109bc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 80109c0:	4b10      	ldr	r3, [pc, #64]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109c2:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80109c6:	3301      	adds	r3, #1
 80109c8:	b2da      	uxtb	r2, r3
 80109ca:	4b0e      	ldr	r3, [pc, #56]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109cc:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80109d0:	4b0c      	ldr	r3, [pc, #48]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109d2:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80109d6:	4b0b      	ldr	r3, [pc, #44]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109d8:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80109dc:	4b09      	ldr	r3, [pc, #36]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109de:	2200      	movs	r2, #0
 80109e0:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80109e4:	4b09      	ldr	r3, [pc, #36]	; (8010a0c <SendFrameOnChannel+0x150>)
 80109e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e8:	4a06      	ldr	r2, [pc, #24]	; (8010a04 <SendFrameOnChannel+0x148>)
 80109ea:	8812      	ldrh	r2, [r2, #0]
 80109ec:	b2d2      	uxtb	r2, r2
 80109ee:	4611      	mov	r1, r2
 80109f0:	4807      	ldr	r0, [pc, #28]	; (8010a10 <SendFrameOnChannel+0x154>)
 80109f2:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80109f4:	2300      	movs	r3, #0
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3728      	adds	r7, #40	; 0x28
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20000b90 	.word	0x20000b90
 8010a04:	20000670 	.word	0x20000670
 8010a08:	20000a90 	.word	0x20000a90
 8010a0c:	0801dd4c 	.word	0x0801dd4c
 8010a10:	20000672 	.word	0x20000672

08010a14 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	6039      	str	r1, [r7, #0]
 8010a1e:	80fb      	strh	r3, [r7, #6]
 8010a20:	4613      	mov	r3, r2
 8010a22:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010a24:	4b09      	ldr	r3, [pc, #36]	; (8010a4c <SetTxContinuousWave+0x38>)
 8010a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a28:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010a2c:	88fa      	ldrh	r2, [r7, #6]
 8010a2e:	6838      	ldr	r0, [r7, #0]
 8010a30:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010a32:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <SetTxContinuousWave+0x3c>)
 8010a34:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a38:	f043 0302 	orr.w	r3, r3, #2
 8010a3c:	4a04      	ldr	r2, [pc, #16]	; (8010a50 <SetTxContinuousWave+0x3c>)
 8010a3e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8010a42:	2300      	movs	r3, #0
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	0801dd4c 	.word	0x0801dd4c
 8010a50:	20000670 	.word	0x20000670

08010a54 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b082      	sub	sp, #8
 8010a58:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010a5e:	4b3e      	ldr	r3, [pc, #248]	; (8010b58 <RestoreNvmData+0x104>)
 8010a60:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d001      	beq.n	8010a6c <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e071      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010a6c:	2124      	movs	r1, #36	; 0x24
 8010a6e:	483b      	ldr	r0, [pc, #236]	; (8010b5c <RestoreNvmData+0x108>)
 8010a70:	f007 fc28 	bl	80182c4 <Crc32>
 8010a74:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8010a76:	4b39      	ldr	r3, [pc, #228]	; (8010b5c <RestoreNvmData+0x108>)
 8010a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d001      	beq.n	8010a84 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a80:	2317      	movs	r3, #23
 8010a82:	e065      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8010a84:	2114      	movs	r1, #20
 8010a86:	4836      	ldr	r0, [pc, #216]	; (8010b60 <RestoreNvmData+0x10c>)
 8010a88:	f007 fc1c 	bl	80182c4 <Crc32>
 8010a8c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010a8e:	4b33      	ldr	r3, [pc, #204]	; (8010b5c <RestoreNvmData+0x108>)
 8010a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a92:	687a      	ldr	r2, [r7, #4]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d001      	beq.n	8010a9c <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010a98:	2317      	movs	r3, #23
 8010a9a:	e059      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010a9c:	21e0      	movs	r1, #224	; 0xe0
 8010a9e:	4831      	ldr	r0, [pc, #196]	; (8010b64 <RestoreNvmData+0x110>)
 8010aa0:	f007 fc10 	bl	80182c4 <Crc32>
 8010aa4:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8010aa6:	4b2d      	ldr	r3, [pc, #180]	; (8010b5c <RestoreNvmData+0x108>)
 8010aa8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d001      	beq.n	8010ab6 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ab2:	2317      	movs	r3, #23
 8010ab4:	e04c      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8010ab6:	21bc      	movs	r1, #188	; 0xbc
 8010ab8:	482b      	ldr	r0, [pc, #172]	; (8010b68 <RestoreNvmData+0x114>)
 8010aba:	f007 fc03 	bl	80182c4 <Crc32>
 8010abe:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8010ac0:	4b26      	ldr	r3, [pc, #152]	; (8010b5c <RestoreNvmData+0x108>)
 8010ac2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d001      	beq.n	8010ad0 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010acc:	2317      	movs	r3, #23
 8010ace:	e03f      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8010ad0:	2110      	movs	r1, #16
 8010ad2:	4826      	ldr	r0, [pc, #152]	; (8010b6c <RestoreNvmData+0x118>)
 8010ad4:	f007 fbf6 	bl	80182c4 <Crc32>
 8010ad8:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8010ada:	4b20      	ldr	r3, [pc, #128]	; (8010b5c <RestoreNvmData+0x108>)
 8010adc:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d001      	beq.n	8010aea <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010ae6:	2317      	movs	r3, #23
 8010ae8:	e032      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8010aea:	2114      	movs	r1, #20
 8010aec:	4820      	ldr	r0, [pc, #128]	; (8010b70 <RestoreNvmData+0x11c>)
 8010aee:	f007 fbe9 	bl	80182c4 <Crc32>
 8010af2:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8010af4:	4b19      	ldr	r3, [pc, #100]	; (8010b5c <RestoreNvmData+0x108>)
 8010af6:	f8d3 3588 	ldr.w	r3, [r3, #1416]	; 0x588
 8010afa:	687a      	ldr	r2, [r7, #4]
 8010afc:	429a      	cmp	r2, r3
 8010afe:	d001      	beq.n	8010b04 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010b00:	2317      	movs	r3, #23
 8010b02:	e025      	b.n	8010b50 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8010b04:	f240 528c 	movw	r2, #1420	; 0x58c
 8010b08:	4914      	ldr	r1, [pc, #80]	; (8010b5c <RestoreNvmData+0x108>)
 8010b0a:	481a      	ldr	r0, [pc, #104]	; (8010b74 <RestoreNvmData+0x120>)
 8010b0c:	f007 fb85 	bl	801821a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010b10:	f240 528c 	movw	r2, #1420	; 0x58c
 8010b14:	2100      	movs	r1, #0
 8010b16:	4811      	ldr	r0, [pc, #68]	; (8010b5c <RestoreNvmData+0x108>)
 8010b18:	f007 fbba 	bl	8018290 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010b1c:	4b0e      	ldr	r3, [pc, #56]	; (8010b58 <RestoreNvmData+0x104>)
 8010b1e:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010b22:	4b0d      	ldr	r3, [pc, #52]	; (8010b58 <RestoreNvmData+0x104>)
 8010b24:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010b28:	4b12      	ldr	r3, [pc, #72]	; (8010b74 <RestoreNvmData+0x120>)
 8010b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b2c:	4a0a      	ldr	r2, [pc, #40]	; (8010b58 <RestoreNvmData+0x104>)
 8010b2e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010b32:	4b10      	ldr	r3, [pc, #64]	; (8010b74 <RestoreNvmData+0x120>)
 8010b34:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010b38:	4b07      	ldr	r3, [pc, #28]	; (8010b58 <RestoreNvmData+0x104>)
 8010b3a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010b3e:	4b06      	ldr	r3, [pc, #24]	; (8010b58 <RestoreNvmData+0x104>)
 8010b40:	2201      	movs	r2, #1
 8010b42:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010b46:	4b04      	ldr	r3, [pc, #16]	; (8010b58 <RestoreNvmData+0x104>)
 8010b48:	2202      	movs	r2, #2
 8010b4a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3708      	adds	r7, #8
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	20000670 	.word	0x20000670
 8010b5c:	2000111c 	.word	0x2000111c
 8010b60:	20001144 	.word	0x20001144
 8010b64:	2000115c 	.word	0x2000115c
 8010b68:	20001240 	.word	0x20001240
 8010b6c:	20001300 	.word	0x20001300
 8010b70:	20001690 	.word	0x20001690
 8010b74:	20000b90 	.word	0x20000b90

08010b78 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b083      	sub	sp, #12
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <DetermineFrameType+0x16>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b8e:	2303      	movs	r3, #3
 8010b90:	e03b      	b.n	8010c0a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	7b1b      	ldrb	r3, [r3, #12]
 8010b96:	f003 030f 	and.w	r3, r3, #15
 8010b9a:	b2db      	uxtb	r3, r3
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d008      	beq.n	8010bb2 <DetermineFrameType+0x3a>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d003      	beq.n	8010bb2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	2200      	movs	r2, #0
 8010bae:	701a      	strb	r2, [r3, #0]
 8010bb0:	e02a      	b.n	8010c08 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d103      	bne.n	8010bc4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	701a      	strb	r2, [r3, #0]
 8010bc2:	e021      	b.n	8010c08 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	7b1b      	ldrb	r3, [r3, #12]
 8010bc8:	f003 030f 	and.w	r3, r3, #15
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d108      	bne.n	8010be4 <DetermineFrameType+0x6c>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d103      	bne.n	8010be4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	2202      	movs	r2, #2
 8010be0:	701a      	strb	r2, [r3, #0]
 8010be2:	e011      	b.n	8010c08 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	7b1b      	ldrb	r3, [r3, #12]
 8010be8:	f003 030f 	and.w	r3, r3, #15
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d108      	bne.n	8010c04 <DetermineFrameType+0x8c>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d003      	beq.n	8010c04 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	2203      	movs	r2, #3
 8010c00:	701a      	strb	r2, [r3, #0]
 8010c02:	e001      	b.n	8010c08 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010c04:	2318      	movs	r3, #24
 8010c06:	e000      	b.n	8010c0a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010c08:	2300      	movs	r3, #0
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	370c      	adds	r7, #12
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bc80      	pop	{r7}
 8010c12:	4770      	bx	lr

08010c14 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	460a      	mov	r2, r1
 8010c1e:	71fb      	strb	r3, [r7, #7]
 8010c20:	4613      	mov	r3, r2
 8010c22:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010c24:	79fa      	ldrb	r2, [r7, #7]
 8010c26:	79bb      	ldrb	r3, [r7, #6]
 8010c28:	429a      	cmp	r2, r3
 8010c2a:	d301      	bcc.n	8010c30 <CheckRetrans+0x1c>
    {
        return true;
 8010c2c:	2301      	movs	r3, #1
 8010c2e:	e000      	b.n	8010c32 <CheckRetrans+0x1e>
    }
    return false;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	370c      	adds	r7, #12
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bc80      	pop	{r7}
 8010c3a:	4770      	bx	lr

08010c3c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010c40:	4b12      	ldr	r3, [pc, #72]	; (8010c8c <CheckRetransUnconfirmedUplink+0x50>)
 8010c42:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010c46:	4a12      	ldr	r2, [pc, #72]	; (8010c90 <CheckRetransUnconfirmedUplink+0x54>)
 8010c48:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff ffe0 	bl	8010c14 <CheckRetrans>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d001      	beq.n	8010c5e <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e014      	b.n	8010c88 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010c5e:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <CheckRetransUnconfirmedUplink+0x50>)
 8010c60:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010c64:	f003 0302 	and.w	r3, r3, #2
 8010c68:	b2db      	uxtb	r3, r3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d00b      	beq.n	8010c86 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010c6e:	4b07      	ldr	r3, [pc, #28]	; (8010c8c <CheckRetransUnconfirmedUplink+0x50>)
 8010c70:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d004      	beq.n	8010c82 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010c78:	4b04      	ldr	r3, [pc, #16]	; (8010c8c <CheckRetransUnconfirmedUplink+0x50>)
 8010c7a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d101      	bne.n	8010c86 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8010c82:	2301      	movs	r3, #1
 8010c84:	e000      	b.n	8010c88 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8010c86:	2300      	movs	r3, #0
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20000670 	.word	0x20000670
 8010c90:	20000b90 	.word	0x20000b90

08010c94 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010c98:	4b10      	ldr	r3, [pc, #64]	; (8010cdc <CheckRetransConfirmedUplink+0x48>)
 8010c9a:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8010c9e:	4a10      	ldr	r2, [pc, #64]	; (8010ce0 <CheckRetransConfirmedUplink+0x4c>)
 8010ca0:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8010ca4:	4611      	mov	r1, r2
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7ff ffb4 	bl	8010c14 <CheckRetrans>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	e00f      	b.n	8010cd6 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010cb6:	4b09      	ldr	r3, [pc, #36]	; (8010cdc <CheckRetransConfirmedUplink+0x48>)
 8010cb8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010cbc:	f003 0302 	and.w	r3, r3, #2
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d006      	beq.n	8010cd4 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010cc6:	4b05      	ldr	r3, [pc, #20]	; (8010cdc <CheckRetransConfirmedUplink+0x48>)
 8010cc8:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d001      	beq.n	8010cd4 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	e000      	b.n	8010cd6 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010cd4:	2300      	movs	r3, #0
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	20000670 	.word	0x20000670
 8010ce0:	20000b90 	.word	0x20000b90

08010ce4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b083      	sub	sp, #12
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf2:	d002      	beq.n	8010cfa <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010cfa:	687b      	ldr	r3, [r7, #4]
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bc80      	pop	{r7}
 8010d04:	4770      	bx	lr
	...

08010d08 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010d0c:	4b1a      	ldr	r3, [pc, #104]	; (8010d78 <StopRetransmission+0x70>)
 8010d0e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010d12:	f003 0302 	and.w	r3, r3, #2
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d009      	beq.n	8010d30 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010d1c:	4b16      	ldr	r3, [pc, #88]	; (8010d78 <StopRetransmission+0x70>)
 8010d1e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d011      	beq.n	8010d4a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010d26:	4b14      	ldr	r3, [pc, #80]	; (8010d78 <StopRetransmission+0x70>)
 8010d28:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010d2c:	2b01      	cmp	r3, #1
 8010d2e:	d00c      	beq.n	8010d4a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010d30:	4b12      	ldr	r3, [pc, #72]	; (8010d7c <StopRetransmission+0x74>)
 8010d32:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d007      	beq.n	8010d4a <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010d3a:	4b10      	ldr	r3, [pc, #64]	; (8010d7c <StopRetransmission+0x74>)
 8010d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7ff ffd0 	bl	8010ce4 <IncreaseAdrAckCounter>
 8010d44:	4603      	mov	r3, r0
 8010d46:	4a0d      	ldr	r2, [pc, #52]	; (8010d7c <StopRetransmission+0x74>)
 8010d48:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010d4a:	4b0b      	ldr	r3, [pc, #44]	; (8010d78 <StopRetransmission+0x70>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8010d52:	4b09      	ldr	r3, [pc, #36]	; (8010d78 <StopRetransmission+0x70>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010d5a:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <StopRetransmission+0x70>)
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010d62:	4b05      	ldr	r3, [pc, #20]	; (8010d78 <StopRetransmission+0x70>)
 8010d64:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010d68:	f023 0302 	bic.w	r3, r3, #2
 8010d6c:	4a02      	ldr	r2, [pc, #8]	; (8010d78 <StopRetransmission+0x70>)
 8010d6e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8010d72:	2301      	movs	r3, #1
}
 8010d74:	4618      	mov	r0, r3
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	20000670 	.word	0x20000670
 8010d7c:	20000b90 	.word	0x20000b90

08010d80 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	4603      	mov	r3, r0
 8010d88:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010d8a:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <CallNvmDataChangeCallback+0x38>)
 8010d8c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d00c      	beq.n	8010dae <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010d94:	4b08      	ldr	r3, [pc, #32]	; (8010db8 <CallNvmDataChangeCallback+0x38>)
 8010d96:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010d9a:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d006      	beq.n	8010dae <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010da0:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <CallNvmDataChangeCallback+0x38>)
 8010da2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	88fa      	ldrh	r2, [r7, #6]
 8010daa:	4610      	mov	r0, r2
 8010dac:	4798      	blx	r3
    }
}
 8010dae:	bf00      	nop
 8010db0:	3708      	adds	r7, #8
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	20000670 	.word	0x20000670

08010dbc <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010dc0:	4b0b      	ldr	r3, [pc, #44]	; (8010df0 <IsRequestPending+0x34>)
 8010dc2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010dc6:	f003 0304 	and.w	r3, r3, #4
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d107      	bne.n	8010de0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010dd0:	4b07      	ldr	r3, [pc, #28]	; (8010df0 <IsRequestPending+0x34>)
 8010dd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8010dd6:	f003 0301 	and.w	r3, r3, #1
 8010dda:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d001      	beq.n	8010de4 <IsRequestPending+0x28>
    {
        return 1;
 8010de0:	2301      	movs	r3, #1
 8010de2:	e000      	b.n	8010de6 <IsRequestPending+0x2a>
    }
    return 0;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bc80      	pop	{r7}
 8010dec:	4770      	bx	lr
 8010dee:	bf00      	nop
 8010df0:	20000670 	.word	0x20000670

08010df4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010df4:	b590      	push	{r4, r7, lr}
 8010df6:	b091      	sub	sp, #68	; 0x44
 8010df8:	af02      	add	r7, sp, #8
 8010dfa:	6178      	str	r0, [r7, #20]
 8010dfc:	6139      	str	r1, [r7, #16]
 8010dfe:	4613      	mov	r3, r2
 8010e00:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d002      	beq.n	8010e0e <LoRaMacInitialization+0x1a>
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d101      	bne.n	8010e12 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e0e:	2303      	movs	r3, #3
 8010e10:	e27c      	b.n	801130c <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00b      	beq.n	8010e32 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d007      	beq.n	8010e32 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d003      	beq.n	8010e32 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d101      	bne.n	8010e36 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010e32:	2303      	movs	r3, #3
 8010e34:	e26a      	b.n	801130c <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010e36:	7bfb      	ldrb	r3, [r7, #15]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f003 fbdb 	bl	80145f4 <RegionIsActive>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	f083 0301 	eor.w	r3, r3, #1
 8010e44:	b2db      	uxtb	r3, r3
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d001      	beq.n	8010e4e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010e4a:	2309      	movs	r3, #9
 8010e4c:	e25e      	b.n	801130c <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010e4e:	6978      	ldr	r0, [r7, #20]
 8010e50:	f002 f882 	bl	8012f58 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010e54:	f240 528c 	movw	r2, #1420	; 0x58c
 8010e58:	2100      	movs	r1, #0
 8010e5a:	48c7      	ldr	r0, [pc, #796]	; (8011178 <LoRaMacInitialization+0x384>)
 8010e5c:	f007 fa18 	bl	8018290 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010e60:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8010e64:	2100      	movs	r1, #0
 8010e66:	48c5      	ldr	r0, [pc, #788]	; (801117c <LoRaMacInitialization+0x388>)
 8010e68:	f007 fa12 	bl	8018290 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010e6c:	4ac2      	ldr	r2, [pc, #776]	; (8011178 <LoRaMacInitialization+0x384>)
 8010e6e:	7bfb      	ldrb	r3, [r7, #15]
 8010e70:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010e74:	4bc0      	ldr	r3, [pc, #768]	; (8011178 <LoRaMacInitialization+0x384>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010e7c:	4bbe      	ldr	r3, [pc, #760]	; (8011178 <LoRaMacInitialization+0x384>)
 8010e7e:	2200      	movs	r2, #0
 8010e80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010e84:	4bbc      	ldr	r3, [pc, #752]	; (8011178 <LoRaMacInitialization+0x384>)
 8010e86:	4abe      	ldr	r2, [pc, #760]	; (8011180 <LoRaMacInitialization+0x38c>)
 8010e88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010e92:	4bbc      	ldr	r3, [pc, #752]	; (8011184 <LoRaMacInitialization+0x390>)
 8010e94:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010e96:	4bbc      	ldr	r3, [pc, #752]	; (8011188 <LoRaMacInitialization+0x394>)
 8010e98:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8010e9a:	4bbc      	ldr	r3, [pc, #752]	; (801118c <LoRaMacInitialization+0x398>)
 8010e9c:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010e9e:	4bb6      	ldr	r3, [pc, #728]	; (8011178 <LoRaMacInitialization+0x384>)
 8010ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ea4:	f107 021c 	add.w	r2, r7, #28
 8010ea8:	4611      	mov	r1, r2
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f003 fbef 	bl	801468e <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010eb0:	230f      	movs	r3, #15
 8010eb2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eb6:	4bb0      	ldr	r3, [pc, #704]	; (8011178 <LoRaMacInitialization+0x384>)
 8010eb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ebc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010ec0:	4611      	mov	r1, r2
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f003 fbab 	bl	801461e <RegionGetPhyParam>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	bf14      	ite	ne
 8010ed2:	2301      	movne	r3, #1
 8010ed4:	2300      	moveq	r3, #0
 8010ed6:	b2da      	uxtb	r2, r3
 8010ed8:	4ba7      	ldr	r3, [pc, #668]	; (8011178 <LoRaMacInitialization+0x384>)
 8010eda:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010ede:	230a      	movs	r3, #10
 8010ee0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ee4:	4ba4      	ldr	r3, [pc, #656]	; (8011178 <LoRaMacInitialization+0x384>)
 8010ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010eea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010eee:	4611      	mov	r1, r2
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f003 fb94 	bl	801461e <RegionGetPhyParam>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010efc:	b25a      	sxtb	r2, r3
 8010efe:	4b9e      	ldr	r3, [pc, #632]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f00:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010f04:	2306      	movs	r3, #6
 8010f06:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f0a:	4b9b      	ldr	r3, [pc, #620]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f10:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f14:	4611      	mov	r1, r2
 8010f16:	4618      	mov	r0, r3
 8010f18:	f003 fb81 	bl	801461e <RegionGetPhyParam>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f22:	b25a      	sxtb	r2, r3
 8010f24:	4b94      	ldr	r3, [pc, #592]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f26:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010f2a:	2310      	movs	r3, #16
 8010f2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f30:	4b91      	ldr	r3, [pc, #580]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f36:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f3a:	4611      	mov	r1, r2
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	f003 fb6e 	bl	801461e <RegionGetPhyParam>
 8010f42:	4603      	mov	r3, r0
 8010f44:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f48:	4a8b      	ldr	r2, [pc, #556]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010f4e:	2311      	movs	r3, #17
 8010f50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f54:	4b88      	ldr	r3, [pc, #544]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f5e:	4611      	mov	r1, r2
 8010f60:	4618      	mov	r0, r3
 8010f62:	f003 fb5c 	bl	801461e <RegionGetPhyParam>
 8010f66:	4603      	mov	r3, r0
 8010f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6c:	4a82      	ldr	r2, [pc, #520]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010f72:	2312      	movs	r3, #18
 8010f74:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f78:	4b7f      	ldr	r3, [pc, #508]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010f7e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010f82:	4611      	mov	r1, r2
 8010f84:	4618      	mov	r0, r3
 8010f86:	f003 fb4a 	bl	801461e <RegionGetPhyParam>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f90:	4a79      	ldr	r2, [pc, #484]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010f96:	2313      	movs	r3, #19
 8010f98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f9c:	4b76      	ldr	r3, [pc, #472]	; (8011178 <LoRaMacInitialization+0x384>)
 8010f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fa2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010fa6:	4611      	mov	r1, r2
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f003 fb38 	bl	801461e <RegionGetPhyParam>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb4:	4a70      	ldr	r2, [pc, #448]	; (8011178 <LoRaMacInitialization+0x384>)
 8010fb6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010fba:	2314      	movs	r3, #20
 8010fbc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fc0:	4b6d      	ldr	r3, [pc, #436]	; (8011178 <LoRaMacInitialization+0x384>)
 8010fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f003 fb26 	bl	801461e <RegionGetPhyParam>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	4a67      	ldr	r2, [pc, #412]	; (8011178 <LoRaMacInitialization+0x384>)
 8010fda:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010fde:	2316      	movs	r3, #22
 8010fe0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fe4:	4b64      	ldr	r3, [pc, #400]	; (8011178 <LoRaMacInitialization+0x384>)
 8010fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010fea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010fee:	4611      	mov	r1, r2
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f003 fb14 	bl	801461e <RegionGetPhyParam>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	4b5e      	ldr	r3, [pc, #376]	; (8011178 <LoRaMacInitialization+0x384>)
 8011000:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8011004:	2317      	movs	r3, #23
 8011006:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801100a:	4b5b      	ldr	r3, [pc, #364]	; (8011178 <LoRaMacInitialization+0x384>)
 801100c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011010:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011014:	4611      	mov	r1, r2
 8011016:	4618      	mov	r0, r3
 8011018:	f003 fb01 	bl	801461e <RegionGetPhyParam>
 801101c:	4603      	mov	r3, r0
 801101e:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011022:	4a55      	ldr	r2, [pc, #340]	; (8011178 <LoRaMacInitialization+0x384>)
 8011024:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8011028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801102a:	4a53      	ldr	r2, [pc, #332]	; (8011178 <LoRaMacInitialization+0x384>)
 801102c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8011030:	2318      	movs	r3, #24
 8011032:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011036:	4b50      	ldr	r3, [pc, #320]	; (8011178 <LoRaMacInitialization+0x384>)
 8011038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801103c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011040:	4611      	mov	r1, r2
 8011042:	4618      	mov	r0, r3
 8011044:	f003 faeb 	bl	801461e <RegionGetPhyParam>
 8011048:	4603      	mov	r3, r0
 801104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801104c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104e:	b2da      	uxtb	r2, r3
 8011050:	4b49      	ldr	r3, [pc, #292]	; (8011178 <LoRaMacInitialization+0x384>)
 8011052:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8011056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b47      	ldr	r3, [pc, #284]	; (8011178 <LoRaMacInitialization+0x384>)
 801105c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8011060:	231d      	movs	r3, #29
 8011062:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011066:	4b44      	ldr	r3, [pc, #272]	; (8011178 <LoRaMacInitialization+0x384>)
 8011068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801106c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011070:	4611      	mov	r1, r2
 8011072:	4618      	mov	r0, r3
 8011074:	f003 fad3 	bl	801461e <RegionGetPhyParam>
 8011078:	4603      	mov	r3, r0
 801107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801107e:	b2da      	uxtb	r2, r3
 8011080:	4b3d      	ldr	r3, [pc, #244]	; (8011178 <LoRaMacInitialization+0x384>)
 8011082:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8011086:	231e      	movs	r3, #30
 8011088:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801108c:	4b3a      	ldr	r3, [pc, #232]	; (8011178 <LoRaMacInitialization+0x384>)
 801108e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011092:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011096:	4611      	mov	r1, r2
 8011098:	4618      	mov	r0, r3
 801109a:	f003 fac0 	bl	801461e <RegionGetPhyParam>
 801109e:	4603      	mov	r3, r0
 80110a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80110a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	4b34      	ldr	r3, [pc, #208]	; (8011178 <LoRaMacInitialization+0x384>)
 80110a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80110ac:	231f      	movs	r3, #31
 80110ae:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110b2:	4b31      	ldr	r3, [pc, #196]	; (8011178 <LoRaMacInitialization+0x384>)
 80110b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80110bc:	4611      	mov	r1, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f003 faad 	bl	801461e <RegionGetPhyParam>
 80110c4:	4603      	mov	r3, r0
 80110c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ca:	4a2b      	ldr	r2, [pc, #172]	; (8011178 <LoRaMacInitialization+0x384>)
 80110cc:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80110d0:	2320      	movs	r3, #32
 80110d2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110d6:	4b28      	ldr	r3, [pc, #160]	; (8011178 <LoRaMacInitialization+0x384>)
 80110d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80110dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f003 fa9b 	bl	801461e <RegionGetPhyParam>
 80110e8:	4603      	mov	r3, r0
 80110ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	4a22      	ldr	r2, [pc, #136]	; (8011178 <LoRaMacInitialization+0x384>)
 80110f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80110f4:	230b      	movs	r3, #11
 80110f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80110fa:	4b1f      	ldr	r3, [pc, #124]	; (8011178 <LoRaMacInitialization+0x384>)
 80110fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011100:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011104:	4611      	mov	r1, r2
 8011106:	4618      	mov	r0, r3
 8011108:	f003 fa89 	bl	801461e <RegionGetPhyParam>
 801110c:	4603      	mov	r3, r0
 801110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	b29a      	uxth	r2, r3
 8011114:	4b19      	ldr	r3, [pc, #100]	; (801117c <LoRaMacInitialization+0x388>)
 8011116:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801111a:	230c      	movs	r3, #12
 801111c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011120:	4b15      	ldr	r3, [pc, #84]	; (8011178 <LoRaMacInitialization+0x384>)
 8011122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011126:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801112a:	4611      	mov	r1, r2
 801112c:	4618      	mov	r0, r3
 801112e:	f003 fa76 	bl	801461e <RegionGetPhyParam>
 8011132:	4603      	mov	r3, r0
 8011134:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8011136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011138:	b29a      	uxth	r2, r3
 801113a:	4b10      	ldr	r3, [pc, #64]	; (801117c <LoRaMacInitialization+0x388>)
 801113c:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011140:	4b0d      	ldr	r3, [pc, #52]	; (8011178 <LoRaMacInitialization+0x384>)
 8011142:	2201      	movs	r2, #1
 8011144:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011148:	4b0b      	ldr	r3, [pc, #44]	; (8011178 <LoRaMacInitialization+0x384>)
 801114a:	220a      	movs	r2, #10
 801114c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011150:	4b09      	ldr	r3, [pc, #36]	; (8011178 <LoRaMacInitialization+0x384>)
 8011152:	2206      	movs	r2, #6
 8011154:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011158:	4b07      	ldr	r3, [pc, #28]	; (8011178 <LoRaMacInitialization+0x384>)
 801115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801115e:	4a06      	ldr	r2, [pc, #24]	; (8011178 <LoRaMacInitialization+0x384>)
 8011160:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8011162:	4b05      	ldr	r3, [pc, #20]	; (8011178 <LoRaMacInitialization+0x384>)
 8011164:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011168:	4b03      	ldr	r3, [pc, #12]	; (8011178 <LoRaMacInitialization+0x384>)
 801116a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801116e:	4b02      	ldr	r3, [pc, #8]	; (8011178 <LoRaMacInitialization+0x384>)
 8011170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011174:	e00c      	b.n	8011190 <LoRaMacInitialization+0x39c>
 8011176:	bf00      	nop
 8011178:	20000b90 	.word	0x20000b90
 801117c:	20000670 	.word	0x20000670
 8011180:	01000400 	.word	0x01000400
 8011184:	20000d74 	.word	0x20000d74
 8011188:	20000d88 	.word	0x20000d88
 801118c:	200016a8 	.word	0x200016a8
 8011190:	4a60      	ldr	r2, [pc, #384]	; (8011314 <LoRaMacInitialization+0x520>)
 8011192:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8011194:	4b5f      	ldr	r3, [pc, #380]	; (8011314 <LoRaMacInitialization+0x520>)
 8011196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801119a:	4a5e      	ldr	r2, [pc, #376]	; (8011314 <LoRaMacInitialization+0x520>)
 801119c:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801119e:	4b5d      	ldr	r3, [pc, #372]	; (8011314 <LoRaMacInitialization+0x520>)
 80111a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80111a4:	4a5b      	ldr	r2, [pc, #364]	; (8011314 <LoRaMacInitialization+0x520>)
 80111a6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80111a8:	4b5a      	ldr	r3, [pc, #360]	; (8011314 <LoRaMacInitialization+0x520>)
 80111aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80111ae:	4a59      	ldr	r2, [pc, #356]	; (8011314 <LoRaMacInitialization+0x520>)
 80111b0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80111b2:	4b58      	ldr	r3, [pc, #352]	; (8011314 <LoRaMacInitialization+0x520>)
 80111b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80111b8:	4a56      	ldr	r2, [pc, #344]	; (8011314 <LoRaMacInitialization+0x520>)
 80111ba:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80111bc:	4b55      	ldr	r3, [pc, #340]	; (8011314 <LoRaMacInitialization+0x520>)
 80111be:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 80111c2:	4b54      	ldr	r3, [pc, #336]	; (8011314 <LoRaMacInitialization+0x520>)
 80111c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80111c8:	4b52      	ldr	r3, [pc, #328]	; (8011314 <LoRaMacInitialization+0x520>)
 80111ca:	2201      	movs	r2, #1
 80111cc:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80111d0:	4a51      	ldr	r2, [pc, #324]	; (8011318 <LoRaMacInitialization+0x524>)
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 80111d8:	f7ff f8d4 	bl	8010384 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80111dc:	4b4d      	ldr	r3, [pc, #308]	; (8011314 <LoRaMacInitialization+0x520>)
 80111de:	2201      	movs	r2, #1
 80111e0:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 80111e4:	4a4c      	ldr	r2, [pc, #304]	; (8011318 <LoRaMacInitialization+0x524>)
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 80111ec:	4b4a      	ldr	r3, [pc, #296]	; (8011318 <LoRaMacInitialization+0x524>)
 80111ee:	2200      	movs	r2, #0
 80111f0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 80111f4:	4b48      	ldr	r3, [pc, #288]	; (8011318 <LoRaMacInitialization+0x524>)
 80111f6:	2201      	movs	r2, #1
 80111f8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80111fc:	4b45      	ldr	r3, [pc, #276]	; (8011314 <LoRaMacInitialization+0x520>)
 80111fe:	2200      	movs	r2, #0
 8011200:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8011202:	4b44      	ldr	r3, [pc, #272]	; (8011314 <LoRaMacInitialization+0x520>)
 8011204:	2200      	movs	r2, #0
 8011206:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011208:	2300      	movs	r3, #0
 801120a:	9300      	str	r3, [sp, #0]
 801120c:	4b43      	ldr	r3, [pc, #268]	; (801131c <LoRaMacInitialization+0x528>)
 801120e:	2200      	movs	r2, #0
 8011210:	f04f 31ff 	mov.w	r1, #4294967295
 8011214:	4842      	ldr	r0, [pc, #264]	; (8011320 <LoRaMacInitialization+0x52c>)
 8011216:	f00b f8a7 	bl	801c368 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801121a:	2300      	movs	r3, #0
 801121c:	9300      	str	r3, [sp, #0]
 801121e:	4b41      	ldr	r3, [pc, #260]	; (8011324 <LoRaMacInitialization+0x530>)
 8011220:	2200      	movs	r2, #0
 8011222:	f04f 31ff 	mov.w	r1, #4294967295
 8011226:	4840      	ldr	r0, [pc, #256]	; (8011328 <LoRaMacInitialization+0x534>)
 8011228:	f00b f89e 	bl	801c368 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801122c:	2300      	movs	r3, #0
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	4b3e      	ldr	r3, [pc, #248]	; (801132c <LoRaMacInitialization+0x538>)
 8011232:	2200      	movs	r2, #0
 8011234:	f04f 31ff 	mov.w	r1, #4294967295
 8011238:	483d      	ldr	r0, [pc, #244]	; (8011330 <LoRaMacInitialization+0x53c>)
 801123a:	f00b f895 	bl	801c368 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801123e:	2300      	movs	r3, #0
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	4b3c      	ldr	r3, [pc, #240]	; (8011334 <LoRaMacInitialization+0x540>)
 8011244:	2200      	movs	r2, #0
 8011246:	f04f 31ff 	mov.w	r1, #4294967295
 801124a:	483b      	ldr	r0, [pc, #236]	; (8011338 <LoRaMacInitialization+0x544>)
 801124c:	f00b f88c 	bl	801c368 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011250:	4c30      	ldr	r4, [pc, #192]	; (8011314 <LoRaMacInitialization+0x520>)
 8011252:	463b      	mov	r3, r7
 8011254:	4618      	mov	r0, r3
 8011256:	f00a fbf7 	bl	801ba48 <SysTimeGetMcuTime>
 801125a:	f504 7388 	add.w	r3, r4, #272	; 0x110
 801125e:	463a      	mov	r2, r7
 8011260:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011264:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011268:	4b34      	ldr	r3, [pc, #208]	; (801133c <LoRaMacInitialization+0x548>)
 801126a:	2200      	movs	r2, #0
 801126c:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 801126e:	4b2a      	ldr	r3, [pc, #168]	; (8011318 <LoRaMacInitialization+0x524>)
 8011270:	4a33      	ldr	r2, [pc, #204]	; (8011340 <LoRaMacInitialization+0x54c>)
 8011272:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011276:	4b28      	ldr	r3, [pc, #160]	; (8011318 <LoRaMacInitialization+0x524>)
 8011278:	4a32      	ldr	r2, [pc, #200]	; (8011344 <LoRaMacInitialization+0x550>)
 801127a:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 801127e:	4b26      	ldr	r3, [pc, #152]	; (8011318 <LoRaMacInitialization+0x524>)
 8011280:	4a31      	ldr	r2, [pc, #196]	; (8011348 <LoRaMacInitialization+0x554>)
 8011282:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011286:	4b24      	ldr	r3, [pc, #144]	; (8011318 <LoRaMacInitialization+0x524>)
 8011288:	4a30      	ldr	r2, [pc, #192]	; (801134c <LoRaMacInitialization+0x558>)
 801128a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801128e:	4b22      	ldr	r3, [pc, #136]	; (8011318 <LoRaMacInitialization+0x524>)
 8011290:	4a2f      	ldr	r2, [pc, #188]	; (8011350 <LoRaMacInitialization+0x55c>)
 8011292:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8011296:	4b2f      	ldr	r3, [pc, #188]	; (8011354 <LoRaMacInitialization+0x560>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	482f      	ldr	r0, [pc, #188]	; (8011358 <LoRaMacInitialization+0x564>)
 801129c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	689b      	ldr	r3, [r3, #8]
 80112a2:	4619      	mov	r1, r3
 80112a4:	482d      	ldr	r0, [pc, #180]	; (801135c <LoRaMacInitialization+0x568>)
 80112a6:	f7fa fb87 	bl	800b9b8 <SecureElementInit>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d001      	beq.n	80112b4 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80112b0:	2311      	movs	r3, #17
 80112b2:	e02b      	b.n	801130c <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80112b4:	4817      	ldr	r0, [pc, #92]	; (8011314 <LoRaMacInitialization+0x520>)
 80112b6:	f002 fafb 	bl	80138b0 <LoRaMacCryptoInit>
 80112ba:	4603      	mov	r3, r0
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d001      	beq.n	80112c4 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80112c0:	2311      	movs	r3, #17
 80112c2:	e023      	b.n	801130c <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80112c4:	f001 fc1a 	bl	8012afc <LoRaMacCommandsInit>
 80112c8:	4603      	mov	r3, r0
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d001      	beq.n	80112d2 <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80112ce:	2313      	movs	r3, #19
 80112d0:	e01c      	b.n	801130c <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80112d2:	4823      	ldr	r0, [pc, #140]	; (8011360 <LoRaMacInitialization+0x56c>)
 80112d4:	f002 fb8c 	bl	80139f0 <LoRaMacCryptoSetMulticastReference>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80112de:	2311      	movs	r3, #17
 80112e0:	e014      	b.n	801130c <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80112e2:	4b1c      	ldr	r3, [pc, #112]	; (8011354 <LoRaMacInitialization+0x560>)
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	4798      	blx	r3
 80112e8:	4603      	mov	r3, r0
 80112ea:	4618      	mov	r0, r3
 80112ec:	f006 ff70 	bl	80181d0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80112f0:	4b18      	ldr	r3, [pc, #96]	; (8011354 <LoRaMacInitialization+0x560>)
 80112f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112f4:	4a07      	ldr	r2, [pc, #28]	; (8011314 <LoRaMacInitialization+0x520>)
 80112f6:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 80112fa:	4610      	mov	r0, r2
 80112fc:	4798      	blx	r3
    Radio.Sleep( );
 80112fe:	4b15      	ldr	r3, [pc, #84]	; (8011354 <LoRaMacInitialization+0x560>)
 8011300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011302:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011304:	2001      	movs	r0, #1
 8011306:	f7fd fad3 	bl	800e8b0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	373c      	adds	r7, #60	; 0x3c
 8011310:	46bd      	mov	sp, r7
 8011312:	bd90      	pop	{r4, r7, pc}
 8011314:	20000b90 	.word	0x20000b90
 8011318:	20000670 	.word	0x20000670
 801131c:	0800ee65 	.word	0x0800ee65
 8011320:	200009d8 	.word	0x200009d8
 8011324:	0800eef5 	.word	0x0800eef5
 8011328:	200009f0 	.word	0x200009f0
 801132c:	0800ef6d 	.word	0x0800ef6d
 8011330:	20000a08 	.word	0x20000a08
 8011334:	0800efed 	.word	0x0800efed
 8011338:	20000a74 	.word	0x20000a74
 801133c:	20001738 	.word	0x20001738
 8011340:	0800d965 	.word	0x0800d965
 8011344:	0800d9dd 	.word	0x0800d9dd
 8011348:	0800dabd 	.word	0x0800dabd
 801134c:	0800da71 	.word	0x0800da71
 8011350:	0800daf9 	.word	0x0800daf9
 8011354:	0801dd4c 	.word	0x0801dd4c
 8011358:	200009bc 	.word	0x200009bc
 801135c:	20000cb4 	.word	0x20000cb4
 8011360:	20000c68 	.word	0x20000c68

08011364 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011364:	b480      	push	{r7}
 8011366:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011368:	4b04      	ldr	r3, [pc, #16]	; (801137c <LoRaMacStart+0x18>)
 801136a:	2200      	movs	r2, #0
 801136c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 8011370:	2300      	movs	r3, #0
}
 8011372:	4618      	mov	r0, r3
 8011374:	46bd      	mov	sp, r7
 8011376:	bc80      	pop	{r7}
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	20000670 	.word	0x20000670

08011380 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8011384:	f7fd fa74 	bl	800e870 <LoRaMacIsBusy>
 8011388:	4603      	mov	r3, r0
 801138a:	f083 0301 	eor.w	r3, r3, #1
 801138e:	b2db      	uxtb	r3, r3
 8011390:	2b00      	cmp	r3, #0
 8011392:	d005      	beq.n	80113a0 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 8011394:	4b07      	ldr	r3, [pc, #28]	; (80113b4 <LoRaMacStop+0x34>)
 8011396:	2201      	movs	r2, #1
 8011398:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 801139c:	2300      	movs	r3, #0
 801139e:	e007      	b.n	80113b0 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80113a0:	4b04      	ldr	r3, [pc, #16]	; (80113b4 <LoRaMacStop+0x34>)
 80113a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d101      	bne.n	80113ae <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80113aa:	2300      	movs	r3, #0
 80113ac:	e000      	b.n	80113b0 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80113ae:	2301      	movs	r3, #1
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	20000670 	.word	0x20000670

080113b8 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80113bc:	4812      	ldr	r0, [pc, #72]	; (8011408 <LoRaMacHalt+0x50>)
 80113be:	f00b f877 	bl	801c4b0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80113c2:	4812      	ldr	r0, [pc, #72]	; (801140c <LoRaMacHalt+0x54>)
 80113c4:	f00b f874 	bl	801c4b0 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80113c8:	4811      	ldr	r0, [pc, #68]	; (8011410 <LoRaMacHalt+0x58>)
 80113ca:	f00b f871 	bl	801c4b0 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80113ce:	4811      	ldr	r0, [pc, #68]	; (8011414 <LoRaMacHalt+0x5c>)
 80113d0:	f00b f86e 	bl	801c4b0 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80113d4:	f001 fa04 	bl	80127e0 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80113d8:	4b0f      	ldr	r3, [pc, #60]	; (8011418 <LoRaMacHalt+0x60>)
 80113da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113dc:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80113de:	4b0f      	ldr	r3, [pc, #60]	; (801141c <LoRaMacHalt+0x64>)
 80113e0:	2200      	movs	r2, #0
 80113e2:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 80113e6:	480e      	ldr	r0, [pc, #56]	; (8011420 <LoRaMacHalt+0x68>)
 80113e8:	f7fd fc18 	bl	800ec1c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80113ec:	f240 528c 	movw	r2, #1420	; 0x58c
 80113f0:	490b      	ldr	r1, [pc, #44]	; (8011420 <LoRaMacHalt+0x68>)
 80113f2:	480c      	ldr	r0, [pc, #48]	; (8011424 <LoRaMacHalt+0x6c>)
 80113f4:	f006 ff11 	bl	801821a <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80113f8:	4b08      	ldr	r3, [pc, #32]	; (801141c <LoRaMacHalt+0x64>)
 80113fa:	2201      	movs	r2, #1
 80113fc:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011400:	2300      	movs	r3, #0
}
 8011402:	4618      	mov	r0, r3
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	200009d8 	.word	0x200009d8
 801140c:	200009f0 	.word	0x200009f0
 8011410:	20000a08 	.word	0x20000a08
 8011414:	20000a74 	.word	0x20000a74
 8011418:	0801dd4c 	.word	0x0801dd4c
 801141c:	20000670 	.word	0x20000670
 8011420:	20000b90 	.word	0x20000b90
 8011424:	2000111c 	.word	0x2000111c

08011428 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011428:	b590      	push	{r4, r7, lr}
 801142a:	b08d      	sub	sp, #52	; 0x34
 801142c:	af02      	add	r7, sp, #8
 801142e:	4603      	mov	r3, r0
 8011430:	6039      	str	r1, [r7, #0]
 8011432:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011434:	4b42      	ldr	r3, [pc, #264]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 8011436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011438:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801143a:	4b41      	ldr	r3, [pc, #260]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 801143c:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 8011440:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8011442:	4b3f      	ldr	r3, [pc, #252]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 8011444:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 8011448:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 801144a:	4b3e      	ldr	r3, [pc, #248]	; (8011544 <LoRaMacQueryTxPossible+0x11c>)
 801144c:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011450:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8011452:	2300      	movs	r3, #0
 8011454:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d101      	bne.n	8011460 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801145c:	2303      	movs	r3, #3
 801145e:	e06b      	b.n	8011538 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011460:	2300      	movs	r3, #0
 8011462:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8011464:	4b36      	ldr	r3, [pc, #216]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 8011466:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801146a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801146c:	4b34      	ldr	r3, [pc, #208]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 801146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011470:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011472:	4b34      	ldr	r3, [pc, #208]	; (8011544 <LoRaMacQueryTxPossible+0x11c>)
 8011474:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8011478:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 801147a:	4b32      	ldr	r3, [pc, #200]	; (8011544 <LoRaMacQueryTxPossible+0x11c>)
 801147c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8011480:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011482:	4b2f      	ldr	r3, [pc, #188]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 8011484:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011488:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 801148c:	4b2c      	ldr	r3, [pc, #176]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 801148e:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8011492:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011496:	4b2b      	ldr	r3, [pc, #172]	; (8011544 <LoRaMacQueryTxPossible+0x11c>)
 8011498:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 801149c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80114a0:	4b27      	ldr	r3, [pc, #156]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 80114a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80114a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80114aa:	4b25      	ldr	r3, [pc, #148]	; (8011540 <LoRaMacQueryTxPossible+0x118>)
 80114ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80114b4:	f107 040d 	add.w	r4, r7, #13
 80114b8:	f107 020e 	add.w	r2, r7, #14
 80114bc:	f107 010f 	add.w	r1, r7, #15
 80114c0:	f107 0014 	add.w	r0, r7, #20
 80114c4:	f107 0310 	add.w	r3, r7, #16
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	4623      	mov	r3, r4
 80114cc:	f001 f852 	bl	8012574 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80114d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114d4:	4618      	mov	r0, r3
 80114d6:	f7fd fec5 	bl	800f264 <GetMaxAppPayloadWithoutFOptsLength>
 80114da:	4603      	mov	r3, r0
 80114dc:	461a      	mov	r2, r3
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80114e2:	f107 0308 	add.w	r3, r7, #8
 80114e6:	4618      	mov	r0, r3
 80114e8:	f001 fbd6 	bl	8012c98 <LoRaMacCommandsGetSizeSerializedCmds>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d001      	beq.n	80114f6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80114f2:	2313      	movs	r3, #19
 80114f4:	e020      	b.n	8011538 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	2b0f      	cmp	r3, #15
 80114fa:	d819      	bhi.n	8011530 <LoRaMacQueryTxPossible+0x108>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	785b      	ldrb	r3, [r3, #1]
 8011500:	461a      	mov	r2, r3
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	429a      	cmp	r2, r3
 8011506:	d313      	bcc.n	8011530 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	785a      	ldrb	r2, [r3, #1]
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	b2db      	uxtb	r3, r3
 8011510:	1ad3      	subs	r3, r2, r3
 8011512:	b2da      	uxtb	r2, r3
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	785b      	ldrb	r3, [r3, #1]
 801151c:	4619      	mov	r1, r3
 801151e:	79fa      	ldrb	r2, [r7, #7]
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	4413      	add	r3, r2
 8011524:	4299      	cmp	r1, r3
 8011526:	d301      	bcc.n	801152c <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	e005      	b.n	8011538 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801152c:	2308      	movs	r3, #8
 801152e:	e003      	b.n	8011538 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2200      	movs	r2, #0
 8011534:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011536:	2308      	movs	r3, #8
    }
}
 8011538:	4618      	mov	r0, r3
 801153a:	372c      	adds	r7, #44	; 0x2c
 801153c:	46bd      	mov	sp, r7
 801153e:	bd90      	pop	{r4, r7, pc}
 8011540:	20000b90 	.word	0x20000b90
 8011544:	20000670 	.word	0x20000670

08011548 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011548:	b590      	push	{r4, r7, lr}
 801154a:	b087      	sub	sp, #28
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011550:	2300      	movs	r3, #0
 8011552:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801155a:	2303      	movs	r3, #3
 801155c:	e191      	b.n	8011882 <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	2b39      	cmp	r3, #57	; 0x39
 8011564:	f200 8186 	bhi.w	8011874 <LoRaMacMibGetRequestConfirm+0x32c>
 8011568:	a201      	add	r2, pc, #4	; (adr r2, 8011570 <LoRaMacMibGetRequestConfirm+0x28>)
 801156a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801156e:	bf00      	nop
 8011570:	08011659 	.word	0x08011659
 8011574:	08011665 	.word	0x08011665
 8011578:	08011671 	.word	0x08011671
 801157c:	0801167d 	.word	0x0801167d
 8011580:	08011689 	.word	0x08011689
 8011584:	08011695 	.word	0x08011695
 8011588:	080116a1 	.word	0x080116a1
 801158c:	08011875 	.word	0x08011875
 8011590:	08011875 	.word	0x08011875
 8011594:	08011875 	.word	0x08011875
 8011598:	08011875 	.word	0x08011875
 801159c:	08011875 	.word	0x08011875
 80115a0:	08011875 	.word	0x08011875
 80115a4:	08011875 	.word	0x08011875
 80115a8:	08011875 	.word	0x08011875
 80115ac:	080116ad 	.word	0x080116ad
 80115b0:	080116b9 	.word	0x080116b9
 80115b4:	080116c5 	.word	0x080116c5
 80115b8:	080116e7 	.word	0x080116e7
 80115bc:	080116f9 	.word	0x080116f9
 80115c0:	0801170b 	.word	0x0801170b
 80115c4:	0801171d 	.word	0x0801171d
 80115c8:	08011751 	.word	0x08011751
 80115cc:	0801172f 	.word	0x0801172f
 80115d0:	08011773 	.word	0x08011773
 80115d4:	0801177f 	.word	0x0801177f
 80115d8:	08011789 	.word	0x08011789
 80115dc:	08011793 	.word	0x08011793
 80115e0:	0801179d 	.word	0x0801179d
 80115e4:	080117a7 	.word	0x080117a7
 80115e8:	080117b1 	.word	0x080117b1
 80115ec:	080117dd 	.word	0x080117dd
 80115f0:	080117e9 	.word	0x080117e9
 80115f4:	08011801 	.word	0x08011801
 80115f8:	080117f5 	.word	0x080117f5
 80115fc:	0801180d 	.word	0x0801180d
 8011600:	08011817 	.word	0x08011817
 8011604:	08011823 	.word	0x08011823
 8011608:	0801183d 	.word	0x0801183d
 801160c:	0801182d 	.word	0x0801182d
 8011610:	08011835 	.word	0x08011835
 8011614:	08011875 	.word	0x08011875
 8011618:	08011849 	.word	0x08011849
 801161c:	08011875 	.word	0x08011875
 8011620:	08011875 	.word	0x08011875
 8011624:	08011875 	.word	0x08011875
 8011628:	08011875 	.word	0x08011875
 801162c:	08011875 	.word	0x08011875
 8011630:	08011875 	.word	0x08011875
 8011634:	08011875 	.word	0x08011875
 8011638:	08011875 	.word	0x08011875
 801163c:	08011875 	.word	0x08011875
 8011640:	08011875 	.word	0x08011875
 8011644:	08011875 	.word	0x08011875
 8011648:	08011875 	.word	0x08011875
 801164c:	08011875 	.word	0x08011875
 8011650:	0801185d 	.word	0x0801185d
 8011654:	08011869 	.word	0x08011869
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011658:	4b8c      	ldr	r3, [pc, #560]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801165a:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	711a      	strb	r2, [r3, #4]
            break;
 8011662:	e10d      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011664:	4b89      	ldr	r3, [pc, #548]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011666:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	711a      	strb	r2, [r3, #4]
            break;
 801166e:	e107      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011670:	f7fa fc80 	bl	800bf74 <SecureElementGetDevEui>
 8011674:	4602      	mov	r2, r0
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	605a      	str	r2, [r3, #4]
            break;
 801167a:	e101      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 801167c:	f7fa fc9c 	bl	800bfb8 <SecureElementGetJoinEui>
 8011680:	4602      	mov	r2, r0
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	605a      	str	r2, [r3, #4]
            break;
 8011686:	e0fb      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011688:	4b80      	ldr	r3, [pc, #512]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801168a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	711a      	strb	r2, [r3, #4]
            break;
 8011692:	e0f5      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8011694:	4b7d      	ldr	r3, [pc, #500]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011696:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	605a      	str	r2, [r3, #4]
            break;
 801169e:	e0ef      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80116a0:	4b7a      	ldr	r3, [pc, #488]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80116a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	605a      	str	r2, [r3, #4]
            break;
 80116aa:	e0e9      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80116ac:	4b77      	ldr	r3, [pc, #476]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ae:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	711a      	strb	r2, [r3, #4]
            break;
 80116b6:	e0e3      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80116b8:	4b74      	ldr	r3, [pc, #464]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ba:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	711a      	strb	r2, [r3, #4]
            break;
 80116c2:	e0dd      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80116c4:	231c      	movs	r3, #28
 80116c6:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116c8:	4b70      	ldr	r3, [pc, #448]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80116ce:	f107 0210 	add.w	r2, r7, #16
 80116d2:	4611      	mov	r1, r2
 80116d4:	4618      	mov	r0, r3
 80116d6:	f002 ffa2 	bl	801461e <RegionGetPhyParam>
 80116da:	4603      	mov	r3, r0
 80116dc:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80116de:	68fa      	ldr	r2, [r7, #12]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	605a      	str	r2, [r3, #4]
            break;
 80116e4:	e0cc      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4a68      	ldr	r2, [pc, #416]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80116ea:	3304      	adds	r3, #4
 80116ec:	3264      	adds	r2, #100	; 0x64
 80116ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116f2:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80116f6:	e0c3      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4a64      	ldr	r2, [pc, #400]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80116fc:	3304      	adds	r3, #4
 80116fe:	32a8      	adds	r2, #168	; 0xa8
 8011700:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011704:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011708:	e0ba      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	4a5f      	ldr	r2, [pc, #380]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801170e:	3304      	adds	r3, #4
 8011710:	326c      	adds	r2, #108	; 0x6c
 8011712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011716:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801171a:	e0b1      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	4a5b      	ldr	r2, [pc, #364]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011720:	3304      	adds	r3, #4
 8011722:	32b0      	adds	r2, #176	; 0xb0
 8011724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011728:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801172c:	e0a8      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801172e:	231a      	movs	r3, #26
 8011730:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011732:	4b56      	ldr	r3, [pc, #344]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011738:	f107 0210 	add.w	r2, r7, #16
 801173c:	4611      	mov	r1, r2
 801173e:	4618      	mov	r0, r3
 8011740:	f002 ff6d 	bl	801461e <RegionGetPhyParam>
 8011744:	4603      	mov	r3, r0
 8011746:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	605a      	str	r2, [r3, #4]
            break;
 801174e:	e097      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011750:	2319      	movs	r3, #25
 8011752:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011754:	4b4d      	ldr	r3, [pc, #308]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801175a:	f107 0210 	add.w	r2, r7, #16
 801175e:	4611      	mov	r1, r2
 8011760:	4618      	mov	r0, r3
 8011762:	f002 ff5c 	bl	801461e <RegionGetPhyParam>
 8011766:	4603      	mov	r3, r0
 8011768:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	605a      	str	r2, [r3, #4]
            break;
 8011770:	e086      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8011772:	4b46      	ldr	r3, [pc, #280]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011774:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	711a      	strb	r2, [r3, #4]
            break;
 801177c:	e080      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 801177e:	4b43      	ldr	r3, [pc, #268]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011780:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	605a      	str	r2, [r3, #4]
            break;
 8011786:	e07b      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011788:	4b40      	ldr	r3, [pc, #256]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801178a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	605a      	str	r2, [r3, #4]
            break;
 8011790:	e076      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8011792:	4b3e      	ldr	r3, [pc, #248]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	605a      	str	r2, [r3, #4]
            break;
 801179a:	e071      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801179c:	4b3b      	ldr	r3, [pc, #236]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801179e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	605a      	str	r2, [r3, #4]
            break;
 80117a4:	e06c      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80117a6:	4b39      	ldr	r3, [pc, #228]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80117a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	605a      	str	r2, [r3, #4]
            break;
 80117ae:	e067      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80117b0:	2302      	movs	r3, #2
 80117b2:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80117b4:	4b35      	ldr	r3, [pc, #212]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80117b6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80117ba:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80117bc:	4b33      	ldr	r3, [pc, #204]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80117be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80117c2:	f107 0210 	add.w	r2, r7, #16
 80117c6:	4611      	mov	r1, r2
 80117c8:	4618      	mov	r0, r3
 80117ca:	f002 ff28 	bl	801461e <RegionGetPhyParam>
 80117ce:	4603      	mov	r3, r0
 80117d0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	b25a      	sxtb	r2, r3
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	711a      	strb	r2, [r3, #4]
            break;
 80117da:	e051      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80117dc:	4b2b      	ldr	r3, [pc, #172]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80117de:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	711a      	strb	r2, [r3, #4]
            break;
 80117e6:	e04b      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80117e8:	4b28      	ldr	r3, [pc, #160]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80117ea:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	711a      	strb	r2, [r3, #4]
            break;
 80117f2:	e045      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80117f4:	4b25      	ldr	r3, [pc, #148]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 80117f6:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	711a      	strb	r2, [r3, #4]
            break;
 80117fe:	e03f      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011800:	4b22      	ldr	r3, [pc, #136]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011802:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	711a      	strb	r2, [r3, #4]
            break;
 801180a:	e039      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 801180c:	4b1f      	ldr	r3, [pc, #124]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801180e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	605a      	str	r2, [r3, #4]
            break;
 8011814:	e034      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8011816:	4b1d      	ldr	r3, [pc, #116]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011818:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	711a      	strb	r2, [r3, #4]
            break;
 8011820:	e02e      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011822:	4b1a      	ldr	r3, [pc, #104]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011824:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	605a      	str	r2, [r3, #4]
            break;
 801182a:	e029      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	4a17      	ldr	r2, [pc, #92]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 8011830:	605a      	str	r2, [r3, #4]
            break;
 8011832:	e025      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	4a16      	ldr	r2, [pc, #88]	; (8011890 <LoRaMacMibGetRequestConfirm+0x348>)
 8011838:	605a      	str	r2, [r3, #4]
            break;
 801183a:	e021      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801183c:	4b13      	ldr	r3, [pc, #76]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801183e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	605a      	str	r2, [r3, #4]
            break;
 8011846:	e01b      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	4a10      	ldr	r2, [pc, #64]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801184c:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8011850:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8011852:	687c      	ldr	r4, [r7, #4]
 8011854:	f003 f8f4 	bl	8014a40 <RegionGetVersion>
 8011858:	60a0      	str	r0, [r4, #8]
            break;
 801185a:	e011      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 801185c:	4b0b      	ldr	r3, [pc, #44]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801185e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	605a      	str	r2, [r3, #4]
            break;
 8011866:	e00b      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011868:	4b08      	ldr	r3, [pc, #32]	; (801188c <LoRaMacMibGetRequestConfirm+0x344>)
 801186a:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	711a      	strb	r2, [r3, #4]
            break;
 8011872:	e005      	b.n	8011880 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 ffca 	bl	801280e <LoRaMacClassBMibGetRequestConfirm>
 801187a:	4603      	mov	r3, r0
 801187c:	75fb      	strb	r3, [r7, #23]
            break;
 801187e:	bf00      	nop
        }
    }
    return status;
 8011880:	7dfb      	ldrb	r3, [r7, #23]
}
 8011882:	4618      	mov	r0, r3
 8011884:	371c      	adds	r7, #28
 8011886:	46bd      	mov	sp, r7
 8011888:	bd90      	pop	{r4, r7, pc}
 801188a:	bf00      	nop
 801188c:	20000b90 	.word	0x20000b90
 8011890:	2000111c 	.word	0x2000111c

08011894 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b086      	sub	sp, #24
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801189c:	2300      	movs	r3, #0
 801189e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d101      	bne.n	80118aa <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80118a6:	2303      	movs	r3, #3
 80118a8:	e35c      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80118aa:	4bb9      	ldr	r3, [pc, #740]	; (8011b90 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80118ac:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80118b0:	f003 0302 	and.w	r3, r3, #2
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d001      	beq.n	80118bc <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80118b8:	2301      	movs	r3, #1
 80118ba:	e353      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b39      	cmp	r3, #57	; 0x39
 80118c2:	f200 8323 	bhi.w	8011f0c <LoRaMacMibSetRequestConfirm+0x678>
 80118c6:	a201      	add	r2, pc, #4	; (adr r2, 80118cc <LoRaMacMibSetRequestConfirm+0x38>)
 80118c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118cc:	080119b5 	.word	0x080119b5
 80118d0:	080119c5 	.word	0x080119c5
 80118d4:	080119df 	.word	0x080119df
 80118d8:	080119f7 	.word	0x080119f7
 80118dc:	08011a0f 	.word	0x08011a0f
 80118e0:	08011a1b 	.word	0x08011a1b
 80118e4:	08011a27 	.word	0x08011a27
 80118e8:	08011a33 	.word	0x08011a33
 80118ec:	08011a59 	.word	0x08011a59
 80118f0:	08011a7f 	.word	0x08011a7f
 80118f4:	08011aa5 	.word	0x08011aa5
 80118f8:	08011acb 	.word	0x08011acb
 80118fc:	08011af1 	.word	0x08011af1
 8011900:	08011b17 	.word	0x08011b17
 8011904:	08011b3d 	.word	0x08011b3d
 8011908:	08011b63 	.word	0x08011b63
 801190c:	08011b83 	.word	0x08011b83
 8011910:	08011f0d 	.word	0x08011f0d
 8011914:	08011b9d 	.word	0x08011b9d
 8011918:	08011c0d 	.word	0x08011c0d
 801191c:	08011c4d 	.word	0x08011c4d
 8011920:	08011caf 	.word	0x08011caf
 8011924:	08011d1f 	.word	0x08011d1f
 8011928:	08011cef 	.word	0x08011cef
 801192c:	08011d4f 	.word	0x08011d4f
 8011930:	08011d71 	.word	0x08011d71
 8011934:	08011d7b 	.word	0x08011d7b
 8011938:	08011d85 	.word	0x08011d85
 801193c:	08011d8f 	.word	0x08011d8f
 8011940:	08011d99 	.word	0x08011d99
 8011944:	08011f0d 	.word	0x08011f0d
 8011948:	08011da3 	.word	0x08011da3
 801194c:	08011dd5 	.word	0x08011dd5
 8011950:	08011e41 	.word	0x08011e41
 8011954:	08011e0f 	.word	0x08011e0f
 8011958:	08011e7d 	.word	0x08011e7d
 801195c:	08011e93 	.word	0x08011e93
 8011960:	08011eab 	.word	0x08011eab
 8011964:	08011eb5 	.word	0x08011eb5
 8011968:	08011ec1 	.word	0x08011ec1
 801196c:	08011f0d 	.word	0x08011f0d
 8011970:	08011ecb 	.word	0x08011ecb
 8011974:	08011f0d 	.word	0x08011f0d
 8011978:	08011f0d 	.word	0x08011f0d
 801197c:	08011f0d 	.word	0x08011f0d
 8011980:	08011f0d 	.word	0x08011f0d
 8011984:	08011f0d 	.word	0x08011f0d
 8011988:	08011f0d 	.word	0x08011f0d
 801198c:	08011f0d 	.word	0x08011f0d
 8011990:	08011f0d 	.word	0x08011f0d
 8011994:	08011f0d 	.word	0x08011f0d
 8011998:	08011f0d 	.word	0x08011f0d
 801199c:	08011f0d 	.word	0x08011f0d
 80119a0:	08011f0d 	.word	0x08011f0d
 80119a4:	08011f0d 	.word	0x08011f0d
 80119a8:	08011f0d 	.word	0x08011f0d
 80119ac:	08011ef5 	.word	0x08011ef5
 80119b0:	08011f01 	.word	0x08011f01
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	791b      	ldrb	r3, [r3, #4]
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fd fb81 	bl	800f0c0 <SwitchClass>
 80119be:	4603      	mov	r3, r0
 80119c0:	75fb      	strb	r3, [r7, #23]
            break;
 80119c2:	e2c4      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	791b      	ldrb	r3, [r3, #4]
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d005      	beq.n	80119d8 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	791a      	ldrb	r2, [r3, #4]
 80119d0:	4b70      	ldr	r3, [pc, #448]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 80119d2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80119d6:	e2ba      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119d8:	2303      	movs	r3, #3
 80119da:	75fb      	strb	r3, [r7, #23]
            break;
 80119dc:	e2b7      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fa faae 	bl	800bf44 <SecureElementSetDevEui>
 80119e8:	4603      	mov	r3, r0
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	f000 8294 	beq.w	8011f18 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119f0:	2303      	movs	r3, #3
 80119f2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119f4:	e290      	b.n	8011f18 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fa fac4 	bl	800bf88 <SecureElementSetJoinEui>
 8011a00:	4603      	mov	r3, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 828a 	beq.w	8011f1c <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a0c:	e286      	b.n	8011f1c <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	791a      	ldrb	r2, [r3, #4]
 8011a12:	4b60      	ldr	r3, [pc, #384]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 8011a14:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8011a18:	e299      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	685b      	ldr	r3, [r3, #4]
 8011a1e:	4a5d      	ldr	r2, [pc, #372]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 8011a20:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8011a24:	e293      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	685b      	ldr	r3, [r3, #4]
 8011a2a:	4a5a      	ldr	r2, [pc, #360]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 8011a2c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8011a30:	e28d      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	685b      	ldr	r3, [r3, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d00b      	beq.n	8011a52 <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	4619      	mov	r1, r3
 8011a40:	2000      	movs	r0, #0
 8011a42:	f001 fffd 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f000 8269 	beq.w	8011f20 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a4e:	2311      	movs	r3, #17
 8011a50:	e288      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a52:	2303      	movs	r3, #3
 8011a54:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a56:	e263      	b.n	8011f20 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d00b      	beq.n	8011a78 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685b      	ldr	r3, [r3, #4]
 8011a64:	4619      	mov	r1, r3
 8011a66:	2001      	movs	r0, #1
 8011a68:	f001 ffea 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	f000 8258 	beq.w	8011f24 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a74:	2311      	movs	r3, #17
 8011a76:	e275      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a78:	2303      	movs	r3, #3
 8011a7a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a7c:	e252      	b.n	8011f24 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00b      	beq.n	8011a9e <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	685b      	ldr	r3, [r3, #4]
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	2002      	movs	r0, #2
 8011a8e:	f001 ffd7 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 8247 	beq.w	8011f28 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a9a:	2311      	movs	r3, #17
 8011a9c:	e262      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a9e:	2303      	movs	r3, #3
 8011aa0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011aa2:	e241      	b.n	8011f28 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	685b      	ldr	r3, [r3, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d00b      	beq.n	8011ac4 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	2003      	movs	r0, #3
 8011ab4:	f001 ffc4 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f000 8236 	beq.w	8011f2c <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ac0:	2311      	movs	r3, #17
 8011ac2:	e24f      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ac4:	2303      	movs	r3, #3
 8011ac6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ac8:	e230      	b.n	8011f2c <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d00b      	beq.n	8011aea <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	685b      	ldr	r3, [r3, #4]
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	207f      	movs	r0, #127	; 0x7f
 8011ada:	f001 ffb1 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f000 8225 	beq.w	8011f30 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011ae6:	2311      	movs	r3, #17
 8011ae8:	e23c      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011aea:	2303      	movs	r3, #3
 8011aec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011aee:	e21f      	b.n	8011f30 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00b      	beq.n	8011b10 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	4619      	mov	r1, r3
 8011afe:	2080      	movs	r0, #128	; 0x80
 8011b00:	f001 ff9e 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011b04:	4603      	mov	r3, r0
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f000 8214 	beq.w	8011f34 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b0c:	2311      	movs	r3, #17
 8011b0e:	e229      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b10:	2303      	movs	r3, #3
 8011b12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b14:	e20e      	b.n	8011f34 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d00b      	beq.n	8011b36 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	4619      	mov	r1, r3
 8011b24:	2081      	movs	r0, #129	; 0x81
 8011b26:	f001 ff8b 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	f000 8203 	beq.w	8011f38 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b32:	2311      	movs	r3, #17
 8011b34:	e216      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b36:	2303      	movs	r3, #3
 8011b38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b3a:	e1fd      	b.n	8011f38 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	685b      	ldr	r3, [r3, #4]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d00b      	beq.n	8011b5c <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	4619      	mov	r1, r3
 8011b4a:	2082      	movs	r0, #130	; 0x82
 8011b4c:	f001 ff78 	bl	8013a40 <LoRaMacCryptoSetKey>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f000 81f2 	beq.w	8011f3c <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b58:	2311      	movs	r3, #17
 8011b5a:	e203      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b5c:	2303      	movs	r3, #3
 8011b5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011b60:	e1ec      	b.n	8011f3c <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	791a      	ldrb	r2, [r3, #4]
 8011b66:	4b0b      	ldr	r3, [pc, #44]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 8011b68:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011b6c:	4b0a      	ldr	r3, [pc, #40]	; (8011b98 <LoRaMacMibSetRequestConfirm+0x304>)
 8011b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b70:	4a08      	ldr	r2, [pc, #32]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 8011b72:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8011b76:	4610      	mov	r0, r2
 8011b78:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011b7a:	4b07      	ldr	r3, [pc, #28]	; (8011b98 <LoRaMacMibSetRequestConfirm+0x304>)
 8011b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b7e:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011b80:	e1e5      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	791a      	ldrb	r2, [r3, #4]
 8011b86:	4b03      	ldr	r3, [pc, #12]	; (8011b94 <LoRaMacMibSetRequestConfirm+0x300>)
 8011b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8011b8c:	e1df      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
 8011b8e:	bf00      	nop
 8011b90:	20000670 	.word	0x20000670
 8011b94:	20000b90 	.word	0x20000b90
 8011b98:	0801dd4c 	.word	0x0801dd4c
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	7a1b      	ldrb	r3, [r3, #8]
 8011ba0:	b25b      	sxtb	r3, r3
 8011ba2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011ba4:	4bb3      	ldr	r3, [pc, #716]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ba6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011baa:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011bac:	4bb1      	ldr	r3, [pc, #708]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bb2:	f107 0108 	add.w	r1, r7, #8
 8011bb6:	2207      	movs	r2, #7
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f002 fd80 	bl	80146be <RegionVerify>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	f083 0301 	eor.w	r3, r3, #1
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d002      	beq.n	8011bd0 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bca:	2303      	movs	r3, #3
 8011bcc:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011bce:	e1be      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011bd6:	4ba7      	ldr	r3, [pc, #668]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bdc:	f107 0108 	add.w	r1, r7, #8
 8011be0:	2200      	movs	r2, #0
 8011be2:	4618      	mov	r0, r3
 8011be4:	f002 fd6b 	bl	80146be <RegionVerify>
 8011be8:	4603      	mov	r3, r0
 8011bea:	f083 0301 	eor.w	r3, r3, #1
 8011bee:	b2db      	uxtb	r3, r3
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d002      	beq.n	8011bfa <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011bf4:	2303      	movs	r3, #3
 8011bf6:	75fb      	strb	r3, [r7, #23]
            break;
 8011bf8:	e1a9      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011bfa:	4b9e      	ldr	r3, [pc, #632]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	3364      	adds	r3, #100	; 0x64
 8011c00:	3204      	adds	r2, #4
 8011c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c06:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011c0a:	e1a0      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	7a1b      	ldrb	r3, [r3, #8]
 8011c10:	b25b      	sxtb	r3, r3
 8011c12:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c14:	4b97      	ldr	r3, [pc, #604]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c16:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011c1a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011c1c:	4b95      	ldr	r3, [pc, #596]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c22:	f107 0108 	add.w	r1, r7, #8
 8011c26:	2207      	movs	r2, #7
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f002 fd48 	bl	80146be <RegionVerify>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d008      	beq.n	8011c46 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011c34:	4b8f      	ldr	r3, [pc, #572]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	33a8      	adds	r3, #168	; 0xa8
 8011c3a:	3204      	adds	r2, #4
 8011c3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c40:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c44:	e183      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c46:	2303      	movs	r3, #3
 8011c48:	75fb      	strb	r3, [r7, #23]
            break;
 8011c4a:	e180      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	7a1b      	ldrb	r3, [r3, #8]
 8011c50:	b25b      	sxtb	r3, r3
 8011c52:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011c54:	4b87      	ldr	r3, [pc, #540]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c56:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011c5a:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011c5c:	4b85      	ldr	r3, [pc, #532]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011c62:	f107 0108 	add.w	r1, r7, #8
 8011c66:	2207      	movs	r2, #7
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f002 fd28 	bl	80146be <RegionVerify>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d019      	beq.n	8011ca8 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011c74:	4b7f      	ldr	r3, [pc, #508]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	336c      	adds	r3, #108	; 0x6c
 8011c7a:	3204      	adds	r2, #4
 8011c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011c80:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011c84:	4b7b      	ldr	r3, [pc, #492]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c86:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	f040 8158 	bne.w	8011f40 <LoRaMacMibSetRequestConfirm+0x6ac>
 8011c90:	4b78      	ldr	r3, [pc, #480]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c92:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f000 8152 	beq.w	8011f40 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011c9c:	4b76      	ldr	r3, [pc, #472]	; (8011e78 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca0:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011ca2:	f7fe fca5 	bl	80105f0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011ca6:	e14b      	b.n	8011f40 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ca8:	2303      	movs	r3, #3
 8011caa:	75fb      	strb	r3, [r7, #23]
            break;
 8011cac:	e148      	b.n	8011f40 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	7a1b      	ldrb	r3, [r3, #8]
 8011cb2:	b25b      	sxtb	r3, r3
 8011cb4:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011cb6:	4b6f      	ldr	r3, [pc, #444]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cb8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8011cbc:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011cbe:	4b6d      	ldr	r3, [pc, #436]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cc4:	f107 0108 	add.w	r1, r7, #8
 8011cc8:	2207      	movs	r2, #7
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f002 fcf7 	bl	80146be <RegionVerify>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d008      	beq.n	8011ce8 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011cd6:	4b67      	ldr	r3, [pc, #412]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cd8:	687a      	ldr	r2, [r7, #4]
 8011cda:	33b0      	adds	r3, #176	; 0xb0
 8011cdc:	3204      	adds	r2, #4
 8011cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ce2:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011ce6:	e132      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ce8:	2303      	movs	r3, #3
 8011cea:	75fb      	strb	r3, [r7, #23]
            break;
 8011cec:	e12f      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	685b      	ldr	r3, [r3, #4]
 8011cf2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011cf8:	4b5e      	ldr	r3, [pc, #376]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011cfe:	f107 020c 	add.w	r2, r7, #12
 8011d02:	4611      	mov	r1, r2
 8011d04:	4618      	mov	r0, r3
 8011d06:	f002 fd13 	bl	8014730 <RegionChanMaskSet>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	f083 0301 	eor.w	r3, r3, #1
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f000 8116 	beq.w	8011f44 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d18:	2303      	movs	r3, #3
 8011d1a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d1c:	e112      	b.n	8011f44 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011d24:	2300      	movs	r3, #0
 8011d26:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011d28:	4b52      	ldr	r3, [pc, #328]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011d2e:	f107 020c 	add.w	r2, r7, #12
 8011d32:	4611      	mov	r1, r2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f002 fcfb 	bl	8014730 <RegionChanMaskSet>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f083 0301 	eor.w	r3, r3, #1
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	f000 8100 	beq.w	8011f48 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d48:	2303      	movs	r3, #3
 8011d4a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011d4c:	e0fc      	b.n	8011f48 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	791b      	ldrb	r3, [r3, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d009      	beq.n	8011d6a <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011d5a:	2b0f      	cmp	r3, #15
 8011d5c:	d805      	bhi.n	8011d6a <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	791a      	ldrb	r2, [r3, #4]
 8011d62:	4b44      	ldr	r3, [pc, #272]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d68:	e0f1      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d6a:	2303      	movs	r3, #3
 8011d6c:	75fb      	strb	r3, [r7, #23]
            break;
 8011d6e:	e0ee      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	4a3f      	ldr	r2, [pc, #252]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d76:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8011d78:	e0e9      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	4a3d      	ldr	r2, [pc, #244]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d80:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8011d82:	e0e4      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	4a3a      	ldr	r2, [pc, #232]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d8a:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8011d8c:	e0df      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	4a38      	ldr	r2, [pc, #224]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d94:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8011d96:	e0da      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	4a35      	ldr	r2, [pc, #212]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d9e:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8011da0:	e0d5      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011da8:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011daa:	4b32      	ldr	r3, [pc, #200]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011db0:	f107 0108 	add.w	r1, r7, #8
 8011db4:	2206      	movs	r2, #6
 8011db6:	4618      	mov	r0, r3
 8011db8:	f002 fc81 	bl	80146be <RegionVerify>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d005      	beq.n	8011dce <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011dc2:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011dc6:	4b2b      	ldr	r3, [pc, #172]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011dc8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011dcc:	e0bf      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011dce:	2303      	movs	r3, #3
 8011dd0:	75fb      	strb	r3, [r7, #23]
            break;
 8011dd2:	e0bc      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011dda:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011ddc:	4b25      	ldr	r3, [pc, #148]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011dde:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011de2:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011de4:	4b23      	ldr	r3, [pc, #140]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011dea:	f107 0108 	add.w	r1, r7, #8
 8011dee:	2205      	movs	r2, #5
 8011df0:	4618      	mov	r0, r3
 8011df2:	f002 fc64 	bl	80146be <RegionVerify>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d005      	beq.n	8011e08 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011dfc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011e00:	4b1c      	ldr	r3, [pc, #112]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011e06:	e0a2      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e08:	2303      	movs	r3, #3
 8011e0a:	75fb      	strb	r3, [r7, #23]
            break;
 8011e0c:	e09f      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011e14:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011e16:	4b17      	ldr	r3, [pc, #92]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011e18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e1c:	f107 0108 	add.w	r1, r7, #8
 8011e20:	220a      	movs	r2, #10
 8011e22:	4618      	mov	r0, r3
 8011e24:	f002 fc4b 	bl	80146be <RegionVerify>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d005      	beq.n	8011e3a <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011e2e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011e32:	4b10      	ldr	r3, [pc, #64]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011e34:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011e38:	e089      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e3a:	2303      	movs	r3, #3
 8011e3c:	75fb      	strb	r3, [r7, #23]
            break;
 8011e3e:	e086      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011e46:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011e48:	4b0a      	ldr	r3, [pc, #40]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011e4e:	f107 0108 	add.w	r1, r7, #8
 8011e52:	2209      	movs	r2, #9
 8011e54:	4618      	mov	r0, r3
 8011e56:	f002 fc32 	bl	80146be <RegionVerify>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d005      	beq.n	8011e6c <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011e60:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011e64:	4b03      	ldr	r3, [pc, #12]	; (8011e74 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011e6a:	e070      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	75fb      	strb	r3, [r7, #23]
            break;
 8011e70:	e06d      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
 8011e72:	bf00      	nop
 8011e74:	20000b90 	.word	0x20000b90
 8011e78:	0801dd4c 	.word	0x0801dd4c
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	4a3a      	ldr	r2, [pc, #232]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8011e86:	4b39      	ldr	r3, [pc, #228]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e8c:	4a37      	ldr	r2, [pc, #220]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e8e:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8011e90:	e05d      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	791a      	ldrb	r2, [r3, #4]
 8011e96:	4b35      	ldr	r3, [pc, #212]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e98:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8011e9c:	4b33      	ldr	r3, [pc, #204]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011e9e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8011ea2:	4b32      	ldr	r3, [pc, #200]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ea4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8011ea8:	e051      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	4a2f      	ldr	r2, [pc, #188]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011eb0:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8011eb2:	e04c      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	4a2c      	ldr	r2, [pc, #176]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011eba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8011ebe:	e046      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011ec0:	f7fe fdc8 	bl	8010a54 <RestoreNvmData>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	75fb      	strb	r3, [r7, #23]
            break;
 8011ec8:	e041      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	799b      	ldrb	r3, [r3, #6]
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d80d      	bhi.n	8011eee <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011ed2:	4a26      	ldr	r2, [pc, #152]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	6858      	ldr	r0, [r3, #4]
 8011ee0:	f001 fd12 	bl	8013908 <LoRaMacCryptoSetLrWanVersion>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d030      	beq.n	8011f4c <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011eea:	2311      	movs	r3, #17
 8011eec:	e03a      	b.n	8011f64 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011eee:	2303      	movs	r3, #3
 8011ef0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011ef2:	e02b      	b.n	8011f4c <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	4a1c      	ldr	r2, [pc, #112]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011efa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8011efe:	e026      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	791a      	ldrb	r2, [r3, #4]
 8011f04:	4b19      	ldr	r3, [pc, #100]	; (8011f6c <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011f06:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8011f0a:	e020      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 fc88 	bl	8012822 <LoRaMacMibClassBSetRequestConfirm>
 8011f12:	4603      	mov	r3, r0
 8011f14:	75fb      	strb	r3, [r7, #23]
            break;
 8011f16:	e01a      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f18:	bf00      	nop
 8011f1a:	e018      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f1c:	bf00      	nop
 8011f1e:	e016      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f20:	bf00      	nop
 8011f22:	e014      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f24:	bf00      	nop
 8011f26:	e012      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f28:	bf00      	nop
 8011f2a:	e010      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f2c:	bf00      	nop
 8011f2e:	e00e      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f30:	bf00      	nop
 8011f32:	e00c      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f34:	bf00      	nop
 8011f36:	e00a      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f38:	bf00      	nop
 8011f3a:	e008      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f3c:	bf00      	nop
 8011f3e:	e006      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f40:	bf00      	nop
 8011f42:	e004      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f44:	bf00      	nop
 8011f46:	e002      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f48:	bf00      	nop
 8011f4a:	e000      	b.n	8011f4e <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011f4c:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8011f4e:	7dfb      	ldrb	r3, [r7, #23]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d106      	bne.n	8011f62 <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011f54:	4a06      	ldr	r2, [pc, #24]	; (8011f70 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8011f56:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8011f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f5e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3718      	adds	r7, #24
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	20000b90 	.word	0x20000b90
 8011f70:	20000670 	.word	0x20000670

08011f74 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b08a      	sub	sp, #40	; 0x28
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011f7c:	2302      	movs	r3, #2
 8011f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011f82:	2300      	movs	r3, #0
 8011f84:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d101      	bne.n	8011f90 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011f8c:	2303      	movs	r3, #3
 8011f8e:	e16c      	b.n	801226a <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2200      	movs	r2, #0
 8011f94:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011f96:	f7fc fc6b 	bl	800e870 <LoRaMacIsBusy>
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d001      	beq.n	8011fa4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	e162      	b.n	801226a <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011fa4:	f001 f954 	bl	8013250 <LoRaMacConfirmQueueIsFull>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d001      	beq.n	8011fb2 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8011fae:	2301      	movs	r3, #1
 8011fb0:	e15b      	b.n	801226a <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011fb2:	f001 f941 	bl	8013238 <LoRaMacConfirmQueueGetCnt>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d104      	bne.n	8011fc6 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011fbc:	2214      	movs	r2, #20
 8011fbe:	2100      	movs	r1, #0
 8011fc0:	48ac      	ldr	r0, [pc, #688]	; (8012274 <LoRaMacMlmeRequest+0x300>)
 8011fc2:	f006 f965 	bl	8018290 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011fc6:	4bac      	ldr	r3, [pc, #688]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011fce:	4aaa      	ldr	r2, [pc, #680]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 8011fd0:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8011fd4:	f043 0304 	orr.w	r3, r3, #4
 8011fd8:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8011fea:	2300      	movs	r3, #0
 8011fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	3b01      	subs	r3, #1
 8011ffc:	2b0c      	cmp	r3, #12
 8011ffe:	f200 8108 	bhi.w	8012212 <LoRaMacMlmeRequest+0x29e>
 8012002:	a201      	add	r2, pc, #4	; (adr r2, 8012008 <LoRaMacMlmeRequest+0x94>)
 8012004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012008:	0801203d 	.word	0x0801203d
 801200c:	08012213 	.word	0x08012213
 8012010:	08012213 	.word	0x08012213
 8012014:	08012113 	.word	0x08012113
 8012018:	08012135 	.word	0x08012135
 801201c:	08012213 	.word	0x08012213
 8012020:	08012213 	.word	0x08012213
 8012024:	08012213 	.word	0x08012213
 8012028:	08012153 	.word	0x08012153
 801202c:	08012213 	.word	0x08012213
 8012030:	080121e1 	.word	0x080121e1
 8012034:	08012175 	.word	0x08012175
 8012038:	080121bf 	.word	0x080121bf
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 801203c:	4b8e      	ldr	r3, [pc, #568]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 801203e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012042:	f003 0320 	and.w	r3, r3, #32
 8012046:	2b00      	cmp	r3, #0
 8012048:	d001      	beq.n	801204e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 801204a:	2301      	movs	r3, #1
 801204c:	e10d      	b.n	801226a <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	791b      	ldrb	r3, [r3, #4]
 8012052:	2b02      	cmp	r3, #2
 8012054:	d12e      	bne.n	80120b4 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8012056:	f7fe f995 	bl	8010384 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 801205a:	4b88      	ldr	r3, [pc, #544]	; (801227c <LoRaMacMlmeRequest+0x308>)
 801205c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	795b      	ldrb	r3, [r3, #5]
 8012064:	b25b      	sxtb	r3, r3
 8012066:	2200      	movs	r2, #0
 8012068:	4619      	mov	r1, r3
 801206a:	f002 fc72 	bl	8014952 <RegionAlternateDr>
 801206e:	4603      	mov	r3, r0
 8012070:	461a      	mov	r2, r3
 8012072:	4b82      	ldr	r3, [pc, #520]	; (801227c <LoRaMacMlmeRequest+0x308>)
 8012074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012078:	2307      	movs	r3, #7
 801207a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 801207e:	20ff      	movs	r0, #255	; 0xff
 8012080:	f7fd fefe 	bl	800fe80 <SendReJoinReq>
 8012084:	4603      	mov	r3, r0
 8012086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 801208a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801208e:	2b00      	cmp	r3, #0
 8012090:	f000 80c1 	beq.w	8012216 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012094:	4b79      	ldr	r3, [pc, #484]	; (801227c <LoRaMacMlmeRequest+0x308>)
 8012096:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	795b      	ldrb	r3, [r3, #5]
 801209e:	b25b      	sxtb	r3, r3
 80120a0:	2201      	movs	r2, #1
 80120a2:	4619      	mov	r1, r3
 80120a4:	f002 fc55 	bl	8014952 <RegionAlternateDr>
 80120a8:	4603      	mov	r3, r0
 80120aa:	461a      	mov	r2, r3
 80120ac:	4b73      	ldr	r3, [pc, #460]	; (801227c <LoRaMacMlmeRequest+0x308>)
 80120ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 80120b2:	e0b0      	b.n	8012216 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	791b      	ldrb	r3, [r3, #4]
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	f040 80ac 	bne.w	8012216 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 80120be:	4b6f      	ldr	r3, [pc, #444]	; (801227c <LoRaMacMlmeRequest+0x308>)
 80120c0:	2200      	movs	r2, #0
 80120c2:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80120c6:	2302      	movs	r3, #2
 80120c8:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80120ca:	4b6c      	ldr	r3, [pc, #432]	; (801227c <LoRaMacMlmeRequest+0x308>)
 80120cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120d0:	f107 020c 	add.w	r2, r7, #12
 80120d4:	4611      	mov	r1, r2
 80120d6:	4618      	mov	r0, r3
 80120d8:	f002 fad9 	bl	801468e <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	791a      	ldrb	r2, [r3, #4]
 80120e0:	4b66      	ldr	r3, [pc, #408]	; (801227c <LoRaMacMlmeRequest+0x308>)
 80120e2:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 80120ec:	2301      	movs	r3, #1
 80120ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 80120f2:	4b61      	ldr	r3, [pc, #388]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 80120f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80120f8:	691b      	ldr	r3, [r3, #16]
 80120fa:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 80120fc:	4a5e      	ldr	r2, [pc, #376]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 80120fe:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012102:	f043 0320 	orr.w	r3, r3, #32
 8012106:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 801210a:	2300      	movs	r3, #0
 801210c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012110:	e081      	b.n	8012216 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012112:	2300      	movs	r3, #0
 8012114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012118:	f107 031c 	add.w	r3, r7, #28
 801211c:	2200      	movs	r2, #0
 801211e:	4619      	mov	r1, r3
 8012120:	2002      	movs	r0, #2
 8012122:	f000 fcfb 	bl	8012b1c <LoRaMacCommandsAddCmd>
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d076      	beq.n	801221a <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801212c:	2313      	movs	r3, #19
 801212e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012132:	e072      	b.n	801221a <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	8898      	ldrh	r0, [r3, #4]
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6899      	ldr	r1, [r3, #8]
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8012142:	b2db      	uxtb	r3, r3
 8012144:	461a      	mov	r2, r3
 8012146:	f7fe fc65 	bl	8010a14 <SetTxContinuousWave>
 801214a:	4603      	mov	r3, r0
 801214c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012150:	e06a      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012152:	2300      	movs	r3, #0
 8012154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012158:	f107 031c 	add.w	r3, r7, #28
 801215c:	2200      	movs	r2, #0
 801215e:	4619      	mov	r1, r3
 8012160:	200d      	movs	r0, #13
 8012162:	f000 fcdb 	bl	8012b1c <LoRaMacCommandsAddCmd>
 8012166:	4603      	mov	r3, r0
 8012168:	2b00      	cmp	r3, #0
 801216a:	d058      	beq.n	801221e <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801216c:	2313      	movs	r3, #19
 801216e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 8012172:	e054      	b.n	801221e <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8012174:	4b41      	ldr	r3, [pc, #260]	; (801227c <LoRaMacMlmeRequest+0x308>)
 8012176:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 801217a:	2b00      	cmp	r3, #0
 801217c:	d151      	bne.n	8012222 <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	791b      	ldrb	r3, [r3, #4]
 8012182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	791b      	ldrb	r3, [r3, #4]
 801218a:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801218e:	b2db      	uxtb	r3, r3
 8012190:	4618      	mov	r0, r3
 8012192:	f000 fb1b 	bl	80127cc <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801219a:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 801219c:	2300      	movs	r3, #0
 801219e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80121a2:	f107 031c 	add.w	r3, r7, #28
 80121a6:	2201      	movs	r2, #1
 80121a8:	4619      	mov	r1, r3
 80121aa:	2010      	movs	r0, #16
 80121ac:	f000 fcb6 	bl	8012b1c <LoRaMacCommandsAddCmd>
 80121b0:	4603      	mov	r3, r0
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d035      	beq.n	8012222 <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80121b6:	2313      	movs	r3, #19
 80121b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 80121bc:	e031      	b.n	8012222 <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80121be:	2300      	movs	r3, #0
 80121c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80121c4:	f107 031c 	add.w	r3, r7, #28
 80121c8:	2200      	movs	r2, #0
 80121ca:	4619      	mov	r1, r3
 80121cc:	2012      	movs	r0, #18
 80121ce:	f000 fca5 	bl	8012b1c <LoRaMacCommandsAddCmd>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d026      	beq.n	8012226 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80121d8:	2313      	movs	r3, #19
 80121da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80121de:	e022      	b.n	8012226 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80121e0:	2301      	movs	r3, #1
 80121e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80121e6:	f000 faa7 	bl	8012738 <LoRaMacClassBIsAcquisitionInProgress>
 80121ea:	4603      	mov	r3, r0
 80121ec:	f083 0301 	eor.w	r3, r3, #1
 80121f0:	b2db      	uxtb	r3, r3
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d009      	beq.n	801220a <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80121f6:	2000      	movs	r0, #0
 80121f8:	f000 fa80 	bl	80126fc <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80121fc:	2000      	movs	r0, #0
 80121fe:	f000 faa2 	bl	8012746 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012202:	2300      	movs	r3, #0
 8012204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012208:	e00e      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 801220a:	2301      	movs	r3, #1
 801220c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8012210:	e00a      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 8012212:	bf00      	nop
 8012214:	e008      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012216:	bf00      	nop
 8012218:	e006      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
            break;
 801221a:	bf00      	nop
 801221c:	e004      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
            break;
 801221e:	bf00      	nop
 8012220:	e002      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012222:	bf00      	nop
 8012224:	e000      	b.n	8012228 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012226:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012228:	4b13      	ldr	r3, [pc, #76]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 801222a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8012232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012236:	2b00      	cmp	r3, #0
 8012238:	d010      	beq.n	801225c <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801223a:	f000 fffd 	bl	8013238 <LoRaMacConfirmQueueGetCnt>
 801223e:	4603      	mov	r3, r0
 8012240:	2b00      	cmp	r3, #0
 8012242:	d110      	bne.n	8012266 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 8012244:	4b0c      	ldr	r3, [pc, #48]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 8012246:	2200      	movs	r2, #0
 8012248:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801224c:	4a0a      	ldr	r2, [pc, #40]	; (8012278 <LoRaMacMlmeRequest+0x304>)
 801224e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012252:	f36f 0382 	bfc	r3, #2, #1
 8012256:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 801225a:	e004      	b.n	8012266 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801225c:	f107 0320 	add.w	r3, r7, #32
 8012260:	4618      	mov	r0, r3
 8012262:	f000 fe9b 	bl	8012f9c <LoRaMacConfirmQueueAdd>
    }
    return status;
 8012266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801226a:	4618      	mov	r0, r3
 801226c:	3728      	adds	r7, #40	; 0x28
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}
 8012272:	bf00      	nop
 8012274:	20000ac8 	.word	0x20000ac8
 8012278:	20000670 	.word	0x20000670
 801227c:	20000b90 	.word	0x20000b90

08012280 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012280:	b5b0      	push	{r4, r5, r7, lr}
 8012282:	b092      	sub	sp, #72	; 0x48
 8012284:	af02      	add	r7, sp, #8
 8012286:	6078      	str	r0, [r7, #4]
 8012288:	460b      	mov	r3, r1
 801228a:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801228c:	2302      	movs	r3, #2
 801228e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012292:	2300      	movs	r3, #0
 8012294:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012298:	2300      	movs	r3, #0
 801229a:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 801229c:	2300      	movs	r3, #0
 801229e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 80122a2:	2300      	movs	r3, #0
 80122a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d101      	bne.n	80122b2 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80122ae:	2303      	movs	r3, #3
 80122b0:	e113      	b.n	80124da <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	2200      	movs	r2, #0
 80122b6:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80122b8:	f7fc fada 	bl	800e870 <LoRaMacIsBusy>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d001      	beq.n	80122c6 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80122c2:	2301      	movs	r3, #1
 80122c4:	e109      	b.n	80124da <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f107 040c 	add.w	r4, r7, #12
 80122cc:	461d      	mov	r5, r3
 80122ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122d2:	682b      	ldr	r3, [r5, #0]
 80122d4:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80122d6:	2300      	movs	r3, #0
 80122d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80122dc:	2214      	movs	r2, #20
 80122de:	2100      	movs	r1, #0
 80122e0:	4880      	ldr	r0, [pc, #512]	; (80124e4 <LoRaMacMcpsRequest+0x264>)
 80122e2:	f005 ffd5 	bl	8018290 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80122e6:	4b80      	ldr	r3, [pc, #512]	; (80124e8 <LoRaMacMcpsRequest+0x268>)
 80122e8:	2201      	movs	r2, #1
 80122ea:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80122ee:	4b7f      	ldr	r3, [pc, #508]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80122f0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80122f4:	2b02      	cmp	r3, #2
 80122f6:	d111      	bne.n	801231c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80122f8:	4b7c      	ldr	r3, [pc, #496]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80122fa:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80122fe:	2b02      	cmp	r3, #2
 8012300:	d10c      	bne.n	801231c <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012302:	4b7a      	ldr	r3, [pc, #488]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 8012304:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8012308:	f083 0301 	eor.w	r3, r3, #1
 801230c:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801230e:	2b00      	cmp	r3, #0
 8012310:	d004      	beq.n	801231c <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8012312:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8012314:	2b00      	cmp	r3, #0
 8012316:	d101      	bne.n	801231c <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012318:	2301      	movs	r3, #1
 801231a:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 801231c:	7b3b      	ldrb	r3, [r7, #12]
 801231e:	2b03      	cmp	r3, #3
 8012320:	d030      	beq.n	8012384 <LoRaMacMcpsRequest+0x104>
 8012322:	2b03      	cmp	r3, #3
 8012324:	dc3f      	bgt.n	80123a6 <LoRaMacMcpsRequest+0x126>
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <LoRaMacMcpsRequest+0xb0>
 801232a:	2b01      	cmp	r3, #1
 801232c:	d015      	beq.n	801235a <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801232e:	e03a      	b.n	80123a6 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012330:	2301      	movs	r3, #1
 8012332:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012336:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801233a:	2202      	movs	r2, #2
 801233c:	f362 1347 	bfi	r3, r2, #5, #3
 8012340:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 8012344:	7c3b      	ldrb	r3, [r7, #16]
 8012346:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 801234e:	8b3b      	ldrh	r3, [r7, #24]
 8012350:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 8012352:	7ebb      	ldrb	r3, [r7, #26]
 8012354:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012358:	e026      	b.n	80123a8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801235a:	2301      	movs	r3, #1
 801235c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012360:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012364:	2204      	movs	r2, #4
 8012366:	f362 1347 	bfi	r3, r2, #5, #3
 801236a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 801236e:	7c3b      	ldrb	r3, [r7, #16]
 8012370:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 8012374:	697b      	ldr	r3, [r7, #20]
 8012376:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012378:	8b3b      	ldrh	r3, [r7, #24]
 801237a:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 801237c:	7ebb      	ldrb	r3, [r7, #26]
 801237e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8012382:	e011      	b.n	80123a8 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012384:	2301      	movs	r3, #1
 8012386:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 801238a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801238e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8012392:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 801239a:	8abb      	ldrh	r3, [r7, #20]
 801239c:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 801239e:	7dbb      	ldrb	r3, [r7, #22]
 80123a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80123a4:	e000      	b.n	80123a8 <LoRaMacMcpsRequest+0x128>
            break;
 80123a6:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80123a8:	2302      	movs	r3, #2
 80123aa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80123ae:	4b4f      	ldr	r3, [pc, #316]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80123b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80123b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80123b8:	4b4c      	ldr	r3, [pc, #304]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80123ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80123be:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80123c2:	4611      	mov	r1, r2
 80123c4:	4618      	mov	r0, r3
 80123c6:	f002 f92a 	bl	801461e <RegionGetPhyParam>
 80123ca:	4603      	mov	r3, r0
 80123cc:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80123ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123d0:	b25b      	sxtb	r3, r3
 80123d2:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 80123d6:	4293      	cmp	r3, r2
 80123d8:	bfb8      	it	lt
 80123da:	4613      	movlt	r3, r2
 80123dc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80123e0:	4b42      	ldr	r3, [pc, #264]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80123e2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80123e6:	4a41      	ldr	r2, [pc, #260]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80123e8:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 80123ec:	4a3f      	ldr	r2, [pc, #252]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 80123ee:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fc fbd4 	bl	800eba0 <CheckForMinimumAbpDatarate>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d002      	beq.n	8012404 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80123fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012400:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8012404:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012408:	2b00      	cmp	r3, #0
 801240a:	d05f      	beq.n	80124cc <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801240c:	4b37      	ldr	r3, [pc, #220]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 801240e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012412:	f083 0301 	eor.w	r3, r3, #1
 8012416:	b2db      	uxtb	r3, r3
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10e      	bne.n	801243a <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801241c:	4b33      	ldr	r3, [pc, #204]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 801241e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8012422:	4a32      	ldr	r2, [pc, #200]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 8012424:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8012428:	4a30      	ldr	r2, [pc, #192]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 801242a:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 801242e:	4618      	mov	r0, r3
 8012430:	f7fc fbb6 	bl	800eba0 <CheckForMinimumAbpDatarate>
 8012434:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012436:	2b00      	cmp	r3, #0
 8012438:	d01c      	beq.n	8012474 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 801243a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801243e:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012442:	4b2a      	ldr	r3, [pc, #168]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 8012444:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801244c:	4b27      	ldr	r3, [pc, #156]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 801244e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012452:	f107 0120 	add.w	r1, r7, #32
 8012456:	2205      	movs	r2, #5
 8012458:	4618      	mov	r0, r3
 801245a:	f002 f930 	bl	80146be <RegionVerify>
 801245e:	4603      	mov	r3, r0
 8012460:	2b00      	cmp	r3, #0
 8012462:	d005      	beq.n	8012470 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012464:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012468:	4b20      	ldr	r3, [pc, #128]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 801246a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801246e:	e001      	b.n	8012474 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012470:	2303      	movs	r3, #3
 8012472:	e032      	b.n	80124da <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8012474:	4b1d      	ldr	r3, [pc, #116]	; (80124ec <LoRaMacMcpsRequest+0x26c>)
 8012476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801247a:	4a1b      	ldr	r2, [pc, #108]	; (80124e8 <LoRaMacMcpsRequest+0x268>)
 801247c:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 8012480:	4611      	mov	r1, r2
 8012482:	4618      	mov	r0, r3
 8012484:	f7fc fc76 	bl	800ed74 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012488:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801248a:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 801248e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012492:	78fb      	ldrb	r3, [r7, #3]
 8012494:	9300      	str	r3, [sp, #0]
 8012496:	4613      	mov	r3, r2
 8012498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801249a:	f7fd fc0d 	bl	800fcb8 <Send>
 801249e:	4603      	mov	r3, r0
 80124a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 80124a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d10b      	bne.n	80124c4 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80124ac:	7b3a      	ldrb	r2, [r7, #12]
 80124ae:	4b0e      	ldr	r3, [pc, #56]	; (80124e8 <LoRaMacMcpsRequest+0x268>)
 80124b0:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80124b4:	4a0c      	ldr	r2, [pc, #48]	; (80124e8 <LoRaMacMcpsRequest+0x268>)
 80124b6:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80124ba:	f043 0301 	orr.w	r3, r3, #1
 80124be:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 80124c2:	e003      	b.n	80124cc <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80124c4:	4b08      	ldr	r3, [pc, #32]	; (80124e8 <LoRaMacMcpsRequest+0x268>)
 80124c6:	2200      	movs	r2, #0
 80124c8:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80124cc:	4b06      	ldr	r3, [pc, #24]	; (80124e8 <LoRaMacMcpsRequest+0x268>)
 80124ce:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	611a      	str	r2, [r3, #16]

    return status;
 80124d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3740      	adds	r7, #64	; 0x40
 80124de:	46bd      	mov	sp, r7
 80124e0:	bdb0      	pop	{r4, r5, r7, pc}
 80124e2:	bf00      	nop
 80124e4:	20000ab4 	.word	0x20000ab4
 80124e8:	20000670 	.word	0x20000670
 80124ec:	20000b90 	.word	0x20000b90

080124f0 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	4603      	mov	r3, r0
 80124f8:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80124fa:	79fb      	ldrb	r3, [r7, #7]
 80124fc:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80124fe:	4b0a      	ldr	r3, [pc, #40]	; (8012528 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012504:	f107 010c 	add.w	r1, r7, #12
 8012508:	220f      	movs	r2, #15
 801250a:	4618      	mov	r0, r3
 801250c:	f002 f8d7 	bl	80146be <RegionVerify>
 8012510:	4603      	mov	r3, r0
 8012512:	2b00      	cmp	r3, #0
 8012514:	d003      	beq.n	801251e <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8012516:	4a04      	ldr	r2, [pc, #16]	; (8012528 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012518:	79fb      	ldrb	r3, [r7, #7]
 801251a:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 801251e:	bf00      	nop
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	20000b90 	.word	0x20000b90

0801252c <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 801252c:	b580      	push	{r7, lr}
 801252e:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012530:	f7fe ff26 	bl	8011380 <LoRaMacStop>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d111      	bne.n	801255e <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801253a:	480a      	ldr	r0, [pc, #40]	; (8012564 <LoRaMacDeInitialization+0x38>)
 801253c:	f009 ffb8 	bl	801c4b0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012540:	4809      	ldr	r0, [pc, #36]	; (8012568 <LoRaMacDeInitialization+0x3c>)
 8012542:	f009 ffb5 	bl	801c4b0 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8012546:	4809      	ldr	r0, [pc, #36]	; (801256c <LoRaMacDeInitialization+0x40>)
 8012548:	f009 ffb2 	bl	801c4b0 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801254c:	f000 f948 	bl	80127e0 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012550:	f7fd ff18 	bl	8010384 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8012554:	4b06      	ldr	r3, [pc, #24]	; (8012570 <LoRaMacDeInitialization+0x44>)
 8012556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012558:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801255a:	2300      	movs	r3, #0
 801255c:	e000      	b.n	8012560 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801255e:	2301      	movs	r3, #1
    }
}
 8012560:	4618      	mov	r0, r3
 8012562:	bd80      	pop	{r7, pc}
 8012564:	200009d8 	.word	0x200009d8
 8012568:	200009f0 	.word	0x200009f0
 801256c:	20000a08 	.word	0x20000a08
 8012570:	0801dd4c 	.word	0x0801dd4c

08012574 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b08c      	sub	sp, #48	; 0x30
 8012578:	af00      	add	r7, sp, #0
 801257a:	60f8      	str	r0, [r7, #12]
 801257c:	60b9      	str	r1, [r7, #8]
 801257e:	607a      	str	r2, [r7, #4]
 8012580:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8012582:	2300      	movs	r3, #0
 8012584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	7b1b      	ldrb	r3, [r3, #12]
 801258c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	7b5b      	ldrb	r3, [r3, #13]
 8012594:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	7b9b      	ldrb	r3, [r3, #14]
 801259c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	685a      	ldr	r2, [r3, #4]
 80125a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125a6:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	785b      	ldrb	r3, [r3, #1]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 8088 	beq.w	80126c2 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80125b2:	2302      	movs	r3, #2
 80125b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	7bdb      	ldrb	r3, [r3, #15]
 80125bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	7c1b      	ldrb	r3, [r3, #16]
 80125c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80125c8:	4611      	mov	r1, r2
 80125ca:	4618      	mov	r0, r3
 80125cc:	f002 f827 	bl	801461e <RegionGetPhyParam>
 80125d0:	4603      	mov	r3, r0
 80125d2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80125d4:	6a3b      	ldr	r3, [r7, #32]
 80125d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80125da:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 80125de:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80125e2:	4293      	cmp	r3, r2
 80125e4:	bfb8      	it	lt
 80125e6:	4613      	movlt	r3, r2
 80125e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	685b      	ldr	r3, [r3, #4]
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	8912      	ldrh	r2, [r2, #8]
 80125f4:	4293      	cmp	r3, r2
 80125f6:	d302      	bcc.n	80125fe <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80125f8:	2301      	movs	r3, #1
 80125fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	685b      	ldr	r3, [r3, #4]
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	8912      	ldrh	r2, [r2, #8]
 8012606:	4611      	mov	r1, r2
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	8952      	ldrh	r2, [r2, #10]
 801260c:	440a      	add	r2, r1
 801260e:	4293      	cmp	r3, r2
 8012610:	d30f      	bcc.n	8012632 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8012612:	230a      	movs	r3, #10
 8012614:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	7c1b      	ldrb	r3, [r3, #16]
 801261c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012620:	4611      	mov	r1, r2
 8012622:	4618      	mov	r0, r3
 8012624:	f001 fffb 	bl	801461e <RegionGetPhyParam>
 8012628:	4603      	mov	r3, r0
 801262a:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 801262c:	6a3b      	ldr	r3, [r7, #32]
 801262e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	68fa      	ldr	r2, [r7, #12]
 8012638:	8912      	ldrh	r2, [r2, #8]
 801263a:	4611      	mov	r1, r2
 801263c:	68fa      	ldr	r2, [r7, #12]
 801263e:	8952      	ldrh	r2, [r2, #10]
 8012640:	0052      	lsls	r2, r2, #1
 8012642:	440a      	add	r2, r1
 8012644:	4293      	cmp	r3, r2
 8012646:	d33c      	bcc.n	80126c2 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	685b      	ldr	r3, [r3, #4]
 801264c:	68fa      	ldr	r2, [r7, #12]
 801264e:	8912      	ldrh	r2, [r2, #8]
 8012650:	1a9b      	subs	r3, r3, r2
 8012652:	68fa      	ldr	r2, [r7, #12]
 8012654:	8952      	ldrh	r2, [r2, #10]
 8012656:	fbb3 f1f2 	udiv	r1, r3, r2
 801265a:	fb01 f202 	mul.w	r2, r1, r2
 801265e:	1a9b      	subs	r3, r3, r2
 8012660:	2b00      	cmp	r3, #0
 8012662:	d12e      	bne.n	80126c2 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 8012664:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8012668:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801266c:	429a      	cmp	r2, r3
 801266e:	d110      	bne.n	8012692 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	781b      	ldrb	r3, [r3, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d009      	beq.n	801268c <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012678:	2302      	movs	r3, #2
 801267a:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	7c1b      	ldrb	r3, [r3, #16]
 8012680:	f107 0210 	add.w	r2, r7, #16
 8012684:	4611      	mov	r1, r2
 8012686:	4618      	mov	r0, r3
 8012688:	f002 f801 	bl	801468e <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 801268c:	2301      	movs	r3, #1
 801268e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8012692:	2321      	movs	r3, #33	; 0x21
 8012694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 8012698:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801269c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	7bdb      	ldrb	r3, [r3, #15]
 80126a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	7c1b      	ldrb	r3, [r3, #16]
 80126ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80126b0:	4611      	mov	r1, r2
 80126b2:	4618      	mov	r0, r3
 80126b4:	f001 ffb3 	bl	801461e <RegionGetPhyParam>
 80126b8:	4603      	mov	r3, r0
 80126ba:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80126c8:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80126d0:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80126d8:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80126da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3730      	adds	r7, #48	; 0x30
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80126e6:	b480      	push	{r7}
 80126e8:	b085      	sub	sp, #20
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	60f8      	str	r0, [r7, #12]
 80126ee:	60b9      	str	r1, [r7, #8]
 80126f0:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126f2:	bf00      	nop
 80126f4:	3714      	adds	r7, #20
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bc80      	pop	{r7}
 80126fa:	4770      	bx	lr

080126fc <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
 8012702:	4603      	mov	r3, r0
 8012704:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012706:	bf00      	nop
 8012708:	370c      	adds	r7, #12
 801270a:	46bd      	mov	sp, r7
 801270c:	bc80      	pop	{r7}
 801270e:	4770      	bx	lr

08012710 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012710:	b480      	push	{r7}
 8012712:	b083      	sub	sp, #12
 8012714:	af00      	add	r7, sp, #0
 8012716:	4603      	mov	r3, r0
 8012718:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801271a:	bf00      	nop
 801271c:	370c      	adds	r7, #12
 801271e:	46bd      	mov	sp, r7
 8012720:	bc80      	pop	{r7}
 8012722:	4770      	bx	lr

08012724 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8012724:	b480      	push	{r7}
 8012726:	b083      	sub	sp, #12
 8012728:	af00      	add	r7, sp, #0
 801272a:	4603      	mov	r3, r0
 801272c:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801272e:	bf00      	nop
 8012730:	370c      	adds	r7, #12
 8012732:	46bd      	mov	sp, r7
 8012734:	bc80      	pop	{r7}
 8012736:	4770      	bx	lr

08012738 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012738:	b480      	push	{r7}
 801273a:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801273c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801273e:	4618      	mov	r0, r3
 8012740:	46bd      	mov	sp, r7
 8012742:	bc80      	pop	{r7}
 8012744:	4770      	bx	lr

08012746 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8012746:	b480      	push	{r7}
 8012748:	b083      	sub	sp, #12
 801274a:	af00      	add	r7, sp, #0
 801274c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801274e:	bf00      	nop
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	bc80      	pop	{r7}
 8012756:	4770      	bx	lr

08012758 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012758:	b480      	push	{r7}
 801275a:	b083      	sub	sp, #12
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012760:	bf00      	nop
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	bc80      	pop	{r7}
 8012768:	4770      	bx	lr

0801276a <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 801276a:	b480      	push	{r7}
 801276c:	b083      	sub	sp, #12
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012772:	bf00      	nop
 8012774:	370c      	adds	r7, #12
 8012776:	46bd      	mov	sp, r7
 8012778:	bc80      	pop	{r7}
 801277a:	4770      	bx	lr

0801277c <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	460b      	mov	r3, r1
 8012786:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012788:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801278a:	4618      	mov	r0, r3
 801278c:	370c      	adds	r7, #12
 801278e:	46bd      	mov	sp, r7
 8012790:	bc80      	pop	{r7}
 8012792:	4770      	bx	lr

08012794 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8012794:	b480      	push	{r7}
 8012796:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012798:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801279a:	4618      	mov	r0, r3
 801279c:	46bd      	mov	sp, r7
 801279e:	bc80      	pop	{r7}
 80127a0:	4770      	bx	lr

080127a2 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80127a2:	b480      	push	{r7}
 80127a4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80127a6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bc80      	pop	{r7}
 80127ae:	4770      	bx	lr

080127b0 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80127b0:	b480      	push	{r7}
 80127b2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80127b4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bc80      	pop	{r7}
 80127bc:	4770      	bx	lr

080127be <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80127be:	b480      	push	{r7}
 80127c0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80127c2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bc80      	pop	{r7}
 80127ca:	4770      	bx	lr

080127cc <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	4603      	mov	r3, r0
 80127d4:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127d6:	bf00      	nop
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	bc80      	pop	{r7}
 80127de:	4770      	bx	lr

080127e0 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80127e0:	b480      	push	{r7}
 80127e2:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127e4:	bf00      	nop
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bc80      	pop	{r7}
 80127ea:	4770      	bx	lr

080127ec <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80127ec:	b480      	push	{r7}
 80127ee:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127f0:	bf00      	nop
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bc80      	pop	{r7}
 80127f6:	4770      	bx	lr

080127f8 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80127f8:	b480      	push	{r7}
 80127fa:	b083      	sub	sp, #12
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	4603      	mov	r3, r0
 8012800:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012802:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012804:	4618      	mov	r0, r3
 8012806:	370c      	adds	r7, #12
 8012808:	46bd      	mov	sp, r7
 801280a:	bc80      	pop	{r7}
 801280c:	4770      	bx	lr

0801280e <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801280e:	b480      	push	{r7}
 8012810:	b083      	sub	sp, #12
 8012812:	af00      	add	r7, sp, #0
 8012814:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012816:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012818:	4618      	mov	r0, r3
 801281a:	370c      	adds	r7, #12
 801281c:	46bd      	mov	sp, r7
 801281e:	bc80      	pop	{r7}
 8012820:	4770      	bx	lr

08012822 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8012822:	b480      	push	{r7}
 8012824:	b083      	sub	sp, #12
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801282a:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801282c:	4618      	mov	r0, r3
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	bc80      	pop	{r7}
 8012834:	4770      	bx	lr

08012836 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8012836:	b480      	push	{r7}
 8012838:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801283a:	bf00      	nop
 801283c:	46bd      	mov	sp, r7
 801283e:	bc80      	pop	{r7}
 8012840:	4770      	bx	lr

08012842 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8012842:	b480      	push	{r7}
 8012844:	b083      	sub	sp, #12
 8012846:	af00      	add	r7, sp, #0
 8012848:	4603      	mov	r3, r0
 801284a:	6039      	str	r1, [r7, #0]
 801284c:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801284e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012850:	4618      	mov	r0, r3
 8012852:	370c      	adds	r7, #12
 8012854:	46bd      	mov	sp, r7
 8012856:	bc80      	pop	{r7}
 8012858:	4770      	bx	lr

0801285a <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 801285a:	b480      	push	{r7}
 801285c:	b083      	sub	sp, #12
 801285e:	af00      	add	r7, sp, #0
 8012860:	4603      	mov	r3, r0
 8012862:	603a      	str	r2, [r7, #0]
 8012864:	80fb      	strh	r3, [r7, #6]
 8012866:	460b      	mov	r3, r1
 8012868:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801286a:	bf00      	nop
 801286c:	370c      	adds	r7, #12
 801286e:	46bd      	mov	sp, r7
 8012870:	bc80      	pop	{r7}
 8012872:	4770      	bx	lr

08012874 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8012874:	b480      	push	{r7}
 8012876:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012878:	bf00      	nop
 801287a:	46bd      	mov	sp, r7
 801287c:	bc80      	pop	{r7}
 801287e:	4770      	bx	lr

08012880 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012880:	b480      	push	{r7}
 8012882:	b083      	sub	sp, #12
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012888:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801288a:	4618      	mov	r0, r3
 801288c:	370c      	adds	r7, #12
 801288e:	46bd      	mov	sp, r7
 8012890:	bc80      	pop	{r7}
 8012892:	4770      	bx	lr

08012894 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 801289c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801289e:	4618      	mov	r0, r3
 80128a0:	370c      	adds	r7, #12
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bc80      	pop	{r7}
 80128a6:	4770      	bx	lr

080128a8 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80128a8:	b480      	push	{r7}
 80128aa:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80128ac:	bf00      	nop
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bc80      	pop	{r7}
 80128b2:	4770      	bx	lr

080128b4 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	460b      	mov	r3, r1
 80128be:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80128c0:	bf00      	nop
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bc80      	pop	{r7}
 80128c8:	4770      	bx	lr

080128ca <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80128ca:	b480      	push	{r7}
 80128cc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80128ce:	bf00      	nop
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bc80      	pop	{r7}
 80128d4:	4770      	bx	lr

080128d6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80128d6:	b480      	push	{r7}
 80128d8:	b085      	sub	sp, #20
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80128e2:	2300      	movs	r3, #0
 80128e4:	81fb      	strh	r3, [r7, #14]
 80128e6:	e00a      	b.n	80128fe <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80128e8:	89fb      	ldrh	r3, [r7, #14]
 80128ea:	68ba      	ldr	r2, [r7, #8]
 80128ec:	4413      	add	r3, r2
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d001      	beq.n	80128f8 <IsSlotFree+0x22>
        {
            return false;
 80128f4:	2300      	movs	r3, #0
 80128f6:	e006      	b.n	8012906 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80128f8:	89fb      	ldrh	r3, [r7, #14]
 80128fa:	3301      	adds	r3, #1
 80128fc:	81fb      	strh	r3, [r7, #14]
 80128fe:	89fb      	ldrh	r3, [r7, #14]
 8012900:	2b0f      	cmp	r3, #15
 8012902:	d9f1      	bls.n	80128e8 <IsSlotFree+0x12>
        }
    }
    return true;
 8012904:	2301      	movs	r3, #1
}
 8012906:	4618      	mov	r0, r3
 8012908:	3714      	adds	r7, #20
 801290a:	46bd      	mov	sp, r7
 801290c:	bc80      	pop	{r7}
 801290e:	4770      	bx	lr

08012910 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b082      	sub	sp, #8
 8012914:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8012916:	2300      	movs	r3, #0
 8012918:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801291a:	e007      	b.n	801292c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 801291c:	79fb      	ldrb	r3, [r7, #7]
 801291e:	3301      	adds	r3, #1
 8012920:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8012922:	79fb      	ldrb	r3, [r7, #7]
 8012924:	2b20      	cmp	r3, #32
 8012926:	d101      	bne.n	801292c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012928:	2300      	movs	r3, #0
 801292a:	e012      	b.n	8012952 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801292c:	79fb      	ldrb	r3, [r7, #7]
 801292e:	011b      	lsls	r3, r3, #4
 8012930:	3308      	adds	r3, #8
 8012932:	4a0a      	ldr	r2, [pc, #40]	; (801295c <MallocNewMacCommandSlot+0x4c>)
 8012934:	4413      	add	r3, r2
 8012936:	4618      	mov	r0, r3
 8012938:	f7ff ffcd 	bl	80128d6 <IsSlotFree>
 801293c:	4603      	mov	r3, r0
 801293e:	f083 0301 	eor.w	r3, r3, #1
 8012942:	b2db      	uxtb	r3, r3
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1e9      	bne.n	801291c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012948:	79fb      	ldrb	r3, [r7, #7]
 801294a:	011b      	lsls	r3, r3, #4
 801294c:	3308      	adds	r3, #8
 801294e:	4a03      	ldr	r2, [pc, #12]	; (801295c <MallocNewMacCommandSlot+0x4c>)
 8012950:	4413      	add	r3, r2
}
 8012952:	4618      	mov	r0, r3
 8012954:	3708      	adds	r7, #8
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}
 801295a:	bf00      	nop
 801295c:	20001750 	.word	0x20001750

08012960 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b082      	sub	sp, #8
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d101      	bne.n	8012972 <FreeMacCommandSlot+0x12>
    {
        return false;
 801296e:	2300      	movs	r3, #0
 8012970:	e005      	b.n	801297e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8012972:	2210      	movs	r2, #16
 8012974:	2100      	movs	r1, #0
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f005 fc8a 	bl	8018290 <memset1>

    return true;
 801297c:	2301      	movs	r3, #1
}
 801297e:	4618      	mov	r0, r3
 8012980:	3708      	adds	r7, #8
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}

08012986 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8012986:	b480      	push	{r7}
 8012988:	b083      	sub	sp, #12
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d101      	bne.n	8012998 <LinkedListInit+0x12>
    {
        return false;
 8012994:	2300      	movs	r3, #0
 8012996:	e006      	b.n	80129a6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2200      	movs	r2, #0
 801299c:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2200      	movs	r2, #0
 80129a2:	605a      	str	r2, [r3, #4]

    return true;
 80129a4:	2301      	movs	r3, #1
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	370c      	adds	r7, #12
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bc80      	pop	{r7}
 80129ae:	4770      	bx	lr

080129b0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
 80129b8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d002      	beq.n	80129c6 <LinkedListAdd+0x16>
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d101      	bne.n	80129ca <LinkedListAdd+0x1a>
    {
        return false;
 80129c6:	2300      	movs	r3, #0
 80129c8:	e015      	b.n	80129f6 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d102      	bne.n	80129d8 <LinkedListAdd+0x28>
    {
        list->First = element;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	683a      	ldr	r2, [r7, #0]
 80129d6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d003      	beq.n	80129e8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	685b      	ldr	r3, [r3, #4]
 80129e4:	683a      	ldr	r2, [r7, #0]
 80129e6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	2200      	movs	r2, #0
 80129ec:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	683a      	ldr	r2, [r7, #0]
 80129f2:	605a      	str	r2, [r3, #4]

    return true;
 80129f4:	2301      	movs	r3, #1
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bc80      	pop	{r7}
 80129fe:	4770      	bx	lr

08012a00 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8012a00:	b480      	push	{r7}
 8012a02:	b085      	sub	sp, #20
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <LinkedListGetPrevious+0x16>
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d101      	bne.n	8012a1a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8012a16:	2300      	movs	r3, #0
 8012a18:	e016      	b.n	8012a48 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d00c      	beq.n	8012a42 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012a28:	e002      	b.n	8012a30 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d007      	beq.n	8012a46 <LinkedListGetPrevious+0x46>
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	683a      	ldr	r2, [r7, #0]
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d1f4      	bne.n	8012a2a <LinkedListGetPrevious+0x2a>
 8012a40:	e001      	b.n	8012a46 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8012a42:	2300      	movs	r3, #0
 8012a44:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8012a46:	68fb      	ldr	r3, [r7, #12]
}
 8012a48:	4618      	mov	r0, r3
 8012a4a:	3714      	adds	r7, #20
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	bc80      	pop	{r7}
 8012a50:	4770      	bx	lr

08012a52 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8012a52:	b580      	push	{r7, lr}
 8012a54:	b084      	sub	sp, #16
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
 8012a5a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d002      	beq.n	8012a68 <LinkedListRemove+0x16>
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d101      	bne.n	8012a6c <LinkedListRemove+0x1a>
    {
        return false;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	e020      	b.n	8012aae <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012a6c:	6839      	ldr	r1, [r7, #0]
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7ff ffc6 	bl	8012a00 <LinkedListGetPrevious>
 8012a74:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	683a      	ldr	r2, [r7, #0]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d103      	bne.n	8012a88 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	683a      	ldr	r2, [r7, #0]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d102      	bne.n	8012a98 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d003      	beq.n	8012aa6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	601a      	str	r2, [r3, #0]

    return true;
 8012aac:	2301      	movs	r3, #1
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3710      	adds	r7, #16
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
	...

08012ab8 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8012ab8:	b480      	push	{r7}
 8012aba:	b083      	sub	sp, #12
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	4603      	mov	r3, r0
 8012ac0:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8012ac2:	79fb      	ldrb	r3, [r7, #7]
 8012ac4:	2b11      	cmp	r3, #17
 8012ac6:	bf8c      	ite	hi
 8012ac8:	2201      	movhi	r2, #1
 8012aca:	2200      	movls	r2, #0
 8012acc:	b2d2      	uxtb	r2, r2
 8012ace:	2a00      	cmp	r2, #0
 8012ad0:	d10c      	bne.n	8012aec <IsSticky+0x34>
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	409a      	lsls	r2, r3
 8012ad6:	4b08      	ldr	r3, [pc, #32]	; (8012af8 <IsSticky+0x40>)
 8012ad8:	4013      	ands	r3, r2
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	bf14      	ite	ne
 8012ade:	2301      	movne	r3, #1
 8012ae0:	2300      	moveq	r3, #0
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d001      	beq.n	8012aec <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	e000      	b.n	8012aee <IsSticky+0x36>
        default:
            return false;
 8012aec:	2300      	movs	r3, #0
    }
}
 8012aee:	4618      	mov	r0, r3
 8012af0:	370c      	adds	r7, #12
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bc80      	pop	{r7}
 8012af6:	4770      	bx	lr
 8012af8:	00020720 	.word	0x00020720

08012afc <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8012b00:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8012b04:	2100      	movs	r1, #0
 8012b06:	4804      	ldr	r0, [pc, #16]	; (8012b18 <LoRaMacCommandsInit+0x1c>)
 8012b08:	f005 fbc2 	bl	8018290 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012b0c:	4802      	ldr	r0, [pc, #8]	; (8012b18 <LoRaMacCommandsInit+0x1c>)
 8012b0e:	f7ff ff3a 	bl	8012986 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	20001750 	.word	0x20001750

08012b1c <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b086      	sub	sp, #24
 8012b20:	af00      	add	r7, sp, #0
 8012b22:	4603      	mov	r3, r0
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	607a      	str	r2, [r7, #4]
 8012b28:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d101      	bne.n	8012b34 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012b30:	2301      	movs	r3, #1
 8012b32:	e033      	b.n	8012b9c <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012b34:	f7ff feec 	bl	8012910 <MallocNewMacCommandSlot>
 8012b38:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d101      	bne.n	8012b44 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012b40:	2302      	movs	r3, #2
 8012b42:	e02b      	b.n	8012b9c <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012b44:	6979      	ldr	r1, [r7, #20]
 8012b46:	4817      	ldr	r0, [pc, #92]	; (8012ba4 <LoRaMacCommandsAddCmd+0x88>)
 8012b48:	f7ff ff32 	bl	80129b0 <LinkedListAdd>
 8012b4c:	4603      	mov	r3, r0
 8012b4e:	f083 0301 	eor.w	r3, r3, #1
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d001      	beq.n	8012b5c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012b58:	2305      	movs	r3, #5
 8012b5a:	e01f      	b.n	8012b9c <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	7bfa      	ldrb	r2, [r7, #15]
 8012b60:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	3305      	adds	r3, #5
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	b292      	uxth	r2, r2
 8012b70:	68b9      	ldr	r1, [r7, #8]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f005 fb51 	bl	801821a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012b78:	7bfb      	ldrb	r3, [r7, #15]
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7ff ff9c 	bl	8012ab8 <IsSticky>
 8012b80:	4603      	mov	r3, r0
 8012b82:	461a      	mov	r2, r3
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012b88:	4b06      	ldr	r3, [pc, #24]	; (8012ba4 <LoRaMacCommandsAddCmd+0x88>)
 8012b8a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	4413      	add	r3, r2
 8012b92:	3301      	adds	r3, #1
 8012b94:	4a03      	ldr	r2, [pc, #12]	; (8012ba4 <LoRaMacCommandsAddCmd+0x88>)
 8012b96:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3718      	adds	r7, #24
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	20001750 	.word	0x20001750

08012ba8 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d101      	bne.n	8012bba <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	e021      	b.n	8012bfe <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012bba:	6879      	ldr	r1, [r7, #4]
 8012bbc:	4812      	ldr	r0, [pc, #72]	; (8012c08 <LoRaMacCommandsRemoveCmd+0x60>)
 8012bbe:	f7ff ff48 	bl	8012a52 <LinkedListRemove>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	f083 0301 	eor.w	r3, r3, #1
 8012bc8:	b2db      	uxtb	r3, r3
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d001      	beq.n	8012bd2 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012bce:	2303      	movs	r3, #3
 8012bd0:	e015      	b.n	8012bfe <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	; (8012c08 <LoRaMacCommandsRemoveCmd+0x60>)
 8012bd4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	689b      	ldr	r3, [r3, #8]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	3b01      	subs	r3, #1
 8012be0:	4a09      	ldr	r2, [pc, #36]	; (8012c08 <LoRaMacCommandsRemoveCmd+0x60>)
 8012be2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f7ff feba 	bl	8012960 <FreeMacCommandSlot>
 8012bec:	4603      	mov	r3, r0
 8012bee:	f083 0301 	eor.w	r3, r3, #1
 8012bf2:	b2db      	uxtb	r3, r3
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012bf8:	2305      	movs	r3, #5
 8012bfa:	e000      	b.n	8012bfe <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012bfc:	2300      	movs	r3, #0
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3708      	adds	r7, #8
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	20001750 	.word	0x20001750

08012c0c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b082      	sub	sp, #8
 8012c10:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012c12:	4b0f      	ldr	r3, [pc, #60]	; (8012c50 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012c18:	e012      	b.n	8012c40 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	7b1b      	ldrb	r3, [r3, #12]
 8012c1e:	f083 0301 	eor.w	r3, r3, #1
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d008      	beq.n	8012c3a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f7ff ffba 	bl	8012ba8 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	607b      	str	r3, [r7, #4]
 8012c38:	e002      	b.n	8012c40 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d1e9      	bne.n	8012c1a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012c46:	2300      	movs	r3, #0
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3708      	adds	r7, #8
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	20001750 	.word	0x20001750

08012c54 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012c5a:	4b0e      	ldr	r3, [pc, #56]	; (8012c94 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012c60:	e00f      	b.n	8012c82 <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	791b      	ldrb	r3, [r3, #4]
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	f7ff ff23 	bl	8012ab8 <IsSticky>
 8012c72:	4603      	mov	r3, r0
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d002      	beq.n	8012c7e <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7ff ff95 	bl	8012ba8 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012c7e:	683b      	ldr	r3, [r7, #0]
 8012c80:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d1ec      	bne.n	8012c62 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012c88:	2300      	movs	r3, #0
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3708      	adds	r7, #8
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	20001750 	.word	0x20001750

08012c98 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b083      	sub	sp, #12
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d101      	bne.n	8012caa <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012ca6:	2301      	movs	r3, #1
 8012ca8:	e005      	b.n	8012cb6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012caa:	4b05      	ldr	r3, [pc, #20]	; (8012cc0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012cac:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012cb4:	2300      	movs	r3, #0
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	370c      	adds	r7, #12
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bc80      	pop	{r7}
 8012cbe:	4770      	bx	lr
 8012cc0:	20001750 	.word	0x20001750

08012cc4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b088      	sub	sp, #32
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	60f8      	str	r0, [r7, #12]
 8012ccc:	60b9      	str	r1, [r7, #8]
 8012cce:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012cd0:	4b25      	ldr	r3, [pc, #148]	; (8012d68 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d002      	beq.n	8012ce6 <LoRaMacCommandsSerializeCmds+0x22>
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d126      	bne.n	8012d34 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012ce6:	2301      	movs	r3, #1
 8012ce8:	e039      	b.n	8012d5e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012cea:	7efb      	ldrb	r3, [r7, #27]
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	1ad2      	subs	r2, r2, r3
 8012cf0:	69fb      	ldr	r3, [r7, #28]
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	429a      	cmp	r2, r3
 8012cf8:	d320      	bcc.n	8012d3c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012cfa:	7efb      	ldrb	r3, [r7, #27]
 8012cfc:	1c5a      	adds	r2, r3, #1
 8012cfe:	76fa      	strb	r2, [r7, #27]
 8012d00:	461a      	mov	r2, r3
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	4413      	add	r3, r2
 8012d06:	69fa      	ldr	r2, [r7, #28]
 8012d08:	7912      	ldrb	r2, [r2, #4]
 8012d0a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012d0c:	7efb      	ldrb	r3, [r7, #27]
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	18d0      	adds	r0, r2, r3
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	1d59      	adds	r1, r3, #5
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	f005 fa7c 	bl	801821a <memcpy1>
            itr += curElement->PayloadSize;
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	689b      	ldr	r3, [r3, #8]
 8012d26:	b2da      	uxtb	r2, r3
 8012d28:	7efb      	ldrb	r3, [r7, #27]
 8012d2a:	4413      	add	r3, r2
 8012d2c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d1d7      	bne.n	8012cea <LoRaMacCommandsSerializeCmds+0x26>
 8012d3a:	e009      	b.n	8012d50 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012d3c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012d3e:	e007      	b.n	8012d50 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012d46:	69f8      	ldr	r0, [r7, #28]
 8012d48:	f7ff ff2e 	bl	8012ba8 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012d4c:	697b      	ldr	r3, [r7, #20]
 8012d4e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d1f4      	bne.n	8012d40 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012d56:	68b8      	ldr	r0, [r7, #8]
 8012d58:	f7ff ff9e 	bl	8012c98 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3720      	adds	r7, #32
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	20001750 	.word	0x20001750

08012d6c <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b085      	sub	sp, #20
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d101      	bne.n	8012d7e <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	e016      	b.n	8012dac <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012d7e:	4b0e      	ldr	r3, [pc, #56]	; (8012db8 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	2200      	movs	r2, #0
 8012d88:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012d8a:	e00b      	b.n	8012da4 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	7b1b      	ldrb	r3, [r3, #12]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d004      	beq.n	8012d9e <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2201      	movs	r2, #1
 8012d98:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	e006      	b.n	8012dac <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d1f0      	bne.n	8012d8c <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012daa:	2300      	movs	r3, #0
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3714      	adds	r7, #20
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bc80      	pop	{r7}
 8012db4:	4770      	bx	lr
 8012db6:	bf00      	nop
 8012db8:	20001750 	.word	0x20001750

08012dbc <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b085      	sub	sp, #20
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012dca:	79fb      	ldrb	r3, [r7, #7]
 8012dcc:	3b02      	subs	r3, #2
 8012dce:	2b11      	cmp	r3, #17
 8012dd0:	d850      	bhi.n	8012e74 <LoRaMacCommandsGetCmdSize+0xb8>
 8012dd2:	a201      	add	r2, pc, #4	; (adr r2, 8012dd8 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dd8:	08012e21 	.word	0x08012e21
 8012ddc:	08012e27 	.word	0x08012e27
 8012de0:	08012e2d 	.word	0x08012e2d
 8012de4:	08012e33 	.word	0x08012e33
 8012de8:	08012e39 	.word	0x08012e39
 8012dec:	08012e3f 	.word	0x08012e3f
 8012df0:	08012e45 	.word	0x08012e45
 8012df4:	08012e4b 	.word	0x08012e4b
 8012df8:	08012e51 	.word	0x08012e51
 8012dfc:	08012e75 	.word	0x08012e75
 8012e00:	08012e75 	.word	0x08012e75
 8012e04:	08012e57 	.word	0x08012e57
 8012e08:	08012e75 	.word	0x08012e75
 8012e0c:	08012e75 	.word	0x08012e75
 8012e10:	08012e5d 	.word	0x08012e5d
 8012e14:	08012e63 	.word	0x08012e63
 8012e18:	08012e69 	.word	0x08012e69
 8012e1c:	08012e6f 	.word	0x08012e6f
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012e20:	2303      	movs	r3, #3
 8012e22:	73fb      	strb	r3, [r7, #15]
            break;
 8012e24:	e027      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012e26:	2305      	movs	r3, #5
 8012e28:	73fb      	strb	r3, [r7, #15]
            break;
 8012e2a:	e024      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012e2c:	2302      	movs	r3, #2
 8012e2e:	73fb      	strb	r3, [r7, #15]
            break;
 8012e30:	e021      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012e32:	2305      	movs	r3, #5
 8012e34:	73fb      	strb	r3, [r7, #15]
            break;
 8012e36:	e01e      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012e38:	2301      	movs	r3, #1
 8012e3a:	73fb      	strb	r3, [r7, #15]
            break;
 8012e3c:	e01b      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012e3e:	2306      	movs	r3, #6
 8012e40:	73fb      	strb	r3, [r7, #15]
            break;
 8012e42:	e018      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012e44:	2302      	movs	r3, #2
 8012e46:	73fb      	strb	r3, [r7, #15]
            break;
 8012e48:	e015      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012e4a:	2302      	movs	r3, #2
 8012e4c:	73fb      	strb	r3, [r7, #15]
            break;
 8012e4e:	e012      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012e50:	2305      	movs	r3, #5
 8012e52:	73fb      	strb	r3, [r7, #15]
            break;
 8012e54:	e00f      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012e56:	2306      	movs	r3, #6
 8012e58:	73fb      	strb	r3, [r7, #15]
            break;
 8012e5a:	e00c      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	73fb      	strb	r3, [r7, #15]
            break;
 8012e60:	e009      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012e62:	2305      	movs	r3, #5
 8012e64:	73fb      	strb	r3, [r7, #15]
            break;
 8012e66:	e006      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012e68:	2304      	movs	r3, #4
 8012e6a:	73fb      	strb	r3, [r7, #15]
            break;
 8012e6c:	e003      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012e6e:	2304      	movs	r3, #4
 8012e70:	73fb      	strb	r3, [r7, #15]
            break;
 8012e72:	e000      	b.n	8012e76 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012e74:	bf00      	nop
        }
    }
    return cidSize;
 8012e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3714      	adds	r7, #20
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bc80      	pop	{r7}
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop

08012e84 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	4a07      	ldr	r2, [pc, #28]	; (8012eac <IncreaseBufferPointer+0x28>)
 8012e90:	4293      	cmp	r3, r2
 8012e92:	d102      	bne.n	8012e9a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e94:	4b06      	ldr	r3, [pc, #24]	; (8012eb0 <IncreaseBufferPointer+0x2c>)
 8012e96:	607b      	str	r3, [r7, #4]
 8012e98:	e002      	b.n	8012ea0 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012ea0:	687b      	ldr	r3, [r7, #4]
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	370c      	adds	r7, #12
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bc80      	pop	{r7}
 8012eaa:	4770      	bx	lr
 8012eac:	20001978 	.word	0x20001978
 8012eb0:	20001968 	.word	0x20001968

08012eb4 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b083      	sub	sp, #12
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	4603      	mov	r3, r0
 8012ebc:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d101      	bne.n	8012ec8 <IsListEmpty+0x14>
    {
        return true;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e000      	b.n	8012eca <IsListEmpty+0x16>
    }
    return false;
 8012ec8:	2300      	movs	r3, #0
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	370c      	adds	r7, #12
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bc80      	pop	{r7}
 8012ed2:	4770      	bx	lr

08012ed4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	4603      	mov	r3, r0
 8012edc:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012ede:	79fb      	ldrb	r3, [r7, #7]
 8012ee0:	2b04      	cmp	r3, #4
 8012ee2:	d901      	bls.n	8012ee8 <IsListFull+0x14>
    {
        return true;
 8012ee4:	2301      	movs	r3, #1
 8012ee6:	e000      	b.n	8012eea <IsListFull+0x16>
    }
    return false;
 8012ee8:	2300      	movs	r3, #0
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	370c      	adds	r7, #12
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bc80      	pop	{r7}
 8012ef2:	4770      	bx	lr

08012ef4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b086      	sub	sp, #24
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	4603      	mov	r3, r0
 8012efc:	60b9      	str	r1, [r7, #8]
 8012efe:	607a      	str	r2, [r7, #4]
 8012f00:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012f06:	4b13      	ldr	r3, [pc, #76]	; (8012f54 <GetElement+0x60>)
 8012f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7ff ffd1 	bl	8012eb4 <IsListEmpty>
 8012f12:	4603      	mov	r3, r0
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d001      	beq.n	8012f1c <GetElement+0x28>
    {
        return NULL;
 8012f18:	2300      	movs	r3, #0
 8012f1a:	e017      	b.n	8012f4c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	74fb      	strb	r3, [r7, #19]
 8012f20:	e00d      	b.n	8012f3e <GetElement+0x4a>
    {
        if( element->Request == request )
 8012f22:	697b      	ldr	r3, [r7, #20]
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	7bfa      	ldrb	r2, [r7, #15]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d101      	bne.n	8012f30 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	e00d      	b.n	8012f4c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012f30:	6978      	ldr	r0, [r7, #20]
 8012f32:	f7ff ffa7 	bl	8012e84 <IncreaseBufferPointer>
 8012f36:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012f38:	7cfb      	ldrb	r3, [r7, #19]
 8012f3a:	3301      	adds	r3, #1
 8012f3c:	74fb      	strb	r3, [r7, #19]
 8012f3e:	4b05      	ldr	r3, [pc, #20]	; (8012f54 <GetElement+0x60>)
 8012f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f44:	7cfa      	ldrb	r2, [r7, #19]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d3eb      	bcc.n	8012f22 <GetElement+0x2e>
    }

    return NULL;
 8012f4a:	2300      	movs	r3, #0
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	3718      	adds	r7, #24
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	2000195c 	.word	0x2000195c

08012f58 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b082      	sub	sp, #8
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012f60:	4a0c      	ldr	r2, [pc, #48]	; (8012f94 <LoRaMacConfirmQueueInit+0x3c>)
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012f66:	4b0b      	ldr	r3, [pc, #44]	; (8012f94 <LoRaMacConfirmQueueInit+0x3c>)
 8012f68:	2200      	movs	r2, #0
 8012f6a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012f6e:	4b09      	ldr	r3, [pc, #36]	; (8012f94 <LoRaMacConfirmQueueInit+0x3c>)
 8012f70:	4a09      	ldr	r2, [pc, #36]	; (8012f98 <LoRaMacConfirmQueueInit+0x40>)
 8012f72:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012f74:	4b07      	ldr	r3, [pc, #28]	; (8012f94 <LoRaMacConfirmQueueInit+0x3c>)
 8012f76:	4a08      	ldr	r2, [pc, #32]	; (8012f98 <LoRaMacConfirmQueueInit+0x40>)
 8012f78:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012f7a:	2214      	movs	r2, #20
 8012f7c:	21ff      	movs	r1, #255	; 0xff
 8012f7e:	4806      	ldr	r0, [pc, #24]	; (8012f98 <LoRaMacConfirmQueueInit+0x40>)
 8012f80:	f005 f986 	bl	8018290 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012f84:	4b03      	ldr	r3, [pc, #12]	; (8012f94 <LoRaMacConfirmQueueInit+0x3c>)
 8012f86:	2201      	movs	r2, #1
 8012f88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8012f8c:	bf00      	nop
 8012f8e:	3708      	adds	r7, #8
 8012f90:	46bd      	mov	sp, r7
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	2000195c 	.word	0x2000195c
 8012f98:	20001968 	.word	0x20001968

08012f9c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b082      	sub	sp, #8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012fa4:	4b19      	ldr	r3, [pc, #100]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff ff92 	bl	8012ed4 <IsListFull>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d001      	beq.n	8012fba <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e024      	b.n	8013004 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012fba:	4b14      	ldr	r3, [pc, #80]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fbc:	689b      	ldr	r3, [r3, #8]
 8012fbe:	687a      	ldr	r2, [r7, #4]
 8012fc0:	7812      	ldrb	r2, [r2, #0]
 8012fc2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012fc4:	4b11      	ldr	r3, [pc, #68]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fc6:	689b      	ldr	r3, [r3, #8]
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	7852      	ldrb	r2, [r2, #1]
 8012fcc:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012fce:	4b0f      	ldr	r3, [pc, #60]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fd0:	689b      	ldr	r3, [r3, #8]
 8012fd2:	687a      	ldr	r2, [r7, #4]
 8012fd4:	78d2      	ldrb	r2, [r2, #3]
 8012fd6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8012fd8:	4b0c      	ldr	r3, [pc, #48]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	7892      	ldrb	r2, [r2, #2]
 8012fe0:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012fe2:	4b0a      	ldr	r3, [pc, #40]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fe8:	3301      	adds	r3, #1
 8012fea:	b2da      	uxtb	r2, r3
 8012fec:	4b07      	ldr	r3, [pc, #28]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012fee:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012ff2:	4b06      	ldr	r3, [pc, #24]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8012ff4:	689b      	ldr	r3, [r3, #8]
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff ff44 	bl	8012e84 <IncreaseBufferPointer>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	4a03      	ldr	r2, [pc, #12]	; (801300c <LoRaMacConfirmQueueAdd+0x70>)
 8013000:	6093      	str	r3, [r2, #8]

    return true;
 8013002:	2301      	movs	r3, #1
}
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	2000195c 	.word	0x2000195c

08013010 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013010:	b580      	push	{r7, lr}
 8013012:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013014:	4b0e      	ldr	r3, [pc, #56]	; (8013050 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013016:	f893 3020 	ldrb.w	r3, [r3, #32]
 801301a:	4618      	mov	r0, r3
 801301c:	f7ff ff4a 	bl	8012eb4 <IsListEmpty>
 8013020:	4603      	mov	r3, r0
 8013022:	2b00      	cmp	r3, #0
 8013024:	d001      	beq.n	801302a <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8013026:	2300      	movs	r3, #0
 8013028:	e010      	b.n	801304c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801302a:	4b09      	ldr	r3, [pc, #36]	; (8013050 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801302c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013030:	3b01      	subs	r3, #1
 8013032:	b2da      	uxtb	r2, r3
 8013034:	4b06      	ldr	r3, [pc, #24]	; (8013050 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013036:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801303a:	4b05      	ldr	r3, [pc, #20]	; (8013050 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	4618      	mov	r0, r3
 8013040:	f7ff ff20 	bl	8012e84 <IncreaseBufferPointer>
 8013044:	4603      	mov	r3, r0
 8013046:	4a02      	ldr	r2, [pc, #8]	; (8013050 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8013048:	6053      	str	r3, [r2, #4]

    return true;
 801304a:	2301      	movs	r3, #1
}
 801304c:	4618      	mov	r0, r3
 801304e:	bd80      	pop	{r7, pc}
 8013050:	2000195c 	.word	0x2000195c

08013054 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	4603      	mov	r3, r0
 801305c:	460a      	mov	r2, r1
 801305e:	71fb      	strb	r3, [r7, #7]
 8013060:	4613      	mov	r3, r2
 8013062:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8013064:	2300      	movs	r3, #0
 8013066:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013068:	4b10      	ldr	r3, [pc, #64]	; (80130ac <LoRaMacConfirmQueueSetStatus+0x58>)
 801306a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801306e:	4618      	mov	r0, r3
 8013070:	f7ff ff20 	bl	8012eb4 <IsListEmpty>
 8013074:	4603      	mov	r3, r0
 8013076:	f083 0301 	eor.w	r3, r3, #1
 801307a:	b2db      	uxtb	r3, r3
 801307c:	2b00      	cmp	r3, #0
 801307e:	d011      	beq.n	80130a4 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013080:	4b0a      	ldr	r3, [pc, #40]	; (80130ac <LoRaMacConfirmQueueSetStatus+0x58>)
 8013082:	6859      	ldr	r1, [r3, #4]
 8013084:	4b09      	ldr	r3, [pc, #36]	; (80130ac <LoRaMacConfirmQueueSetStatus+0x58>)
 8013086:	689a      	ldr	r2, [r3, #8]
 8013088:	79bb      	ldrb	r3, [r7, #6]
 801308a:	4618      	mov	r0, r3
 801308c:	f7ff ff32 	bl	8012ef4 <GetElement>
 8013090:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d005      	beq.n	80130a4 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	79fa      	ldrb	r2, [r7, #7]
 801309c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	2201      	movs	r2, #1
 80130a2:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80130a4:	bf00      	nop
 80130a6:	3710      	adds	r7, #16
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}
 80130ac:	2000195c 	.word	0x2000195c

080130b0 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b084      	sub	sp, #16
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	4603      	mov	r3, r0
 80130b8:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80130ba:	2300      	movs	r3, #0
 80130bc:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80130be:	4b10      	ldr	r3, [pc, #64]	; (8013100 <LoRaMacConfirmQueueGetStatus+0x50>)
 80130c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7ff fef5 	bl	8012eb4 <IsListEmpty>
 80130ca:	4603      	mov	r3, r0
 80130cc:	f083 0301 	eor.w	r3, r3, #1
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d00e      	beq.n	80130f4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80130d6:	4b0a      	ldr	r3, [pc, #40]	; (8013100 <LoRaMacConfirmQueueGetStatus+0x50>)
 80130d8:	6859      	ldr	r1, [r3, #4]
 80130da:	4b09      	ldr	r3, [pc, #36]	; (8013100 <LoRaMacConfirmQueueGetStatus+0x50>)
 80130dc:	689a      	ldr	r2, [r3, #8]
 80130de:	79fb      	ldrb	r3, [r7, #7]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7ff ff07 	bl	8012ef4 <GetElement>
 80130e6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d002      	beq.n	80130f4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	785b      	ldrb	r3, [r3, #1]
 80130f2:	e000      	b.n	80130f6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80130f4:	2301      	movs	r3, #1
}
 80130f6:	4618      	mov	r0, r3
 80130f8:	3710      	adds	r7, #16
 80130fa:	46bd      	mov	sp, r7
 80130fc:	bd80      	pop	{r7, pc}
 80130fe:	bf00      	nop
 8013100:	2000195c 	.word	0x2000195c

08013104 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	4603      	mov	r3, r0
 801310c:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801310e:	4b16      	ldr	r3, [pc, #88]	; (8013168 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013114:	4a14      	ldr	r2, [pc, #80]	; (8013168 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013116:	79fb      	ldrb	r3, [r7, #7]
 8013118:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801311c:	4b12      	ldr	r3, [pc, #72]	; (8013168 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801311e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013122:	4618      	mov	r0, r3
 8013124:	f7ff fec6 	bl	8012eb4 <IsListEmpty>
 8013128:	4603      	mov	r3, r0
 801312a:	f083 0301 	eor.w	r3, r3, #1
 801312e:	b2db      	uxtb	r3, r3
 8013130:	2b00      	cmp	r3, #0
 8013132:	d015      	beq.n	8013160 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	79fa      	ldrb	r2, [r7, #7]
 8013138:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	78db      	ldrb	r3, [r3, #3]
 801313e:	f083 0301 	eor.w	r3, r3, #1
 8013142:	b2db      	uxtb	r3, r3
 8013144:	2b00      	cmp	r3, #0
 8013146:	d002      	beq.n	801314e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2201      	movs	r2, #1
 801314c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801314e:	68f8      	ldr	r0, [r7, #12]
 8013150:	f7ff fe98 	bl	8012e84 <IncreaseBufferPointer>
 8013154:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013156:	4b04      	ldr	r3, [pc, #16]	; (8013168 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013158:	689b      	ldr	r3, [r3, #8]
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	429a      	cmp	r2, r3
 801315e:	d1e9      	bne.n	8013134 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8013160:	bf00      	nop
 8013162:	3710      	adds	r7, #16
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	2000195c 	.word	0x2000195c

0801316c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	4603      	mov	r3, r0
 8013174:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013176:	4b09      	ldr	r3, [pc, #36]	; (801319c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013178:	6859      	ldr	r1, [r3, #4]
 801317a:	4b08      	ldr	r3, [pc, #32]	; (801319c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801317c:	689a      	ldr	r2, [r3, #8]
 801317e:	79fb      	ldrb	r3, [r7, #7]
 8013180:	4618      	mov	r0, r3
 8013182:	f7ff feb7 	bl	8012ef4 <GetElement>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d001      	beq.n	8013190 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801318c:	2301      	movs	r3, #1
 801318e:	e000      	b.n	8013192 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8013190:	2300      	movs	r3, #0
}
 8013192:	4618      	mov	r0, r3
 8013194:	3708      	adds	r7, #8
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	2000195c 	.word	0x2000195c

080131a0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b084      	sub	sp, #16
 80131a4:	af00      	add	r7, sp, #0
 80131a6:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80131a8:	4b22      	ldr	r3, [pc, #136]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80131ae:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80131b0:	2300      	movs	r3, #0
 80131b2:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80131b4:	2300      	movs	r3, #0
 80131b6:	73fb      	strb	r3, [r7, #15]
 80131b8:	e032      	b.n	8013220 <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80131ba:	4b1e      	ldr	r3, [pc, #120]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	781a      	ldrb	r2, [r3, #0]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80131c4:	4b1b      	ldr	r3, [pc, #108]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	785a      	ldrb	r2, [r3, #1]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80131ce:	4b19      	ldr	r3, [pc, #100]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131d0:	685b      	ldr	r3, [r3, #4]
 80131d2:	789b      	ldrb	r3, [r3, #2]
 80131d4:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80131d6:	7b7b      	ldrb	r3, [r7, #13]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d005      	beq.n	80131e8 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80131dc:	4b15      	ldr	r3, [pc, #84]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	689b      	ldr	r3, [r3, #8]
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	4798      	blx	r3
 80131e6:	e00b      	b.n	8013200 <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80131e8:	4b12      	ldr	r3, [pc, #72]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131ea:	685b      	ldr	r3, [r3, #4]
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80131f0:	4b10      	ldr	r3, [pc, #64]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131f2:	685b      	ldr	r3, [r3, #4]
 80131f4:	785b      	ldrb	r3, [r3, #1]
 80131f6:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80131f8:	4b0e      	ldr	r3, [pc, #56]	; (8013234 <LoRaMacConfirmQueueHandleCb+0x94>)
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	78db      	ldrb	r3, [r3, #3]
 80131fe:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013200:	f7ff ff06 	bl	8013010 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013204:	7b7b      	ldrb	r3, [r7, #13]
 8013206:	f083 0301 	eor.w	r3, r3, #1
 801320a:	b2db      	uxtb	r3, r3
 801320c:	2b00      	cmp	r3, #0
 801320e:	d004      	beq.n	801321a <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013210:	f107 0308 	add.w	r3, r7, #8
 8013214:	4618      	mov	r0, r3
 8013216:	f7ff fec1 	bl	8012f9c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801321a:	7bfb      	ldrb	r3, [r7, #15]
 801321c:	3301      	adds	r3, #1
 801321e:	73fb      	strb	r3, [r7, #15]
 8013220:	7bfa      	ldrb	r2, [r7, #15]
 8013222:	7bbb      	ldrb	r3, [r7, #14]
 8013224:	429a      	cmp	r2, r3
 8013226:	d3c8      	bcc.n	80131ba <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013228:	bf00      	nop
 801322a:	bf00      	nop
 801322c:	3710      	adds	r7, #16
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	2000195c 	.word	0x2000195c

08013238 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013238:	b480      	push	{r7}
 801323a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801323c:	4b03      	ldr	r3, [pc, #12]	; (801324c <LoRaMacConfirmQueueGetCnt+0x14>)
 801323e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8013242:	4618      	mov	r0, r3
 8013244:	46bd      	mov	sp, r7
 8013246:	bc80      	pop	{r7}
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	2000195c 	.word	0x2000195c

08013250 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013250:	b580      	push	{r7, lr}
 8013252:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013254:	4b06      	ldr	r3, [pc, #24]	; (8013270 <LoRaMacConfirmQueueIsFull+0x20>)
 8013256:	f893 3020 	ldrb.w	r3, [r3, #32]
 801325a:	4618      	mov	r0, r3
 801325c:	f7ff fe3a 	bl	8012ed4 <IsListFull>
 8013260:	4603      	mov	r3, r0
 8013262:	2b00      	cmp	r3, #0
 8013264:	d001      	beq.n	801326a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013266:	2301      	movs	r3, #1
 8013268:	e000      	b.n	801326c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801326a:	2300      	movs	r3, #0
    }
}
 801326c:	4618      	mov	r0, r3
 801326e:	bd80      	pop	{r7, pc}
 8013270:	2000195c 	.word	0x2000195c

08013274 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b08e      	sub	sp, #56	; 0x38
 8013278:	af00      	add	r7, sp, #0
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	607b      	str	r3, [r7, #4]
 801327e:	460b      	mov	r3, r1
 8013280:	817b      	strh	r3, [r7, #10]
 8013282:	4613      	mov	r3, r2
 8013284:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d101      	bne.n	8013290 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801328c:	2309      	movs	r3, #9
 801328e:	e086      	b.n	801339e <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 8013290:	2300      	movs	r3, #0
 8013292:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 8013296:	2301      	movs	r3, #1
 8013298:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 801329a:	2300      	movs	r3, #0
 801329c:	623b      	str	r3, [r7, #32]
 801329e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132a2:	2200      	movs	r2, #0
 80132a4:	601a      	str	r2, [r3, #0]
 80132a6:	605a      	str	r2, [r3, #4]
 80132a8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80132aa:	2300      	movs	r3, #0
 80132ac:	613b      	str	r3, [r7, #16]
 80132ae:	f107 0314 	add.w	r3, r7, #20
 80132b2:	2200      	movs	r2, #0
 80132b4:	601a      	str	r2, [r3, #0]
 80132b6:	605a      	str	r2, [r3, #4]
 80132b8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80132ba:	2301      	movs	r3, #1
 80132bc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80132be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80132c2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	b2db      	uxtb	r3, r3
 80132c8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	0a1b      	lsrs	r3, r3, #8
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	0c1b      	lsrs	r3, r3, #16
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	0e1b      	lsrs	r3, r3, #24
 80132de:	b2db      	uxtb	r3, r3
 80132e0:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80132e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80132e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132ea:	0a1b      	lsrs	r3, r3, #8
 80132ec:	b2db      	uxtb	r3, r3
 80132ee:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80132f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132f2:	0c1b      	lsrs	r3, r3, #16
 80132f4:	b2db      	uxtb	r3, r3
 80132f6:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80132f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80132fa:	0e1b      	lsrs	r3, r3, #24
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8013300:	e048      	b.n	8013394 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8013302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013304:	b2db      	uxtb	r3, r3
 8013306:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013308:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801330a:	3301      	adds	r3, #1
 801330c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801330e:	f107 0320 	add.w	r3, r7, #32
 8013312:	7a7a      	ldrb	r2, [r7, #9]
 8013314:	f107 0010 	add.w	r0, r7, #16
 8013318:	2110      	movs	r1, #16
 801331a:	f7f8 fcee 	bl	800bcfa <SecureElementAesEncrypt>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d001      	beq.n	8013328 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013324:	230e      	movs	r3, #14
 8013326:	e03a      	b.n	801339e <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013328:	2300      	movs	r3, #0
 801332a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801332e:	e01e      	b.n	801336e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013330:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013334:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013338:	4413      	add	r3, r2
 801333a:	461a      	mov	r2, r3
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	4413      	add	r3, r2
 8013340:	7819      	ldrb	r1, [r3, #0]
 8013342:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013346:	3338      	adds	r3, #56	; 0x38
 8013348:	443b      	add	r3, r7
 801334a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801334e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8013352:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013356:	4403      	add	r3, r0
 8013358:	4618      	mov	r0, r3
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	4403      	add	r3, r0
 801335e:	404a      	eors	r2, r1
 8013360:	b2d2      	uxtb	r2, r2
 8013362:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013364:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013368:	3301      	adds	r3, #1
 801336a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801336e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013372:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013376:	2a10      	cmp	r2, #16
 8013378:	bfa8      	it	ge
 801337a:	2210      	movge	r2, #16
 801337c:	b212      	sxth	r2, r2
 801337e:	4293      	cmp	r3, r2
 8013380:	dbd6      	blt.n	8013330 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 8013382:	897b      	ldrh	r3, [r7, #10]
 8013384:	3b10      	subs	r3, #16
 8013386:	b29b      	uxth	r3, r3
 8013388:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801338a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801338e:	3310      	adds	r3, #16
 8013390:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 8013394:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013398:	2b00      	cmp	r3, #0
 801339a:	dcb2      	bgt.n	8013302 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801339c:	2300      	movs	r3, #0
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3738      	adds	r7, #56	; 0x38
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80133a6:	b490      	push	{r4, r7}
 80133a8:	b082      	sub	sp, #8
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	4604      	mov	r4, r0
 80133ae:	4608      	mov	r0, r1
 80133b0:	4611      	mov	r1, r2
 80133b2:	461a      	mov	r2, r3
 80133b4:	4623      	mov	r3, r4
 80133b6:	80fb      	strh	r3, [r7, #6]
 80133b8:	4603      	mov	r3, r0
 80133ba:	717b      	strb	r3, [r7, #5]
 80133bc:	460b      	mov	r3, r1
 80133be:	713b      	strb	r3, [r7, #4]
 80133c0:	4613      	mov	r3, r2
 80133c2:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80133c4:	69bb      	ldr	r3, [r7, #24]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d101      	bne.n	80133ce <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80133ca:	2309      	movs	r3, #9
 80133cc:	e04e      	b.n	801346c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	2249      	movs	r2, #73	; 0x49
 80133d2:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	3301      	adds	r3, #1
 80133d8:	2200      	movs	r2, #0
 80133da:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80133dc:	69bb      	ldr	r3, [r7, #24]
 80133de:	3302      	adds	r3, #2
 80133e0:	2200      	movs	r2, #0
 80133e2:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	3303      	adds	r3, #3
 80133e8:	2200      	movs	r2, #0
 80133ea:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	3304      	adds	r3, #4
 80133f0:	2200      	movs	r2, #0
 80133f2:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	3305      	adds	r3, #5
 80133f8:	78fa      	ldrb	r2, [r7, #3]
 80133fa:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80133fc:	69bb      	ldr	r3, [r7, #24]
 80133fe:	3306      	adds	r3, #6
 8013400:	693a      	ldr	r2, [r7, #16]
 8013402:	b2d2      	uxtb	r2, r2
 8013404:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	0a1a      	lsrs	r2, r3, #8
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	3307      	adds	r3, #7
 801340e:	b2d2      	uxtb	r2, r2
 8013410:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	0c1a      	lsrs	r2, r3, #16
 8013416:	69bb      	ldr	r3, [r7, #24]
 8013418:	3308      	adds	r3, #8
 801341a:	b2d2      	uxtb	r2, r2
 801341c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801341e:	693b      	ldr	r3, [r7, #16]
 8013420:	0e1a      	lsrs	r2, r3, #24
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	3309      	adds	r3, #9
 8013426:	b2d2      	uxtb	r2, r2
 8013428:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801342a:	69bb      	ldr	r3, [r7, #24]
 801342c:	330a      	adds	r3, #10
 801342e:	697a      	ldr	r2, [r7, #20]
 8013430:	b2d2      	uxtb	r2, r2
 8013432:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	0a1a      	lsrs	r2, r3, #8
 8013438:	69bb      	ldr	r3, [r7, #24]
 801343a:	330b      	adds	r3, #11
 801343c:	b2d2      	uxtb	r2, r2
 801343e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	0c1a      	lsrs	r2, r3, #16
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	330c      	adds	r3, #12
 8013448:	b2d2      	uxtb	r2, r2
 801344a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	0e1a      	lsrs	r2, r3, #24
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	330d      	adds	r3, #13
 8013454:	b2d2      	uxtb	r2, r2
 8013456:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013458:	69bb      	ldr	r3, [r7, #24]
 801345a:	330e      	adds	r3, #14
 801345c:	2200      	movs	r2, #0
 801345e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	330f      	adds	r3, #15
 8013464:	88fa      	ldrh	r2, [r7, #6]
 8013466:	b2d2      	uxtb	r2, r2
 8013468:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801346a:	2300      	movs	r3, #0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3708      	adds	r7, #8
 8013470:	46bd      	mov	sp, r7
 8013472:	bc90      	pop	{r4, r7}
 8013474:	4770      	bx	lr

08013476 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013476:	b590      	push	{r4, r7, lr}
 8013478:	b08b      	sub	sp, #44	; 0x2c
 801347a:	af04      	add	r7, sp, #16
 801347c:	6078      	str	r0, [r7, #4]
 801347e:	4608      	mov	r0, r1
 8013480:	4611      	mov	r1, r2
 8013482:	461a      	mov	r2, r3
 8013484:	4603      	mov	r3, r0
 8013486:	807b      	strh	r3, [r7, #2]
 8013488:	460b      	mov	r3, r1
 801348a:	707b      	strb	r3, [r7, #1]
 801348c:	4613      	mov	r3, r2
 801348e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d002      	beq.n	801349c <ComputeCmacB0+0x26>
 8013496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013498:	2b00      	cmp	r3, #0
 801349a:	d101      	bne.n	80134a0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801349c:	2309      	movs	r3, #9
 801349e:	e024      	b.n	80134ea <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80134a0:	887b      	ldrh	r3, [r7, #2]
 80134a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134a6:	d901      	bls.n	80134ac <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80134a8:	230d      	movs	r3, #13
 80134aa:	e01e      	b.n	80134ea <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80134ac:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80134b0:	783a      	ldrb	r2, [r7, #0]
 80134b2:	7879      	ldrb	r1, [r7, #1]
 80134b4:	8878      	ldrh	r0, [r7, #2]
 80134b6:	f107 0308 	add.w	r3, r7, #8
 80134ba:	9302      	str	r3, [sp, #8]
 80134bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134be:	9301      	str	r3, [sp, #4]
 80134c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c2:	9300      	str	r3, [sp, #0]
 80134c4:	4623      	mov	r3, r4
 80134c6:	f7ff ff6e 	bl	80133a6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80134ca:	7879      	ldrb	r1, [r7, #1]
 80134cc:	887a      	ldrh	r2, [r7, #2]
 80134ce:	f107 0008 	add.w	r0, r7, #8
 80134d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134d4:	9300      	str	r3, [sp, #0]
 80134d6:	460b      	mov	r3, r1
 80134d8:	6879      	ldr	r1, [r7, #4]
 80134da:	f7f8 fbc1 	bl	800bc60 <SecureElementComputeAesCmac>
 80134de:	4603      	mov	r3, r0
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80134e4:	230e      	movs	r3, #14
 80134e6:	e000      	b.n	80134ea <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80134e8:	2300      	movs	r3, #0
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	371c      	adds	r7, #28
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd90      	pop	{r4, r7, pc}

080134f2 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80134f2:	b590      	push	{r4, r7, lr}
 80134f4:	b0cd      	sub	sp, #308	; 0x134
 80134f6:	af04      	add	r7, sp, #16
 80134f8:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80134fc:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8013500:	6020      	str	r0, [r4, #0]
 8013502:	460c      	mov	r4, r1
 8013504:	4610      	mov	r0, r2
 8013506:	4619      	mov	r1, r3
 8013508:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801350c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013510:	4622      	mov	r2, r4
 8013512:	801a      	strh	r2, [r3, #0]
 8013514:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013518:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801351c:	4602      	mov	r2, r0
 801351e:	701a      	strb	r2, [r3, #0]
 8013520:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013524:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013528:	460a      	mov	r2, r1
 801352a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801352c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013530:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d101      	bne.n	801353e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801353a:	2309      	movs	r3, #9
 801353c:	e063      	b.n	8013606 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801353e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013542:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013546:	881b      	ldrh	r3, [r3, #0]
 8013548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801354c:	d901      	bls.n	8013552 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801354e:	230d      	movs	r3, #13
 8013550:	e059      	b.n	8013606 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8013552:	f107 030c 	add.w	r3, r7, #12
 8013556:	f44f 7288 	mov.w	r2, #272	; 0x110
 801355a:	2100      	movs	r1, #0
 801355c:	4618      	mov	r0, r3
 801355e:	f004 fe97 	bl	8018290 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8013562:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8013566:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801356a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801356e:	781a      	ldrb	r2, [r3, #0]
 8013570:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013574:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8013578:	7819      	ldrb	r1, [r3, #0]
 801357a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801357e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8013582:	8818      	ldrh	r0, [r3, #0]
 8013584:	f107 030c 	add.w	r3, r7, #12
 8013588:	9302      	str	r3, [sp, #8]
 801358a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801358e:	9301      	str	r3, [sp, #4]
 8013590:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8013594:	9300      	str	r3, [sp, #0]
 8013596:	4623      	mov	r3, r4
 8013598:	f7ff ff05 	bl	80133a6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801359c:	f107 030c 	add.w	r3, r7, #12
 80135a0:	3310      	adds	r3, #16
 80135a2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80135a6:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80135aa:	8812      	ldrh	r2, [r2, #0]
 80135ac:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80135b0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80135b4:	6809      	ldr	r1, [r1, #0]
 80135b6:	4618      	mov	r0, r3
 80135b8:	f004 fe2f 	bl	801821a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80135bc:	2306      	movs	r3, #6
 80135be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80135c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135c6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80135ca:	881b      	ldrh	r3, [r3, #0]
 80135cc:	3310      	adds	r3, #16
 80135ce:	b299      	uxth	r1, r3
 80135d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80135d4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	f107 000c 	add.w	r0, r7, #12
 80135de:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80135e2:	f7f8 fb5b 	bl	800bc9c <SecureElementVerifyAesCmac>
 80135e6:	4603      	mov	r3, r0
 80135e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80135ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d101      	bne.n	80135f8 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80135f4:	2300      	movs	r3, #0
 80135f6:	e006      	b.n	8013606 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80135f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d101      	bne.n	8013604 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8013600:	2301      	movs	r3, #1
 8013602:	e000      	b.n	8013606 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013604:	230e      	movs	r3, #14
}
 8013606:	4618      	mov	r0, r3
 8013608:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801360c:	46bd      	mov	sp, r7
 801360e:	bd90      	pop	{r4, r7, pc}

08013610 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8013610:	b480      	push	{r7}
 8013612:	b085      	sub	sp, #20
 8013614:	af00      	add	r7, sp, #0
 8013616:	4603      	mov	r3, r0
 8013618:	6039      	str	r1, [r7, #0]
 801361a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801361c:	2300      	movs	r3, #0
 801361e:	73fb      	strb	r3, [r7, #15]
 8013620:	e011      	b.n	8013646 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8013622:	7bfb      	ldrb	r3, [r7, #15]
 8013624:	4a0c      	ldr	r2, [pc, #48]	; (8013658 <GetKeyAddrItem+0x48>)
 8013626:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801362a:	79fa      	ldrb	r2, [r7, #7]
 801362c:	429a      	cmp	r2, r3
 801362e:	d107      	bne.n	8013640 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8013630:	7bfb      	ldrb	r3, [r7, #15]
 8013632:	009b      	lsls	r3, r3, #2
 8013634:	4a08      	ldr	r2, [pc, #32]	; (8013658 <GetKeyAddrItem+0x48>)
 8013636:	441a      	add	r2, r3
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801363c:	2300      	movs	r3, #0
 801363e:	e006      	b.n	801364e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013640:	7bfb      	ldrb	r3, [r7, #15]
 8013642:	3301      	adds	r3, #1
 8013644:	73fb      	strb	r3, [r7, #15]
 8013646:	7bfb      	ldrb	r3, [r7, #15]
 8013648:	2b01      	cmp	r3, #1
 801364a:	d9ea      	bls.n	8013622 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801364c:	230b      	movs	r3, #11
}
 801364e:	4618      	mov	r0, r3
 8013650:	3714      	adds	r7, #20
 8013652:	46bd      	mov	sp, r7
 8013654:	bc80      	pop	{r7}
 8013656:	4770      	bx	lr
 8013658:	20000120 	.word	0x20000120

0801365c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b088      	sub	sp, #32
 8013660:	af00      	add	r7, sp, #0
 8013662:	60b9      	str	r1, [r7, #8]
 8013664:	607a      	str	r2, [r7, #4]
 8013666:	461a      	mov	r2, r3
 8013668:	4603      	mov	r3, r0
 801366a:	73fb      	strb	r3, [r7, #15]
 801366c:	4613      	mov	r3, r2
 801366e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8013670:	2300      	movs	r3, #0
 8013672:	613b      	str	r3, [r7, #16]
 8013674:	f107 0314 	add.w	r3, r7, #20
 8013678:	2200      	movs	r2, #0
 801367a:	601a      	str	r2, [r3, #0]
 801367c:	605a      	str	r2, [r3, #4]
 801367e:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 8013680:	7bfb      	ldrb	r3, [r7, #15]
 8013682:	2b02      	cmp	r3, #2
 8013684:	d002      	beq.n	801368c <DeriveSessionKey10x+0x30>
 8013686:	2b03      	cmp	r3, #3
 8013688:	d003      	beq.n	8013692 <DeriveSessionKey10x+0x36>
 801368a:	e005      	b.n	8013698 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 801368c:	2301      	movs	r3, #1
 801368e:	743b      	strb	r3, [r7, #16]
            break;
 8013690:	e004      	b.n	801369c <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8013692:	2302      	movs	r3, #2
 8013694:	743b      	strb	r3, [r7, #16]
            break;
 8013696:	e001      	b.n	801369c <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013698:	230a      	movs	r3, #10
 801369a:	e02a      	b.n	80136f2 <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	b2db      	uxtb	r3, r3
 80136a0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	0a1b      	lsrs	r3, r3, #8
 80136a6:	b2db      	uxtb	r3, r3
 80136a8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80136aa:	68bb      	ldr	r3, [r7, #8]
 80136ac:	0c1b      	lsrs	r3, r3, #16
 80136ae:	b2db      	uxtb	r3, r3
 80136b0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	b2db      	uxtb	r3, r3
 80136b6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	0a1b      	lsrs	r3, r3, #8
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	0c1b      	lsrs	r3, r3, #16
 80136c4:	b2db      	uxtb	r3, r3
 80136c6:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80136c8:	89bb      	ldrh	r3, [r7, #12]
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80136ce:	89bb      	ldrh	r3, [r7, #12]
 80136d0:	0a1b      	lsrs	r3, r3, #8
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80136d8:	7bfa      	ldrb	r2, [r7, #15]
 80136da:	f107 0310 	add.w	r3, r7, #16
 80136de:	2101      	movs	r1, #1
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7f8 fb71 	bl	800bdc8 <SecureElementDeriveAndStoreKey>
 80136e6:	4603      	mov	r3, r0
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d001      	beq.n	80136f0 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80136ec:	230e      	movs	r3, #14
 80136ee:	e000      	b.n	80136f2 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80136f0:	2300      	movs	r3, #0
}
 80136f2:	4618      	mov	r0, r3
 80136f4:	3720      	adds	r7, #32
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
	...

080136fc <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80136fc:	b480      	push	{r7}
 80136fe:	b083      	sub	sp, #12
 8013700:	af00      	add	r7, sp, #0
 8013702:	4603      	mov	r3, r0
 8013704:	6039      	str	r1, [r7, #0]
 8013706:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d101      	bne.n	8013712 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801370e:	2309      	movs	r3, #9
 8013710:	e03b      	b.n	801378a <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 8013712:	79fb      	ldrb	r3, [r7, #7]
 8013714:	3b01      	subs	r3, #1
 8013716:	2b03      	cmp	r3, #3
 8013718:	d834      	bhi.n	8013784 <GetLastFcntDown+0x88>
 801371a:	a201      	add	r2, pc, #4	; (adr r2, 8013720 <GetLastFcntDown+0x24>)
 801371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013720:	08013731 	.word	0x08013731
 8013724:	08013749 	.word	0x08013749
 8013728:	08013761 	.word	0x08013761
 801372c:	08013779 	.word	0x08013779
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8013730:	4b18      	ldr	r3, [pc, #96]	; (8013794 <GetLastFcntDown+0x98>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	691a      	ldr	r2, [r3, #16]
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 801373a:	4b16      	ldr	r3, [pc, #88]	; (8013794 <GetLastFcntDown+0x98>)
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	4b15      	ldr	r3, [pc, #84]	; (8013794 <GetLastFcntDown+0x98>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	6912      	ldr	r2, [r2, #16]
 8013744:	621a      	str	r2, [r3, #32]
            break;
 8013746:	e01f      	b.n	8013788 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013748:	4b12      	ldr	r3, [pc, #72]	; (8013794 <GetLastFcntDown+0x98>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	695a      	ldr	r2, [r3, #20]
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8013752:	4b10      	ldr	r3, [pc, #64]	; (8013794 <GetLastFcntDown+0x98>)
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	4b0f      	ldr	r3, [pc, #60]	; (8013794 <GetLastFcntDown+0x98>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	6952      	ldr	r2, [r2, #20]
 801375c:	621a      	str	r2, [r3, #32]
            break;
 801375e:	e013      	b.n	8013788 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8013760:	4b0c      	ldr	r3, [pc, #48]	; (8013794 <GetLastFcntDown+0x98>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	699a      	ldr	r2, [r3, #24]
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801376a:	4b0a      	ldr	r3, [pc, #40]	; (8013794 <GetLastFcntDown+0x98>)
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	4b09      	ldr	r3, [pc, #36]	; (8013794 <GetLastFcntDown+0x98>)
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	6992      	ldr	r2, [r2, #24]
 8013774:	621a      	str	r2, [r3, #32]
            break;
 8013776:	e007      	b.n	8013788 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013778:	4b06      	ldr	r3, [pc, #24]	; (8013794 <GetLastFcntDown+0x98>)
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	69da      	ldr	r2, [r3, #28]
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	601a      	str	r2, [r3, #0]
            break;
 8013782:	e001      	b.n	8013788 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013784:	2305      	movs	r3, #5
 8013786:	e000      	b.n	801378a <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	370c      	adds	r7, #12
 801378e:	46bd      	mov	sp, r7
 8013790:	bc80      	pop	{r7}
 8013792:	4770      	bx	lr
 8013794:	20001980 	.word	0x20001980

08013798 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	4603      	mov	r3, r0
 80137a0:	6039      	str	r1, [r7, #0]
 80137a2:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80137a4:	2300      	movs	r3, #0
 80137a6:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80137a8:	f107 020c 	add.w	r2, r7, #12
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	4611      	mov	r1, r2
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7ff ffa3 	bl	80136fc <GetLastFcntDown>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d001      	beq.n	80137c0 <CheckFCntDown+0x28>
    {
        return false;
 80137bc:	2300      	movs	r3, #0
 80137be:	e00a      	b.n	80137d6 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	683a      	ldr	r2, [r7, #0]
 80137c4:	429a      	cmp	r2, r3
 80137c6:	d803      	bhi.n	80137d0 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80137c8:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80137ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137ce:	d101      	bne.n	80137d4 <CheckFCntDown+0x3c>
    {
        return true;
 80137d0:	2301      	movs	r3, #1
 80137d2:	e000      	b.n	80137d6 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80137d4:	2300      	movs	r3, #0
    }
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
	...

080137e0 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80137e0:	b480      	push	{r7}
 80137e2:	b083      	sub	sp, #12
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	4603      	mov	r3, r0
 80137e8:	6039      	str	r1, [r7, #0]
 80137ea:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80137ec:	79fb      	ldrb	r3, [r7, #7]
 80137ee:	3b01      	subs	r3, #1
 80137f0:	2b03      	cmp	r3, #3
 80137f2:	d81f      	bhi.n	8013834 <UpdateFCntDown+0x54>
 80137f4:	a201      	add	r2, pc, #4	; (adr r2, 80137fc <UpdateFCntDown+0x1c>)
 80137f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137fa:	bf00      	nop
 80137fc:	0801380d 	.word	0x0801380d
 8013800:	08013817 	.word	0x08013817
 8013804:	08013821 	.word	0x08013821
 8013808:	0801382b 	.word	0x0801382b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 801380c:	4b0c      	ldr	r3, [pc, #48]	; (8013840 <UpdateFCntDown+0x60>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	683a      	ldr	r2, [r7, #0]
 8013812:	611a      	str	r2, [r3, #16]
            break;
 8013814:	e00f      	b.n	8013836 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013816:	4b0a      	ldr	r3, [pc, #40]	; (8013840 <UpdateFCntDown+0x60>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	683a      	ldr	r2, [r7, #0]
 801381c:	615a      	str	r2, [r3, #20]
            break;
 801381e:	e00a      	b.n	8013836 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8013820:	4b07      	ldr	r3, [pc, #28]	; (8013840 <UpdateFCntDown+0x60>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	683a      	ldr	r2, [r7, #0]
 8013826:	619a      	str	r2, [r3, #24]
            break;
 8013828:	e005      	b.n	8013836 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801382a:	4b05      	ldr	r3, [pc, #20]	; (8013840 <UpdateFCntDown+0x60>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	683a      	ldr	r2, [r7, #0]
 8013830:	61da      	str	r2, [r3, #28]
            break;
 8013832:	e000      	b.n	8013836 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013834:	bf00      	nop
    }
}
 8013836:	bf00      	nop
 8013838:	370c      	adds	r7, #12
 801383a:	46bd      	mov	sp, r7
 801383c:	bc80      	pop	{r7}
 801383e:	4770      	bx	lr
 8013840:	20001980 	.word	0x20001980

08013844 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801384a:	4b18      	ldr	r3, [pc, #96]	; (80138ac <ResetFCnts+0x68>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	2200      	movs	r2, #0
 8013850:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013852:	4b16      	ldr	r3, [pc, #88]	; (80138ac <ResetFCnts+0x68>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	f04f 32ff 	mov.w	r2, #4294967295
 801385a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801385c:	4b13      	ldr	r3, [pc, #76]	; (80138ac <ResetFCnts+0x68>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	f04f 32ff 	mov.w	r2, #4294967295
 8013864:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013866:	4b11      	ldr	r3, [pc, #68]	; (80138ac <ResetFCnts+0x68>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f04f 32ff 	mov.w	r2, #4294967295
 801386e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013870:	4b0e      	ldr	r3, [pc, #56]	; (80138ac <ResetFCnts+0x68>)
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	4b0d      	ldr	r3, [pc, #52]	; (80138ac <ResetFCnts+0x68>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	6992      	ldr	r2, [r2, #24]
 801387a:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801387c:	2300      	movs	r3, #0
 801387e:	607b      	str	r3, [r7, #4]
 8013880:	e00b      	b.n	801389a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8013882:	4b0a      	ldr	r3, [pc, #40]	; (80138ac <ResetFCnts+0x68>)
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	3306      	adds	r3, #6
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	4413      	add	r3, r2
 801388e:	f04f 32ff 	mov.w	r2, #4294967295
 8013892:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	3301      	adds	r3, #1
 8013898:	607b      	str	r3, [r7, #4]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2b00      	cmp	r3, #0
 801389e:	ddf0      	ble.n	8013882 <ResetFCnts+0x3e>
    }
}
 80138a0:	bf00      	nop
 80138a2:	bf00      	nop
 80138a4:	370c      	adds	r7, #12
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bc80      	pop	{r7}
 80138aa:	4770      	bx	lr
 80138ac:	20001980 	.word	0x20001980

080138b0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b082      	sub	sp, #8
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d101      	bne.n	80138c2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80138be:	2308      	movs	r3, #8
 80138c0:	e01c      	b.n	80138fc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80138c2:	4a10      	ldr	r2, [pc, #64]	; (8013904 <LoRaMacCryptoInit+0x54>)
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80138c8:	4b0e      	ldr	r3, [pc, #56]	; (8013904 <LoRaMacCryptoInit+0x54>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2228      	movs	r2, #40	; 0x28
 80138ce:	2100      	movs	r1, #0
 80138d0:	4618      	mov	r0, r3
 80138d2:	f004 fcdd 	bl	8018290 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80138d6:	4b0b      	ldr	r3, [pc, #44]	; (8013904 <LoRaMacCryptoInit+0x54>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	2201      	movs	r2, #1
 80138dc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80138de:	4b09      	ldr	r3, [pc, #36]	; (8013904 <LoRaMacCryptoInit+0x54>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2201      	movs	r2, #1
 80138e4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80138e6:	4b07      	ldr	r3, [pc, #28]	; (8013904 <LoRaMacCryptoInit+0x54>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2201      	movs	r2, #1
 80138ec:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80138ee:	4b05      	ldr	r3, [pc, #20]	; (8013904 <LoRaMacCryptoInit+0x54>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	2200      	movs	r2, #0
 80138f4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80138f6:	f7ff ffa5 	bl	8013844 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80138fa:	2300      	movs	r3, #0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}
 8013904:	20001980 	.word	0x20001980

08013908 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013908:	b480      	push	{r7}
 801390a:	b083      	sub	sp, #12
 801390c:	af00      	add	r7, sp, #0
 801390e:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8013910:	4b04      	ldr	r3, [pc, #16]	; (8013924 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	370c      	adds	r7, #12
 801391e:	46bd      	mov	sp, r7
 8013920:	bc80      	pop	{r7}
 8013922:	4770      	bx	lr
 8013924:	20001980 	.word	0x20001980

08013928 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013928:	b480      	push	{r7}
 801392a:	b083      	sub	sp, #12
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d101      	bne.n	801393a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013936:	2309      	movs	r3, #9
 8013938:	e006      	b.n	8013948 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801393a:	4b06      	ldr	r3, [pc, #24]	; (8013954 <LoRaMacCryptoGetFCntUp+0x2c>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	68db      	ldr	r3, [r3, #12]
 8013940:	1c5a      	adds	r2, r3, #1
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013946:	2300      	movs	r3, #0
}
 8013948:	4618      	mov	r0, r3
 801394a:	370c      	adds	r7, #12
 801394c:	46bd      	mov	sp, r7
 801394e:	bc80      	pop	{r7}
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	20001980 	.word	0x20001980

08013958 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013958:	b580      	push	{r7, lr}
 801395a:	b088      	sub	sp, #32
 801395c:	af00      	add	r7, sp, #0
 801395e:	4603      	mov	r3, r0
 8013960:	60b9      	str	r1, [r7, #8]
 8013962:	607a      	str	r2, [r7, #4]
 8013964:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013966:	2300      	movs	r3, #0
 8013968:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801396e:	2312      	movs	r3, #18
 8013970:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d101      	bne.n	801397c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013978:	2309      	movs	r3, #9
 801397a:	e035      	b.n	80139e8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801397c:	f107 0214 	add.w	r2, r7, #20
 8013980:	7bfb      	ldrb	r3, [r7, #15]
 8013982:	4611      	mov	r1, r2
 8013984:	4618      	mov	r0, r3
 8013986:	f7ff feb9 	bl	80136fc <GetLastFcntDown>
 801398a:	4603      	mov	r3, r0
 801398c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801398e:	7efb      	ldrb	r3, [r7, #27]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d001      	beq.n	8013998 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013994:	7efb      	ldrb	r3, [r7, #27]
 8013996:	e027      	b.n	80139e8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801399e:	d103      	bne.n	80139a8 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	68ba      	ldr	r2, [r7, #8]
 80139a4:	601a      	str	r2, [r3, #0]
 80139a6:	e01e      	b.n	80139e6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80139a8:	697b      	ldr	r3, [r7, #20]
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	68ba      	ldr	r2, [r7, #8]
 80139ae:	1ad3      	subs	r3, r2, r3
 80139b0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	dd05      	ble.n	80139c4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80139b8:	697a      	ldr	r2, [r7, #20]
 80139ba:	69fb      	ldr	r3, [r7, #28]
 80139bc:	441a      	add	r2, r3
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	601a      	str	r2, [r3, #0]
 80139c2:	e010      	b.n	80139e6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80139c4:	69fb      	ldr	r3, [r7, #28]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d104      	bne.n	80139d4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80139ca:	697a      	ldr	r2, [r7, #20]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80139d0:	2307      	movs	r3, #7
 80139d2:	e009      	b.n	80139e8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	0c1b      	lsrs	r3, r3, #16
 80139d8:	041b      	lsls	r3, r3, #16
 80139da:	68ba      	ldr	r2, [r7, #8]
 80139dc:	4413      	add	r3, r2
 80139de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80139e6:	2300      	movs	r3, #0
}
 80139e8:	4618      	mov	r0, r3
 80139ea:	3720      	adds	r7, #32
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}

080139f0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80139f0:	b480      	push	{r7}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d101      	bne.n	8013a02 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139fe:	2309      	movs	r3, #9
 8013a00:	e017      	b.n	8013a32 <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013a02:	2300      	movs	r3, #0
 8013a04:	60fb      	str	r3, [r7, #12]
 8013a06:	e010      	b.n	8013a2a <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013a08:	4b0c      	ldr	r3, [pc, #48]	; (8013a3c <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013a0a:	6819      	ldr	r1, [r3, #0]
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	222c      	movs	r2, #44	; 0x2c
 8013a10:	fb02 f303 	mul.w	r3, r2, r3
 8013a14:	687a      	ldr	r2, [r7, #4]
 8013a16:	4413      	add	r3, r2
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	3206      	adds	r2, #6
 8013a1c:	0092      	lsls	r2, r2, #2
 8013a1e:	440a      	add	r2, r1
 8013a20:	3204      	adds	r2, #4
 8013a22:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	3301      	adds	r3, #1
 8013a28:	60fb      	str	r3, [r7, #12]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	ddeb      	ble.n	8013a08 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a30:	2300      	movs	r3, #0
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3714      	adds	r7, #20
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bc80      	pop	{r7}
 8013a3a:	4770      	bx	lr
 8013a3c:	20001980 	.word	0x20001980

08013a40 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	4603      	mov	r3, r0
 8013a48:	6039      	str	r1, [r7, #0]
 8013a4a:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013a4c:	79fb      	ldrb	r3, [r7, #7]
 8013a4e:	6839      	ldr	r1, [r7, #0]
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7f8 f8a7 	bl	800bba4 <SecureElementSetKey>
 8013a56:	4603      	mov	r3, r0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d001      	beq.n	8013a60 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a5c:	230e      	movs	r3, #14
 8013a5e:	e018      	b.n	8013a92 <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8013a60:	79fb      	ldrb	r3, [r7, #7]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d114      	bne.n	8013a90 <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013a66:	4b0d      	ldr	r3, [pc, #52]	; (8013a9c <LoRaMacCryptoSetKey+0x5c>)
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	789b      	ldrb	r3, [r3, #2]
 8013a6c:	79fa      	ldrb	r2, [r7, #7]
 8013a6e:	4611      	mov	r1, r2
 8013a70:	4618      	mov	r0, r3
 8013a72:	f000 fa39 	bl	8013ee8 <LoRaMacCryptoDeriveMcRootKey>
 8013a76:	4603      	mov	r3, r0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d001      	beq.n	8013a80 <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a7c:	230e      	movs	r3, #14
 8013a7e:	e008      	b.n	8013a92 <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8013a80:	2004      	movs	r0, #4
 8013a82:	f000 fa5c 	bl	8013f3e <LoRaMacCryptoDeriveMcKEKey>
 8013a86:	4603      	mov	r3, r0
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d001      	beq.n	8013a90 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a8c:	230e      	movs	r3, #14
 8013a8e:	e000      	b.n	8013a92 <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013a90:	2300      	movs	r3, #0
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3708      	adds	r7, #8
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	20001980 	.word	0x20001980

08013aa0 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b086      	sub	sp, #24
 8013aa4:	af02      	add	r7, sp, #8
 8013aa6:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d101      	bne.n	8013ab2 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013aae:	2309      	movs	r3, #9
 8013ab0:	e02d      	b.n	8013b0e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8013ab6:	4b18      	ldr	r3, [pc, #96]	; (8013b18 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	889a      	ldrh	r2, [r3, #4]
 8013abc:	3201      	adds	r2, #1
 8013abe:	b292      	uxth	r2, r2
 8013ac0:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8013ac2:	4b15      	ldr	r3, [pc, #84]	; (8013b18 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	889a      	ldrh	r2, [r3, #4]
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f000 fc18 	bl	8014302 <LoRaMacSerializerJoinRequest>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d001      	beq.n	8013adc <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013ad8:	2310      	movs	r3, #16
 8013ada:	e018      	b.n	8013b0e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	6819      	ldr	r1, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	3318      	adds	r3, #24
 8013ae4:	7bfa      	ldrb	r2, [r7, #15]
 8013ae6:	9300      	str	r3, [sp, #0]
 8013ae8:	4613      	mov	r3, r2
 8013aea:	2213      	movs	r2, #19
 8013aec:	2000      	movs	r0, #0
 8013aee:	f7f8 f8b7 	bl	800bc60 <SecureElementComputeAesCmac>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d001      	beq.n	8013afc <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013af8:	230e      	movs	r3, #14
 8013afa:	e008      	b.n	8013b0e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f000 fc00 	bl	8014302 <LoRaMacSerializerJoinRequest>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d001      	beq.n	8013b0c <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013b08:	2310      	movs	r3, #16
 8013b0a:	e000      	b.n	8013b0e <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013b0c:	2300      	movs	r3, #0
}
 8013b0e:	4618      	mov	r0, r3
 8013b10:	3710      	adds	r7, #16
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	20001980 	.word	0x20001980

08013b1c <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013b1c:	b590      	push	{r4, r7, lr}
 8013b1e:	b097      	sub	sp, #92	; 0x5c
 8013b20:	af04      	add	r7, sp, #16
 8013b22:	4603      	mov	r3, r0
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	607a      	str	r2, [r7, #4]
 8013b28:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d002      	beq.n	8013b36 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013b30:	68bb      	ldr	r3, [r7, #8]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d101      	bne.n	8013b3a <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013b36:	2309      	movs	r3, #9
 8013b38:	e0bd      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013b3a:	2312      	movs	r3, #18
 8013b3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013b40:	2300      	movs	r3, #0
 8013b42:	61bb      	str	r3, [r7, #24]
 8013b44:	f107 031c 	add.w	r3, r7, #28
 8013b48:	221d      	movs	r2, #29
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f009 f955 	bl	801cdfc <memset>
    uint8_t versionMinor         = 0;
 8013b52:	2300      	movs	r3, #0
 8013b54:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013b56:	4b5a      	ldr	r3, [pc, #360]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	889b      	ldrh	r3, [r3, #4]
 8013b5c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681c      	ldr	r4, [r3, #0]
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	791b      	ldrb	r3, [r3, #4]
 8013b68:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8013b6c:	7bf8      	ldrb	r0, [r7, #15]
 8013b6e:	f107 0217 	add.w	r2, r7, #23
 8013b72:	9202      	str	r2, [sp, #8]
 8013b74:	f107 0218 	add.w	r2, r7, #24
 8013b78:	9201      	str	r2, [sp, #4]
 8013b7a:	9300      	str	r3, [sp, #0]
 8013b7c:	4623      	mov	r3, r4
 8013b7e:	460a      	mov	r2, r1
 8013b80:	68b9      	ldr	r1, [r7, #8]
 8013b82:	f7f8 f961 	bl	800be48 <SecureElementProcessJoinAccept>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013b8c:	230e      	movs	r3, #14
 8013b8e:	e092      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6818      	ldr	r0, [r3, #0]
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	791b      	ldrb	r3, [r3, #4]
 8013b98:	b29a      	uxth	r2, r3
 8013b9a:	f107 0318 	add.w	r3, r7, #24
 8013b9e:	4619      	mov	r1, r3
 8013ba0:	f004 fb3b 	bl	801821a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f9ed 	bl	8013f84 <LoRaMacParserJoinAccept>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d001      	beq.n	8013bb4 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013bb0:	230f      	movs	r3, #15
 8013bb2:	e080      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	799b      	ldrb	r3, [r3, #6]
 8013bb8:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	79db      	ldrb	r3, [r3, #7]
 8013bbe:	021b      	lsls	r3, r3, #8
 8013bc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013bc2:	4313      	orrs	r3, r2
 8013bc4:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	7a1b      	ldrb	r3, [r3, #8]
 8013bca:	041b      	lsls	r3, r3, #16
 8013bcc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013bd2:	4b3b      	ldr	r3, [pc, #236]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	689b      	ldr	r3, [r3, #8]
 8013bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d010      	beq.n	8013c00 <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013bde:	4b38      	ldr	r3, [pc, #224]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013be4:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013be6:	7dfb      	ldrb	r3, [r7, #23]
 8013be8:	2100      	movs	r1, #0
 8013bea:	4618      	mov	r0, r3
 8013bec:	f000 f97c 	bl	8013ee8 <LoRaMacCryptoDeriveMcRootKey>
 8013bf0:	4603      	mov	r3, r0
 8013bf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013bf6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d005      	beq.n	8013c0a <LoRaMacCryptoHandleJoinAccept+0xee>
 8013bfe:	e001      	b.n	8013c04 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013c00:	2303      	movs	r3, #3
 8013c02:	e058      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013c04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c08:	e055      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013c0a:	2004      	movs	r0, #4
 8013c0c:	f000 f997 	bl	8013f3e <LoRaMacCryptoDeriveMcKEKey>
 8013c10:	4603      	mov	r3, r0
 8013c12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d002      	beq.n	8013c24 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013c1e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c22:	e048      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	7a5b      	ldrb	r3, [r3, #9]
 8013c28:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	7a9b      	ldrb	r3, [r3, #10]
 8013c2e:	021b      	lsls	r3, r3, #8
 8013c30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c32:	4313      	orrs	r3, r2
 8013c34:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	7adb      	ldrb	r3, [r3, #11]
 8013c3a:	041b      	lsls	r3, r3, #16
 8013c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c3e:	4313      	orrs	r3, r2
 8013c40:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013c42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013c46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c4a:	2003      	movs	r0, #3
 8013c4c:	f7ff fd06 	bl	801365c <DeriveSessionKey10x>
 8013c50:	4603      	mov	r3, r0
 8013c52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d002      	beq.n	8013c64 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013c5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c62:	e028      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013c64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c6c:	2002      	movs	r0, #2
 8013c6e:	f7ff fcf5 	bl	801365c <DeriveSessionKey10x>
 8013c72:	4603      	mov	r3, r0
 8013c74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d002      	beq.n	8013c86 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013c80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8013c84:	e017      	b.n	8013cb6 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013c86:	4b0e      	ldr	r3, [pc, #56]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	7dfa      	ldrb	r2, [r7, #23]
 8013c8c:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013c8e:	4b0c      	ldr	r3, [pc, #48]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	2200      	movs	r2, #0
 8013c94:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013c96:	4b0a      	ldr	r3, [pc, #40]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c9e:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013ca0:	4b07      	ldr	r3, [pc, #28]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8013ca8:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013caa:	4b05      	ldr	r3, [pc, #20]	; (8013cc0 <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb2:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013cb4:	2300      	movs	r3, #0
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	374c      	adds	r7, #76	; 0x4c
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd90      	pop	{r4, r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	20001980 	.word	0x20001980

08013cc4 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013cc4:	b590      	push	{r4, r7, lr}
 8013cc6:	b08b      	sub	sp, #44	; 0x2c
 8013cc8:	af04      	add	r7, sp, #16
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	607b      	str	r3, [r7, #4]
 8013cce:	460b      	mov	r3, r1
 8013cd0:	72fb      	strb	r3, [r7, #11]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013cd6:	2312      	movs	r3, #18
 8013cd8:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013cda:	2303      	movs	r3, #3
 8013cdc:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d101      	bne.n	8013ce8 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ce4:	2309      	movs	r3, #9
 8013ce6:	e05f      	b.n	8013da8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013ce8:	4b31      	ldr	r3, [pc, #196]	; (8013db0 <LoRaMacCryptoSecureMessage+0xec>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	68db      	ldr	r3, [r3, #12]
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	429a      	cmp	r2, r3
 8013cf2:	d201      	bcs.n	8013cf8 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013cf4:	2306      	movs	r3, #6
 8013cf6:	e057      	b.n	8013da8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013d02:	2302      	movs	r3, #2
 8013d04:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013d06:	4b2a      	ldr	r3, [pc, #168]	; (8013db0 <LoRaMacCryptoSecureMessage+0xec>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	68db      	ldr	r3, [r3, #12]
 8013d0c:	68fa      	ldr	r2, [r7, #12]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d916      	bls.n	8013d40 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d1c:	b219      	sxth	r1, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	689c      	ldr	r4, [r3, #8]
 8013d22:	7dfa      	ldrb	r2, [r7, #23]
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	9301      	str	r3, [sp, #4]
 8013d28:	2300      	movs	r3, #0
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	4623      	mov	r3, r4
 8013d2e:	f7ff faa1 	bl	8013274 <PayloadEncrypt>
 8013d32:	4603      	mov	r3, r0
 8013d34:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d36:	7dbb      	ldrb	r3, [r7, #22]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d001      	beq.n	8013d40 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013d3c:	7dbb      	ldrb	r3, [r7, #22]
 8013d3e:	e033      	b.n	8013da8 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f000 fb60 	bl	8014406 <LoRaMacSerializerData>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d001      	beq.n	8013d50 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013d4c:	2310      	movs	r3, #16
 8013d4e:	e02b      	b.n	8013da8 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013d50:	2302      	movs	r3, #2
 8013d52:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6818      	ldr	r0, [r3, #0]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	791b      	ldrb	r3, [r3, #4]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	3b04      	subs	r3, #4
 8013d60:	b299      	uxth	r1, r3
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	689b      	ldr	r3, [r3, #8]
 8013d66:	687a      	ldr	r2, [r7, #4]
 8013d68:	322c      	adds	r2, #44	; 0x2c
 8013d6a:	7dfc      	ldrb	r4, [r7, #23]
 8013d6c:	9203      	str	r2, [sp, #12]
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	9202      	str	r2, [sp, #8]
 8013d72:	9301      	str	r3, [sp, #4]
 8013d74:	2300      	movs	r3, #0
 8013d76:	9300      	str	r3, [sp, #0]
 8013d78:	2300      	movs	r3, #0
 8013d7a:	4622      	mov	r2, r4
 8013d7c:	f7ff fb7b 	bl	8013476 <ComputeCmacB0>
 8013d80:	4603      	mov	r3, r0
 8013d82:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d84:	7dbb      	ldrb	r3, [r7, #22]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d001      	beq.n	8013d8e <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8013d8a:	7dbb      	ldrb	r3, [r7, #22]
 8013d8c:	e00c      	b.n	8013da8 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f000 fb39 	bl	8014406 <LoRaMacSerializerData>
 8013d94:	4603      	mov	r3, r0
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d001      	beq.n	8013d9e <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013d9a:	2310      	movs	r3, #16
 8013d9c:	e004      	b.n	8013da8 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013d9e:	4b04      	ldr	r3, [pc, #16]	; (8013db0 <LoRaMacCryptoSecureMessage+0xec>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	68fa      	ldr	r2, [r7, #12]
 8013da4:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013da6:	2300      	movs	r3, #0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	371c      	adds	r7, #28
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd90      	pop	{r4, r7, pc}
 8013db0:	20001980 	.word	0x20001980

08013db4 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013db4:	b590      	push	{r4, r7, lr}
 8013db6:	b08b      	sub	sp, #44	; 0x2c
 8013db8:	af04      	add	r7, sp, #16
 8013dba:	60b9      	str	r1, [r7, #8]
 8013dbc:	607b      	str	r3, [r7, #4]
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	73fb      	strb	r3, [r7, #15]
 8013dc2:	4613      	mov	r3, r2
 8013dc4:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d101      	bne.n	8013dd0 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013dcc:	2309      	movs	r3, #9
 8013dce:	e084      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013dd0:	7bbb      	ldrb	r3, [r7, #14]
 8013dd2:	6879      	ldr	r1, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f7ff fcdf 	bl	8013798 <CheckFCntDown>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	f083 0301 	eor.w	r3, r3, #1
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d001      	beq.n	8013dea <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013de6:	2306      	movs	r3, #6
 8013de8:	e077      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013dea:	2312      	movs	r3, #18
 8013dec:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013dee:	2303      	movs	r3, #3
 8013df0:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013df2:	2302      	movs	r3, #2
 8013df4:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013df6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013df8:	f000 f98f 	bl	801411a <LoRaMacParserData>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d001      	beq.n	8013e06 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013e02:	230f      	movs	r3, #15
 8013e04:	e069      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013e06:	f107 0210 	add.w	r2, r7, #16
 8013e0a:	7bfb      	ldrb	r3, [r7, #15]
 8013e0c:	4611      	mov	r1, r2
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7ff fbfe 	bl	8013610 <GetKeyAddrItem>
 8013e14:	4603      	mov	r3, r0
 8013e16:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013e18:	7d7b      	ldrb	r3, [r7, #21]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d001      	beq.n	8013e22 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013e1e:	7d7b      	ldrb	r3, [r7, #21]
 8013e20:	e05b      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	785b      	ldrb	r3, [r3, #1]
 8013e26:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	789b      	ldrb	r3, [r3, #2]
 8013e2c:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e30:	689b      	ldr	r3, [r3, #8]
 8013e32:	68ba      	ldr	r2, [r7, #8]
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d001      	beq.n	8013e3c <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013e38:	2302      	movs	r3, #2
 8013e3a:	e04e      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	7b1b      	ldrb	r3, [r3, #12]
 8013e40:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013e44:	b2db      	uxtb	r3, r3
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	bf14      	ite	ne
 8013e4a:	2301      	movne	r3, #1
 8013e4c:	2300      	moveq	r3, #0
 8013e4e:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013e50:	4b24      	ldr	r3, [pc, #144]	; (8013ee4 <LoRaMacCryptoUnsecureMessage+0x130>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	789b      	ldrb	r3, [r3, #2]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d101      	bne.n	8013e5e <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e60:	6818      	ldr	r0, [r3, #0]
 8013e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e64:	791b      	ldrb	r3, [r3, #4]
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	3b04      	subs	r3, #4
 8013e6a:	b299      	uxth	r1, r3
 8013e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e70:	7dbc      	ldrb	r4, [r7, #22]
 8013e72:	7d3a      	ldrb	r2, [r7, #20]
 8013e74:	9303      	str	r3, [sp, #12]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	9302      	str	r3, [sp, #8]
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	9301      	str	r3, [sp, #4]
 8013e7e:	2301      	movs	r3, #1
 8013e80:	9300      	str	r3, [sp, #0]
 8013e82:	4623      	mov	r3, r4
 8013e84:	f7ff fb35 	bl	80134f2 <VerifyCmacB0>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013e8c:	7d7b      	ldrb	r3, [r7, #21]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d001      	beq.n	8013e96 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8013e92:	7d7b      	ldrb	r3, [r7, #21]
 8013e94:	e021      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d101      	bne.n	8013ea4 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013ea0:	2302      	movs	r3, #2
 8013ea2:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013eae:	b219      	sxth	r1, r3
 8013eb0:	7dfa      	ldrb	r2, [r7, #23]
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	9301      	str	r3, [sp, #4]
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	9300      	str	r3, [sp, #0]
 8013eba:	68bb      	ldr	r3, [r7, #8]
 8013ebc:	f7ff f9da 	bl	8013274 <PayloadEncrypt>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013ec4:	7d7b      	ldrb	r3, [r7, #21]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d001      	beq.n	8013ece <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8013eca:	7d7b      	ldrb	r3, [r7, #21]
 8013ecc:	e005      	b.n	8013eda <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013ece:	7bbb      	ldrb	r3, [r7, #14]
 8013ed0:	6879      	ldr	r1, [r7, #4]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff fc84 	bl	80137e0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013ed8:	2300      	movs	r3, #0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	371c      	adds	r7, #28
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd90      	pop	{r4, r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	20001980 	.word	0x20001980

08013ee8 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b086      	sub	sp, #24
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	4603      	mov	r3, r0
 8013ef0:	460a      	mov	r2, r1
 8013ef2:	71fb      	strb	r3, [r7, #7]
 8013ef4:	4613      	mov	r3, r2
 8013ef6:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013ef8:	79bb      	ldrb	r3, [r7, #6]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d001      	beq.n	8013f02 <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013efe:	230a      	movs	r3, #10
 8013f00:	e019      	b.n	8013f36 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013f02:	2300      	movs	r3, #0
 8013f04:	60bb      	str	r3, [r7, #8]
 8013f06:	f107 030c 	add.w	r3, r7, #12
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	605a      	str	r2, [r3, #4]
 8013f10:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013f12:	79fb      	ldrb	r3, [r7, #7]
 8013f14:	2b01      	cmp	r3, #1
 8013f16:	d101      	bne.n	8013f1c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013f18:	2320      	movs	r3, #32
 8013f1a:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013f1c:	79b9      	ldrb	r1, [r7, #6]
 8013f1e:	f107 0308 	add.w	r3, r7, #8
 8013f22:	2204      	movs	r2, #4
 8013f24:	4618      	mov	r0, r3
 8013f26:	f7f7 ff4f 	bl	800bdc8 <SecureElementDeriveAndStoreKey>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d001      	beq.n	8013f34 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f30:	230e      	movs	r3, #14
 8013f32:	e000      	b.n	8013f36 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f34:	2300      	movs	r3, #0
}
 8013f36:	4618      	mov	r0, r3
 8013f38:	3718      	adds	r7, #24
 8013f3a:	46bd      	mov	sp, r7
 8013f3c:	bd80      	pop	{r7, pc}

08013f3e <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013f3e:	b580      	push	{r7, lr}
 8013f40:	b086      	sub	sp, #24
 8013f42:	af00      	add	r7, sp, #0
 8013f44:	4603      	mov	r3, r0
 8013f46:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013f48:	79fb      	ldrb	r3, [r7, #7]
 8013f4a:	2b04      	cmp	r3, #4
 8013f4c:	d001      	beq.n	8013f52 <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013f4e:	230a      	movs	r3, #10
 8013f50:	e014      	b.n	8013f7c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013f52:	2300      	movs	r3, #0
 8013f54:	60bb      	str	r3, [r7, #8]
 8013f56:	f107 030c 	add.w	r3, r7, #12
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	601a      	str	r2, [r3, #0]
 8013f5e:	605a      	str	r2, [r3, #4]
 8013f60:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013f62:	79f9      	ldrb	r1, [r7, #7]
 8013f64:	f107 0308 	add.w	r3, r7, #8
 8013f68:	227f      	movs	r2, #127	; 0x7f
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	f7f7 ff2c 	bl	800bdc8 <SecureElementDeriveAndStoreKey>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d001      	beq.n	8013f7a <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013f76:	230e      	movs	r3, #14
 8013f78:	e000      	b.n	8013f7c <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013f7a:	2300      	movs	r3, #0
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	3718      	adds	r7, #24
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}

08013f84 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d003      	beq.n	8013f9a <LoRaMacParserJoinAccept+0x16>
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d101      	bne.n	8013f9e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013f9a:	2302      	movs	r3, #2
 8013f9c:	e0b9      	b.n	8014112 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013f9e:	2300      	movs	r3, #0
 8013fa0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681a      	ldr	r2, [r3, #0]
 8013fa6:	89fb      	ldrh	r3, [r7, #14]
 8013fa8:	1c59      	adds	r1, r3, #1
 8013faa:	81f9      	strh	r1, [r7, #14]
 8013fac:	4413      	add	r3, r2
 8013fae:	781a      	ldrb	r2, [r3, #0]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	1d98      	adds	r0, r3, #6
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	89fb      	ldrh	r3, [r7, #14]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	2203      	movs	r2, #3
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	f004 f929 	bl	801821a <memcpy1>
    bufItr = bufItr + 3;
 8013fc8:	89fb      	ldrh	r3, [r7, #14]
 8013fca:	3303      	adds	r3, #3
 8013fcc:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f103 0009 	add.w	r0, r3, #9
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	89fb      	ldrh	r3, [r7, #14]
 8013fda:	4413      	add	r3, r2
 8013fdc:	2203      	movs	r2, #3
 8013fde:	4619      	mov	r1, r3
 8013fe0:	f004 f91b 	bl	801821a <memcpy1>
    bufItr = bufItr + 3;
 8013fe4:	89fb      	ldrh	r3, [r7, #14]
 8013fe6:	3303      	adds	r3, #3
 8013fe8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	89fb      	ldrh	r3, [r7, #14]
 8013ff0:	1c59      	adds	r1, r3, #1
 8013ff2:	81f9      	strh	r1, [r7, #14]
 8013ff4:	4413      	add	r3, r2
 8013ff6:	781b      	ldrb	r3, [r3, #0]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681a      	ldr	r2, [r3, #0]
 8014002:	89fb      	ldrh	r3, [r7, #14]
 8014004:	1c59      	adds	r1, r3, #1
 8014006:	81f9      	strh	r1, [r7, #14]
 8014008:	4413      	add	r3, r2
 801400a:	781b      	ldrb	r3, [r3, #0]
 801400c:	021a      	lsls	r2, r3, #8
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	431a      	orrs	r2, r3
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681a      	ldr	r2, [r3, #0]
 801401c:	89fb      	ldrh	r3, [r7, #14]
 801401e:	1c59      	adds	r1, r3, #1
 8014020:	81f9      	strh	r1, [r7, #14]
 8014022:	4413      	add	r3, r2
 8014024:	781b      	ldrb	r3, [r3, #0]
 8014026:	041a      	lsls	r2, r3, #16
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	68db      	ldr	r3, [r3, #12]
 801402c:	431a      	orrs	r2, r3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	89fb      	ldrh	r3, [r7, #14]
 8014038:	1c59      	adds	r1, r3, #1
 801403a:	81f9      	strh	r1, [r7, #14]
 801403c:	4413      	add	r3, r2
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	061a      	lsls	r2, r3, #24
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	431a      	orrs	r2, r3
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681a      	ldr	r2, [r3, #0]
 8014050:	89fb      	ldrh	r3, [r7, #14]
 8014052:	1c59      	adds	r1, r3, #1
 8014054:	81f9      	strh	r1, [r7, #14]
 8014056:	4413      	add	r3, r2
 8014058:	781a      	ldrb	r2, [r3, #0]
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681a      	ldr	r2, [r3, #0]
 8014062:	89fb      	ldrh	r3, [r7, #14]
 8014064:	1c59      	adds	r1, r3, #1
 8014066:	81f9      	strh	r1, [r7, #14]
 8014068:	4413      	add	r3, r2
 801406a:	781a      	ldrb	r2, [r3, #0]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	791b      	ldrb	r3, [r3, #4]
 8014074:	1f1a      	subs	r2, r3, #4
 8014076:	89fb      	ldrh	r3, [r7, #14]
 8014078:	1ad3      	subs	r3, r2, r3
 801407a:	2b10      	cmp	r3, #16
 801407c:	d10e      	bne.n	801409c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f103 0012 	add.w	r0, r3, #18
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	89fb      	ldrh	r3, [r7, #14]
 801408a:	4413      	add	r3, r2
 801408c:	2210      	movs	r2, #16
 801408e:	4619      	mov	r1, r3
 8014090:	f004 f8c3 	bl	801821a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8014094:	89fb      	ldrh	r3, [r7, #14]
 8014096:	3310      	adds	r3, #16
 8014098:	81fb      	strh	r3, [r7, #14]
 801409a:	e008      	b.n	80140ae <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	791b      	ldrb	r3, [r3, #4]
 80140a0:	1f1a      	subs	r2, r3, #4
 80140a2:	89fb      	ldrh	r3, [r7, #14]
 80140a4:	1ad3      	subs	r3, r2, r3
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	dd01      	ble.n	80140ae <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80140aa:	2301      	movs	r3, #1
 80140ac:	e031      	b.n	8014112 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	681a      	ldr	r2, [r3, #0]
 80140b2:	89fb      	ldrh	r3, [r7, #14]
 80140b4:	1c59      	adds	r1, r3, #1
 80140b6:	81f9      	strh	r1, [r7, #14]
 80140b8:	4413      	add	r3, r2
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	461a      	mov	r2, r3
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	89fb      	ldrh	r3, [r7, #14]
 80140c8:	1c59      	adds	r1, r3, #1
 80140ca:	81f9      	strh	r1, [r7, #14]
 80140cc:	4413      	add	r3, r2
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	021a      	lsls	r2, r3, #8
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d6:	431a      	orrs	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	89fb      	ldrh	r3, [r7, #14]
 80140e2:	1c59      	adds	r1, r3, #1
 80140e4:	81f9      	strh	r1, [r7, #14]
 80140e6:	4413      	add	r3, r2
 80140e8:	781b      	ldrb	r3, [r3, #0]
 80140ea:	041a      	lsls	r2, r3, #16
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f0:	431a      	orrs	r2, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	681a      	ldr	r2, [r3, #0]
 80140fa:	89fb      	ldrh	r3, [r7, #14]
 80140fc:	1c59      	adds	r1, r3, #1
 80140fe:	81f9      	strh	r1, [r7, #14]
 8014100:	4413      	add	r3, r2
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	061a      	lsls	r2, r3, #24
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801410a:	431a      	orrs	r2, r3
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014110:	2300      	movs	r3, #0
}
 8014112:	4618      	mov	r0, r3
 8014114:	3710      	adds	r7, #16
 8014116:	46bd      	mov	sp, r7
 8014118:	bd80      	pop	{r7, pc}

0801411a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801411a:	b580      	push	{r7, lr}
 801411c:	b084      	sub	sp, #16
 801411e:	af00      	add	r7, sp, #0
 8014120:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d003      	beq.n	8014130 <LoRaMacParserData+0x16>
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d101      	bne.n	8014134 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014130:	2302      	movs	r3, #2
 8014132:	e0e2      	b.n	80142fa <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	89fb      	ldrh	r3, [r7, #14]
 801413e:	1c59      	adds	r1, r3, #1
 8014140:	81f9      	strh	r1, [r7, #14]
 8014142:	4413      	add	r3, r2
 8014144:	781a      	ldrb	r2, [r3, #0]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681a      	ldr	r2, [r3, #0]
 801414e:	89fb      	ldrh	r3, [r7, #14]
 8014150:	1c59      	adds	r1, r3, #1
 8014152:	81f9      	strh	r1, [r7, #14]
 8014154:	4413      	add	r3, r2
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	461a      	mov	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	89fb      	ldrh	r3, [r7, #14]
 8014164:	1c59      	adds	r1, r3, #1
 8014166:	81f9      	strh	r1, [r7, #14]
 8014168:	4413      	add	r3, r2
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	021a      	lsls	r2, r3, #8
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	689b      	ldr	r3, [r3, #8]
 8014172:	431a      	orrs	r2, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	681a      	ldr	r2, [r3, #0]
 801417c:	89fb      	ldrh	r3, [r7, #14]
 801417e:	1c59      	adds	r1, r3, #1
 8014180:	81f9      	strh	r1, [r7, #14]
 8014182:	4413      	add	r3, r2
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	041a      	lsls	r2, r3, #16
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	689b      	ldr	r3, [r3, #8]
 801418c:	431a      	orrs	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	681a      	ldr	r2, [r3, #0]
 8014196:	89fb      	ldrh	r3, [r7, #14]
 8014198:	1c59      	adds	r1, r3, #1
 801419a:	81f9      	strh	r1, [r7, #14]
 801419c:	4413      	add	r3, r2
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	061a      	lsls	r2, r3, #24
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	431a      	orrs	r2, r3
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	89fb      	ldrh	r3, [r7, #14]
 80141b2:	1c59      	adds	r1, r3, #1
 80141b4:	81f9      	strh	r1, [r7, #14]
 80141b6:	4413      	add	r3, r2
 80141b8:	781a      	ldrb	r2, [r3, #0]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	89fb      	ldrh	r3, [r7, #14]
 80141c4:	1c59      	adds	r1, r3, #1
 80141c6:	81f9      	strh	r1, [r7, #14]
 80141c8:	4413      	add	r3, r2
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	89fb      	ldrh	r3, [r7, #14]
 80141d8:	1c59      	adds	r1, r3, #1
 80141da:	81f9      	strh	r1, [r7, #14]
 80141dc:	4413      	add	r3, r2
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	0219      	lsls	r1, r3, #8
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	89db      	ldrh	r3, [r3, #14]
 80141e6:	b21a      	sxth	r2, r3
 80141e8:	b20b      	sxth	r3, r1
 80141ea:	4313      	orrs	r3, r2
 80141ec:	b21b      	sxth	r3, r3
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f103 0010 	add.w	r0, r3, #16
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681a      	ldr	r2, [r3, #0]
 80141fe:	89fb      	ldrh	r3, [r7, #14]
 8014200:	18d1      	adds	r1, r2, r3
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	7b1b      	ldrb	r3, [r3, #12]
 8014206:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801420a:	b2db      	uxtb	r3, r3
 801420c:	b29b      	uxth	r3, r3
 801420e:	461a      	mov	r2, r3
 8014210:	f004 f803 	bl	801821a <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	7b1b      	ldrb	r3, [r3, #12]
 8014218:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801421c:	b2db      	uxtb	r3, r3
 801421e:	b29a      	uxth	r2, r3
 8014220:	89fb      	ldrh	r3, [r7, #14]
 8014222:	4413      	add	r3, r2
 8014224:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2200      	movs	r2, #0
 801422a:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	791b      	ldrb	r3, [r3, #4]
 801423a:	461a      	mov	r2, r3
 801423c:	89fb      	ldrh	r3, [r7, #14]
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	2b04      	cmp	r3, #4
 8014242:	dd28      	ble.n	8014296 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681a      	ldr	r2, [r3, #0]
 8014248:	89fb      	ldrh	r3, [r7, #14]
 801424a:	1c59      	adds	r1, r3, #1
 801424c:	81f9      	strh	r1, [r7, #14]
 801424e:	4413      	add	r3, r2
 8014250:	781a      	ldrb	r2, [r3, #0]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	791a      	ldrb	r2, [r3, #4]
 801425c:	89fb      	ldrh	r3, [r7, #14]
 801425e:	b2db      	uxtb	r3, r3
 8014260:	1ad3      	subs	r3, r2, r3
 8014262:	b2db      	uxtb	r3, r3
 8014264:	3b04      	subs	r3, #4
 8014266:	b2da      	uxtb	r2, r3
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	681a      	ldr	r2, [r3, #0]
 8014276:	89fb      	ldrh	r3, [r7, #14]
 8014278:	18d1      	adds	r1, r2, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014280:	b29b      	uxth	r3, r3
 8014282:	461a      	mov	r2, r3
 8014284:	f003 ffc9 	bl	801821a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801428e:	b29a      	uxth	r2, r3
 8014290:	89fb      	ldrh	r3, [r7, #14]
 8014292:	4413      	add	r3, r2
 8014294:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	791b      	ldrb	r3, [r3, #4]
 801429e:	3b04      	subs	r3, #4
 80142a0:	4413      	add	r3, r2
 80142a2:	781b      	ldrb	r3, [r3, #0]
 80142a4:	461a      	mov	r2, r3
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	6819      	ldr	r1, [r3, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	791b      	ldrb	r3, [r3, #4]
 80142b6:	3b03      	subs	r3, #3
 80142b8:	440b      	add	r3, r1
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	021b      	lsls	r3, r3, #8
 80142be:	431a      	orrs	r2, r3
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6819      	ldr	r1, [r3, #0]
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	791b      	ldrb	r3, [r3, #4]
 80142d0:	3b02      	subs	r3, #2
 80142d2:	440b      	add	r3, r1
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	041b      	lsls	r3, r3, #16
 80142d8:	431a      	orrs	r2, r3
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6819      	ldr	r1, [r3, #0]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	791b      	ldrb	r3, [r3, #4]
 80142ea:	3b01      	subs	r3, #1
 80142ec:	440b      	add	r3, r1
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	061b      	lsls	r3, r3, #24
 80142f2:	431a      	orrs	r2, r3
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80142f8:	2300      	movs	r3, #0
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}

08014302 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014302:	b580      	push	{r7, lr}
 8014304:	b084      	sub	sp, #16
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d003      	beq.n	8014318 <LoRaMacSerializerJoinRequest+0x16>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d101      	bne.n	801431c <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014318:	2301      	movs	r3, #1
 801431a:	e070      	b.n	80143fe <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 801431c:	2300      	movs	r3, #0
 801431e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	791b      	ldrb	r3, [r3, #4]
 8014324:	2b16      	cmp	r3, #22
 8014326:	d801      	bhi.n	801432c <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8014328:	2302      	movs	r3, #2
 801432a:	e068      	b.n	80143fe <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	681a      	ldr	r2, [r3, #0]
 8014330:	89fb      	ldrh	r3, [r7, #14]
 8014332:	1c59      	adds	r1, r3, #1
 8014334:	81f9      	strh	r1, [r7, #14]
 8014336:	4413      	add	r3, r2
 8014338:	687a      	ldr	r2, [r7, #4]
 801433a:	7952      	ldrb	r2, [r2, #5]
 801433c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	681a      	ldr	r2, [r3, #0]
 8014342:	89fb      	ldrh	r3, [r7, #14]
 8014344:	18d0      	adds	r0, r2, r3
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	3306      	adds	r3, #6
 801434a:	2208      	movs	r2, #8
 801434c:	4619      	mov	r1, r3
 801434e:	f003 ff7f 	bl	8018250 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014352:	89fb      	ldrh	r3, [r7, #14]
 8014354:	3308      	adds	r3, #8
 8014356:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	681a      	ldr	r2, [r3, #0]
 801435c:	89fb      	ldrh	r3, [r7, #14]
 801435e:	18d0      	adds	r0, r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	330e      	adds	r3, #14
 8014364:	2208      	movs	r2, #8
 8014366:	4619      	mov	r1, r3
 8014368:	f003 ff72 	bl	8018250 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801436c:	89fb      	ldrh	r3, [r7, #14]
 801436e:	3308      	adds	r3, #8
 8014370:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	8ad9      	ldrh	r1, [r3, #22]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681a      	ldr	r2, [r3, #0]
 801437a:	89fb      	ldrh	r3, [r7, #14]
 801437c:	1c58      	adds	r0, r3, #1
 801437e:	81f8      	strh	r0, [r7, #14]
 8014380:	4413      	add	r3, r2
 8014382:	b2ca      	uxtb	r2, r1
 8014384:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	8adb      	ldrh	r3, [r3, #22]
 801438a:	0a1b      	lsrs	r3, r3, #8
 801438c:	b299      	uxth	r1, r3
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681a      	ldr	r2, [r3, #0]
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	1c58      	adds	r0, r3, #1
 8014396:	81f8      	strh	r0, [r7, #14]
 8014398:	4413      	add	r3, r2
 801439a:	b2ca      	uxtb	r2, r1
 801439c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	6999      	ldr	r1, [r3, #24]
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681a      	ldr	r2, [r3, #0]
 80143a6:	89fb      	ldrh	r3, [r7, #14]
 80143a8:	1c58      	adds	r0, r3, #1
 80143aa:	81f8      	strh	r0, [r7, #14]
 80143ac:	4413      	add	r3, r2
 80143ae:	b2ca      	uxtb	r2, r1
 80143b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	699b      	ldr	r3, [r3, #24]
 80143b6:	0a19      	lsrs	r1, r3, #8
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681a      	ldr	r2, [r3, #0]
 80143bc:	89fb      	ldrh	r3, [r7, #14]
 80143be:	1c58      	adds	r0, r3, #1
 80143c0:	81f8      	strh	r0, [r7, #14]
 80143c2:	4413      	add	r3, r2
 80143c4:	b2ca      	uxtb	r2, r1
 80143c6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	699b      	ldr	r3, [r3, #24]
 80143cc:	0c19      	lsrs	r1, r3, #16
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681a      	ldr	r2, [r3, #0]
 80143d2:	89fb      	ldrh	r3, [r7, #14]
 80143d4:	1c58      	adds	r0, r3, #1
 80143d6:	81f8      	strh	r0, [r7, #14]
 80143d8:	4413      	add	r3, r2
 80143da:	b2ca      	uxtb	r2, r1
 80143dc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	699b      	ldr	r3, [r3, #24]
 80143e2:	0e19      	lsrs	r1, r3, #24
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	681a      	ldr	r2, [r3, #0]
 80143e8:	89fb      	ldrh	r3, [r7, #14]
 80143ea:	1c58      	adds	r0, r3, #1
 80143ec:	81f8      	strh	r0, [r7, #14]
 80143ee:	4413      	add	r3, r2
 80143f0:	b2ca      	uxtb	r2, r1
 80143f2:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80143f4:	89fb      	ldrh	r3, [r7, #14]
 80143f6:	b2da      	uxtb	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80143fc:	2300      	movs	r3, #0
}
 80143fe:	4618      	mov	r0, r3
 8014400:	3710      	adds	r7, #16
 8014402:	46bd      	mov	sp, r7
 8014404:	bd80      	pop	{r7, pc}

08014406 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8014406:	b580      	push	{r7, lr}
 8014408:	b084      	sub	sp, #16
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d003      	beq.n	801441c <LoRaMacSerializerData+0x16>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d101      	bne.n	8014420 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801441c:	2301      	movs	r3, #1
 801441e:	e0e5      	b.n	80145ec <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 8014420:	2300      	movs	r3, #0
 8014422:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014424:	2308      	movs	r3, #8
 8014426:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	7b1b      	ldrb	r3, [r3, #12]
 801442c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014430:	b2db      	uxtb	r3, r3
 8014432:	b29a      	uxth	r2, r3
 8014434:	89bb      	ldrh	r3, [r7, #12]
 8014436:	4413      	add	r3, r2
 8014438:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014440:	2b00      	cmp	r3, #0
 8014442:	d002      	beq.n	801444a <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014444:	89bb      	ldrh	r3, [r7, #12]
 8014446:	3301      	adds	r3, #1
 8014448:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014450:	b29a      	uxth	r2, r3
 8014452:	89bb      	ldrh	r3, [r7, #12]
 8014454:	4413      	add	r3, r2
 8014456:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8014458:	89bb      	ldrh	r3, [r7, #12]
 801445a:	3304      	adds	r3, #4
 801445c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	791b      	ldrb	r3, [r3, #4]
 8014462:	b29b      	uxth	r3, r3
 8014464:	89ba      	ldrh	r2, [r7, #12]
 8014466:	429a      	cmp	r2, r3
 8014468:	d901      	bls.n	801446e <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801446a:	2302      	movs	r3, #2
 801446c:	e0be      	b.n	80145ec <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	89fb      	ldrh	r3, [r7, #14]
 8014474:	1c59      	adds	r1, r3, #1
 8014476:	81f9      	strh	r1, [r7, #14]
 8014478:	4413      	add	r3, r2
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	7952      	ldrb	r2, [r2, #5]
 801447e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6899      	ldr	r1, [r3, #8]
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	89fb      	ldrh	r3, [r7, #14]
 801448a:	1c58      	adds	r0, r3, #1
 801448c:	81f8      	strh	r0, [r7, #14]
 801448e:	4413      	add	r3, r2
 8014490:	b2ca      	uxtb	r2, r1
 8014492:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	689b      	ldr	r3, [r3, #8]
 8014498:	0a19      	lsrs	r1, r3, #8
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681a      	ldr	r2, [r3, #0]
 801449e:	89fb      	ldrh	r3, [r7, #14]
 80144a0:	1c58      	adds	r0, r3, #1
 80144a2:	81f8      	strh	r0, [r7, #14]
 80144a4:	4413      	add	r3, r2
 80144a6:	b2ca      	uxtb	r2, r1
 80144a8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	689b      	ldr	r3, [r3, #8]
 80144ae:	0c19      	lsrs	r1, r3, #16
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681a      	ldr	r2, [r3, #0]
 80144b4:	89fb      	ldrh	r3, [r7, #14]
 80144b6:	1c58      	adds	r0, r3, #1
 80144b8:	81f8      	strh	r0, [r7, #14]
 80144ba:	4413      	add	r3, r2
 80144bc:	b2ca      	uxtb	r2, r1
 80144be:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	689b      	ldr	r3, [r3, #8]
 80144c4:	0e19      	lsrs	r1, r3, #24
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	681a      	ldr	r2, [r3, #0]
 80144ca:	89fb      	ldrh	r3, [r7, #14]
 80144cc:	1c58      	adds	r0, r3, #1
 80144ce:	81f8      	strh	r0, [r7, #14]
 80144d0:	4413      	add	r3, r2
 80144d2:	b2ca      	uxtb	r2, r1
 80144d4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681a      	ldr	r2, [r3, #0]
 80144da:	89fb      	ldrh	r3, [r7, #14]
 80144dc:	1c59      	adds	r1, r3, #1
 80144de:	81f9      	strh	r1, [r7, #14]
 80144e0:	4413      	add	r3, r2
 80144e2:	687a      	ldr	r2, [r7, #4]
 80144e4:	7b12      	ldrb	r2, [r2, #12]
 80144e6:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	89d9      	ldrh	r1, [r3, #14]
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	681a      	ldr	r2, [r3, #0]
 80144f0:	89fb      	ldrh	r3, [r7, #14]
 80144f2:	1c58      	adds	r0, r3, #1
 80144f4:	81f8      	strh	r0, [r7, #14]
 80144f6:	4413      	add	r3, r2
 80144f8:	b2ca      	uxtb	r2, r1
 80144fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	89db      	ldrh	r3, [r3, #14]
 8014500:	0a1b      	lsrs	r3, r3, #8
 8014502:	b299      	uxth	r1, r3
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681a      	ldr	r2, [r3, #0]
 8014508:	89fb      	ldrh	r3, [r7, #14]
 801450a:	1c58      	adds	r0, r3, #1
 801450c:	81f8      	strh	r0, [r7, #14]
 801450e:	4413      	add	r3, r2
 8014510:	b2ca      	uxtb	r2, r1
 8014512:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	89fb      	ldrh	r3, [r7, #14]
 801451a:	18d0      	adds	r0, r2, r3
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f103 0110 	add.w	r1, r3, #16
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	7b1b      	ldrb	r3, [r3, #12]
 8014526:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801452a:	b2db      	uxtb	r3, r3
 801452c:	b29b      	uxth	r3, r3
 801452e:	461a      	mov	r2, r3
 8014530:	f003 fe73 	bl	801821a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	7b1b      	ldrb	r3, [r3, #12]
 8014538:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801453c:	b2db      	uxtb	r3, r3
 801453e:	b29a      	uxth	r2, r3
 8014540:	89fb      	ldrh	r3, [r7, #14]
 8014542:	4413      	add	r3, r2
 8014544:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801454c:	2b00      	cmp	r3, #0
 801454e:	d009      	beq.n	8014564 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	89fb      	ldrh	r3, [r7, #14]
 8014556:	1c59      	adds	r1, r3, #1
 8014558:	81f9      	strh	r1, [r7, #14]
 801455a:	4413      	add	r3, r2
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014562:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	89fb      	ldrh	r3, [r7, #14]
 801456a:	18d0      	adds	r0, r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014576:	b29b      	uxth	r3, r3
 8014578:	461a      	mov	r2, r3
 801457a:	f003 fe4e 	bl	801821a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014584:	b29a      	uxth	r2, r3
 8014586:	89fb      	ldrh	r3, [r7, #14]
 8014588:	4413      	add	r3, r2
 801458a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	89fb      	ldrh	r3, [r7, #14]
 8014596:	1c58      	adds	r0, r3, #1
 8014598:	81f8      	strh	r0, [r7, #14]
 801459a:	4413      	add	r3, r2
 801459c:	b2ca      	uxtb	r2, r1
 801459e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a4:	0a19      	lsrs	r1, r3, #8
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681a      	ldr	r2, [r3, #0]
 80145aa:	89fb      	ldrh	r3, [r7, #14]
 80145ac:	1c58      	adds	r0, r3, #1
 80145ae:	81f8      	strh	r0, [r7, #14]
 80145b0:	4413      	add	r3, r2
 80145b2:	b2ca      	uxtb	r2, r1
 80145b4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ba:	0c19      	lsrs	r1, r3, #16
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681a      	ldr	r2, [r3, #0]
 80145c0:	89fb      	ldrh	r3, [r7, #14]
 80145c2:	1c58      	adds	r0, r3, #1
 80145c4:	81f8      	strh	r0, [r7, #14]
 80145c6:	4413      	add	r3, r2
 80145c8:	b2ca      	uxtb	r2, r1
 80145ca:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145d0:	0e19      	lsrs	r1, r3, #24
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	89fb      	ldrh	r3, [r7, #14]
 80145d8:	1c58      	adds	r0, r3, #1
 80145da:	81f8      	strh	r0, [r7, #14]
 80145dc:	4413      	add	r3, r2
 80145de:	b2ca      	uxtb	r2, r1
 80145e0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80145e2:	89fb      	ldrh	r3, [r7, #14]
 80145e4:	b2da      	uxtb	r2, r3
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80145ea:	2300      	movs	r3, #0
}
 80145ec:	4618      	mov	r0, r3
 80145ee:	3710      	adds	r7, #16
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}

080145f4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80145f4:	b480      	push	{r7}
 80145f6:	b083      	sub	sp, #12
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	4603      	mov	r3, r0
 80145fc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145fe:	79fb      	ldrb	r3, [r7, #7]
 8014600:	2b05      	cmp	r3, #5
 8014602:	d002      	beq.n	801460a <RegionIsActive+0x16>
 8014604:	2b08      	cmp	r3, #8
 8014606:	d002      	beq.n	801460e <RegionIsActive+0x1a>
 8014608:	e003      	b.n	8014612 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 801460a:	2301      	movs	r3, #1
 801460c:	e002      	b.n	8014614 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 801460e:	2301      	movs	r3, #1
 8014610:	e000      	b.n	8014614 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8014612:	2300      	movs	r3, #0
        }
    }
}
 8014614:	4618      	mov	r0, r3
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	bc80      	pop	{r7}
 801461c:	4770      	bx	lr

0801461e <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 801461e:	b580      	push	{r7, lr}
 8014620:	b084      	sub	sp, #16
 8014622:	af00      	add	r7, sp, #0
 8014624:	4603      	mov	r3, r0
 8014626:	6039      	str	r1, [r7, #0]
 8014628:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801462a:	2300      	movs	r3, #0
 801462c:	60bb      	str	r3, [r7, #8]
    switch( region )
 801462e:	79fb      	ldrb	r3, [r7, #7]
 8014630:	2b05      	cmp	r3, #5
 8014632:	d002      	beq.n	801463a <RegionGetPhyParam+0x1c>
 8014634:	2b08      	cmp	r3, #8
 8014636:	d006      	beq.n	8014646 <RegionGetPhyParam+0x28>
 8014638:	e00b      	b.n	8014652 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801463a:	6838      	ldr	r0, [r7, #0]
 801463c:	f001 fad4 	bl	8015be8 <RegionEU868GetPhyParam>
 8014640:	4603      	mov	r3, r0
 8014642:	60fb      	str	r3, [r7, #12]
 8014644:	e007      	b.n	8014656 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8014646:	6838      	ldr	r0, [r7, #0]
 8014648:	f002 fc4e 	bl	8016ee8 <RegionUS915GetPhyParam>
 801464c:	4603      	mov	r3, r0
 801464e:	60fb      	str	r3, [r7, #12]
 8014650:	e001      	b.n	8014656 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	4618      	mov	r0, r3
 801465a:	3710      	adds	r7, #16
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b082      	sub	sp, #8
 8014664:	af00      	add	r7, sp, #0
 8014666:	4603      	mov	r3, r0
 8014668:	6039      	str	r1, [r7, #0]
 801466a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801466c:	79fb      	ldrb	r3, [r7, #7]
 801466e:	2b05      	cmp	r3, #5
 8014670:	d002      	beq.n	8014678 <RegionSetBandTxDone+0x18>
 8014672:	2b08      	cmp	r3, #8
 8014674:	d004      	beq.n	8014680 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8014676:	e007      	b.n	8014688 <RegionSetBandTxDone+0x28>
        EU868_SET_BAND_TX_DONE( );
 8014678:	6838      	ldr	r0, [r7, #0]
 801467a:	f001 fbfb 	bl	8015e74 <RegionEU868SetBandTxDone>
 801467e:	e003      	b.n	8014688 <RegionSetBandTxDone+0x28>
        US915_SET_BAND_TX_DONE( );
 8014680:	6838      	ldr	r0, [r7, #0]
 8014682:	f002 fd8d 	bl	80171a0 <RegionUS915SetBandTxDone>
 8014686:	bf00      	nop
        }
    }
}
 8014688:	3708      	adds	r7, #8
 801468a:	46bd      	mov	sp, r7
 801468c:	bd80      	pop	{r7, pc}

0801468e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801468e:	b580      	push	{r7, lr}
 8014690:	b082      	sub	sp, #8
 8014692:	af00      	add	r7, sp, #0
 8014694:	4603      	mov	r3, r0
 8014696:	6039      	str	r1, [r7, #0]
 8014698:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801469a:	79fb      	ldrb	r3, [r7, #7]
 801469c:	2b05      	cmp	r3, #5
 801469e:	d002      	beq.n	80146a6 <RegionInitDefaults+0x18>
 80146a0:	2b08      	cmp	r3, #8
 80146a2:	d004      	beq.n	80146ae <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80146a4:	e007      	b.n	80146b6 <RegionInitDefaults+0x28>
        EU868_INIT_DEFAULTS( );
 80146a6:	6838      	ldr	r0, [r7, #0]
 80146a8:	f001 fc10 	bl	8015ecc <RegionEU868InitDefaults>
 80146ac:	e003      	b.n	80146b6 <RegionInitDefaults+0x28>
        US915_INIT_DEFAULTS( );
 80146ae:	6838      	ldr	r0, [r7, #0]
 80146b0:	f002 fda2 	bl	80171f8 <RegionUS915InitDefaults>
 80146b4:	bf00      	nop
        }
    }
}
 80146b6:	bf00      	nop
 80146b8:	3708      	adds	r7, #8
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}

080146be <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80146be:	b580      	push	{r7, lr}
 80146c0:	b082      	sub	sp, #8
 80146c2:	af00      	add	r7, sp, #0
 80146c4:	4603      	mov	r3, r0
 80146c6:	6039      	str	r1, [r7, #0]
 80146c8:	71fb      	strb	r3, [r7, #7]
 80146ca:	4613      	mov	r3, r2
 80146cc:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80146ce:	79fb      	ldrb	r3, [r7, #7]
 80146d0:	2b05      	cmp	r3, #5
 80146d2:	d002      	beq.n	80146da <RegionVerify+0x1c>
 80146d4:	2b08      	cmp	r3, #8
 80146d6:	d007      	beq.n	80146e8 <RegionVerify+0x2a>
 80146d8:	e00d      	b.n	80146f6 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80146da:	79bb      	ldrb	r3, [r7, #6]
 80146dc:	4619      	mov	r1, r3
 80146de:	6838      	ldr	r0, [r7, #0]
 80146e0:	f001 fc92 	bl	8016008 <RegionEU868Verify>
 80146e4:	4603      	mov	r3, r0
 80146e6:	e007      	b.n	80146f8 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80146e8:	79bb      	ldrb	r3, [r7, #6]
 80146ea:	4619      	mov	r1, r3
 80146ec:	6838      	ldr	r0, [r7, #0]
 80146ee:	f002 feb5 	bl	801745c <RegionUS915Verify>
 80146f2:	4603      	mov	r3, r0
 80146f4:	e000      	b.n	80146f8 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80146f6:	2300      	movs	r3, #0
        }
    }
}
 80146f8:	4618      	mov	r0, r3
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}

08014700 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	4603      	mov	r3, r0
 8014708:	6039      	str	r1, [r7, #0]
 801470a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801470c:	79fb      	ldrb	r3, [r7, #7]
 801470e:	2b05      	cmp	r3, #5
 8014710:	d002      	beq.n	8014718 <RegionApplyCFList+0x18>
 8014712:	2b08      	cmp	r3, #8
 8014714:	d004      	beq.n	8014720 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8014716:	e007      	b.n	8014728 <RegionApplyCFList+0x28>
        EU868_APPLY_CF_LIST( );
 8014718:	6838      	ldr	r0, [r7, #0]
 801471a:	f001 fcf1 	bl	8016100 <RegionEU868ApplyCFList>
 801471e:	e003      	b.n	8014728 <RegionApplyCFList+0x28>
        US915_APPLY_CF_LIST( );
 8014720:	6838      	ldr	r0, [r7, #0]
 8014722:	f002 ff11 	bl	8017548 <RegionUS915ApplyCFList>
 8014726:	bf00      	nop
        }
    }
}
 8014728:	bf00      	nop
 801472a:	3708      	adds	r7, #8
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b082      	sub	sp, #8
 8014734:	af00      	add	r7, sp, #0
 8014736:	4603      	mov	r3, r0
 8014738:	6039      	str	r1, [r7, #0]
 801473a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801473c:	79fb      	ldrb	r3, [r7, #7]
 801473e:	2b05      	cmp	r3, #5
 8014740:	d002      	beq.n	8014748 <RegionChanMaskSet+0x18>
 8014742:	2b08      	cmp	r3, #8
 8014744:	d005      	beq.n	8014752 <RegionChanMaskSet+0x22>
 8014746:	e009      	b.n	801475c <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8014748:	6838      	ldr	r0, [r7, #0]
 801474a:	f001 fd4d 	bl	80161e8 <RegionEU868ChanMaskSet>
 801474e:	4603      	mov	r3, r0
 8014750:	e005      	b.n	801475e <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8014752:	6838      	ldr	r0, [r7, #0]
 8014754:	f002 ff6c 	bl	8017630 <RegionUS915ChanMaskSet>
 8014758:	4603      	mov	r3, r0
 801475a:	e000      	b.n	801475e <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801475c:	2300      	movs	r3, #0
        }
    }
}
 801475e:	4618      	mov	r0, r3
 8014760:	3708      	adds	r7, #8
 8014762:	46bd      	mov	sp, r7
 8014764:	bd80      	pop	{r7, pc}

08014766 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8014766:	b580      	push	{r7, lr}
 8014768:	b082      	sub	sp, #8
 801476a:	af00      	add	r7, sp, #0
 801476c:	603b      	str	r3, [r7, #0]
 801476e:	4603      	mov	r3, r0
 8014770:	71fb      	strb	r3, [r7, #7]
 8014772:	460b      	mov	r3, r1
 8014774:	71bb      	strb	r3, [r7, #6]
 8014776:	4613      	mov	r3, r2
 8014778:	717b      	strb	r3, [r7, #5]
    switch( region )
 801477a:	79fb      	ldrb	r3, [r7, #7]
 801477c:	2b05      	cmp	r3, #5
 801477e:	d002      	beq.n	8014786 <RegionComputeRxWindowParameters+0x20>
 8014780:	2b08      	cmp	r3, #8
 8014782:	d008      	beq.n	8014796 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8014784:	e00f      	b.n	80147a6 <RegionComputeRxWindowParameters+0x40>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014786:	7979      	ldrb	r1, [r7, #5]
 8014788:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	683a      	ldr	r2, [r7, #0]
 8014790:	f001 fd54 	bl	801623c <RegionEU868ComputeRxWindowParameters>
 8014794:	e007      	b.n	80147a6 <RegionComputeRxWindowParameters+0x40>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8014796:	7979      	ldrb	r1, [r7, #5]
 8014798:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	683a      	ldr	r2, [r7, #0]
 80147a0:	f002 ffae 	bl	8017700 <RegionUS915ComputeRxWindowParameters>
 80147a4:	bf00      	nop
        }
    }
}
 80147a6:	bf00      	nop
 80147a8:	3708      	adds	r7, #8
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}

080147ae <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80147ae:	b580      	push	{r7, lr}
 80147b0:	b084      	sub	sp, #16
 80147b2:	af00      	add	r7, sp, #0
 80147b4:	4603      	mov	r3, r0
 80147b6:	60b9      	str	r1, [r7, #8]
 80147b8:	607a      	str	r2, [r7, #4]
 80147ba:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80147bc:	7bfb      	ldrb	r3, [r7, #15]
 80147be:	2b05      	cmp	r3, #5
 80147c0:	d002      	beq.n	80147c8 <RegionRxConfig+0x1a>
 80147c2:	2b08      	cmp	r3, #8
 80147c4:	d006      	beq.n	80147d4 <RegionRxConfig+0x26>
 80147c6:	e00b      	b.n	80147e0 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80147c8:	6879      	ldr	r1, [r7, #4]
 80147ca:	68b8      	ldr	r0, [r7, #8]
 80147cc:	f001 fd90 	bl	80162f0 <RegionEU868RxConfig>
 80147d0:	4603      	mov	r3, r0
 80147d2:	e006      	b.n	80147e2 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80147d4:	6879      	ldr	r1, [r7, #4]
 80147d6:	68b8      	ldr	r0, [r7, #8]
 80147d8:	f002 ffdc 	bl	8017794 <RegionUS915RxConfig>
 80147dc:	4603      	mov	r3, r0
 80147de:	e000      	b.n	80147e2 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80147e0:	2300      	movs	r3, #0
        }
    }
}
 80147e2:	4618      	mov	r0, r3
 80147e4:	3710      	adds	r7, #16
 80147e6:	46bd      	mov	sp, r7
 80147e8:	bd80      	pop	{r7, pc}

080147ea <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80147ea:	b580      	push	{r7, lr}
 80147ec:	b084      	sub	sp, #16
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	607a      	str	r2, [r7, #4]
 80147f4:	603b      	str	r3, [r7, #0]
 80147f6:	4603      	mov	r3, r0
 80147f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80147fa:	7bfb      	ldrb	r3, [r7, #15]
 80147fc:	2b05      	cmp	r3, #5
 80147fe:	d002      	beq.n	8014806 <RegionTxConfig+0x1c>
 8014800:	2b08      	cmp	r3, #8
 8014802:	d007      	beq.n	8014814 <RegionTxConfig+0x2a>
 8014804:	e00d      	b.n	8014822 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014806:	683a      	ldr	r2, [r7, #0]
 8014808:	6879      	ldr	r1, [r7, #4]
 801480a:	68b8      	ldr	r0, [r7, #8]
 801480c:	f001 fe40 	bl	8016490 <RegionEU868TxConfig>
 8014810:	4603      	mov	r3, r0
 8014812:	e007      	b.n	8014824 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8014814:	683a      	ldr	r2, [r7, #0]
 8014816:	6879      	ldr	r1, [r7, #4]
 8014818:	68b8      	ldr	r0, [r7, #8]
 801481a:	f003 f83f 	bl	801789c <RegionUS915TxConfig>
 801481e:	4603      	mov	r3, r0
 8014820:	e000      	b.n	8014824 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014822:	2300      	movs	r3, #0
        }
    }
}
 8014824:	4618      	mov	r0, r3
 8014826:	3710      	adds	r7, #16
 8014828:	46bd      	mov	sp, r7
 801482a:	bd80      	pop	{r7, pc}

0801482c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b086      	sub	sp, #24
 8014830:	af02      	add	r7, sp, #8
 8014832:	60b9      	str	r1, [r7, #8]
 8014834:	607a      	str	r2, [r7, #4]
 8014836:	603b      	str	r3, [r7, #0]
 8014838:	4603      	mov	r3, r0
 801483a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	2b05      	cmp	r3, #5
 8014840:	d002      	beq.n	8014848 <RegionLinkAdrReq+0x1c>
 8014842:	2b08      	cmp	r3, #8
 8014844:	d00a      	beq.n	801485c <RegionLinkAdrReq+0x30>
 8014846:	e013      	b.n	8014870 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014848:	69fb      	ldr	r3, [r7, #28]
 801484a:	9300      	str	r3, [sp, #0]
 801484c:	69bb      	ldr	r3, [r7, #24]
 801484e:	683a      	ldr	r2, [r7, #0]
 8014850:	6879      	ldr	r1, [r7, #4]
 8014852:	68b8      	ldr	r0, [r7, #8]
 8014854:	f001 feec 	bl	8016630 <RegionEU868LinkAdrReq>
 8014858:	4603      	mov	r3, r0
 801485a:	e00a      	b.n	8014872 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	9300      	str	r3, [sp, #0]
 8014860:	69bb      	ldr	r3, [r7, #24]
 8014862:	683a      	ldr	r2, [r7, #0]
 8014864:	6879      	ldr	r1, [r7, #4]
 8014866:	68b8      	ldr	r0, [r7, #8]
 8014868:	f003 f8c2 	bl	80179f0 <RegionUS915LinkAdrReq>
 801486c:	4603      	mov	r3, r0
 801486e:	e000      	b.n	8014872 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8014870:	2300      	movs	r3, #0
        }
    }
}
 8014872:	4618      	mov	r0, r3
 8014874:	3710      	adds	r7, #16
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}

0801487a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801487a:	b580      	push	{r7, lr}
 801487c:	b082      	sub	sp, #8
 801487e:	af00      	add	r7, sp, #0
 8014880:	4603      	mov	r3, r0
 8014882:	6039      	str	r1, [r7, #0]
 8014884:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014886:	79fb      	ldrb	r3, [r7, #7]
 8014888:	2b05      	cmp	r3, #5
 801488a:	d002      	beq.n	8014892 <RegionRxParamSetupReq+0x18>
 801488c:	2b08      	cmp	r3, #8
 801488e:	d005      	beq.n	801489c <RegionRxParamSetupReq+0x22>
 8014890:	e009      	b.n	80148a6 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8014892:	6838      	ldr	r0, [r7, #0]
 8014894:	f001 ffee 	bl	8016874 <RegionEU868RxParamSetupReq>
 8014898:	4603      	mov	r3, r0
 801489a:	e005      	b.n	80148a8 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801489c:	6838      	ldr	r0, [r7, #0]
 801489e:	f003 fac1 	bl	8017e24 <RegionUS915RxParamSetupReq>
 80148a2:	4603      	mov	r3, r0
 80148a4:	e000      	b.n	80148a8 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80148a6:	2300      	movs	r3, #0
        }
    }
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3708      	adds	r7, #8
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	4603      	mov	r3, r0
 80148b8:	6039      	str	r1, [r7, #0]
 80148ba:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80148bc:	79fb      	ldrb	r3, [r7, #7]
 80148be:	2b05      	cmp	r3, #5
 80148c0:	d002      	beq.n	80148c8 <RegionNewChannelReq+0x18>
 80148c2:	2b08      	cmp	r3, #8
 80148c4:	d005      	beq.n	80148d2 <RegionNewChannelReq+0x22>
 80148c6:	e009      	b.n	80148dc <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80148c8:	6838      	ldr	r0, [r7, #0]
 80148ca:	f002 f811 	bl	80168f0 <RegionEU868NewChannelReq>
 80148ce:	4603      	mov	r3, r0
 80148d0:	e005      	b.n	80148de <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80148d2:	6838      	ldr	r0, [r7, #0]
 80148d4:	f003 faf2 	bl	8017ebc <RegionUS915NewChannelReq>
 80148d8:	4603      	mov	r3, r0
 80148da:	e000      	b.n	80148de <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80148dc:	2300      	movs	r3, #0
        }
    }
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3708      	adds	r7, #8
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}

080148e6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80148e6:	b580      	push	{r7, lr}
 80148e8:	b082      	sub	sp, #8
 80148ea:	af00      	add	r7, sp, #0
 80148ec:	4603      	mov	r3, r0
 80148ee:	6039      	str	r1, [r7, #0]
 80148f0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80148f2:	79fb      	ldrb	r3, [r7, #7]
 80148f4:	2b05      	cmp	r3, #5
 80148f6:	d002      	beq.n	80148fe <RegionTxParamSetupReq+0x18>
 80148f8:	2b08      	cmp	r3, #8
 80148fa:	d005      	beq.n	8014908 <RegionTxParamSetupReq+0x22>
 80148fc:	e009      	b.n	8014912 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80148fe:	6838      	ldr	r0, [r7, #0]
 8014900:	f002 f854 	bl	80169ac <RegionEU868TxParamSetupReq>
 8014904:	4603      	mov	r3, r0
 8014906:	e005      	b.n	8014914 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8014908:	6838      	ldr	r0, [r7, #0]
 801490a:	f003 fae2 	bl	8017ed2 <RegionUS915TxParamSetupReq>
 801490e:	4603      	mov	r3, r0
 8014910:	e000      	b.n	8014914 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8014912:	2300      	movs	r3, #0
        }
    }
}
 8014914:	4618      	mov	r0, r3
 8014916:	3708      	adds	r7, #8
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}

0801491c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b082      	sub	sp, #8
 8014920:	af00      	add	r7, sp, #0
 8014922:	4603      	mov	r3, r0
 8014924:	6039      	str	r1, [r7, #0]
 8014926:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014928:	79fb      	ldrb	r3, [r7, #7]
 801492a:	2b05      	cmp	r3, #5
 801492c:	d002      	beq.n	8014934 <RegionDlChannelReq+0x18>
 801492e:	2b08      	cmp	r3, #8
 8014930:	d005      	beq.n	801493e <RegionDlChannelReq+0x22>
 8014932:	e009      	b.n	8014948 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014934:	6838      	ldr	r0, [r7, #0]
 8014936:	f002 f845 	bl	80169c4 <RegionEU868DlChannelReq>
 801493a:	4603      	mov	r3, r0
 801493c:	e005      	b.n	801494a <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801493e:	6838      	ldr	r0, [r7, #0]
 8014940:	f003 fad2 	bl	8017ee8 <RegionUS915DlChannelReq>
 8014944:	4603      	mov	r3, r0
 8014946:	e000      	b.n	801494a <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014948:	2300      	movs	r3, #0
        }
    }
}
 801494a:	4618      	mov	r0, r3
 801494c:	3708      	adds	r7, #8
 801494e:	46bd      	mov	sp, r7
 8014950:	bd80      	pop	{r7, pc}

08014952 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8014952:	b580      	push	{r7, lr}
 8014954:	b082      	sub	sp, #8
 8014956:	af00      	add	r7, sp, #0
 8014958:	4603      	mov	r3, r0
 801495a:	71fb      	strb	r3, [r7, #7]
 801495c:	460b      	mov	r3, r1
 801495e:	71bb      	strb	r3, [r7, #6]
 8014960:	4613      	mov	r3, r2
 8014962:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014964:	79fb      	ldrb	r3, [r7, #7]
 8014966:	2b05      	cmp	r3, #5
 8014968:	d002      	beq.n	8014970 <RegionAlternateDr+0x1e>
 801496a:	2b08      	cmp	r3, #8
 801496c:	d009      	beq.n	8014982 <RegionAlternateDr+0x30>
 801496e:	e011      	b.n	8014994 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014970:	797a      	ldrb	r2, [r7, #5]
 8014972:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014976:	4611      	mov	r1, r2
 8014978:	4618      	mov	r0, r3
 801497a:	f002 f867 	bl	8016a4c <RegionEU868AlternateDr>
 801497e:	4603      	mov	r3, r0
 8014980:	e009      	b.n	8014996 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8014982:	797a      	ldrb	r2, [r7, #5]
 8014984:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014988:	4611      	mov	r1, r2
 801498a:	4618      	mov	r0, r3
 801498c:	f003 fab8 	bl	8017f00 <RegionUS915AlternateDr>
 8014990:	4603      	mov	r3, r0
 8014992:	e000      	b.n	8014996 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014994:	2300      	movs	r3, #0
        }
    }
}
 8014996:	4618      	mov	r0, r3
 8014998:	3708      	adds	r7, #8
 801499a:	46bd      	mov	sp, r7
 801499c:	bd80      	pop	{r7, pc}

0801499e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801499e:	b580      	push	{r7, lr}
 80149a0:	b084      	sub	sp, #16
 80149a2:	af00      	add	r7, sp, #0
 80149a4:	60b9      	str	r1, [r7, #8]
 80149a6:	607a      	str	r2, [r7, #4]
 80149a8:	603b      	str	r3, [r7, #0]
 80149aa:	4603      	mov	r3, r0
 80149ac:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80149ae:	7bfb      	ldrb	r3, [r7, #15]
 80149b0:	2b05      	cmp	r3, #5
 80149b2:	d002      	beq.n	80149ba <RegionNextChannel+0x1c>
 80149b4:	2b08      	cmp	r3, #8
 80149b6:	d008      	beq.n	80149ca <RegionNextChannel+0x2c>
 80149b8:	e00f      	b.n	80149da <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80149ba:	69bb      	ldr	r3, [r7, #24]
 80149bc:	683a      	ldr	r2, [r7, #0]
 80149be:	6879      	ldr	r1, [r7, #4]
 80149c0:	68b8      	ldr	r0, [r7, #8]
 80149c2:	f002 f853 	bl	8016a6c <RegionEU868NextChannel>
 80149c6:	4603      	mov	r3, r0
 80149c8:	e008      	b.n	80149dc <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	683a      	ldr	r2, [r7, #0]
 80149ce:	6879      	ldr	r1, [r7, #4]
 80149d0:	68b8      	ldr	r0, [r7, #8]
 80149d2:	f003 facb 	bl	8017f6c <RegionUS915NextChannel>
 80149d6:	4603      	mov	r3, r0
 80149d8:	e000      	b.n	80149dc <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80149da:	2309      	movs	r3, #9
        }
    }
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3710      	adds	r7, #16
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80149e4:	b590      	push	{r4, r7, lr}
 80149e6:	b083      	sub	sp, #12
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	4604      	mov	r4, r0
 80149ec:	4608      	mov	r0, r1
 80149ee:	4611      	mov	r1, r2
 80149f0:	461a      	mov	r2, r3
 80149f2:	4623      	mov	r3, r4
 80149f4:	71fb      	strb	r3, [r7, #7]
 80149f6:	4603      	mov	r3, r0
 80149f8:	71bb      	strb	r3, [r7, #6]
 80149fa:	460b      	mov	r3, r1
 80149fc:	717b      	strb	r3, [r7, #5]
 80149fe:	4613      	mov	r3, r2
 8014a00:	713b      	strb	r3, [r7, #4]
    switch( region )
 8014a02:	79fb      	ldrb	r3, [r7, #7]
 8014a04:	2b05      	cmp	r3, #5
 8014a06:	d002      	beq.n	8014a0e <RegionApplyDrOffset+0x2a>
 8014a08:	2b08      	cmp	r3, #8
 8014a0a:	d00a      	beq.n	8014a22 <RegionApplyDrOffset+0x3e>
 8014a0c:	e013      	b.n	8014a36 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8014a0e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014a12:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014a16:	79bb      	ldrb	r3, [r7, #6]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f002 f9a1 	bl	8016d60 <RegionEU868ApplyDrOffset>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	e00a      	b.n	8014a38 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8014a22:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8014a26:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014a2a:	79bb      	ldrb	r3, [r7, #6]
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f003 fb8b 	bl	8018148 <RegionUS915ApplyDrOffset>
 8014a32:	4603      	mov	r3, r0
 8014a34:	e000      	b.n	8014a38 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8014a36:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	370c      	adds	r7, #12
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd90      	pop	{r4, r7, pc}

08014a40 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8014a46:	4b04      	ldr	r3, [pc, #16]	; (8014a58 <RegionGetVersion+0x18>)
 8014a48:	607b      	str	r3, [r7, #4]

    return version;
 8014a4a:	687b      	ldr	r3, [r7, #4]
}
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	370c      	adds	r7, #12
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bc80      	pop	{r7}
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop
 8014a58:	02010001 	.word	0x02010001

08014a5c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8014a5c:	b480      	push	{r7}
 8014a5e:	b087      	sub	sp, #28
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	4603      	mov	r3, r0
 8014a64:	60b9      	str	r1, [r7, #8]
 8014a66:	607a      	str	r2, [r7, #4]
 8014a68:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d002      	beq.n	8014a76 <FindAvailable125kHzChannels+0x1a>
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d101      	bne.n	8014a7a <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a76:	2303      	movs	r3, #3
 8014a78:	e021      	b.n	8014abe <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	2200      	movs	r2, #0
 8014a7e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014a80:	2300      	movs	r3, #0
 8014a82:	75fb      	strb	r3, [r7, #23]
 8014a84:	e017      	b.n	8014ab6 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8014a86:	89fa      	ldrh	r2, [r7, #14]
 8014a88:	7dfb      	ldrb	r3, [r7, #23]
 8014a8a:	fa42 f303 	asr.w	r3, r2, r3
 8014a8e:	f003 0301 	and.w	r3, r3, #1
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d00c      	beq.n	8014ab0 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	781b      	ldrb	r3, [r3, #0]
 8014a9a:	461a      	mov	r2, r3
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	4413      	add	r3, r2
 8014aa0:	7dfa      	ldrb	r2, [r7, #23]
 8014aa2:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	b2da      	uxtb	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8014ab0:	7dfb      	ldrb	r3, [r7, #23]
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	75fb      	strb	r3, [r7, #23]
 8014ab6:	7dfb      	ldrb	r3, [r7, #23]
 8014ab8:	2b07      	cmp	r3, #7
 8014aba:	d9e4      	bls.n	8014a86 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8014abc:	2300      	movs	r3, #0
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	371c      	adds	r7, #28
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bc80      	pop	{r7}
 8014ac6:	4770      	bx	lr

08014ac8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8014ac8:	b590      	push	{r4, r7, lr}
 8014aca:	b089      	sub	sp, #36	; 0x24
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	617b      	str	r3, [r7, #20]
 8014ad8:	2300      	movs	r3, #0
 8014ada:	61bb      	str	r3, [r7, #24]
    uint8_t availableChannels = 0;
 8014adc:	2300      	movs	r3, #0
 8014ade:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d005      	beq.n	8014af2 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8014ae6:	68bb      	ldr	r3, [r7, #8]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d002      	beq.n	8014af2 <RegionBaseUSComputeNext125kHzJoinChannel+0x2a>
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d101      	bne.n	8014af6 <RegionBaseUSComputeNext125kHzJoinChannel+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014af2:	2303      	movs	r3, #3
 8014af4:	e055      	b.n	8014ba2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8014afc:	7f7b      	ldrb	r3, [r7, #29]
 8014afe:	085b      	lsrs	r3, r3, #1
 8014b00:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8014b02:	7f7b      	ldrb	r3, [r7, #29]
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	b2db      	uxtb	r3, r3
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d107      	bne.n	8014b1e <RegionBaseUSComputeNext125kHzJoinChannel+0x56>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8014b0e:	7f3b      	ldrb	r3, [r7, #28]
 8014b10:	005b      	lsls	r3, r3, #1
 8014b12:	68fa      	ldr	r2, [r7, #12]
 8014b14:	4413      	add	r3, r2
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	b2db      	uxtb	r3, r3
 8014b1a:	83fb      	strh	r3, [r7, #30]
 8014b1c:	e006      	b.n	8014b2c <RegionBaseUSComputeNext125kHzJoinChannel+0x64>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8014b1e:	7f3b      	ldrb	r3, [r7, #28]
 8014b20:	005b      	lsls	r3, r3, #1
 8014b22:	68fa      	ldr	r2, [r7, #12]
 8014b24:	4413      	add	r3, r2
 8014b26:	881b      	ldrh	r3, [r3, #0]
 8014b28:	0a1b      	lsrs	r3, r3, #8
 8014b2a:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8014b2c:	f107 0213 	add.w	r2, r7, #19
 8014b30:	f107 0114 	add.w	r1, r7, #20
 8014b34:	8bfb      	ldrh	r3, [r7, #30]
 8014b36:	4618      	mov	r0, r3
 8014b38:	f7ff ff90 	bl	8014a5c <FindAvailable125kHzChannels>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	2b03      	cmp	r3, #3
 8014b40:	d101      	bne.n	8014b46 <RegionBaseUSComputeNext125kHzJoinChannel+0x7e>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8014b42:	2303      	movs	r3, #3
 8014b44:	e02d      	b.n	8014ba2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
        }

        if ( availableChannels > 0 )
 8014b46:	7cfb      	ldrb	r3, [r7, #19]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d011      	beq.n	8014b70 <RegionBaseUSComputeNext125kHzJoinChannel+0xa8>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8014b4c:	7f7b      	ldrb	r3, [r7, #29]
 8014b4e:	00db      	lsls	r3, r3, #3
 8014b50:	b2dc      	uxtb	r4, r3
 8014b52:	7cfb      	ldrb	r3, [r7, #19]
 8014b54:	3b01      	subs	r3, #1
 8014b56:	4619      	mov	r1, r3
 8014b58:	2000      	movs	r0, #0
 8014b5a:	f003 fb47 	bl	80181ec <randr>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	3320      	adds	r3, #32
 8014b62:	443b      	add	r3, r7
 8014b64:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8014b68:	4423      	add	r3, r4
 8014b6a:	b2da      	uxtb	r2, r3
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8014b70:	7f7b      	ldrb	r3, [r7, #29]
 8014b72:	3301      	adds	r3, #1
 8014b74:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8014b76:	7f7b      	ldrb	r3, [r7, #29]
 8014b78:	2b07      	cmp	r3, #7
 8014b7a:	d901      	bls.n	8014b80 <RegionBaseUSComputeNext125kHzJoinChannel+0xb8>
        {
            startIndex = 0;
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8014b80:	7cfb      	ldrb	r3, [r7, #19]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d104      	bne.n	8014b90 <RegionBaseUSComputeNext125kHzJoinChannel+0xc8>
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	7f7a      	ldrb	r2, [r7, #29]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d1b5      	bne.n	8014afc <RegionBaseUSComputeNext125kHzJoinChannel+0x34>

    if ( availableChannels > 0 )
 8014b90:	7cfb      	ldrb	r3, [r7, #19]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d004      	beq.n	8014ba0 <RegionBaseUSComputeNext125kHzJoinChannel+0xd8>
    {
        *groupsCurrentIndex = startIndex;
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	7f7a      	ldrb	r2, [r7, #29]
 8014b9a:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	e000      	b.n	8014ba2 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014ba0:	2303      	movs	r3, #3
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	3724      	adds	r7, #36	; 0x24
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd90      	pop	{r4, r7, pc}

08014baa <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8014baa:	b480      	push	{r7}
 8014bac:	b085      	sub	sp, #20
 8014bae:	af00      	add	r7, sp, #0
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	60b9      	str	r1, [r7, #8]
 8014bb4:	607a      	str	r2, [r7, #4]
 8014bb6:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8014bb8:	7bfb      	ldrb	r3, [r7, #15]
 8014bba:	687a      	ldr	r2, [r7, #4]
 8014bbc:	fb03 f202 	mul.w	r2, r3, r2
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	4413      	add	r3, r2
}
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	3714      	adds	r7, #20
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bc80      	pop	{r7}
 8014bcc:	4770      	bx	lr

08014bce <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014bce:	b480      	push	{r7}
 8014bd0:	b087      	sub	sp, #28
 8014bd2:	af00      	add	r7, sp, #0
 8014bd4:	60f8      	str	r0, [r7, #12]
 8014bd6:	4608      	mov	r0, r1
 8014bd8:	4639      	mov	r1, r7
 8014bda:	e881 000c 	stmia.w	r1, {r2, r3}
 8014bde:	4603      	mov	r3, r0
 8014be0:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	881b      	ldrh	r3, [r3, #0]
 8014be6:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014be8:	7afb      	ldrb	r3, [r7, #11]
 8014bea:	f083 0301 	eor.w	r3, r3, #1
 8014bee:	b2db      	uxtb	r3, r3
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d01b      	beq.n	8014c2c <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014bf4:	f242 7310 	movw	r3, #10000	; 0x2710
 8014bf8:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014bfa:	683b      	ldr	r3, [r7, #0]
 8014bfc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8014c00:	d202      	bcs.n	8014c08 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014c02:	2364      	movs	r3, #100	; 0x64
 8014c04:	82bb      	strh	r3, [r7, #20]
 8014c06:	e00b      	b.n	8014c20 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014c08:	683b      	ldr	r3, [r7, #0]
 8014c0a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8014c0e:	4293      	cmp	r3, r2
 8014c10:	d803      	bhi.n	8014c1a <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014c16:	82bb      	strh	r3, [r7, #20]
 8014c18:	e002      	b.n	8014c20 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014c1a:	f242 7310 	movw	r3, #10000	; 0x2710
 8014c1e:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014c20:	8aba      	ldrh	r2, [r7, #20]
 8014c22:	8afb      	ldrh	r3, [r7, #22]
 8014c24:	4293      	cmp	r3, r2
 8014c26:	bf38      	it	cc
 8014c28:	4613      	movcc	r3, r2
 8014c2a:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8014c2c:	8afb      	ldrh	r3, [r7, #22]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d101      	bne.n	8014c36 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014c32:	2301      	movs	r3, #1
 8014c34:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014c36:	8afb      	ldrh	r3, [r7, #22]
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	371c      	adds	r7, #28
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	bc80      	pop	{r7}
 8014c40:	4770      	bx	lr
	...

08014c44 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b08e      	sub	sp, #56	; 0x38
 8014c48:	af02      	add	r7, sp, #8
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	4608      	mov	r0, r1
 8014c4e:	4639      	mov	r1, r7
 8014c50:	e881 000c 	stmia.w	r1, {r2, r3}
 8014c54:	4603      	mov	r3, r0
 8014c56:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	881b      	ldrh	r3, [r3, #0]
 8014c5c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014c5e:	4b4b      	ldr	r3, [pc, #300]	; (8014d8c <SetMaxTimeCredits+0x148>)
 8014c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8014c62:	463b      	mov	r3, r7
 8014c64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014c68:	f006 ff0e 	bl	801ba88 <SysTimeToMs>
 8014c6c:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8014c6e:	f107 0314 	add.w	r3, r7, #20
 8014c72:	2200      	movs	r2, #0
 8014c74:	601a      	str	r2, [r3, #0]
 8014c76:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014c78:	7af9      	ldrb	r1, [r7, #11]
 8014c7a:	463b      	mov	r3, r7
 8014c7c:	cb0c      	ldmia	r3, {r2, r3}
 8014c7e:	68f8      	ldr	r0, [r7, #12]
 8014c80:	f7ff ffa5 	bl	8014bce <GetDutyCycle>
 8014c84:	4603      	mov	r3, r0
 8014c86:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8014c88:	7afb      	ldrb	r3, [r7, #11]
 8014c8a:	f083 0301 	eor.w	r3, r3, #1
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d062      	beq.n	8014d5a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014c94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c96:	2b64      	cmp	r3, #100	; 0x64
 8014c98:	d105      	bne.n	8014ca6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8014c9a:	4b3c      	ldr	r3, [pc, #240]	; (8014d8c <SetMaxTimeCredits+0x148>)
 8014c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ca2:	609a      	str	r2, [r3, #8]
 8014ca4:	e00b      	b.n	8014cbe <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014ca6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014cac:	d105      	bne.n	8014cba <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8014cae:	4b38      	ldr	r3, [pc, #224]	; (8014d90 <SetMaxTimeCredits+0x14c>)
 8014cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cb6:	609a      	str	r2, [r3, #8]
 8014cb8:	e001      	b.n	8014cbe <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8014cba:	4b36      	ldr	r3, [pc, #216]	; (8014d94 <SetMaxTimeCredits+0x150>)
 8014cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	689a      	ldr	r2, [r3, #8]
 8014cc2:	f107 031c 	add.w	r3, r7, #28
 8014cc6:	4611      	mov	r1, r2
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f006 ff05 	bl	801bad8 <SysTimeFromMs>
 8014cce:	f107 0014 	add.w	r0, r7, #20
 8014cd2:	6a3b      	ldr	r3, [r7, #32]
 8014cd4:	9300      	str	r3, [sp, #0]
 8014cd6:	69fb      	ldr	r3, [r7, #28]
 8014cd8:	463a      	mov	r2, r7
 8014cda:	ca06      	ldmia	r2, {r1, r2}
 8014cdc:	f006 fe15 	bl	801b90a <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014ce0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014ce4:	f083 0301 	eor.w	r3, r3, #1
 8014ce8:	b2db      	uxtb	r3, r3
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d006      	beq.n	8014cfc <SetMaxTimeCredits+0xb8>
 8014cee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8014cf2:	f083 0301 	eor.w	r3, r3, #1
 8014cf6:	b2db      	uxtb	r3, r3
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d108      	bne.n	8014d0e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d02:	429a      	cmp	r2, r3
 8014d04:	d103      	bne.n	8014d0e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014d06:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014d08:	4a23      	ldr	r2, [pc, #140]	; (8014d98 <SetMaxTimeCredits+0x154>)
 8014d0a:	4293      	cmp	r3, r2
 8014d0c:	d92f      	bls.n	8014d6e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d12:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	4a21      	ldr	r2, [pc, #132]	; (8014d9c <SetMaxTimeCredits+0x158>)
 8014d18:	4293      	cmp	r3, r2
 8014d1a:	d928      	bls.n	8014d6e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014d1c:	683b      	ldr	r3, [r7, #0]
 8014d1e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8014d22:	3b30      	subs	r3, #48	; 0x30
 8014d24:	4a1e      	ldr	r2, [pc, #120]	; (8014da0 <SetMaxTimeCredits+0x15c>)
 8014d26:	fba2 2303 	umull	r2, r3, r2, r3
 8014d2a:	0c1b      	lsrs	r3, r3, #16
 8014d2c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	4a1c      	ldr	r2, [pc, #112]	; (8014da4 <SetMaxTimeCredits+0x160>)
 8014d32:	fb02 f303 	mul.w	r3, r2, r3
 8014d36:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8014d3e:	3330      	adds	r3, #48	; 0x30
 8014d40:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8014d42:	2300      	movs	r3, #0
 8014d44:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014d46:	f107 0314 	add.w	r3, r7, #20
 8014d4a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014d4e:	f006 fe9b 	bl	801ba88 <SysTimeToMs>
 8014d52:	4602      	mov	r2, r0
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	609a      	str	r2, [r3, #8]
 8014d58:	e009      	b.n	8014d6e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014d5a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8014d5e:	f083 0301 	eor.w	r3, r3, #1
 8014d62:	b2db      	uxtb	r3, r3
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d002      	beq.n	8014d6e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d6c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d102      	bne.n	8014d7c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d7a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d80:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8014d82:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3730      	adds	r7, #48	; 0x30
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	001b7740 	.word	0x001b7740
 8014d90:	0112a880 	.word	0x0112a880
 8014d94:	02932e00 	.word	0x02932e00
 8014d98:	0001517f 	.word	0x0001517f
 8014d9c:	0001ec2f 	.word	0x0001ec2f
 8014da0:	c22e4507 	.word	0xc22e4507
 8014da4:	00015180 	.word	0x00015180

08014da8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b086      	sub	sp, #24
 8014dac:	af02      	add	r7, sp, #8
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	4608      	mov	r0, r1
 8014db2:	4611      	mov	r1, r2
 8014db4:	461a      	mov	r2, r3
 8014db6:	4603      	mov	r3, r0
 8014db8:	70fb      	strb	r3, [r7, #3]
 8014dba:	460b      	mov	r3, r1
 8014dbc:	70bb      	strb	r3, [r7, #2]
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8014dc2:	78f9      	ldrb	r1, [r7, #3]
 8014dc4:	787b      	ldrb	r3, [r7, #1]
 8014dc6:	9301      	str	r3, [sp, #4]
 8014dc8:	78bb      	ldrb	r3, [r7, #2]
 8014dca:	9300      	str	r3, [sp, #0]
 8014dcc:	f107 0318 	add.w	r3, r7, #24
 8014dd0:	cb0c      	ldmia	r3, {r2, r3}
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7ff ff36 	bl	8014c44 <SetMaxTimeCredits>
 8014dd8:	4603      	mov	r3, r0
 8014dda:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014ddc:	78fb      	ldrb	r3, [r7, #3]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d00a      	beq.n	8014df8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	685b      	ldr	r3, [r3, #4]
 8014de6:	4618      	mov	r0, r3
 8014de8:	f007 fc8e 	bl	801c708 <UTIL_TIMER_GetElapsedTime>
 8014dec:	4602      	mov	r2, r0
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	68db      	ldr	r3, [r3, #12]
 8014df2:	441a      	add	r2, r3
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	68da      	ldr	r2, [r3, #12]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	691b      	ldr	r3, [r3, #16]
 8014e00:	429a      	cmp	r2, r3
 8014e02:	d903      	bls.n	8014e0c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	691a      	ldr	r2, [r3, #16]
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	6a3a      	ldr	r2, [r7, #32]
 8014e10:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014e12:	89fb      	ldrh	r3, [r7, #14]
}
 8014e14:	4618      	mov	r0, r3
 8014e16:	3710      	adds	r7, #16
 8014e18:	46bd      	mov	sp, r7
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b085      	sub	sp, #20
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	4603      	mov	r3, r0
 8014e24:	460a      	mov	r2, r1
 8014e26:	80fb      	strh	r3, [r7, #6]
 8014e28:	4613      	mov	r3, r2
 8014e2a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014e30:	2300      	movs	r3, #0
 8014e32:	73bb      	strb	r3, [r7, #14]
 8014e34:	e011      	b.n	8014e5a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014e36:	88fa      	ldrh	r2, [r7, #6]
 8014e38:	7bbb      	ldrb	r3, [r7, #14]
 8014e3a:	2101      	movs	r1, #1
 8014e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8014e40:	401a      	ands	r2, r3
 8014e42:	7bbb      	ldrb	r3, [r7, #14]
 8014e44:	2101      	movs	r1, #1
 8014e46:	fa01 f303 	lsl.w	r3, r1, r3
 8014e4a:	429a      	cmp	r2, r3
 8014e4c:	d102      	bne.n	8014e54 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014e4e:	7bfb      	ldrb	r3, [r7, #15]
 8014e50:	3301      	adds	r3, #1
 8014e52:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014e54:	7bbb      	ldrb	r3, [r7, #14]
 8014e56:	3301      	adds	r3, #1
 8014e58:	73bb      	strb	r3, [r7, #14]
 8014e5a:	7bba      	ldrb	r2, [r7, #14]
 8014e5c:	797b      	ldrb	r3, [r7, #5]
 8014e5e:	429a      	cmp	r2, r3
 8014e60:	d3e9      	bcc.n	8014e36 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	3714      	adds	r7, #20
 8014e68:	46bd      	mov	sp, r7
 8014e6a:	bc80      	pop	{r7}
 8014e6c:	4770      	bx	lr

08014e6e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014e6e:	b580      	push	{r7, lr}
 8014e70:	b084      	sub	sp, #16
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6039      	str	r1, [r7, #0]
 8014e76:	4611      	mov	r1, r2
 8014e78:	461a      	mov	r2, r3
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	71fb      	strb	r3, [r7, #7]
 8014e7e:	460b      	mov	r3, r1
 8014e80:	71bb      	strb	r3, [r7, #6]
 8014e82:	4613      	mov	r3, r2
 8014e84:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014e86:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014e8a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014e8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014e92:	4618      	mov	r0, r3
 8014e94:	f000 f85d 	bl	8014f52 <RegionCommonValueInRange>
 8014e98:	4603      	mov	r3, r0
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d101      	bne.n	8014ea2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	e053      	b.n	8014f4a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	73fb      	strb	r3, [r7, #15]
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	73bb      	strb	r3, [r7, #14]
 8014eaa:	e049      	b.n	8014f40 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014eac:	2300      	movs	r3, #0
 8014eae:	737b      	strb	r3, [r7, #13]
 8014eb0:	e03d      	b.n	8014f2e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014eb2:	7bbb      	ldrb	r3, [r7, #14]
 8014eb4:	005b      	lsls	r3, r3, #1
 8014eb6:	683a      	ldr	r2, [r7, #0]
 8014eb8:	4413      	add	r3, r2
 8014eba:	881b      	ldrh	r3, [r3, #0]
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	7b7b      	ldrb	r3, [r7, #13]
 8014ec0:	fa42 f303 	asr.w	r3, r2, r3
 8014ec4:	f003 0301 	and.w	r3, r3, #1
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d02d      	beq.n	8014f28 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014ecc:	7bfa      	ldrb	r2, [r7, #15]
 8014ece:	7b7b      	ldrb	r3, [r7, #13]
 8014ed0:	4413      	add	r3, r2
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	4613      	mov	r3, r2
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	4413      	add	r3, r2
 8014eda:	009b      	lsls	r3, r3, #2
 8014edc:	461a      	mov	r2, r3
 8014ede:	69fb      	ldr	r3, [r7, #28]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	7a1b      	ldrb	r3, [r3, #8]
 8014ee4:	f343 0303 	sbfx	r3, r3, #0, #4
 8014ee8:	b25b      	sxtb	r3, r3
 8014eea:	f003 030f 	and.w	r3, r3, #15
 8014eee:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014ef0:	7bfa      	ldrb	r2, [r7, #15]
 8014ef2:	7b7b      	ldrb	r3, [r7, #13]
 8014ef4:	4413      	add	r3, r2
 8014ef6:	461a      	mov	r2, r3
 8014ef8:	4613      	mov	r3, r2
 8014efa:	005b      	lsls	r3, r3, #1
 8014efc:	4413      	add	r3, r2
 8014efe:	009b      	lsls	r3, r3, #2
 8014f00:	461a      	mov	r2, r3
 8014f02:	69fb      	ldr	r3, [r7, #28]
 8014f04:	4413      	add	r3, r2
 8014f06:	7a1b      	ldrb	r3, [r3, #8]
 8014f08:	f343 1303 	sbfx	r3, r3, #4, #4
 8014f0c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014f0e:	f003 030f 	and.w	r3, r3, #15
 8014f12:	b25a      	sxtb	r2, r3
 8014f14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f000 f81a 	bl	8014f52 <RegionCommonValueInRange>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	2b01      	cmp	r3, #1
 8014f22:	d101      	bne.n	8014f28 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014f24:	2301      	movs	r3, #1
 8014f26:	e010      	b.n	8014f4a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014f28:	7b7b      	ldrb	r3, [r7, #13]
 8014f2a:	3301      	adds	r3, #1
 8014f2c:	737b      	strb	r3, [r7, #13]
 8014f2e:	7b7b      	ldrb	r3, [r7, #13]
 8014f30:	2b0f      	cmp	r3, #15
 8014f32:	d9be      	bls.n	8014eb2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014f34:	7bfb      	ldrb	r3, [r7, #15]
 8014f36:	3310      	adds	r3, #16
 8014f38:	73fb      	strb	r3, [r7, #15]
 8014f3a:	7bbb      	ldrb	r3, [r7, #14]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	73bb      	strb	r3, [r7, #14]
 8014f40:	7bfa      	ldrb	r2, [r7, #15]
 8014f42:	79fb      	ldrb	r3, [r7, #7]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d3b1      	bcc.n	8014eac <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014f48:	2300      	movs	r3, #0
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014f52:	b480      	push	{r7}
 8014f54:	b083      	sub	sp, #12
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	4603      	mov	r3, r0
 8014f5a:	71fb      	strb	r3, [r7, #7]
 8014f5c:	460b      	mov	r3, r1
 8014f5e:	71bb      	strb	r3, [r7, #6]
 8014f60:	4613      	mov	r3, r2
 8014f62:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014f64:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014f68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	db07      	blt.n	8014f80 <RegionCommonValueInRange+0x2e>
 8014f70:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014f74:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	dc01      	bgt.n	8014f80 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	e000      	b.n	8014f82 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014f80:	2300      	movs	r3, #0
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	370c      	adds	r7, #12
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bc80      	pop	{r7}
 8014f8a:	4770      	bx	lr

08014f8c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014f8c:	b480      	push	{r7}
 8014f8e:	b085      	sub	sp, #20
 8014f90:	af00      	add	r7, sp, #0
 8014f92:	6078      	str	r0, [r7, #4]
 8014f94:	460b      	mov	r3, r1
 8014f96:	70fb      	strb	r3, [r7, #3]
 8014f98:	4613      	mov	r3, r2
 8014f9a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014f9c:	78fb      	ldrb	r3, [r7, #3]
 8014f9e:	091b      	lsrs	r3, r3, #4
 8014fa0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014fa2:	78bb      	ldrb	r3, [r7, #2]
 8014fa4:	091b      	lsrs	r3, r3, #4
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	7bfa      	ldrb	r2, [r7, #15]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d803      	bhi.n	8014fb6 <RegionCommonChanDisable+0x2a>
 8014fae:	78fa      	ldrb	r2, [r7, #3]
 8014fb0:	78bb      	ldrb	r3, [r7, #2]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	d301      	bcc.n	8014fba <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014fb6:	2300      	movs	r3, #0
 8014fb8:	e017      	b.n	8014fea <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014fba:	7bfb      	ldrb	r3, [r7, #15]
 8014fbc:	005b      	lsls	r3, r3, #1
 8014fbe:	687a      	ldr	r2, [r7, #4]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	b21a      	sxth	r2, r3
 8014fc6:	78fb      	ldrb	r3, [r7, #3]
 8014fc8:	f003 030f 	and.w	r3, r3, #15
 8014fcc:	2101      	movs	r1, #1
 8014fce:	fa01 f303 	lsl.w	r3, r1, r3
 8014fd2:	b21b      	sxth	r3, r3
 8014fd4:	43db      	mvns	r3, r3
 8014fd6:	b21b      	sxth	r3, r3
 8014fd8:	4013      	ands	r3, r2
 8014fda:	b219      	sxth	r1, r3
 8014fdc:	7bfb      	ldrb	r3, [r7, #15]
 8014fde:	005b      	lsls	r3, r3, #1
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	4413      	add	r3, r2
 8014fe4:	b28a      	uxth	r2, r1
 8014fe6:	801a      	strh	r2, [r3, #0]

    return true;
 8014fe8:	2301      	movs	r3, #1
}
 8014fea:	4618      	mov	r0, r3
 8014fec:	3714      	adds	r7, #20
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bc80      	pop	{r7}
 8014ff2:	4770      	bx	lr

08014ff4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b084      	sub	sp, #16
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	70fb      	strb	r3, [r7, #3]
 8015000:	4613      	mov	r3, r2
 8015002:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015004:	2300      	movs	r3, #0
 8015006:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d101      	bne.n	8015012 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801500e:	2300      	movs	r3, #0
 8015010:	e018      	b.n	8015044 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015012:	78fb      	ldrb	r3, [r7, #3]
 8015014:	73bb      	strb	r3, [r7, #14]
 8015016:	e010      	b.n	801503a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015018:	7bbb      	ldrb	r3, [r7, #14]
 801501a:	005b      	lsls	r3, r3, #1
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	4413      	add	r3, r2
 8015020:	881b      	ldrh	r3, [r3, #0]
 8015022:	2110      	movs	r1, #16
 8015024:	4618      	mov	r0, r3
 8015026:	f7ff fef9 	bl	8014e1c <CountChannels>
 801502a:	4603      	mov	r3, r0
 801502c:	461a      	mov	r2, r3
 801502e:	7bfb      	ldrb	r3, [r7, #15]
 8015030:	4413      	add	r3, r2
 8015032:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015034:	7bbb      	ldrb	r3, [r7, #14]
 8015036:	3301      	adds	r3, #1
 8015038:	73bb      	strb	r3, [r7, #14]
 801503a:	7bba      	ldrb	r2, [r7, #14]
 801503c:	78bb      	ldrb	r3, [r7, #2]
 801503e:	429a      	cmp	r2, r3
 8015040:	d3ea      	bcc.n	8015018 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015042:	7bfb      	ldrb	r3, [r7, #15]
}
 8015044:	4618      	mov	r0, r3
 8015046:	3710      	adds	r7, #16
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 801504c:	b480      	push	{r7}
 801504e:	b087      	sub	sp, #28
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	60b9      	str	r1, [r7, #8]
 8015056:	4613      	mov	r3, r2
 8015058:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d016      	beq.n	801508e <RegionCommonChanMaskCopy+0x42>
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d013      	beq.n	801508e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015066:	2300      	movs	r3, #0
 8015068:	75fb      	strb	r3, [r7, #23]
 801506a:	e00c      	b.n	8015086 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 801506c:	7dfb      	ldrb	r3, [r7, #23]
 801506e:	005b      	lsls	r3, r3, #1
 8015070:	68ba      	ldr	r2, [r7, #8]
 8015072:	441a      	add	r2, r3
 8015074:	7dfb      	ldrb	r3, [r7, #23]
 8015076:	005b      	lsls	r3, r3, #1
 8015078:	68f9      	ldr	r1, [r7, #12]
 801507a:	440b      	add	r3, r1
 801507c:	8812      	ldrh	r2, [r2, #0]
 801507e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015080:	7dfb      	ldrb	r3, [r7, #23]
 8015082:	3301      	adds	r3, #1
 8015084:	75fb      	strb	r3, [r7, #23]
 8015086:	7dfa      	ldrb	r2, [r7, #23]
 8015088:	79fb      	ldrb	r3, [r7, #7]
 801508a:	429a      	cmp	r2, r3
 801508c:	d3ee      	bcc.n	801506c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 801508e:	bf00      	nop
 8015090:	371c      	adds	r7, #28
 8015092:	46bd      	mov	sp, r7
 8015094:	bc80      	pop	{r7}
 8015096:	4770      	bx	lr

08015098 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015098:	b082      	sub	sp, #8
 801509a:	b580      	push	{r7, lr}
 801509c:	b086      	sub	sp, #24
 801509e:	af00      	add	r7, sp, #0
 80150a0:	60f8      	str	r0, [r7, #12]
 80150a2:	60b9      	str	r1, [r7, #8]
 80150a4:	627b      	str	r3, [r7, #36]	; 0x24
 80150a6:	4613      	mov	r3, r2
 80150a8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80150aa:	79f9      	ldrb	r1, [r7, #7]
 80150ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150b0:	cb0c      	ldmia	r3, {r2, r3}
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f7ff fd8b 	bl	8014bce <GetDutyCycle>
 80150b8:	4603      	mov	r3, r0
 80150ba:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	68da      	ldr	r2, [r3, #12]
 80150c0:	8afb      	ldrh	r3, [r7, #22]
 80150c2:	68b9      	ldr	r1, [r7, #8]
 80150c4:	fb01 f303 	mul.w	r3, r1, r3
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d909      	bls.n	80150e0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	68da      	ldr	r2, [r3, #12]
 80150d0:	8afb      	ldrh	r3, [r7, #22]
 80150d2:	68b9      	ldr	r1, [r7, #8]
 80150d4:	fb01 f303 	mul.w	r3, r1, r3
 80150d8:	1ad2      	subs	r2, r2, r3
 80150da:	68fb      	ldr	r3, [r7, #12]
 80150dc:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80150de:	e002      	b.n	80150e6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	2200      	movs	r2, #0
 80150e4:	60da      	str	r2, [r3, #12]
}
 80150e6:	bf00      	nop
 80150e8:	3718      	adds	r7, #24
 80150ea:	46bd      	mov	sp, r7
 80150ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80150f0:	b002      	add	sp, #8
 80150f2:	4770      	bx	lr

080150f4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80150f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150f6:	b08f      	sub	sp, #60	; 0x3c
 80150f8:	af04      	add	r7, sp, #16
 80150fa:	6039      	str	r1, [r7, #0]
 80150fc:	4611      	mov	r1, r2
 80150fe:	461a      	mov	r2, r3
 8015100:	4603      	mov	r3, r0
 8015102:	71fb      	strb	r3, [r7, #7]
 8015104:	460b      	mov	r3, r1
 8015106:	71bb      	strb	r3, [r7, #6]
 8015108:	4613      	mov	r3, r2
 801510a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801510c:	f04f 33ff 	mov.w	r3, #4294967295
 8015110:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015112:	f007 fae7 	bl	801c6e4 <UTIL_TIMER_GetCurrentTime>
 8015116:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015118:	2300      	movs	r3, #0
 801511a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801511c:	2301      	movs	r3, #1
 801511e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015120:	2300      	movs	r3, #0
 8015122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015126:	2300      	movs	r3, #0
 8015128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801512c:	e0ba      	b.n	80152a4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801512e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015132:	4613      	mov	r3, r2
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	4413      	add	r3, r2
 8015138:	00db      	lsls	r3, r3, #3
 801513a:	461a      	mov	r2, r3
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	189c      	adds	r4, r3, r2
 8015140:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015144:	797a      	ldrb	r2, [r7, #5]
 8015146:	79fd      	ldrb	r5, [r7, #7]
 8015148:	69fb      	ldr	r3, [r7, #28]
 801514a:	9302      	str	r3, [sp, #8]
 801514c:	46ec      	mov	ip, sp
 801514e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015152:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015156:	e88c 0003 	stmia.w	ip, {r0, r1}
 801515a:	4633      	mov	r3, r6
 801515c:	4629      	mov	r1, r5
 801515e:	4620      	mov	r0, r4
 8015160:	f7ff fe22 	bl	8014da8 <UpdateTimeCredits>
 8015164:	4603      	mov	r3, r0
 8015166:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015168:	8afa      	ldrh	r2, [r7, #22]
 801516a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801516c:	fb02 f303 	mul.w	r3, r2, r3
 8015170:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015172:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015176:	4613      	mov	r3, r2
 8015178:	005b      	lsls	r3, r3, #1
 801517a:	4413      	add	r3, r2
 801517c:	00db      	lsls	r3, r3, #3
 801517e:	461a      	mov	r2, r3
 8015180:	683b      	ldr	r3, [r7, #0]
 8015182:	4413      	add	r3, r2
 8015184:	68db      	ldr	r3, [r3, #12]
 8015186:	69ba      	ldr	r2, [r7, #24]
 8015188:	429a      	cmp	r2, r3
 801518a:	d308      	bcc.n	801519e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801518c:	797b      	ldrb	r3, [r7, #5]
 801518e:	f083 0301 	eor.w	r3, r3, #1
 8015192:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015194:	2b00      	cmp	r3, #0
 8015196:	d013      	beq.n	80151c0 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015198:	79fb      	ldrb	r3, [r7, #7]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d010      	beq.n	80151c0 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801519e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80151a2:	4613      	mov	r3, r2
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4413      	add	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	461a      	mov	r2, r3
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	4413      	add	r3, r2
 80151b0:	2201      	movs	r2, #1
 80151b2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80151b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80151b8:	3301      	adds	r3, #1
 80151ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80151be:	e06c      	b.n	801529a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80151c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80151c4:	4613      	mov	r3, r2
 80151c6:	005b      	lsls	r3, r3, #1
 80151c8:	4413      	add	r3, r2
 80151ca:	00db      	lsls	r3, r3, #3
 80151cc:	461a      	mov	r2, r3
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	4413      	add	r3, r2
 80151d2:	2200      	movs	r2, #0
 80151d4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 80151d6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80151da:	4613      	mov	r3, r2
 80151dc:	005b      	lsls	r3, r3, #1
 80151de:	4413      	add	r3, r2
 80151e0:	00db      	lsls	r3, r3, #3
 80151e2:	461a      	mov	r2, r3
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	4413      	add	r3, r2
 80151e8:	691b      	ldr	r3, [r3, #16]
 80151ea:	69ba      	ldr	r2, [r7, #24]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d215      	bcs.n	801521c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80151f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80151f4:	4613      	mov	r3, r2
 80151f6:	005b      	lsls	r3, r3, #1
 80151f8:	4413      	add	r3, r2
 80151fa:	00db      	lsls	r3, r3, #3
 80151fc:	461a      	mov	r2, r3
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	4413      	add	r3, r2
 8015202:	68db      	ldr	r3, [r3, #12]
 8015204:	69ba      	ldr	r2, [r7, #24]
 8015206:	1ad3      	subs	r3, r2, r3
 8015208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801520a:	4293      	cmp	r3, r2
 801520c:	bf28      	it	cs
 801520e:	4613      	movcs	r3, r2
 8015210:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015216:	3301      	adds	r3, #1
 8015218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801521c:	79fb      	ldrb	r3, [r7, #7]
 801521e:	f083 0301 	eor.w	r3, r3, #1
 8015222:	b2db      	uxtb	r3, r3
 8015224:	2b00      	cmp	r3, #0
 8015226:	d038      	beq.n	801529a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015228:	2300      	movs	r3, #0
 801522a:	60fb      	str	r3, [r7, #12]
 801522c:	2300      	movs	r3, #0
 801522e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015230:	8afb      	ldrh	r3, [r7, #22]
 8015232:	2b64      	cmp	r3, #100	; 0x64
 8015234:	d103      	bne.n	801523e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015236:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801523a:	60fb      	str	r3, [r7, #12]
 801523c:	e009      	b.n	8015252 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801523e:	8afb      	ldrh	r3, [r7, #22]
 8015240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015244:	d103      	bne.n	801524e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015246:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801524a:	60fb      	str	r3, [r7, #12]
 801524c:	e001      	b.n	8015252 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801524e:	4b1e      	ldr	r3, [pc, #120]	; (80152c8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015250:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015252:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015254:	4a1c      	ldr	r2, [pc, #112]	; (80152c8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015256:	4293      	cmp	r3, r2
 8015258:	d90e      	bls.n	8015278 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801525a:	68fa      	ldr	r2, [r7, #12]
 801525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801525e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015262:	3b30      	subs	r3, #48	; 0x30
 8015264:	4919      	ldr	r1, [pc, #100]	; (80152cc <RegionCommonUpdateBandTimeOff+0x1d8>)
 8015266:	fba1 1303 	umull	r1, r3, r1, r3
 801526a:	0c1b      	lsrs	r3, r3, #16
 801526c:	3301      	adds	r3, #1
 801526e:	4918      	ldr	r1, [pc, #96]	; (80152d0 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8015270:	fb01 f303 	mul.w	r3, r1, r3
 8015274:	4413      	add	r3, r2
 8015276:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8015278:	f107 000c 	add.w	r0, r7, #12
 801527c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015282:	f107 020c 	add.w	r2, r7, #12
 8015286:	ca06      	ldmia	r2, {r1, r2}
 8015288:	f006 fb3f 	bl	801b90a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801528c:	f107 030c 	add.w	r3, r7, #12
 8015290:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015294:	f006 fbf8 	bl	801ba88 <SysTimeToMs>
 8015298:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801529a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801529e:	3301      	adds	r3, #1
 80152a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80152a4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80152a8:	79bb      	ldrb	r3, [r7, #6]
 80152aa:	429a      	cmp	r2, r3
 80152ac:	f4ff af3f 	bcc.w	801512e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80152b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d102      	bne.n	80152be <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80152b8:	f04f 33ff 	mov.w	r3, #4294967295
 80152bc:	e000      	b.n	80152c0 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80152be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	372c      	adds	r7, #44	; 0x2c
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152c8:	0001ec30 	.word	0x0001ec30
 80152cc:	c22e4507 	.word	0xc22e4507
 80152d0:	00015180 	.word	0x00015180

080152d4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	781b      	ldrb	r3, [r3, #0]
 80152e6:	2b03      	cmp	r3, #3
 80152e8:	d13f      	bne.n	801536a <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	3301      	adds	r3, #1
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	b25a      	sxtb	r2, r3
 80152f2:	683b      	ldr	r3, [r7, #0]
 80152f4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152fc:	f003 030f 	and.w	r3, r3, #15
 8015300:	b25a      	sxtb	r2, r3
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801530c:	b2db      	uxtb	r3, r3
 801530e:	091b      	lsrs	r3, r3, #4
 8015310:	b2db      	uxtb	r3, r3
 8015312:	b25a      	sxtb	r2, r3
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	3302      	adds	r3, #2
 801531c:	781b      	ldrb	r3, [r3, #0]
 801531e:	b29a      	uxth	r2, r3
 8015320:	683b      	ldr	r3, [r7, #0]
 8015322:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8015324:	683b      	ldr	r3, [r7, #0]
 8015326:	889b      	ldrh	r3, [r3, #4]
 8015328:	b21a      	sxth	r2, r3
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	3303      	adds	r3, #3
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	021b      	lsls	r3, r3, #8
 8015332:	b21b      	sxth	r3, r3
 8015334:	4313      	orrs	r3, r2
 8015336:	b21b      	sxth	r3, r3
 8015338:	b29a      	uxth	r2, r3
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	791a      	ldrb	r2, [r3, #4]
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8015346:	683b      	ldr	r3, [r7, #0]
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	091b      	lsrs	r3, r3, #4
 801534c:	b2db      	uxtb	r3, r3
 801534e:	f003 0307 	and.w	r3, r3, #7
 8015352:	b2da      	uxtb	r2, r3
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	f003 030f 	and.w	r3, r3, #15
 8015360:	b2da      	uxtb	r2, r3
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8015366:	2305      	movs	r3, #5
 8015368:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801536a:	7bfb      	ldrb	r3, [r7, #15]
}
 801536c:	4618      	mov	r0, r3
 801536e:	3714      	adds	r7, #20
 8015370:	46bd      	mov	sp, r7
 8015372:	bc80      	pop	{r7}
 8015374:	4770      	bx	lr

08015376 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8015376:	b5b0      	push	{r4, r5, r7, lr}
 8015378:	b088      	sub	sp, #32
 801537a:	af02      	add	r7, sp, #8
 801537c:	60f8      	str	r0, [r7, #12]
 801537e:	60b9      	str	r1, [r7, #8]
 8015380:	607a      	str	r2, [r7, #4]
 8015382:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	791b      	ldrb	r3, [r3, #4]
 8015388:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	799b      	ldrb	r3, [r3, #6]
 801538e:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	79db      	ldrb	r3, [r3, #7]
 8015394:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	7a1b      	ldrb	r3, [r3, #8]
 801539a:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	795b      	ldrb	r3, [r3, #5]
 80153a0:	f083 0301 	eor.w	r3, r3, #1
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d008      	beq.n	80153bc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	7adb      	ldrb	r3, [r3, #11]
 80153ae:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	7a5b      	ldrb	r3, [r3, #9]
 80153b4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	7a9b      	ldrb	r3, [r3, #10]
 80153ba:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80153bc:	7dfb      	ldrb	r3, [r7, #23]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d04a      	beq.n	8015458 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80153c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80153c6:	2b0f      	cmp	r3, #15
 80153c8:	d103      	bne.n	80153d2 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	7a5b      	ldrb	r3, [r3, #9]
 80153ce:	75bb      	strb	r3, [r7, #22]
 80153d0:	e01d      	b.n	801540e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	7b18      	ldrb	r0, [r3, #12]
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	6919      	ldr	r1, [r3, #16]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80153e6:	68fa      	ldr	r2, [r7, #12]
 80153e8:	6992      	ldr	r2, [r2, #24]
 80153ea:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80153ee:	9201      	str	r2, [sp, #4]
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	462b      	mov	r3, r5
 80153f4:	4622      	mov	r2, r4
 80153f6:	f7ff fd3a 	bl	8014e6e <RegionCommonChanVerifyDr>
 80153fa:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80153fc:	f083 0301 	eor.w	r3, r3, #1
 8015400:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8015402:	2b00      	cmp	r3, #0
 8015404:	d003      	beq.n	801540e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015406:	7dfb      	ldrb	r3, [r7, #23]
 8015408:	f023 0302 	bic.w	r3, r3, #2
 801540c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801540e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8015412:	2b0f      	cmp	r3, #15
 8015414:	d103      	bne.n	801541e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015416:	68fb      	ldr	r3, [r7, #12]
 8015418:	7a9b      	ldrb	r3, [r3, #10]
 801541a:	757b      	strb	r3, [r7, #21]
 801541c:	e01c      	b.n	8015458 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801541e:	68fb      	ldr	r3, [r7, #12]
 8015420:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801542a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801542e:	4618      	mov	r0, r3
 8015430:	f7ff fd8f 	bl	8014f52 <RegionCommonValueInRange>
 8015434:	4603      	mov	r3, r0
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10e      	bne.n	8015458 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8015440:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015444:	429a      	cmp	r2, r3
 8015446:	da03      	bge.n	8015450 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	7f5b      	ldrb	r3, [r3, #29]
 801544c:	757b      	strb	r3, [r7, #21]
 801544e:	e003      	b.n	8015458 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8015450:	7dfb      	ldrb	r3, [r7, #23]
 8015452:	f023 0304 	bic.w	r3, r3, #4
 8015456:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015458:	7dfb      	ldrb	r3, [r7, #23]
 801545a:	2b07      	cmp	r3, #7
 801545c:	d105      	bne.n	801546a <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801545e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d101      	bne.n	801546a <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8015466:	2301      	movs	r3, #1
 8015468:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	7dba      	ldrb	r2, [r7, #22]
 801546e:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	7d7a      	ldrb	r2, [r7, #21]
 8015474:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8015476:	7d3a      	ldrb	r2, [r7, #20]
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	701a      	strb	r2, [r3, #0]

    return status;
 801547c:	7dfb      	ldrb	r3, [r7, #23]
}
 801547e:	4618      	mov	r0, r3
 8015480:	3718      	adds	r7, #24
 8015482:	46bd      	mov	sp, r7
 8015484:	bdb0      	pop	{r4, r5, r7, pc}
	...

08015488 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8015488:	b480      	push	{r7}
 801548a:	b083      	sub	sp, #12
 801548c:	af00      	add	r7, sp, #0
 801548e:	4603      	mov	r3, r0
 8015490:	6039      	str	r1, [r7, #0]
 8015492:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8015494:	79fb      	ldrb	r3, [r7, #7]
 8015496:	4a06      	ldr	r2, [pc, #24]	; (80154b0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8015498:	fa02 f303 	lsl.w	r3, r2, r3
 801549c:	461a      	mov	r2, r3
 801549e:	683b      	ldr	r3, [r7, #0]
 80154a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80154a4:	4618      	mov	r0, r3
 80154a6:	370c      	adds	r7, #12
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bc80      	pop	{r7}
 80154ac:	4770      	bx	lr
 80154ae:	bf00      	nop
 80154b0:	000f4240 	.word	0x000f4240

080154b4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80154b4:	b480      	push	{r7}
 80154b6:	b083      	sub	sp, #12
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	4603      	mov	r3, r0
 80154bc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80154be:	79fb      	ldrb	r3, [r7, #7]
 80154c0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80154c4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	370c      	adds	r7, #12
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bc80      	pop	{r7}
 80154d0:	4770      	bx	lr
	...

080154d4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80154d4:	b480      	push	{r7}
 80154d6:	b085      	sub	sp, #20
 80154d8:	af00      	add	r7, sp, #0
 80154da:	60f8      	str	r0, [r7, #12]
 80154dc:	607a      	str	r2, [r7, #4]
 80154de:	603b      	str	r3, [r7, #0]
 80154e0:	460b      	mov	r3, r1
 80154e2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80154e4:	7afa      	ldrb	r2, [r7, #11]
 80154e6:	7afb      	ldrb	r3, [r7, #11]
 80154e8:	3b04      	subs	r3, #4
 80154ea:	4619      	mov	r1, r3
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	fb03 f101 	mul.w	r1, r3, r1
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80154f8:	fb00 f303 	mul.w	r3, r0, r3
 80154fc:	440b      	add	r3, r1
 80154fe:	005b      	lsls	r3, r3, #1
 8015500:	2b00      	cmp	r3, #0
 8015502:	d013      	beq.n	801552c <RegionCommonComputeRxWindowParameters+0x58>
 8015504:	7afb      	ldrb	r3, [r7, #11]
 8015506:	3b04      	subs	r3, #4
 8015508:	4619      	mov	r1, r3
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	fb03 f101 	mul.w	r1, r3, r1
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015516:	fb00 f303 	mul.w	r3, r0, r3
 801551a:	440b      	add	r3, r1
 801551c:	0059      	lsls	r1, r3, #1
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	440b      	add	r3, r1
 8015522:	1e59      	subs	r1, r3, #1
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	fbb1 f3f3 	udiv	r3, r1, r3
 801552a:	e00f      	b.n	801554c <RegionCommonComputeRxWindowParameters+0x78>
 801552c:	7afb      	ldrb	r3, [r7, #11]
 801552e:	3b04      	subs	r3, #4
 8015530:	4619      	mov	r1, r3
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	fb03 f101 	mul.w	r1, r3, r1
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801553e:	fb00 f303 	mul.w	r3, r0, r3
 8015542:	440b      	add	r3, r1
 8015544:	0059      	lsls	r1, r3, #1
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	fbb1 f3f3 	udiv	r3, r1, r3
 801554c:	429a      	cmp	r2, r3
 801554e:	bf38      	it	cc
 8015550:	461a      	movcc	r2, r3
 8015552:	69bb      	ldr	r3, [r7, #24]
 8015554:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	4619      	mov	r1, r3
 801555c:	69bb      	ldr	r3, [r7, #24]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	fb02 f303 	mul.w	r3, r2, r3
 8015566:	2b00      	cmp	r3, #0
 8015568:	d007      	beq.n	801557a <RegionCommonComputeRxWindowParameters+0xa6>
 801556a:	69bb      	ldr	r3, [r7, #24]
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	68fa      	ldr	r2, [r7, #12]
 8015570:	fb02 f303 	mul.w	r3, r2, r3
 8015574:	3301      	adds	r3, #1
 8015576:	085b      	lsrs	r3, r3, #1
 8015578:	e005      	b.n	8015586 <RegionCommonComputeRxWindowParameters+0xb2>
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	68fa      	ldr	r2, [r7, #12]
 8015580:	fb02 f303 	mul.w	r3, r2, r3
 8015584:	085b      	lsrs	r3, r3, #1
 8015586:	1acb      	subs	r3, r1, r3
 8015588:	683a      	ldr	r2, [r7, #0]
 801558a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801558e:	fb01 f202 	mul.w	r2, r1, r2
 8015592:	1a9b      	subs	r3, r3, r2
 8015594:	2b00      	cmp	r3, #0
 8015596:	dd27      	ble.n	80155e8 <RegionCommonComputeRxWindowParameters+0x114>
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	009b      	lsls	r3, r3, #2
 801559c:	4619      	mov	r1, r3
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	68fa      	ldr	r2, [r7, #12]
 80155a4:	fb02 f303 	mul.w	r3, r2, r3
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d007      	beq.n	80155bc <RegionCommonComputeRxWindowParameters+0xe8>
 80155ac:	69bb      	ldr	r3, [r7, #24]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	fb02 f303 	mul.w	r3, r2, r3
 80155b6:	3301      	adds	r3, #1
 80155b8:	085b      	lsrs	r3, r3, #1
 80155ba:	e005      	b.n	80155c8 <RegionCommonComputeRxWindowParameters+0xf4>
 80155bc:	69bb      	ldr	r3, [r7, #24]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	68fa      	ldr	r2, [r7, #12]
 80155c2:	fb02 f303 	mul.w	r3, r2, r3
 80155c6:	085b      	lsrs	r3, r3, #1
 80155c8:	1acb      	subs	r3, r1, r3
 80155ca:	683a      	ldr	r2, [r7, #0]
 80155cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155d0:	fb01 f202 	mul.w	r2, r1, r2
 80155d4:	1a9b      	subs	r3, r3, r2
 80155d6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80155da:	4a19      	ldr	r2, [pc, #100]	; (8015640 <RegionCommonComputeRxWindowParameters+0x16c>)
 80155dc:	fb82 1203 	smull	r1, r2, r2, r3
 80155e0:	1192      	asrs	r2, r2, #6
 80155e2:	17db      	asrs	r3, r3, #31
 80155e4:	1ad3      	subs	r3, r2, r3
 80155e6:	e024      	b.n	8015632 <RegionCommonComputeRxWindowParameters+0x15e>
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	009b      	lsls	r3, r3, #2
 80155ec:	4619      	mov	r1, r3
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	68fa      	ldr	r2, [r7, #12]
 80155f4:	fb02 f303 	mul.w	r3, r2, r3
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d007      	beq.n	801560c <RegionCommonComputeRxWindowParameters+0x138>
 80155fc:	69bb      	ldr	r3, [r7, #24]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	68fa      	ldr	r2, [r7, #12]
 8015602:	fb02 f303 	mul.w	r3, r2, r3
 8015606:	3301      	adds	r3, #1
 8015608:	085b      	lsrs	r3, r3, #1
 801560a:	e005      	b.n	8015618 <RegionCommonComputeRxWindowParameters+0x144>
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	68fa      	ldr	r2, [r7, #12]
 8015612:	fb02 f303 	mul.w	r3, r2, r3
 8015616:	085b      	lsrs	r3, r3, #1
 8015618:	1acb      	subs	r3, r1, r3
 801561a:	683a      	ldr	r2, [r7, #0]
 801561c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015620:	fb01 f202 	mul.w	r2, r1, r2
 8015624:	1a9b      	subs	r3, r3, r2
 8015626:	4a06      	ldr	r2, [pc, #24]	; (8015640 <RegionCommonComputeRxWindowParameters+0x16c>)
 8015628:	fb82 1203 	smull	r1, r2, r2, r3
 801562c:	1192      	asrs	r2, r2, #6
 801562e:	17db      	asrs	r3, r3, #31
 8015630:	1ad3      	subs	r3, r2, r3
 8015632:	69fa      	ldr	r2, [r7, #28]
 8015634:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015636:	bf00      	nop
 8015638:	3714      	adds	r7, #20
 801563a:	46bd      	mov	sp, r7
 801563c:	bc80      	pop	{r7}
 801563e:	4770      	bx	lr
 8015640:	10624dd3 	.word	0x10624dd3

08015644 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b086      	sub	sp, #24
 8015648:	af00      	add	r7, sp, #0
 801564a:	4603      	mov	r3, r0
 801564c:	60b9      	str	r1, [r7, #8]
 801564e:	607a      	str	r2, [r7, #4]
 8015650:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8015652:	2300      	movs	r3, #0
 8015654:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	4618      	mov	r0, r3
 801565e:	f7eb f8b5 	bl	80007cc <__aeabi_ui2f>
 8015662:	4603      	mov	r3, r0
 8015664:	4619      	mov	r1, r3
 8015666:	68b8      	ldr	r0, [r7, #8]
 8015668:	f7ea fffe 	bl	8000668 <__aeabi_fsub>
 801566c:	4603      	mov	r3, r0
 801566e:	6879      	ldr	r1, [r7, #4]
 8015670:	4618      	mov	r0, r3
 8015672:	f7ea fff9 	bl	8000668 <__aeabi_fsub>
 8015676:	4603      	mov	r3, r0
 8015678:	4618      	mov	r0, r3
 801567a:	f7ea fee9 	bl	8000450 <__aeabi_f2d>
 801567e:	4602      	mov	r2, r0
 8015680:	460b      	mov	r3, r1
 8015682:	4610      	mov	r0, r2
 8015684:	4619      	mov	r1, r3
 8015686:	f007 fbc3 	bl	801ce10 <floor>
 801568a:	4602      	mov	r2, r0
 801568c:	460b      	mov	r3, r1
 801568e:	4610      	mov	r0, r2
 8015690:	4619      	mov	r1, r3
 8015692:	f7ea ffbd 	bl	8000610 <__aeabi_d2iz>
 8015696:	4603      	mov	r3, r0
 8015698:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801569a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3718      	adds	r7, #24
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80156a6:	b590      	push	{r4, r7, lr}
 80156a8:	b087      	sub	sp, #28
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	60f8      	str	r0, [r7, #12]
 80156ae:	60b9      	str	r1, [r7, #8]
 80156b0:	607a      	str	r2, [r7, #4]
 80156b2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80156b8:	2300      	movs	r3, #0
 80156ba:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80156bc:	2300      	movs	r3, #0
 80156be:	757b      	strb	r3, [r7, #21]
 80156c0:	2300      	movs	r3, #0
 80156c2:	753b      	strb	r3, [r7, #20]
 80156c4:	e09c      	b.n	8015800 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80156c6:	2300      	movs	r3, #0
 80156c8:	74fb      	strb	r3, [r7, #19]
 80156ca:	e08f      	b.n	80157ec <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	685a      	ldr	r2, [r3, #4]
 80156d0:	7d3b      	ldrb	r3, [r7, #20]
 80156d2:	005b      	lsls	r3, r3, #1
 80156d4:	4413      	add	r3, r2
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	461a      	mov	r2, r3
 80156da:	7cfb      	ldrb	r3, [r7, #19]
 80156dc:	fa42 f303 	asr.w	r3, r2, r3
 80156e0:	f003 0301 	and.w	r3, r3, #1
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d07e      	beq.n	80157e6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	689a      	ldr	r2, [r3, #8]
 80156ec:	7d79      	ldrb	r1, [r7, #21]
 80156ee:	7cfb      	ldrb	r3, [r7, #19]
 80156f0:	440b      	add	r3, r1
 80156f2:	4619      	mov	r1, r3
 80156f4:	460b      	mov	r3, r1
 80156f6:	005b      	lsls	r3, r3, #1
 80156f8:	440b      	add	r3, r1
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	4413      	add	r3, r2
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d06b      	beq.n	80157dc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	f083 0301 	eor.w	r3, r3, #1
 801570c:	b2db      	uxtb	r3, r3
 801570e:	2b00      	cmp	r3, #0
 8015710:	d011      	beq.n	8015736 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015716:	2b00      	cmp	r3, #0
 8015718:	d00d      	beq.n	8015736 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	695a      	ldr	r2, [r3, #20]
 801571e:	7d3b      	ldrb	r3, [r7, #20]
 8015720:	005b      	lsls	r3, r3, #1
 8015722:	4413      	add	r3, r2
 8015724:	881b      	ldrh	r3, [r3, #0]
 8015726:	461a      	mov	r2, r3
 8015728:	7cfb      	ldrb	r3, [r7, #19]
 801572a:	fa42 f303 	asr.w	r3, r2, r3
 801572e:	f003 0301 	and.w	r3, r3, #1
 8015732:	2b00      	cmp	r3, #0
 8015734:	d054      	beq.n	80157e0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	785b      	ldrb	r3, [r3, #1]
 801573a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	689a      	ldr	r2, [r3, #8]
 8015740:	7d79      	ldrb	r1, [r7, #21]
 8015742:	7cfb      	ldrb	r3, [r7, #19]
 8015744:	440b      	add	r3, r1
 8015746:	4619      	mov	r1, r3
 8015748:	460b      	mov	r3, r1
 801574a:	005b      	lsls	r3, r3, #1
 801574c:	440b      	add	r3, r1
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	4413      	add	r3, r2
 8015752:	7a1b      	ldrb	r3, [r3, #8]
 8015754:	f343 0303 	sbfx	r3, r3, #0, #4
 8015758:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801575a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	689a      	ldr	r2, [r3, #8]
 8015760:	7d79      	ldrb	r1, [r7, #21]
 8015762:	7cfb      	ldrb	r3, [r7, #19]
 8015764:	440b      	add	r3, r1
 8015766:	4619      	mov	r1, r3
 8015768:	460b      	mov	r3, r1
 801576a:	005b      	lsls	r3, r3, #1
 801576c:	440b      	add	r3, r1
 801576e:	009b      	lsls	r3, r3, #2
 8015770:	4413      	add	r3, r2
 8015772:	7a1b      	ldrb	r3, [r3, #8]
 8015774:	f343 1303 	sbfx	r3, r3, #4, #4
 8015778:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801577a:	461a      	mov	r2, r3
 801577c:	4621      	mov	r1, r4
 801577e:	f7ff fbe8 	bl	8014f52 <RegionCommonValueInRange>
 8015782:	4603      	mov	r3, r0
 8015784:	2b00      	cmp	r3, #0
 8015786:	d02d      	beq.n	80157e4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	68da      	ldr	r2, [r3, #12]
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	6899      	ldr	r1, [r3, #8]
 8015790:	7d78      	ldrb	r0, [r7, #21]
 8015792:	7cfb      	ldrb	r3, [r7, #19]
 8015794:	4403      	add	r3, r0
 8015796:	4618      	mov	r0, r3
 8015798:	4603      	mov	r3, r0
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	4403      	add	r3, r0
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	440b      	add	r3, r1
 80157a2:	7a5b      	ldrb	r3, [r3, #9]
 80157a4:	4619      	mov	r1, r3
 80157a6:	460b      	mov	r3, r1
 80157a8:	005b      	lsls	r3, r3, #1
 80157aa:	440b      	add	r3, r1
 80157ac:	00db      	lsls	r3, r3, #3
 80157ae:	4413      	add	r3, r2
 80157b0:	7d1b      	ldrb	r3, [r3, #20]
 80157b2:	f083 0301 	eor.w	r3, r3, #1
 80157b6:	b2db      	uxtb	r3, r3
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d003      	beq.n	80157c4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80157bc:	7dbb      	ldrb	r3, [r7, #22]
 80157be:	3301      	adds	r3, #1
 80157c0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80157c2:	e010      	b.n	80157e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80157c4:	7dfb      	ldrb	r3, [r7, #23]
 80157c6:	1c5a      	adds	r2, r3, #1
 80157c8:	75fa      	strb	r2, [r7, #23]
 80157ca:	461a      	mov	r2, r3
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	4413      	add	r3, r2
 80157d0:	7d79      	ldrb	r1, [r7, #21]
 80157d2:	7cfa      	ldrb	r2, [r7, #19]
 80157d4:	440a      	add	r2, r1
 80157d6:	b2d2      	uxtb	r2, r2
 80157d8:	701a      	strb	r2, [r3, #0]
 80157da:	e004      	b.n	80157e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80157dc:	bf00      	nop
 80157de:	e002      	b.n	80157e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80157e0:	bf00      	nop
 80157e2:	e000      	b.n	80157e6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80157e4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80157e6:	7cfb      	ldrb	r3, [r7, #19]
 80157e8:	3301      	adds	r3, #1
 80157ea:	74fb      	strb	r3, [r7, #19]
 80157ec:	7cfb      	ldrb	r3, [r7, #19]
 80157ee:	2b0f      	cmp	r3, #15
 80157f0:	f67f af6c 	bls.w	80156cc <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80157f4:	7d7b      	ldrb	r3, [r7, #21]
 80157f6:	3310      	adds	r3, #16
 80157f8:	757b      	strb	r3, [r7, #21]
 80157fa:	7d3b      	ldrb	r3, [r7, #20]
 80157fc:	3301      	adds	r3, #1
 80157fe:	753b      	strb	r3, [r7, #20]
 8015800:	7d7b      	ldrb	r3, [r7, #21]
 8015802:	b29a      	uxth	r2, r3
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	8a1b      	ldrh	r3, [r3, #16]
 8015808:	429a      	cmp	r2, r3
 801580a:	f4ff af5c 	bcc.w	80156c6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	7dfa      	ldrb	r2, [r7, #23]
 8015812:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	7dba      	ldrb	r2, [r7, #22]
 8015818:	701a      	strb	r2, [r3, #0]
}
 801581a:	bf00      	nop
 801581c:	371c      	adds	r7, #28
 801581e:	46bd      	mov	sp, r7
 8015820:	bd90      	pop	{r4, r7, pc}

08015822 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8015822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015824:	b08b      	sub	sp, #44	; 0x2c
 8015826:	af04      	add	r7, sp, #16
 8015828:	60f8      	str	r0, [r7, #12]
 801582a:	60b9      	str	r1, [r7, #8]
 801582c:	607a      	str	r2, [r7, #4]
 801582e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	685b      	ldr	r3, [r3, #4]
 8015834:	4618      	mov	r0, r3
 8015836:	f006 ff67 	bl	801c708 <UTIL_TIMER_GetElapsedTime>
 801583a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	1ad2      	subs	r2, r2, r3
 8015844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015846:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801584a:	2201      	movs	r2, #1
 801584c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	2200      	movs	r2, #0
 8015852:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	685b      	ldr	r3, [r3, #4]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d004      	beq.n	8015866 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015860:	697a      	ldr	r2, [r7, #20]
 8015862:	429a      	cmp	r2, r3
 8015864:	d32b      	bcc.n	80158be <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8015866:	68bb      	ldr	r3, [r7, #8]
 8015868:	2200      	movs	r2, #0
 801586a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	69db      	ldr	r3, [r3, #28]
 8015870:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8015876:	68dd      	ldr	r5, [r3, #12]
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	7a5e      	ldrb	r6, [r3, #9]
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	7d1b      	ldrb	r3, [r3, #20]
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	6992      	ldr	r2, [r2, #24]
 801588a:	9203      	str	r2, [sp, #12]
 801588c:	68fa      	ldr	r2, [r7, #12]
 801588e:	f10d 0e04 	add.w	lr, sp, #4
 8015892:	320c      	adds	r2, #12
 8015894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015898:	e88e 0003 	stmia.w	lr, {r0, r1}
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	4663      	mov	r3, ip
 80158a0:	4632      	mov	r2, r6
 80158a2:	4629      	mov	r1, r5
 80158a4:	4620      	mov	r0, r4
 80158a6:	f7ff fc25 	bl	80150f4 <RegionCommonUpdateBandTimeOff>
 80158aa:	4602      	mov	r2, r0
 80158ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158ae:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	69d8      	ldr	r0, [r3, #28]
 80158b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158b6:	683a      	ldr	r2, [r7, #0]
 80158b8:	6879      	ldr	r1, [r7, #4]
 80158ba:	f7ff fef4 	bl	80156a6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d004      	beq.n	80158d0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80158c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158c8:	2200      	movs	r2, #0
 80158ca:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80158cc:	2300      	movs	r3, #0
 80158ce:	e006      	b.n	80158de <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80158d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d001      	beq.n	80158dc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80158d8:	230b      	movs	r3, #11
 80158da:	e000      	b.n	80158de <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80158dc:	230c      	movs	r3, #12
    }
}
 80158de:	4618      	mov	r0, r3
 80158e0:	371c      	adds	r7, #28
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080158e6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80158e6:	b5b0      	push	{r4, r5, r7, lr}
 80158e8:	b086      	sub	sp, #24
 80158ea:	af02      	add	r7, sp, #8
 80158ec:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	781b      	ldrb	r3, [r3, #0]
 80158f2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f993 2000 	ldrsb.w	r2, [r3]
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015900:	429a      	cmp	r2, r3
 8015902:	d103      	bne.n	801590c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801590a:	e026      	b.n	801595a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801590c:	7bfb      	ldrb	r3, [r7, #15]
 801590e:	3b01      	subs	r3, #1
 8015910:	b2db      	uxtb	r3, r3
 8015912:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801591a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801591e:	429a      	cmp	r2, r3
 8015920:	d019      	beq.n	8015956 <RegionCommonGetNextLowerTxDr+0x70>
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	78d8      	ldrb	r0, [r3, #3]
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6859      	ldr	r1, [r3, #4]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	6892      	ldr	r2, [r2, #8]
 801593a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801593e:	9201      	str	r2, [sp, #4]
 8015940:	9300      	str	r3, [sp, #0]
 8015942:	462b      	mov	r3, r5
 8015944:	4622      	mov	r2, r4
 8015946:	f7ff fa92 	bl	8014e6e <RegionCommonChanVerifyDr>
 801594a:	4603      	mov	r3, r0
 801594c:	f083 0301 	eor.w	r3, r3, #1
 8015950:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8015952:	2b00      	cmp	r3, #0
 8015954:	d1da      	bne.n	801590c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015956:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801595a:	4618      	mov	r0, r3
 801595c:	3710      	adds	r7, #16
 801595e:	46bd      	mov	sp, r7
 8015960:	bdb0      	pop	{r4, r5, r7, pc}

08015962 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8015962:	b480      	push	{r7}
 8015964:	b083      	sub	sp, #12
 8015966:	af00      	add	r7, sp, #0
 8015968:	4603      	mov	r3, r0
 801596a:	460a      	mov	r2, r1
 801596c:	71fb      	strb	r3, [r7, #7]
 801596e:	4613      	mov	r3, r2
 8015970:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8015972:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801597a:	4293      	cmp	r3, r2
 801597c:	bfb8      	it	lt
 801597e:	4613      	movlt	r3, r2
 8015980:	b25b      	sxtb	r3, r3
}
 8015982:	4618      	mov	r0, r3
 8015984:	370c      	adds	r7, #12
 8015986:	46bd      	mov	sp, r7
 8015988:	bc80      	pop	{r7}
 801598a:	4770      	bx	lr

0801598c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801598c:	b480      	push	{r7}
 801598e:	b083      	sub	sp, #12
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	009b      	lsls	r3, r3, #2
 801599a:	683a      	ldr	r2, [r7, #0]
 801599c:	4413      	add	r3, r2
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	4a07      	ldr	r2, [pc, #28]	; (80159c0 <RegionCommonGetBandwidth+0x34>)
 80159a2:	4293      	cmp	r3, r2
 80159a4:	d004      	beq.n	80159b0 <RegionCommonGetBandwidth+0x24>
 80159a6:	4a07      	ldr	r2, [pc, #28]	; (80159c4 <RegionCommonGetBandwidth+0x38>)
 80159a8:	4293      	cmp	r3, r2
 80159aa:	d003      	beq.n	80159b4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80159ac:	2300      	movs	r3, #0
 80159ae:	e002      	b.n	80159b6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80159b0:	2301      	movs	r3, #1
 80159b2:	e000      	b.n	80159b6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80159b4:	2302      	movs	r3, #2
    }
}
 80159b6:	4618      	mov	r0, r3
 80159b8:	370c      	adds	r7, #12
 80159ba:	46bd      	mov	sp, r7
 80159bc:	bc80      	pop	{r7}
 80159be:	4770      	bx	lr
 80159c0:	0003d090 	.word	0x0003d090
 80159c4:	0007a120 	.word	0x0007a120

080159c8 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af04      	add	r7, sp, #16
 80159ce:	4603      	mov	r3, r0
 80159d0:	6039      	str	r1, [r7, #0]
 80159d2:	71fb      	strb	r3, [r7, #7]
 80159d4:	4613      	mov	r3, r2
 80159d6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80159d8:	79fb      	ldrb	r3, [r7, #7]
 80159da:	2b05      	cmp	r3, #5
 80159dc:	d810      	bhi.n	8015a00 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80159de:	79fb      	ldrb	r3, [r7, #7]
 80159e0:	4a0f      	ldr	r2, [pc, #60]	; (8015a20 <RegionCommonRxConfigPrint+0x58>)
 80159e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159e6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80159ea:	9202      	str	r2, [sp, #8]
 80159ec:	683a      	ldr	r2, [r7, #0]
 80159ee:	9201      	str	r2, [sp, #4]
 80159f0:	9300      	str	r3, [sp, #0]
 80159f2:	4b0c      	ldr	r3, [pc, #48]	; (8015a24 <RegionCommonRxConfigPrint+0x5c>)
 80159f4:	2201      	movs	r2, #1
 80159f6:	2100      	movs	r1, #0
 80159f8:	2002      	movs	r0, #2
 80159fa:	f006 ff63 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80159fe:	e00a      	b.n	8015a16 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015a00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015a04:	9301      	str	r3, [sp, #4]
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	9300      	str	r3, [sp, #0]
 8015a0a:	4b07      	ldr	r3, [pc, #28]	; (8015a28 <RegionCommonRxConfigPrint+0x60>)
 8015a0c:	2201      	movs	r2, #1
 8015a0e:	2100      	movs	r1, #0
 8015a10:	2002      	movs	r0, #2
 8015a12:	f006 ff57 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8015a16:	bf00      	nop
 8015a18:	3708      	adds	r7, #8
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	20000128 	.word	0x20000128
 8015a24:	0801d6ec 	.word	0x0801d6ec
 8015a28:	0801d70c 	.word	0x0801d70c

08015a2c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015a2c:	b580      	push	{r7, lr}
 8015a2e:	b084      	sub	sp, #16
 8015a30:	af02      	add	r7, sp, #8
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	460b      	mov	r3, r1
 8015a36:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015a3c:	9301      	str	r3, [sp, #4]
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	9300      	str	r3, [sp, #0]
 8015a42:	4b05      	ldr	r3, [pc, #20]	; (8015a58 <RegionCommonTxConfigPrint+0x2c>)
 8015a44:	2201      	movs	r2, #1
 8015a46:	2100      	movs	r1, #0
 8015a48:	2002      	movs	r0, #2
 8015a4a:	f006 ff3b 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8015a4e:	bf00      	nop
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
 8015a56:	bf00      	nop
 8015a58:	0801d728 	.word	0x0801d728

08015a5c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015a5c:	b580      	push	{r7, lr}
 8015a5e:	b082      	sub	sp, #8
 8015a60:	af00      	add	r7, sp, #0
 8015a62:	6078      	str	r0, [r7, #4]
 8015a64:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8015a66:	4b2d      	ldr	r3, [pc, #180]	; (8015b1c <VerifyRfFreq+0xc0>)
 8015a68:	6a1b      	ldr	r3, [r3, #32]
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	4798      	blx	r3
 8015a6e:	4603      	mov	r3, r0
 8015a70:	f083 0301 	eor.w	r3, r3, #1
 8015a74:	b2db      	uxtb	r3, r3
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d001      	beq.n	8015a7e <VerifyRfFreq+0x22>
    {
        return false;
 8015a7a:	2300      	movs	r3, #0
 8015a7c:	e04a      	b.n	8015b14 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	4a27      	ldr	r2, [pc, #156]	; (8015b20 <VerifyRfFreq+0xc4>)
 8015a82:	4293      	cmp	r3, r2
 8015a84:	d307      	bcc.n	8015a96 <VerifyRfFreq+0x3a>
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	4a26      	ldr	r2, [pc, #152]	; (8015b24 <VerifyRfFreq+0xc8>)
 8015a8a:	4293      	cmp	r3, r2
 8015a8c:	d803      	bhi.n	8015a96 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8015a8e:	683b      	ldr	r3, [r7, #0]
 8015a90:	2202      	movs	r2, #2
 8015a92:	701a      	strb	r2, [r3, #0]
 8015a94:	e03d      	b.n	8015b12 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	4a22      	ldr	r2, [pc, #136]	; (8015b24 <VerifyRfFreq+0xc8>)
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	d907      	bls.n	8015aae <VerifyRfFreq+0x52>
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	4a21      	ldr	r2, [pc, #132]	; (8015b28 <VerifyRfFreq+0xcc>)
 8015aa2:	4293      	cmp	r3, r2
 8015aa4:	d803      	bhi.n	8015aae <VerifyRfFreq+0x52>
    {
        *band = 0;
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	701a      	strb	r2, [r3, #0]
 8015aac:	e031      	b.n	8015b12 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	4a1d      	ldr	r2, [pc, #116]	; (8015b28 <VerifyRfFreq+0xcc>)
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d907      	bls.n	8015ac6 <VerifyRfFreq+0x6a>
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	4a1c      	ldr	r2, [pc, #112]	; (8015b2c <VerifyRfFreq+0xd0>)
 8015aba:	4293      	cmp	r3, r2
 8015abc:	d803      	bhi.n	8015ac6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	2201      	movs	r2, #1
 8015ac2:	701a      	strb	r2, [r3, #0]
 8015ac4:	e025      	b.n	8015b12 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	4a19      	ldr	r2, [pc, #100]	; (8015b30 <VerifyRfFreq+0xd4>)
 8015aca:	4293      	cmp	r3, r2
 8015acc:	d907      	bls.n	8015ade <VerifyRfFreq+0x82>
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	4a18      	ldr	r2, [pc, #96]	; (8015b34 <VerifyRfFreq+0xd8>)
 8015ad2:	4293      	cmp	r3, r2
 8015ad4:	d803      	bhi.n	8015ade <VerifyRfFreq+0x82>
    {
        *band = 5;
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	2205      	movs	r2, #5
 8015ada:	701a      	strb	r2, [r3, #0]
 8015adc:	e019      	b.n	8015b12 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	4a15      	ldr	r2, [pc, #84]	; (8015b38 <VerifyRfFreq+0xdc>)
 8015ae2:	4293      	cmp	r3, r2
 8015ae4:	d907      	bls.n	8015af6 <VerifyRfFreq+0x9a>
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	4a14      	ldr	r2, [pc, #80]	; (8015b3c <VerifyRfFreq+0xe0>)
 8015aea:	4293      	cmp	r3, r2
 8015aec:	d803      	bhi.n	8015af6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	2203      	movs	r2, #3
 8015af2:	701a      	strb	r2, [r3, #0]
 8015af4:	e00d      	b.n	8015b12 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	4a11      	ldr	r2, [pc, #68]	; (8015b40 <VerifyRfFreq+0xe4>)
 8015afa:	4293      	cmp	r3, r2
 8015afc:	d307      	bcc.n	8015b0e <VerifyRfFreq+0xb2>
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	4a10      	ldr	r2, [pc, #64]	; (8015b44 <VerifyRfFreq+0xe8>)
 8015b02:	4293      	cmp	r3, r2
 8015b04:	d803      	bhi.n	8015b0e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	2204      	movs	r2, #4
 8015b0a:	701a      	strb	r2, [r3, #0]
 8015b0c:	e001      	b.n	8015b12 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e000      	b.n	8015b14 <VerifyRfFreq+0xb8>
    }
    return true;
 8015b12:	2301      	movs	r3, #1
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3708      	adds	r7, #8
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	0801dd4c 	.word	0x0801dd4c
 8015b20:	337055c0 	.word	0x337055c0
 8015b24:	338eda3f 	.word	0x338eda3f
 8015b28:	33bca100 	.word	0x33bca100
 8015b2c:	33c5c8c0 	.word	0x33c5c8c0
 8015b30:	33c74f5f 	.word	0x33c74f5f
 8015b34:	33cef080 	.word	0x33cef080
 8015b38:	33d1fdbf 	.word	0x33d1fdbf
 8015b3c:	33d5ce50 	.word	0x33d5ce50
 8015b40:	33d691a0 	.word	0x33d691a0
 8015b44:	33db2580 	.word	0x33db2580

08015b48 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015b48:	b590      	push	{r4, r7, lr}
 8015b4a:	b08b      	sub	sp, #44	; 0x2c
 8015b4c:	af04      	add	r7, sp, #16
 8015b4e:	4603      	mov	r3, r0
 8015b50:	460a      	mov	r2, r1
 8015b52:	71fb      	strb	r3, [r7, #7]
 8015b54:	4613      	mov	r3, r2
 8015b56:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b5c:	4a1f      	ldr	r2, [pc, #124]	; (8015bdc <GetTimeOnAir+0x94>)
 8015b5e:	5cd3      	ldrb	r3, [r2, r3]
 8015b60:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8015b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b66:	491e      	ldr	r1, [pc, #120]	; (8015be0 <GetTimeOnAir+0x98>)
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7ff ff0f 	bl	801598c <RegionCommonGetBandwidth>
 8015b6e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8015b70:	2300      	movs	r3, #0
 8015b72:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8015b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b78:	2b07      	cmp	r3, #7
 8015b7a:	d118      	bne.n	8015bae <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8015b7c:	4b19      	ldr	r3, [pc, #100]	; (8015be4 <GetTimeOnAir+0x9c>)
 8015b7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015b80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015b88:	fb02 f303 	mul.w	r3, r2, r3
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	88bb      	ldrh	r3, [r7, #4]
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2201      	movs	r2, #1
 8015b94:	9203      	str	r2, [sp, #12]
 8015b96:	9302      	str	r3, [sp, #8]
 8015b98:	2300      	movs	r3, #0
 8015b9a:	9301      	str	r3, [sp, #4]
 8015b9c:	2305      	movs	r3, #5
 8015b9e:	9300      	str	r3, [sp, #0]
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	460a      	mov	r2, r1
 8015ba4:	68f9      	ldr	r1, [r7, #12]
 8015ba6:	2000      	movs	r0, #0
 8015ba8:	47a0      	blx	r4
 8015baa:	6178      	str	r0, [r7, #20]
 8015bac:	e011      	b.n	8015bd2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8015bae:	4b0d      	ldr	r3, [pc, #52]	; (8015be4 <GetTimeOnAir+0x9c>)
 8015bb0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015bb2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015bb6:	88bb      	ldrh	r3, [r7, #4]
 8015bb8:	b2db      	uxtb	r3, r3
 8015bba:	2101      	movs	r1, #1
 8015bbc:	9103      	str	r1, [sp, #12]
 8015bbe:	9302      	str	r3, [sp, #8]
 8015bc0:	2300      	movs	r3, #0
 8015bc2:	9301      	str	r3, [sp, #4]
 8015bc4:	2308      	movs	r3, #8
 8015bc6:	9300      	str	r3, [sp, #0]
 8015bc8:	2301      	movs	r3, #1
 8015bca:	68f9      	ldr	r1, [r7, #12]
 8015bcc:	2001      	movs	r0, #1
 8015bce:	47a0      	blx	r4
 8015bd0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015bd2:	697b      	ldr	r3, [r7, #20]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	371c      	adds	r7, #28
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd90      	pop	{r4, r7, pc}
 8015bdc:	0801dc90 	.word	0x0801dc90
 8015be0:	0801dc98 	.word	0x0801dc98
 8015be4:	0801dd4c 	.word	0x0801dd4c

08015be8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b088      	sub	sp, #32
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	3b01      	subs	r3, #1
 8015bfa:	2b37      	cmp	r3, #55	; 0x37
 8015bfc:	f200 8122 	bhi.w	8015e44 <RegionEU868GetPhyParam+0x25c>
 8015c00:	a201      	add	r2, pc, #4	; (adr r2, 8015c08 <RegionEU868GetPhyParam+0x20>)
 8015c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c06:	bf00      	nop
 8015c08:	08015ce9 	.word	0x08015ce9
 8015c0c:	08015cef 	.word	0x08015cef
 8015c10:	08015e45 	.word	0x08015e45
 8015c14:	08015e45 	.word	0x08015e45
 8015c18:	08015e45 	.word	0x08015e45
 8015c1c:	08015cf5 	.word	0x08015cf5
 8015c20:	08015e45 	.word	0x08015e45
 8015c24:	08015d2f 	.word	0x08015d2f
 8015c28:	08015e45 	.word	0x08015e45
 8015c2c:	08015d35 	.word	0x08015d35
 8015c30:	08015d3b 	.word	0x08015d3b
 8015c34:	08015d41 	.word	0x08015d41
 8015c38:	08015d47 	.word	0x08015d47
 8015c3c:	08015d57 	.word	0x08015d57
 8015c40:	08015d67 	.word	0x08015d67
 8015c44:	08015d6d 	.word	0x08015d6d
 8015c48:	08015d75 	.word	0x08015d75
 8015c4c:	08015d7d 	.word	0x08015d7d
 8015c50:	08015d85 	.word	0x08015d85
 8015c54:	08015d8d 	.word	0x08015d8d
 8015c58:	08015d95 	.word	0x08015d95
 8015c5c:	08015da9 	.word	0x08015da9
 8015c60:	08015daf 	.word	0x08015daf
 8015c64:	08015db5 	.word	0x08015db5
 8015c68:	08015dbb 	.word	0x08015dbb
 8015c6c:	08015dc7 	.word	0x08015dc7
 8015c70:	08015dd3 	.word	0x08015dd3
 8015c74:	08015dd9 	.word	0x08015dd9
 8015c78:	08015de1 	.word	0x08015de1
 8015c7c:	08015de7 	.word	0x08015de7
 8015c80:	08015ded 	.word	0x08015ded
 8015c84:	08015df5 	.word	0x08015df5
 8015c88:	08015cfb 	.word	0x08015cfb
 8015c8c:	08015e45 	.word	0x08015e45
 8015c90:	08015e45 	.word	0x08015e45
 8015c94:	08015e45 	.word	0x08015e45
 8015c98:	08015e45 	.word	0x08015e45
 8015c9c:	08015e45 	.word	0x08015e45
 8015ca0:	08015e45 	.word	0x08015e45
 8015ca4:	08015e45 	.word	0x08015e45
 8015ca8:	08015e45 	.word	0x08015e45
 8015cac:	08015e45 	.word	0x08015e45
 8015cb0:	08015e45 	.word	0x08015e45
 8015cb4:	08015e45 	.word	0x08015e45
 8015cb8:	08015e45 	.word	0x08015e45
 8015cbc:	08015e45 	.word	0x08015e45
 8015cc0:	08015dfb 	.word	0x08015dfb
 8015cc4:	08015e01 	.word	0x08015e01
 8015cc8:	08015e0f 	.word	0x08015e0f
 8015ccc:	08015e45 	.word	0x08015e45
 8015cd0:	08015e45 	.word	0x08015e45
 8015cd4:	08015e15 	.word	0x08015e15
 8015cd8:	08015e1b 	.word	0x08015e1b
 8015cdc:	08015e45 	.word	0x08015e45
 8015ce0:	08015e21 	.word	0x08015e21
 8015ce4:	08015e31 	.word	0x08015e31
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	61bb      	str	r3, [r7, #24]
            break;
 8015cec:	e0ab      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	61bb      	str	r3, [r7, #24]
            break;
 8015cf2:	e0a8      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015cf4:	2300      	movs	r3, #0
 8015cf6:	61bb      	str	r3, [r7, #24]
            break;
 8015cf8:	e0a5      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015d00:	733b      	strb	r3, [r7, #12]
 8015d02:	2307      	movs	r3, #7
 8015d04:	737b      	strb	r3, [r7, #13]
 8015d06:	2300      	movs	r3, #0
 8015d08:	73bb      	strb	r3, [r7, #14]
 8015d0a:	2310      	movs	r3, #16
 8015d0c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015d0e:	4b51      	ldr	r3, [pc, #324]	; (8015e54 <RegionEU868GetPhyParam+0x26c>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015d16:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015d18:	4b4e      	ldr	r3, [pc, #312]	; (8015e54 <RegionEU868GetPhyParam+0x26c>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015d1c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015d1e:	f107 030c 	add.w	r3, r7, #12
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7ff fddf 	bl	80158e6 <RegionCommonGetNextLowerTxDr>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	61bb      	str	r3, [r7, #24]
            break;
 8015d2c:	e08b      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	61bb      	str	r3, [r7, #24]
            break;
 8015d32:	e088      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015d34:	2300      	movs	r3, #0
 8015d36:	61bb      	str	r3, [r7, #24]
            break;
 8015d38:	e085      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015d3a:	2340      	movs	r3, #64	; 0x40
 8015d3c:	61bb      	str	r3, [r7, #24]
            break;
 8015d3e:	e082      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8015d40:	2320      	movs	r3, #32
 8015d42:	61bb      	str	r3, [r7, #24]
            break;
 8015d44:	e07f      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	4b42      	ldr	r3, [pc, #264]	; (8015e58 <RegionEU868GetPhyParam+0x270>)
 8015d50:	5c9b      	ldrb	r3, [r3, r2]
 8015d52:	61bb      	str	r3, [r7, #24]
            break;
 8015d54:	e077      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	4b3f      	ldr	r3, [pc, #252]	; (8015e5c <RegionEU868GetPhyParam+0x274>)
 8015d60:	5c9b      	ldrb	r3, [r3, r2]
 8015d62:	61bb      	str	r3, [r7, #24]
            break;
 8015d64:	e06f      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8015d66:	2301      	movs	r3, #1
 8015d68:	61bb      	str	r3, [r7, #24]
            break;
 8015d6a:	e06c      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8015d6c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8015d70:	61bb      	str	r3, [r7, #24]
            break;
 8015d72:	e068      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8015d74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015d78:	61bb      	str	r3, [r7, #24]
            break;
 8015d7a:	e064      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8015d7c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8015d80:	61bb      	str	r3, [r7, #24]
            break;
 8015d82:	e060      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8015d84:	f241 3388 	movw	r3, #5000	; 0x1388
 8015d88:	61bb      	str	r3, [r7, #24]
            break;
 8015d8a:	e05c      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015d8c:	f241 7370 	movw	r3, #6000	; 0x1770
 8015d90:	61bb      	str	r3, [r7, #24]
            break;
 8015d92:	e058      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8015d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015d98:	4831      	ldr	r0, [pc, #196]	; (8015e60 <RegionEU868GetPhyParam+0x278>)
 8015d9a:	f002 fa27 	bl	80181ec <randr>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015da4:	61bb      	str	r3, [r7, #24]
            break;
 8015da6:	e04e      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015da8:	2300      	movs	r3, #0
 8015daa:	61bb      	str	r3, [r7, #24]
            break;
 8015dac:	e04b      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8015dae:	4b2d      	ldr	r3, [pc, #180]	; (8015e64 <RegionEU868GetPhyParam+0x27c>)
 8015db0:	61bb      	str	r3, [r7, #24]
            break;
 8015db2:	e048      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015db4:	2300      	movs	r3, #0
 8015db6:	61bb      	str	r3, [r7, #24]
            break;
 8015db8:	e045      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015dba:	4b26      	ldr	r3, [pc, #152]	; (8015e54 <RegionEU868GetPhyParam+0x26c>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8015dc2:	61bb      	str	r3, [r7, #24]
            break;
 8015dc4:	e03f      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015dc6:	4b23      	ldr	r3, [pc, #140]	; (8015e54 <RegionEU868GetPhyParam+0x26c>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015dce:	61bb      	str	r3, [r7, #24]
            break;
 8015dd0:	e039      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015dd2:	2310      	movs	r3, #16
 8015dd4:	61bb      	str	r3, [r7, #24]
            break;
 8015dd6:	e036      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015dd8:	4b1e      	ldr	r3, [pc, #120]	; (8015e54 <RegionEU868GetPhyParam+0x26c>)
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	61bb      	str	r3, [r7, #24]
            break;
 8015dde:	e032      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015de0:	2300      	movs	r3, #0
 8015de2:	61bb      	str	r3, [r7, #24]
            break;
 8015de4:	e02f      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015de6:	2300      	movs	r3, #0
 8015de8:	61bb      	str	r3, [r7, #24]
            break;
 8015dea:	e02c      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015dec:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8015df0:	61bb      	str	r3, [r7, #24]
            break;
 8015df2:	e028      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015df4:	4b1c      	ldr	r3, [pc, #112]	; (8015e68 <RegionEU868GetPhyParam+0x280>)
 8015df6:	61bb      	str	r3, [r7, #24]
            break;
 8015df8:	e025      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015dfa:	4b1a      	ldr	r3, [pc, #104]	; (8015e64 <RegionEU868GetPhyParam+0x27c>)
 8015dfc:	61bb      	str	r3, [r7, #24]
            break;
 8015dfe:	e022      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015e00:	2311      	movs	r3, #17
 8015e02:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015e04:	2301      	movs	r3, #1
 8015e06:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	76bb      	strb	r3, [r7, #26]
            break;
 8015e0c:	e01b      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015e0e:	2303      	movs	r3, #3
 8015e10:	61bb      	str	r3, [r7, #24]
            break;
 8015e12:	e018      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015e14:	4b13      	ldr	r3, [pc, #76]	; (8015e64 <RegionEU868GetPhyParam+0x27c>)
 8015e16:	61bb      	str	r3, [r7, #24]
            break;
 8015e18:	e015      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015e1a:	2303      	movs	r3, #3
 8015e1c:	61bb      	str	r3, [r7, #24]
            break;
 8015e1e:	e012      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e26:	461a      	mov	r2, r3
 8015e28:	4b10      	ldr	r3, [pc, #64]	; (8015e6c <RegionEU868GetPhyParam+0x284>)
 8015e2a:	5c9b      	ldrb	r3, [r3, r2]
 8015e2c:	61bb      	str	r3, [r7, #24]
            break;
 8015e2e:	e00a      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015e36:	490e      	ldr	r1, [pc, #56]	; (8015e70 <RegionEU868GetPhyParam+0x288>)
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7ff fda7 	bl	801598c <RegionCommonGetBandwidth>
 8015e3e:	4603      	mov	r3, r0
 8015e40:	61bb      	str	r3, [r7, #24]
            break;
 8015e42:	e000      	b.n	8015e46 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8015e44:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	61fb      	str	r3, [r7, #28]
 8015e4a:	69fb      	ldr	r3, [r7, #28]
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3720      	adds	r7, #32
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	20001984 	.word	0x20001984
 8015e58:	0801dcb8 	.word	0x0801dcb8
 8015e5c:	0801dcc0 	.word	0x0801dcc0
 8015e60:	fffffc18 	.word	0xfffffc18
 8015e64:	33d3e608 	.word	0x33d3e608
 8015e68:	4009999a 	.word	0x4009999a
 8015e6c:	0801dc90 	.word	0x0801dc90
 8015e70:	0801dc98 	.word	0x0801dc98

08015e74 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015e74:	b590      	push	{r4, r7, lr}
 8015e76:	b085      	sub	sp, #20
 8015e78:	af02      	add	r7, sp, #8
 8015e7a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015e7c:	4b11      	ldr	r3, [pc, #68]	; (8015ec4 <RegionEU868SetBandTxDone+0x50>)
 8015e7e:	681a      	ldr	r2, [r3, #0]
 8015e80:	4b11      	ldr	r3, [pc, #68]	; (8015ec8 <RegionEU868SetBandTxDone+0x54>)
 8015e82:	6819      	ldr	r1, [r3, #0]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	4618      	mov	r0, r3
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	005b      	lsls	r3, r3, #1
 8015e8e:	4403      	add	r3, r0
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	440b      	add	r3, r1
 8015e94:	3309      	adds	r3, #9
 8015e96:	781b      	ldrb	r3, [r3, #0]
 8015e98:	4619      	mov	r1, r3
 8015e9a:	460b      	mov	r3, r1
 8015e9c:	005b      	lsls	r3, r3, #1
 8015e9e:	440b      	add	r3, r1
 8015ea0:	00db      	lsls	r3, r3, #3
 8015ea2:	18d0      	adds	r0, r2, r3
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	6899      	ldr	r1, [r3, #8]
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	785c      	ldrb	r4, [r3, #1]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	691a      	ldr	r2, [r3, #16]
 8015eb0:	9200      	str	r2, [sp, #0]
 8015eb2:	68db      	ldr	r3, [r3, #12]
 8015eb4:	4622      	mov	r2, r4
 8015eb6:	f7ff f8ef 	bl	8015098 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015eba:	bf00      	nop
 8015ebc:	370c      	adds	r7, #12
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd90      	pop	{r4, r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	20001988 	.word	0x20001988
 8015ec8:	20001984 	.word	0x20001984

08015ecc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b0b0      	sub	sp, #192	; 0xc0
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015ed4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015ed8:	2290      	movs	r2, #144	; 0x90
 8015eda:	2100      	movs	r1, #0
 8015edc:	4618      	mov	r0, r3
 8015ede:	f006 ff8d 	bl	801cdfc <memset>
 8015ee2:	2364      	movs	r3, #100	; 0x64
 8015ee4:	863b      	strh	r3, [r7, #48]	; 0x30
 8015ee6:	2364      	movs	r3, #100	; 0x64
 8015ee8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8015eec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015ef0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8015ef4:	230a      	movs	r3, #10
 8015ef6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8015efa:	2364      	movs	r3, #100	; 0x64
 8015efc:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8015f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015f04:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	7b1b      	ldrb	r3, [r3, #12]
 8015f0c:	2b02      	cmp	r3, #2
 8015f0e:	d05d      	beq.n	8015fcc <RegionEU868InitDefaults+0x100>
 8015f10:	2b02      	cmp	r3, #2
 8015f12:	dc6a      	bgt.n	8015fea <RegionEU868InitDefaults+0x11e>
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d002      	beq.n	8015f1e <RegionEU868InitDefaults+0x52>
 8015f18:	2b01      	cmp	r3, #1
 8015f1a:	d03e      	beq.n	8015f9a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015f1c:	e065      	b.n	8015fea <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d062      	beq.n	8015fec <RegionEU868InitDefaults+0x120>
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d05e      	beq.n	8015fec <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	685b      	ldr	r3, [r3, #4]
 8015f32:	4a30      	ldr	r2, [pc, #192]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f34:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	689b      	ldr	r3, [r3, #8]
 8015f3a:	4a2f      	ldr	r2, [pc, #188]	; (8015ff8 <RegionEU868InitDefaults+0x12c>)
 8015f3c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015f3e:	4b2e      	ldr	r3, [pc, #184]	; (8015ff8 <RegionEU868InitDefaults+0x12c>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015f46:	2290      	movs	r2, #144	; 0x90
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f002 f966 	bl	801821a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015f4e:	4b29      	ldr	r3, [pc, #164]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	4a2a      	ldr	r2, [pc, #168]	; (8015ffc <RegionEU868InitDefaults+0x130>)
 8015f54:	ca07      	ldmia	r2, {r0, r1, r2}
 8015f56:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015f5a:	4b26      	ldr	r3, [pc, #152]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	4a28      	ldr	r2, [pc, #160]	; (8016000 <RegionEU868InitDefaults+0x134>)
 8015f60:	330c      	adds	r3, #12
 8015f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8015f64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015f68:	4b22      	ldr	r3, [pc, #136]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4a25      	ldr	r2, [pc, #148]	; (8016004 <RegionEU868InitDefaults+0x138>)
 8015f6e:	3318      	adds	r3, #24
 8015f70:	ca07      	ldmia	r2, {r0, r1, r2}
 8015f72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015f76:	4b1f      	ldr	r3, [pc, #124]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	2207      	movs	r2, #7
 8015f7c:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015f80:	4b1c      	ldr	r3, [pc, #112]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8015f88:	4b1a      	ldr	r3, [pc, #104]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015f90:	2201      	movs	r2, #1
 8015f92:	4619      	mov	r1, r3
 8015f94:	f7ff f85a 	bl	801504c <RegionCommonChanMaskCopy>
 8015f98:	e028      	b.n	8015fec <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015f9a:	4b16      	ldr	r3, [pc, #88]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	2200      	movs	r2, #0
 8015fa0:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015fa2:	4b14      	ldr	r3, [pc, #80]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015faa:	4b12      	ldr	r3, [pc, #72]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015fb2:	4b10      	ldr	r3, [pc, #64]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8015fba:	4b0e      	ldr	r3, [pc, #56]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8015fc2:	2201      	movs	r2, #1
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	f7ff f841 	bl	801504c <RegionCommonChanMaskCopy>
            break;
 8015fca:	e00f      	b.n	8015fec <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015fcc:	4b09      	ldr	r3, [pc, #36]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8015fd4:	4b07      	ldr	r3, [pc, #28]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8015fdc:	4b05      	ldr	r3, [pc, #20]	; (8015ff4 <RegionEU868InitDefaults+0x128>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	430a      	orrs	r2, r1
 8015fe2:	b292      	uxth	r2, r2
 8015fe4:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8015fe8:	e000      	b.n	8015fec <RegionEU868InitDefaults+0x120>
            break;
 8015fea:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015fec:	37c0      	adds	r7, #192	; 0xc0
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
 8015ff2:	bf00      	nop
 8015ff4:	20001984 	.word	0x20001984
 8015ff8:	20001988 	.word	0x20001988
 8015ffc:	0801d744 	.word	0x0801d744
 8016000:	0801d750 	.word	0x0801d750
 8016004:	0801d75c 	.word	0x0801d75c

08016008 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b084      	sub	sp, #16
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	460b      	mov	r3, r1
 8016012:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016014:	78fb      	ldrb	r3, [r7, #3]
 8016016:	2b0f      	cmp	r3, #15
 8016018:	d86c      	bhi.n	80160f4 <RegionEU868Verify+0xec>
 801601a:	a201      	add	r2, pc, #4	; (adr r2, 8016020 <RegionEU868Verify+0x18>)
 801601c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016020:	08016061 	.word	0x08016061
 8016024:	080160f5 	.word	0x080160f5
 8016028:	080160f5 	.word	0x080160f5
 801602c:	080160f5 	.word	0x080160f5
 8016030:	080160f5 	.word	0x080160f5
 8016034:	08016079 	.word	0x08016079
 8016038:	08016097 	.word	0x08016097
 801603c:	080160b5 	.word	0x080160b5
 8016040:	080160f5 	.word	0x080160f5
 8016044:	080160d3 	.word	0x080160d3
 8016048:	080160d3 	.word	0x080160d3
 801604c:	080160f5 	.word	0x080160f5
 8016050:	080160f5 	.word	0x080160f5
 8016054:	080160f5 	.word	0x080160f5
 8016058:	080160f5 	.word	0x080160f5
 801605c:	080160f1 	.word	0x080160f1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016060:	2300      	movs	r3, #0
 8016062:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	f107 020f 	add.w	r2, r7, #15
 801606c:	4611      	mov	r1, r2
 801606e:	4618      	mov	r0, r3
 8016070:	f7ff fcf4 	bl	8015a5c <VerifyRfFreq>
 8016074:	4603      	mov	r3, r0
 8016076:	e03e      	b.n	80160f6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f993 3000 	ldrsb.w	r3, [r3]
 801607e:	2207      	movs	r2, #7
 8016080:	2100      	movs	r1, #0
 8016082:	4618      	mov	r0, r3
 8016084:	f7fe ff65 	bl	8014f52 <RegionCommonValueInRange>
 8016088:	4603      	mov	r3, r0
 801608a:	2b00      	cmp	r3, #0
 801608c:	bf14      	ite	ne
 801608e:	2301      	movne	r3, #1
 8016090:	2300      	moveq	r3, #0
 8016092:	b2db      	uxtb	r3, r3
 8016094:	e02f      	b.n	80160f6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f993 3000 	ldrsb.w	r3, [r3]
 801609c:	2205      	movs	r2, #5
 801609e:	2100      	movs	r1, #0
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7fe ff56 	bl	8014f52 <RegionCommonValueInRange>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	bf14      	ite	ne
 80160ac:	2301      	movne	r3, #1
 80160ae:	2300      	moveq	r3, #0
 80160b0:	b2db      	uxtb	r3, r3
 80160b2:	e020      	b.n	80160f6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	f993 3000 	ldrsb.w	r3, [r3]
 80160ba:	2207      	movs	r2, #7
 80160bc:	2100      	movs	r1, #0
 80160be:	4618      	mov	r0, r3
 80160c0:	f7fe ff47 	bl	8014f52 <RegionCommonValueInRange>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	bf14      	ite	ne
 80160ca:	2301      	movne	r3, #1
 80160cc:	2300      	moveq	r3, #0
 80160ce:	b2db      	uxtb	r3, r3
 80160d0:	e011      	b.n	80160f6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f993 3000 	ldrsb.w	r3, [r3]
 80160d8:	2207      	movs	r2, #7
 80160da:	2100      	movs	r1, #0
 80160dc:	4618      	mov	r0, r3
 80160de:	f7fe ff38 	bl	8014f52 <RegionCommonValueInRange>
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	bf14      	ite	ne
 80160e8:	2301      	movne	r3, #1
 80160ea:	2300      	moveq	r3, #0
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	e002      	b.n	80160f6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 80160f0:	2301      	movs	r3, #1
 80160f2:	e000      	b.n	80160f6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 80160f4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 80160f6:	4618      	mov	r0, r3
 80160f8:	3710      	adds	r7, #16
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop

08016100 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b08a      	sub	sp, #40	; 0x28
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016108:	2350      	movs	r3, #80	; 0x50
 801610a:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	7a1b      	ldrb	r3, [r3, #8]
 8016112:	2b10      	cmp	r3, #16
 8016114:	d162      	bne.n	80161dc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	685b      	ldr	r3, [r3, #4]
 801611a:	330f      	adds	r3, #15
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d15e      	bne.n	80161e0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016122:	2300      	movs	r3, #0
 8016124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016128:	2303      	movs	r3, #3
 801612a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801612e:	e050      	b.n	80161d2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016130:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016134:	2b07      	cmp	r3, #7
 8016136:	d824      	bhi.n	8016182 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	685a      	ldr	r2, [r3, #4]
 801613c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016140:	4413      	add	r3, r2
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016146:	69ba      	ldr	r2, [r7, #24]
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	6859      	ldr	r1, [r3, #4]
 801614c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016150:	3301      	adds	r3, #1
 8016152:	440b      	add	r3, r1
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	021b      	lsls	r3, r3, #8
 8016158:	4313      	orrs	r3, r2
 801615a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801615c:	69ba      	ldr	r2, [r7, #24]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	6859      	ldr	r1, [r3, #4]
 8016162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016166:	3302      	adds	r3, #2
 8016168:	440b      	add	r3, r1
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	041b      	lsls	r3, r3, #16
 801616e:	4313      	orrs	r3, r2
 8016170:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016172:	69bb      	ldr	r3, [r7, #24]
 8016174:	2264      	movs	r2, #100	; 0x64
 8016176:	fb02 f303 	mul.w	r3, r2, r3
 801617a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801617c:	2300      	movs	r3, #0
 801617e:	61fb      	str	r3, [r7, #28]
 8016180:	e006      	b.n	8016190 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016182:	2300      	movs	r3, #0
 8016184:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016186:	2300      	movs	r3, #0
 8016188:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801618c:	2300      	movs	r3, #0
 801618e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016190:	69bb      	ldr	r3, [r7, #24]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d00b      	beq.n	80161ae <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016196:	f107 0318 	add.w	r3, r7, #24
 801619a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801619c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161a0:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80161a2:	f107 0310 	add.w	r3, r7, #16
 80161a6:	4618      	mov	r0, r3
 80161a8:	f000 fd0e 	bl	8016bc8 <RegionEU868ChannelAdd>
 80161ac:	e007      	b.n	80161be <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80161ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161b2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80161b4:	f107 030c 	add.w	r3, r7, #12
 80161b8:	4618      	mov	r0, r3
 80161ba:	f000 fda7 	bl	8016d0c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80161be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161c2:	3303      	adds	r3, #3
 80161c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80161c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161cc:	3301      	adds	r3, #1
 80161ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80161d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80161d6:	2b0f      	cmp	r3, #15
 80161d8:	d9aa      	bls.n	8016130 <RegionEU868ApplyCFList+0x30>
 80161da:	e002      	b.n	80161e2 <RegionEU868ApplyCFList+0xe2>
        return;
 80161dc:	bf00      	nop
 80161de:	e000      	b.n	80161e2 <RegionEU868ApplyCFList+0xe2>
        return;
 80161e0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80161e2:	3728      	adds	r7, #40	; 0x28
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	791b      	ldrb	r3, [r3, #4]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d002      	beq.n	80161fe <RegionEU868ChanMaskSet+0x16>
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d00b      	beq.n	8016214 <RegionEU868ChanMaskSet+0x2c>
 80161fc:	e015      	b.n	801622a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80161fe:	4b0e      	ldr	r3, [pc, #56]	; (8016238 <RegionEU868ChanMaskSet+0x50>)
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	2201      	movs	r2, #1
 801620c:	4619      	mov	r1, r3
 801620e:	f7fe ff1d 	bl	801504c <RegionCommonChanMaskCopy>
            break;
 8016212:	e00c      	b.n	801622e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016214:	4b08      	ldr	r3, [pc, #32]	; (8016238 <RegionEU868ChanMaskSet+0x50>)
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2201      	movs	r2, #1
 8016222:	4619      	mov	r1, r3
 8016224:	f7fe ff12 	bl	801504c <RegionCommonChanMaskCopy>
            break;
 8016228:	e001      	b.n	801622e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801622a:	2300      	movs	r3, #0
 801622c:	e000      	b.n	8016230 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801622e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016230:	4618      	mov	r0, r3
 8016232:	3708      	adds	r7, #8
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}
 8016238:	20001984 	.word	0x20001984

0801623c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801623c:	b580      	push	{r7, lr}
 801623e:	b088      	sub	sp, #32
 8016240:	af02      	add	r7, sp, #8
 8016242:	60ba      	str	r2, [r7, #8]
 8016244:	607b      	str	r3, [r7, #4]
 8016246:	4603      	mov	r3, r0
 8016248:	73fb      	strb	r3, [r7, #15]
 801624a:	460b      	mov	r3, r1
 801624c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801624e:	2300      	movs	r3, #0
 8016250:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016256:	2b07      	cmp	r3, #7
 8016258:	bfa8      	it	ge
 801625a:	2307      	movge	r3, #7
 801625c:	b25a      	sxtb	r2, r3
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016268:	491e      	ldr	r1, [pc, #120]	; (80162e4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801626a:	4618      	mov	r0, r3
 801626c:	f7ff fb8e 	bl	801598c <RegionCommonGetBandwidth>
 8016270:	4603      	mov	r3, r0
 8016272:	b2da      	uxtb	r2, r3
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801627e:	2b07      	cmp	r3, #7
 8016280:	d10a      	bne.n	8016298 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016288:	461a      	mov	r2, r3
 801628a:	4b17      	ldr	r3, [pc, #92]	; (80162e8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801628c:	5c9b      	ldrb	r3, [r3, r2]
 801628e:	4618      	mov	r0, r3
 8016290:	f7ff f910 	bl	80154b4 <RegionCommonComputeSymbolTimeFsk>
 8016294:	6178      	str	r0, [r7, #20]
 8016296:	e011      	b.n	80162bc <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801629e:	461a      	mov	r2, r3
 80162a0:	4b11      	ldr	r3, [pc, #68]	; (80162e8 <RegionEU868ComputeRxWindowParameters+0xac>)
 80162a2:	5c9a      	ldrb	r2, [r3, r2]
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80162aa:	4619      	mov	r1, r3
 80162ac:	4b0d      	ldr	r3, [pc, #52]	; (80162e4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80162ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80162b2:	4619      	mov	r1, r3
 80162b4:	4610      	mov	r0, r2
 80162b6:	f7ff f8e7 	bl	8015488 <RegionCommonComputeSymbolTimeLoRa>
 80162ba:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80162bc:	4b0b      	ldr	r3, [pc, #44]	; (80162ec <RegionEU868ComputeRxWindowParameters+0xb0>)
 80162be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80162c0:	4798      	blx	r3
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	3308      	adds	r3, #8
 80162c6:	687a      	ldr	r2, [r7, #4]
 80162c8:	320c      	adds	r2, #12
 80162ca:	7bb9      	ldrb	r1, [r7, #14]
 80162cc:	9201      	str	r2, [sp, #4]
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	4603      	mov	r3, r0
 80162d2:	68ba      	ldr	r2, [r7, #8]
 80162d4:	6978      	ldr	r0, [r7, #20]
 80162d6:	f7ff f8fd 	bl	80154d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80162da:	bf00      	nop
 80162dc:	3718      	adds	r7, #24
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	0801dc98 	.word	0x0801dc98
 80162e8:	0801dc90 	.word	0x0801dc90
 80162ec:	0801dd4c 	.word	0x0801dd4c

080162f0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80162f0:	b5b0      	push	{r4, r5, r7, lr}
 80162f2:	b090      	sub	sp, #64	; 0x40
 80162f4:	af0a      	add	r7, sp, #40	; 0x28
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	785b      	ldrb	r3, [r3, #1]
 80162fe:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016300:	2300      	movs	r3, #0
 8016302:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8016304:	2300      	movs	r3, #0
 8016306:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801630e:	4b5a      	ldr	r3, [pc, #360]	; (8016478 <RegionEU868RxConfig+0x188>)
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	4798      	blx	r3
 8016314:	4603      	mov	r3, r0
 8016316:	2b00      	cmp	r3, #0
 8016318:	d001      	beq.n	801631e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801631a:	2300      	movs	r3, #0
 801631c:	e0a8      	b.n	8016470 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	7cdb      	ldrb	r3, [r3, #19]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d126      	bne.n	8016374 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8016326:	4b55      	ldr	r3, [pc, #340]	; (801647c <RegionEU868RxConfig+0x18c>)
 8016328:	681a      	ldr	r2, [r3, #0]
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	781b      	ldrb	r3, [r3, #0]
 801632e:	4619      	mov	r1, r3
 8016330:	460b      	mov	r3, r1
 8016332:	005b      	lsls	r3, r3, #1
 8016334:	440b      	add	r3, r1
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	4413      	add	r3, r2
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801633e:	4b4f      	ldr	r3, [pc, #316]	; (801647c <RegionEU868RxConfig+0x18c>)
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	781b      	ldrb	r3, [r3, #0]
 8016346:	4619      	mov	r1, r3
 8016348:	460b      	mov	r3, r1
 801634a:	005b      	lsls	r3, r3, #1
 801634c:	440b      	add	r3, r1
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	4413      	add	r3, r2
 8016352:	3304      	adds	r3, #4
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d00c      	beq.n	8016374 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801635a:	4b48      	ldr	r3, [pc, #288]	; (801647c <RegionEU868RxConfig+0x18c>)
 801635c:	681a      	ldr	r2, [r3, #0]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	4619      	mov	r1, r3
 8016364:	460b      	mov	r3, r1
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	440b      	add	r3, r1
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	4413      	add	r3, r2
 801636e:	3304      	adds	r3, #4
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8016374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016378:	4a41      	ldr	r2, [pc, #260]	; (8016480 <RegionEU868RxConfig+0x190>)
 801637a:	5cd3      	ldrb	r3, [r2, r3]
 801637c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801637e:	4b3e      	ldr	r3, [pc, #248]	; (8016478 <RegionEU868RxConfig+0x188>)
 8016380:	68db      	ldr	r3, [r3, #12]
 8016382:	6938      	ldr	r0, [r7, #16]
 8016384:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8016386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801638a:	2b07      	cmp	r3, #7
 801638c:	d128      	bne.n	80163e0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801638e:	2300      	movs	r3, #0
 8016390:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8016392:	4b39      	ldr	r3, [pc, #228]	; (8016478 <RegionEU868RxConfig+0x188>)
 8016394:	699c      	ldr	r4, [r3, #24]
 8016396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801639a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801639e:	fb02 f303 	mul.w	r3, r2, r3
 80163a2:	4619      	mov	r1, r3
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	689b      	ldr	r3, [r3, #8]
 80163a8:	b29b      	uxth	r3, r3
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	7c92      	ldrb	r2, [r2, #18]
 80163ae:	7df8      	ldrb	r0, [r7, #23]
 80163b0:	9209      	str	r2, [sp, #36]	; 0x24
 80163b2:	2200      	movs	r2, #0
 80163b4:	9208      	str	r2, [sp, #32]
 80163b6:	2200      	movs	r2, #0
 80163b8:	9207      	str	r2, [sp, #28]
 80163ba:	2200      	movs	r2, #0
 80163bc:	9206      	str	r2, [sp, #24]
 80163be:	2201      	movs	r2, #1
 80163c0:	9205      	str	r2, [sp, #20]
 80163c2:	2200      	movs	r2, #0
 80163c4:	9204      	str	r2, [sp, #16]
 80163c6:	2200      	movs	r2, #0
 80163c8:	9203      	str	r2, [sp, #12]
 80163ca:	9302      	str	r3, [sp, #8]
 80163cc:	2305      	movs	r3, #5
 80163ce:	9301      	str	r3, [sp, #4]
 80163d0:	4b2c      	ldr	r3, [pc, #176]	; (8016484 <RegionEU868RxConfig+0x194>)
 80163d2:	9300      	str	r3, [sp, #0]
 80163d4:	2300      	movs	r3, #0
 80163d6:	460a      	mov	r2, r1
 80163d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80163dc:	47a0      	blx	r4
 80163de:	e024      	b.n	801642a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80163e0:	2301      	movs	r3, #1
 80163e2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80163e4:	4b24      	ldr	r3, [pc, #144]	; (8016478 <RegionEU868RxConfig+0x188>)
 80163e6:	699c      	ldr	r4, [r3, #24]
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	789b      	ldrb	r3, [r3, #2]
 80163ec:	461d      	mov	r5, r3
 80163ee:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	689b      	ldr	r3, [r3, #8]
 80163f6:	b29b      	uxth	r3, r3
 80163f8:	687a      	ldr	r2, [r7, #4]
 80163fa:	7c92      	ldrb	r2, [r2, #18]
 80163fc:	7df8      	ldrb	r0, [r7, #23]
 80163fe:	9209      	str	r2, [sp, #36]	; 0x24
 8016400:	2201      	movs	r2, #1
 8016402:	9208      	str	r2, [sp, #32]
 8016404:	2200      	movs	r2, #0
 8016406:	9207      	str	r2, [sp, #28]
 8016408:	2200      	movs	r2, #0
 801640a:	9206      	str	r2, [sp, #24]
 801640c:	2200      	movs	r2, #0
 801640e:	9205      	str	r2, [sp, #20]
 8016410:	2200      	movs	r2, #0
 8016412:	9204      	str	r2, [sp, #16]
 8016414:	2200      	movs	r2, #0
 8016416:	9203      	str	r2, [sp, #12]
 8016418:	9302      	str	r3, [sp, #8]
 801641a:	2308      	movs	r3, #8
 801641c:	9301      	str	r3, [sp, #4]
 801641e:	2300      	movs	r3, #0
 8016420:	9300      	str	r3, [sp, #0]
 8016422:	2301      	movs	r3, #1
 8016424:	460a      	mov	r2, r1
 8016426:	4629      	mov	r1, r5
 8016428:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	7c5b      	ldrb	r3, [r3, #17]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d005      	beq.n	801643e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8016432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016436:	4a14      	ldr	r2, [pc, #80]	; (8016488 <RegionEU868RxConfig+0x198>)
 8016438:	5cd3      	ldrb	r3, [r2, r3]
 801643a:	75bb      	strb	r3, [r7, #22]
 801643c:	e004      	b.n	8016448 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801643e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016442:	4a12      	ldr	r2, [pc, #72]	; (801648c <RegionEU868RxConfig+0x19c>)
 8016444:	5cd3      	ldrb	r3, [r2, r3]
 8016446:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016448:	4b0b      	ldr	r3, [pc, #44]	; (8016478 <RegionEU868RxConfig+0x188>)
 801644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801644c:	7dba      	ldrb	r2, [r7, #22]
 801644e:	320d      	adds	r2, #13
 8016450:	b2d1      	uxtb	r1, r2
 8016452:	7dfa      	ldrb	r2, [r7, #23]
 8016454:	4610      	mov	r0, r2
 8016456:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	7cdb      	ldrb	r3, [r3, #19]
 801645c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016460:	6939      	ldr	r1, [r7, #16]
 8016462:	4618      	mov	r0, r3
 8016464:	f7ff fab0 	bl	80159c8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	7bfa      	ldrb	r2, [r7, #15]
 801646c:	701a      	strb	r2, [r3, #0]
    return true;
 801646e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016470:	4618      	mov	r0, r3
 8016472:	3718      	adds	r7, #24
 8016474:	46bd      	mov	sp, r7
 8016476:	bdb0      	pop	{r4, r5, r7, pc}
 8016478:	0801dd4c 	.word	0x0801dd4c
 801647c:	20001984 	.word	0x20001984
 8016480:	0801dc90 	.word	0x0801dc90
 8016484:	00014585 	.word	0x00014585
 8016488:	0801dcc0 	.word	0x0801dcc0
 801648c:	0801dcb8 	.word	0x0801dcb8

08016490 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016490:	b590      	push	{r4, r7, lr}
 8016492:	b093      	sub	sp, #76	; 0x4c
 8016494:	af0a      	add	r7, sp, #40	; 0x28
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80164a2:	461a      	mov	r2, r3
 80164a4:	4b5d      	ldr	r3, [pc, #372]	; (801661c <RegionEU868TxConfig+0x18c>)
 80164a6:	5c9b      	ldrb	r3, [r3, r2]
 80164a8:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80164b0:	4b5b      	ldr	r3, [pc, #364]	; (8016620 <RegionEU868TxConfig+0x190>)
 80164b2:	681a      	ldr	r2, [r3, #0]
 80164b4:	4b5b      	ldr	r3, [pc, #364]	; (8016624 <RegionEU868TxConfig+0x194>)
 80164b6:	6819      	ldr	r1, [r3, #0]
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	461c      	mov	r4, r3
 80164be:	4623      	mov	r3, r4
 80164c0:	005b      	lsls	r3, r3, #1
 80164c2:	4423      	add	r3, r4
 80164c4:	009b      	lsls	r3, r3, #2
 80164c6:	440b      	add	r3, r1
 80164c8:	3309      	adds	r3, #9
 80164ca:	781b      	ldrb	r3, [r3, #0]
 80164cc:	4619      	mov	r1, r3
 80164ce:	460b      	mov	r3, r1
 80164d0:	005b      	lsls	r3, r3, #1
 80164d2:	440b      	add	r3, r1
 80164d4:	00db      	lsls	r3, r3, #3
 80164d6:	4413      	add	r3, r2
 80164d8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80164dc:	4619      	mov	r1, r3
 80164de:	f7ff fa40 	bl	8015962 <RegionCommonLimitTxPower>
 80164e2:	4603      	mov	r3, r0
 80164e4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80164ec:	494e      	ldr	r1, [pc, #312]	; (8016628 <RegionEU868TxConfig+0x198>)
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7ff fa4c 	bl	801598c <RegionCommonGetBandwidth>
 80164f4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80164f6:	2300      	movs	r3, #0
 80164f8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	6859      	ldr	r1, [r3, #4]
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	689a      	ldr	r2, [r3, #8]
 8016502:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016506:	4618      	mov	r0, r3
 8016508:	f7ff f89c 	bl	8015644 <RegionCommonComputeTxPower>
 801650c:	4603      	mov	r3, r0
 801650e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016510:	4b46      	ldr	r3, [pc, #280]	; (801662c <RegionEU868TxConfig+0x19c>)
 8016512:	68da      	ldr	r2, [r3, #12]
 8016514:	4b43      	ldr	r3, [pc, #268]	; (8016624 <RegionEU868TxConfig+0x194>)
 8016516:	6819      	ldr	r1, [r3, #0]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	4618      	mov	r0, r3
 801651e:	4603      	mov	r3, r0
 8016520:	005b      	lsls	r3, r3, #1
 8016522:	4403      	add	r3, r0
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	440b      	add	r3, r1
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4618      	mov	r0, r3
 801652c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016534:	2b07      	cmp	r3, #7
 8016536:	d124      	bne.n	8016582 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016538:	2300      	movs	r3, #0
 801653a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801653c:	4b3b      	ldr	r3, [pc, #236]	; (801662c <RegionEU868TxConfig+0x19c>)
 801653e:	69dc      	ldr	r4, [r3, #28]
 8016540:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016548:	fb02 f303 	mul.w	r3, r2, r3
 801654c:	461a      	mov	r2, r3
 801654e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016552:	7ff8      	ldrb	r0, [r7, #31]
 8016554:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8016558:	9308      	str	r3, [sp, #32]
 801655a:	2300      	movs	r3, #0
 801655c:	9307      	str	r3, [sp, #28]
 801655e:	2300      	movs	r3, #0
 8016560:	9306      	str	r3, [sp, #24]
 8016562:	2300      	movs	r3, #0
 8016564:	9305      	str	r3, [sp, #20]
 8016566:	2301      	movs	r3, #1
 8016568:	9304      	str	r3, [sp, #16]
 801656a:	2300      	movs	r3, #0
 801656c:	9303      	str	r3, [sp, #12]
 801656e:	2305      	movs	r3, #5
 8016570:	9302      	str	r3, [sp, #8]
 8016572:	2300      	movs	r3, #0
 8016574:	9301      	str	r3, [sp, #4]
 8016576:	9200      	str	r2, [sp, #0]
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 801657e:	47a0      	blx	r4
 8016580:	e01d      	b.n	80165be <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8016582:	2301      	movs	r3, #1
 8016584:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016586:	4b29      	ldr	r3, [pc, #164]	; (801662c <RegionEU868TxConfig+0x19c>)
 8016588:	69dc      	ldr	r4, [r3, #28]
 801658a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801658e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016592:	7ff8      	ldrb	r0, [r7, #31]
 8016594:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8016598:	9208      	str	r2, [sp, #32]
 801659a:	2200      	movs	r2, #0
 801659c:	9207      	str	r2, [sp, #28]
 801659e:	2200      	movs	r2, #0
 80165a0:	9206      	str	r2, [sp, #24]
 80165a2:	2200      	movs	r2, #0
 80165a4:	9205      	str	r2, [sp, #20]
 80165a6:	2201      	movs	r2, #1
 80165a8:	9204      	str	r2, [sp, #16]
 80165aa:	2200      	movs	r2, #0
 80165ac:	9203      	str	r2, [sp, #12]
 80165ae:	2208      	movs	r2, #8
 80165b0:	9202      	str	r2, [sp, #8]
 80165b2:	2201      	movs	r2, #1
 80165b4:	9201      	str	r2, [sp, #4]
 80165b6:	9300      	str	r3, [sp, #0]
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	2200      	movs	r2, #0
 80165bc:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80165be:	4b19      	ldr	r3, [pc, #100]	; (8016624 <RegionEU868TxConfig+0x194>)
 80165c0:	681a      	ldr	r2, [r3, #0]
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	781b      	ldrb	r3, [r3, #0]
 80165c6:	4619      	mov	r1, r3
 80165c8:	460b      	mov	r3, r1
 80165ca:	005b      	lsls	r3, r3, #1
 80165cc:	440b      	add	r3, r1
 80165ce:	009b      	lsls	r3, r3, #2
 80165d0:	4413      	add	r3, r2
 80165d2:	681a      	ldr	r2, [r3, #0]
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80165da:	4619      	mov	r1, r3
 80165dc:	4610      	mov	r0, r2
 80165de:	f7ff fa25 	bl	8015a2c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	899b      	ldrh	r3, [r3, #12]
 80165ec:	4619      	mov	r1, r3
 80165ee:	4610      	mov	r0, r2
 80165f0:	f7ff faaa 	bl	8015b48 <GetTimeOnAir>
 80165f4:	4602      	mov	r2, r0
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80165fa:	4b0c      	ldr	r3, [pc, #48]	; (801662c <RegionEU868TxConfig+0x19c>)
 80165fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80165fe:	68fa      	ldr	r2, [r7, #12]
 8016600:	8992      	ldrh	r2, [r2, #12]
 8016602:	b2d1      	uxtb	r1, r2
 8016604:	7ffa      	ldrb	r2, [r7, #31]
 8016606:	4610      	mov	r0, r2
 8016608:	4798      	blx	r3

    *txPower = txPowerLimited;
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	7f7a      	ldrb	r2, [r7, #29]
 801660e:	701a      	strb	r2, [r3, #0]
    return true;
 8016610:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016612:	4618      	mov	r0, r3
 8016614:	3724      	adds	r7, #36	; 0x24
 8016616:	46bd      	mov	sp, r7
 8016618:	bd90      	pop	{r4, r7, pc}
 801661a:	bf00      	nop
 801661c:	0801dc90 	.word	0x0801dc90
 8016620:	20001988 	.word	0x20001988
 8016624:	20001984 	.word	0x20001984
 8016628:	0801dc98 	.word	0x0801dc98
 801662c:	0801dd4c 	.word	0x0801dd4c

08016630 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016630:	b590      	push	{r4, r7, lr}
 8016632:	b093      	sub	sp, #76	; 0x4c
 8016634:	af00      	add	r7, sp, #0
 8016636:	60f8      	str	r0, [r7, #12]
 8016638:	60b9      	str	r1, [r7, #8]
 801663a:	607a      	str	r2, [r7, #4]
 801663c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801663e:	2307      	movs	r3, #7
 8016640:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016644:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016648:	2200      	movs	r2, #0
 801664a:	601a      	str	r2, [r3, #0]
 801664c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801664e:	2300      	movs	r3, #0
 8016650:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8016654:	2300      	movs	r3, #0
 8016656:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801665a:	2300      	movs	r3, #0
 801665c:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801665e:	e085      	b.n	801676c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	685a      	ldr	r2, [r3, #4]
 8016664:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8016668:	4413      	add	r3, r2
 801666a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801666e:	4611      	mov	r1, r2
 8016670:	4618      	mov	r0, r3
 8016672:	f7fe fe2f 	bl	80152d4 <RegionCommonParseLinkAdrReq>
 8016676:	4603      	mov	r3, r0
 8016678:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 801667c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8016680:	2b00      	cmp	r3, #0
 8016682:	d07b      	beq.n	801677c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016684:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016688:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801668c:	4413      	add	r3, r2
 801668e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016692:	2307      	movs	r3, #7
 8016694:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8016698:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801669c:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801669e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d109      	bne.n	80166ba <RegionEU868LinkAdrReq+0x8a>
 80166a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d106      	bne.n	80166ba <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80166ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80166b0:	f023 0301 	bic.w	r3, r3, #1
 80166b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80166b8:	e058      	b.n	801676c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80166ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d003      	beq.n	80166ca <RegionEU868LinkAdrReq+0x9a>
 80166c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80166c6:	2b05      	cmp	r3, #5
 80166c8:	d903      	bls.n	80166d2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80166ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80166ce:	2b06      	cmp	r3, #6
 80166d0:	d906      	bls.n	80166e0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80166d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80166d6:	f023 0301 	bic.w	r3, r3, #1
 80166da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80166de:	e045      	b.n	801676c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80166e0:	2300      	movs	r3, #0
 80166e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80166e6:	e03d      	b.n	8016764 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80166e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80166ec:	2b06      	cmp	r3, #6
 80166ee:	d118      	bne.n	8016722 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80166f0:	4b5f      	ldr	r3, [pc, #380]	; (8016870 <RegionEU868LinkAdrReq+0x240>)
 80166f2:	6819      	ldr	r1, [r3, #0]
 80166f4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80166f8:	4613      	mov	r3, r2
 80166fa:	005b      	lsls	r3, r3, #1
 80166fc:	4413      	add	r3, r2
 80166fe:	009b      	lsls	r3, r3, #2
 8016700:	440b      	add	r3, r1
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d028      	beq.n	801675a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016708:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801670c:	2201      	movs	r2, #1
 801670e:	fa02 f303 	lsl.w	r3, r2, r3
 8016712:	b21a      	sxth	r2, r3
 8016714:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016716:	b21b      	sxth	r3, r3
 8016718:	4313      	orrs	r3, r2
 801671a:	b21b      	sxth	r3, r3
 801671c:	b29b      	uxth	r3, r3
 801671e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016720:	e01b      	b.n	801675a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016722:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016724:	461a      	mov	r2, r3
 8016726:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801672a:	fa42 f303 	asr.w	r3, r2, r3
 801672e:	f003 0301 	and.w	r3, r3, #1
 8016732:	2b00      	cmp	r3, #0
 8016734:	d011      	beq.n	801675a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016736:	4b4e      	ldr	r3, [pc, #312]	; (8016870 <RegionEU868LinkAdrReq+0x240>)
 8016738:	6819      	ldr	r1, [r3, #0]
 801673a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801673e:	4613      	mov	r3, r2
 8016740:	005b      	lsls	r3, r3, #1
 8016742:	4413      	add	r3, r2
 8016744:	009b      	lsls	r3, r3, #2
 8016746:	440b      	add	r3, r1
 8016748:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801674a:	2b00      	cmp	r3, #0
 801674c:	d105      	bne.n	801675a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801674e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016752:	f023 0301 	bic.w	r3, r3, #1
 8016756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801675a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801675e:	3301      	adds	r3, #1
 8016760:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8016764:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8016768:	2b0f      	cmp	r3, #15
 801676a:	d9bd      	bls.n	80166e8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	7a1b      	ldrb	r3, [r3, #8]
 8016770:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016774:	429a      	cmp	r2, r3
 8016776:	f4ff af73 	bcc.w	8016660 <RegionEU868LinkAdrReq+0x30>
 801677a:	e000      	b.n	801677e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801677c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801677e:	2302      	movs	r3, #2
 8016780:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8016784:	68fb      	ldr	r3, [r7, #12]
 8016786:	7a5b      	ldrb	r3, [r3, #9]
 8016788:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801678c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016790:	4618      	mov	r0, r3
 8016792:	f7ff fa29 	bl	8015be8 <RegionEU868GetPhyParam>
 8016796:	4603      	mov	r3, r0
 8016798:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 801679a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801679e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	7a9b      	ldrb	r3, [r3, #10]
 80167a4:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80167a6:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80167aa:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80167ac:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80167b0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80167b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80167b6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80167be:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80167c6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	7b5b      	ldrb	r3, [r3, #13]
 80167cc:	b25b      	sxtb	r3, r3
 80167ce:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80167d0:	2310      	movs	r3, #16
 80167d2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80167d4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80167d8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80167da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167dc:	b25b      	sxtb	r3, r3
 80167de:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80167e2:	2307      	movs	r3, #7
 80167e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80167e8:	4b21      	ldr	r3, [pc, #132]	; (8016870 <RegionEU868LinkAdrReq+0x240>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80167ee:	2307      	movs	r3, #7
 80167f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80167f4:	2300      	movs	r3, #0
 80167f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	681b      	ldr	r3, [r3, #0]
 80167fe:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8016800:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8016804:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016808:	1c9a      	adds	r2, r3, #2
 801680a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801680e:	1c59      	adds	r1, r3, #1
 8016810:	f107 0010 	add.w	r0, r7, #16
 8016814:	4623      	mov	r3, r4
 8016816:	f7fe fdae 	bl	8015376 <RegionCommonLinkAdrReqVerifyParams>
 801681a:	4603      	mov	r3, r0
 801681c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8016820:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016824:	2b07      	cmp	r3, #7
 8016826:	d10d      	bne.n	8016844 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016828:	4b11      	ldr	r3, [pc, #68]	; (8016870 <RegionEU868LinkAdrReq+0x240>)
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016830:	220c      	movs	r2, #12
 8016832:	2100      	movs	r1, #0
 8016834:	4618      	mov	r0, r3
 8016836:	f001 fd2b 	bl	8018290 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801683a:	4b0d      	ldr	r3, [pc, #52]	; (8016870 <RegionEU868LinkAdrReq+0x240>)
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016840:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016844:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801684c:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016854:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801685c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801685e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8016862:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8016864:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8016868:	4618      	mov	r0, r3
 801686a:	374c      	adds	r7, #76	; 0x4c
 801686c:	46bd      	mov	sp, r7
 801686e:	bd90      	pop	{r4, r7, pc}
 8016870:	20001984 	.word	0x20001984

08016874 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b084      	sub	sp, #16
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801687c:	2307      	movs	r3, #7
 801687e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016880:	2300      	movs	r3, #0
 8016882:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	685b      	ldr	r3, [r3, #4]
 8016888:	f107 020e 	add.w	r2, r7, #14
 801688c:	4611      	mov	r1, r2
 801688e:	4618      	mov	r0, r3
 8016890:	f7ff f8e4 	bl	8015a5c <VerifyRfFreq>
 8016894:	4603      	mov	r3, r0
 8016896:	f083 0301 	eor.w	r3, r3, #1
 801689a:	b2db      	uxtb	r3, r3
 801689c:	2b00      	cmp	r3, #0
 801689e:	d003      	beq.n	80168a8 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80168a0:	7bfb      	ldrb	r3, [r7, #15]
 80168a2:	f023 0301 	bic.w	r3, r3, #1
 80168a6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	f993 3000 	ldrsb.w	r3, [r3]
 80168ae:	2207      	movs	r2, #7
 80168b0:	2100      	movs	r1, #0
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7fe fb4d 	bl	8014f52 <RegionCommonValueInRange>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d103      	bne.n	80168c6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80168be:	7bfb      	ldrb	r3, [r7, #15]
 80168c0:	f023 0302 	bic.w	r3, r3, #2
 80168c4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80168cc:	2205      	movs	r2, #5
 80168ce:	2100      	movs	r1, #0
 80168d0:	4618      	mov	r0, r3
 80168d2:	f7fe fb3e 	bl	8014f52 <RegionCommonValueInRange>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d103      	bne.n	80168e4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80168dc:	7bfb      	ldrb	r3, [r7, #15]
 80168de:	f023 0304 	bic.w	r3, r3, #4
 80168e2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80168e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80168e6:	4618      	mov	r0, r3
 80168e8:	3710      	adds	r7, #16
 80168ea:	46bd      	mov	sp, r7
 80168ec:	bd80      	pop	{r7, pc}
	...

080168f0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80168f0:	b580      	push	{r7, lr}
 80168f2:	b086      	sub	sp, #24
 80168f4:	af00      	add	r7, sp, #0
 80168f6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80168f8:	2303      	movs	r3, #3
 80168fa:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d114      	bne.n	8016930 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801690c:	b2db      	uxtb	r3, r3
 801690e:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8016910:	f107 0308 	add.w	r3, r7, #8
 8016914:	4618      	mov	r0, r3
 8016916:	f000 f9f9 	bl	8016d0c <RegionEU868ChannelsRemove>
 801691a:	4603      	mov	r3, r0
 801691c:	f083 0301 	eor.w	r3, r3, #1
 8016920:	b2db      	uxtb	r3, r3
 8016922:	2b00      	cmp	r3, #0
 8016924:	d03b      	beq.n	801699e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016926:	7dfb      	ldrb	r3, [r7, #23]
 8016928:	f023 0303 	bic.w	r3, r3, #3
 801692c:	75fb      	strb	r3, [r7, #23]
 801692e:	e036      	b.n	801699e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801693c:	b2db      	uxtb	r3, r3
 801693e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8016940:	f107 030c 	add.w	r3, r7, #12
 8016944:	4618      	mov	r0, r3
 8016946:	f000 f93f 	bl	8016bc8 <RegionEU868ChannelAdd>
 801694a:	4603      	mov	r3, r0
 801694c:	2b06      	cmp	r3, #6
 801694e:	d820      	bhi.n	8016992 <RegionEU868NewChannelReq+0xa2>
 8016950:	a201      	add	r2, pc, #4	; (adr r2, 8016958 <RegionEU868NewChannelReq+0x68>)
 8016952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016956:	bf00      	nop
 8016958:	0801699d 	.word	0x0801699d
 801695c:	08016993 	.word	0x08016993
 8016960:	08016993 	.word	0x08016993
 8016964:	08016993 	.word	0x08016993
 8016968:	08016975 	.word	0x08016975
 801696c:	0801697f 	.word	0x0801697f
 8016970:	08016989 	.word	0x08016989
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8016974:	7dfb      	ldrb	r3, [r7, #23]
 8016976:	f023 0301 	bic.w	r3, r3, #1
 801697a:	75fb      	strb	r3, [r7, #23]
                break;
 801697c:	e00f      	b.n	801699e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801697e:	7dfb      	ldrb	r3, [r7, #23]
 8016980:	f023 0302 	bic.w	r3, r3, #2
 8016984:	75fb      	strb	r3, [r7, #23]
                break;
 8016986:	e00a      	b.n	801699e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8016988:	7dfb      	ldrb	r3, [r7, #23]
 801698a:	f023 0303 	bic.w	r3, r3, #3
 801698e:	75fb      	strb	r3, [r7, #23]
                break;
 8016990:	e005      	b.n	801699e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8016992:	7dfb      	ldrb	r3, [r7, #23]
 8016994:	f023 0303 	bic.w	r3, r3, #3
 8016998:	75fb      	strb	r3, [r7, #23]
                break;
 801699a:	e000      	b.n	801699e <RegionEU868NewChannelReq+0xae>
                break;
 801699c:	bf00      	nop
            }
        }
    }

    return status;
 801699e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80169a2:	4618      	mov	r0, r3
 80169a4:	3718      	adds	r7, #24
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bd80      	pop	{r7, pc}
 80169aa:	bf00      	nop

080169ac <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80169ac:	b480      	push	{r7}
 80169ae:	b083      	sub	sp, #12
 80169b0:	af00      	add	r7, sp, #0
 80169b2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80169b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	370c      	adds	r7, #12
 80169bc:	46bd      	mov	sp, r7
 80169be:	bc80      	pop	{r7}
 80169c0:	4770      	bx	lr
	...

080169c4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b084      	sub	sp, #16
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80169cc:	2303      	movs	r3, #3
 80169ce:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80169d0:	2300      	movs	r3, #0
 80169d2:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	f107 020e 	add.w	r2, r7, #14
 80169dc:	4611      	mov	r1, r2
 80169de:	4618      	mov	r0, r3
 80169e0:	f7ff f83c 	bl	8015a5c <VerifyRfFreq>
 80169e4:	4603      	mov	r3, r0
 80169e6:	f083 0301 	eor.w	r3, r3, #1
 80169ea:	b2db      	uxtb	r3, r3
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d003      	beq.n	80169f8 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 80169f0:	7bfb      	ldrb	r3, [r7, #15]
 80169f2:	f023 0301 	bic.w	r3, r3, #1
 80169f6:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80169f8:	4b13      	ldr	r3, [pc, #76]	; (8016a48 <RegionEU868DlChannelReq+0x84>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	4619      	mov	r1, r3
 8016a02:	460b      	mov	r3, r1
 8016a04:	005b      	lsls	r3, r3, #1
 8016a06:	440b      	add	r3, r1
 8016a08:	009b      	lsls	r3, r3, #2
 8016a0a:	4413      	add	r3, r2
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d103      	bne.n	8016a1a <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 8016a12:	7bfb      	ldrb	r3, [r7, #15]
 8016a14:	f023 0302 	bic.w	r3, r3, #2
 8016a18:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016a1a:	7bfb      	ldrb	r3, [r7, #15]
 8016a1c:	2b03      	cmp	r3, #3
 8016a1e:	d10d      	bne.n	8016a3c <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8016a20:	4b09      	ldr	r3, [pc, #36]	; (8016a48 <RegionEU868DlChannelReq+0x84>)
 8016a22:	6819      	ldr	r1, [r3, #0]
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	685a      	ldr	r2, [r3, #4]
 8016a2e:	4603      	mov	r3, r0
 8016a30:	005b      	lsls	r3, r3, #1
 8016a32:	4403      	add	r3, r0
 8016a34:	009b      	lsls	r3, r3, #2
 8016a36:	440b      	add	r3, r1
 8016a38:	3304      	adds	r3, #4
 8016a3a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a40:	4618      	mov	r0, r3
 8016a42:	3710      	adds	r7, #16
 8016a44:	46bd      	mov	sp, r7
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	20001984 	.word	0x20001984

08016a4c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	4603      	mov	r3, r0
 8016a54:	460a      	mov	r2, r1
 8016a56:	71fb      	strb	r3, [r7, #7]
 8016a58:	4613      	mov	r3, r2
 8016a5a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8016a60:	4618      	mov	r0, r3
 8016a62:	370c      	adds	r7, #12
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bc80      	pop	{r7}
 8016a68:	4770      	bx	lr
	...

08016a6c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b09a      	sub	sp, #104	; 0x68
 8016a70:	af02      	add	r7, sp, #8
 8016a72:	60f8      	str	r0, [r7, #12]
 8016a74:	60b9      	str	r1, [r7, #8]
 8016a76:	607a      	str	r2, [r7, #4]
 8016a78:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8016a80:	2300      	movs	r3, #0
 8016a82:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8016a86:	2300      	movs	r3, #0
 8016a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016a8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8016a8e:	2200      	movs	r2, #0
 8016a90:	601a      	str	r2, [r3, #0]
 8016a92:	605a      	str	r2, [r3, #4]
 8016a94:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016a96:	230c      	movs	r3, #12
 8016a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8016a9c:	2307      	movs	r3, #7
 8016a9e:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8016aa0:	4b47      	ldr	r3, [pc, #284]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016aa8:	2201      	movs	r2, #1
 8016aaa:	2100      	movs	r1, #0
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7fe faa1 	bl	8014ff4 <RegionCommonCountChannels>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d10a      	bne.n	8016ace <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016ab8:	4b41      	ldr	r3, [pc, #260]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8016ac0:	4b3f      	ldr	r3, [pc, #252]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f042 0207 	orr.w	r2, r2, #7
 8016ac8:	b292      	uxth	r2, r2
 8016aca:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	7a5b      	ldrb	r3, [r3, #9]
 8016ad2:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016ada:	b2db      	uxtb	r3, r3
 8016adc:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016ade:	4b38      	ldr	r3, [pc, #224]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016ae6:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016ae8:	4b35      	ldr	r3, [pc, #212]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8016aee:	4b35      	ldr	r3, [pc, #212]	; (8016bc4 <RegionEU868NextChannel+0x158>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016af4:	2310      	movs	r3, #16
 8016af6:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016af8:	f107 0312 	add.w	r3, r7, #18
 8016afc:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	7a9b      	ldrb	r3, [r3, #10]
 8016b0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8016b12:	2306      	movs	r3, #6
 8016b14:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016b18:	68fa      	ldr	r2, [r7, #12]
 8016b1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016b1e:	320c      	adds	r2, #12
 8016b20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016b24:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	7d1b      	ldrb	r3, [r3, #20]
 8016b2c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	8adb      	ldrh	r3, [r3, #22]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	4610      	mov	r0, r2
 8016b3e:	f7ff f803 	bl	8015b48 <GetTimeOnAir>
 8016b42:	4603      	mov	r3, r0
 8016b44:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016b46:	f107 0314 	add.w	r3, r7, #20
 8016b4a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016b4c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8016b50:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016b54:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	9301      	str	r3, [sp, #4]
 8016b5c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8016b60:	9300      	str	r3, [sp, #0]
 8016b62:	460b      	mov	r3, r1
 8016b64:	6839      	ldr	r1, [r7, #0]
 8016b66:	f7fe fe5c 	bl	8015822 <RegionCommonIdentifyChannels>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8016b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d10e      	bne.n	8016b96 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8016b78:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8016b7c:	3b01      	subs	r3, #1
 8016b7e:	4619      	mov	r1, r3
 8016b80:	2000      	movs	r0, #0
 8016b82:	f001 fb33 	bl	80181ec <randr>
 8016b86:	4603      	mov	r3, r0
 8016b88:	3360      	adds	r3, #96	; 0x60
 8016b8a:	443b      	add	r3, r7
 8016b8c:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	701a      	strb	r2, [r3, #0]
 8016b94:	e00e      	b.n	8016bb4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8016b96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b9a:	2b0c      	cmp	r3, #12
 8016b9c:	d10a      	bne.n	8016bb4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016b9e:	4b08      	ldr	r3, [pc, #32]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8016ba6:	4b06      	ldr	r3, [pc, #24]	; (8016bc0 <RegionEU868NextChannel+0x154>)
 8016ba8:	681b      	ldr	r3, [r3, #0]
 8016baa:	f042 0207 	orr.w	r2, r2, #7
 8016bae:	b292      	uxth	r2, r2
 8016bb0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 8016bb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3760      	adds	r7, #96	; 0x60
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	20001984 	.word	0x20001984
 8016bc4:	20001988 	.word	0x20001988

08016bc8 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016bd8:	2300      	movs	r3, #0
 8016bda:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	791b      	ldrb	r3, [r3, #4]
 8016be0:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016be2:	7b7b      	ldrb	r3, [r7, #13]
 8016be4:	2b02      	cmp	r3, #2
 8016be6:	d801      	bhi.n	8016bec <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016be8:	2306      	movs	r3, #6
 8016bea:	e089      	b.n	8016d00 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016bec:	7b7b      	ldrb	r3, [r7, #13]
 8016bee:	2b0f      	cmp	r3, #15
 8016bf0:	d901      	bls.n	8016bf6 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8016bf2:	2303      	movs	r3, #3
 8016bf4:	e084      	b.n	8016d00 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	7a1b      	ldrb	r3, [r3, #8]
 8016bfc:	f343 0303 	sbfx	r3, r3, #0, #4
 8016c00:	b25b      	sxtb	r3, r3
 8016c02:	2207      	movs	r2, #7
 8016c04:	2100      	movs	r1, #0
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7fe f9a3 	bl	8014f52 <RegionCommonValueInRange>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d101      	bne.n	8016c16 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8016c12:	2301      	movs	r3, #1
 8016c14:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	7a1b      	ldrb	r3, [r3, #8]
 8016c1c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016c20:	b25b      	sxtb	r3, r3
 8016c22:	2207      	movs	r2, #7
 8016c24:	2100      	movs	r1, #0
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7fe f993 	bl	8014f52 <RegionCommonValueInRange>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d101      	bne.n	8016c36 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8016c32:	2301      	movs	r3, #1
 8016c34:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	7a1b      	ldrb	r3, [r3, #8]
 8016c3c:	f343 0303 	sbfx	r3, r3, #0, #4
 8016c40:	b25a      	sxtb	r2, r3
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	7a1b      	ldrb	r3, [r3, #8]
 8016c48:	f343 1303 	sbfx	r3, r3, #4, #4
 8016c4c:	b25b      	sxtb	r3, r3
 8016c4e:	429a      	cmp	r2, r3
 8016c50:	dd01      	ble.n	8016c56 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8016c52:	2301      	movs	r3, #1
 8016c54:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016c56:	7bbb      	ldrb	r3, [r7, #14]
 8016c58:	f083 0301 	eor.w	r3, r3, #1
 8016c5c:	b2db      	uxtb	r3, r3
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d010      	beq.n	8016c84 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	f107 020c 	add.w	r2, r7, #12
 8016c6c:	4611      	mov	r1, r2
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7fe fef4 	bl	8015a5c <VerifyRfFreq>
 8016c74:	4603      	mov	r3, r0
 8016c76:	f083 0301 	eor.w	r3, r3, #1
 8016c7a:	b2db      	uxtb	r3, r3
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d001      	beq.n	8016c84 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016c80:	2301      	movs	r3, #1
 8016c82:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8016c84:	7bfb      	ldrb	r3, [r7, #15]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d004      	beq.n	8016c94 <RegionEU868ChannelAdd+0xcc>
 8016c8a:	7bbb      	ldrb	r3, [r7, #14]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d001      	beq.n	8016c94 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016c90:	2306      	movs	r3, #6
 8016c92:	e035      	b.n	8016d00 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8016c94:	7bfb      	ldrb	r3, [r7, #15]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d001      	beq.n	8016c9e <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016c9a:	2305      	movs	r3, #5
 8016c9c:	e030      	b.n	8016d00 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8016c9e:	7bbb      	ldrb	r3, [r7, #14]
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d001      	beq.n	8016ca8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8016ca4:	2304      	movs	r3, #4
 8016ca6:	e02b      	b.n	8016d00 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016ca8:	4b17      	ldr	r3, [pc, #92]	; (8016d08 <RegionEU868ChannelAdd+0x140>)
 8016caa:	6819      	ldr	r1, [r3, #0]
 8016cac:	7b7a      	ldrb	r2, [r7, #13]
 8016cae:	4613      	mov	r3, r2
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	4413      	add	r3, r2
 8016cb4:	009b      	lsls	r3, r3, #2
 8016cb6:	18c8      	adds	r0, r1, r3
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	220c      	movs	r2, #12
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	f001 faab 	bl	801821a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016cc4:	4b10      	ldr	r3, [pc, #64]	; (8016d08 <RegionEU868ChannelAdd+0x140>)
 8016cc6:	6819      	ldr	r1, [r3, #0]
 8016cc8:	7b7a      	ldrb	r2, [r7, #13]
 8016cca:	7b38      	ldrb	r0, [r7, #12]
 8016ccc:	4613      	mov	r3, r2
 8016cce:	005b      	lsls	r3, r3, #1
 8016cd0:	4413      	add	r3, r2
 8016cd2:	009b      	lsls	r3, r3, #2
 8016cd4:	440b      	add	r3, r1
 8016cd6:	3309      	adds	r3, #9
 8016cd8:	4602      	mov	r2, r0
 8016cda:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016cdc:	4b0a      	ldr	r3, [pc, #40]	; (8016d08 <RegionEU868ChannelAdd+0x140>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8016ce4:	b21a      	sxth	r2, r3
 8016ce6:	7b7b      	ldrb	r3, [r7, #13]
 8016ce8:	2101      	movs	r1, #1
 8016cea:	fa01 f303 	lsl.w	r3, r1, r3
 8016cee:	b21b      	sxth	r3, r3
 8016cf0:	4313      	orrs	r3, r2
 8016cf2:	b21a      	sxth	r2, r3
 8016cf4:	4b04      	ldr	r3, [pc, #16]	; (8016d08 <RegionEU868ChannelAdd+0x140>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	b292      	uxth	r2, r2
 8016cfa:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8016cfe:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016d00:	4618      	mov	r0, r3
 8016d02:	3710      	adds	r7, #16
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	20001984 	.word	0x20001984

08016d0c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b086      	sub	sp, #24
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016d1a:	7dfb      	ldrb	r3, [r7, #23]
 8016d1c:	2b02      	cmp	r3, #2
 8016d1e:	d801      	bhi.n	8016d24 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8016d20:	2300      	movs	r3, #0
 8016d22:	e016      	b.n	8016d52 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016d24:	4b0d      	ldr	r3, [pc, #52]	; (8016d5c <RegionEU868ChannelsRemove+0x50>)
 8016d26:	6819      	ldr	r1, [r3, #0]
 8016d28:	7dfa      	ldrb	r2, [r7, #23]
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	005b      	lsls	r3, r3, #1
 8016d2e:	4413      	add	r3, r2
 8016d30:	009b      	lsls	r3, r3, #2
 8016d32:	440b      	add	r3, r1
 8016d34:	461a      	mov	r2, r3
 8016d36:	2300      	movs	r3, #0
 8016d38:	6013      	str	r3, [r2, #0]
 8016d3a:	6053      	str	r3, [r2, #4]
 8016d3c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8016d3e:	4b07      	ldr	r3, [pc, #28]	; (8016d5c <RegionEU868ChannelsRemove+0x50>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016d46:	7df9      	ldrb	r1, [r7, #23]
 8016d48:	2210      	movs	r2, #16
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7fe f91e 	bl	8014f8c <RegionCommonChanDisable>
 8016d50:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8016d52:	4618      	mov	r0, r3
 8016d54:	3718      	adds	r7, #24
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
 8016d5a:	bf00      	nop
 8016d5c:	20001984 	.word	0x20001984

08016d60 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	4603      	mov	r3, r0
 8016d68:	71fb      	strb	r3, [r7, #7]
 8016d6a:	460b      	mov	r3, r1
 8016d6c:	71bb      	strb	r3, [r7, #6]
 8016d6e:	4613      	mov	r3, r2
 8016d70:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016d72:	79ba      	ldrb	r2, [r7, #6]
 8016d74:	797b      	ldrb	r3, [r7, #5]
 8016d76:	1ad3      	subs	r3, r2, r3
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8016d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	da01      	bge.n	8016d88 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8016d84:	2300      	movs	r3, #0
 8016d86:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8016d88:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	3714      	adds	r7, #20
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	bc80      	pop	{r7}
 8016d92:	4770      	bx	lr

08016d94 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b084      	sub	sp, #16
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	603b      	str	r3, [r7, #0]
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	71fb      	strb	r3, [r7, #7]
 8016da0:	460b      	mov	r3, r1
 8016da2:	71bb      	strb	r3, [r7, #6]
 8016da4:	4613      	mov	r3, r2
 8016da6:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8016da8:	79fb      	ldrb	r3, [r7, #7]
 8016daa:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8016dac:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016db4:	4611      	mov	r1, r2
 8016db6:	4618      	mov	r0, r3
 8016db8:	f7fe fdd3 	bl	8015962 <RegionCommonLimitTxPower>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8016dc0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8016dc4:	2b04      	cmp	r3, #4
 8016dc6:	d106      	bne.n	8016dd6 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8016dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016dcc:	2b02      	cmp	r3, #2
 8016dce:	bfb8      	it	lt
 8016dd0:	2302      	movlt	r3, #2
 8016dd2:	73fb      	strb	r3, [r7, #15]
 8016dd4:	e00d      	b.n	8016df2 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8016dd6:	2204      	movs	r2, #4
 8016dd8:	2100      	movs	r1, #0
 8016dda:	6838      	ldr	r0, [r7, #0]
 8016ddc:	f7fe f90a 	bl	8014ff4 <RegionCommonCountChannels>
 8016de0:	4603      	mov	r3, r0
 8016de2:	2b31      	cmp	r3, #49	; 0x31
 8016de4:	d805      	bhi.n	8016df2 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8016de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016dea:	2b05      	cmp	r3, #5
 8016dec:	bfb8      	it	lt
 8016dee:	2305      	movlt	r3, #5
 8016df0:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8016df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3710      	adds	r7, #16
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
	...

08016e00 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b082      	sub	sp, #8
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8016e08:	4b18      	ldr	r3, [pc, #96]	; (8016e6c <VerifyRfFreq+0x6c>)
 8016e0a:	6a1b      	ldr	r3, [r3, #32]
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	4798      	blx	r3
 8016e10:	4603      	mov	r3, r0
 8016e12:	f083 0301 	eor.w	r3, r3, #1
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d001      	beq.n	8016e20 <VerifyRfFreq+0x20>
    {
        return false;
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	e021      	b.n	8016e64 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	4a13      	ldr	r2, [pc, #76]	; (8016e70 <VerifyRfFreq+0x70>)
 8016e24:	4293      	cmp	r3, r2
 8016e26:	d910      	bls.n	8016e4a <VerifyRfFreq+0x4a>
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	4a12      	ldr	r2, [pc, #72]	; (8016e74 <VerifyRfFreq+0x74>)
 8016e2c:	4293      	cmp	r3, r2
 8016e2e:	d80c      	bhi.n	8016e4a <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8016e30:	687a      	ldr	r2, [r7, #4]
 8016e32:	4b11      	ldr	r3, [pc, #68]	; (8016e78 <VerifyRfFreq+0x78>)
 8016e34:	4413      	add	r3, r2
 8016e36:	4a11      	ldr	r2, [pc, #68]	; (8016e7c <VerifyRfFreq+0x7c>)
 8016e38:	fba2 1203 	umull	r1, r2, r2, r3
 8016e3c:	0c92      	lsrs	r2, r2, #18
 8016e3e:	4910      	ldr	r1, [pc, #64]	; (8016e80 <VerifyRfFreq+0x80>)
 8016e40:	fb01 f202 	mul.w	r2, r1, r2
 8016e44:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8016e46:	2a00      	cmp	r2, #0
 8016e48:	d001      	beq.n	8016e4e <VerifyRfFreq+0x4e>
    {
        return false;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	e00a      	b.n	8016e64 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	4a0c      	ldr	r2, [pc, #48]	; (8016e84 <VerifyRfFreq+0x84>)
 8016e52:	4293      	cmp	r3, r2
 8016e54:	d903      	bls.n	8016e5e <VerifyRfFreq+0x5e>
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	4a06      	ldr	r2, [pc, #24]	; (8016e74 <VerifyRfFreq+0x74>)
 8016e5a:	4293      	cmp	r3, r2
 8016e5c:	d901      	bls.n	8016e62 <VerifyRfFreq+0x62>
    {
        return false;
 8016e5e:	2300      	movs	r3, #0
 8016e60:	e000      	b.n	8016e64 <VerifyRfFreq+0x64>
    }
    return true;
 8016e62:	2301      	movs	r3, #1
}
 8016e64:	4618      	mov	r0, r3
 8016e66:	3708      	adds	r7, #8
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}
 8016e6c:	0801dd4c 	.word	0x0801dd4c
 8016e70:	3708709f 	.word	0x3708709f
 8016e74:	374886e0 	.word	0x374886e0
 8016e78:	c8f78f60 	.word	0xc8f78f60
 8016e7c:	6fd91d85 	.word	0x6fd91d85
 8016e80:	000927c0 	.word	0x000927c0
 8016e84:	35c8015f 	.word	0x35c8015f

08016e88 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8016e88:	b590      	push	{r4, r7, lr}
 8016e8a:	b089      	sub	sp, #36	; 0x24
 8016e8c:	af04      	add	r7, sp, #16
 8016e8e:	4603      	mov	r3, r0
 8016e90:	460a      	mov	r2, r1
 8016e92:	71fb      	strb	r3, [r7, #7]
 8016e94:	4613      	mov	r3, r2
 8016e96:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8016e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016e9c:	4a0f      	ldr	r2, [pc, #60]	; (8016edc <GetTimeOnAir+0x54>)
 8016e9e:	5cd3      	ldrb	r3, [r2, r3]
 8016ea0:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8016ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ea6:	490e      	ldr	r1, [pc, #56]	; (8016ee0 <GetTimeOnAir+0x58>)
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7fe fd6f 	bl	801598c <RegionCommonGetBandwidth>
 8016eae:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016eb0:	4b0c      	ldr	r3, [pc, #48]	; (8016ee4 <GetTimeOnAir+0x5c>)
 8016eb2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016eb4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016eb8:	88bb      	ldrh	r3, [r7, #4]
 8016eba:	b2db      	uxtb	r3, r3
 8016ebc:	2101      	movs	r1, #1
 8016ebe:	9103      	str	r1, [sp, #12]
 8016ec0:	9302      	str	r3, [sp, #8]
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	9301      	str	r3, [sp, #4]
 8016ec6:	2308      	movs	r3, #8
 8016ec8:	9300      	str	r3, [sp, #0]
 8016eca:	2301      	movs	r3, #1
 8016ecc:	68b9      	ldr	r1, [r7, #8]
 8016ece:	2001      	movs	r0, #1
 8016ed0:	47a0      	blx	r4
 8016ed2:	4603      	mov	r3, r0
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3714      	adds	r7, #20
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd90      	pop	{r4, r7, pc}
 8016edc:	0801dcc8 	.word	0x0801dcc8
 8016ee0:	0801dcd8 	.word	0x0801dcd8
 8016ee4:	0801dd4c 	.word	0x0801dd4c

08016ee8 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8016ee8:	b580      	push	{r7, lr}
 8016eea:	b088      	sub	sp, #32
 8016eec:	af00      	add	r7, sp, #0
 8016eee:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	781b      	ldrb	r3, [r3, #0]
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	2b37      	cmp	r3, #55	; 0x37
 8016efc:	f200 8136 	bhi.w	801716c <RegionUS915GetPhyParam+0x284>
 8016f00:	a201      	add	r2, pc, #4	; (adr r2, 8016f08 <RegionUS915GetPhyParam+0x20>)
 8016f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f06:	bf00      	nop
 8016f08:	08016fe9 	.word	0x08016fe9
 8016f0c:	08016fef 	.word	0x08016fef
 8016f10:	0801716d 	.word	0x0801716d
 8016f14:	0801716d 	.word	0x0801716d
 8016f18:	0801716d 	.word	0x0801716d
 8016f1c:	08016ff5 	.word	0x08016ff5
 8016f20:	0801716d 	.word	0x0801716d
 8016f24:	0801702f 	.word	0x0801702f
 8016f28:	0801716d 	.word	0x0801716d
 8016f2c:	08017035 	.word	0x08017035
 8016f30:	0801703b 	.word	0x0801703b
 8016f34:	08017041 	.word	0x08017041
 8016f38:	08017047 	.word	0x08017047
 8016f3c:	08017057 	.word	0x08017057
 8016f40:	08017067 	.word	0x08017067
 8016f44:	0801706d 	.word	0x0801706d
 8016f48:	08017075 	.word	0x08017075
 8016f4c:	0801707d 	.word	0x0801707d
 8016f50:	08017085 	.word	0x08017085
 8016f54:	0801708d 	.word	0x0801708d
 8016f58:	08017095 	.word	0x08017095
 8016f5c:	080170a9 	.word	0x080170a9
 8016f60:	080170af 	.word	0x080170af
 8016f64:	080170b5 	.word	0x080170b5
 8016f68:	080170bb 	.word	0x080170bb
 8016f6c:	080170c7 	.word	0x080170c7
 8016f70:	080170d3 	.word	0x080170d3
 8016f74:	080170d9 	.word	0x080170d9
 8016f78:	080170e1 	.word	0x080170e1
 8016f7c:	080170e7 	.word	0x080170e7
 8016f80:	080170ed 	.word	0x080170ed
 8016f84:	080170f3 	.word	0x080170f3
 8016f88:	08016ffb 	.word	0x08016ffb
 8016f8c:	0801716d 	.word	0x0801716d
 8016f90:	0801716d 	.word	0x0801716d
 8016f94:	0801716d 	.word	0x0801716d
 8016f98:	0801716d 	.word	0x0801716d
 8016f9c:	0801716d 	.word	0x0801716d
 8016fa0:	0801716d 	.word	0x0801716d
 8016fa4:	0801716d 	.word	0x0801716d
 8016fa8:	0801716d 	.word	0x0801716d
 8016fac:	0801716d 	.word	0x0801716d
 8016fb0:	0801716d 	.word	0x0801716d
 8016fb4:	0801716d 	.word	0x0801716d
 8016fb8:	0801716d 	.word	0x0801716d
 8016fbc:	0801716d 	.word	0x0801716d
 8016fc0:	080170fb 	.word	0x080170fb
 8016fc4:	0801710f 	.word	0x0801710f
 8016fc8:	0801711d 	.word	0x0801711d
 8016fcc:	08017123 	.word	0x08017123
 8016fd0:	0801716d 	.word	0x0801716d
 8016fd4:	08017129 	.word	0x08017129
 8016fd8:	0801713d 	.word	0x0801713d
 8016fdc:	08017143 	.word	0x08017143
 8016fe0:	08017149 	.word	0x08017149
 8016fe4:	08017159 	.word	0x08017159
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8016fe8:	2308      	movs	r3, #8
 8016fea:	61bb      	str	r3, [r7, #24]
            break;
 8016fec:	e0bf      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	61bb      	str	r3, [r7, #24]
            break;
 8016ff2:	e0bc      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	61bb      	str	r3, [r7, #24]
            break;
 8016ff8:	e0b9      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017000:	733b      	strb	r3, [r7, #12]
 8017002:	2304      	movs	r3, #4
 8017004:	737b      	strb	r3, [r7, #13]
 8017006:	2300      	movs	r3, #0
 8017008:	73bb      	strb	r3, [r7, #14]
 801700a:	2348      	movs	r3, #72	; 0x48
 801700c:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801700e:	4b5b      	ldr	r3, [pc, #364]	; (801717c <RegionUS915GetPhyParam+0x294>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8017016:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8017018:	4b58      	ldr	r3, [pc, #352]	; (801717c <RegionUS915GetPhyParam+0x294>)
 801701a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801701c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801701e:	f107 030c 	add.w	r3, r7, #12
 8017022:	4618      	mov	r0, r3
 8017024:	f7fe fc5f 	bl	80158e6 <RegionCommonGetNextLowerTxDr>
 8017028:	4603      	mov	r3, r0
 801702a:	61bb      	str	r3, [r7, #24]
            break;
 801702c:	e09f      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 801702e:	2300      	movs	r3, #0
 8017030:	61bb      	str	r3, [r7, #24]
            break;
 8017032:	e09c      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8017034:	2300      	movs	r3, #0
 8017036:	61bb      	str	r3, [r7, #24]
            break;
 8017038:	e099      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 801703a:	2340      	movs	r3, #64	; 0x40
 801703c:	61bb      	str	r3, [r7, #24]
            break;
 801703e:	e096      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8017040:	2320      	movs	r3, #32
 8017042:	61bb      	str	r3, [r7, #24]
            break;
 8017044:	e093      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801704c:	461a      	mov	r2, r3
 801704e:	4b4c      	ldr	r3, [pc, #304]	; (8017180 <RegionUS915GetPhyParam+0x298>)
 8017050:	5c9b      	ldrb	r3, [r3, r2]
 8017052:	61bb      	str	r3, [r7, #24]
            break;
 8017054:	e08b      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801705c:	461a      	mov	r2, r3
 801705e:	4b49      	ldr	r3, [pc, #292]	; (8017184 <RegionUS915GetPhyParam+0x29c>)
 8017060:	5c9b      	ldrb	r3, [r3, r2]
 8017062:	61bb      	str	r3, [r7, #24]
            break;
 8017064:	e083      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8017066:	2300      	movs	r3, #0
 8017068:	61bb      	str	r3, [r7, #24]
            break;
 801706a:	e080      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 801706c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8017070:	61bb      	str	r3, [r7, #24]
            break;
 8017072:	e07c      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8017074:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017078:	61bb      	str	r3, [r7, #24]
            break;
 801707a:	e078      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 801707c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8017080:	61bb      	str	r3, [r7, #24]
            break;
 8017082:	e074      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8017084:	f241 3388 	movw	r3, #5000	; 0x1388
 8017088:	61bb      	str	r3, [r7, #24]
            break;
 801708a:	e070      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 801708c:	f241 7370 	movw	r3, #6000	; 0x1770
 8017090:	61bb      	str	r3, [r7, #24]
            break;
 8017092:	e06c      	b.n	801716e <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8017094:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017098:	483b      	ldr	r0, [pc, #236]	; (8017188 <RegionUS915GetPhyParam+0x2a0>)
 801709a:	f001 f8a7 	bl	80181ec <randr>
 801709e:	4603      	mov	r3, r0
 80170a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80170a4:	61bb      	str	r3, [r7, #24]
            break;
 80170a6:	e062      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80170a8:	2300      	movs	r3, #0
 80170aa:	61bb      	str	r3, [r7, #24]
            break;
 80170ac:	e05f      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 80170ae:	4b37      	ldr	r3, [pc, #220]	; (801718c <RegionUS915GetPhyParam+0x2a4>)
 80170b0:	61bb      	str	r3, [r7, #24]
            break;
 80170b2:	e05c      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 80170b4:	2308      	movs	r3, #8
 80170b6:	61bb      	str	r3, [r7, #24]
            break;
 80170b8:	e059      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80170ba:	4b30      	ldr	r3, [pc, #192]	; (801717c <RegionUS915GetPhyParam+0x294>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80170c2:	61bb      	str	r3, [r7, #24]
            break;
 80170c4:	e053      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80170c6:	4b2d      	ldr	r3, [pc, #180]	; (801717c <RegionUS915GetPhyParam+0x294>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80170ce:	61bb      	str	r3, [r7, #24]
            break;
 80170d0:	e04d      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 80170d2:	2348      	movs	r3, #72	; 0x48
 80170d4:	61bb      	str	r3, [r7, #24]
            break;
 80170d6:	e04a      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 80170d8:	4b28      	ldr	r3, [pc, #160]	; (801717c <RegionUS915GetPhyParam+0x294>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	61bb      	str	r3, [r7, #24]
            break;
 80170de:	e046      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 80170e0:	2300      	movs	r3, #0
 80170e2:	61bb      	str	r3, [r7, #24]
            break;
 80170e4:	e043      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 80170e6:	2300      	movs	r3, #0
 80170e8:	61bb      	str	r3, [r7, #24]
            break;
 80170ea:	e040      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 80170ec:	4b28      	ldr	r3, [pc, #160]	; (8017190 <RegionUS915GetPhyParam+0x2a8>)
 80170ee:	61bb      	str	r3, [r7, #24]
            break;
 80170f0:	e03d      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 80170f2:	f04f 0300 	mov.w	r3, #0
 80170f6:	61bb      	str	r3, [r7, #24]
            break;
 80170f8:	e039      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	791b      	ldrb	r3, [r3, #4]
 80170fe:	4a25      	ldr	r2, [pc, #148]	; (8017194 <RegionUS915GetPhyParam+0x2ac>)
 8017100:	4922      	ldr	r1, [pc, #136]	; (801718c <RegionUS915GetPhyParam+0x2a4>)
 8017102:	4618      	mov	r0, r3
 8017104:	f7fd fd51 	bl	8014baa <RegionBaseUSCalcDownlinkFrequency>
 8017108:	4603      	mov	r3, r0
 801710a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801710c:	e02f      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801710e:	2317      	movs	r3, #23
 8017110:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8017112:	2304      	movs	r3, #4
 8017114:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8017116:	2303      	movs	r3, #3
 8017118:	76bb      	strb	r3, [r7, #26]
            break;
 801711a:	e028      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801711c:	2308      	movs	r3, #8
 801711e:	61bb      	str	r3, [r7, #24]
            break;
 8017120:	e025      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017122:	2308      	movs	r3, #8
 8017124:	61bb      	str	r3, [r7, #24]
            break;
 8017126:	e022      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	791b      	ldrb	r3, [r3, #4]
 801712c:	4a19      	ldr	r2, [pc, #100]	; (8017194 <RegionUS915GetPhyParam+0x2ac>)
 801712e:	4917      	ldr	r1, [pc, #92]	; (801718c <RegionUS915GetPhyParam+0x2a4>)
 8017130:	4618      	mov	r0, r3
 8017132:	f7fd fd3a 	bl	8014baa <RegionBaseUSCalcDownlinkFrequency>
 8017136:	4603      	mov	r3, r0
 8017138:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801713a:	e018      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801713c:	2308      	movs	r3, #8
 801713e:	61bb      	str	r3, [r7, #24]
            break;
 8017140:	e015      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8017142:	2308      	movs	r3, #8
 8017144:	61bb      	str	r3, [r7, #24]
            break;
 8017146:	e012      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801714e:	461a      	mov	r2, r3
 8017150:	4b11      	ldr	r3, [pc, #68]	; (8017198 <RegionUS915GetPhyParam+0x2b0>)
 8017152:	5c9b      	ldrb	r3, [r3, r2]
 8017154:	61bb      	str	r3, [r7, #24]
            break;
 8017156:	e00a      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801715e:	490f      	ldr	r1, [pc, #60]	; (801719c <RegionUS915GetPhyParam+0x2b4>)
 8017160:	4618      	mov	r0, r3
 8017162:	f7fe fc13 	bl	801598c <RegionCommonGetBandwidth>
 8017166:	4603      	mov	r3, r0
 8017168:	61bb      	str	r3, [r7, #24]
            break;
 801716a:	e000      	b.n	801716e <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 801716c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801716e:	69bb      	ldr	r3, [r7, #24]
 8017170:	61fb      	str	r3, [r7, #28]
 8017172:	69fb      	ldr	r3, [r7, #28]
}
 8017174:	4618      	mov	r0, r3
 8017176:	3720      	adds	r7, #32
 8017178:	46bd      	mov	sp, r7
 801717a:	bd80      	pop	{r7, pc}
 801717c:	20001990 	.word	0x20001990
 8017180:	0801dd2c 	.word	0x0801dd2c
 8017184:	0801dd3c 	.word	0x0801dd3c
 8017188:	fffffc18 	.word	0xfffffc18
 801718c:	370870a0 	.word	0x370870a0
 8017190:	4200999a 	.word	0x4200999a
 8017194:	000927c0 	.word	0x000927c0
 8017198:	0801dcc8 	.word	0x0801dcc8
 801719c:	0801dcd8 	.word	0x0801dcd8

080171a0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80171a0:	b590      	push	{r4, r7, lr}
 80171a2:	b085      	sub	sp, #20
 80171a4:	af02      	add	r7, sp, #8
 80171a6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80171a8:	4b11      	ldr	r3, [pc, #68]	; (80171f0 <RegionUS915SetBandTxDone+0x50>)
 80171aa:	681a      	ldr	r2, [r3, #0]
 80171ac:	4b11      	ldr	r3, [pc, #68]	; (80171f4 <RegionUS915SetBandTxDone+0x54>)
 80171ae:	6819      	ldr	r1, [r3, #0]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	781b      	ldrb	r3, [r3, #0]
 80171b4:	4618      	mov	r0, r3
 80171b6:	4603      	mov	r3, r0
 80171b8:	005b      	lsls	r3, r3, #1
 80171ba:	4403      	add	r3, r0
 80171bc:	009b      	lsls	r3, r3, #2
 80171be:	440b      	add	r3, r1
 80171c0:	3309      	adds	r3, #9
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	4619      	mov	r1, r3
 80171c6:	460b      	mov	r3, r1
 80171c8:	005b      	lsls	r3, r3, #1
 80171ca:	440b      	add	r3, r1
 80171cc:	00db      	lsls	r3, r3, #3
 80171ce:	18d0      	adds	r0, r2, r3
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	6899      	ldr	r1, [r3, #8]
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	785c      	ldrb	r4, [r3, #1]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	691a      	ldr	r2, [r3, #16]
 80171dc:	9200      	str	r2, [sp, #0]
 80171de:	68db      	ldr	r3, [r3, #12]
 80171e0:	4622      	mov	r2, r4
 80171e2:	f7fd ff59 	bl	8015098 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80171e6:	bf00      	nop
 80171e8:	370c      	adds	r7, #12
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd90      	pop	{r4, r7, pc}
 80171ee:	bf00      	nop
 80171f0:	20001994 	.word	0x20001994
 80171f4:	20001990 	.word	0x20001990

080171f8 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b08a      	sub	sp, #40	; 0x28
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8017200:	2301      	movs	r3, #1
 8017202:	81bb      	strh	r3, [r7, #12]
 8017204:	2300      	movs	r3, #0
 8017206:	73bb      	strb	r3, [r7, #14]
 8017208:	2300      	movs	r3, #0
 801720a:	613b      	str	r3, [r7, #16]
 801720c:	2300      	movs	r3, #0
 801720e:	617b      	str	r3, [r7, #20]
 8017210:	2300      	movs	r3, #0
 8017212:	61bb      	str	r3, [r7, #24]
 8017214:	2300      	movs	r3, #0
 8017216:	61fb      	str	r3, [r7, #28]
 8017218:	2300      	movs	r3, #0
 801721a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	7b1b      	ldrb	r3, [r3, #12]
 8017222:	2b00      	cmp	r3, #0
 8017224:	d007      	beq.n	8017236 <RegionUS915InitDefaults+0x3e>
 8017226:	2b00      	cmp	r3, #0
 8017228:	f2c0 8104 	blt.w	8017434 <RegionUS915InitDefaults+0x23c>
 801722c:	3b01      	subs	r3, #1
 801722e:	2b01      	cmp	r3, #1
 8017230:	f200 8100 	bhi.w	8017434 <RegionUS915InitDefaults+0x23c>
 8017234:	e0ce      	b.n	80173d4 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	2b00      	cmp	r3, #0
 801723c:	f000 80fc 	beq.w	8017438 <RegionUS915InitDefaults+0x240>
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	685b      	ldr	r3, [r3, #4]
 8017244:	2b00      	cmp	r3, #0
 8017246:	f000 80f7 	beq.w	8017438 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	4a7c      	ldr	r2, [pc, #496]	; (8017440 <RegionUS915InitDefaults+0x248>)
 8017250:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	4a7b      	ldr	r2, [pc, #492]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017258:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	4a7a      	ldr	r2, [pc, #488]	; (8017448 <RegionUS915InitDefaults+0x250>)
 8017260:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017262:	4b77      	ldr	r3, [pc, #476]	; (8017440 <RegionUS915InitDefaults+0x248>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	2200      	movs	r2, #0
 8017268:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801726a:	4b75      	ldr	r3, [pc, #468]	; (8017440 <RegionUS915InitDefaults+0x248>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	2200      	movs	r2, #0
 8017270:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8017272:	4b75      	ldr	r3, [pc, #468]	; (8017448 <RegionUS915InitDefaults+0x250>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	f107 010c 	add.w	r1, r7, #12
 801727a:	2218      	movs	r2, #24
 801727c:	4618      	mov	r0, r3
 801727e:	f000 ffcc 	bl	801821a <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8017282:	2300      	movs	r3, #0
 8017284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017288:	e02e      	b.n	80172e8 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801728a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801728e:	4a6f      	ldr	r2, [pc, #444]	; (801744c <RegionUS915InitDefaults+0x254>)
 8017290:	fb03 f202 	mul.w	r2, r3, r2
 8017294:	4b6e      	ldr	r3, [pc, #440]	; (8017450 <RegionUS915InitDefaults+0x258>)
 8017296:	4413      	add	r3, r2
 8017298:	4a6a      	ldr	r2, [pc, #424]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 801729a:	6811      	ldr	r1, [r2, #0]
 801729c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80172a0:	4618      	mov	r0, r3
 80172a2:	4613      	mov	r3, r2
 80172a4:	005b      	lsls	r3, r3, #1
 80172a6:	4413      	add	r3, r2
 80172a8:	009b      	lsls	r3, r3, #2
 80172aa:	440b      	add	r3, r1
 80172ac:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80172ae:	4b65      	ldr	r3, [pc, #404]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80172b0:	6819      	ldr	r1, [r3, #0]
 80172b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80172b6:	4613      	mov	r3, r2
 80172b8:	005b      	lsls	r3, r3, #1
 80172ba:	4413      	add	r3, r2
 80172bc:	009b      	lsls	r3, r3, #2
 80172be:	440b      	add	r3, r1
 80172c0:	3308      	adds	r3, #8
 80172c2:	2230      	movs	r2, #48	; 0x30
 80172c4:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80172c6:	4b5f      	ldr	r3, [pc, #380]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80172c8:	6819      	ldr	r1, [r3, #0]
 80172ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80172ce:	4613      	mov	r3, r2
 80172d0:	005b      	lsls	r3, r3, #1
 80172d2:	4413      	add	r3, r2
 80172d4:	009b      	lsls	r3, r3, #2
 80172d6:	440b      	add	r3, r1
 80172d8:	3309      	adds	r3, #9
 80172da:	2200      	movs	r2, #0
 80172dc:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80172de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172e2:	3301      	adds	r3, #1
 80172e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80172e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80172ec:	2b3f      	cmp	r3, #63	; 0x3f
 80172ee:	d9cc      	bls.n	801728a <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80172f0:	2340      	movs	r3, #64	; 0x40
 80172f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80172f6:	e02f      	b.n	8017358 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80172f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80172fc:	3b40      	subs	r3, #64	; 0x40
 80172fe:	4a55      	ldr	r2, [pc, #340]	; (8017454 <RegionUS915InitDefaults+0x25c>)
 8017300:	fb03 f202 	mul.w	r2, r3, r2
 8017304:	4b54      	ldr	r3, [pc, #336]	; (8017458 <RegionUS915InitDefaults+0x260>)
 8017306:	4413      	add	r3, r2
 8017308:	4a4e      	ldr	r2, [pc, #312]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 801730a:	6811      	ldr	r1, [r2, #0]
 801730c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017310:	4618      	mov	r0, r3
 8017312:	4613      	mov	r3, r2
 8017314:	005b      	lsls	r3, r3, #1
 8017316:	4413      	add	r3, r2
 8017318:	009b      	lsls	r3, r3, #2
 801731a:	440b      	add	r3, r1
 801731c:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801731e:	4b49      	ldr	r3, [pc, #292]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017320:	6819      	ldr	r1, [r3, #0]
 8017322:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017326:	4613      	mov	r3, r2
 8017328:	005b      	lsls	r3, r3, #1
 801732a:	4413      	add	r3, r2
 801732c:	009b      	lsls	r3, r3, #2
 801732e:	440b      	add	r3, r1
 8017330:	3308      	adds	r3, #8
 8017332:	2244      	movs	r2, #68	; 0x44
 8017334:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8017336:	4b43      	ldr	r3, [pc, #268]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017338:	6819      	ldr	r1, [r3, #0]
 801733a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801733e:	4613      	mov	r3, r2
 8017340:	005b      	lsls	r3, r3, #1
 8017342:	4413      	add	r3, r2
 8017344:	009b      	lsls	r3, r3, #2
 8017346:	440b      	add	r3, r1
 8017348:	3309      	adds	r3, #9
 801734a:	2200      	movs	r2, #0
 801734c:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801734e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017352:	3301      	adds	r3, #1
 8017354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017358:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801735c:	2b47      	cmp	r3, #71	; 0x47
 801735e:	d9cb      	bls.n	80172f8 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8017360:	4b38      	ldr	r3, [pc, #224]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017368:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801736c:	4b35      	ldr	r3, [pc, #212]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017374:	f8a3 236e 	strh.w	r2, [r3, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8017378:	4b32      	ldr	r3, [pc, #200]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017380:	f8a3 2370 	strh.w	r2, [r3, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8017384:	4b2f      	ldr	r3, [pc, #188]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801738c:	f8a3 2372 	strh.w	r2, [r3, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8017390:	4b2c      	ldr	r3, [pc, #176]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	22ff      	movs	r2, #255	; 0xff
 8017396:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801739a:	4b2a      	ldr	r3, [pc, #168]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	2200      	movs	r2, #0
 80173a0:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376
#endif /* HYBRID_ENABLED == 1 */
            /* ST_WORKAROUND_END */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80173a4:	4b27      	ldr	r3, [pc, #156]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80173ac:	4b25      	ldr	r3, [pc, #148]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80173b4:	2206      	movs	r2, #6
 80173b6:	4619      	mov	r1, r3
 80173b8:	f7fd fe48 	bl	801504c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80173bc:	4b20      	ldr	r3, [pc, #128]	; (8017440 <RegionUS915InitDefaults+0x248>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	4618      	mov	r0, r3
 80173c2:	4b20      	ldr	r3, [pc, #128]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80173ca:	2206      	movs	r2, #6
 80173cc:	4619      	mov	r1, r3
 80173ce:	f7fd fe3d 	bl	801504c <RegionCommonChanMaskCopy>
            break;
 80173d2:	e032      	b.n	801743a <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80173d4:	4b1b      	ldr	r3, [pc, #108]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80173dc:	4b19      	ldr	r3, [pc, #100]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 80173e4:	2206      	movs	r2, #6
 80173e6:	4619      	mov	r1, r3
 80173e8:	f7fd fe30 	bl	801504c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80173ec:	2300      	movs	r3, #0
 80173ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80173f2:	e01a      	b.n	801742a <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80173f4:	4b12      	ldr	r3, [pc, #72]	; (8017440 <RegionUS915InitDefaults+0x248>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80173fc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017400:	4b10      	ldr	r3, [pc, #64]	; (8017444 <RegionUS915InitDefaults+0x24c>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017408:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 801740c:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8017410:	4b0b      	ldr	r3, [pc, #44]	; (8017440 <RegionUS915InitDefaults+0x248>)
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8017418:	4001      	ands	r1, r0
 801741a:	b289      	uxth	r1, r1
 801741c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 8017420:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8017424:	3301      	adds	r3, #1
 8017426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801742a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801742e:	2b05      	cmp	r3, #5
 8017430:	d9e0      	bls.n	80173f4 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8017432:	e002      	b.n	801743a <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8017434:	bf00      	nop
 8017436:	e000      	b.n	801743a <RegionUS915InitDefaults+0x242>
                return;
 8017438:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801743a:	3728      	adds	r7, #40	; 0x28
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}
 8017440:	2000198c 	.word	0x2000198c
 8017444:	20001990 	.word	0x20001990
 8017448:	20001994 	.word	0x20001994
 801744c:	00030d40 	.word	0x00030d40
 8017450:	35c80160 	.word	0x35c80160
 8017454:	00186a00 	.word	0x00186a00
 8017458:	35d2afc0 	.word	0x35d2afc0

0801745c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b082      	sub	sp, #8
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	460b      	mov	r3, r1
 8017466:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8017468:	78fb      	ldrb	r3, [r7, #3]
 801746a:	2b0f      	cmp	r3, #15
 801746c:	d867      	bhi.n	801753e <RegionUS915Verify+0xe2>
 801746e:	a201      	add	r2, pc, #4	; (adr r2, 8017474 <RegionUS915Verify+0x18>)
 8017470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017474:	080174b5 	.word	0x080174b5
 8017478:	0801753f 	.word	0x0801753f
 801747c:	0801753f 	.word	0x0801753f
 8017480:	0801753f 	.word	0x0801753f
 8017484:	0801753f 	.word	0x0801753f
 8017488:	080174c3 	.word	0x080174c3
 801748c:	080174e1 	.word	0x080174e1
 8017490:	080174ff 	.word	0x080174ff
 8017494:	0801753f 	.word	0x0801753f
 8017498:	0801751d 	.word	0x0801751d
 801749c:	0801751d 	.word	0x0801751d
 80174a0:	0801753f 	.word	0x0801753f
 80174a4:	0801753f 	.word	0x0801753f
 80174a8:	0801753f 	.word	0x0801753f
 80174ac:	0801753f 	.word	0x0801753f
 80174b0:	0801753b 	.word	0x0801753b
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7ff fca1 	bl	8016e00 <VerifyRfFreq>
 80174be:	4603      	mov	r3, r0
 80174c0:	e03e      	b.n	8017540 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f993 3000 	ldrsb.w	r3, [r3]
 80174c8:	2204      	movs	r2, #4
 80174ca:	2100      	movs	r1, #0
 80174cc:	4618      	mov	r0, r3
 80174ce:	f7fd fd40 	bl	8014f52 <RegionCommonValueInRange>
 80174d2:	4603      	mov	r3, r0
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	bf14      	ite	ne
 80174d8:	2301      	movne	r3, #1
 80174da:	2300      	moveq	r3, #0
 80174dc:	b2db      	uxtb	r3, r3
 80174de:	e02f      	b.n	8017540 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f993 3000 	ldrsb.w	r3, [r3]
 80174e6:	2205      	movs	r2, #5
 80174e8:	2100      	movs	r1, #0
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7fd fd31 	bl	8014f52 <RegionCommonValueInRange>
 80174f0:	4603      	mov	r3, r0
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	bf14      	ite	ne
 80174f6:	2301      	movne	r3, #1
 80174f8:	2300      	moveq	r3, #0
 80174fa:	b2db      	uxtb	r3, r3
 80174fc:	e020      	b.n	8017540 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	f993 3000 	ldrsb.w	r3, [r3]
 8017504:	220d      	movs	r2, #13
 8017506:	2108      	movs	r1, #8
 8017508:	4618      	mov	r0, r3
 801750a:	f7fd fd22 	bl	8014f52 <RegionCommonValueInRange>
 801750e:	4603      	mov	r3, r0
 8017510:	2b00      	cmp	r3, #0
 8017512:	bf14      	ite	ne
 8017514:	2301      	movne	r3, #1
 8017516:	2300      	moveq	r3, #0
 8017518:	b2db      	uxtb	r3, r3
 801751a:	e011      	b.n	8017540 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	f993 3000 	ldrsb.w	r3, [r3]
 8017522:	220e      	movs	r2, #14
 8017524:	2100      	movs	r1, #0
 8017526:	4618      	mov	r0, r3
 8017528:	f7fd fd13 	bl	8014f52 <RegionCommonValueInRange>
 801752c:	4603      	mov	r3, r0
 801752e:	2b00      	cmp	r3, #0
 8017530:	bf14      	ite	ne
 8017532:	2301      	movne	r3, #1
 8017534:	2300      	moveq	r3, #0
 8017536:	b2db      	uxtb	r3, r3
 8017538:	e002      	b.n	8017540 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 801753a:	2300      	movs	r3, #0
 801753c:	e000      	b.n	8017540 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801753e:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8017540:	4618      	mov	r0, r3
 8017542:	3708      	adds	r7, #8
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8017548:	b480      	push	{r7}
 801754a:	b085      	sub	sp, #20
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	7a1b      	ldrb	r3, [r3, #8]
 8017554:	2b10      	cmp	r3, #16
 8017556:	d160      	bne.n	801761a <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	685b      	ldr	r3, [r3, #4]
 801755c:	330f      	adds	r3, #15
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	2b01      	cmp	r3, #1
 8017562:	d15c      	bne.n	801761e <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017564:	2300      	movs	r3, #0
 8017566:	73fb      	strb	r3, [r7, #15]
 8017568:	2300      	movs	r3, #0
 801756a:	73bb      	strb	r3, [r7, #14]
 801756c:	e051      	b.n	8017612 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	685a      	ldr	r2, [r3, #4]
 8017572:	7bbb      	ldrb	r3, [r7, #14]
 8017574:	4413      	add	r3, r2
 8017576:	7819      	ldrb	r1, [r3, #0]
 8017578:	4b2b      	ldr	r3, [pc, #172]	; (8017628 <RegionUS915ApplyCFList+0xe0>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	7bfa      	ldrb	r2, [r7, #15]
 801757e:	b289      	uxth	r1, r1
 8017580:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017584:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8017588:	4b27      	ldr	r3, [pc, #156]	; (8017628 <RegionUS915ApplyCFList+0xe0>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	7bfa      	ldrb	r2, [r7, #15]
 801758e:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 8017592:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	685a      	ldr	r2, [r3, #4]
 801759a:	7bbb      	ldrb	r3, [r7, #14]
 801759c:	3301      	adds	r3, #1
 801759e:	4413      	add	r3, r2
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	b29b      	uxth	r3, r3
 80175a4:	021b      	lsls	r3, r3, #8
 80175a6:	b299      	uxth	r1, r3
 80175a8:	4b1f      	ldr	r3, [pc, #124]	; (8017628 <RegionUS915ApplyCFList+0xe0>)
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	7bfa      	ldrb	r2, [r7, #15]
 80175ae:	4301      	orrs	r1, r0
 80175b0:	b289      	uxth	r1, r1
 80175b2:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80175b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80175ba:	7bfb      	ldrb	r3, [r7, #15]
 80175bc:	2b04      	cmp	r3, #4
 80175be:	d10f      	bne.n	80175e0 <RegionUS915ApplyCFList+0x98>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80175c0:	4b19      	ldr	r3, [pc, #100]	; (8017628 <RegionUS915ApplyCFList+0xe0>)
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	7bfa      	ldrb	r2, [r7, #15]
 80175c6:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80175ca:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80175ce:	4b16      	ldr	r3, [pc, #88]	; (8017628 <RegionUS915ApplyCFList+0xe0>)
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	7bfa      	ldrb	r2, [r7, #15]
 80175d4:	b2c9      	uxtb	r1, r1
 80175d6:	b289      	uxth	r1, r1
 80175d8:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80175dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80175e0:	4b12      	ldr	r3, [pc, #72]	; (801762c <RegionUS915ApplyCFList+0xe4>)
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	7bfa      	ldrb	r2, [r7, #15]
 80175e6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80175ea:	4b0f      	ldr	r3, [pc, #60]	; (8017628 <RegionUS915ApplyCFList+0xe0>)
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	7bfa      	ldrb	r2, [r7, #15]
 80175f0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80175f4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80175f8:	4b0c      	ldr	r3, [pc, #48]	; (801762c <RegionUS915ApplyCFList+0xe4>)
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	7bfa      	ldrb	r2, [r7, #15]
 80175fe:	4001      	ands	r1, r0
 8017600:	b289      	uxth	r1, r1
 8017602:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8017606:	7bfb      	ldrb	r3, [r7, #15]
 8017608:	3301      	adds	r3, #1
 801760a:	73fb      	strb	r3, [r7, #15]
 801760c:	7bbb      	ldrb	r3, [r7, #14]
 801760e:	3302      	adds	r3, #2
 8017610:	73bb      	strb	r3, [r7, #14]
 8017612:	7bfb      	ldrb	r3, [r7, #15]
 8017614:	2b04      	cmp	r3, #4
 8017616:	d9aa      	bls.n	801756e <RegionUS915ApplyCFList+0x26>
 8017618:	e002      	b.n	8017620 <RegionUS915ApplyCFList+0xd8>
        return;
 801761a:	bf00      	nop
 801761c:	e000      	b.n	8017620 <RegionUS915ApplyCFList+0xd8>
        return;
 801761e:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8017620:	3714      	adds	r7, #20
 8017622:	46bd      	mov	sp, r7
 8017624:	bc80      	pop	{r7}
 8017626:	4770      	bx	lr
 8017628:	20001990 	.word	0x20001990
 801762c:	2000198c 	.word	0x2000198c

08017630 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b084      	sub	sp, #16
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	2204      	movs	r2, #4
 801763e:	2100      	movs	r1, #0
 8017640:	4618      	mov	r0, r3
 8017642:	f7fd fcd7 	bl	8014ff4 <RegionCommonCountChannels>
 8017646:	4603      	mov	r3, r0
 8017648:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 801764a:	7bbb      	ldrb	r3, [r7, #14]
 801764c:	2b01      	cmp	r3, #1
 801764e:	d804      	bhi.n	801765a <RegionUS915ChanMaskSet+0x2a>
 8017650:	7bbb      	ldrb	r3, [r7, #14]
 8017652:	2b00      	cmp	r3, #0
 8017654:	d001      	beq.n	801765a <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8017656:	2300      	movs	r3, #0
 8017658:	e04a      	b.n	80176f0 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	791b      	ldrb	r3, [r3, #4]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d002      	beq.n	8017668 <RegionUS915ChanMaskSet+0x38>
 8017662:	2b01      	cmp	r3, #1
 8017664:	d036      	beq.n	80176d4 <RegionUS915ChanMaskSet+0xa4>
 8017666:	e040      	b.n	80176ea <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8017668:	4b23      	ldr	r3, [pc, #140]	; (80176f8 <RegionUS915ChanMaskSet+0xc8>)
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8017670:	687b      	ldr	r3, [r7, #4]
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	2206      	movs	r2, #6
 8017676:	4619      	mov	r1, r3
 8017678:	f7fd fce8 	bl	801504c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801767c:	4b1e      	ldr	r3, [pc, #120]	; (80176f8 <RegionUS915ChanMaskSet+0xc8>)
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	f8b3 2374 	ldrh.w	r2, [r3, #884]	; 0x374
 8017684:	4b1c      	ldr	r3, [pc, #112]	; (80176f8 <RegionUS915ChanMaskSet+0xc8>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	b2d2      	uxtb	r2, r2
 801768a:	b292      	uxth	r2, r2
 801768c:	f8a3 2374 	strh.w	r2, [r3, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8017690:	4b19      	ldr	r3, [pc, #100]	; (80176f8 <RegionUS915ChanMaskSet+0xc8>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	2200      	movs	r2, #0
 8017696:	f8a3 2376 	strh.w	r2, [r3, #886]	; 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801769a:	2300      	movs	r3, #0
 801769c:	73fb      	strb	r3, [r7, #15]
 801769e:	e015      	b.n	80176cc <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80176a0:	4b16      	ldr	r3, [pc, #88]	; (80176fc <RegionUS915ChanMaskSet+0xcc>)
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	7bfa      	ldrb	r2, [r7, #15]
 80176a6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80176aa:	4b13      	ldr	r3, [pc, #76]	; (80176f8 <RegionUS915ChanMaskSet+0xc8>)
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	7bfa      	ldrb	r2, [r7, #15]
 80176b0:	f502 72d8 	add.w	r2, r2, #432	; 0x1b0
 80176b4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80176b8:	4b10      	ldr	r3, [pc, #64]	; (80176fc <RegionUS915ChanMaskSet+0xcc>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	7bfa      	ldrb	r2, [r7, #15]
 80176be:	4001      	ands	r1, r0
 80176c0:	b289      	uxth	r1, r1
 80176c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80176c6:	7bfb      	ldrb	r3, [r7, #15]
 80176c8:	3301      	adds	r3, #1
 80176ca:	73fb      	strb	r3, [r7, #15]
 80176cc:	7bfb      	ldrb	r3, [r7, #15]
 80176ce:	2b05      	cmp	r3, #5
 80176d0:	d9e6      	bls.n	80176a0 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80176d2:	e00c      	b.n	80176ee <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80176d4:	4b08      	ldr	r3, [pc, #32]	; (80176f8 <RegionUS915ChanMaskSet+0xc8>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	2206      	movs	r2, #6
 80176e2:	4619      	mov	r1, r3
 80176e4:	f7fd fcb2 	bl	801504c <RegionCommonChanMaskCopy>
            break;
 80176e8:	e001      	b.n	80176ee <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80176ea:	2300      	movs	r3, #0
 80176ec:	e000      	b.n	80176f0 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80176ee:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80176f0:	4618      	mov	r0, r3
 80176f2:	3710      	adds	r7, #16
 80176f4:	46bd      	mov	sp, r7
 80176f6:	bd80      	pop	{r7, pc}
 80176f8:	20001990 	.word	0x20001990
 80176fc:	2000198c 	.word	0x2000198c

08017700 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b088      	sub	sp, #32
 8017704:	af02      	add	r7, sp, #8
 8017706:	60ba      	str	r2, [r7, #8]
 8017708:	607b      	str	r3, [r7, #4]
 801770a:	4603      	mov	r3, r0
 801770c:	73fb      	strb	r3, [r7, #15]
 801770e:	460b      	mov	r3, r1
 8017710:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8017712:	2300      	movs	r3, #0
 8017714:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8017716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801771a:	2b0d      	cmp	r3, #13
 801771c:	bfa8      	it	ge
 801771e:	230d      	movge	r3, #13
 8017720:	b25a      	sxtb	r2, r3
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801772c:	4916      	ldr	r1, [pc, #88]	; (8017788 <RegionUS915ComputeRxWindowParameters+0x88>)
 801772e:	4618      	mov	r0, r3
 8017730:	f7fe f92c 	bl	801598c <RegionCommonGetBandwidth>
 8017734:	4603      	mov	r3, r0
 8017736:	b2da      	uxtb	r2, r3
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017742:	461a      	mov	r2, r3
 8017744:	4b11      	ldr	r3, [pc, #68]	; (801778c <RegionUS915ComputeRxWindowParameters+0x8c>)
 8017746:	5c9a      	ldrb	r2, [r3, r2]
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801774e:	4619      	mov	r1, r3
 8017750:	4b0d      	ldr	r3, [pc, #52]	; (8017788 <RegionUS915ComputeRxWindowParameters+0x88>)
 8017752:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017756:	4619      	mov	r1, r3
 8017758:	4610      	mov	r0, r2
 801775a:	f7fd fe95 	bl	8015488 <RegionCommonComputeSymbolTimeLoRa>
 801775e:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017760:	4b0b      	ldr	r3, [pc, #44]	; (8017790 <RegionUS915ComputeRxWindowParameters+0x90>)
 8017762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017764:	4798      	blx	r3
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	3308      	adds	r3, #8
 801776a:	687a      	ldr	r2, [r7, #4]
 801776c:	320c      	adds	r2, #12
 801776e:	7bb9      	ldrb	r1, [r7, #14]
 8017770:	9201      	str	r2, [sp, #4]
 8017772:	9300      	str	r3, [sp, #0]
 8017774:	4603      	mov	r3, r0
 8017776:	68ba      	ldr	r2, [r7, #8]
 8017778:	6978      	ldr	r0, [r7, #20]
 801777a:	f7fd feab 	bl	80154d4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801777e:	bf00      	nop
 8017780:	3718      	adds	r7, #24
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	0801dcd8 	.word	0x0801dcd8
 801778c:	0801dcc8 	.word	0x0801dcc8
 8017790:	0801dd4c 	.word	0x0801dd4c

08017794 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017794:	b590      	push	{r4, r7, lr}
 8017796:	b091      	sub	sp, #68	; 0x44
 8017798:	af0a      	add	r7, sp, #40	; 0x28
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	785b      	ldrb	r3, [r3, #1]
 80177a2:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80177a4:	2300      	movs	r3, #0
 80177a6:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80177a8:	2300      	movs	r3, #0
 80177aa:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	685b      	ldr	r3, [r3, #4]
 80177b0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80177b2:	4b34      	ldr	r3, [pc, #208]	; (8017884 <RegionUS915RxConfig+0xf0>)
 80177b4:	685b      	ldr	r3, [r3, #4]
 80177b6:	4798      	blx	r3
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d001      	beq.n	80177c2 <RegionUS915RxConfig+0x2e>
    {
        return false;
 80177be:	2300      	movs	r3, #0
 80177c0:	e05c      	b.n	801787c <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	7cdb      	ldrb	r3, [r3, #19]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d109      	bne.n	80177de <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	781b      	ldrb	r3, [r3, #0]
 80177ce:	f003 0307 	and.w	r3, r3, #7
 80177d2:	4a2d      	ldr	r2, [pc, #180]	; (8017888 <RegionUS915RxConfig+0xf4>)
 80177d4:	fb03 f202 	mul.w	r2, r3, r2
 80177d8:	4b2c      	ldr	r3, [pc, #176]	; (801788c <RegionUS915RxConfig+0xf8>)
 80177da:	4413      	add	r3, r2
 80177dc:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80177de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177e2:	4a2b      	ldr	r2, [pc, #172]	; (8017890 <RegionUS915RxConfig+0xfc>)
 80177e4:	5cd3      	ldrb	r3, [r2, r3]
 80177e6:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80177e8:	4b26      	ldr	r3, [pc, #152]	; (8017884 <RegionUS915RxConfig+0xf0>)
 80177ea:	68db      	ldr	r3, [r3, #12]
 80177ec:	6938      	ldr	r0, [r7, #16]
 80177ee:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80177f0:	4b24      	ldr	r3, [pc, #144]	; (8017884 <RegionUS915RxConfig+0xf0>)
 80177f2:	699c      	ldr	r4, [r3, #24]
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	789b      	ldrb	r3, [r3, #2]
 80177f8:	4618      	mov	r0, r3
 80177fa:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	689b      	ldr	r3, [r3, #8]
 8017802:	b29b      	uxth	r3, r3
 8017804:	687a      	ldr	r2, [r7, #4]
 8017806:	7c92      	ldrb	r2, [r2, #18]
 8017808:	9209      	str	r2, [sp, #36]	; 0x24
 801780a:	2201      	movs	r2, #1
 801780c:	9208      	str	r2, [sp, #32]
 801780e:	2200      	movs	r2, #0
 8017810:	9207      	str	r2, [sp, #28]
 8017812:	2200      	movs	r2, #0
 8017814:	9206      	str	r2, [sp, #24]
 8017816:	2200      	movs	r2, #0
 8017818:	9205      	str	r2, [sp, #20]
 801781a:	2200      	movs	r2, #0
 801781c:	9204      	str	r2, [sp, #16]
 801781e:	2200      	movs	r2, #0
 8017820:	9203      	str	r2, [sp, #12]
 8017822:	9302      	str	r3, [sp, #8]
 8017824:	2308      	movs	r3, #8
 8017826:	9301      	str	r3, [sp, #4]
 8017828:	2300      	movs	r3, #0
 801782a:	9300      	str	r3, [sp, #0]
 801782c:	2301      	movs	r3, #1
 801782e:	460a      	mov	r2, r1
 8017830:	4601      	mov	r1, r0
 8017832:	2001      	movs	r0, #1
 8017834:	47a0      	blx	r4

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	7c5b      	ldrb	r3, [r3, #17]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d005      	beq.n	801784a <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 801783e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017842:	4a14      	ldr	r2, [pc, #80]	; (8017894 <RegionUS915RxConfig+0x100>)
 8017844:	5cd3      	ldrb	r3, [r2, r3]
 8017846:	75fb      	strb	r3, [r7, #23]
 8017848:	e004      	b.n	8017854 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 801784a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801784e:	4a12      	ldr	r2, [pc, #72]	; (8017898 <RegionUS915RxConfig+0x104>)
 8017850:	5cd3      	ldrb	r3, [r2, r3]
 8017852:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8017854:	4b0b      	ldr	r3, [pc, #44]	; (8017884 <RegionUS915RxConfig+0xf0>)
 8017856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017858:	7dfa      	ldrb	r2, [r7, #23]
 801785a:	320d      	adds	r2, #13
 801785c:	b2d2      	uxtb	r2, r2
 801785e:	4611      	mov	r1, r2
 8017860:	2001      	movs	r0, #1
 8017862:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	7cdb      	ldrb	r3, [r3, #19]
 8017868:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801786c:	6939      	ldr	r1, [r7, #16]
 801786e:	4618      	mov	r0, r3
 8017870:	f7fe f8aa 	bl	80159c8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	7bfa      	ldrb	r2, [r7, #15]
 8017878:	701a      	strb	r2, [r3, #0]
    return true;
 801787a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 801787c:	4618      	mov	r0, r3
 801787e:	371c      	adds	r7, #28
 8017880:	46bd      	mov	sp, r7
 8017882:	bd90      	pop	{r4, r7, pc}
 8017884:	0801dd4c 	.word	0x0801dd4c
 8017888:	000927c0 	.word	0x000927c0
 801788c:	370870a0 	.word	0x370870a0
 8017890:	0801dcc8 	.word	0x0801dcc8
 8017894:	0801dd3c 	.word	0x0801dd3c
 8017898:	0801dd2c 	.word	0x0801dd2c

0801789c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801789c:	b590      	push	{r4, r7, lr}
 801789e:	b093      	sub	sp, #76	; 0x4c
 80178a0:	af0a      	add	r7, sp, #40	; 0x28
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80178ae:	461a      	mov	r2, r3
 80178b0:	4b49      	ldr	r3, [pc, #292]	; (80179d8 <RegionUS915TxConfig+0x13c>)
 80178b2:	5c9b      	ldrb	r3, [r3, r2]
 80178b4:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80178bc:	4b47      	ldr	r3, [pc, #284]	; (80179dc <RegionUS915TxConfig+0x140>)
 80178be:	681a      	ldr	r2, [r3, #0]
 80178c0:	4b47      	ldr	r3, [pc, #284]	; (80179e0 <RegionUS915TxConfig+0x144>)
 80178c2:	6819      	ldr	r1, [r3, #0]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	781b      	ldrb	r3, [r3, #0]
 80178c8:	461c      	mov	r4, r3
 80178ca:	4623      	mov	r3, r4
 80178cc:	005b      	lsls	r3, r3, #1
 80178ce:	4423      	add	r3, r4
 80178d0:	009b      	lsls	r3, r3, #2
 80178d2:	440b      	add	r3, r1
 80178d4:	3309      	adds	r3, #9
 80178d6:	781b      	ldrb	r3, [r3, #0]
 80178d8:	4619      	mov	r1, r3
 80178da:	460b      	mov	r3, r1
 80178dc:	005b      	lsls	r3, r3, #1
 80178de:	440b      	add	r3, r1
 80178e0:	00db      	lsls	r3, r3, #3
 80178e2:	4413      	add	r3, r2
 80178e4:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80178ee:	4b3c      	ldr	r3, [pc, #240]	; (80179e0 <RegionUS915TxConfig+0x144>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80178f6:	f7ff fa4d 	bl	8016d94 <LimitTxPower>
 80178fa:	4603      	mov	r3, r0
 80178fc:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017904:	4937      	ldr	r1, [pc, #220]	; (80179e4 <RegionUS915TxConfig+0x148>)
 8017906:	4618      	mov	r0, r3
 8017908:	f7fe f840 	bl	801598c <RegionCommonGetBandwidth>
 801790c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801790e:	2300      	movs	r3, #0
 8017910:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8017912:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017916:	f04f 0200 	mov.w	r2, #0
 801791a:	4933      	ldr	r1, [pc, #204]	; (80179e8 <RegionUS915TxConfig+0x14c>)
 801791c:	4618      	mov	r0, r3
 801791e:	f7fd fe91 	bl	8015644 <RegionCommonComputeTxPower>
 8017922:	4603      	mov	r3, r0
 8017924:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8017926:	4b31      	ldr	r3, [pc, #196]	; (80179ec <RegionUS915TxConfig+0x150>)
 8017928:	68da      	ldr	r2, [r3, #12]
 801792a:	4b2d      	ldr	r3, [pc, #180]	; (80179e0 <RegionUS915TxConfig+0x144>)
 801792c:	6819      	ldr	r1, [r3, #0]
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	781b      	ldrb	r3, [r3, #0]
 8017932:	4618      	mov	r0, r3
 8017934:	4603      	mov	r3, r0
 8017936:	005b      	lsls	r3, r3, #1
 8017938:	4403      	add	r3, r0
 801793a:	009b      	lsls	r3, r3, #2
 801793c:	440b      	add	r3, r1
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	4618      	mov	r0, r3
 8017942:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8017944:	4b29      	ldr	r3, [pc, #164]	; (80179ec <RegionUS915TxConfig+0x150>)
 8017946:	69dc      	ldr	r4, [r3, #28]
 8017948:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801794c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8017950:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017954:	9208      	str	r2, [sp, #32]
 8017956:	2200      	movs	r2, #0
 8017958:	9207      	str	r2, [sp, #28]
 801795a:	2200      	movs	r2, #0
 801795c:	9206      	str	r2, [sp, #24]
 801795e:	2200      	movs	r2, #0
 8017960:	9205      	str	r2, [sp, #20]
 8017962:	2201      	movs	r2, #1
 8017964:	9204      	str	r2, [sp, #16]
 8017966:	2200      	movs	r2, #0
 8017968:	9203      	str	r2, [sp, #12]
 801796a:	2208      	movs	r2, #8
 801796c:	9202      	str	r2, [sp, #8]
 801796e:	2201      	movs	r2, #1
 8017970:	9201      	str	r2, [sp, #4]
 8017972:	9300      	str	r3, [sp, #0]
 8017974:	69bb      	ldr	r3, [r7, #24]
 8017976:	2200      	movs	r2, #0
 8017978:	2001      	movs	r0, #1
 801797a:	47a0      	blx	r4
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801797c:	4b18      	ldr	r3, [pc, #96]	; (80179e0 <RegionUS915TxConfig+0x144>)
 801797e:	681a      	ldr	r2, [r3, #0]
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	781b      	ldrb	r3, [r3, #0]
 8017984:	4619      	mov	r1, r3
 8017986:	460b      	mov	r3, r1
 8017988:	005b      	lsls	r3, r3, #1
 801798a:	440b      	add	r3, r1
 801798c:	009b      	lsls	r3, r3, #2
 801798e:	4413      	add	r3, r2
 8017990:	681a      	ldr	r2, [r3, #0]
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017998:	4619      	mov	r1, r3
 801799a:	4610      	mov	r0, r2
 801799c:	f7fe f846 	bl	8015a2c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80179a0:	4b12      	ldr	r3, [pc, #72]	; (80179ec <RegionUS915TxConfig+0x150>)
 80179a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80179a4:	68fa      	ldr	r2, [r7, #12]
 80179a6:	8992      	ldrh	r2, [r2, #12]
 80179a8:	b2d2      	uxtb	r2, r2
 80179aa:	4611      	mov	r1, r2
 80179ac:	2001      	movs	r0, #1
 80179ae:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80179b6:	68fb      	ldr	r3, [r7, #12]
 80179b8:	899b      	ldrh	r3, [r3, #12]
 80179ba:	4619      	mov	r1, r3
 80179bc:	4610      	mov	r0, r2
 80179be:	f7ff fa63 	bl	8016e88 <GetTimeOnAir>
 80179c2:	4602      	mov	r2, r0
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	7fba      	ldrb	r2, [r7, #30]
 80179cc:	701a      	strb	r2, [r3, #0]
    return true;
 80179ce:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3724      	adds	r7, #36	; 0x24
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd90      	pop	{r4, r7, pc}
 80179d8:	0801dcc8 	.word	0x0801dcc8
 80179dc:	20001994 	.word	0x20001994
 80179e0:	20001990 	.word	0x20001990
 80179e4:	0801dcd8 	.word	0x0801dcd8
 80179e8:	41f00000 	.word	0x41f00000
 80179ec:	0801dd4c 	.word	0x0801dd4c

080179f0 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80179f0:	b590      	push	{r4, r7, lr}
 80179f2:	b097      	sub	sp, #92	; 0x5c
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	60f8      	str	r0, [r7, #12]
 80179f8:	60b9      	str	r1, [r7, #8]
 80179fa:	607a      	str	r2, [r7, #4]
 80179fc:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80179fe:	2307      	movs	r3, #7
 8017a00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8017a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017a08:	2200      	movs	r2, #0
 8017a0a:	601a      	str	r2, [r3, #0]
 8017a0c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    uint8_t bytesProcessed = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8017a1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a1e:	2200      	movs	r2, #0
 8017a20:	601a      	str	r2, [r3, #0]
 8017a22:	605a      	str	r2, [r3, #4]
 8017a24:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8017a26:	4b97      	ldr	r3, [pc, #604]	; (8017c84 <RegionUS915LinkAdrReq+0x294>)
 8017a28:	681b      	ldr	r3, [r3, #0]
 8017a2a:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8017a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017a32:	2206      	movs	r2, #6
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7fd fb09 	bl	801504c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017a3a:	e11b      	b.n	8017c74 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	685a      	ldr	r2, [r3, #4]
 8017a40:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8017a44:	4413      	add	r3, r2
 8017a46:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017a4a:	4611      	mov	r1, r2
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	f7fd fc41 	bl	80152d4 <RegionCommonParseLinkAdrReq>
 8017a52:	4603      	mov	r3, r0
 8017a54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        if( nextIndex == 0 )
 8017a58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	f000 8113 	beq.w	8017c88 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8017a62:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017a66:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8017a6a:	4413      	add	r3, r2
 8017a6c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8017a70:	2307      	movs	r3, #7
 8017a72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8017a76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017a7a:	2b06      	cmp	r3, #6
 8017a7c:	d116      	bne.n	8017aac <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8017a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a82:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0xFFFF;
 8017a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0xFFFF;
 8017a8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0xFFFF;
 8017a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017a9a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8017a9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017aa2:	b2db      	uxtb	r3, r3
 8017aa4:	b29b      	uxth	r3, r3
 8017aa6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017aaa:	e0e3      	b.n	8017c74 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8017aac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ab0:	2b07      	cmp	r3, #7
 8017ab2:	d112      	bne.n	8017ada <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
            channelsMask[1] = 0x0000;
 8017aba:	2300      	movs	r3, #0
 8017abc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            channelsMask[2] = 0x0000;
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            channelsMask[3] = 0x0000;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8017acc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017ad0:	b2db      	uxtb	r3, r3
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017ad8:	e0cc      	b.n	8017c74 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8017ada:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017ade:	2b05      	cmp	r3, #5
 8017ae0:	f040 80bf 	bne.w	8017c62 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8017aea:	2300      	movs	r3, #0
 8017aec:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8017af0:	2300      	movs	r3, #0
 8017af2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017af6:	e0ae      	b.n	8017c56 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8017af8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8017afc:	b2da      	uxtb	r2, r3
 8017afe:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017b02:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b06:	fa01 f303 	lsl.w	r3, r1, r3
 8017b0a:	4013      	ands	r3, r2
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d04d      	beq.n	8017bac <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8017b10:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b14:	f003 0301 	and.w	r3, r3, #1
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d120      	bne.n	8017b60 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8017b1e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b22:	005b      	lsls	r3, r3, #1
 8017b24:	3358      	adds	r3, #88	; 0x58
 8017b26:	443b      	add	r3, r7
 8017b28:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017b2c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b30:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8017b34:	b292      	uxth	r2, r2
 8017b36:	005b      	lsls	r3, r3, #1
 8017b38:	3358      	adds	r3, #88	; 0x58
 8017b3a:	443b      	add	r3, r7
 8017b3c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017b40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017b44:	b21a      	sxth	r2, r3
 8017b46:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017b4a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8017b52:	b21b      	sxth	r3, r3
 8017b54:	4313      	orrs	r3, r2
 8017b56:	b21b      	sxth	r3, r3
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017b5e:	e075      	b.n	8017c4c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8017b60:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b64:	005b      	lsls	r3, r3, #1
 8017b66:	3358      	adds	r3, #88	; 0x58
 8017b68:	443b      	add	r3, r7
 8017b6a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017b6e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017b72:	f062 02ff 	orn	r2, r2, #255	; 0xff
 8017b76:	b292      	uxth	r2, r2
 8017b78:	005b      	lsls	r3, r3, #1
 8017b7a:	3358      	adds	r3, #88	; 0x58
 8017b7c:	443b      	add	r3, r7
 8017b7e:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8017b82:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017b86:	b21a      	sxth	r2, r3
 8017b88:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017b8c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017b90:	fa01 f303 	lsl.w	r3, r1, r3
 8017b94:	b21b      	sxth	r3, r3
 8017b96:	4313      	orrs	r3, r2
 8017b98:	b21b      	sxth	r3, r3
 8017b9a:	b29b      	uxth	r3, r3
 8017b9c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017ba0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017ba4:	3301      	adds	r3, #1
 8017ba6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8017baa:	e04f      	b.n	8017c4c <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8017bac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017bb0:	f003 0301 	and.w	r3, r3, #1
 8017bb4:	b2db      	uxtb	r3, r3
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d122      	bne.n	8017c00 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8017bba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017bbe:	005b      	lsls	r3, r3, #1
 8017bc0:	3358      	adds	r3, #88	; 0x58
 8017bc2:	443b      	add	r3, r7
 8017bc4:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017bc8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017bcc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8017bd0:	b292      	uxth	r2, r2
 8017bd2:	005b      	lsls	r3, r3, #1
 8017bd4:	3358      	adds	r3, #88	; 0x58
 8017bd6:	443b      	add	r3, r7
 8017bd8:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017bdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017be0:	b21a      	sxth	r2, r3
 8017be2:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017be6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017bea:	fa01 f303 	lsl.w	r3, r1, r3
 8017bee:	b21b      	sxth	r3, r3
 8017bf0:	43db      	mvns	r3, r3
 8017bf2:	b21b      	sxth	r3, r3
 8017bf4:	4013      	ands	r3, r2
 8017bf6:	b21b      	sxth	r3, r3
 8017bf8:	b29b      	uxth	r3, r3
 8017bfa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8017bfe:	e025      	b.n	8017c4c <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8017c00:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c04:	005b      	lsls	r3, r3, #1
 8017c06:	3358      	adds	r3, #88	; 0x58
 8017c08:	443b      	add	r3, r7
 8017c0a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017c0e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c12:	b2d2      	uxtb	r2, r2
 8017c14:	b292      	uxth	r2, r2
 8017c16:	005b      	lsls	r3, r3, #1
 8017c18:	3358      	adds	r3, #88	; 0x58
 8017c1a:	443b      	add	r3, r7
 8017c1c:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8017c20:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8017c24:	b21a      	sxth	r2, r3
 8017c26:	f897 1052 	ldrb.w	r1, [r7, #82]	; 0x52
 8017c2a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8017c32:	b21b      	sxth	r3, r3
 8017c34:	43db      	mvns	r3, r3
 8017c36:	b21b      	sxth	r3, r3
 8017c38:	4013      	ands	r3, r2
 8017c3a:	b21b      	sxth	r3, r3
 8017c3c:	b29b      	uxth	r3, r3
 8017c3e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8017c42:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8017c46:	3301      	adds	r3, #1
 8017c48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8017c4c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017c50:	3301      	adds	r3, #1
 8017c52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8017c56:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017c5a:	2b07      	cmp	r3, #7
 8017c5c:	f67f af4c 	bls.w	8017af8 <RegionUS915LinkAdrReq+0x108>
 8017c60:	e008      	b.n	8017c74 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8017c62:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017c66:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8017c6a:	005b      	lsls	r3, r3, #1
 8017c6c:	3358      	adds	r3, #88	; 0x58
 8017c6e:	443b      	add	r3, r7
 8017c70:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	7a1b      	ldrb	r3, [r3, #8]
 8017c78:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017c7c:	429a      	cmp	r2, r3
 8017c7e:	f4ff aedd 	bcc.w	8017a3c <RegionUS915LinkAdrReq+0x4c>
 8017c82:	e002      	b.n	8017c8a <RegionUS915LinkAdrReq+0x29a>
 8017c84:	20001990 	.word	0x20001990
            break; // break loop, since no more request has been found
 8017c88:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8017c8a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8017c8e:	2b03      	cmp	r3, #3
 8017c90:	dc0f      	bgt.n	8017cb2 <RegionUS915LinkAdrReq+0x2c2>
 8017c92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017c96:	2204      	movs	r2, #4
 8017c98:	2100      	movs	r1, #0
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7fd f9aa 	bl	8014ff4 <RegionCommonCountChannels>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b01      	cmp	r3, #1
 8017ca4:	d805      	bhi.n	8017cb2 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8017ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017caa:	f023 0301 	bic.w	r3, r3, #1
 8017cae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017cb2:	2302      	movs	r3, #2
 8017cb4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	7a5b      	ldrb	r3, [r3, #9]
 8017cbc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8017cc0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7ff f90f 	bl	8016ee8 <RegionUS915GetPhyParam>
 8017cca:	4603      	mov	r3, r0
 8017ccc:	637b      	str	r3, [r7, #52]	; 0x34

    linkAdrVerifyParams.Status = status;
 8017cce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cd2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	7a9b      	ldrb	r3, [r3, #10]
 8017cd8:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017cda:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8017cde:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017ce0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8017ce4:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017ce6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8017cea:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017cf2:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017cfa:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	7b5b      	ldrb	r3, [r3, #13]
 8017d00:	b25b      	sxtb	r3, r3
 8017d02:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8017d04:	2348      	movs	r3, #72	; 0x48
 8017d06:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8017d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017d0e:	627b      	str	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d12:	b25b      	sxtb	r3, r3
 8017d14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8017d18:	2304      	movs	r3, #4
 8017d1a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017d1e:	4b3f      	ldr	r3, [pc, #252]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8017d24:	230e      	movs	r3, #14
 8017d26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017d36:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8017d3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d3e:	1c9a      	adds	r2, r3, #2
 8017d40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017d44:	1c59      	adds	r1, r3, #1
 8017d46:	f107 0014 	add.w	r0, r7, #20
 8017d4a:	4623      	mov	r3, r4
 8017d4c:	f7fd fb13 	bl	8015376 <RegionCommonLinkAdrReqVerifyParams>
 8017d50:	4603      	mov	r3, r0
 8017d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017d56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d5a:	2b07      	cmp	r3, #7
 8017d5c:	d147      	bne.n	8017dee <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8017d5e:	4b2f      	ldr	r3, [pc, #188]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017d66:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8017d6a:	2206      	movs	r2, #6
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f7fd f96d 	bl	801504c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8017d72:	4b2b      	ldr	r3, [pc, #172]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	8819      	ldrh	r1, [r3, #0]
 8017d78:	4b28      	ldr	r3, [pc, #160]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017d80:	4b27      	ldr	r3, [pc, #156]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017d82:	681b      	ldr	r3, [r3, #0]
 8017d84:	400a      	ands	r2, r1
 8017d86:	b292      	uxth	r2, r2
 8017d88:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8017d8a:	4b25      	ldr	r3, [pc, #148]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	8859      	ldrh	r1, [r3, #2]
 8017d90:	4b22      	ldr	r3, [pc, #136]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	f8b3 2362 	ldrh.w	r2, [r3, #866]	; 0x362
 8017d98:	4b21      	ldr	r3, [pc, #132]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	400a      	ands	r2, r1
 8017d9e:	b292      	uxth	r2, r2
 8017da0:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8017da2:	4b1f      	ldr	r3, [pc, #124]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	8899      	ldrh	r1, [r3, #4]
 8017da8:	4b1c      	ldr	r3, [pc, #112]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	f8b3 2364 	ldrh.w	r2, [r3, #868]	; 0x364
 8017db0:	4b1b      	ldr	r3, [pc, #108]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	400a      	ands	r2, r1
 8017db6:	b292      	uxth	r2, r2
 8017db8:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8017dba:	4b19      	ldr	r3, [pc, #100]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	88d9      	ldrh	r1, [r3, #6]
 8017dc0:	4b16      	ldr	r3, [pc, #88]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	f8b3 2366 	ldrh.w	r2, [r3, #870]	; 0x366
 8017dc8:	4b15      	ldr	r3, [pc, #84]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	400a      	ands	r2, r1
 8017dce:	b292      	uxth	r2, r2
 8017dd0:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017dd2:	4b12      	ldr	r3, [pc, #72]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017dd4:	681a      	ldr	r2, [r3, #0]
 8017dd6:	4b12      	ldr	r3, [pc, #72]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8017dde:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8017de0:	4b0e      	ldr	r3, [pc, #56]	; (8017e1c <RegionUS915LinkAdrReq+0x42c>)
 8017de2:	681a      	ldr	r2, [r3, #0]
 8017de4:	4b0e      	ldr	r3, [pc, #56]	; (8017e20 <RegionUS915LinkAdrReq+0x430>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 8017dec:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8017dee:	f997 204d 	ldrsb.w	r2, [r7, #77]	; 0x4d
 8017df2:	68bb      	ldr	r3, [r7, #8]
 8017df4:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017df6:	f997 204e 	ldrsb.w	r2, [r7, #78]	; 0x4e
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8017dfe:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017e08:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8017e0c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8017e0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8017e12:	4618      	mov	r0, r3
 8017e14:	375c      	adds	r7, #92	; 0x5c
 8017e16:	46bd      	mov	sp, r7
 8017e18:	bd90      	pop	{r4, r7, pc}
 8017e1a:	bf00      	nop
 8017e1c:	20001990 	.word	0x20001990
 8017e20:	2000198c 	.word	0x2000198c

08017e24 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b084      	sub	sp, #16
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017e2c:	2307      	movs	r3, #7
 8017e2e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	685b      	ldr	r3, [r3, #4]
 8017e34:	4618      	mov	r0, r3
 8017e36:	f7fe ffe3 	bl	8016e00 <VerifyRfFreq>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	f083 0301 	eor.w	r3, r3, #1
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d003      	beq.n	8017e4e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8017e46:	7bfb      	ldrb	r3, [r7, #15]
 8017e48:	f023 0301 	bic.w	r3, r3, #1
 8017e4c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f993 3000 	ldrsb.w	r3, [r3]
 8017e54:	220d      	movs	r2, #13
 8017e56:	2108      	movs	r1, #8
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7fd f87a 	bl	8014f52 <RegionCommonValueInRange>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d103      	bne.n	8017e6c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8017e64:	7bfb      	ldrb	r3, [r7, #15]
 8017e66:	f023 0302 	bic.w	r3, r3, #2
 8017e6a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f993 3000 	ldrsb.w	r3, [r3]
 8017e72:	2207      	movs	r2, #7
 8017e74:	2105      	movs	r1, #5
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7fd f86b 	bl	8014f52 <RegionCommonValueInRange>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	2b01      	cmp	r3, #1
 8017e80:	d004      	beq.n	8017e8c <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8017e88:	2b0d      	cmp	r3, #13
 8017e8a:	dd03      	ble.n	8017e94 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8017e8c:	7bfb      	ldrb	r3, [r7, #15]
 8017e8e:	f023 0302 	bic.w	r3, r3, #2
 8017e92:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017e9a:	2203      	movs	r2, #3
 8017e9c:	2100      	movs	r1, #0
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	f7fd f857 	bl	8014f52 <RegionCommonValueInRange>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	d103      	bne.n	8017eb2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017eaa:	7bfb      	ldrb	r3, [r7, #15]
 8017eac:	f023 0304 	bic.w	r3, r3, #4
 8017eb0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8017eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	3710      	adds	r7, #16
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b083      	sub	sp, #12
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	370c      	adds	r7, #12
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bc80      	pop	{r7}
 8017ed0:	4770      	bx	lr

08017ed2 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017ed2:	b480      	push	{r7}
 8017ed4:	b083      	sub	sp, #12
 8017ed6:	af00      	add	r7, sp, #0
 8017ed8:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ede:	4618      	mov	r0, r3
 8017ee0:	370c      	adds	r7, #12
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bc80      	pop	{r7}
 8017ee6:	4770      	bx	lr

08017ee8 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017ee8:	b480      	push	{r7}
 8017eea:	b083      	sub	sp, #12
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	370c      	adds	r7, #12
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bc80      	pop	{r7}
 8017efc:	4770      	bx	lr
	...

08017f00 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017f00:	b480      	push	{r7}
 8017f02:	b083      	sub	sp, #12
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	4603      	mov	r3, r0
 8017f08:	460a      	mov	r2, r1
 8017f0a:	71fb      	strb	r3, [r7, #7]
 8017f0c:	4613      	mov	r3, r2
 8017f0e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8017f10:	79bb      	ldrb	r3, [r7, #6]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d106      	bne.n	8017f24 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8017f16:	4b13      	ldr	r3, [pc, #76]	; (8017f64 <RegionUS915AlternateDr+0x64>)
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	7b5a      	ldrb	r2, [r3, #13]
 8017f1c:	3201      	adds	r2, #1
 8017f1e:	b2d2      	uxtb	r2, r2
 8017f20:	735a      	strb	r2, [r3, #13]
 8017f22:	e005      	b.n	8017f30 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8017f24:	4b0f      	ldr	r3, [pc, #60]	; (8017f64 <RegionUS915AlternateDr+0x64>)
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	7b5a      	ldrb	r2, [r3, #13]
 8017f2a:	3a01      	subs	r2, #1
 8017f2c:	b2d2      	uxtb	r2, r2
 8017f2e:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8017f30:	4b0c      	ldr	r3, [pc, #48]	; (8017f64 <RegionUS915AlternateDr+0x64>)
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	7b5a      	ldrb	r2, [r3, #13]
 8017f36:	4b0c      	ldr	r3, [pc, #48]	; (8017f68 <RegionUS915AlternateDr+0x68>)
 8017f38:	fba3 1302 	umull	r1, r3, r3, r2
 8017f3c:	0859      	lsrs	r1, r3, #1
 8017f3e:	460b      	mov	r3, r1
 8017f40:	00db      	lsls	r3, r3, #3
 8017f42:	440b      	add	r3, r1
 8017f44:	1ad3      	subs	r3, r2, r3
 8017f46:	b2db      	uxtb	r3, r3
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d102      	bne.n	8017f52 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8017f4c:	2304      	movs	r3, #4
 8017f4e:	71fb      	strb	r3, [r7, #7]
 8017f50:	e001      	b.n	8017f56 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8017f52:	2300      	movs	r3, #0
 8017f54:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8017f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	370c      	adds	r7, #12
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bc80      	pop	{r7}
 8017f62:	4770      	bx	lr
 8017f64:	2000198c 	.word	0x2000198c
 8017f68:	38e38e39 	.word	0x38e38e39

08017f6c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017f6c:	b580      	push	{r7, lr}
 8017f6e:	b0a8      	sub	sp, #160	; 0xa0
 8017f70:	af02      	add	r7, sp, #8
 8017f72:	60f8      	str	r0, [r7, #12]
 8017f74:	60b9      	str	r1, [r7, #8]
 8017f76:	607a      	str	r2, [r7, #4]
 8017f78:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
    uint8_t nbRestrictedChannels = 0;
 8017f80:	2300      	movs	r3, #0
 8017f82:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8017f86:	2300      	movs	r3, #0
 8017f88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017f8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017f8e:	2244      	movs	r2, #68	; 0x44
 8017f90:	2100      	movs	r1, #0
 8017f92:	4618      	mov	r0, r3
 8017f94:	f004 ff32 	bl	801cdfc <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8017f98:	230c      	movs	r3, #12
 8017f9a:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8017f9e:	4b67      	ldr	r3, [pc, #412]	; (801813c <RegionUS915NextChannel+0x1d0>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2204      	movs	r2, #4
 8017fa4:	2100      	movs	r1, #0
 8017fa6:	4618      	mov	r0, r3
 8017fa8:	f7fd f824 	bl	8014ff4 <RegionCommonCountChannels>
 8017fac:	4603      	mov	r3, r0
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d10e      	bne.n	8017fd0 <RegionUS915NextChannel+0x64>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8017fb2:	4b62      	ldr	r3, [pc, #392]	; (801813c <RegionUS915NextChannel+0x1d0>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	4b61      	ldr	r3, [pc, #388]	; (8018140 <RegionUS915NextChannel+0x1d4>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017fc0:	2204      	movs	r2, #4
 8017fc2:	4619      	mov	r1, r3
 8017fc4:	f7fd f842 	bl	801504c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017fc8:	4b5c      	ldr	r3, [pc, #368]	; (801813c <RegionUS915NextChannel+0x1d0>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017fd6:	2b03      	cmp	r3, #3
 8017fd8:	dd0c      	ble.n	8017ff4 <RegionUS915NextChannel+0x88>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8017fda:	4b58      	ldr	r3, [pc, #352]	; (801813c <RegionUS915NextChannel+0x1d0>)
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	891b      	ldrh	r3, [r3, #8]
 8017fe0:	b2db      	uxtb	r3, r3
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d106      	bne.n	8017ff4 <RegionUS915NextChannel+0x88>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017fe6:	4b56      	ldr	r3, [pc, #344]	; (8018140 <RegionUS915NextChannel+0x1d4>)
 8017fe8:	681a      	ldr	r2, [r3, #0]
 8017fea:	4b54      	ldr	r3, [pc, #336]	; (801813c <RegionUS915NextChannel+0x1d0>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8017ff2:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	7a5b      	ldrb	r3, [r3, #9]
 8017ff8:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8018000:	b2db      	uxtb	r3, r3
 8018002:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8018004:	4b4d      	ldr	r3, [pc, #308]	; (801813c <RegionUS915NextChannel+0x1d0>)
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801800a:	4b4d      	ldr	r3, [pc, #308]	; (8018140 <RegionUS915NextChannel+0x1d4>)
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8018010:	4b4c      	ldr	r3, [pc, #304]	; (8018144 <RegionUS915NextChannel+0x1d8>)
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8018016:	2348      	movs	r3, #72	; 0x48
 8018018:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = NULL;
 801801a:	2300      	movs	r3, #0
 801801c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	685b      	ldr	r3, [r3, #4]
 8018028:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	7a9b      	ldrb	r3, [r3, #10]
 801802e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8018032:	2301      	movs	r3, #1
 8018034:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8018038:	f107 0314 	add.w	r3, r7, #20
 801803c:	64bb      	str	r3, [r7, #72]	; 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801803e:	68fa      	ldr	r2, [r7, #12]
 8018040:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018044:	320c      	adds	r2, #12
 8018046:	e892 0003 	ldmia.w	r2, {r0, r1}
 801804a:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	7d1b      	ldrb	r3, [r3, #20]
 8018052:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	8adb      	ldrh	r3, [r3, #22]
 8018060:	4619      	mov	r1, r3
 8018062:	4610      	mov	r0, r2
 8018064:	f7fe ff10 	bl	8016e88 <GetTimeOnAir>
 8018068:	4603      	mov	r3, r0
 801806a:	647b      	str	r3, [r7, #68]	; 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 801806c:	f107 0195 	add.w	r1, r7, #149	; 0x95
 8018070:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018074:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	9301      	str	r3, [sp, #4]
 801807c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8018080:	9300      	str	r3, [sp, #0]
 8018082:	460b      	mov	r3, r1
 8018084:	6839      	ldr	r1, [r7, #0]
 8018086:	f7fd fbcc 	bl	8015822 <RegionCommonIdentifyChannels>
 801808a:	4603      	mov	r3, r0
 801808c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8018090:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8018094:	2b00      	cmp	r3, #0
 8018096:	d14a      	bne.n	801812e <RegionUS915NextChannel+0x1c2>
    {
        if( nextChanParams->Joined == true )
 8018098:	68fb      	ldr	r3, [r7, #12]
 801809a:	7a5b      	ldrb	r3, [r3, #9]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d00e      	beq.n	80180be <RegionUS915NextChannel+0x152>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80180a0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80180a4:	3b01      	subs	r3, #1
 80180a6:	4619      	mov	r1, r3
 80180a8:	2000      	movs	r0, #0
 80180aa:	f000 f89f 	bl	80181ec <randr>
 80180ae:	4603      	mov	r3, r0
 80180b0:	3398      	adds	r3, #152	; 0x98
 80180b2:	443b      	add	r3, r7
 80180b4:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	701a      	strb	r2, [r3, #0]
 80180bc:	e02e      	b.n	801811c <RegionUS915NextChannel+0x1b0>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d10e      	bne.n	80180e6 <RegionUS915NextChannel+0x17a>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80180c8:	4b1c      	ldr	r3, [pc, #112]	; (801813c <RegionUS915NextChannel+0x1d0>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 80180ce:	4b1b      	ldr	r3, [pc, #108]	; (801813c <RegionUS915NextChannel+0x1d0>)
 80180d0:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 80180d2:	330c      	adds	r3, #12
 80180d4:	68ba      	ldr	r2, [r7, #8]
 80180d6:	4619      	mov	r1, r3
 80180d8:	f7fc fcf6 	bl	8014ac8 <RegionBaseUSComputeNext125kHzJoinChannel>
 80180dc:	4603      	mov	r3, r0
 80180de:	2b03      	cmp	r3, #3
 80180e0:	d11c      	bne.n	801811c <RegionUS915NextChannel+0x1b0>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 80180e2:	2303      	movs	r3, #3
 80180e4:	e025      	b.n	8018132 <RegionUS915NextChannel+0x1c6>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80180e6:	2300      	movs	r3, #0
 80180e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80180ec:	e004      	b.n	80180f8 <RegionUS915NextChannel+0x18c>
                {
                    i++;
 80180ee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80180f2:	3301      	adds	r3, #1
 80180f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 80180f8:	4b10      	ldr	r3, [pc, #64]	; (801813c <RegionUS915NextChannel+0x1d0>)
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	891b      	ldrh	r3, [r3, #8]
 80180fe:	b2da      	uxtb	r2, r3
 8018100:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018104:	fa42 f303 	asr.w	r3, r2, r3
 8018108:	f003 0301 	and.w	r3, r3, #1
 801810c:	2b00      	cmp	r3, #0
 801810e:	d0ee      	beq.n	80180ee <RegionUS915NextChannel+0x182>
                }
                *channel = 64 + i;
 8018110:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8018114:	3340      	adds	r3, #64	; 0x40
 8018116:	b2da      	uxtb	r2, r3
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801811c:	4b07      	ldr	r3, [pc, #28]	; (801813c <RegionUS915NextChannel+0x1d0>)
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4618      	mov	r0, r3
 8018122:	68bb      	ldr	r3, [r7, #8]
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	2248      	movs	r2, #72	; 0x48
 8018128:	4619      	mov	r1, r3
 801812a:	f7fc ff2f 	bl	8014f8c <RegionCommonChanDisable>
    }
    return status;
 801812e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8018132:	4618      	mov	r0, r3
 8018134:	3798      	adds	r7, #152	; 0x98
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	2000198c 	.word	0x2000198c
 8018140:	20001990 	.word	0x20001990
 8018144:	20001994 	.word	0x20001994

08018148 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8018148:	b480      	push	{r7}
 801814a:	b085      	sub	sp, #20
 801814c:	af00      	add	r7, sp, #0
 801814e:	4603      	mov	r3, r0
 8018150:	71fb      	strb	r3, [r7, #7]
 8018152:	460b      	mov	r3, r1
 8018154:	71bb      	strb	r3, [r7, #6]
 8018156:	4613      	mov	r3, r2
 8018158:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801815a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801815e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8018162:	4909      	ldr	r1, [pc, #36]	; (8018188 <RegionUS915ApplyDrOffset+0x40>)
 8018164:	0092      	lsls	r2, r2, #2
 8018166:	440a      	add	r2, r1
 8018168:	4413      	add	r3, r2
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018172:	2b00      	cmp	r3, #0
 8018174:	da01      	bge.n	801817a <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8018176:	2300      	movs	r3, #0
 8018178:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801817a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801817c:	4618      	mov	r0, r3
 801817e:	3714      	adds	r7, #20
 8018180:	46bd      	mov	sp, r7
 8018182:	bc80      	pop	{r7}
 8018184:	4770      	bx	lr
 8018186:	bf00      	nop
 8018188:	0801dd18 	.word	0x0801dd18

0801818c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801818c:	b480      	push	{r7}
 801818e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8018190:	4b0d      	ldr	r3, [pc, #52]	; (80181c8 <rand1+0x3c>)
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	4a0d      	ldr	r2, [pc, #52]	; (80181cc <rand1+0x40>)
 8018196:	fb02 f303 	mul.w	r3, r2, r3
 801819a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801819e:	3339      	adds	r3, #57	; 0x39
 80181a0:	4a09      	ldr	r2, [pc, #36]	; (80181c8 <rand1+0x3c>)
 80181a2:	6013      	str	r3, [r2, #0]
 80181a4:	4b08      	ldr	r3, [pc, #32]	; (80181c8 <rand1+0x3c>)
 80181a6:	681a      	ldr	r2, [r3, #0]
 80181a8:	2303      	movs	r3, #3
 80181aa:	fba3 1302 	umull	r1, r3, r3, r2
 80181ae:	1ad1      	subs	r1, r2, r3
 80181b0:	0849      	lsrs	r1, r1, #1
 80181b2:	440b      	add	r3, r1
 80181b4:	0f99      	lsrs	r1, r3, #30
 80181b6:	460b      	mov	r3, r1
 80181b8:	07db      	lsls	r3, r3, #31
 80181ba:	1a5b      	subs	r3, r3, r1
 80181bc:	1ad1      	subs	r1, r2, r3
 80181be:	460b      	mov	r3, r1
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	46bd      	mov	sp, r7
 80181c4:	bc80      	pop	{r7}
 80181c6:	4770      	bx	lr
 80181c8:	20000140 	.word	0x20000140
 80181cc:	41c64e6d 	.word	0x41c64e6d

080181d0 <srand1>:

void srand1( uint32_t seed )
{
 80181d0:	b480      	push	{r7}
 80181d2:	b083      	sub	sp, #12
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
    next = seed;
 80181d8:	4a03      	ldr	r2, [pc, #12]	; (80181e8 <srand1+0x18>)
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	6013      	str	r3, [r2, #0]
}
 80181de:	bf00      	nop
 80181e0:	370c      	adds	r7, #12
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bc80      	pop	{r7}
 80181e6:	4770      	bx	lr
 80181e8:	20000140 	.word	0x20000140

080181ec <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80181ec:	b580      	push	{r7, lr}
 80181ee:	b082      	sub	sp, #8
 80181f0:	af00      	add	r7, sp, #0
 80181f2:	6078      	str	r0, [r7, #4]
 80181f4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80181f6:	f7ff ffc9 	bl	801818c <rand1>
 80181fa:	4602      	mov	r2, r0
 80181fc:	6839      	ldr	r1, [r7, #0]
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	1acb      	subs	r3, r1, r3
 8018202:	3301      	adds	r3, #1
 8018204:	fb92 f1f3 	sdiv	r1, r2, r3
 8018208:	fb01 f303 	mul.w	r3, r1, r3
 801820c:	1ad2      	subs	r2, r2, r3
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	4413      	add	r3, r2
}
 8018212:	4618      	mov	r0, r3
 8018214:	3708      	adds	r7, #8
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}

0801821a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801821a:	b480      	push	{r7}
 801821c:	b085      	sub	sp, #20
 801821e:	af00      	add	r7, sp, #0
 8018220:	60f8      	str	r0, [r7, #12]
 8018222:	60b9      	str	r1, [r7, #8]
 8018224:	4613      	mov	r3, r2
 8018226:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8018228:	e007      	b.n	801823a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801822a:	68ba      	ldr	r2, [r7, #8]
 801822c:	1c53      	adds	r3, r2, #1
 801822e:	60bb      	str	r3, [r7, #8]
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	1c59      	adds	r1, r3, #1
 8018234:	60f9      	str	r1, [r7, #12]
 8018236:	7812      	ldrb	r2, [r2, #0]
 8018238:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801823a:	88fb      	ldrh	r3, [r7, #6]
 801823c:	1e5a      	subs	r2, r3, #1
 801823e:	80fa      	strh	r2, [r7, #6]
 8018240:	2b00      	cmp	r3, #0
 8018242:	d1f2      	bne.n	801822a <memcpy1+0x10>
    }
}
 8018244:	bf00      	nop
 8018246:	bf00      	nop
 8018248:	3714      	adds	r7, #20
 801824a:	46bd      	mov	sp, r7
 801824c:	bc80      	pop	{r7}
 801824e:	4770      	bx	lr

08018250 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8018250:	b480      	push	{r7}
 8018252:	b085      	sub	sp, #20
 8018254:	af00      	add	r7, sp, #0
 8018256:	60f8      	str	r0, [r7, #12]
 8018258:	60b9      	str	r1, [r7, #8]
 801825a:	4613      	mov	r3, r2
 801825c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801825e:	88fb      	ldrh	r3, [r7, #6]
 8018260:	3b01      	subs	r3, #1
 8018262:	68fa      	ldr	r2, [r7, #12]
 8018264:	4413      	add	r3, r2
 8018266:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8018268:	e007      	b.n	801827a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801826a:	68ba      	ldr	r2, [r7, #8]
 801826c:	1c53      	adds	r3, r2, #1
 801826e:	60bb      	str	r3, [r7, #8]
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	1e59      	subs	r1, r3, #1
 8018274:	60f9      	str	r1, [r7, #12]
 8018276:	7812      	ldrb	r2, [r2, #0]
 8018278:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801827a:	88fb      	ldrh	r3, [r7, #6]
 801827c:	1e5a      	subs	r2, r3, #1
 801827e:	80fa      	strh	r2, [r7, #6]
 8018280:	2b00      	cmp	r3, #0
 8018282:	d1f2      	bne.n	801826a <memcpyr+0x1a>
    }
}
 8018284:	bf00      	nop
 8018286:	bf00      	nop
 8018288:	3714      	adds	r7, #20
 801828a:	46bd      	mov	sp, r7
 801828c:	bc80      	pop	{r7}
 801828e:	4770      	bx	lr

08018290 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8018290:	b480      	push	{r7}
 8018292:	b083      	sub	sp, #12
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
 8018298:	460b      	mov	r3, r1
 801829a:	70fb      	strb	r3, [r7, #3]
 801829c:	4613      	mov	r3, r2
 801829e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 80182a0:	e004      	b.n	80182ac <memset1+0x1c>
    {
        *dst++ = value;
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	1c5a      	adds	r2, r3, #1
 80182a6:	607a      	str	r2, [r7, #4]
 80182a8:	78fa      	ldrb	r2, [r7, #3]
 80182aa:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80182ac:	883b      	ldrh	r3, [r7, #0]
 80182ae:	1e5a      	subs	r2, r3, #1
 80182b0:	803a      	strh	r2, [r7, #0]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d1f5      	bne.n	80182a2 <memset1+0x12>
    }
}
 80182b6:	bf00      	nop
 80182b8:	bf00      	nop
 80182ba:	370c      	adds	r7, #12
 80182bc:	46bd      	mov	sp, r7
 80182be:	bc80      	pop	{r7}
 80182c0:	4770      	bx	lr
	...

080182c4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80182c4:	b480      	push	{r7}
 80182c6:	b085      	sub	sp, #20
 80182c8:	af00      	add	r7, sp, #0
 80182ca:	6078      	str	r0, [r7, #4]
 80182cc:	460b      	mov	r3, r1
 80182ce:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80182d0:	f04f 33ff 	mov.w	r3, #4294967295
 80182d4:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d101      	bne.n	80182e0 <Crc32+0x1c>
    {
        return 0;
 80182dc:	2300      	movs	r3, #0
 80182de:	e026      	b.n	801832e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80182e0:	2300      	movs	r3, #0
 80182e2:	817b      	strh	r3, [r7, #10]
 80182e4:	e01d      	b.n	8018322 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80182e6:	897b      	ldrh	r3, [r7, #10]
 80182e8:	687a      	ldr	r2, [r7, #4]
 80182ea:	4413      	add	r3, r2
 80182ec:	781b      	ldrb	r3, [r3, #0]
 80182ee:	461a      	mov	r2, r3
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	4053      	eors	r3, r2
 80182f4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80182f6:	2300      	movs	r3, #0
 80182f8:	813b      	strh	r3, [r7, #8]
 80182fa:	e00c      	b.n	8018316 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	085a      	lsrs	r2, r3, #1
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	f003 0301 	and.w	r3, r3, #1
 8018306:	425b      	negs	r3, r3
 8018308:	490b      	ldr	r1, [pc, #44]	; (8018338 <Crc32+0x74>)
 801830a:	400b      	ands	r3, r1
 801830c:	4053      	eors	r3, r2
 801830e:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8018310:	893b      	ldrh	r3, [r7, #8]
 8018312:	3301      	adds	r3, #1
 8018314:	813b      	strh	r3, [r7, #8]
 8018316:	893b      	ldrh	r3, [r7, #8]
 8018318:	2b07      	cmp	r3, #7
 801831a:	d9ef      	bls.n	80182fc <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801831c:	897b      	ldrh	r3, [r7, #10]
 801831e:	3301      	adds	r3, #1
 8018320:	817b      	strh	r3, [r7, #10]
 8018322:	897a      	ldrh	r2, [r7, #10]
 8018324:	887b      	ldrh	r3, [r7, #2]
 8018326:	429a      	cmp	r2, r3
 8018328:	d3dd      	bcc.n	80182e6 <Crc32+0x22>
        }
    }

    return ~crc;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	43db      	mvns	r3, r3
}
 801832e:	4618      	mov	r0, r3
 8018330:	3714      	adds	r7, #20
 8018332:	46bd      	mov	sp, r7
 8018334:	bc80      	pop	{r7}
 8018336:	4770      	bx	lr
 8018338:	edb88320 	.word	0xedb88320

0801833c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af02      	add	r7, sp, #8
 8018342:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8018344:	4a24      	ldr	r2, [pc, #144]	; (80183d8 <RadioInit+0x9c>)
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801834a:	4b24      	ldr	r3, [pc, #144]	; (80183dc <RadioInit+0xa0>)
 801834c:	2200      	movs	r2, #0
 801834e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8018350:	4b22      	ldr	r3, [pc, #136]	; (80183dc <RadioInit+0xa0>)
 8018352:	2200      	movs	r2, #0
 8018354:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8018356:	4b21      	ldr	r3, [pc, #132]	; (80183dc <RadioInit+0xa0>)
 8018358:	2200      	movs	r2, #0
 801835a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801835c:	4b1f      	ldr	r3, [pc, #124]	; (80183dc <RadioInit+0xa0>)
 801835e:	2200      	movs	r2, #0
 8018360:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8018362:	481f      	ldr	r0, [pc, #124]	; (80183e0 <RadioInit+0xa4>)
 8018364:	f001 ff88 	bl	801a278 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8018368:	4b1c      	ldr	r3, [pc, #112]	; (80183dc <RadioInit+0xa0>)
 801836a:	2200      	movs	r2, #0
 801836c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801836e:	4b1b      	ldr	r3, [pc, #108]	; (80183dc <RadioInit+0xa0>)
 8018370:	2200      	movs	r2, #0
 8018372:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8018374:	f002 fa16 	bl	801a7a4 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8018378:	2100      	movs	r1, #0
 801837a:	2000      	movs	r0, #0
 801837c:	f002 fdde 	bl	801af3c <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8018380:	2204      	movs	r2, #4
 8018382:	2100      	movs	r1, #0
 8018384:	2001      	movs	r0, #1
 8018386:	f002 fb9b 	bl	801aac0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801838a:	2300      	movs	r3, #0
 801838c:	2200      	movs	r2, #0
 801838e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018392:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018396:	f002 facb 	bl	801a930 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 801839a:	f000 fe83 	bl	80190a4 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801839e:	2300      	movs	r3, #0
 80183a0:	9300      	str	r3, [sp, #0]
 80183a2:	4b10      	ldr	r3, [pc, #64]	; (80183e4 <RadioInit+0xa8>)
 80183a4:	2200      	movs	r2, #0
 80183a6:	f04f 31ff 	mov.w	r1, #4294967295
 80183aa:	480f      	ldr	r0, [pc, #60]	; (80183e8 <RadioInit+0xac>)
 80183ac:	f003 ffdc 	bl	801c368 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80183b0:	2300      	movs	r3, #0
 80183b2:	9300      	str	r3, [sp, #0]
 80183b4:	4b0d      	ldr	r3, [pc, #52]	; (80183ec <RadioInit+0xb0>)
 80183b6:	2200      	movs	r2, #0
 80183b8:	f04f 31ff 	mov.w	r1, #4294967295
 80183bc:	480c      	ldr	r0, [pc, #48]	; (80183f0 <RadioInit+0xb4>)
 80183be:	f003 ffd3 	bl	801c368 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80183c2:	4809      	ldr	r0, [pc, #36]	; (80183e8 <RadioInit+0xac>)
 80183c4:	f004 f874 	bl	801c4b0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80183c8:	4809      	ldr	r0, [pc, #36]	; (80183f0 <RadioInit+0xb4>)
 80183ca:	f004 f871 	bl	801c4b0 <UTIL_TIMER_Stop>
}
 80183ce:	bf00      	nop
 80183d0:	3708      	adds	r7, #8
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}
 80183d6:	bf00      	nop
 80183d8:	20001a98 	.word	0x20001a98
 80183dc:	20001a9c 	.word	0x20001a9c
 80183e0:	08019491 	.word	0x08019491
 80183e4:	08019419 	.word	0x08019419
 80183e8:	20001af8 	.word	0x20001af8
 80183ec:	0801942d 	.word	0x0801942d
 80183f0:	20001b10 	.word	0x20001b10

080183f4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80183f8:	f001 ff80 	bl	801a2fc <SUBGRF_GetOperatingMode>
 80183fc:	4603      	mov	r3, r0
 80183fe:	2b07      	cmp	r3, #7
 8018400:	d00a      	beq.n	8018418 <RadioGetStatus+0x24>
 8018402:	2b07      	cmp	r3, #7
 8018404:	dc0a      	bgt.n	801841c <RadioGetStatus+0x28>
 8018406:	2b04      	cmp	r3, #4
 8018408:	d002      	beq.n	8018410 <RadioGetStatus+0x1c>
 801840a:	2b05      	cmp	r3, #5
 801840c:	d002      	beq.n	8018414 <RadioGetStatus+0x20>
 801840e:	e005      	b.n	801841c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8018410:	2302      	movs	r3, #2
 8018412:	e004      	b.n	801841e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8018414:	2301      	movs	r3, #1
 8018416:	e002      	b.n	801841e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8018418:	2303      	movs	r3, #3
 801841a:	e000      	b.n	801841e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801841c:	2300      	movs	r3, #0
    }
}
 801841e:	4618      	mov	r0, r3
 8018420:	bd80      	pop	{r7, pc}
	...

08018424 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b082      	sub	sp, #8
 8018428:	af00      	add	r7, sp, #0
 801842a:	4603      	mov	r3, r0
 801842c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801842e:	4a2a      	ldr	r2, [pc, #168]	; (80184d8 <RadioSetModem+0xb4>)
 8018430:	79fb      	ldrb	r3, [r7, #7]
 8018432:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8018434:	79fb      	ldrb	r3, [r7, #7]
 8018436:	4618      	mov	r0, r3
 8018438:	f003 f943 	bl	801b6c2 <RFW_SetRadioModem>
    switch( modem )
 801843c:	79fb      	ldrb	r3, [r7, #7]
 801843e:	2b05      	cmp	r3, #5
 8018440:	d80e      	bhi.n	8018460 <RadioSetModem+0x3c>
 8018442:	a201      	add	r2, pc, #4	; (adr r2, 8018448 <RadioSetModem+0x24>)
 8018444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018448:	0801846f 	.word	0x0801846f
 801844c:	0801847d 	.word	0x0801847d
 8018450:	08018461 	.word	0x08018461
 8018454:	080184a3 	.word	0x080184a3
 8018458:	080184b1 	.word	0x080184b1
 801845c:	080184bf 	.word	0x080184bf
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8018460:	2003      	movs	r0, #3
 8018462:	f002 fb07 	bl	801aa74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018466:	4b1c      	ldr	r3, [pc, #112]	; (80184d8 <RadioSetModem+0xb4>)
 8018468:	2200      	movs	r2, #0
 801846a:	735a      	strb	r2, [r3, #13]
        break;
 801846c:	e02f      	b.n	80184ce <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801846e:	2000      	movs	r0, #0
 8018470:	f002 fb00 	bl	801aa74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8018474:	4b18      	ldr	r3, [pc, #96]	; (80184d8 <RadioSetModem+0xb4>)
 8018476:	2200      	movs	r2, #0
 8018478:	735a      	strb	r2, [r3, #13]
        break;
 801847a:	e028      	b.n	80184ce <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801847c:	2001      	movs	r0, #1
 801847e:	f002 faf9 	bl	801aa74 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8018482:	4b15      	ldr	r3, [pc, #84]	; (80184d8 <RadioSetModem+0xb4>)
 8018484:	7b5a      	ldrb	r2, [r3, #13]
 8018486:	4b14      	ldr	r3, [pc, #80]	; (80184d8 <RadioSetModem+0xb4>)
 8018488:	7b1b      	ldrb	r3, [r3, #12]
 801848a:	429a      	cmp	r2, r3
 801848c:	d01e      	beq.n	80184cc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801848e:	4b12      	ldr	r3, [pc, #72]	; (80184d8 <RadioSetModem+0xb4>)
 8018490:	7b1a      	ldrb	r2, [r3, #12]
 8018492:	4b11      	ldr	r3, [pc, #68]	; (80184d8 <RadioSetModem+0xb4>)
 8018494:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8018496:	4b10      	ldr	r3, [pc, #64]	; (80184d8 <RadioSetModem+0xb4>)
 8018498:	7b5b      	ldrb	r3, [r3, #13]
 801849a:	4618      	mov	r0, r3
 801849c:	f000 ff86 	bl	80193ac <RadioSetPublicNetwork>
        }
        break;
 80184a0:	e014      	b.n	80184cc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80184a2:	2002      	movs	r0, #2
 80184a4:	f002 fae6 	bl	801aa74 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80184a8:	4b0b      	ldr	r3, [pc, #44]	; (80184d8 <RadioSetModem+0xb4>)
 80184aa:	2200      	movs	r2, #0
 80184ac:	735a      	strb	r2, [r3, #13]
        break;
 80184ae:	e00e      	b.n	80184ce <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80184b0:	2002      	movs	r0, #2
 80184b2:	f002 fadf 	bl	801aa74 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80184b6:	4b08      	ldr	r3, [pc, #32]	; (80184d8 <RadioSetModem+0xb4>)
 80184b8:	2200      	movs	r2, #0
 80184ba:	735a      	strb	r2, [r3, #13]
        break;
 80184bc:	e007      	b.n	80184ce <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80184be:	2000      	movs	r0, #0
 80184c0:	f002 fad8 	bl	801aa74 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80184c4:	4b04      	ldr	r3, [pc, #16]	; (80184d8 <RadioSetModem+0xb4>)
 80184c6:	2200      	movs	r2, #0
 80184c8:	735a      	strb	r2, [r3, #13]
        break;
 80184ca:	e000      	b.n	80184ce <RadioSetModem+0xaa>
        break;
 80184cc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80184ce:	bf00      	nop
 80184d0:	3708      	adds	r7, #8
 80184d2:	46bd      	mov	sp, r7
 80184d4:	bd80      	pop	{r7, pc}
 80184d6:	bf00      	nop
 80184d8:	20001a9c 	.word	0x20001a9c

080184dc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b082      	sub	sp, #8
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80184e4:	6878      	ldr	r0, [r7, #4]
 80184e6:	f002 fa7f 	bl	801a9e8 <SUBGRF_SetRfFrequency>
}
 80184ea:	bf00      	nop
 80184ec:	3708      	adds	r7, #8
 80184ee:	46bd      	mov	sp, r7
 80184f0:	bd80      	pop	{r7, pc}

080184f2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80184f2:	b580      	push	{r7, lr}
 80184f4:	b090      	sub	sp, #64	; 0x40
 80184f6:	af0a      	add	r7, sp, #40	; 0x28
 80184f8:	60f8      	str	r0, [r7, #12]
 80184fa:	60b9      	str	r1, [r7, #8]
 80184fc:	603b      	str	r3, [r7, #0]
 80184fe:	4613      	mov	r3, r2
 8018500:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8018502:	2301      	movs	r3, #1
 8018504:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8018506:	2300      	movs	r3, #0
 8018508:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801850a:	2300      	movs	r3, #0
 801850c:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 801850e:	f000 fddc 	bl	80190ca <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8018512:	2000      	movs	r0, #0
 8018514:	f7ff ff86 	bl	8018424 <RadioSetModem>

    RadioSetChannel( freq );
 8018518:	68f8      	ldr	r0, [r7, #12]
 801851a:	f7ff ffdf 	bl	80184dc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801851e:	2301      	movs	r3, #1
 8018520:	9309      	str	r3, [sp, #36]	; 0x24
 8018522:	2300      	movs	r3, #0
 8018524:	9308      	str	r3, [sp, #32]
 8018526:	2300      	movs	r3, #0
 8018528:	9307      	str	r3, [sp, #28]
 801852a:	2300      	movs	r3, #0
 801852c:	9306      	str	r3, [sp, #24]
 801852e:	2300      	movs	r3, #0
 8018530:	9305      	str	r3, [sp, #20]
 8018532:	2300      	movs	r3, #0
 8018534:	9304      	str	r3, [sp, #16]
 8018536:	2300      	movs	r3, #0
 8018538:	9303      	str	r3, [sp, #12]
 801853a:	2300      	movs	r3, #0
 801853c:	9302      	str	r3, [sp, #8]
 801853e:	2303      	movs	r3, #3
 8018540:	9301      	str	r3, [sp, #4]
 8018542:	68bb      	ldr	r3, [r7, #8]
 8018544:	9300      	str	r3, [sp, #0]
 8018546:	2300      	movs	r3, #0
 8018548:	f44f 7216 	mov.w	r2, #600	; 0x258
 801854c:	68b9      	ldr	r1, [r7, #8]
 801854e:	2000      	movs	r0, #0
 8018550:	f000 f83c 	bl	80185cc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8018554:	2000      	movs	r0, #0
 8018556:	f000 fdbf 	bl	80190d8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801855a:	f000 ff55 	bl	8019408 <RadioGetWakeupTime>
 801855e:	4603      	mov	r3, r0
 8018560:	4618      	mov	r0, r3
 8018562:	f7e9 fbd5 	bl	8001d10 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8018566:	f004 f8bd 	bl	801c6e4 <UTIL_TIMER_GetCurrentTime>
 801856a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801856c:	e00d      	b.n	801858a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801856e:	2000      	movs	r0, #0
 8018570:	f000 fe9a 	bl	80192a8 <RadioRssi>
 8018574:	4603      	mov	r3, r0
 8018576:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8018578:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801857c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018580:	429a      	cmp	r2, r3
 8018582:	dd02      	ble.n	801858a <RadioIsChannelFree+0x98>
        {
            status = false;
 8018584:	2300      	movs	r3, #0
 8018586:	75fb      	strb	r3, [r7, #23]
            break;
 8018588:	e006      	b.n	8018598 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801858a:	6938      	ldr	r0, [r7, #16]
 801858c:	f004 f8bc 	bl	801c708 <UTIL_TIMER_GetElapsedTime>
 8018590:	4602      	mov	r2, r0
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	4293      	cmp	r3, r2
 8018596:	d8ea      	bhi.n	801856e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8018598:	f000 fd97 	bl	80190ca <RadioStandby>

    return status;
 801859c:	7dfb      	ldrb	r3, [r7, #23]
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3718      	adds	r7, #24
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}

080185a6 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80185a6:	b580      	push	{r7, lr}
 80185a8:	b082      	sub	sp, #8
 80185aa:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80185ac:	2300      	movs	r3, #0
 80185ae:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80185b0:	2300      	movs	r3, #0
 80185b2:	2200      	movs	r2, #0
 80185b4:	2100      	movs	r1, #0
 80185b6:	2000      	movs	r0, #0
 80185b8:	f002 f9ba 	bl	801a930 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80185bc:	f001 ff6f 	bl	801a49e <SUBGRF_GetRandom>
 80185c0:	6078      	str	r0, [r7, #4]

    return rnd;
 80185c2:	687b      	ldr	r3, [r7, #4]
}
 80185c4:	4618      	mov	r0, r3
 80185c6:	3708      	adds	r7, #8
 80185c8:	46bd      	mov	sp, r7
 80185ca:	bd80      	pop	{r7, pc}

080185cc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b08a      	sub	sp, #40	; 0x28
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	60b9      	str	r1, [r7, #8]
 80185d4:	607a      	str	r2, [r7, #4]
 80185d6:	461a      	mov	r2, r3
 80185d8:	4603      	mov	r3, r0
 80185da:	73fb      	strb	r3, [r7, #15]
 80185dc:	4613      	mov	r3, r2
 80185de:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80185e0:	4ab9      	ldr	r2, [pc, #740]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80185e2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80185e6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80185e8:	f003 f829 	bl	801b63e <RFW_DeInit>
    if( rxContinuous == true )
 80185ec:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d001      	beq.n	80185f8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 80185f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80185fc:	2b00      	cmp	r3, #0
 80185fe:	d004      	beq.n	801860a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8018600:	4ab2      	ldr	r2, [pc, #712]	; (80188cc <RadioSetRxConfig+0x300>)
 8018602:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8018606:	7013      	strb	r3, [r2, #0]
 8018608:	e002      	b.n	8018610 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801860a:	4bb0      	ldr	r3, [pc, #704]	; (80188cc <RadioSetRxConfig+0x300>)
 801860c:	22ff      	movs	r2, #255	; 0xff
 801860e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8018610:	7bfb      	ldrb	r3, [r7, #15]
 8018612:	2b05      	cmp	r3, #5
 8018614:	d009      	beq.n	801862a <RadioSetRxConfig+0x5e>
 8018616:	2b05      	cmp	r3, #5
 8018618:	f300 81ca 	bgt.w	80189b0 <RadioSetRxConfig+0x3e4>
 801861c:	2b00      	cmp	r3, #0
 801861e:	f000 80bf 	beq.w	80187a0 <RadioSetRxConfig+0x1d4>
 8018622:	2b01      	cmp	r3, #1
 8018624:	f000 8124 	beq.w	8018870 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8018628:	e1c2      	b.n	80189b0 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801862a:	2001      	movs	r0, #1
 801862c:	f002 f87c 	bl	801a728 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018630:	4ba5      	ldr	r3, [pc, #660]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018632:	2200      	movs	r2, #0
 8018634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018638:	4aa3      	ldr	r2, [pc, #652]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801863e:	4ba2      	ldr	r3, [pc, #648]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018640:	2209      	movs	r2, #9
 8018642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8018646:	4ba0      	ldr	r3, [pc, #640]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018648:	f44f 7248 	mov.w	r2, #800	; 0x320
 801864c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801864e:	68b8      	ldr	r0, [r7, #8]
 8018650:	f002 ff28 	bl	801b4a4 <SUBGRF_GetFskBandwidthRegValue>
 8018654:	4603      	mov	r3, r0
 8018656:	461a      	mov	r2, r3
 8018658:	4b9b      	ldr	r3, [pc, #620]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801865a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801865e:	4b9a      	ldr	r3, [pc, #616]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018660:	2200      	movs	r2, #0
 8018662:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018664:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018666:	00db      	lsls	r3, r3, #3
 8018668:	b29a      	uxth	r2, r3
 801866a:	4b97      	ldr	r3, [pc, #604]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801866c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801866e:	4b96      	ldr	r3, [pc, #600]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018670:	2200      	movs	r2, #0
 8018672:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018674:	4b94      	ldr	r3, [pc, #592]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018676:	2210      	movs	r2, #16
 8018678:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801867a:	4b93      	ldr	r3, [pc, #588]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801867c:	2200      	movs	r2, #0
 801867e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018680:	4b91      	ldr	r3, [pc, #580]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018682:	2200      	movs	r2, #0
 8018684:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018686:	4b91      	ldr	r3, [pc, #580]	; (80188cc <RadioSetRxConfig+0x300>)
 8018688:	781a      	ldrb	r2, [r3, #0]
 801868a:	4b8f      	ldr	r3, [pc, #572]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801868c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801868e:	4b8e      	ldr	r3, [pc, #568]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018690:	2201      	movs	r2, #1
 8018692:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018694:	4b8c      	ldr	r3, [pc, #560]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018696:	2200      	movs	r2, #0
 8018698:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801869a:	2005      	movs	r0, #5
 801869c:	f7ff fec2 	bl	8018424 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80186a0:	488b      	ldr	r0, [pc, #556]	; (80188d0 <RadioSetRxConfig+0x304>)
 80186a2:	f002 fadb 	bl	801ac5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80186a6:	488b      	ldr	r0, [pc, #556]	; (80188d4 <RadioSetRxConfig+0x308>)
 80186a8:	f002 fbaa 	bl	801ae00 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80186ac:	4a8a      	ldr	r2, [pc, #552]	; (80188d8 <RadioSetRxConfig+0x30c>)
 80186ae:	f107 031c 	add.w	r3, r7, #28
 80186b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80186b6:	e883 0003 	stmia.w	r3, {r0, r1}
 80186ba:	f107 031c 	add.w	r3, r7, #28
 80186be:	4618      	mov	r0, r3
 80186c0:	f001 fe6b 	bl	801a39a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80186c4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80186c8:	f001 feb6 	bl	801a438 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 80186cc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80186d0:	f000 fe09 	bl	80192e6 <RadioRead>
 80186d4:	4603      	mov	r3, r0
 80186d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 80186da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186de:	f023 0310 	bic.w	r3, r3, #16
 80186e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 80186e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186ea:	4619      	mov	r1, r3
 80186ec:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80186f0:	f000 fde7 	bl	80192c2 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80186f4:	2104      	movs	r1, #4
 80186f6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80186fa:	f000 fde2 	bl	80192c2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80186fe:	f640 009b 	movw	r0, #2203	; 0x89b
 8018702:	f000 fdf0 	bl	80192e6 <RadioRead>
 8018706:	4603      	mov	r3, r0
 8018708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801870c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018710:	f023 031c 	bic.w	r3, r3, #28
 8018714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8018718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801871c:	f043 0308 	orr.w	r3, r3, #8
 8018720:	b2db      	uxtb	r3, r3
 8018722:	4619      	mov	r1, r3
 8018724:	f640 009b 	movw	r0, #2203	; 0x89b
 8018728:	f000 fdcb 	bl	80192c2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801872c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018730:	f000 fdd9 	bl	80192e6 <RadioRead>
 8018734:	4603      	mov	r3, r0
 8018736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801873a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801873e:	f023 0318 	bic.w	r3, r3, #24
 8018742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8018746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801874a:	f043 0318 	orr.w	r3, r3, #24
 801874e:	b2db      	uxtb	r3, r3
 8018750:	4619      	mov	r1, r3
 8018752:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018756:	f000 fdb4 	bl	80192c2 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801875a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801875e:	f000 fdc2 	bl	80192e6 <RadioRead>
 8018762:	4603      	mov	r3, r0
 8018764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801876c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018778:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801877c:	b2db      	uxtb	r3, r3
 801877e:	4619      	mov	r1, r3
 8018780:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018784:	f000 fd9d 	bl	80192c2 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018788:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801878a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801878e:	fb02 f303 	mul.w	r3, r2, r3
 8018792:	461a      	mov	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	fbb2 f3f3 	udiv	r3, r2, r3
 801879a:	4a4b      	ldr	r2, [pc, #300]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801879c:	6093      	str	r3, [r2, #8]
            break;
 801879e:	e108      	b.n	80189b2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80187a0:	2000      	movs	r0, #0
 80187a2:	f001 ffc1 	bl	801a728 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80187a6:	4b48      	ldr	r3, [pc, #288]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187a8:	2200      	movs	r2, #0
 80187aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80187ae:	4a46      	ldr	r2, [pc, #280]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80187b4:	4b44      	ldr	r3, [pc, #272]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187b6:	220b      	movs	r2, #11
 80187b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80187bc:	68b8      	ldr	r0, [r7, #8]
 80187be:	f002 fe71 	bl	801b4a4 <SUBGRF_GetFskBandwidthRegValue>
 80187c2:	4603      	mov	r3, r0
 80187c4:	461a      	mov	r2, r3
 80187c6:	4b40      	ldr	r3, [pc, #256]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80187cc:	4b3e      	ldr	r3, [pc, #248]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187ce:	2200      	movs	r2, #0
 80187d0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80187d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80187d4:	00db      	lsls	r3, r3, #3
 80187d6:	b29a      	uxth	r2, r3
 80187d8:	4b3b      	ldr	r3, [pc, #236]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187da:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80187dc:	4b3a      	ldr	r3, [pc, #232]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187de:	2204      	movs	r2, #4
 80187e0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80187e2:	4b39      	ldr	r3, [pc, #228]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187e4:	2218      	movs	r2, #24
 80187e6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80187e8:	4b37      	ldr	r3, [pc, #220]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187ea:	2200      	movs	r2, #0
 80187ec:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80187ee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80187f2:	f083 0301 	eor.w	r3, r3, #1
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	461a      	mov	r2, r3
 80187fa:	4b33      	ldr	r3, [pc, #204]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80187fc:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80187fe:	4b33      	ldr	r3, [pc, #204]	; (80188cc <RadioSetRxConfig+0x300>)
 8018800:	781a      	ldrb	r2, [r3, #0]
 8018802:	4b31      	ldr	r3, [pc, #196]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018804:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8018806:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801880a:	2b00      	cmp	r3, #0
 801880c:	d003      	beq.n	8018816 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801880e:	4b2e      	ldr	r3, [pc, #184]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018810:	22f2      	movs	r2, #242	; 0xf2
 8018812:	75da      	strb	r2, [r3, #23]
 8018814:	e002      	b.n	801881c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018816:	4b2c      	ldr	r3, [pc, #176]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018818:	2201      	movs	r2, #1
 801881a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801881c:	4b2a      	ldr	r3, [pc, #168]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801881e:	2201      	movs	r2, #1
 8018820:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018822:	f000 fc52 	bl	80190ca <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8018826:	2000      	movs	r0, #0
 8018828:	f7ff fdfc 	bl	8018424 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801882c:	4828      	ldr	r0, [pc, #160]	; (80188d0 <RadioSetRxConfig+0x304>)
 801882e:	f002 fa15 	bl	801ac5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018832:	4828      	ldr	r0, [pc, #160]	; (80188d4 <RadioSetRxConfig+0x308>)
 8018834:	f002 fae4 	bl	801ae00 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018838:	4a28      	ldr	r2, [pc, #160]	; (80188dc <RadioSetRxConfig+0x310>)
 801883a:	f107 0314 	add.w	r3, r7, #20
 801883e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018842:	e883 0003 	stmia.w	r3, {r0, r1}
 8018846:	f107 0314 	add.w	r3, r7, #20
 801884a:	4618      	mov	r0, r3
 801884c:	f001 fda5 	bl	801a39a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018850:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018854:	f001 fdf0 	bl	801a438 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018858:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801885a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801885e:	fb02 f303 	mul.w	r3, r2, r3
 8018862:	461a      	mov	r2, r3
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	fbb2 f3f3 	udiv	r3, r2, r3
 801886a:	4a17      	ldr	r2, [pc, #92]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 801886c:	6093      	str	r3, [r2, #8]
            break;
 801886e:	e0a0      	b.n	80189b2 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018870:	2000      	movs	r0, #0
 8018872:	f001 ff59 	bl	801a728 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018876:	4b14      	ldr	r3, [pc, #80]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018878:	2201      	movs	r2, #1
 801887a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	b2da      	uxtb	r2, r3
 8018882:	4b11      	ldr	r3, [pc, #68]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018888:	4a15      	ldr	r2, [pc, #84]	; (80188e0 <RadioSetRxConfig+0x314>)
 801888a:	68bb      	ldr	r3, [r7, #8]
 801888c:	4413      	add	r3, r2
 801888e:	781a      	ldrb	r2, [r3, #0]
 8018890:	4b0d      	ldr	r3, [pc, #52]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018896:	4a0c      	ldr	r2, [pc, #48]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 8018898:	7bbb      	ldrb	r3, [r7, #14]
 801889a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801889e:	68bb      	ldr	r3, [r7, #8]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d105      	bne.n	80188b0 <RadioSetRxConfig+0x2e4>
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2b0b      	cmp	r3, #11
 80188a8:	d008      	beq.n	80188bc <RadioSetRxConfig+0x2f0>
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	2b0c      	cmp	r3, #12
 80188ae:	d005      	beq.n	80188bc <RadioSetRxConfig+0x2f0>
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	2b01      	cmp	r3, #1
 80188b4:	d116      	bne.n	80188e4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	2b0c      	cmp	r3, #12
 80188ba:	d113      	bne.n	80188e4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80188bc:	4b02      	ldr	r3, [pc, #8]	; (80188c8 <RadioSetRxConfig+0x2fc>)
 80188be:	2201      	movs	r2, #1
 80188c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80188c4:	e012      	b.n	80188ec <RadioSetRxConfig+0x320>
 80188c6:	bf00      	nop
 80188c8:	20001a9c 	.word	0x20001a9c
 80188cc:	20000144 	.word	0x20000144
 80188d0:	20001ad4 	.word	0x20001ad4
 80188d4:	20001aaa 	.word	0x20001aaa
 80188d8:	0801d768 	.word	0x0801d768
 80188dc:	0801d770 	.word	0x0801d770
 80188e0:	0801ddd0 	.word	0x0801ddd0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80188e4:	4b35      	ldr	r3, [pc, #212]	; (80189bc <RadioSetRxConfig+0x3f0>)
 80188e6:	2200      	movs	r2, #0
 80188e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80188ec:	4b33      	ldr	r3, [pc, #204]	; (80189bc <RadioSetRxConfig+0x3f0>)
 80188ee:	2201      	movs	r2, #1
 80188f0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80188f2:	4b32      	ldr	r3, [pc, #200]	; (80189bc <RadioSetRxConfig+0x3f0>)
 80188f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80188f8:	2b05      	cmp	r3, #5
 80188fa:	d004      	beq.n	8018906 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80188fc:	4b2f      	ldr	r3, [pc, #188]	; (80189bc <RadioSetRxConfig+0x3f0>)
 80188fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018902:	2b06      	cmp	r3, #6
 8018904:	d10a      	bne.n	801891c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8018906:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018908:	2b0b      	cmp	r3, #11
 801890a:	d803      	bhi.n	8018914 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801890c:	4b2b      	ldr	r3, [pc, #172]	; (80189bc <RadioSetRxConfig+0x3f0>)
 801890e:	220c      	movs	r2, #12
 8018910:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018912:	e006      	b.n	8018922 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018914:	4a29      	ldr	r2, [pc, #164]	; (80189bc <RadioSetRxConfig+0x3f0>)
 8018916:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018918:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801891a:	e002      	b.n	8018922 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801891c:	4a27      	ldr	r2, [pc, #156]	; (80189bc <RadioSetRxConfig+0x3f0>)
 801891e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018920:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018922:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018926:	4b25      	ldr	r3, [pc, #148]	; (80189bc <RadioSetRxConfig+0x3f0>)
 8018928:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801892a:	4b25      	ldr	r3, [pc, #148]	; (80189c0 <RadioSetRxConfig+0x3f4>)
 801892c:	781a      	ldrb	r2, [r3, #0]
 801892e:	4b23      	ldr	r3, [pc, #140]	; (80189bc <RadioSetRxConfig+0x3f0>)
 8018930:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018932:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8018936:	4b21      	ldr	r3, [pc, #132]	; (80189bc <RadioSetRxConfig+0x3f0>)
 8018938:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801893c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8018940:	4b1e      	ldr	r3, [pc, #120]	; (80189bc <RadioSetRxConfig+0x3f0>)
 8018942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018946:	f000 fbc0 	bl	80190ca <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801894a:	2001      	movs	r0, #1
 801894c:	f7ff fd6a 	bl	8018424 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018950:	481c      	ldr	r0, [pc, #112]	; (80189c4 <RadioSetRxConfig+0x3f8>)
 8018952:	f002 f983 	bl	801ac5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018956:	481c      	ldr	r0, [pc, #112]	; (80189c8 <RadioSetRxConfig+0x3fc>)
 8018958:	f002 fa52 	bl	801ae00 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801895c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801895e:	b2db      	uxtb	r3, r3
 8018960:	4618      	mov	r0, r3
 8018962:	f001 fef0 	bl	801a746 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018966:	4b15      	ldr	r3, [pc, #84]	; (80189bc <RadioSetRxConfig+0x3f0>)
 8018968:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801896c:	2b01      	cmp	r3, #1
 801896e:	d10d      	bne.n	801898c <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018970:	f240 7036 	movw	r0, #1846	; 0x736
 8018974:	f002 fba0 	bl	801b0b8 <SUBGRF_ReadRegister>
 8018978:	4603      	mov	r3, r0
 801897a:	f023 0304 	bic.w	r3, r3, #4
 801897e:	b2db      	uxtb	r3, r3
 8018980:	4619      	mov	r1, r3
 8018982:	f240 7036 	movw	r0, #1846	; 0x736
 8018986:	f002 fb83 	bl	801b090 <SUBGRF_WriteRegister>
 801898a:	e00c      	b.n	80189a6 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801898c:	f240 7036 	movw	r0, #1846	; 0x736
 8018990:	f002 fb92 	bl	801b0b8 <SUBGRF_ReadRegister>
 8018994:	4603      	mov	r3, r0
 8018996:	f043 0304 	orr.w	r3, r3, #4
 801899a:	b2db      	uxtb	r3, r3
 801899c:	4619      	mov	r1, r3
 801899e:	f240 7036 	movw	r0, #1846	; 0x736
 80189a2:	f002 fb75 	bl	801b090 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80189a6:	4b05      	ldr	r3, [pc, #20]	; (80189bc <RadioSetRxConfig+0x3f0>)
 80189a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189ac:	609a      	str	r2, [r3, #8]
            break;
 80189ae:	e000      	b.n	80189b2 <RadioSetRxConfig+0x3e6>
            break;
 80189b0:	bf00      	nop
    }
}
 80189b2:	bf00      	nop
 80189b4:	3728      	adds	r7, #40	; 0x28
 80189b6:	46bd      	mov	sp, r7
 80189b8:	bd80      	pop	{r7, pc}
 80189ba:	bf00      	nop
 80189bc:	20001a9c 	.word	0x20001a9c
 80189c0:	20000144 	.word	0x20000144
 80189c4:	20001ad4 	.word	0x20001ad4
 80189c8:	20001aaa 	.word	0x20001aaa

080189cc <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b086      	sub	sp, #24
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	60ba      	str	r2, [r7, #8]
 80189d4:	607b      	str	r3, [r7, #4]
 80189d6:	4603      	mov	r3, r0
 80189d8:	73fb      	strb	r3, [r7, #15]
 80189da:	460b      	mov	r3, r1
 80189dc:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 80189de:	f002 fe2e 	bl	801b63e <RFW_DeInit>
    switch( modem )
 80189e2:	7bfb      	ldrb	r3, [r7, #15]
 80189e4:	2b04      	cmp	r3, #4
 80189e6:	f000 80c7 	beq.w	8018b78 <RadioSetTxConfig+0x1ac>
 80189ea:	2b04      	cmp	r3, #4
 80189ec:	f300 80d6 	bgt.w	8018b9c <RadioSetTxConfig+0x1d0>
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d002      	beq.n	80189fa <RadioSetTxConfig+0x2e>
 80189f4:	2b01      	cmp	r3, #1
 80189f6:	d059      	beq.n	8018aac <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80189f8:	e0d0      	b.n	8018b9c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80189fa:	4b74      	ldr	r3, [pc, #464]	; (8018bcc <RadioSetTxConfig+0x200>)
 80189fc:	2200      	movs	r2, #0
 80189fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8018a02:	4a72      	ldr	r2, [pc, #456]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a04:	6a3b      	ldr	r3, [r7, #32]
 8018a06:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018a08:	4b70      	ldr	r3, [pc, #448]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a0a:	220b      	movs	r2, #11
 8018a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	f002 fd47 	bl	801b4a4 <SUBGRF_GetFskBandwidthRegValue>
 8018a16:	4603      	mov	r3, r0
 8018a18:	461a      	mov	r2, r3
 8018a1a:	4b6c      	ldr	r3, [pc, #432]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018a20:	4a6a      	ldr	r2, [pc, #424]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018a26:	4b69      	ldr	r3, [pc, #420]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a28:	2200      	movs	r2, #0
 8018a2a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018a2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018a2e:	00db      	lsls	r3, r3, #3
 8018a30:	b29a      	uxth	r2, r3
 8018a32:	4b66      	ldr	r3, [pc, #408]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a34:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8018a36:	4b65      	ldr	r3, [pc, #404]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a38:	2204      	movs	r2, #4
 8018a3a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018a3c:	4b63      	ldr	r3, [pc, #396]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a3e:	2218      	movs	r2, #24
 8018a40:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018a42:	4b62      	ldr	r3, [pc, #392]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a44:	2200      	movs	r2, #0
 8018a46:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018a4c:	f083 0301 	eor.w	r3, r3, #1
 8018a50:	b2db      	uxtb	r3, r3
 8018a52:	461a      	mov	r2, r3
 8018a54:	4b5d      	ldr	r3, [pc, #372]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a56:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018a58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d003      	beq.n	8018a68 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018a60:	4b5a      	ldr	r3, [pc, #360]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a62:	22f2      	movs	r2, #242	; 0xf2
 8018a64:	75da      	strb	r2, [r3, #23]
 8018a66:	e002      	b.n	8018a6e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018a68:	4b58      	ldr	r3, [pc, #352]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a6a:	2201      	movs	r2, #1
 8018a6c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018a6e:	4b57      	ldr	r3, [pc, #348]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018a70:	2201      	movs	r2, #1
 8018a72:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018a74:	f000 fb29 	bl	80190ca <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018a78:	2000      	movs	r0, #0
 8018a7a:	f7ff fcd3 	bl	8018424 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a7e:	4854      	ldr	r0, [pc, #336]	; (8018bd0 <RadioSetTxConfig+0x204>)
 8018a80:	f002 f8ec 	bl	801ac5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018a84:	4853      	ldr	r0, [pc, #332]	; (8018bd4 <RadioSetTxConfig+0x208>)
 8018a86:	f002 f9bb 	bl	801ae00 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018a8a:	4a53      	ldr	r2, [pc, #332]	; (8018bd8 <RadioSetTxConfig+0x20c>)
 8018a8c:	f107 0310 	add.w	r3, r7, #16
 8018a90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a94:	e883 0003 	stmia.w	r3, {r0, r1}
 8018a98:	f107 0310 	add.w	r3, r7, #16
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f001 fc7c 	bl	801a39a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018aa6:	f001 fcc7 	bl	801a438 <SUBGRF_SetWhiteningSeed>
            break;
 8018aaa:	e078      	b.n	8018b9e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018aac:	4b47      	ldr	r3, [pc, #284]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018aae:	2201      	movs	r2, #1
 8018ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018ab4:	6a3b      	ldr	r3, [r7, #32]
 8018ab6:	b2da      	uxtb	r2, r3
 8018ab8:	4b44      	ldr	r3, [pc, #272]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8018abe:	4a47      	ldr	r2, [pc, #284]	; (8018bdc <RadioSetTxConfig+0x210>)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	4413      	add	r3, r2
 8018ac4:	781a      	ldrb	r2, [r3, #0]
 8018ac6:	4b41      	ldr	r3, [pc, #260]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8018acc:	4a3f      	ldr	r2, [pc, #252]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018ace:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ad2:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d105      	bne.n	8018ae8 <RadioSetTxConfig+0x11c>
 8018adc:	6a3b      	ldr	r3, [r7, #32]
 8018ade:	2b0b      	cmp	r3, #11
 8018ae0:	d008      	beq.n	8018af4 <RadioSetTxConfig+0x128>
 8018ae2:	6a3b      	ldr	r3, [r7, #32]
 8018ae4:	2b0c      	cmp	r3, #12
 8018ae6:	d005      	beq.n	8018af4 <RadioSetTxConfig+0x128>
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	2b01      	cmp	r3, #1
 8018aec:	d107      	bne.n	8018afe <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018aee:	6a3b      	ldr	r3, [r7, #32]
 8018af0:	2b0c      	cmp	r3, #12
 8018af2:	d104      	bne.n	8018afe <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8018af4:	4b35      	ldr	r3, [pc, #212]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018af6:	2201      	movs	r2, #1
 8018af8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018afc:	e003      	b.n	8018b06 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018afe:	4b33      	ldr	r3, [pc, #204]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b00:	2200      	movs	r2, #0
 8018b02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8018b06:	4b31      	ldr	r3, [pc, #196]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b08:	2201      	movs	r2, #1
 8018b0a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018b0c:	4b2f      	ldr	r3, [pc, #188]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8018b12:	2b05      	cmp	r3, #5
 8018b14:	d004      	beq.n	8018b20 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8018b16:	4b2d      	ldr	r3, [pc, #180]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018b1c:	2b06      	cmp	r3, #6
 8018b1e:	d10a      	bne.n	8018b36 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018b20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018b22:	2b0b      	cmp	r3, #11
 8018b24:	d803      	bhi.n	8018b2e <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8018b26:	4b29      	ldr	r3, [pc, #164]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b28:	220c      	movs	r2, #12
 8018b2a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018b2c:	e006      	b.n	8018b3c <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018b2e:	4a27      	ldr	r2, [pc, #156]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018b32:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8018b34:	e002      	b.n	8018b3c <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018b36:	4a25      	ldr	r2, [pc, #148]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8018b3a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018b3c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018b40:	4b22      	ldr	r3, [pc, #136]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b42:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8018b44:	4b26      	ldr	r3, [pc, #152]	; (8018be0 <RadioSetTxConfig+0x214>)
 8018b46:	781a      	ldrb	r2, [r3, #0]
 8018b48:	4b20      	ldr	r3, [pc, #128]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b4a:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018b4c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018b50:	4b1e      	ldr	r3, [pc, #120]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b52:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018b56:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8018b5a:	4b1c      	ldr	r3, [pc, #112]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018b60:	f000 fab3 	bl	80190ca <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018b64:	2001      	movs	r0, #1
 8018b66:	f7ff fc5d 	bl	8018424 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b6a:	4819      	ldr	r0, [pc, #100]	; (8018bd0 <RadioSetTxConfig+0x204>)
 8018b6c:	f002 f876 	bl	801ac5c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018b70:	4818      	ldr	r0, [pc, #96]	; (8018bd4 <RadioSetTxConfig+0x208>)
 8018b72:	f002 f945 	bl	801ae00 <SUBGRF_SetPacketParams>
            break;
 8018b76:	e012      	b.n	8018b9e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018b78:	2004      	movs	r0, #4
 8018b7a:	f7ff fc53 	bl	8018424 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018b7e:	4b13      	ldr	r3, [pc, #76]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b80:	2202      	movs	r2, #2
 8018b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018b86:	4a11      	ldr	r2, [pc, #68]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b88:	6a3b      	ldr	r3, [r7, #32]
 8018b8a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018b8c:	4b0f      	ldr	r3, [pc, #60]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018b8e:	2216      	movs	r2, #22
 8018b90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018b94:	480e      	ldr	r0, [pc, #56]	; (8018bd0 <RadioSetTxConfig+0x204>)
 8018b96:	f002 f861 	bl	801ac5c <SUBGRF_SetModulationParams>
            break;
 8018b9a:	e000      	b.n	8018b9e <RadioSetTxConfig+0x1d2>
            break;
 8018b9c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018b9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f002 fb90 	bl	801b2c8 <SUBGRF_SetRfTxPower>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	461a      	mov	r2, r3
 8018bac:	4b07      	ldr	r3, [pc, #28]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018bae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018bb2:	4b06      	ldr	r3, [pc, #24]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018bb4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f002 fd54 	bl	801b666 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018bbe:	4a03      	ldr	r2, [pc, #12]	; (8018bcc <RadioSetTxConfig+0x200>)
 8018bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018bc2:	6053      	str	r3, [r2, #4]
}
 8018bc4:	bf00      	nop
 8018bc6:	3718      	adds	r7, #24
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	20001a9c 	.word	0x20001a9c
 8018bd0:	20001ad4 	.word	0x20001ad4
 8018bd4:	20001aaa 	.word	0x20001aaa
 8018bd8:	0801d770 	.word	0x0801d770
 8018bdc:	0801ddd0 	.word	0x0801ddd0
 8018be0:	20000144 	.word	0x20000144

08018be4 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018be4:	b480      	push	{r7}
 8018be6:	b083      	sub	sp, #12
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
    return true;
 8018bec:	2301      	movs	r3, #1
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	370c      	adds	r7, #12
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bc80      	pop	{r7}
 8018bf6:	4770      	bx	lr

08018bf8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b085      	sub	sp, #20
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	4603      	mov	r3, r0
 8018c00:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018c02:	2300      	movs	r3, #0
 8018c04:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8018c06:	79fb      	ldrb	r3, [r7, #7]
 8018c08:	2b0a      	cmp	r3, #10
 8018c0a:	d83e      	bhi.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
 8018c0c:	a201      	add	r2, pc, #4	; (adr r2, 8018c14 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c12:	bf00      	nop
 8018c14:	08018c41 	.word	0x08018c41
 8018c18:	08018c51 	.word	0x08018c51
 8018c1c:	08018c61 	.word	0x08018c61
 8018c20:	08018c71 	.word	0x08018c71
 8018c24:	08018c79 	.word	0x08018c79
 8018c28:	08018c7f 	.word	0x08018c7f
 8018c2c:	08018c85 	.word	0x08018c85
 8018c30:	08018c8b 	.word	0x08018c8b
 8018c34:	08018c49 	.word	0x08018c49
 8018c38:	08018c59 	.word	0x08018c59
 8018c3c:	08018c69 	.word	0x08018c69
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018c40:	f641 6384 	movw	r3, #7812	; 0x1e84
 8018c44:	60fb      	str	r3, [r7, #12]
        break;
 8018c46:	e020      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8018c48:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8018c4c:	60fb      	str	r3, [r7, #12]
        break;
 8018c4e:	e01c      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018c50:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018c54:	60fb      	str	r3, [r7, #12]
        break;
 8018c56:	e018      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018c58:	f245 1361 	movw	r3, #20833	; 0x5161
 8018c5c:	60fb      	str	r3, [r7, #12]
        break;
 8018c5e:	e014      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018c60:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018c64:	60fb      	str	r3, [r7, #12]
        break;
 8018c66:	e010      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018c68:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8018c6c:	60fb      	str	r3, [r7, #12]
        break;
 8018c6e:	e00c      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018c70:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018c74:	60fb      	str	r3, [r7, #12]
        break;
 8018c76:	e008      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018c78:	4b07      	ldr	r3, [pc, #28]	; (8018c98 <RadioGetLoRaBandwidthInHz+0xa0>)
 8018c7a:	60fb      	str	r3, [r7, #12]
        break;
 8018c7c:	e005      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018c7e:	4b07      	ldr	r3, [pc, #28]	; (8018c9c <RadioGetLoRaBandwidthInHz+0xa4>)
 8018c80:	60fb      	str	r3, [r7, #12]
        break;
 8018c82:	e002      	b.n	8018c8a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018c84:	4b06      	ldr	r3, [pc, #24]	; (8018ca0 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018c86:	60fb      	str	r3, [r7, #12]
        break;
 8018c88:	bf00      	nop
    }

    return bandwidthInHz;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	3714      	adds	r7, #20
 8018c90:	46bd      	mov	sp, r7
 8018c92:	bc80      	pop	{r7}
 8018c94:	4770      	bx	lr
 8018c96:	bf00      	nop
 8018c98:	0001e848 	.word	0x0001e848
 8018c9c:	0003d090 	.word	0x0003d090
 8018ca0:	0007a120 	.word	0x0007a120

08018ca4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018ca4:	b480      	push	{r7}
 8018ca6:	b083      	sub	sp, #12
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	4608      	mov	r0, r1
 8018cae:	4611      	mov	r1, r2
 8018cb0:	461a      	mov	r2, r3
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	70fb      	strb	r3, [r7, #3]
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	803b      	strh	r3, [r7, #0]
 8018cba:	4613      	mov	r3, r2
 8018cbc:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8018cbe:	883b      	ldrh	r3, [r7, #0]
 8018cc0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018cc2:	78ba      	ldrb	r2, [r7, #2]
 8018cc4:	f082 0201 	eor.w	r2, r2, #1
 8018cc8:	b2d2      	uxtb	r2, r2
 8018cca:	2a00      	cmp	r2, #0
 8018ccc:	d001      	beq.n	8018cd2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8018cce:	2208      	movs	r2, #8
 8018cd0:	e000      	b.n	8018cd4 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018cd2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018cd4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018cd6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8018cda:	7c3b      	ldrb	r3, [r7, #16]
 8018cdc:	7d39      	ldrb	r1, [r7, #20]
 8018cde:	2900      	cmp	r1, #0
 8018ce0:	d001      	beq.n	8018ce6 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018ce2:	2102      	movs	r1, #2
 8018ce4:	e000      	b.n	8018ce8 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018ce6:	2100      	movs	r1, #0
 8018ce8:	440b      	add	r3, r1
 8018cea:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018cec:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8018cee:	4618      	mov	r0, r3
 8018cf0:	370c      	adds	r7, #12
 8018cf2:	46bd      	mov	sp, r7
 8018cf4:	bc80      	pop	{r7}
 8018cf6:	4770      	bx	lr

08018cf8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b08b      	sub	sp, #44	; 0x2c
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	60f8      	str	r0, [r7, #12]
 8018d00:	60b9      	str	r1, [r7, #8]
 8018d02:	4611      	mov	r1, r2
 8018d04:	461a      	mov	r2, r3
 8018d06:	460b      	mov	r3, r1
 8018d08:	71fb      	strb	r3, [r7, #7]
 8018d0a:	4613      	mov	r3, r2
 8018d0c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018d0e:	79fb      	ldrb	r3, [r7, #7]
 8018d10:	3304      	adds	r3, #4
 8018d12:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018d14:	2300      	movs	r3, #0
 8018d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8018d1a:	68bb      	ldr	r3, [r7, #8]
 8018d1c:	2b05      	cmp	r3, #5
 8018d1e:	d002      	beq.n	8018d26 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	2b06      	cmp	r3, #6
 8018d24:	d104      	bne.n	8018d30 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8018d26:	88bb      	ldrh	r3, [r7, #4]
 8018d28:	2b0b      	cmp	r3, #11
 8018d2a:	d801      	bhi.n	8018d30 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018d2c:	230c      	movs	r3, #12
 8018d2e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d105      	bne.n	8018d42 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8018d36:	68bb      	ldr	r3, [r7, #8]
 8018d38:	2b0b      	cmp	r3, #11
 8018d3a:	d008      	beq.n	8018d4e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	2b0c      	cmp	r3, #12
 8018d40:	d005      	beq.n	8018d4e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	d105      	bne.n	8018d54 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018d48:	68bb      	ldr	r3, [r7, #8]
 8018d4a:	2b0c      	cmp	r3, #12
 8018d4c:	d102      	bne.n	8018d54 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018d4e:	2301      	movs	r3, #1
 8018d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018d54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018d58:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8018d5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018d5e:	2a00      	cmp	r2, #0
 8018d60:	d001      	beq.n	8018d66 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018d62:	2210      	movs	r2, #16
 8018d64:	e000      	b.n	8018d68 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018d66:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018d68:	4413      	add	r3, r2
 8018d6a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018d70:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018d72:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018d76:	2a00      	cmp	r2, #0
 8018d78:	d001      	beq.n	8018d7e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8018d7a:	2200      	movs	r2, #0
 8018d7c:	e000      	b.n	8018d80 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018d7e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018d80:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018d82:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	2b06      	cmp	r3, #6
 8018d88:	d803      	bhi.n	8018d92 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8018d8a:	68bb      	ldr	r3, [r7, #8]
 8018d8c:	009b      	lsls	r3, r3, #2
 8018d8e:	623b      	str	r3, [r7, #32]
 8018d90:	e00e      	b.n	8018db0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018d92:	69fb      	ldr	r3, [r7, #28]
 8018d94:	3308      	adds	r3, #8
 8018d96:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d004      	beq.n	8018daa <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018da0:	68bb      	ldr	r3, [r7, #8]
 8018da2:	3b02      	subs	r3, #2
 8018da4:	009b      	lsls	r3, r3, #2
 8018da6:	623b      	str	r3, [r7, #32]
 8018da8:	e002      	b.n	8018db0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	009b      	lsls	r3, r3, #2
 8018dae:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018db0:	69fb      	ldr	r3, [r7, #28]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	da01      	bge.n	8018dba <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018db6:	2300      	movs	r3, #0
 8018db8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8018dba:	69fa      	ldr	r2, [r7, #28]
 8018dbc:	6a3b      	ldr	r3, [r7, #32]
 8018dbe:	4413      	add	r3, r2
 8018dc0:	1e5a      	subs	r2, r3, #1
 8018dc2:	6a3b      	ldr	r3, [r7, #32]
 8018dc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dc8:	697a      	ldr	r2, [r7, #20]
 8018dca:	fb03 f202 	mul.w	r2, r3, r2
 8018dce:	88bb      	ldrh	r3, [r7, #4]
 8018dd0:	4413      	add	r3, r2
    int32_t intermediate =
 8018dd2:	330c      	adds	r3, #12
 8018dd4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018dd6:	68bb      	ldr	r3, [r7, #8]
 8018dd8:	2b06      	cmp	r3, #6
 8018dda:	d802      	bhi.n	8018de2 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8018ddc:	69bb      	ldr	r3, [r7, #24]
 8018dde:	3302      	adds	r3, #2
 8018de0:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018de2:	69bb      	ldr	r3, [r7, #24]
 8018de4:	009b      	lsls	r3, r3, #2
 8018de6:	1c5a      	adds	r2, r3, #1
 8018de8:	68bb      	ldr	r3, [r7, #8]
 8018dea:	3b02      	subs	r3, #2
 8018dec:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018df0:	4618      	mov	r0, r3
 8018df2:	372c      	adds	r7, #44	; 0x2c
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bc80      	pop	{r7}
 8018df8:	4770      	bx	lr
	...

08018dfc <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018dfc:	b580      	push	{r7, lr}
 8018dfe:	b08a      	sub	sp, #40	; 0x28
 8018e00:	af04      	add	r7, sp, #16
 8018e02:	60b9      	str	r1, [r7, #8]
 8018e04:	607a      	str	r2, [r7, #4]
 8018e06:	461a      	mov	r2, r3
 8018e08:	4603      	mov	r3, r0
 8018e0a:	73fb      	strb	r3, [r7, #15]
 8018e0c:	4613      	mov	r3, r2
 8018e0e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018e10:	2300      	movs	r3, #0
 8018e12:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018e14:	2301      	movs	r3, #1
 8018e16:	613b      	str	r3, [r7, #16]

    switch( modem )
 8018e18:	7bfb      	ldrb	r3, [r7, #15]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d002      	beq.n	8018e24 <RadioTimeOnAir+0x28>
 8018e1e:	2b01      	cmp	r3, #1
 8018e20:	d017      	beq.n	8018e52 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018e22:	e035      	b.n	8018e90 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018e24:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8018e28:	8c3a      	ldrh	r2, [r7, #32]
 8018e2a:	7bb9      	ldrb	r1, [r7, #14]
 8018e2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018e30:	9301      	str	r3, [sp, #4]
 8018e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e36:	9300      	str	r3, [sp, #0]
 8018e38:	4603      	mov	r3, r0
 8018e3a:	6878      	ldr	r0, [r7, #4]
 8018e3c:	f7ff ff32 	bl	8018ca4 <RadioGetGfskTimeOnAirNumerator>
 8018e40:	4603      	mov	r3, r0
 8018e42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e46:	fb02 f303 	mul.w	r3, r2, r3
 8018e4a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	613b      	str	r3, [r7, #16]
        break;
 8018e50:	e01e      	b.n	8018e90 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018e52:	8c39      	ldrh	r1, [r7, #32]
 8018e54:	7bba      	ldrb	r2, [r7, #14]
 8018e56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8018e5a:	9302      	str	r3, [sp, #8]
 8018e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e60:	9301      	str	r3, [sp, #4]
 8018e62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	460b      	mov	r3, r1
 8018e6a:	6879      	ldr	r1, [r7, #4]
 8018e6c:	68b8      	ldr	r0, [r7, #8]
 8018e6e:	f7ff ff43 	bl	8018cf8 <RadioGetLoRaTimeOnAirNumerator>
 8018e72:	4603      	mov	r3, r0
 8018e74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018e78:	fb02 f303 	mul.w	r3, r2, r3
 8018e7c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018e7e:	4a0a      	ldr	r2, [pc, #40]	; (8018ea8 <RadioTimeOnAir+0xac>)
 8018e80:	68bb      	ldr	r3, [r7, #8]
 8018e82:	4413      	add	r3, r2
 8018e84:	781b      	ldrb	r3, [r3, #0]
 8018e86:	4618      	mov	r0, r3
 8018e88:	f7ff feb6 	bl	8018bf8 <RadioGetLoRaBandwidthInHz>
 8018e8c:	6138      	str	r0, [r7, #16]
        break;
 8018e8e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	4413      	add	r3, r2
 8018e96:	1e5a      	subs	r2, r3, #1
 8018e98:	693b      	ldr	r3, [r7, #16]
 8018e9a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018e9e:	4618      	mov	r0, r3
 8018ea0:	3718      	adds	r7, #24
 8018ea2:	46bd      	mov	sp, r7
 8018ea4:	bd80      	pop	{r7, pc}
 8018ea6:	bf00      	nop
 8018ea8:	0801ddd0 	.word	0x0801ddd0

08018eac <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8018eac:	b580      	push	{r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
 8018eb4:	460b      	mov	r3, r1
 8018eb6:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018eb8:	2300      	movs	r3, #0
 8018eba:	2200      	movs	r2, #0
 8018ebc:	f240 2101 	movw	r1, #513	; 0x201
 8018ec0:	f240 2001 	movw	r0, #513	; 0x201
 8018ec4:	f001 fd34 	bl	801a930 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018ec8:	4b71      	ldr	r3, [pc, #452]	; (8019090 <RadioSend+0x1e4>)
 8018eca:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018ece:	2101      	movs	r1, #1
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f002 f9d1 	bl	801b278 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018ed6:	4b6e      	ldr	r3, [pc, #440]	; (8019090 <RadioSend+0x1e4>)
 8018ed8:	781b      	ldrb	r3, [r3, #0]
 8018eda:	2b01      	cmp	r3, #1
 8018edc:	d112      	bne.n	8018f04 <RadioSend+0x58>
 8018ede:	4b6c      	ldr	r3, [pc, #432]	; (8019090 <RadioSend+0x1e4>)
 8018ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018ee4:	2b06      	cmp	r3, #6
 8018ee6:	d10d      	bne.n	8018f04 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018ee8:	f640 0089 	movw	r0, #2185	; 0x889
 8018eec:	f002 f8e4 	bl	801b0b8 <SUBGRF_ReadRegister>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	f023 0304 	bic.w	r3, r3, #4
 8018ef6:	b2db      	uxtb	r3, r3
 8018ef8:	4619      	mov	r1, r3
 8018efa:	f640 0089 	movw	r0, #2185	; 0x889
 8018efe:	f002 f8c7 	bl	801b090 <SUBGRF_WriteRegister>
 8018f02:	e00c      	b.n	8018f1e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018f04:	f640 0089 	movw	r0, #2185	; 0x889
 8018f08:	f002 f8d6 	bl	801b0b8 <SUBGRF_ReadRegister>
 8018f0c:	4603      	mov	r3, r0
 8018f0e:	f043 0304 	orr.w	r3, r3, #4
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	4619      	mov	r1, r3
 8018f16:	f640 0089 	movw	r0, #2185	; 0x889
 8018f1a:	f002 f8b9 	bl	801b090 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8018f1e:	4b5c      	ldr	r3, [pc, #368]	; (8019090 <RadioSend+0x1e4>)
 8018f20:	781b      	ldrb	r3, [r3, #0]
 8018f22:	2b04      	cmp	r3, #4
 8018f24:	f200 80a7 	bhi.w	8019076 <RadioSend+0x1ca>
 8018f28:	a201      	add	r2, pc, #4	; (adr r2, 8018f30 <RadioSend+0x84>)
 8018f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f2e:	bf00      	nop
 8018f30:	08018f5f 	.word	0x08018f5f
 8018f34:	08018f45 	.word	0x08018f45
 8018f38:	08018f5f 	.word	0x08018f5f
 8018f3c:	08018fbf 	.word	0x08018fbf
 8018f40:	08018fdf 	.word	0x08018fdf
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018f44:	4a52      	ldr	r2, [pc, #328]	; (8019090 <RadioSend+0x1e4>)
 8018f46:	78fb      	ldrb	r3, [r7, #3]
 8018f48:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f4a:	4852      	ldr	r0, [pc, #328]	; (8019094 <RadioSend+0x1e8>)
 8018f4c:	f001 ff58 	bl	801ae00 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018f50:	78fb      	ldrb	r3, [r7, #3]
 8018f52:	2200      	movs	r2, #0
 8018f54:	4619      	mov	r1, r3
 8018f56:	6878      	ldr	r0, [r7, #4]
 8018f58:	f001 fa0c 	bl	801a374 <SUBGRF_SendPayload>
            break;
 8018f5c:	e08c      	b.n	8019078 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018f5e:	f002 fb74 	bl	801b64a <RFW_Is_Init>
 8018f62:	4603      	mov	r3, r0
 8018f64:	2b01      	cmp	r3, #1
 8018f66:	d11d      	bne.n	8018fa4 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018f68:	f107 020d 	add.w	r2, r7, #13
 8018f6c:	78fb      	ldrb	r3, [r7, #3]
 8018f6e:	4619      	mov	r1, r3
 8018f70:	6878      	ldr	r0, [r7, #4]
 8018f72:	f002 fb82 	bl	801b67a <RFW_TransmitInit>
 8018f76:	4603      	mov	r3, r0
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d10c      	bne.n	8018f96 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018f7c:	7b7a      	ldrb	r2, [r7, #13]
 8018f7e:	4b44      	ldr	r3, [pc, #272]	; (8019090 <RadioSend+0x1e4>)
 8018f80:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018f82:	4844      	ldr	r0, [pc, #272]	; (8019094 <RadioSend+0x1e8>)
 8018f84:	f001 ff3c 	bl	801ae00 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8018f88:	7b7b      	ldrb	r3, [r7, #13]
 8018f8a:	2200      	movs	r2, #0
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f001 f9f0 	bl	801a374 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018f94:	e070      	b.n	8019078 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8018f96:	4b40      	ldr	r3, [pc, #256]	; (8019098 <RadioSend+0x1ec>)
 8018f98:	2201      	movs	r2, #1
 8018f9a:	2100      	movs	r1, #0
 8018f9c:	2002      	movs	r0, #2
 8018f9e:	f003 fc91 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
 8018fa2:	e072      	b.n	801908a <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018fa4:	4a3a      	ldr	r2, [pc, #232]	; (8019090 <RadioSend+0x1e4>)
 8018fa6:	78fb      	ldrb	r3, [r7, #3]
 8018fa8:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018faa:	483a      	ldr	r0, [pc, #232]	; (8019094 <RadioSend+0x1e8>)
 8018fac:	f001 ff28 	bl	801ae00 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018fb0:	78fb      	ldrb	r3, [r7, #3]
 8018fb2:	2200      	movs	r2, #0
 8018fb4:	4619      	mov	r1, r3
 8018fb6:	6878      	ldr	r0, [r7, #4]
 8018fb8:	f001 f9dc 	bl	801a374 <SUBGRF_SendPayload>
            break;
 8018fbc:	e05c      	b.n	8019078 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018fbe:	4b34      	ldr	r3, [pc, #208]	; (8019090 <RadioSend+0x1e4>)
 8018fc0:	2202      	movs	r2, #2
 8018fc2:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018fc4:	4a32      	ldr	r2, [pc, #200]	; (8019090 <RadioSend+0x1e4>)
 8018fc6:	78fb      	ldrb	r3, [r7, #3]
 8018fc8:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018fca:	4832      	ldr	r0, [pc, #200]	; (8019094 <RadioSend+0x1e8>)
 8018fcc:	f001 ff18 	bl	801ae00 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018fd0:	78fb      	ldrb	r3, [r7, #3]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	4619      	mov	r1, r3
 8018fd6:	6878      	ldr	r0, [r7, #4]
 8018fd8:	f001 f9cc 	bl	801a374 <SUBGRF_SendPayload>
            break;
 8018fdc:	e04c      	b.n	8019078 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8018fde:	78fb      	ldrb	r3, [r7, #3]
 8018fe0:	461a      	mov	r2, r3
 8018fe2:	6879      	ldr	r1, [r7, #4]
 8018fe4:	482d      	ldr	r0, [pc, #180]	; (801909c <RadioSend+0x1f0>)
 8018fe6:	f000 fcbc 	bl	8019962 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018fea:	4b29      	ldr	r3, [pc, #164]	; (8019090 <RadioSend+0x1e4>)
 8018fec:	2202      	movs	r2, #2
 8018fee:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018ff0:	78fb      	ldrb	r3, [r7, #3]
 8018ff2:	3301      	adds	r3, #1
 8018ff4:	b2da      	uxtb	r2, r3
 8018ff6:	4b26      	ldr	r3, [pc, #152]	; (8019090 <RadioSend+0x1e4>)
 8018ff8:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018ffa:	4826      	ldr	r0, [pc, #152]	; (8019094 <RadioSend+0x1e8>)
 8018ffc:	f001 ff00 	bl	801ae00 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8019000:	2100      	movs	r1, #0
 8019002:	20f1      	movs	r0, #241	; 0xf1
 8019004:	f000 f95d 	bl	80192c2 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8019008:	2100      	movs	r1, #0
 801900a:	20f0      	movs	r0, #240	; 0xf0
 801900c:	f000 f959 	bl	80192c2 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8019010:	4b1f      	ldr	r3, [pc, #124]	; (8019090 <RadioSend+0x1e4>)
 8019012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019014:	2b64      	cmp	r3, #100	; 0x64
 8019016:	d108      	bne.n	801902a <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8019018:	2170      	movs	r1, #112	; 0x70
 801901a:	20f3      	movs	r0, #243	; 0xf3
 801901c:	f000 f951 	bl	80192c2 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8019020:	211d      	movs	r1, #29
 8019022:	20f2      	movs	r0, #242	; 0xf2
 8019024:	f000 f94d 	bl	80192c2 <RadioWrite>
 8019028:	e007      	b.n	801903a <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801902a:	21e1      	movs	r1, #225	; 0xe1
 801902c:	20f3      	movs	r0, #243	; 0xf3
 801902e:	f000 f948 	bl	80192c2 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8019032:	2104      	movs	r1, #4
 8019034:	20f2      	movs	r0, #242	; 0xf2
 8019036:	f000 f944 	bl	80192c2 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801903a:	78fb      	ldrb	r3, [r7, #3]
 801903c:	b29b      	uxth	r3, r3
 801903e:	00db      	lsls	r3, r3, #3
 8019040:	b29b      	uxth	r3, r3
 8019042:	3302      	adds	r3, #2
 8019044:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8019046:	89fb      	ldrh	r3, [r7, #14]
 8019048:	0a1b      	lsrs	r3, r3, #8
 801904a:	b29b      	uxth	r3, r3
 801904c:	b2db      	uxtb	r3, r3
 801904e:	4619      	mov	r1, r3
 8019050:	20f4      	movs	r0, #244	; 0xf4
 8019052:	f000 f936 	bl	80192c2 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8019056:	89fb      	ldrh	r3, [r7, #14]
 8019058:	b2db      	uxtb	r3, r3
 801905a:	4619      	mov	r1, r3
 801905c:	20f5      	movs	r0, #245	; 0xf5
 801905e:	f000 f930 	bl	80192c2 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8019062:	78fb      	ldrb	r3, [r7, #3]
 8019064:	3301      	adds	r3, #1
 8019066:	b2db      	uxtb	r3, r3
 8019068:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801906c:	4619      	mov	r1, r3
 801906e:	480b      	ldr	r0, [pc, #44]	; (801909c <RadioSend+0x1f0>)
 8019070:	f001 f980 	bl	801a374 <SUBGRF_SendPayload>
            break;
 8019074:	e000      	b.n	8019078 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8019076:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8019078:	4b05      	ldr	r3, [pc, #20]	; (8019090 <RadioSend+0x1e4>)
 801907a:	685b      	ldr	r3, [r3, #4]
 801907c:	4619      	mov	r1, r3
 801907e:	4808      	ldr	r0, [pc, #32]	; (80190a0 <RadioSend+0x1f4>)
 8019080:	f003 fa86 	bl	801c590 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019084:	4806      	ldr	r0, [pc, #24]	; (80190a0 <RadioSend+0x1f4>)
 8019086:	f003 f9a5 	bl	801c3d4 <UTIL_TIMER_Start>
}
 801908a:	3710      	adds	r7, #16
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}
 8019090:	20001a9c 	.word	0x20001a9c
 8019094:	20001aaa 	.word	0x20001aaa
 8019098:	0801d778 	.word	0x0801d778
 801909c:	20001998 	.word	0x20001998
 80190a0:	20001af8 	.word	0x20001af8

080190a4 <RadioSleep>:

static void RadioSleep( void )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b082      	sub	sp, #8
 80190a8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80190aa:	2300      	movs	r3, #0
 80190ac:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80190ae:	793b      	ldrb	r3, [r7, #4]
 80190b0:	f043 0304 	orr.w	r3, r3, #4
 80190b4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80190b6:	7938      	ldrb	r0, [r7, #4]
 80190b8:	f001 fa38 	bl	801a52c <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80190bc:	2002      	movs	r0, #2
 80190be:	f7e8 fe27 	bl	8001d10 <HAL_Delay>
}
 80190c2:	bf00      	nop
 80190c4:	3708      	adds	r7, #8
 80190c6:	46bd      	mov	sp, r7
 80190c8:	bd80      	pop	{r7, pc}

080190ca <RadioStandby>:

static void RadioStandby( void )
{
 80190ca:	b580      	push	{r7, lr}
 80190cc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80190ce:	2000      	movs	r0, #0
 80190d0:	f001 fa5e 	bl	801a590 <SUBGRF_SetStandby>
}
 80190d4:	bf00      	nop
 80190d6:	bd80      	pop	{r7, pc}

080190d8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 80190e0:	f002 fab3 	bl	801b64a <RFW_Is_Init>
 80190e4:	4603      	mov	r3, r0
 80190e6:	2b01      	cmp	r3, #1
 80190e8:	d102      	bne.n	80190f0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80190ea:	f002 fad6 	bl	801b69a <RFW_ReceiveInit>
 80190ee:	e007      	b.n	8019100 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80190f0:	2300      	movs	r3, #0
 80190f2:	2200      	movs	r2, #0
 80190f4:	f240 2162 	movw	r1, #610	; 0x262
 80190f8:	f240 2062 	movw	r0, #610	; 0x262
 80190fc:	f001 fc18 	bl	801a930 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d006      	beq.n	8019114 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019106:	6879      	ldr	r1, [r7, #4]
 8019108:	4811      	ldr	r0, [pc, #68]	; (8019150 <RadioRx+0x78>)
 801910a:	f003 fa41 	bl	801c590 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801910e:	4810      	ldr	r0, [pc, #64]	; (8019150 <RadioRx+0x78>)
 8019110:	f003 f960 	bl	801c3d4 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019114:	4b0f      	ldr	r3, [pc, #60]	; (8019154 <RadioRx+0x7c>)
 8019116:	2200      	movs	r2, #0
 8019118:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801911a:	4b0e      	ldr	r3, [pc, #56]	; (8019154 <RadioRx+0x7c>)
 801911c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019120:	2100      	movs	r1, #0
 8019122:	4618      	mov	r0, r3
 8019124:	f002 f8a8 	bl	801b278 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8019128:	4b0a      	ldr	r3, [pc, #40]	; (8019154 <RadioRx+0x7c>)
 801912a:	785b      	ldrb	r3, [r3, #1]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d004      	beq.n	801913a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019130:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019134:	f001 fa68 	bl	801a608 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8019138:	e005      	b.n	8019146 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801913a:	4b06      	ldr	r3, [pc, #24]	; (8019154 <RadioRx+0x7c>)
 801913c:	689b      	ldr	r3, [r3, #8]
 801913e:	019b      	lsls	r3, r3, #6
 8019140:	4618      	mov	r0, r3
 8019142:	f001 fa61 	bl	801a608 <SUBGRF_SetRx>
}
 8019146:	bf00      	nop
 8019148:	3708      	adds	r7, #8
 801914a:	46bd      	mov	sp, r7
 801914c:	bd80      	pop	{r7, pc}
 801914e:	bf00      	nop
 8019150:	20001b10 	.word	0x20001b10
 8019154:	20001a9c 	.word	0x20001a9c

08019158 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b082      	sub	sp, #8
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8019160:	f002 fa73 	bl	801b64a <RFW_Is_Init>
 8019164:	4603      	mov	r3, r0
 8019166:	2b01      	cmp	r3, #1
 8019168:	d102      	bne.n	8019170 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801916a:	f002 fa96 	bl	801b69a <RFW_ReceiveInit>
 801916e:	e007      	b.n	8019180 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8019170:	2300      	movs	r3, #0
 8019172:	2200      	movs	r2, #0
 8019174:	f240 2162 	movw	r1, #610	; 0x262
 8019178:	f240 2062 	movw	r0, #610	; 0x262
 801917c:	f001 fbd8 	bl	801a930 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d006      	beq.n	8019194 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8019186:	6879      	ldr	r1, [r7, #4]
 8019188:	4811      	ldr	r0, [pc, #68]	; (80191d0 <RadioRxBoosted+0x78>)
 801918a:	f003 fa01 	bl	801c590 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801918e:	4810      	ldr	r0, [pc, #64]	; (80191d0 <RadioRxBoosted+0x78>)
 8019190:	f003 f920 	bl	801c3d4 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019194:	4b0f      	ldr	r3, [pc, #60]	; (80191d4 <RadioRxBoosted+0x7c>)
 8019196:	2200      	movs	r2, #0
 8019198:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801919a:	4b0e      	ldr	r3, [pc, #56]	; (80191d4 <RadioRxBoosted+0x7c>)
 801919c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80191a0:	2100      	movs	r1, #0
 80191a2:	4618      	mov	r0, r3
 80191a4:	f002 f868 	bl	801b278 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80191a8:	4b0a      	ldr	r3, [pc, #40]	; (80191d4 <RadioRxBoosted+0x7c>)
 80191aa:	785b      	ldrb	r3, [r3, #1]
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	d004      	beq.n	80191ba <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80191b0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80191b4:	f001 fa48 	bl	801a648 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80191b8:	e005      	b.n	80191c6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80191ba:	4b06      	ldr	r3, [pc, #24]	; (80191d4 <RadioRxBoosted+0x7c>)
 80191bc:	689b      	ldr	r3, [r3, #8]
 80191be:	019b      	lsls	r3, r3, #6
 80191c0:	4618      	mov	r0, r3
 80191c2:	f001 fa41 	bl	801a648 <SUBGRF_SetRxBoosted>
}
 80191c6:	bf00      	nop
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	20001b10 	.word	0x20001b10
 80191d4:	20001a9c 	.word	0x20001a9c

080191d8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b082      	sub	sp, #8
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	005a      	lsls	r2, r3, #1
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	4413      	add	r3, r2
 80191ea:	4a0c      	ldr	r2, [pc, #48]	; (801921c <RadioSetRxDutyCycle+0x44>)
 80191ec:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80191ee:	2300      	movs	r3, #0
 80191f0:	2200      	movs	r2, #0
 80191f2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80191f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80191fa:	f001 fb99 	bl	801a930 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80191fe:	4b07      	ldr	r3, [pc, #28]	; (801921c <RadioSetRxDutyCycle+0x44>)
 8019200:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019204:	2100      	movs	r1, #0
 8019206:	4618      	mov	r0, r3
 8019208:	f002 f836 	bl	801b278 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801920c:	6839      	ldr	r1, [r7, #0]
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f001 fa3e 	bl	801a690 <SUBGRF_SetRxDutyCycle>
}
 8019214:	bf00      	nop
 8019216:	3708      	adds	r7, #8
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}
 801921c:	20001a9c 	.word	0x20001a9c

08019220 <RadioStartCad>:

static void RadioStartCad( void )
{
 8019220:	b580      	push	{r7, lr}
 8019222:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8019224:	4b09      	ldr	r3, [pc, #36]	; (801924c <RadioStartCad+0x2c>)
 8019226:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801922a:	2100      	movs	r1, #0
 801922c:	4618      	mov	r0, r3
 801922e:	f002 f823 	bl	801b278 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8019232:	2300      	movs	r3, #0
 8019234:	2200      	movs	r2, #0
 8019236:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801923a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801923e:	f001 fb77 	bl	801a930 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8019242:	f001 fa51 	bl	801a6e8 <SUBGRF_SetCad>
}
 8019246:	bf00      	nop
 8019248:	bd80      	pop	{r7, pc}
 801924a:	bf00      	nop
 801924c:	20001a9c 	.word	0x20001a9c

08019250 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	460b      	mov	r3, r1
 801925a:	70fb      	strb	r3, [r7, #3]
 801925c:	4613      	mov	r3, r2
 801925e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8019260:	883b      	ldrh	r3, [r7, #0]
 8019262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019266:	fb02 f303 	mul.w	r3, r2, r3
 801926a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801926c:	6878      	ldr	r0, [r7, #4]
 801926e:	f001 fbbb 	bl	801a9e8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8019272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019276:	4618      	mov	r0, r3
 8019278:	f002 f826 	bl	801b2c8 <SUBGRF_SetRfTxPower>
 801927c:	4603      	mov	r3, r0
 801927e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8019280:	7afb      	ldrb	r3, [r7, #11]
 8019282:	2101      	movs	r1, #1
 8019284:	4618      	mov	r0, r3
 8019286:	f001 fff7 	bl	801b278 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801928a:	f001 fa3b 	bl	801a704 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801928e:	68f9      	ldr	r1, [r7, #12]
 8019290:	4804      	ldr	r0, [pc, #16]	; (80192a4 <RadioSetTxContinuousWave+0x54>)
 8019292:	f003 f97d 	bl	801c590 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8019296:	4803      	ldr	r0, [pc, #12]	; (80192a4 <RadioSetTxContinuousWave+0x54>)
 8019298:	f003 f89c 	bl	801c3d4 <UTIL_TIMER_Start>
}
 801929c:	bf00      	nop
 801929e:	3710      	adds	r7, #16
 80192a0:	46bd      	mov	sp, r7
 80192a2:	bd80      	pop	{r7, pc}
 80192a4:	20001af8 	.word	0x20001af8

080192a8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b082      	sub	sp, #8
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	4603      	mov	r3, r0
 80192b0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80192b2:	f001 fe5a 	bl	801af6a <SUBGRF_GetRssiInst>
 80192b6:	4603      	mov	r3, r0
 80192b8:	b21b      	sxth	r3, r3
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	3708      	adds	r7, #8
 80192be:	46bd      	mov	sp, r7
 80192c0:	bd80      	pop	{r7, pc}

080192c2 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80192c2:	b580      	push	{r7, lr}
 80192c4:	b082      	sub	sp, #8
 80192c6:	af00      	add	r7, sp, #0
 80192c8:	4603      	mov	r3, r0
 80192ca:	460a      	mov	r2, r1
 80192cc:	80fb      	strh	r3, [r7, #6]
 80192ce:	4613      	mov	r3, r2
 80192d0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80192d2:	797a      	ldrb	r2, [r7, #5]
 80192d4:	88fb      	ldrh	r3, [r7, #6]
 80192d6:	4611      	mov	r1, r2
 80192d8:	4618      	mov	r0, r3
 80192da:	f001 fed9 	bl	801b090 <SUBGRF_WriteRegister>
}
 80192de:	bf00      	nop
 80192e0:	3708      	adds	r7, #8
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}

080192e6 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 80192e6:	b580      	push	{r7, lr}
 80192e8:	b082      	sub	sp, #8
 80192ea:	af00      	add	r7, sp, #0
 80192ec:	4603      	mov	r3, r0
 80192ee:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 80192f0:	88fb      	ldrh	r3, [r7, #6]
 80192f2:	4618      	mov	r0, r3
 80192f4:	f001 fee0 	bl	801b0b8 <SUBGRF_ReadRegister>
 80192f8:	4603      	mov	r3, r0
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3708      	adds	r7, #8
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}

08019302 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019302:	b580      	push	{r7, lr}
 8019304:	b082      	sub	sp, #8
 8019306:	af00      	add	r7, sp, #0
 8019308:	4603      	mov	r3, r0
 801930a:	6039      	str	r1, [r7, #0]
 801930c:	80fb      	strh	r3, [r7, #6]
 801930e:	4613      	mov	r3, r2
 8019310:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8019312:	797b      	ldrb	r3, [r7, #5]
 8019314:	b29a      	uxth	r2, r3
 8019316:	88fb      	ldrh	r3, [r7, #6]
 8019318:	6839      	ldr	r1, [r7, #0]
 801931a:	4618      	mov	r0, r3
 801931c:	f001 fee0 	bl	801b0e0 <SUBGRF_WriteRegisters>
}
 8019320:	bf00      	nop
 8019322:	3708      	adds	r7, #8
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}

08019328 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b082      	sub	sp, #8
 801932c:	af00      	add	r7, sp, #0
 801932e:	4603      	mov	r3, r0
 8019330:	6039      	str	r1, [r7, #0]
 8019332:	80fb      	strh	r3, [r7, #6]
 8019334:	4613      	mov	r3, r2
 8019336:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8019338:	797b      	ldrb	r3, [r7, #5]
 801933a:	b29a      	uxth	r2, r3
 801933c:	88fb      	ldrh	r3, [r7, #6]
 801933e:	6839      	ldr	r1, [r7, #0]
 8019340:	4618      	mov	r0, r3
 8019342:	f001 feef 	bl	801b124 <SUBGRF_ReadRegisters>
}
 8019346:	bf00      	nop
 8019348:	3708      	adds	r7, #8
 801934a:	46bd      	mov	sp, r7
 801934c:	bd80      	pop	{r7, pc}
	...

08019350 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8019350:	b580      	push	{r7, lr}
 8019352:	b082      	sub	sp, #8
 8019354:	af00      	add	r7, sp, #0
 8019356:	4603      	mov	r3, r0
 8019358:	460a      	mov	r2, r1
 801935a:	71fb      	strb	r3, [r7, #7]
 801935c:	4613      	mov	r3, r2
 801935e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8019360:	79fb      	ldrb	r3, [r7, #7]
 8019362:	2b01      	cmp	r3, #1
 8019364:	d10a      	bne.n	801937c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8019366:	4a0e      	ldr	r2, [pc, #56]	; (80193a0 <RadioSetMaxPayloadLength+0x50>)
 8019368:	79bb      	ldrb	r3, [r7, #6]
 801936a:	7013      	strb	r3, [r2, #0]
 801936c:	4b0c      	ldr	r3, [pc, #48]	; (80193a0 <RadioSetMaxPayloadLength+0x50>)
 801936e:	781a      	ldrb	r2, [r3, #0]
 8019370:	4b0c      	ldr	r3, [pc, #48]	; (80193a4 <RadioSetMaxPayloadLength+0x54>)
 8019372:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019374:	480c      	ldr	r0, [pc, #48]	; (80193a8 <RadioSetMaxPayloadLength+0x58>)
 8019376:	f001 fd43 	bl	801ae00 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801937a:	e00d      	b.n	8019398 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801937c:	4b09      	ldr	r3, [pc, #36]	; (80193a4 <RadioSetMaxPayloadLength+0x54>)
 801937e:	7d5b      	ldrb	r3, [r3, #21]
 8019380:	2b01      	cmp	r3, #1
 8019382:	d109      	bne.n	8019398 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8019384:	4a06      	ldr	r2, [pc, #24]	; (80193a0 <RadioSetMaxPayloadLength+0x50>)
 8019386:	79bb      	ldrb	r3, [r7, #6]
 8019388:	7013      	strb	r3, [r2, #0]
 801938a:	4b05      	ldr	r3, [pc, #20]	; (80193a0 <RadioSetMaxPayloadLength+0x50>)
 801938c:	781a      	ldrb	r2, [r3, #0]
 801938e:	4b05      	ldr	r3, [pc, #20]	; (80193a4 <RadioSetMaxPayloadLength+0x54>)
 8019390:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019392:	4805      	ldr	r0, [pc, #20]	; (80193a8 <RadioSetMaxPayloadLength+0x58>)
 8019394:	f001 fd34 	bl	801ae00 <SUBGRF_SetPacketParams>
}
 8019398:	bf00      	nop
 801939a:	3708      	adds	r7, #8
 801939c:	46bd      	mov	sp, r7
 801939e:	bd80      	pop	{r7, pc}
 80193a0:	20000144 	.word	0x20000144
 80193a4:	20001a9c 	.word	0x20001a9c
 80193a8:	20001aaa 	.word	0x20001aaa

080193ac <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b082      	sub	sp, #8
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	4603      	mov	r3, r0
 80193b4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80193b6:	4a13      	ldr	r2, [pc, #76]	; (8019404 <RadioSetPublicNetwork+0x58>)
 80193b8:	79fb      	ldrb	r3, [r7, #7]
 80193ba:	7313      	strb	r3, [r2, #12]
 80193bc:	4b11      	ldr	r3, [pc, #68]	; (8019404 <RadioSetPublicNetwork+0x58>)
 80193be:	7b1a      	ldrb	r2, [r3, #12]
 80193c0:	4b10      	ldr	r3, [pc, #64]	; (8019404 <RadioSetPublicNetwork+0x58>)
 80193c2:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80193c4:	2001      	movs	r0, #1
 80193c6:	f7ff f82d 	bl	8018424 <RadioSetModem>
    if( enable == true )
 80193ca:	79fb      	ldrb	r3, [r7, #7]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d00a      	beq.n	80193e6 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80193d0:	2134      	movs	r1, #52	; 0x34
 80193d2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80193d6:	f001 fe5b 	bl	801b090 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80193da:	2144      	movs	r1, #68	; 0x44
 80193dc:	f240 7041 	movw	r0, #1857	; 0x741
 80193e0:	f001 fe56 	bl	801b090 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 80193e4:	e009      	b.n	80193fa <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80193e6:	2114      	movs	r1, #20
 80193e8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80193ec:	f001 fe50 	bl	801b090 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80193f0:	2124      	movs	r1, #36	; 0x24
 80193f2:	f240 7041 	movw	r0, #1857	; 0x741
 80193f6:	f001 fe4b 	bl	801b090 <SUBGRF_WriteRegister>
}
 80193fa:	bf00      	nop
 80193fc:	3708      	adds	r7, #8
 80193fe:	46bd      	mov	sp, r7
 8019400:	bd80      	pop	{r7, pc}
 8019402:	bf00      	nop
 8019404:	20001a9c 	.word	0x20001a9c

08019408 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8019408:	b580      	push	{r7, lr}
 801940a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801940c:	f001 ff90 	bl	801b330 <SUBGRF_GetRadioWakeUpTime>
 8019410:	4603      	mov	r3, r0
 8019412:	3303      	adds	r3, #3
}
 8019414:	4618      	mov	r0, r3
 8019416:	bd80      	pop	{r7, pc}

08019418 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8019418:	b580      	push	{r7, lr}
 801941a:	b082      	sub	sp, #8
 801941c:	af00      	add	r7, sp, #0
 801941e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8019420:	f000 f80e 	bl	8019440 <RadioOnTxTimeoutProcess>
}
 8019424:	bf00      	nop
 8019426:	3708      	adds	r7, #8
 8019428:	46bd      	mov	sp, r7
 801942a:	bd80      	pop	{r7, pc}

0801942c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b082      	sub	sp, #8
 8019430:	af00      	add	r7, sp, #0
 8019432:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8019434:	f000 f818 	bl	8019468 <RadioOnRxTimeoutProcess>
}
 8019438:	bf00      	nop
 801943a:	3708      	adds	r7, #8
 801943c:	46bd      	mov	sp, r7
 801943e:	bd80      	pop	{r7, pc}

08019440 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8019440:	b580      	push	{r7, lr}
 8019442:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8019444:	4b07      	ldr	r3, [pc, #28]	; (8019464 <RadioOnTxTimeoutProcess+0x24>)
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d008      	beq.n	801945e <RadioOnTxTimeoutProcess+0x1e>
 801944c:	4b05      	ldr	r3, [pc, #20]	; (8019464 <RadioOnTxTimeoutProcess+0x24>)
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	685b      	ldr	r3, [r3, #4]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d003      	beq.n	801945e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8019456:	4b03      	ldr	r3, [pc, #12]	; (8019464 <RadioOnTxTimeoutProcess+0x24>)
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	685b      	ldr	r3, [r3, #4]
 801945c:	4798      	blx	r3
    }
}
 801945e:	bf00      	nop
 8019460:	bd80      	pop	{r7, pc}
 8019462:	bf00      	nop
 8019464:	20001a98 	.word	0x20001a98

08019468 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8019468:	b580      	push	{r7, lr}
 801946a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801946c:	4b07      	ldr	r3, [pc, #28]	; (801948c <RadioOnRxTimeoutProcess+0x24>)
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d008      	beq.n	8019486 <RadioOnRxTimeoutProcess+0x1e>
 8019474:	4b05      	ldr	r3, [pc, #20]	; (801948c <RadioOnRxTimeoutProcess+0x24>)
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	68db      	ldr	r3, [r3, #12]
 801947a:	2b00      	cmp	r3, #0
 801947c:	d003      	beq.n	8019486 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801947e:	4b03      	ldr	r3, [pc, #12]	; (801948c <RadioOnRxTimeoutProcess+0x24>)
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	4798      	blx	r3
    }
}
 8019486:	bf00      	nop
 8019488:	bd80      	pop	{r7, pc}
 801948a:	bf00      	nop
 801948c:	20001a98 	.word	0x20001a98

08019490 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b082      	sub	sp, #8
 8019494:	af00      	add	r7, sp, #0
 8019496:	4603      	mov	r3, r0
 8019498:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801949a:	4a05      	ldr	r2, [pc, #20]	; (80194b0 <RadioOnDioIrq+0x20>)
 801949c:	88fb      	ldrh	r3, [r7, #6]
 801949e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 80194a2:	f000 f807 	bl	80194b4 <RadioIrqProcess>
}
 80194a6:	bf00      	nop
 80194a8:	3708      	adds	r7, #8
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	20001a9c 	.word	0x20001a9c

080194b4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 80194b4:	b590      	push	{r4, r7, lr}
 80194b6:	b083      	sub	sp, #12
 80194b8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 80194ba:	2300      	movs	r3, #0
 80194bc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 80194be:	2300      	movs	r3, #0
 80194c0:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 80194c2:	4ba8      	ldr	r3, [pc, #672]	; (8019764 <RadioIrqProcess+0x2b0>)
 80194c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80194c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80194cc:	f000 810c 	beq.w	80196e8 <RadioIrqProcess+0x234>
 80194d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80194d4:	f300 81e8 	bgt.w	80198a8 <RadioIrqProcess+0x3f4>
 80194d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194dc:	f000 80f0 	beq.w	80196c0 <RadioIrqProcess+0x20c>
 80194e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80194e4:	f300 81e0 	bgt.w	80198a8 <RadioIrqProcess+0x3f4>
 80194e8:	2b80      	cmp	r3, #128	; 0x80
 80194ea:	f000 80d5 	beq.w	8019698 <RadioIrqProcess+0x1e4>
 80194ee:	2b80      	cmp	r3, #128	; 0x80
 80194f0:	f300 81da 	bgt.w	80198a8 <RadioIrqProcess+0x3f4>
 80194f4:	2b20      	cmp	r3, #32
 80194f6:	dc49      	bgt.n	801958c <RadioIrqProcess+0xd8>
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	f340 81d5 	ble.w	80198a8 <RadioIrqProcess+0x3f4>
 80194fe:	3b01      	subs	r3, #1
 8019500:	2b1f      	cmp	r3, #31
 8019502:	f200 81d1 	bhi.w	80198a8 <RadioIrqProcess+0x3f4>
 8019506:	a201      	add	r2, pc, #4	; (adr r2, 801950c <RadioIrqProcess+0x58>)
 8019508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801950c:	08019595 	.word	0x08019595
 8019510:	080195cf 	.word	0x080195cf
 8019514:	080198a9 	.word	0x080198a9
 8019518:	08019785 	.word	0x08019785
 801951c:	080198a9 	.word	0x080198a9
 8019520:	080198a9 	.word	0x080198a9
 8019524:	080198a9 	.word	0x080198a9
 8019528:	08019801 	.word	0x08019801
 801952c:	080198a9 	.word	0x080198a9
 8019530:	080198a9 	.word	0x080198a9
 8019534:	080198a9 	.word	0x080198a9
 8019538:	080198a9 	.word	0x080198a9
 801953c:	080198a9 	.word	0x080198a9
 8019540:	080198a9 	.word	0x080198a9
 8019544:	080198a9 	.word	0x080198a9
 8019548:	0801981d 	.word	0x0801981d
 801954c:	080198a9 	.word	0x080198a9
 8019550:	080198a9 	.word	0x080198a9
 8019554:	080198a9 	.word	0x080198a9
 8019558:	080198a9 	.word	0x080198a9
 801955c:	080198a9 	.word	0x080198a9
 8019560:	080198a9 	.word	0x080198a9
 8019564:	080198a9 	.word	0x080198a9
 8019568:	080198a9 	.word	0x080198a9
 801956c:	080198a9 	.word	0x080198a9
 8019570:	080198a9 	.word	0x080198a9
 8019574:	080198a9 	.word	0x080198a9
 8019578:	080198a9 	.word	0x080198a9
 801957c:	080198a9 	.word	0x080198a9
 8019580:	080198a9 	.word	0x080198a9
 8019584:	080198a9 	.word	0x080198a9
 8019588:	0801982b 	.word	0x0801982b
 801958c:	2b40      	cmp	r3, #64	; 0x40
 801958e:	f000 816d 	beq.w	801986c <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8019592:	e189      	b.n	80198a8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8019594:	4874      	ldr	r0, [pc, #464]	; (8019768 <RadioIrqProcess+0x2b4>)
 8019596:	f002 ff8b 	bl	801c4b0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801959a:	2000      	movs	r0, #0
 801959c:	f000 fff8 	bl	801a590 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80195a0:	f002 f85a 	bl	801b658 <RFW_Is_LongPacketModeEnabled>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b01      	cmp	r3, #1
 80195a8:	d101      	bne.n	80195ae <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80195aa:	f002 f87e 	bl	801b6aa <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80195ae:	4b6f      	ldr	r3, [pc, #444]	; (801976c <RadioIrqProcess+0x2b8>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	f000 817a 	beq.w	80198ac <RadioIrqProcess+0x3f8>
 80195b8:	4b6c      	ldr	r3, [pc, #432]	; (801976c <RadioIrqProcess+0x2b8>)
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	f000 8174 	beq.w	80198ac <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 80195c4:	4b69      	ldr	r3, [pc, #420]	; (801976c <RadioIrqProcess+0x2b8>)
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	681b      	ldr	r3, [r3, #0]
 80195ca:	4798      	blx	r3
        break;
 80195cc:	e16e      	b.n	80198ac <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 80195ce:	4868      	ldr	r0, [pc, #416]	; (8019770 <RadioIrqProcess+0x2bc>)
 80195d0:	f002 ff6e 	bl	801c4b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80195d4:	4b63      	ldr	r3, [pc, #396]	; (8019764 <RadioIrqProcess+0x2b0>)
 80195d6:	785b      	ldrb	r3, [r3, #1]
 80195d8:	f083 0301 	eor.w	r3, r3, #1
 80195dc:	b2db      	uxtb	r3, r3
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d014      	beq.n	801960c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 80195e2:	2000      	movs	r0, #0
 80195e4:	f000 ffd4 	bl	801a590 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80195e8:	2100      	movs	r1, #0
 80195ea:	f640 1002 	movw	r0, #2306	; 0x902
 80195ee:	f001 fd4f 	bl	801b090 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80195f2:	f640 1044 	movw	r0, #2372	; 0x944
 80195f6:	f001 fd5f 	bl	801b0b8 <SUBGRF_ReadRegister>
 80195fa:	4603      	mov	r3, r0
 80195fc:	f043 0302 	orr.w	r3, r3, #2
 8019600:	b2db      	uxtb	r3, r3
 8019602:	4619      	mov	r1, r3
 8019604:	f640 1044 	movw	r0, #2372	; 0x944
 8019608:	f001 fd42 	bl	801b090 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801960c:	1dfb      	adds	r3, r7, #7
 801960e:	22ff      	movs	r2, #255	; 0xff
 8019610:	4619      	mov	r1, r3
 8019612:	4858      	ldr	r0, [pc, #352]	; (8019774 <RadioIrqProcess+0x2c0>)
 8019614:	f000 fe8c 	bl	801a330 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8019618:	4857      	ldr	r0, [pc, #348]	; (8019778 <RadioIrqProcess+0x2c4>)
 801961a:	f001 fce7 	bl	801afec <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801961e:	4b53      	ldr	r3, [pc, #332]	; (801976c <RadioIrqProcess+0x2b8>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	2b00      	cmp	r3, #0
 8019624:	d036      	beq.n	8019694 <RadioIrqProcess+0x1e0>
 8019626:	4b51      	ldr	r3, [pc, #324]	; (801976c <RadioIrqProcess+0x2b8>)
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	689b      	ldr	r3, [r3, #8]
 801962c:	2b00      	cmp	r3, #0
 801962e:	d031      	beq.n	8019694 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8019630:	4b4c      	ldr	r3, [pc, #304]	; (8019764 <RadioIrqProcess+0x2b0>)
 8019632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019636:	2b01      	cmp	r3, #1
 8019638:	d10e      	bne.n	8019658 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 801963a:	4b4c      	ldr	r3, [pc, #304]	; (801976c <RadioIrqProcess+0x2b8>)
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	689c      	ldr	r4, [r3, #8]
 8019640:	79fb      	ldrb	r3, [r7, #7]
 8019642:	b299      	uxth	r1, r3
 8019644:	4b47      	ldr	r3, [pc, #284]	; (8019764 <RadioIrqProcess+0x2b0>)
 8019646:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801964a:	b21a      	sxth	r2, r3
 801964c:	4b45      	ldr	r3, [pc, #276]	; (8019764 <RadioIrqProcess+0x2b0>)
 801964e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8019652:	4848      	ldr	r0, [pc, #288]	; (8019774 <RadioIrqProcess+0x2c0>)
 8019654:	47a0      	blx	r4
                break;
 8019656:	e01e      	b.n	8019696 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019658:	4b42      	ldr	r3, [pc, #264]	; (8019764 <RadioIrqProcess+0x2b0>)
 801965a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801965c:	463a      	mov	r2, r7
 801965e:	4611      	mov	r1, r2
 8019660:	4618      	mov	r0, r3
 8019662:	f001 ff47 	bl	801b4f4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8019666:	4b41      	ldr	r3, [pc, #260]	; (801976c <RadioIrqProcess+0x2b8>)
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	689c      	ldr	r4, [r3, #8]
 801966c:	79fb      	ldrb	r3, [r7, #7]
 801966e:	b299      	uxth	r1, r3
 8019670:	4b3c      	ldr	r3, [pc, #240]	; (8019764 <RadioIrqProcess+0x2b0>)
 8019672:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019676:	b218      	sxth	r0, r3
 8019678:	683b      	ldr	r3, [r7, #0]
 801967a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801967e:	4a3f      	ldr	r2, [pc, #252]	; (801977c <RadioIrqProcess+0x2c8>)
 8019680:	fb82 c203 	smull	ip, r2, r2, r3
 8019684:	1192      	asrs	r2, r2, #6
 8019686:	17db      	asrs	r3, r3, #31
 8019688:	1ad3      	subs	r3, r2, r3
 801968a:	b25b      	sxtb	r3, r3
 801968c:	4602      	mov	r2, r0
 801968e:	4839      	ldr	r0, [pc, #228]	; (8019774 <RadioIrqProcess+0x2c0>)
 8019690:	47a0      	blx	r4
                break;
 8019692:	e000      	b.n	8019696 <RadioIrqProcess+0x1e2>
        }
 8019694:	bf00      	nop
        break;
 8019696:	e118      	b.n	80198ca <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8019698:	2000      	movs	r0, #0
 801969a:	f000 ff79 	bl	801a590 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801969e:	4b33      	ldr	r3, [pc, #204]	; (801976c <RadioIrqProcess+0x2b8>)
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	f000 8104 	beq.w	80198b0 <RadioIrqProcess+0x3fc>
 80196a8:	4b30      	ldr	r3, [pc, #192]	; (801976c <RadioIrqProcess+0x2b8>)
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	699b      	ldr	r3, [r3, #24]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	f000 80fe 	beq.w	80198b0 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 80196b4:	4b2d      	ldr	r3, [pc, #180]	; (801976c <RadioIrqProcess+0x2b8>)
 80196b6:	681b      	ldr	r3, [r3, #0]
 80196b8:	699b      	ldr	r3, [r3, #24]
 80196ba:	2000      	movs	r0, #0
 80196bc:	4798      	blx	r3
        break;
 80196be:	e0f7      	b.n	80198b0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 80196c0:	2000      	movs	r0, #0
 80196c2:	f000 ff65 	bl	801a590 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80196c6:	4b29      	ldr	r3, [pc, #164]	; (801976c <RadioIrqProcess+0x2b8>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	f000 80f2 	beq.w	80198b4 <RadioIrqProcess+0x400>
 80196d0:	4b26      	ldr	r3, [pc, #152]	; (801976c <RadioIrqProcess+0x2b8>)
 80196d2:	681b      	ldr	r3, [r3, #0]
 80196d4:	699b      	ldr	r3, [r3, #24]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	f000 80ec 	beq.w	80198b4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 80196dc:	4b23      	ldr	r3, [pc, #140]	; (801976c <RadioIrqProcess+0x2b8>)
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	699b      	ldr	r3, [r3, #24]
 80196e2:	2001      	movs	r0, #1
 80196e4:	4798      	blx	r3
        break;
 80196e6:	e0e5      	b.n	80198b4 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80196e8:	4b25      	ldr	r3, [pc, #148]	; (8019780 <RadioIrqProcess+0x2cc>)
 80196ea:	2201      	movs	r2, #1
 80196ec:	2100      	movs	r1, #0
 80196ee:	2002      	movs	r0, #2
 80196f0:	f003 f8e8 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80196f4:	f000 fe02 	bl	801a2fc <SUBGRF_GetOperatingMode>
 80196f8:	4603      	mov	r3, r0
 80196fa:	2b04      	cmp	r3, #4
 80196fc:	d115      	bne.n	801972a <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 80196fe:	481a      	ldr	r0, [pc, #104]	; (8019768 <RadioIrqProcess+0x2b4>)
 8019700:	f002 fed6 	bl	801c4b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8019704:	2000      	movs	r0, #0
 8019706:	f000 ff43 	bl	801a590 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801970a:	4b18      	ldr	r3, [pc, #96]	; (801976c <RadioIrqProcess+0x2b8>)
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	2b00      	cmp	r3, #0
 8019710:	f000 80d2 	beq.w	80198b8 <RadioIrqProcess+0x404>
 8019714:	4b15      	ldr	r3, [pc, #84]	; (801976c <RadioIrqProcess+0x2b8>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	685b      	ldr	r3, [r3, #4]
 801971a:	2b00      	cmp	r3, #0
 801971c:	f000 80cc 	beq.w	80198b8 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 8019720:	4b12      	ldr	r3, [pc, #72]	; (801976c <RadioIrqProcess+0x2b8>)
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	685b      	ldr	r3, [r3, #4]
 8019726:	4798      	blx	r3
        break;
 8019728:	e0c6      	b.n	80198b8 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801972a:	f000 fde7 	bl	801a2fc <SUBGRF_GetOperatingMode>
 801972e:	4603      	mov	r3, r0
 8019730:	2b05      	cmp	r3, #5
 8019732:	f040 80c1 	bne.w	80198b8 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 8019736:	480e      	ldr	r0, [pc, #56]	; (8019770 <RadioIrqProcess+0x2bc>)
 8019738:	f002 feba 	bl	801c4b0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801973c:	2000      	movs	r0, #0
 801973e:	f000 ff27 	bl	801a590 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019742:	4b0a      	ldr	r3, [pc, #40]	; (801976c <RadioIrqProcess+0x2b8>)
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	2b00      	cmp	r3, #0
 8019748:	f000 80b6 	beq.w	80198b8 <RadioIrqProcess+0x404>
 801974c:	4b07      	ldr	r3, [pc, #28]	; (801976c <RadioIrqProcess+0x2b8>)
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	68db      	ldr	r3, [r3, #12]
 8019752:	2b00      	cmp	r3, #0
 8019754:	f000 80b0 	beq.w	80198b8 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8019758:	4b04      	ldr	r3, [pc, #16]	; (801976c <RadioIrqProcess+0x2b8>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	68db      	ldr	r3, [r3, #12]
 801975e:	4798      	blx	r3
        break;
 8019760:	e0aa      	b.n	80198b8 <RadioIrqProcess+0x404>
 8019762:	bf00      	nop
 8019764:	20001a9c 	.word	0x20001a9c
 8019768:	20001af8 	.word	0x20001af8
 801976c:	20001a98 	.word	0x20001a98
 8019770:	20001b10 	.word	0x20001b10
 8019774:	20001998 	.word	0x20001998
 8019778:	20001ac0 	.word	0x20001ac0
 801977c:	10624dd3 	.word	0x10624dd3
 8019780:	0801d790 	.word	0x0801d790
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019784:	4b53      	ldr	r3, [pc, #332]	; (80198d4 <RadioIrqProcess+0x420>)
 8019786:	2201      	movs	r2, #1
 8019788:	2100      	movs	r1, #0
 801978a:	2002      	movs	r0, #2
 801978c:	f003 f89a 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019790:	4b51      	ldr	r3, [pc, #324]	; (80198d8 <RadioIrqProcess+0x424>)
 8019792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019794:	2b00      	cmp	r3, #0
 8019796:	f000 8091 	beq.w	80198bc <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801979a:	4a50      	ldr	r2, [pc, #320]	; (80198dc <RadioIrqProcess+0x428>)
 801979c:	4b4e      	ldr	r3, [pc, #312]	; (80198d8 <RadioIrqProcess+0x424>)
 801979e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197a0:	0c1b      	lsrs	r3, r3, #16
 80197a2:	b2db      	uxtb	r3, r3
 80197a4:	4619      	mov	r1, r3
 80197a6:	f640 1003 	movw	r0, #2307	; 0x903
 80197aa:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 80197ac:	4a4b      	ldr	r2, [pc, #300]	; (80198dc <RadioIrqProcess+0x428>)
 80197ae:	4b4a      	ldr	r3, [pc, #296]	; (80198d8 <RadioIrqProcess+0x424>)
 80197b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197b2:	0a1b      	lsrs	r3, r3, #8
 80197b4:	b2db      	uxtb	r3, r3
 80197b6:	4619      	mov	r1, r3
 80197b8:	f640 1004 	movw	r0, #2308	; 0x904
 80197bc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 80197be:	4a47      	ldr	r2, [pc, #284]	; (80198dc <RadioIrqProcess+0x428>)
 80197c0:	4b45      	ldr	r3, [pc, #276]	; (80198d8 <RadioIrqProcess+0x424>)
 80197c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	4619      	mov	r1, r3
 80197c8:	f640 1005 	movw	r0, #2309	; 0x905
 80197cc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 80197ce:	4c43      	ldr	r4, [pc, #268]	; (80198dc <RadioIrqProcess+0x428>)
 80197d0:	4b43      	ldr	r3, [pc, #268]	; (80198e0 <RadioIrqProcess+0x42c>)
 80197d2:	f640 1002 	movw	r0, #2306	; 0x902
 80197d6:	4798      	blx	r3
 80197d8:	4603      	mov	r3, r0
 80197da:	f043 0301 	orr.w	r3, r3, #1
 80197de:	b2db      	uxtb	r3, r3
 80197e0:	4619      	mov	r1, r3
 80197e2:	f640 1002 	movw	r0, #2306	; 0x902
 80197e6:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 80197e8:	4b3b      	ldr	r3, [pc, #236]	; (80198d8 <RadioIrqProcess+0x424>)
 80197ea:	2200      	movs	r2, #0
 80197ec:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80197ee:	2300      	movs	r3, #0
 80197f0:	2200      	movs	r2, #0
 80197f2:	f240 2162 	movw	r1, #610	; 0x262
 80197f6:	f240 2062 	movw	r0, #610	; 0x262
 80197fa:	f001 f899 	bl	801a930 <SUBGRF_SetDioIrqParams>
        break;
 80197fe:	e05d      	b.n	80198bc <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8019800:	4b38      	ldr	r3, [pc, #224]	; (80198e4 <RadioIrqProcess+0x430>)
 8019802:	2201      	movs	r2, #1
 8019804:	2100      	movs	r1, #0
 8019806:	2002      	movs	r0, #2
 8019808:	f003 f85c 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801980c:	f001 ff1d 	bl	801b64a <RFW_Is_Init>
 8019810:	4603      	mov	r3, r0
 8019812:	2b01      	cmp	r3, #1
 8019814:	d154      	bne.n	80198c0 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 8019816:	f001 ff4e 	bl	801b6b6 <RFW_ReceivePayload>
        break;
 801981a:	e051      	b.n	80198c0 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801981c:	4b32      	ldr	r3, [pc, #200]	; (80198e8 <RadioIrqProcess+0x434>)
 801981e:	2201      	movs	r2, #1
 8019820:	2100      	movs	r1, #0
 8019822:	2002      	movs	r0, #2
 8019824:	f003 f84e 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8019828:	e04f      	b.n	80198ca <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 801982a:	4830      	ldr	r0, [pc, #192]	; (80198ec <RadioIrqProcess+0x438>)
 801982c:	f002 fe40 	bl	801c4b0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8019830:	4b29      	ldr	r3, [pc, #164]	; (80198d8 <RadioIrqProcess+0x424>)
 8019832:	785b      	ldrb	r3, [r3, #1]
 8019834:	f083 0301 	eor.w	r3, r3, #1
 8019838:	b2db      	uxtb	r3, r3
 801983a:	2b00      	cmp	r3, #0
 801983c:	d002      	beq.n	8019844 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801983e:	2000      	movs	r0, #0
 8019840:	f000 fea6 	bl	801a590 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8019844:	4b2a      	ldr	r3, [pc, #168]	; (80198f0 <RadioIrqProcess+0x43c>)
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d03b      	beq.n	80198c4 <RadioIrqProcess+0x410>
 801984c:	4b28      	ldr	r3, [pc, #160]	; (80198f0 <RadioIrqProcess+0x43c>)
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	68db      	ldr	r3, [r3, #12]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d036      	beq.n	80198c4 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8019856:	4b26      	ldr	r3, [pc, #152]	; (80198f0 <RadioIrqProcess+0x43c>)
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	68db      	ldr	r3, [r3, #12]
 801985c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801985e:	4b25      	ldr	r3, [pc, #148]	; (80198f4 <RadioIrqProcess+0x440>)
 8019860:	2201      	movs	r2, #1
 8019862:	2100      	movs	r1, #0
 8019864:	2002      	movs	r0, #2
 8019866:	f003 f82d 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801986a:	e02b      	b.n	80198c4 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801986c:	4b22      	ldr	r3, [pc, #136]	; (80198f8 <RadioIrqProcess+0x444>)
 801986e:	2201      	movs	r2, #1
 8019870:	2100      	movs	r1, #0
 8019872:	2002      	movs	r0, #2
 8019874:	f003 f826 	bl	801c8c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019878:	4b17      	ldr	r3, [pc, #92]	; (80198d8 <RadioIrqProcess+0x424>)
 801987a:	785b      	ldrb	r3, [r3, #1]
 801987c:	f083 0301 	eor.w	r3, r3, #1
 8019880:	b2db      	uxtb	r3, r3
 8019882:	2b00      	cmp	r3, #0
 8019884:	d002      	beq.n	801988c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019886:	2000      	movs	r0, #0
 8019888:	f000 fe82 	bl	801a590 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801988c:	4b18      	ldr	r3, [pc, #96]	; (80198f0 <RadioIrqProcess+0x43c>)
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d019      	beq.n	80198c8 <RadioIrqProcess+0x414>
 8019894:	4b16      	ldr	r3, [pc, #88]	; (80198f0 <RadioIrqProcess+0x43c>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	691b      	ldr	r3, [r3, #16]
 801989a:	2b00      	cmp	r3, #0
 801989c:	d014      	beq.n	80198c8 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801989e:	4b14      	ldr	r3, [pc, #80]	; (80198f0 <RadioIrqProcess+0x43c>)
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	691b      	ldr	r3, [r3, #16]
 80198a4:	4798      	blx	r3
        break;
 80198a6:	e00f      	b.n	80198c8 <RadioIrqProcess+0x414>
        break;
 80198a8:	bf00      	nop
 80198aa:	e00e      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198ac:	bf00      	nop
 80198ae:	e00c      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198b0:	bf00      	nop
 80198b2:	e00a      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198b4:	bf00      	nop
 80198b6:	e008      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198b8:	bf00      	nop
 80198ba:	e006      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198bc:	bf00      	nop
 80198be:	e004      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198c0:	bf00      	nop
 80198c2:	e002      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198c4:	bf00      	nop
 80198c6:	e000      	b.n	80198ca <RadioIrqProcess+0x416>
        break;
 80198c8:	bf00      	nop
    }
}
 80198ca:	bf00      	nop
 80198cc:	370c      	adds	r7, #12
 80198ce:	46bd      	mov	sp, r7
 80198d0:	bd90      	pop	{r4, r7, pc}
 80198d2:	bf00      	nop
 80198d4:	0801d7a4 	.word	0x0801d7a4
 80198d8:	20001a9c 	.word	0x20001a9c
 80198dc:	080192c3 	.word	0x080192c3
 80198e0:	080192e7 	.word	0x080192e7
 80198e4:	0801d7b0 	.word	0x0801d7b0
 80198e8:	0801d7bc 	.word	0x0801d7bc
 80198ec:	20001b10 	.word	0x20001b10
 80198f0:	20001a98 	.word	0x20001a98
 80198f4:	0801d7c8 	.word	0x0801d7c8
 80198f8:	0801d7d4 	.word	0x0801d7d4

080198fc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8019900:	4b09      	ldr	r3, [pc, #36]	; (8019928 <RadioTxPrbs+0x2c>)
 8019902:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019906:	2101      	movs	r1, #1
 8019908:	4618      	mov	r0, r3
 801990a:	f001 fcb5 	bl	801b278 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801990e:	4b07      	ldr	r3, [pc, #28]	; (801992c <RadioTxPrbs+0x30>)
 8019910:	212d      	movs	r1, #45	; 0x2d
 8019912:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019916:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8019918:	f000 fefd 	bl	801a716 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801991c:	4804      	ldr	r0, [pc, #16]	; (8019930 <RadioTxPrbs+0x34>)
 801991e:	f000 fe53 	bl	801a5c8 <SUBGRF_SetTx>
}
 8019922:	bf00      	nop
 8019924:	bd80      	pop	{r7, pc}
 8019926:	bf00      	nop
 8019928:	20001a9c 	.word	0x20001a9c
 801992c:	080192c3 	.word	0x080192c3
 8019930:	000fffff 	.word	0x000fffff

08019934 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b084      	sub	sp, #16
 8019938:	af00      	add	r7, sp, #0
 801993a:	4603      	mov	r3, r0
 801993c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801993e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019942:	4618      	mov	r0, r3
 8019944:	f001 fcc0 	bl	801b2c8 <SUBGRF_SetRfTxPower>
 8019948:	4603      	mov	r3, r0
 801994a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801994c:	7bfb      	ldrb	r3, [r7, #15]
 801994e:	2101      	movs	r1, #1
 8019950:	4618      	mov	r0, r3
 8019952:	f001 fc91 	bl	801b278 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019956:	f000 fed5 	bl	801a704 <SUBGRF_SetTxContinuousWave>
}
 801995a:	bf00      	nop
 801995c:	3710      	adds	r7, #16
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}

08019962 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019962:	b480      	push	{r7}
 8019964:	b089      	sub	sp, #36	; 0x24
 8019966:	af00      	add	r7, sp, #0
 8019968:	60f8      	str	r0, [r7, #12]
 801996a:	60b9      	str	r1, [r7, #8]
 801996c:	4613      	mov	r3, r2
 801996e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019970:	2300      	movs	r3, #0
 8019972:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019974:	2300      	movs	r3, #0
 8019976:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019978:	2300      	movs	r3, #0
 801997a:	61bb      	str	r3, [r7, #24]
 801997c:	e011      	b.n	80199a2 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801997e:	69bb      	ldr	r3, [r7, #24]
 8019980:	68ba      	ldr	r2, [r7, #8]
 8019982:	4413      	add	r3, r2
 8019984:	781a      	ldrb	r2, [r3, #0]
 8019986:	69bb      	ldr	r3, [r7, #24]
 8019988:	68b9      	ldr	r1, [r7, #8]
 801998a:	440b      	add	r3, r1
 801998c:	43d2      	mvns	r2, r2
 801998e:	b2d2      	uxtb	r2, r2
 8019990:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019992:	69bb      	ldr	r3, [r7, #24]
 8019994:	68fa      	ldr	r2, [r7, #12]
 8019996:	4413      	add	r3, r2
 8019998:	2200      	movs	r2, #0
 801999a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801999c:	69bb      	ldr	r3, [r7, #24]
 801999e:	3301      	adds	r3, #1
 80199a0:	61bb      	str	r3, [r7, #24]
 80199a2:	79fb      	ldrb	r3, [r7, #7]
 80199a4:	69ba      	ldr	r2, [r7, #24]
 80199a6:	429a      	cmp	r2, r3
 80199a8:	dbe9      	blt.n	801997e <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80199aa:	2300      	movs	r3, #0
 80199ac:	61bb      	str	r3, [r7, #24]
 80199ae:	e049      	b.n	8019a44 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80199b0:	69bb      	ldr	r3, [r7, #24]
 80199b2:	425a      	negs	r2, r3
 80199b4:	f003 0307 	and.w	r3, r3, #7
 80199b8:	f002 0207 	and.w	r2, r2, #7
 80199bc:	bf58      	it	pl
 80199be:	4253      	negpl	r3, r2
 80199c0:	b2db      	uxtb	r3, r3
 80199c2:	f1c3 0307 	rsb	r3, r3, #7
 80199c6:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 80199c8:	69bb      	ldr	r3, [r7, #24]
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	da00      	bge.n	80199d0 <payload_integration+0x6e>
 80199ce:	3307      	adds	r3, #7
 80199d0:	10db      	asrs	r3, r3, #3
 80199d2:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80199d4:	69bb      	ldr	r3, [r7, #24]
 80199d6:	3301      	adds	r3, #1
 80199d8:	425a      	negs	r2, r3
 80199da:	f003 0307 	and.w	r3, r3, #7
 80199de:	f002 0207 	and.w	r2, r2, #7
 80199e2:	bf58      	it	pl
 80199e4:	4253      	negpl	r3, r2
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	f1c3 0307 	rsb	r3, r3, #7
 80199ec:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80199ee:	69bb      	ldr	r3, [r7, #24]
 80199f0:	3301      	adds	r3, #1
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	da00      	bge.n	80199f8 <payload_integration+0x96>
 80199f6:	3307      	adds	r3, #7
 80199f8:	10db      	asrs	r3, r3, #3
 80199fa:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80199fc:	7dbb      	ldrb	r3, [r7, #22]
 80199fe:	68ba      	ldr	r2, [r7, #8]
 8019a00:	4413      	add	r3, r2
 8019a02:	781b      	ldrb	r3, [r3, #0]
 8019a04:	461a      	mov	r2, r3
 8019a06:	7dfb      	ldrb	r3, [r7, #23]
 8019a08:	fa42 f303 	asr.w	r3, r2, r3
 8019a0c:	b2db      	uxtb	r3, r3
 8019a0e:	f003 0301 	and.w	r3, r3, #1
 8019a12:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019a14:	7ffa      	ldrb	r2, [r7, #31]
 8019a16:	7cfb      	ldrb	r3, [r7, #19]
 8019a18:	4053      	eors	r3, r2
 8019a1a:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8019a1c:	7d3b      	ldrb	r3, [r7, #20]
 8019a1e:	68fa      	ldr	r2, [r7, #12]
 8019a20:	4413      	add	r3, r2
 8019a22:	781b      	ldrb	r3, [r3, #0]
 8019a24:	b25a      	sxtb	r2, r3
 8019a26:	7ff9      	ldrb	r1, [r7, #31]
 8019a28:	7d7b      	ldrb	r3, [r7, #21]
 8019a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8019a2e:	b25b      	sxtb	r3, r3
 8019a30:	4313      	orrs	r3, r2
 8019a32:	b259      	sxtb	r1, r3
 8019a34:	7d3b      	ldrb	r3, [r7, #20]
 8019a36:	68fa      	ldr	r2, [r7, #12]
 8019a38:	4413      	add	r3, r2
 8019a3a:	b2ca      	uxtb	r2, r1
 8019a3c:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019a3e:	69bb      	ldr	r3, [r7, #24]
 8019a40:	3301      	adds	r3, #1
 8019a42:	61bb      	str	r3, [r7, #24]
 8019a44:	79fb      	ldrb	r3, [r7, #7]
 8019a46:	00db      	lsls	r3, r3, #3
 8019a48:	69ba      	ldr	r2, [r7, #24]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	dbb0      	blt.n	80199b0 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019a4e:	7ffb      	ldrb	r3, [r7, #31]
 8019a50:	01db      	lsls	r3, r3, #7
 8019a52:	b25a      	sxtb	r2, r3
 8019a54:	7ffb      	ldrb	r3, [r7, #31]
 8019a56:	019b      	lsls	r3, r3, #6
 8019a58:	b25b      	sxtb	r3, r3
 8019a5a:	4313      	orrs	r3, r2
 8019a5c:	b25b      	sxtb	r3, r3
 8019a5e:	7ffa      	ldrb	r2, [r7, #31]
 8019a60:	2a00      	cmp	r2, #0
 8019a62:	d101      	bne.n	8019a68 <payload_integration+0x106>
 8019a64:	2220      	movs	r2, #32
 8019a66:	e000      	b.n	8019a6a <payload_integration+0x108>
 8019a68:	2200      	movs	r2, #0
 8019a6a:	4313      	orrs	r3, r2
 8019a6c:	b259      	sxtb	r1, r3
 8019a6e:	79fb      	ldrb	r3, [r7, #7]
 8019a70:	68fa      	ldr	r2, [r7, #12]
 8019a72:	4413      	add	r3, r2
 8019a74:	b2ca      	uxtb	r2, r1
 8019a76:	701a      	strb	r2, [r3, #0]
}
 8019a78:	bf00      	nop
 8019a7a:	3724      	adds	r7, #36	; 0x24
 8019a7c:	46bd      	mov	sp, r7
 8019a7e:	bc80      	pop	{r7}
 8019a80:	4770      	bx	lr
	...

08019a84 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019a84:	b580      	push	{r7, lr}
 8019a86:	b08c      	sub	sp, #48	; 0x30
 8019a88:	af00      	add	r7, sp, #0
 8019a8a:	60b9      	str	r1, [r7, #8]
 8019a8c:	607a      	str	r2, [r7, #4]
 8019a8e:	603b      	str	r3, [r7, #0]
 8019a90:	4603      	mov	r3, r0
 8019a92:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019a94:	2300      	movs	r3, #0
 8019a96:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019a98:	2300      	movs	r3, #0
 8019a9a:	623b      	str	r3, [r7, #32]
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019aa0:	f001 fdcd 	bl	801b63e <RFW_DeInit>

    if( rxContinuous != 0 )
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d001      	beq.n	8019aae <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 8019aaa:	2300      	movs	r3, #0
 8019aac:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	bf14      	ite	ne
 8019ab4:	2301      	movne	r3, #1
 8019ab6:	2300      	moveq	r3, #0
 8019ab8:	b2da      	uxtb	r2, r3
 8019aba:	4ba3      	ldr	r3, [pc, #652]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019abc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8019abe:	7bfb      	ldrb	r3, [r7, #15]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d003      	beq.n	8019acc <RadioSetRxGenericConfig+0x48>
 8019ac4:	2b01      	cmp	r3, #1
 8019ac6:	f000 80dc 	beq.w	8019c82 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019aca:	e194      	b.n	8019df6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019acc:	68bb      	ldr	r3, [r7, #8]
 8019ace:	689b      	ldr	r3, [r3, #8]
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d003      	beq.n	8019adc <RadioSetRxGenericConfig+0x58>
 8019ad4:	68bb      	ldr	r3, [r7, #8]
 8019ad6:	68db      	ldr	r3, [r3, #12]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d102      	bne.n	8019ae2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8019adc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ae0:	e18a      	b.n	8019df8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	7f9b      	ldrb	r3, [r3, #30]
 8019ae6:	2b08      	cmp	r3, #8
 8019ae8:	d902      	bls.n	8019af0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 8019aea:	f04f 33ff 	mov.w	r3, #4294967295
 8019aee:	e183      	b.n	8019df8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019af0:	68bb      	ldr	r3, [r7, #8]
 8019af2:	6919      	ldr	r1, [r3, #16]
 8019af4:	68bb      	ldr	r3, [r7, #8]
 8019af6:	7f9b      	ldrb	r3, [r3, #30]
 8019af8:	b29a      	uxth	r2, r3
 8019afa:	f107 0320 	add.w	r3, r7, #32
 8019afe:	4618      	mov	r0, r3
 8019b00:	f001 fe90 	bl	801b824 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	bf14      	ite	ne
 8019b0c:	2301      	movne	r3, #1
 8019b0e:	2300      	moveq	r3, #0
 8019b10:	b2db      	uxtb	r3, r3
 8019b12:	4618      	mov	r0, r3
 8019b14:	f000 fe08 	bl	801a728 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019b18:	4b8b      	ldr	r3, [pc, #556]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	689b      	ldr	r3, [r3, #8]
 8019b24:	4a88      	ldr	r2, [pc, #544]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b26:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8019b28:	68bb      	ldr	r3, [r7, #8]
 8019b2a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019b2e:	4b86      	ldr	r3, [pc, #536]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8019b34:	68bb      	ldr	r3, [r7, #8]
 8019b36:	685b      	ldr	r3, [r3, #4]
 8019b38:	4618      	mov	r0, r3
 8019b3a:	f001 fcb3 	bl	801b4a4 <SUBGRF_GetFskBandwidthRegValue>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	461a      	mov	r2, r3
 8019b42:	4b81      	ldr	r3, [pc, #516]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019b48:	4b7f      	ldr	r3, [pc, #508]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	68db      	ldr	r3, [r3, #12]
 8019b52:	b29b      	uxth	r3, r3
 8019b54:	00db      	lsls	r3, r3, #3
 8019b56:	b29a      	uxth	r2, r3
 8019b58:	4b7b      	ldr	r3, [pc, #492]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b5a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019b5c:	68bb      	ldr	r3, [r7, #8]
 8019b5e:	7fda      	ldrb	r2, [r3, #31]
 8019b60:	4b79      	ldr	r3, [pc, #484]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b62:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	7f9b      	ldrb	r3, [r3, #30]
 8019b68:	00db      	lsls	r3, r3, #3
 8019b6a:	b2da      	uxtb	r2, r3
 8019b6c:	4b76      	ldr	r3, [pc, #472]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b6e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019b70:	68bb      	ldr	r3, [r7, #8]
 8019b72:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019b76:	4b74      	ldr	r3, [pc, #464]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b78:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8019b7a:	68bb      	ldr	r3, [r7, #8]
 8019b7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d105      	bne.n	8019b90 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	695b      	ldr	r3, [r3, #20]
 8019b88:	b2da      	uxtb	r2, r3
 8019b8a:	4b6f      	ldr	r3, [pc, #444]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b8c:	759a      	strb	r2, [r3, #22]
 8019b8e:	e00b      	b.n	8019ba8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019b96:	2b02      	cmp	r3, #2
 8019b98:	d103      	bne.n	8019ba2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019b9a:	4b6b      	ldr	r3, [pc, #428]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019b9c:	22ff      	movs	r2, #255	; 0xff
 8019b9e:	759a      	strb	r2, [r3, #22]
 8019ba0:	e002      	b.n	8019ba8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019ba2:	4b69      	ldr	r3, [pc, #420]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019ba4:	22ff      	movs	r2, #255	; 0xff
 8019ba6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019ba8:	68bb      	ldr	r3, [r7, #8]
 8019baa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019bae:	2b02      	cmp	r3, #2
 8019bb0:	d004      	beq.n	8019bbc <RadioSetRxGenericConfig+0x138>
 8019bb2:	68bb      	ldr	r3, [r7, #8]
 8019bb4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019bb8:	2b02      	cmp	r3, #2
 8019bba:	d12d      	bne.n	8019c18 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019bbc:	68bb      	ldr	r3, [r7, #8]
 8019bbe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019bc2:	2bf1      	cmp	r3, #241	; 0xf1
 8019bc4:	d00c      	beq.n	8019be0 <RadioSetRxGenericConfig+0x15c>
 8019bc6:	68bb      	ldr	r3, [r7, #8]
 8019bc8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019bcc:	2bf2      	cmp	r3, #242	; 0xf2
 8019bce:	d007      	beq.n	8019be0 <RadioSetRxGenericConfig+0x15c>
 8019bd0:	68bb      	ldr	r3, [r7, #8]
 8019bd2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019bd6:	2b01      	cmp	r3, #1
 8019bd8:	d002      	beq.n	8019be0 <RadioSetRxGenericConfig+0x15c>
            return -1;
 8019bda:	f04f 33ff 	mov.w	r3, #4294967295
 8019bde:	e10b      	b.n	8019df8 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019be0:	2300      	movs	r3, #0
 8019be2:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019be8:	4b58      	ldr	r3, [pc, #352]	; (8019d4c <RadioSetRxGenericConfig+0x2c8>)
 8019bea:	6819      	ldr	r1, [r3, #0]
 8019bec:	f107 0314 	add.w	r3, r7, #20
 8019bf0:	4a57      	ldr	r2, [pc, #348]	; (8019d50 <RadioSetRxGenericConfig+0x2cc>)
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f001 fd16 	bl	801b624 <RFW_Init>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d002      	beq.n	8019c04 <RadioSetRxGenericConfig+0x180>
            return -1;
 8019bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8019c02:	e0f9      	b.n	8019df8 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019c04:	4b50      	ldr	r3, [pc, #320]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c06:	2200      	movs	r2, #0
 8019c08:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019c0a:	4b4f      	ldr	r3, [pc, #316]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019c10:	4b4d      	ldr	r3, [pc, #308]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c12:	2200      	movs	r2, #0
 8019c14:	755a      	strb	r2, [r3, #21]
        {
 8019c16:	e00e      	b.n	8019c36 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8019c1e:	4b4a      	ldr	r3, [pc, #296]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c20:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019c22:	68bb      	ldr	r3, [r7, #8]
 8019c24:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019c28:	4b47      	ldr	r3, [pc, #284]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c2a:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019c2c:	68bb      	ldr	r3, [r7, #8]
 8019c2e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8019c32:	4b45      	ldr	r3, [pc, #276]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c34:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8019c36:	f7ff fa48 	bl	80190ca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019c3a:	2000      	movs	r0, #0
 8019c3c:	f7fe fbf2 	bl	8018424 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019c40:	4844      	ldr	r0, [pc, #272]	; (8019d54 <RadioSetRxGenericConfig+0x2d0>)
 8019c42:	f001 f80b 	bl	801ac5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019c46:	4844      	ldr	r0, [pc, #272]	; (8019d58 <RadioSetRxGenericConfig+0x2d4>)
 8019c48:	f001 f8da 	bl	801ae00 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019c4c:	f107 0320 	add.w	r3, r7, #32
 8019c50:	4618      	mov	r0, r3
 8019c52:	f000 fba2 	bl	801a39a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019c56:	68bb      	ldr	r3, [r7, #8]
 8019c58:	8b9b      	ldrh	r3, [r3, #28]
 8019c5a:	4618      	mov	r0, r3
 8019c5c:	f000 fbec 	bl	801a438 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019c60:	68bb      	ldr	r3, [r7, #8]
 8019c62:	8b1b      	ldrh	r3, [r3, #24]
 8019c64:	4618      	mov	r0, r3
 8019c66:	f000 fbc7 	bl	801a3f8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8019c6a:	683b      	ldr	r3, [r7, #0]
 8019c6c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019c70:	fb03 f202 	mul.w	r2, r3, r2
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	689b      	ldr	r3, [r3, #8]
 8019c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c7c:	4a32      	ldr	r2, [pc, #200]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019c7e:	6093      	str	r3, [r2, #8]
        break;
 8019c80:	e0b9      	b.n	8019df6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019c82:	68bb      	ldr	r3, [r7, #8]
 8019c84:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	d102      	bne.n	8019c90 <RadioSetRxGenericConfig+0x20c>
            return -1;
 8019c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c8e:	e0b3      	b.n	8019df8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019c90:	68bb      	ldr	r3, [r7, #8]
 8019c92:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019c96:	2b01      	cmp	r3, #1
 8019c98:	d104      	bne.n	8019ca4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8019c9a:	68bb      	ldr	r3, [r7, #8]
 8019c9c:	695b      	ldr	r3, [r3, #20]
 8019c9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019ca2:	e002      	b.n	8019caa <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019ca4:	23ff      	movs	r3, #255	; 0xff
 8019ca6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8019caa:	68bb      	ldr	r3, [r7, #8]
 8019cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	bf14      	ite	ne
 8019cb2:	2301      	movne	r3, #1
 8019cb4:	2300      	moveq	r3, #0
 8019cb6:	b2db      	uxtb	r3, r3
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f000 fd35 	bl	801a728 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	b2db      	uxtb	r3, r3
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f000 fd3f 	bl	801a746 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019cc8:	4b1f      	ldr	r3, [pc, #124]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019cca:	2201      	movs	r2, #1
 8019ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8019cd6:	4b1c      	ldr	r3, [pc, #112]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019cdc:	68bb      	ldr	r3, [r7, #8]
 8019cde:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8019ce2:	4b19      	ldr	r3, [pc, #100]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019ce8:	68bb      	ldr	r3, [r7, #8]
 8019cea:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8019cee:	4b16      	ldr	r3, [pc, #88]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019cf0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019cf4:	68bb      	ldr	r3, [r7, #8]
 8019cf6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019cfa:	2b02      	cmp	r3, #2
 8019cfc:	d010      	beq.n	8019d20 <RadioSetRxGenericConfig+0x29c>
 8019cfe:	2b02      	cmp	r3, #2
 8019d00:	dc2c      	bgt.n	8019d5c <RadioSetRxGenericConfig+0x2d8>
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d002      	beq.n	8019d0c <RadioSetRxGenericConfig+0x288>
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d005      	beq.n	8019d16 <RadioSetRxGenericConfig+0x292>
            break;
 8019d0a:	e027      	b.n	8019d5c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019d0c:	4b0e      	ldr	r3, [pc, #56]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019d0e:	2200      	movs	r2, #0
 8019d10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019d14:	e023      	b.n	8019d5e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019d16:	4b0c      	ldr	r3, [pc, #48]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019d18:	2201      	movs	r2, #1
 8019d1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019d1e:	e01e      	b.n	8019d5e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019d26:	2b0b      	cmp	r3, #11
 8019d28:	d004      	beq.n	8019d34 <RadioSetRxGenericConfig+0x2b0>
 8019d2a:	68bb      	ldr	r3, [r7, #8]
 8019d2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019d30:	2b0c      	cmp	r3, #12
 8019d32:	d104      	bne.n	8019d3e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019d34:	4b04      	ldr	r3, [pc, #16]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019d36:	2201      	movs	r2, #1
 8019d38:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019d3c:	e00f      	b.n	8019d5e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019d3e:	4b02      	ldr	r3, [pc, #8]	; (8019d48 <RadioSetRxGenericConfig+0x2c4>)
 8019d40:	2200      	movs	r2, #0
 8019d42:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019d46:	e00a      	b.n	8019d5e <RadioSetRxGenericConfig+0x2da>
 8019d48:	20001a9c 	.word	0x20001a9c
 8019d4c:	20001a98 	.word	0x20001a98
 8019d50:	20001b10 	.word	0x20001b10
 8019d54:	20001ad4 	.word	0x20001ad4
 8019d58:	20001aaa 	.word	0x20001aaa
            break;
 8019d5c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019d5e:	4b28      	ldr	r3, [pc, #160]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019d60:	2201      	movs	r2, #1
 8019d62:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019d64:	68bb      	ldr	r3, [r7, #8]
 8019d66:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8019d68:	4b25      	ldr	r3, [pc, #148]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019d6a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019d6c:	68bb      	ldr	r3, [r7, #8]
 8019d6e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8019d72:	4b23      	ldr	r3, [pc, #140]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019d74:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019d76:	4a22      	ldr	r2, [pc, #136]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019d78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019d7c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019d7e:	68bb      	ldr	r3, [r7, #8]
 8019d80:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8019d84:	4b1e      	ldr	r3, [pc, #120]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019d86:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019d8a:	68bb      	ldr	r3, [r7, #8]
 8019d8c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8019d90:	4b1b      	ldr	r3, [pc, #108]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8019d96:	f7ff f998 	bl	80190ca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019d9a:	2001      	movs	r0, #1
 8019d9c:	f7fe fb42 	bl	8018424 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019da0:	4818      	ldr	r0, [pc, #96]	; (8019e04 <RadioSetRxGenericConfig+0x380>)
 8019da2:	f000 ff5b 	bl	801ac5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019da6:	4818      	ldr	r0, [pc, #96]	; (8019e08 <RadioSetRxGenericConfig+0x384>)
 8019da8:	f001 f82a 	bl	801ae00 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8019dac:	4b14      	ldr	r3, [pc, #80]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019db2:	2b01      	cmp	r3, #1
 8019db4:	d10d      	bne.n	8019dd2 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019db6:	f240 7036 	movw	r0, #1846	; 0x736
 8019dba:	f001 f97d 	bl	801b0b8 <SUBGRF_ReadRegister>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	f023 0304 	bic.w	r3, r3, #4
 8019dc4:	b2db      	uxtb	r3, r3
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	f240 7036 	movw	r0, #1846	; 0x736
 8019dcc:	f001 f960 	bl	801b090 <SUBGRF_WriteRegister>
 8019dd0:	e00c      	b.n	8019dec <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019dd2:	f240 7036 	movw	r0, #1846	; 0x736
 8019dd6:	f001 f96f 	bl	801b0b8 <SUBGRF_ReadRegister>
 8019dda:	4603      	mov	r3, r0
 8019ddc:	f043 0304 	orr.w	r3, r3, #4
 8019de0:	b2db      	uxtb	r3, r3
 8019de2:	4619      	mov	r1, r3
 8019de4:	f240 7036 	movw	r0, #1846	; 0x736
 8019de8:	f001 f952 	bl	801b090 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019dec:	4b04      	ldr	r3, [pc, #16]	; (8019e00 <RadioSetRxGenericConfig+0x37c>)
 8019dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019df2:	609a      	str	r2, [r3, #8]
        break;
 8019df4:	bf00      	nop
    }
    return status;
 8019df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3730      	adds	r7, #48	; 0x30
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}
 8019e00:	20001a9c 	.word	0x20001a9c
 8019e04:	20001ad4 	.word	0x20001ad4
 8019e08:	20001aaa 	.word	0x20001aaa

08019e0c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8019e0c:	b580      	push	{r7, lr}
 8019e0e:	b08e      	sub	sp, #56	; 0x38
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	60b9      	str	r1, [r7, #8]
 8019e14:	607b      	str	r3, [r7, #4]
 8019e16:	4603      	mov	r3, r0
 8019e18:	73fb      	strb	r3, [r7, #15]
 8019e1a:	4613      	mov	r3, r2
 8019e1c:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019e1e:	2300      	movs	r3, #0
 8019e20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019e22:	2300      	movs	r3, #0
 8019e24:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019e26:	f001 fc0a 	bl	801b63e <RFW_DeInit>
    switch( modem )
 8019e2a:	7bfb      	ldrb	r3, [r7, #15]
 8019e2c:	2b03      	cmp	r3, #3
 8019e2e:	f200 8204 	bhi.w	801a23a <RadioSetTxGenericConfig+0x42e>
 8019e32:	a201      	add	r2, pc, #4	; (adr r2, 8019e38 <RadioSetTxGenericConfig+0x2c>)
 8019e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e38:	08019fbd 	.word	0x08019fbd
 8019e3c:	0801a105 	.word	0x0801a105
 8019e40:	0801a1fd 	.word	0x0801a1fd
 8019e44:	08019e49 	.word	0x08019e49
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019e48:	68bb      	ldr	r3, [r7, #8]
 8019e4a:	7c9b      	ldrb	r3, [r3, #18]
 8019e4c:	2b08      	cmp	r3, #8
 8019e4e:	d902      	bls.n	8019e56 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019e50:	f04f 33ff 	mov.w	r3, #4294967295
 8019e54:	e206      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019e56:	68bb      	ldr	r3, [r7, #8]
 8019e58:	6899      	ldr	r1, [r3, #8]
 8019e5a:	68bb      	ldr	r3, [r7, #8]
 8019e5c:	7c9b      	ldrb	r3, [r3, #18]
 8019e5e:	b29a      	uxth	r2, r3
 8019e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019e64:	4618      	mov	r0, r3
 8019e66:	f001 fcdd 	bl	801b824 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d102      	bne.n	8019e78 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019e72:	f04f 33ff 	mov.w	r3, #4294967295
 8019e76:	e1f5      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8019e80:	4293      	cmp	r3, r2
 8019e82:	d813      	bhi.n	8019eac <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019e84:	2302      	movs	r3, #2
 8019e86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8019e8a:	4b99      	ldr	r3, [pc, #612]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019e8c:	2203      	movs	r2, #3
 8019e8e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019e90:	4b97      	ldr	r3, [pc, #604]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019e92:	2203      	movs	r2, #3
 8019e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	681b      	ldr	r3, [r3, #0]
 8019e9c:	4a94      	ldr	r2, [pc, #592]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019e9e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019ea0:	68bb      	ldr	r3, [r7, #8]
 8019ea2:	7cda      	ldrb	r2, [r3, #19]
 8019ea4:	4b92      	ldr	r3, [pc, #584]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019eaa:	e017      	b.n	8019edc <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 8019eac:	2300      	movs	r3, #0
 8019eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019eb2:	4b8f      	ldr	r3, [pc, #572]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019eb4:	2200      	movs	r2, #0
 8019eb6:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019eb8:	4b8d      	ldr	r3, [pc, #564]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019eba:	2200      	movs	r2, #0
 8019ebc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	4a8a      	ldr	r2, [pc, #552]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019ec6:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019ec8:	68bb      	ldr	r3, [r7, #8]
 8019eca:	7cda      	ldrb	r2, [r3, #19]
 8019ecc:	4b88      	ldr	r3, [pc, #544]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	089b      	lsrs	r3, r3, #2
 8019ed8:	4a85      	ldr	r2, [pc, #532]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019eda:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019edc:	68bb      	ldr	r3, [r7, #8]
 8019ede:	685b      	ldr	r3, [r3, #4]
 8019ee0:	b29b      	uxth	r3, r3
 8019ee2:	00db      	lsls	r3, r3, #3
 8019ee4:	b29a      	uxth	r2, r3
 8019ee6:	4b82      	ldr	r3, [pc, #520]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019ee8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019eea:	4b81      	ldr	r3, [pc, #516]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019eec:	2204      	movs	r2, #4
 8019eee:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	7c9b      	ldrb	r3, [r3, #18]
 8019ef4:	00db      	lsls	r3, r3, #3
 8019ef6:	b2da      	uxtb	r2, r3
 8019ef8:	4b7d      	ldr	r3, [pc, #500]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019efa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019efc:	4b7c      	ldr	r3, [pc, #496]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019efe:	2200      	movs	r2, #0
 8019f00:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019f02:	68bb      	ldr	r3, [r7, #8]
 8019f04:	7d9b      	ldrb	r3, [r3, #22]
 8019f06:	2b02      	cmp	r3, #2
 8019f08:	d003      	beq.n	8019f12 <RadioSetTxGenericConfig+0x106>
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	7d1b      	ldrb	r3, [r3, #20]
 8019f0e:	2b02      	cmp	r3, #2
 8019f10:	d12b      	bne.n	8019f6a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019f12:	68bb      	ldr	r3, [r7, #8]
 8019f14:	7d5b      	ldrb	r3, [r3, #21]
 8019f16:	2bf1      	cmp	r3, #241	; 0xf1
 8019f18:	d00a      	beq.n	8019f30 <RadioSetTxGenericConfig+0x124>
 8019f1a:	68bb      	ldr	r3, [r7, #8]
 8019f1c:	7d5b      	ldrb	r3, [r3, #21]
 8019f1e:	2bf2      	cmp	r3, #242	; 0xf2
 8019f20:	d006      	beq.n	8019f30 <RadioSetTxGenericConfig+0x124>
 8019f22:	68bb      	ldr	r3, [r7, #8]
 8019f24:	7d5b      	ldrb	r3, [r3, #21]
 8019f26:	2b01      	cmp	r3, #1
 8019f28:	d002      	beq.n	8019f30 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 8019f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8019f2e:	e199      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019f34:	2301      	movs	r3, #1
 8019f36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019f3a:	4b6e      	ldr	r3, [pc, #440]	; (801a0f4 <RadioSetTxGenericConfig+0x2e8>)
 8019f3c:	6819      	ldr	r1, [r3, #0]
 8019f3e:	f107 0320 	add.w	r3, r7, #32
 8019f42:	4a6d      	ldr	r2, [pc, #436]	; (801a0f8 <RadioSetTxGenericConfig+0x2ec>)
 8019f44:	4618      	mov	r0, r3
 8019f46:	f001 fb6d 	bl	801b624 <RFW_Init>
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d002      	beq.n	8019f56 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019f50:	f04f 33ff 	mov.w	r3, #4294967295
 8019f54:	e186      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019f56:	4b66      	ldr	r3, [pc, #408]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019f58:	2200      	movs	r2, #0
 8019f5a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019f5c:	4b64      	ldr	r3, [pc, #400]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019f5e:	2201      	movs	r2, #1
 8019f60:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019f62:	4b63      	ldr	r3, [pc, #396]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019f64:	2200      	movs	r2, #0
 8019f66:	755a      	strb	r2, [r3, #21]
        {
 8019f68:	e00b      	b.n	8019f82 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8019f6a:	68bb      	ldr	r3, [r7, #8]
 8019f6c:	7d5a      	ldrb	r2, [r3, #21]
 8019f6e:	4b60      	ldr	r3, [pc, #384]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019f70:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019f72:	68bb      	ldr	r3, [r7, #8]
 8019f74:	7d9a      	ldrb	r2, [r3, #22]
 8019f76:	4b5e      	ldr	r3, [pc, #376]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019f78:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8019f7a:	68bb      	ldr	r3, [r7, #8]
 8019f7c:	7d1a      	ldrb	r2, [r3, #20]
 8019f7e:	4b5c      	ldr	r3, [pc, #368]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019f80:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019f82:	f7ff f8a2 	bl	80190ca <RadioStandby>
        RadioSetModem( radio_modem );
 8019f86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	f7fe fa4a 	bl	8018424 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019f90:	485a      	ldr	r0, [pc, #360]	; (801a0fc <RadioSetTxGenericConfig+0x2f0>)
 8019f92:	f000 fe63 	bl	801ac5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019f96:	485a      	ldr	r0, [pc, #360]	; (801a100 <RadioSetTxGenericConfig+0x2f4>)
 8019f98:	f000 ff32 	bl	801ae00 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019f9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	f000 f9fa 	bl	801a39a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019fa6:	68bb      	ldr	r3, [r7, #8]
 8019fa8:	8a1b      	ldrh	r3, [r3, #16]
 8019faa:	4618      	mov	r0, r3
 8019fac:	f000 fa44 	bl	801a438 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019fb0:	68bb      	ldr	r3, [r7, #8]
 8019fb2:	899b      	ldrh	r3, [r3, #12]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f000 fa1f 	bl	801a3f8 <SUBGRF_SetCrcPolynomial>
        break;
 8019fba:	e13f      	b.n	801a23c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8019fbc:	68bb      	ldr	r3, [r7, #8]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	d102      	bne.n	8019fca <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8019fc8:	e14c      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019fca:	68bb      	ldr	r3, [r7, #8]
 8019fcc:	7c9b      	ldrb	r3, [r3, #18]
 8019fce:	2b08      	cmp	r3, #8
 8019fd0:	d902      	bls.n	8019fd8 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd6:	e145      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019fd8:	68bb      	ldr	r3, [r7, #8]
 8019fda:	6899      	ldr	r1, [r3, #8]
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	7c9b      	ldrb	r3, [r3, #18]
 8019fe0:	b29a      	uxth	r2, r3
 8019fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	f001 fc1c 	bl	801b824 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019fec:	4b40      	ldr	r3, [pc, #256]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019fee:	2200      	movs	r2, #0
 8019ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	4a3d      	ldr	r2, [pc, #244]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 8019ffa:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	7cda      	ldrb	r2, [r3, #19]
 801a000:	4b3b      	ldr	r3, [pc, #236]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	699b      	ldr	r3, [r3, #24]
 801a00a:	4a39      	ldr	r2, [pc, #228]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a00c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a00e:	4b38      	ldr	r3, [pc, #224]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a010:	2200      	movs	r2, #0
 801a012:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	685b      	ldr	r3, [r3, #4]
 801a018:	b29b      	uxth	r3, r3
 801a01a:	00db      	lsls	r3, r3, #3
 801a01c:	b29a      	uxth	r2, r3
 801a01e:	4b34      	ldr	r3, [pc, #208]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a020:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801a022:	4b33      	ldr	r3, [pc, #204]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a024:	2204      	movs	r2, #4
 801a026:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801a028:	68bb      	ldr	r3, [r7, #8]
 801a02a:	7c9b      	ldrb	r3, [r3, #18]
 801a02c:	00db      	lsls	r3, r3, #3
 801a02e:	b2da      	uxtb	r2, r3
 801a030:	4b2f      	ldr	r3, [pc, #188]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a032:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801a034:	4b2e      	ldr	r3, [pc, #184]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a036:	2200      	movs	r2, #0
 801a038:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801a03a:	68bb      	ldr	r3, [r7, #8]
 801a03c:	7d9b      	ldrb	r3, [r3, #22]
 801a03e:	2b02      	cmp	r3, #2
 801a040:	d003      	beq.n	801a04a <RadioSetTxGenericConfig+0x23e>
 801a042:	68bb      	ldr	r3, [r7, #8]
 801a044:	7d1b      	ldrb	r3, [r3, #20]
 801a046:	2b02      	cmp	r3, #2
 801a048:	d12a      	bne.n	801a0a0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801a04a:	68bb      	ldr	r3, [r7, #8]
 801a04c:	7d5b      	ldrb	r3, [r3, #21]
 801a04e:	2bf1      	cmp	r3, #241	; 0xf1
 801a050:	d00a      	beq.n	801a068 <RadioSetTxGenericConfig+0x25c>
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	7d5b      	ldrb	r3, [r3, #21]
 801a056:	2bf2      	cmp	r3, #242	; 0xf2
 801a058:	d006      	beq.n	801a068 <RadioSetTxGenericConfig+0x25c>
 801a05a:	68bb      	ldr	r3, [r7, #8]
 801a05c:	7d5b      	ldrb	r3, [r3, #21]
 801a05e:	2b01      	cmp	r3, #1
 801a060:	d002      	beq.n	801a068 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801a062:	f04f 33ff 	mov.w	r3, #4294967295
 801a066:	e0fd      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801a068:	2301      	movs	r3, #1
 801a06a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801a070:	4b20      	ldr	r3, [pc, #128]	; (801a0f4 <RadioSetTxGenericConfig+0x2e8>)
 801a072:	6819      	ldr	r1, [r3, #0]
 801a074:	f107 0314 	add.w	r3, r7, #20
 801a078:	4a1f      	ldr	r2, [pc, #124]	; (801a0f8 <RadioSetTxGenericConfig+0x2ec>)
 801a07a:	4618      	mov	r0, r3
 801a07c:	f001 fad2 	bl	801b624 <RFW_Init>
 801a080:	4603      	mov	r3, r0
 801a082:	2b00      	cmp	r3, #0
 801a084:	d002      	beq.n	801a08c <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 801a086:	f04f 33ff 	mov.w	r3, #4294967295
 801a08a:	e0eb      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801a08c:	4b18      	ldr	r3, [pc, #96]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a08e:	2200      	movs	r2, #0
 801a090:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801a092:	4b17      	ldr	r3, [pc, #92]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a094:	2201      	movs	r2, #1
 801a096:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801a098:	4b15      	ldr	r3, [pc, #84]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a09a:	2200      	movs	r2, #0
 801a09c:	755a      	strb	r2, [r3, #21]
        {
 801a09e:	e00b      	b.n	801a0b8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801a0a0:	68bb      	ldr	r3, [r7, #8]
 801a0a2:	7d5a      	ldrb	r2, [r3, #21]
 801a0a4:	4b12      	ldr	r3, [pc, #72]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a0a6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	7d9a      	ldrb	r2, [r3, #22]
 801a0ac:	4b10      	ldr	r3, [pc, #64]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a0ae:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801a0b0:	68bb      	ldr	r3, [r7, #8]
 801a0b2:	7d1a      	ldrb	r2, [r3, #20]
 801a0b4:	4b0e      	ldr	r3, [pc, #56]	; (801a0f0 <RadioSetTxGenericConfig+0x2e4>)
 801a0b6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801a0b8:	f7ff f807 	bl	80190ca <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801a0bc:	2000      	movs	r0, #0
 801a0be:	f7fe f9b1 	bl	8018424 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a0c2:	480e      	ldr	r0, [pc, #56]	; (801a0fc <RadioSetTxGenericConfig+0x2f0>)
 801a0c4:	f000 fdca 	bl	801ac5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a0c8:	480d      	ldr	r0, [pc, #52]	; (801a100 <RadioSetTxGenericConfig+0x2f4>)
 801a0ca:	f000 fe99 	bl	801ae00 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801a0ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f000 f961 	bl	801a39a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801a0d8:	68bb      	ldr	r3, [r7, #8]
 801a0da:	8a1b      	ldrh	r3, [r3, #16]
 801a0dc:	4618      	mov	r0, r3
 801a0de:	f000 f9ab 	bl	801a438 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 801a0e2:	68bb      	ldr	r3, [r7, #8]
 801a0e4:	899b      	ldrh	r3, [r3, #12]
 801a0e6:	4618      	mov	r0, r3
 801a0e8:	f000 f986 	bl	801a3f8 <SUBGRF_SetCrcPolynomial>
        break;
 801a0ec:	e0a6      	b.n	801a23c <RadioSetTxGenericConfig+0x430>
 801a0ee:	bf00      	nop
 801a0f0:	20001a9c 	.word	0x20001a9c
 801a0f4:	20001a98 	.word	0x20001a98
 801a0f8:	20001af8 	.word	0x20001af8
 801a0fc:	20001ad4 	.word	0x20001ad4
 801a100:	20001aaa 	.word	0x20001aaa
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a104:	4b59      	ldr	r3, [pc, #356]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a106:	2201      	movs	r2, #1
 801a108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	781a      	ldrb	r2, [r3, #0]
 801a110:	4b56      	ldr	r3, [pc, #344]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	785a      	ldrb	r2, [r3, #1]
 801a11a:	4b54      	ldr	r3, [pc, #336]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a11c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	789a      	ldrb	r2, [r3, #2]
 801a124:	4b51      	ldr	r3, [pc, #324]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a126:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	78db      	ldrb	r3, [r3, #3]
 801a12e:	2b02      	cmp	r3, #2
 801a130:	d010      	beq.n	801a154 <RadioSetTxGenericConfig+0x348>
 801a132:	2b02      	cmp	r3, #2
 801a134:	dc20      	bgt.n	801a178 <RadioSetTxGenericConfig+0x36c>
 801a136:	2b00      	cmp	r3, #0
 801a138:	d002      	beq.n	801a140 <RadioSetTxGenericConfig+0x334>
 801a13a:	2b01      	cmp	r3, #1
 801a13c:	d005      	beq.n	801a14a <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 801a13e:	e01b      	b.n	801a178 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a140:	4b4a      	ldr	r3, [pc, #296]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a142:	2200      	movs	r2, #0
 801a144:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a148:	e017      	b.n	801a17a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a14a:	4b48      	ldr	r3, [pc, #288]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a14c:	2201      	movs	r2, #1
 801a14e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a152:	e012      	b.n	801a17a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801a154:	68bb      	ldr	r3, [r7, #8]
 801a156:	781b      	ldrb	r3, [r3, #0]
 801a158:	2b0b      	cmp	r3, #11
 801a15a:	d003      	beq.n	801a164 <RadioSetTxGenericConfig+0x358>
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	781b      	ldrb	r3, [r3, #0]
 801a160:	2b0c      	cmp	r3, #12
 801a162:	d104      	bne.n	801a16e <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801a164:	4b41      	ldr	r3, [pc, #260]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a166:	2201      	movs	r2, #1
 801a168:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a16c:	e005      	b.n	801a17a <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801a16e:	4b3f      	ldr	r3, [pc, #252]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a170:	2200      	movs	r2, #0
 801a172:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801a176:	e000      	b.n	801a17a <RadioSetTxGenericConfig+0x36e>
            break;
 801a178:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a17a:	4b3c      	ldr	r3, [pc, #240]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a17c:	2201      	movs	r2, #1
 801a17e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801a180:	68bb      	ldr	r3, [r7, #8]
 801a182:	889a      	ldrh	r2, [r3, #4]
 801a184:	4b39      	ldr	r3, [pc, #228]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a186:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801a188:	68bb      	ldr	r3, [r7, #8]
 801a18a:	799a      	ldrb	r2, [r3, #6]
 801a18c:	4b37      	ldr	r3, [pc, #220]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a18e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801a190:	68bb      	ldr	r3, [r7, #8]
 801a192:	79da      	ldrb	r2, [r3, #7]
 801a194:	4b35      	ldr	r3, [pc, #212]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a196:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	7a1a      	ldrb	r2, [r3, #8]
 801a19e:	4b33      	ldr	r3, [pc, #204]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a1a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801a1a4:	f7fe ff91 	bl	80190ca <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801a1a8:	2001      	movs	r0, #1
 801a1aa:	f7fe f93b 	bl	8018424 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a1ae:	4830      	ldr	r0, [pc, #192]	; (801a270 <RadioSetTxGenericConfig+0x464>)
 801a1b0:	f000 fd54 	bl	801ac5c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a1b4:	482f      	ldr	r0, [pc, #188]	; (801a274 <RadioSetTxGenericConfig+0x468>)
 801a1b6:	f000 fe23 	bl	801ae00 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801a1ba:	4b2c      	ldr	r3, [pc, #176]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a1bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801a1c0:	2b06      	cmp	r3, #6
 801a1c2:	d10d      	bne.n	801a1e0 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801a1c4:	f640 0089 	movw	r0, #2185	; 0x889
 801a1c8:	f000 ff76 	bl	801b0b8 <SUBGRF_ReadRegister>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	f023 0304 	bic.w	r3, r3, #4
 801a1d2:	b2db      	uxtb	r3, r3
 801a1d4:	4619      	mov	r1, r3
 801a1d6:	f640 0089 	movw	r0, #2185	; 0x889
 801a1da:	f000 ff59 	bl	801b090 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 801a1de:	e02d      	b.n	801a23c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801a1e0:	f640 0089 	movw	r0, #2185	; 0x889
 801a1e4:	f000 ff68 	bl	801b0b8 <SUBGRF_ReadRegister>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	f043 0304 	orr.w	r3, r3, #4
 801a1ee:	b2db      	uxtb	r3, r3
 801a1f0:	4619      	mov	r1, r3
 801a1f2:	f640 0089 	movw	r0, #2185	; 0x889
 801a1f6:	f000 ff4b 	bl	801b090 <SUBGRF_WriteRegister>
        break;
 801a1fa:	e01f      	b.n	801a23c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801a1fc:	68bb      	ldr	r3, [r7, #8]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	2b00      	cmp	r3, #0
 801a202:	d004      	beq.n	801a20e <RadioSetTxGenericConfig+0x402>
 801a204:	68bb      	ldr	r3, [r7, #8]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801a20c:	d902      	bls.n	801a214 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801a20e:	f04f 33ff 	mov.w	r3, #4294967295
 801a212:	e027      	b.n	801a264 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801a214:	2003      	movs	r0, #3
 801a216:	f7fe f905 	bl	8018424 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a21a:	4b14      	ldr	r3, [pc, #80]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a21c:	2202      	movs	r2, #2
 801a21e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801a222:	68bb      	ldr	r3, [r7, #8]
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	4a11      	ldr	r2, [pc, #68]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a228:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a22a:	4b10      	ldr	r3, [pc, #64]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a22c:	2216      	movs	r2, #22
 801a22e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a232:	480f      	ldr	r0, [pc, #60]	; (801a270 <RadioSetTxGenericConfig+0x464>)
 801a234:	f000 fd12 	bl	801ac5c <SUBGRF_SetModulationParams>
        break;
 801a238:	e000      	b.n	801a23c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801a23a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a23c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a240:	4618      	mov	r0, r3
 801a242:	f001 f841 	bl	801b2c8 <SUBGRF_SetRfTxPower>
 801a246:	4603      	mov	r3, r0
 801a248:	461a      	mov	r2, r3
 801a24a:	4b08      	ldr	r3, [pc, #32]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a24c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a250:	4b06      	ldr	r3, [pc, #24]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a252:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a256:	4618      	mov	r0, r3
 801a258:	f001 fa05 	bl	801b666 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a25c:	4a03      	ldr	r2, [pc, #12]	; (801a26c <RadioSetTxGenericConfig+0x460>)
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	6053      	str	r3, [r2, #4]
    return 0;
 801a262:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801a264:	4618      	mov	r0, r3
 801a266:	3738      	adds	r7, #56	; 0x38
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}
 801a26c:	20001a9c 	.word	0x20001a9c
 801a270:	20001ad4 	.word	0x20001ad4
 801a274:	20001aaa 	.word	0x20001aaa

0801a278 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b084      	sub	sp, #16
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d002      	beq.n	801a28c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801a286:	4a1a      	ldr	r2, [pc, #104]	; (801a2f0 <SUBGRF_Init+0x78>)
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801a28c:	f7e7 fb76 	bl	800197c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a290:	2002      	movs	r0, #2
 801a292:	f001 f8e5 	bl	801b460 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801a296:	4b17      	ldr	r3, [pc, #92]	; (801a2f4 <SUBGRF_Init+0x7c>)
 801a298:	2200      	movs	r2, #0
 801a29a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801a29c:	2000      	movs	r0, #0
 801a29e:	f000 f977 	bl	801a590 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801a2a2:	f7f0 fa2b 	bl	800a6fc <RBI_IsTCXO>
 801a2a6:	4603      	mov	r3, r0
 801a2a8:	2b01      	cmp	r3, #1
 801a2aa:	d10e      	bne.n	801a2ca <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801a2ac:	2140      	movs	r1, #64	; 0x40
 801a2ae:	2001      	movs	r0, #1
 801a2b0:	f000 fb78 	bl	801a9a4 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801a2b4:	2100      	movs	r1, #0
 801a2b6:	f640 1011 	movw	r0, #2321	; 0x911
 801a2ba:	f000 fee9 	bl	801b090 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801a2be:	237f      	movs	r3, #127	; 0x7f
 801a2c0:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801a2c2:	7b38      	ldrb	r0, [r7, #12]
 801a2c4:	f000 fa85 	bl	801a7d2 <SUBGRF_Calibrate>
 801a2c8:	e009      	b.n	801a2de <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a2ca:	2120      	movs	r1, #32
 801a2cc:	f640 1011 	movw	r0, #2321	; 0x911
 801a2d0:	f000 fede 	bl	801b090 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801a2d4:	2120      	movs	r1, #32
 801a2d6:	f640 1012 	movw	r0, #2322	; 0x912
 801a2da:	f000 fed9 	bl	801b090 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 801a2de:	f7f0 f9f1 	bl	800a6c4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801a2e2:	4b05      	ldr	r3, [pc, #20]	; (801a2f8 <SUBGRF_Init+0x80>)
 801a2e4:	2201      	movs	r2, #1
 801a2e6:	701a      	strb	r2, [r3, #0]
}
 801a2e8:	bf00      	nop
 801a2ea:	3710      	adds	r7, #16
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	bd80      	pop	{r7, pc}
 801a2f0:	20001b34 	.word	0x20001b34
 801a2f4:	20001b30 	.word	0x20001b30
 801a2f8:	20001b28 	.word	0x20001b28

0801a2fc <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801a2fc:	b480      	push	{r7}
 801a2fe:	af00      	add	r7, sp, #0
    return OperatingMode;
 801a300:	4b02      	ldr	r3, [pc, #8]	; (801a30c <SUBGRF_GetOperatingMode+0x10>)
 801a302:	781b      	ldrb	r3, [r3, #0]
}
 801a304:	4618      	mov	r0, r3
 801a306:	46bd      	mov	sp, r7
 801a308:	bc80      	pop	{r7}
 801a30a:	4770      	bx	lr
 801a30c:	20001b28 	.word	0x20001b28

0801a310 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801a310:	b580      	push	{r7, lr}
 801a312:	b082      	sub	sp, #8
 801a314:	af00      	add	r7, sp, #0
 801a316:	6078      	str	r0, [r7, #4]
 801a318:	460b      	mov	r3, r1
 801a31a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801a31c:	78fb      	ldrb	r3, [r7, #3]
 801a31e:	461a      	mov	r2, r3
 801a320:	6879      	ldr	r1, [r7, #4]
 801a322:	2000      	movs	r0, #0
 801a324:	f000 ff20 	bl	801b168 <SUBGRF_WriteBuffer>
}
 801a328:	bf00      	nop
 801a32a:	3708      	adds	r7, #8
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}

0801a330 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b086      	sub	sp, #24
 801a334:	af00      	add	r7, sp, #0
 801a336:	60f8      	str	r0, [r7, #12]
 801a338:	60b9      	str	r1, [r7, #8]
 801a33a:	4613      	mov	r3, r2
 801a33c:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801a33e:	2300      	movs	r3, #0
 801a340:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801a342:	f107 0317 	add.w	r3, r7, #23
 801a346:	4619      	mov	r1, r3
 801a348:	68b8      	ldr	r0, [r7, #8]
 801a34a:	f000 fe23 	bl	801af94 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801a34e:	68bb      	ldr	r3, [r7, #8]
 801a350:	781b      	ldrb	r3, [r3, #0]
 801a352:	79fa      	ldrb	r2, [r7, #7]
 801a354:	429a      	cmp	r2, r3
 801a356:	d201      	bcs.n	801a35c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801a358:	2301      	movs	r3, #1
 801a35a:	e007      	b.n	801a36c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801a35c:	7df8      	ldrb	r0, [r7, #23]
 801a35e:	68bb      	ldr	r3, [r7, #8]
 801a360:	781b      	ldrb	r3, [r3, #0]
 801a362:	461a      	mov	r2, r3
 801a364:	68f9      	ldr	r1, [r7, #12]
 801a366:	f000 ff21 	bl	801b1ac <SUBGRF_ReadBuffer>

    return 0;
 801a36a:	2300      	movs	r3, #0
}
 801a36c:	4618      	mov	r0, r3
 801a36e:	3718      	adds	r7, #24
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}

0801a374 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b084      	sub	sp, #16
 801a378:	af00      	add	r7, sp, #0
 801a37a:	60f8      	str	r0, [r7, #12]
 801a37c:	460b      	mov	r3, r1
 801a37e:	607a      	str	r2, [r7, #4]
 801a380:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801a382:	7afb      	ldrb	r3, [r7, #11]
 801a384:	4619      	mov	r1, r3
 801a386:	68f8      	ldr	r0, [r7, #12]
 801a388:	f7ff ffc2 	bl	801a310 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801a38c:	6878      	ldr	r0, [r7, #4]
 801a38e:	f000 f91b 	bl	801a5c8 <SUBGRF_SetTx>
}
 801a392:	bf00      	nop
 801a394:	3710      	adds	r7, #16
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}

0801a39a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801a39a:	b580      	push	{r7, lr}
 801a39c:	b082      	sub	sp, #8
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801a3a2:	2208      	movs	r2, #8
 801a3a4:	6879      	ldr	r1, [r7, #4]
 801a3a6:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801a3aa:	f000 fe99 	bl	801b0e0 <SUBGRF_WriteRegisters>
    return 0;
 801a3ae:	2300      	movs	r3, #0
}
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	3708      	adds	r7, #8
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}

0801a3b8 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b084      	sub	sp, #16
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	4603      	mov	r3, r0
 801a3c0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801a3c2:	88fb      	ldrh	r3, [r7, #6]
 801a3c4:	0a1b      	lsrs	r3, r3, #8
 801a3c6:	b29b      	uxth	r3, r3
 801a3c8:	b2db      	uxtb	r3, r3
 801a3ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801a3cc:	88fb      	ldrh	r3, [r7, #6]
 801a3ce:	b2db      	uxtb	r3, r3
 801a3d0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a3d2:	f000 fb6b 	bl	801aaac <SUBGRF_GetPacketType>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d108      	bne.n	801a3ee <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801a3dc:	f107 030c 	add.w	r3, r7, #12
 801a3e0:	2202      	movs	r2, #2
 801a3e2:	4619      	mov	r1, r3
 801a3e4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801a3e8:	f000 fe7a 	bl	801b0e0 <SUBGRF_WriteRegisters>
            break;
 801a3ec:	e000      	b.n	801a3f0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801a3ee:	bf00      	nop
    }
}
 801a3f0:	bf00      	nop
 801a3f2:	3710      	adds	r7, #16
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}

0801a3f8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b084      	sub	sp, #16
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	4603      	mov	r3, r0
 801a400:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801a402:	88fb      	ldrh	r3, [r7, #6]
 801a404:	0a1b      	lsrs	r3, r3, #8
 801a406:	b29b      	uxth	r3, r3
 801a408:	b2db      	uxtb	r3, r3
 801a40a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801a40c:	88fb      	ldrh	r3, [r7, #6]
 801a40e:	b2db      	uxtb	r3, r3
 801a410:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801a412:	f000 fb4b 	bl	801aaac <SUBGRF_GetPacketType>
 801a416:	4603      	mov	r3, r0
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d108      	bne.n	801a42e <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801a41c:	f107 030c 	add.w	r3, r7, #12
 801a420:	2202      	movs	r2, #2
 801a422:	4619      	mov	r1, r3
 801a424:	f240 60be 	movw	r0, #1726	; 0x6be
 801a428:	f000 fe5a 	bl	801b0e0 <SUBGRF_WriteRegisters>
            break;
 801a42c:	e000      	b.n	801a430 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801a42e:	bf00      	nop
    }
}
 801a430:	bf00      	nop
 801a432:	3710      	adds	r7, #16
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}

0801a438 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801a438:	b580      	push	{r7, lr}
 801a43a:	b084      	sub	sp, #16
 801a43c:	af00      	add	r7, sp, #0
 801a43e:	4603      	mov	r3, r0
 801a440:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801a442:	2300      	movs	r3, #0
 801a444:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801a446:	f000 fb31 	bl	801aaac <SUBGRF_GetPacketType>
 801a44a:	4603      	mov	r3, r0
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d121      	bne.n	801a494 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801a450:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a454:	f000 fe30 	bl	801b0b8 <SUBGRF_ReadRegister>
 801a458:	4603      	mov	r3, r0
 801a45a:	f023 0301 	bic.w	r3, r3, #1
 801a45e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801a460:	88fb      	ldrh	r3, [r7, #6]
 801a462:	0a1b      	lsrs	r3, r3, #8
 801a464:	b29b      	uxth	r3, r3
 801a466:	b25b      	sxtb	r3, r3
 801a468:	f003 0301 	and.w	r3, r3, #1
 801a46c:	b25a      	sxtb	r2, r3
 801a46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a472:	4313      	orrs	r3, r2
 801a474:	b25b      	sxtb	r3, r3
 801a476:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801a478:	7bfb      	ldrb	r3, [r7, #15]
 801a47a:	4619      	mov	r1, r3
 801a47c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801a480:	f000 fe06 	bl	801b090 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801a484:	88fb      	ldrh	r3, [r7, #6]
 801a486:	b2db      	uxtb	r3, r3
 801a488:	4619      	mov	r1, r3
 801a48a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801a48e:	f000 fdff 	bl	801b090 <SUBGRF_WriteRegister>
            break;
 801a492:	e000      	b.n	801a496 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801a494:	bf00      	nop
    }
}
 801a496:	bf00      	nop
 801a498:	3710      	adds	r7, #16
 801a49a:	46bd      	mov	sp, r7
 801a49c:	bd80      	pop	{r7, pc}

0801a49e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801a49e:	b580      	push	{r7, lr}
 801a4a0:	b082      	sub	sp, #8
 801a4a2:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801a4b0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a4b4:	f000 fe00 	bl	801b0b8 <SUBGRF_ReadRegister>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801a4bc:	79fb      	ldrb	r3, [r7, #7]
 801a4be:	f023 0301 	bic.w	r3, r3, #1
 801a4c2:	b2db      	uxtb	r3, r3
 801a4c4:	4619      	mov	r1, r3
 801a4c6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a4ca:	f000 fde1 	bl	801b090 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801a4ce:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a4d2:	f000 fdf1 	bl	801b0b8 <SUBGRF_ReadRegister>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801a4da:	79bb      	ldrb	r3, [r7, #6]
 801a4dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	4619      	mov	r1, r3
 801a4e4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a4e8:	f000 fdd2 	bl	801b090 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801a4ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801a4f0:	f000 f88a 	bl	801a608 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801a4f4:	463b      	mov	r3, r7
 801a4f6:	2204      	movs	r2, #4
 801a4f8:	4619      	mov	r1, r3
 801a4fa:	f640 0019 	movw	r0, #2073	; 0x819
 801a4fe:	f000 fe11 	bl	801b124 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801a502:	2000      	movs	r0, #0
 801a504:	f000 f844 	bl	801a590 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801a508:	79fb      	ldrb	r3, [r7, #7]
 801a50a:	4619      	mov	r1, r3
 801a50c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801a510:	f000 fdbe 	bl	801b090 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801a514:	79bb      	ldrb	r3, [r7, #6]
 801a516:	4619      	mov	r1, r3
 801a518:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801a51c:	f000 fdb8 	bl	801b090 <SUBGRF_WriteRegister>

    return number;
 801a520:	683b      	ldr	r3, [r7, #0]
}
 801a522:	4618      	mov	r0, r3
 801a524:	3708      	adds	r7, #8
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}
	...

0801a52c <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b084      	sub	sp, #16
 801a530:	af00      	add	r7, sp, #0
 801a532:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801a534:	2000      	movs	r0, #0
 801a536:	f7f0 f8cc 	bl	800a6d2 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801a53a:	2002      	movs	r0, #2
 801a53c:	f000 ff90 	bl	801b460 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a540:	793b      	ldrb	r3, [r7, #4]
 801a542:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a546:	b2db      	uxtb	r3, r3
 801a548:	009b      	lsls	r3, r3, #2
 801a54a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a54c:	793b      	ldrb	r3, [r7, #4]
 801a54e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a552:	b2db      	uxtb	r3, r3
 801a554:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a556:	b25b      	sxtb	r3, r3
 801a558:	4313      	orrs	r3, r2
 801a55a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801a55c:	793b      	ldrb	r3, [r7, #4]
 801a55e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a562:	b2db      	uxtb	r3, r3
 801a564:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801a566:	4313      	orrs	r3, r2
 801a568:	b25b      	sxtb	r3, r3
 801a56a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801a56c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801a56e:	f107 030f 	add.w	r3, r7, #15
 801a572:	2201      	movs	r2, #1
 801a574:	4619      	mov	r1, r3
 801a576:	2084      	movs	r0, #132	; 0x84
 801a578:	f000 fe3a 	bl	801b1f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801a57c:	4b03      	ldr	r3, [pc, #12]	; (801a58c <SUBGRF_SetSleep+0x60>)
 801a57e:	2200      	movs	r2, #0
 801a580:	701a      	strb	r2, [r3, #0]
}
 801a582:	bf00      	nop
 801a584:	3710      	adds	r7, #16
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	20001b28 	.word	0x20001b28

0801a590 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801a590:	b580      	push	{r7, lr}
 801a592:	b082      	sub	sp, #8
 801a594:	af00      	add	r7, sp, #0
 801a596:	4603      	mov	r3, r0
 801a598:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801a59a:	1dfb      	adds	r3, r7, #7
 801a59c:	2201      	movs	r2, #1
 801a59e:	4619      	mov	r1, r3
 801a5a0:	2080      	movs	r0, #128	; 0x80
 801a5a2:	f000 fe25 	bl	801b1f0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801a5a6:	79fb      	ldrb	r3, [r7, #7]
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	d103      	bne.n	801a5b4 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801a5ac:	4b05      	ldr	r3, [pc, #20]	; (801a5c4 <SUBGRF_SetStandby+0x34>)
 801a5ae:	2201      	movs	r2, #1
 801a5b0:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801a5b2:	e002      	b.n	801a5ba <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801a5b4:	4b03      	ldr	r3, [pc, #12]	; (801a5c4 <SUBGRF_SetStandby+0x34>)
 801a5b6:	2202      	movs	r2, #2
 801a5b8:	701a      	strb	r2, [r3, #0]
}
 801a5ba:	bf00      	nop
 801a5bc:	3708      	adds	r7, #8
 801a5be:	46bd      	mov	sp, r7
 801a5c0:	bd80      	pop	{r7, pc}
 801a5c2:	bf00      	nop
 801a5c4:	20001b28 	.word	0x20001b28

0801a5c8 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b084      	sub	sp, #16
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801a5d0:	4b0c      	ldr	r3, [pc, #48]	; (801a604 <SUBGRF_SetTx+0x3c>)
 801a5d2:	2204      	movs	r2, #4
 801a5d4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	0c1b      	lsrs	r3, r3, #16
 801a5da:	b2db      	uxtb	r3, r3
 801a5dc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	0a1b      	lsrs	r3, r3, #8
 801a5e2:	b2db      	uxtb	r3, r3
 801a5e4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	b2db      	uxtb	r3, r3
 801a5ea:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801a5ec:	f107 030c 	add.w	r3, r7, #12
 801a5f0:	2203      	movs	r2, #3
 801a5f2:	4619      	mov	r1, r3
 801a5f4:	2083      	movs	r0, #131	; 0x83
 801a5f6:	f000 fdfb 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a5fa:	bf00      	nop
 801a5fc:	3710      	adds	r7, #16
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd80      	pop	{r7, pc}
 801a602:	bf00      	nop
 801a604:	20001b28 	.word	0x20001b28

0801a608 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b084      	sub	sp, #16
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a610:	4b0c      	ldr	r3, [pc, #48]	; (801a644 <SUBGRF_SetRx+0x3c>)
 801a612:	2205      	movs	r2, #5
 801a614:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	0c1b      	lsrs	r3, r3, #16
 801a61a:	b2db      	uxtb	r3, r3
 801a61c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	0a1b      	lsrs	r3, r3, #8
 801a622:	b2db      	uxtb	r3, r3
 801a624:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	b2db      	uxtb	r3, r3
 801a62a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a62c:	f107 030c 	add.w	r3, r7, #12
 801a630:	2203      	movs	r2, #3
 801a632:	4619      	mov	r1, r3
 801a634:	2082      	movs	r0, #130	; 0x82
 801a636:	f000 fddb 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a63a:	bf00      	nop
 801a63c:	3710      	adds	r7, #16
 801a63e:	46bd      	mov	sp, r7
 801a640:	bd80      	pop	{r7, pc}
 801a642:	bf00      	nop
 801a644:	20001b28 	.word	0x20001b28

0801a648 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b084      	sub	sp, #16
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a650:	4b0e      	ldr	r3, [pc, #56]	; (801a68c <SUBGRF_SetRxBoosted+0x44>)
 801a652:	2205      	movs	r2, #5
 801a654:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a656:	2197      	movs	r1, #151	; 0x97
 801a658:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a65c:	f000 fd18 	bl	801b090 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	0c1b      	lsrs	r3, r3, #16
 801a664:	b2db      	uxtb	r3, r3
 801a666:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	0a1b      	lsrs	r3, r3, #8
 801a66c:	b2db      	uxtb	r3, r3
 801a66e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	b2db      	uxtb	r3, r3
 801a674:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a676:	f107 030c 	add.w	r3, r7, #12
 801a67a:	2203      	movs	r2, #3
 801a67c:	4619      	mov	r1, r3
 801a67e:	2082      	movs	r0, #130	; 0x82
 801a680:	f000 fdb6 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a684:	bf00      	nop
 801a686:	3710      	adds	r7, #16
 801a688:	46bd      	mov	sp, r7
 801a68a:	bd80      	pop	{r7, pc}
 801a68c:	20001b28 	.word	0x20001b28

0801a690 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a690:	b580      	push	{r7, lr}
 801a692:	b084      	sub	sp, #16
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
 801a698:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	0c1b      	lsrs	r3, r3, #16
 801a69e:	b2db      	uxtb	r3, r3
 801a6a0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	0a1b      	lsrs	r3, r3, #8
 801a6a6:	b2db      	uxtb	r3, r3
 801a6a8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	b2db      	uxtb	r3, r3
 801a6ae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	0c1b      	lsrs	r3, r3, #16
 801a6b4:	b2db      	uxtb	r3, r3
 801a6b6:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a6b8:	683b      	ldr	r3, [r7, #0]
 801a6ba:	0a1b      	lsrs	r3, r3, #8
 801a6bc:	b2db      	uxtb	r3, r3
 801a6be:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	b2db      	uxtb	r3, r3
 801a6c4:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a6c6:	f107 0308 	add.w	r3, r7, #8
 801a6ca:	2206      	movs	r2, #6
 801a6cc:	4619      	mov	r1, r3
 801a6ce:	2094      	movs	r0, #148	; 0x94
 801a6d0:	f000 fd8e 	bl	801b1f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a6d4:	4b03      	ldr	r3, [pc, #12]	; (801a6e4 <SUBGRF_SetRxDutyCycle+0x54>)
 801a6d6:	2206      	movs	r2, #6
 801a6d8:	701a      	strb	r2, [r3, #0]
}
 801a6da:	bf00      	nop
 801a6dc:	3710      	adds	r7, #16
 801a6de:	46bd      	mov	sp, r7
 801a6e0:	bd80      	pop	{r7, pc}
 801a6e2:	bf00      	nop
 801a6e4:	20001b28 	.word	0x20001b28

0801a6e8 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a6e8:	b580      	push	{r7, lr}
 801a6ea:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a6ec:	2200      	movs	r2, #0
 801a6ee:	2100      	movs	r1, #0
 801a6f0:	20c5      	movs	r0, #197	; 0xc5
 801a6f2:	f000 fd7d 	bl	801b1f0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a6f6:	4b02      	ldr	r3, [pc, #8]	; (801a700 <SUBGRF_SetCad+0x18>)
 801a6f8:	2207      	movs	r2, #7
 801a6fa:	701a      	strb	r2, [r3, #0]
}
 801a6fc:	bf00      	nop
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	20001b28 	.word	0x20001b28

0801a704 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a704:	b580      	push	{r7, lr}
 801a706:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a708:	2200      	movs	r2, #0
 801a70a:	2100      	movs	r1, #0
 801a70c:	20d1      	movs	r0, #209	; 0xd1
 801a70e:	f000 fd6f 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a712:	bf00      	nop
 801a714:	bd80      	pop	{r7, pc}

0801a716 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a716:	b580      	push	{r7, lr}
 801a718:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a71a:	2200      	movs	r2, #0
 801a71c:	2100      	movs	r1, #0
 801a71e:	20d2      	movs	r0, #210	; 0xd2
 801a720:	f000 fd66 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a724:	bf00      	nop
 801a726:	bd80      	pop	{r7, pc}

0801a728 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b082      	sub	sp, #8
 801a72c:	af00      	add	r7, sp, #0
 801a72e:	4603      	mov	r3, r0
 801a730:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a732:	1dfb      	adds	r3, r7, #7
 801a734:	2201      	movs	r2, #1
 801a736:	4619      	mov	r1, r3
 801a738:	209f      	movs	r0, #159	; 0x9f
 801a73a:	f000 fd59 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a73e:	bf00      	nop
 801a740:	3708      	adds	r7, #8
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}

0801a746 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a746:	b580      	push	{r7, lr}
 801a748:	b084      	sub	sp, #16
 801a74a:	af00      	add	r7, sp, #0
 801a74c:	4603      	mov	r3, r0
 801a74e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a750:	1dfb      	adds	r3, r7, #7
 801a752:	2201      	movs	r2, #1
 801a754:	4619      	mov	r1, r3
 801a756:	20a0      	movs	r0, #160	; 0xa0
 801a758:	f000 fd4a 	bl	801b1f0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a75c:	79fb      	ldrb	r3, [r7, #7]
 801a75e:	2b3f      	cmp	r3, #63	; 0x3f
 801a760:	d91c      	bls.n	801a79c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a762:	79fb      	ldrb	r3, [r7, #7]
 801a764:	085b      	lsrs	r3, r3, #1
 801a766:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a768:	2300      	movs	r3, #0
 801a76a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a76c:	2300      	movs	r3, #0
 801a76e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a770:	e005      	b.n	801a77e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a772:	7bfb      	ldrb	r3, [r7, #15]
 801a774:	089b      	lsrs	r3, r3, #2
 801a776:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a778:	7bbb      	ldrb	r3, [r7, #14]
 801a77a:	3301      	adds	r3, #1
 801a77c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a77e:	7bfb      	ldrb	r3, [r7, #15]
 801a780:	2b1f      	cmp	r3, #31
 801a782:	d8f6      	bhi.n	801a772 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a784:	7bfb      	ldrb	r3, [r7, #15]
 801a786:	00db      	lsls	r3, r3, #3
 801a788:	b2da      	uxtb	r2, r3
 801a78a:	7bbb      	ldrb	r3, [r7, #14]
 801a78c:	4413      	add	r3, r2
 801a78e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a790:	7b7b      	ldrb	r3, [r7, #13]
 801a792:	4619      	mov	r1, r3
 801a794:	f240 7006 	movw	r0, #1798	; 0x706
 801a798:	f000 fc7a 	bl	801b090 <SUBGRF_WriteRegister>
    }
}
 801a79c:	bf00      	nop
 801a79e:	3710      	adds	r7, #16
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bd80      	pop	{r7, pc}

0801a7a4 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a7a4:	b580      	push	{r7, lr}
 801a7a6:	b082      	sub	sp, #8
 801a7a8:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a7aa:	f7ef ffae 	bl	800a70a <RBI_IsDCDC>
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	2b01      	cmp	r3, #1
 801a7b2:	d102      	bne.n	801a7ba <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a7b4:	2301      	movs	r3, #1
 801a7b6:	71fb      	strb	r3, [r7, #7]
 801a7b8:	e001      	b.n	801a7be <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a7be:	1dfb      	adds	r3, r7, #7
 801a7c0:	2201      	movs	r2, #1
 801a7c2:	4619      	mov	r1, r3
 801a7c4:	2096      	movs	r0, #150	; 0x96
 801a7c6:	f000 fd13 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a7ca:	bf00      	nop
 801a7cc:	3708      	adds	r7, #8
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}

0801a7d2 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a7d2:	b580      	push	{r7, lr}
 801a7d4:	b084      	sub	sp, #16
 801a7d6:	af00      	add	r7, sp, #0
 801a7d8:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a7da:	793b      	ldrb	r3, [r7, #4]
 801a7dc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	019b      	lsls	r3, r3, #6
 801a7e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a7e6:	793b      	ldrb	r3, [r7, #4]
 801a7e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a7ec:	b2db      	uxtb	r3, r3
 801a7ee:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a7f0:	b25b      	sxtb	r3, r3
 801a7f2:	4313      	orrs	r3, r2
 801a7f4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a7f6:	793b      	ldrb	r3, [r7, #4]
 801a7f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a7fc:	b2db      	uxtb	r3, r3
 801a7fe:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a800:	b25b      	sxtb	r3, r3
 801a802:	4313      	orrs	r3, r2
 801a804:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a806:	793b      	ldrb	r3, [r7, #4]
 801a808:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a80c:	b2db      	uxtb	r3, r3
 801a80e:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a810:	b25b      	sxtb	r3, r3
 801a812:	4313      	orrs	r3, r2
 801a814:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a816:	793b      	ldrb	r3, [r7, #4]
 801a818:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a81c:	b2db      	uxtb	r3, r3
 801a81e:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a820:	b25b      	sxtb	r3, r3
 801a822:	4313      	orrs	r3, r2
 801a824:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a826:	793b      	ldrb	r3, [r7, #4]
 801a828:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a82c:	b2db      	uxtb	r3, r3
 801a82e:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a830:	b25b      	sxtb	r3, r3
 801a832:	4313      	orrs	r3, r2
 801a834:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a836:	793b      	ldrb	r3, [r7, #4]
 801a838:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a83c:	b2db      	uxtb	r3, r3
 801a83e:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a840:	4313      	orrs	r3, r2
 801a842:	b25b      	sxtb	r3, r3
 801a844:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a846:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a848:	f107 030f 	add.w	r3, r7, #15
 801a84c:	2201      	movs	r2, #1
 801a84e:	4619      	mov	r1, r3
 801a850:	2089      	movs	r0, #137	; 0x89
 801a852:	f000 fccd 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a856:	bf00      	nop
 801a858:	3710      	adds	r7, #16
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
	...

0801a860 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b084      	sub	sp, #16
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	4a1b      	ldr	r2, [pc, #108]	; (801a8d8 <SUBGRF_CalibrateImage+0x78>)
 801a86c:	4293      	cmp	r3, r2
 801a86e:	d904      	bls.n	801a87a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a870:	23e1      	movs	r3, #225	; 0xe1
 801a872:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a874:	23e9      	movs	r3, #233	; 0xe9
 801a876:	737b      	strb	r3, [r7, #13]
 801a878:	e022      	b.n	801a8c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	4a17      	ldr	r2, [pc, #92]	; (801a8dc <SUBGRF_CalibrateImage+0x7c>)
 801a87e:	4293      	cmp	r3, r2
 801a880:	d904      	bls.n	801a88c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a882:	23d7      	movs	r3, #215	; 0xd7
 801a884:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a886:	23db      	movs	r3, #219	; 0xdb
 801a888:	737b      	strb	r3, [r7, #13]
 801a88a:	e019      	b.n	801a8c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	4a14      	ldr	r2, [pc, #80]	; (801a8e0 <SUBGRF_CalibrateImage+0x80>)
 801a890:	4293      	cmp	r3, r2
 801a892:	d904      	bls.n	801a89e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a894:	23c1      	movs	r3, #193	; 0xc1
 801a896:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a898:	23c5      	movs	r3, #197	; 0xc5
 801a89a:	737b      	strb	r3, [r7, #13]
 801a89c:	e010      	b.n	801a8c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	4a10      	ldr	r2, [pc, #64]	; (801a8e4 <SUBGRF_CalibrateImage+0x84>)
 801a8a2:	4293      	cmp	r3, r2
 801a8a4:	d904      	bls.n	801a8b0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a8a6:	2375      	movs	r3, #117	; 0x75
 801a8a8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a8aa:	2381      	movs	r3, #129	; 0x81
 801a8ac:	737b      	strb	r3, [r7, #13]
 801a8ae:	e007      	b.n	801a8c0 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	4a0d      	ldr	r2, [pc, #52]	; (801a8e8 <SUBGRF_CalibrateImage+0x88>)
 801a8b4:	4293      	cmp	r3, r2
 801a8b6:	d903      	bls.n	801a8c0 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a8b8:	236b      	movs	r3, #107	; 0x6b
 801a8ba:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a8bc:	236f      	movs	r3, #111	; 0x6f
 801a8be:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a8c0:	f107 030c 	add.w	r3, r7, #12
 801a8c4:	2202      	movs	r2, #2
 801a8c6:	4619      	mov	r1, r3
 801a8c8:	2098      	movs	r0, #152	; 0x98
 801a8ca:	f000 fc91 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a8ce:	bf00      	nop
 801a8d0:	3710      	adds	r7, #16
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	bd80      	pop	{r7, pc}
 801a8d6:	bf00      	nop
 801a8d8:	35a4e900 	.word	0x35a4e900
 801a8dc:	32a9f880 	.word	0x32a9f880
 801a8e0:	2de54480 	.word	0x2de54480
 801a8e4:	1b6b0b00 	.word	0x1b6b0b00
 801a8e8:	1954fc40 	.word	0x1954fc40

0801a8ec <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a8ec:	b590      	push	{r4, r7, lr}
 801a8ee:	b085      	sub	sp, #20
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	4608      	mov	r0, r1
 801a8f6:	4611      	mov	r1, r2
 801a8f8:	461a      	mov	r2, r3
 801a8fa:	4623      	mov	r3, r4
 801a8fc:	71fb      	strb	r3, [r7, #7]
 801a8fe:	4603      	mov	r3, r0
 801a900:	71bb      	strb	r3, [r7, #6]
 801a902:	460b      	mov	r3, r1
 801a904:	717b      	strb	r3, [r7, #5]
 801a906:	4613      	mov	r3, r2
 801a908:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a90a:	79fb      	ldrb	r3, [r7, #7]
 801a90c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a90e:	79bb      	ldrb	r3, [r7, #6]
 801a910:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a912:	797b      	ldrb	r3, [r7, #5]
 801a914:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a916:	793b      	ldrb	r3, [r7, #4]
 801a918:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a91a:	f107 030c 	add.w	r3, r7, #12
 801a91e:	2204      	movs	r2, #4
 801a920:	4619      	mov	r1, r3
 801a922:	2095      	movs	r0, #149	; 0x95
 801a924:	f000 fc64 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a928:	bf00      	nop
 801a92a:	3714      	adds	r7, #20
 801a92c:	46bd      	mov	sp, r7
 801a92e:	bd90      	pop	{r4, r7, pc}

0801a930 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a930:	b590      	push	{r4, r7, lr}
 801a932:	b085      	sub	sp, #20
 801a934:	af00      	add	r7, sp, #0
 801a936:	4604      	mov	r4, r0
 801a938:	4608      	mov	r0, r1
 801a93a:	4611      	mov	r1, r2
 801a93c:	461a      	mov	r2, r3
 801a93e:	4623      	mov	r3, r4
 801a940:	80fb      	strh	r3, [r7, #6]
 801a942:	4603      	mov	r3, r0
 801a944:	80bb      	strh	r3, [r7, #4]
 801a946:	460b      	mov	r3, r1
 801a948:	807b      	strh	r3, [r7, #2]
 801a94a:	4613      	mov	r3, r2
 801a94c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a94e:	88fb      	ldrh	r3, [r7, #6]
 801a950:	0a1b      	lsrs	r3, r3, #8
 801a952:	b29b      	uxth	r3, r3
 801a954:	b2db      	uxtb	r3, r3
 801a956:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a958:	88fb      	ldrh	r3, [r7, #6]
 801a95a:	b2db      	uxtb	r3, r3
 801a95c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a95e:	88bb      	ldrh	r3, [r7, #4]
 801a960:	0a1b      	lsrs	r3, r3, #8
 801a962:	b29b      	uxth	r3, r3
 801a964:	b2db      	uxtb	r3, r3
 801a966:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a968:	88bb      	ldrh	r3, [r7, #4]
 801a96a:	b2db      	uxtb	r3, r3
 801a96c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a96e:	887b      	ldrh	r3, [r7, #2]
 801a970:	0a1b      	lsrs	r3, r3, #8
 801a972:	b29b      	uxth	r3, r3
 801a974:	b2db      	uxtb	r3, r3
 801a976:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a978:	887b      	ldrh	r3, [r7, #2]
 801a97a:	b2db      	uxtb	r3, r3
 801a97c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a97e:	883b      	ldrh	r3, [r7, #0]
 801a980:	0a1b      	lsrs	r3, r3, #8
 801a982:	b29b      	uxth	r3, r3
 801a984:	b2db      	uxtb	r3, r3
 801a986:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a988:	883b      	ldrh	r3, [r7, #0]
 801a98a:	b2db      	uxtb	r3, r3
 801a98c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a98e:	f107 0308 	add.w	r3, r7, #8
 801a992:	2208      	movs	r2, #8
 801a994:	4619      	mov	r1, r3
 801a996:	2008      	movs	r0, #8
 801a998:	f000 fc2a 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a99c:	bf00      	nop
 801a99e:	3714      	adds	r7, #20
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd90      	pop	{r4, r7, pc}

0801a9a4 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a9a4:	b580      	push	{r7, lr}
 801a9a6:	b084      	sub	sp, #16
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	6039      	str	r1, [r7, #0]
 801a9ae:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a9b0:	79fb      	ldrb	r3, [r7, #7]
 801a9b2:	f003 0307 	and.w	r3, r3, #7
 801a9b6:	b2db      	uxtb	r3, r3
 801a9b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a9ba:	683b      	ldr	r3, [r7, #0]
 801a9bc:	0c1b      	lsrs	r3, r3, #16
 801a9be:	b2db      	uxtb	r3, r3
 801a9c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a9c2:	683b      	ldr	r3, [r7, #0]
 801a9c4:	0a1b      	lsrs	r3, r3, #8
 801a9c6:	b2db      	uxtb	r3, r3
 801a9c8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a9ca:	683b      	ldr	r3, [r7, #0]
 801a9cc:	b2db      	uxtb	r3, r3
 801a9ce:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a9d0:	f107 030c 	add.w	r3, r7, #12
 801a9d4:	2204      	movs	r2, #4
 801a9d6:	4619      	mov	r1, r3
 801a9d8:	2097      	movs	r0, #151	; 0x97
 801a9da:	f000 fc09 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801a9de:	bf00      	nop
 801a9e0:	3710      	adds	r7, #16
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
	...

0801a9e8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a9e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a9ec:	b084      	sub	sp, #16
 801a9ee:	af00      	add	r7, sp, #0
 801a9f0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a9f2:	2300      	movs	r3, #0
 801a9f4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a9f6:	4b1d      	ldr	r3, [pc, #116]	; (801aa6c <SUBGRF_SetRfFrequency+0x84>)
 801a9f8:	781b      	ldrb	r3, [r3, #0]
 801a9fa:	f083 0301 	eor.w	r3, r3, #1
 801a9fe:	b2db      	uxtb	r3, r3
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d005      	beq.n	801aa10 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801aa04:	6878      	ldr	r0, [r7, #4]
 801aa06:	f7ff ff2b 	bl	801a860 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801aa0a:	4b18      	ldr	r3, [pc, #96]	; (801aa6c <SUBGRF_SetRfFrequency+0x84>)
 801aa0c:	2201      	movs	r2, #1
 801aa0e:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	2200      	movs	r2, #0
 801aa14:	461c      	mov	r4, r3
 801aa16:	4615      	mov	r5, r2
 801aa18:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801aa1c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801aa20:	4a13      	ldr	r2, [pc, #76]	; (801aa70 <SUBGRF_SetRfFrequency+0x88>)
 801aa22:	f04f 0300 	mov.w	r3, #0
 801aa26:	4640      	mov	r0, r8
 801aa28:	4649      	mov	r1, r9
 801aa2a:	f7e6 f8bd 	bl	8000ba8 <__aeabi_uldivmod>
 801aa2e:	4602      	mov	r2, r0
 801aa30:	460b      	mov	r3, r1
 801aa32:	4613      	mov	r3, r2
 801aa34:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	0e1b      	lsrs	r3, r3, #24
 801aa3a:	b2db      	uxtb	r3, r3
 801aa3c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	0c1b      	lsrs	r3, r3, #16
 801aa42:	b2db      	uxtb	r3, r3
 801aa44:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801aa46:	68fb      	ldr	r3, [r7, #12]
 801aa48:	0a1b      	lsrs	r3, r3, #8
 801aa4a:	b2db      	uxtb	r3, r3
 801aa4c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	b2db      	uxtb	r3, r3
 801aa52:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801aa54:	f107 0308 	add.w	r3, r7, #8
 801aa58:	2204      	movs	r2, #4
 801aa5a:	4619      	mov	r1, r3
 801aa5c:	2086      	movs	r0, #134	; 0x86
 801aa5e:	f000 fbc7 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801aa62:	bf00      	nop
 801aa64:	3710      	adds	r7, #16
 801aa66:	46bd      	mov	sp, r7
 801aa68:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801aa6c:	20001b30 	.word	0x20001b30
 801aa70:	01e84800 	.word	0x01e84800

0801aa74 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b082      	sub	sp, #8
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801aa7e:	79fa      	ldrb	r2, [r7, #7]
 801aa80:	4b09      	ldr	r3, [pc, #36]	; (801aaa8 <SUBGRF_SetPacketType+0x34>)
 801aa82:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801aa84:	79fb      	ldrb	r3, [r7, #7]
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d104      	bne.n	801aa94 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801aa8a:	2100      	movs	r1, #0
 801aa8c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801aa90:	f000 fafe 	bl	801b090 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801aa94:	1dfb      	adds	r3, r7, #7
 801aa96:	2201      	movs	r2, #1
 801aa98:	4619      	mov	r1, r3
 801aa9a:	208a      	movs	r0, #138	; 0x8a
 801aa9c:	f000 fba8 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801aaa0:	bf00      	nop
 801aaa2:	3708      	adds	r7, #8
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	20001b29 	.word	0x20001b29

0801aaac <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801aaac:	b480      	push	{r7}
 801aaae:	af00      	add	r7, sp, #0
    return PacketType;
 801aab0:	4b02      	ldr	r3, [pc, #8]	; (801aabc <SUBGRF_GetPacketType+0x10>)
 801aab2:	781b      	ldrb	r3, [r3, #0]
}
 801aab4:	4618      	mov	r0, r3
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bc80      	pop	{r7}
 801aaba:	4770      	bx	lr
 801aabc:	20001b29 	.word	0x20001b29

0801aac0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	4603      	mov	r3, r0
 801aac8:	71fb      	strb	r3, [r7, #7]
 801aaca:	460b      	mov	r3, r1
 801aacc:	71bb      	strb	r3, [r7, #6]
 801aace:	4613      	mov	r3, r2
 801aad0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801aad2:	79fb      	ldrb	r3, [r7, #7]
 801aad4:	2b01      	cmp	r3, #1
 801aad6:	d149      	bne.n	801ab6c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801aad8:	2000      	movs	r0, #0
 801aada:	f7ef fe1d 	bl	800a718 <RBI_GetRFOMaxPowerConfig>
 801aade:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801aae0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801aae4:	68fa      	ldr	r2, [r7, #12]
 801aae6:	429a      	cmp	r2, r3
 801aae8:	da01      	bge.n	801aaee <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801aaea:	68fb      	ldr	r3, [r7, #12]
 801aaec:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	2b0e      	cmp	r3, #14
 801aaf2:	d10e      	bne.n	801ab12 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801aaf4:	2301      	movs	r3, #1
 801aaf6:	2201      	movs	r2, #1
 801aaf8:	2100      	movs	r1, #0
 801aafa:	2004      	movs	r0, #4
 801aafc:	f7ff fef6 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ab00:	79ba      	ldrb	r2, [r7, #6]
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	b2db      	uxtb	r3, r3
 801ab06:	1ad3      	subs	r3, r2, r3
 801ab08:	b2db      	uxtb	r3, r3
 801ab0a:	330e      	adds	r3, #14
 801ab0c:	b2db      	uxtb	r3, r3
 801ab0e:	71bb      	strb	r3, [r7, #6]
 801ab10:	e01f      	b.n	801ab52 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801ab12:	68fb      	ldr	r3, [r7, #12]
 801ab14:	2b0a      	cmp	r3, #10
 801ab16:	d10e      	bne.n	801ab36 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801ab18:	2301      	movs	r3, #1
 801ab1a:	2201      	movs	r2, #1
 801ab1c:	2100      	movs	r1, #0
 801ab1e:	2001      	movs	r0, #1
 801ab20:	f7ff fee4 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801ab24:	79ba      	ldrb	r2, [r7, #6]
 801ab26:	68fb      	ldr	r3, [r7, #12]
 801ab28:	b2db      	uxtb	r3, r3
 801ab2a:	1ad3      	subs	r3, r2, r3
 801ab2c:	b2db      	uxtb	r3, r3
 801ab2e:	330d      	adds	r3, #13
 801ab30:	b2db      	uxtb	r3, r3
 801ab32:	71bb      	strb	r3, [r7, #6]
 801ab34:	e00d      	b.n	801ab52 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801ab36:	2301      	movs	r3, #1
 801ab38:	2201      	movs	r2, #1
 801ab3a:	2100      	movs	r1, #0
 801ab3c:	2006      	movs	r0, #6
 801ab3e:	f7ff fed5 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801ab42:	79ba      	ldrb	r2, [r7, #6]
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	b2db      	uxtb	r3, r3
 801ab48:	1ad3      	subs	r3, r2, r3
 801ab4a:	b2db      	uxtb	r3, r3
 801ab4c:	330e      	adds	r3, #14
 801ab4e:	b2db      	uxtb	r3, r3
 801ab50:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801ab52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab56:	f113 0f11 	cmn.w	r3, #17
 801ab5a:	da01      	bge.n	801ab60 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801ab5c:	23ef      	movs	r3, #239	; 0xef
 801ab5e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801ab60:	2118      	movs	r1, #24
 801ab62:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ab66:	f000 fa93 	bl	801b090 <SUBGRF_WriteRegister>
 801ab6a:	e067      	b.n	801ac3c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801ab6c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ab70:	f000 faa2 	bl	801b0b8 <SUBGRF_ReadRegister>
 801ab74:	4603      	mov	r3, r0
 801ab76:	f043 031e 	orr.w	r3, r3, #30
 801ab7a:	b2db      	uxtb	r3, r3
 801ab7c:	4619      	mov	r1, r3
 801ab7e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801ab82:	f000 fa85 	bl	801b090 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801ab86:	2001      	movs	r0, #1
 801ab88:	f7ef fdc6 	bl	800a718 <RBI_GetRFOMaxPowerConfig>
 801ab8c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801ab8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ab92:	68fa      	ldr	r2, [r7, #12]
 801ab94:	429a      	cmp	r2, r3
 801ab96:	da01      	bge.n	801ab9c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2b14      	cmp	r3, #20
 801aba0:	d10e      	bne.n	801abc0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801aba2:	2301      	movs	r3, #1
 801aba4:	2200      	movs	r2, #0
 801aba6:	2105      	movs	r1, #5
 801aba8:	2003      	movs	r0, #3
 801abaa:	f7ff fe9f 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801abae:	79ba      	ldrb	r2, [r7, #6]
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	b2db      	uxtb	r3, r3
 801abb4:	1ad3      	subs	r3, r2, r3
 801abb6:	b2db      	uxtb	r3, r3
 801abb8:	3316      	adds	r3, #22
 801abba:	b2db      	uxtb	r3, r3
 801abbc:	71bb      	strb	r3, [r7, #6]
 801abbe:	e031      	b.n	801ac24 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	2b11      	cmp	r3, #17
 801abc4:	d10e      	bne.n	801abe4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801abc6:	2301      	movs	r3, #1
 801abc8:	2200      	movs	r2, #0
 801abca:	2103      	movs	r1, #3
 801abcc:	2002      	movs	r0, #2
 801abce:	f7ff fe8d 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801abd2:	79ba      	ldrb	r2, [r7, #6]
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	b2db      	uxtb	r3, r3
 801abd8:	1ad3      	subs	r3, r2, r3
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	3316      	adds	r3, #22
 801abde:	b2db      	uxtb	r3, r3
 801abe0:	71bb      	strb	r3, [r7, #6]
 801abe2:	e01f      	b.n	801ac24 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	2b0e      	cmp	r3, #14
 801abe8:	d10e      	bne.n	801ac08 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801abea:	2301      	movs	r3, #1
 801abec:	2200      	movs	r2, #0
 801abee:	2102      	movs	r1, #2
 801abf0:	2002      	movs	r0, #2
 801abf2:	f7ff fe7b 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801abf6:	79ba      	ldrb	r2, [r7, #6]
 801abf8:	68fb      	ldr	r3, [r7, #12]
 801abfa:	b2db      	uxtb	r3, r3
 801abfc:	1ad3      	subs	r3, r2, r3
 801abfe:	b2db      	uxtb	r3, r3
 801ac00:	330e      	adds	r3, #14
 801ac02:	b2db      	uxtb	r3, r3
 801ac04:	71bb      	strb	r3, [r7, #6]
 801ac06:	e00d      	b.n	801ac24 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801ac08:	2301      	movs	r3, #1
 801ac0a:	2200      	movs	r2, #0
 801ac0c:	2107      	movs	r1, #7
 801ac0e:	2004      	movs	r0, #4
 801ac10:	f7ff fe6c 	bl	801a8ec <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801ac14:	79ba      	ldrb	r2, [r7, #6]
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	b2db      	uxtb	r3, r3
 801ac1a:	1ad3      	subs	r3, r2, r3
 801ac1c:	b2db      	uxtb	r3, r3
 801ac1e:	3316      	adds	r3, #22
 801ac20:	b2db      	uxtb	r3, r3
 801ac22:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801ac24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801ac28:	f113 0f09 	cmn.w	r3, #9
 801ac2c:	da01      	bge.n	801ac32 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801ac2e:	23f7      	movs	r3, #247	; 0xf7
 801ac30:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801ac32:	2138      	movs	r1, #56	; 0x38
 801ac34:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ac38:	f000 fa2a 	bl	801b090 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801ac3c:	79bb      	ldrb	r3, [r7, #6]
 801ac3e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801ac40:	797b      	ldrb	r3, [r7, #5]
 801ac42:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801ac44:	f107 0308 	add.w	r3, r7, #8
 801ac48:	2202      	movs	r2, #2
 801ac4a:	4619      	mov	r1, r3
 801ac4c:	208e      	movs	r0, #142	; 0x8e
 801ac4e:	f000 facf 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801ac52:	bf00      	nop
 801ac54:	3710      	adds	r7, #16
 801ac56:	46bd      	mov	sp, r7
 801ac58:	bd80      	pop	{r7, pc}
	...

0801ac5c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801ac5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801ac60:	b086      	sub	sp, #24
 801ac62:	af00      	add	r7, sp, #0
 801ac64:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801ac66:	2300      	movs	r3, #0
 801ac68:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ac6a:	4a61      	ldr	r2, [pc, #388]	; (801adf0 <SUBGRF_SetModulationParams+0x194>)
 801ac6c:	f107 0308 	add.w	r3, r7, #8
 801ac70:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac74:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	781a      	ldrb	r2, [r3, #0]
 801ac7c:	4b5d      	ldr	r3, [pc, #372]	; (801adf4 <SUBGRF_SetModulationParams+0x198>)
 801ac7e:	781b      	ldrb	r3, [r3, #0]
 801ac80:	429a      	cmp	r2, r3
 801ac82:	d004      	beq.n	801ac8e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	781b      	ldrb	r3, [r3, #0]
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f7ff fef3 	bl	801aa74 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	781b      	ldrb	r3, [r3, #0]
 801ac92:	2b03      	cmp	r3, #3
 801ac94:	f200 80a5 	bhi.w	801ade2 <SUBGRF_SetModulationParams+0x186>
 801ac98:	a201      	add	r2, pc, #4	; (adr r2, 801aca0 <SUBGRF_SetModulationParams+0x44>)
 801ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac9e:	bf00      	nop
 801aca0:	0801acb1 	.word	0x0801acb1
 801aca4:	0801ad71 	.word	0x0801ad71
 801aca8:	0801ad33 	.word	0x0801ad33
 801acac:	0801ad9f 	.word	0x0801ad9f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801acb0:	2308      	movs	r3, #8
 801acb2:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	685b      	ldr	r3, [r3, #4]
 801acb8:	4a4f      	ldr	r2, [pc, #316]	; (801adf8 <SUBGRF_SetModulationParams+0x19c>)
 801acba:	fbb2 f3f3 	udiv	r3, r2, r3
 801acbe:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801acc0:	697b      	ldr	r3, [r7, #20]
 801acc2:	0c1b      	lsrs	r3, r3, #16
 801acc4:	b2db      	uxtb	r3, r3
 801acc6:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801acc8:	697b      	ldr	r3, [r7, #20]
 801acca:	0a1b      	lsrs	r3, r3, #8
 801accc:	b2db      	uxtb	r3, r3
 801acce:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801acd0:	697b      	ldr	r3, [r7, #20]
 801acd2:	b2db      	uxtb	r3, r3
 801acd4:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	7b1b      	ldrb	r3, [r3, #12]
 801acda:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	7b5b      	ldrb	r3, [r3, #13]
 801ace0:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	689b      	ldr	r3, [r3, #8]
 801ace6:	2200      	movs	r2, #0
 801ace8:	461c      	mov	r4, r3
 801acea:	4615      	mov	r5, r2
 801acec:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801acf0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801acf4:	4a41      	ldr	r2, [pc, #260]	; (801adfc <SUBGRF_SetModulationParams+0x1a0>)
 801acf6:	f04f 0300 	mov.w	r3, #0
 801acfa:	4640      	mov	r0, r8
 801acfc:	4649      	mov	r1, r9
 801acfe:	f7e5 ff53 	bl	8000ba8 <__aeabi_uldivmod>
 801ad02:	4602      	mov	r2, r0
 801ad04:	460b      	mov	r3, r1
 801ad06:	4613      	mov	r3, r2
 801ad08:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801ad0a:	697b      	ldr	r3, [r7, #20]
 801ad0c:	0c1b      	lsrs	r3, r3, #16
 801ad0e:	b2db      	uxtb	r3, r3
 801ad10:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801ad12:	697b      	ldr	r3, [r7, #20]
 801ad14:	0a1b      	lsrs	r3, r3, #8
 801ad16:	b2db      	uxtb	r3, r3
 801ad18:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801ad1a:	697b      	ldr	r3, [r7, #20]
 801ad1c:	b2db      	uxtb	r3, r3
 801ad1e:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad20:	7cfb      	ldrb	r3, [r7, #19]
 801ad22:	b29a      	uxth	r2, r3
 801ad24:	f107 0308 	add.w	r3, r7, #8
 801ad28:	4619      	mov	r1, r3
 801ad2a:	208b      	movs	r0, #139	; 0x8b
 801ad2c:	f000 fa60 	bl	801b1f0 <SUBGRF_WriteCommand>
        break;
 801ad30:	e058      	b.n	801ade4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801ad32:	2304      	movs	r3, #4
 801ad34:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	691b      	ldr	r3, [r3, #16]
 801ad3a:	4a2f      	ldr	r2, [pc, #188]	; (801adf8 <SUBGRF_SetModulationParams+0x19c>)
 801ad3c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ad40:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ad42:	697b      	ldr	r3, [r7, #20]
 801ad44:	0c1b      	lsrs	r3, r3, #16
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ad4a:	697b      	ldr	r3, [r7, #20]
 801ad4c:	0a1b      	lsrs	r3, r3, #8
 801ad4e:	b2db      	uxtb	r3, r3
 801ad50:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ad52:	697b      	ldr	r3, [r7, #20]
 801ad54:	b2db      	uxtb	r3, r3
 801ad56:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	7d1b      	ldrb	r3, [r3, #20]
 801ad5c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad5e:	7cfb      	ldrb	r3, [r7, #19]
 801ad60:	b29a      	uxth	r2, r3
 801ad62:	f107 0308 	add.w	r3, r7, #8
 801ad66:	4619      	mov	r1, r3
 801ad68:	208b      	movs	r0, #139	; 0x8b
 801ad6a:	f000 fa41 	bl	801b1f0 <SUBGRF_WriteCommand>
        break;
 801ad6e:	e039      	b.n	801ade4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801ad70:	2304      	movs	r3, #4
 801ad72:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	7e1b      	ldrb	r3, [r3, #24]
 801ad78:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	7e5b      	ldrb	r3, [r3, #25]
 801ad7e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	7e9b      	ldrb	r3, [r3, #26]
 801ad84:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	7edb      	ldrb	r3, [r3, #27]
 801ad8a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ad8c:	7cfb      	ldrb	r3, [r7, #19]
 801ad8e:	b29a      	uxth	r2, r3
 801ad90:	f107 0308 	add.w	r3, r7, #8
 801ad94:	4619      	mov	r1, r3
 801ad96:	208b      	movs	r0, #139	; 0x8b
 801ad98:	f000 fa2a 	bl	801b1f0 <SUBGRF_WriteCommand>

        break;
 801ad9c:	e022      	b.n	801ade4 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ad9e:	2305      	movs	r3, #5
 801ada0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	685b      	ldr	r3, [r3, #4]
 801ada6:	4a14      	ldr	r2, [pc, #80]	; (801adf8 <SUBGRF_SetModulationParams+0x19c>)
 801ada8:	fbb2 f3f3 	udiv	r3, r2, r3
 801adac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801adae:	697b      	ldr	r3, [r7, #20]
 801adb0:	0c1b      	lsrs	r3, r3, #16
 801adb2:	b2db      	uxtb	r3, r3
 801adb4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801adb6:	697b      	ldr	r3, [r7, #20]
 801adb8:	0a1b      	lsrs	r3, r3, #8
 801adba:	b2db      	uxtb	r3, r3
 801adbc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801adbe:	697b      	ldr	r3, [r7, #20]
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	7b1b      	ldrb	r3, [r3, #12]
 801adc8:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	7b5b      	ldrb	r3, [r3, #13]
 801adce:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801add0:	7cfb      	ldrb	r3, [r7, #19]
 801add2:	b29a      	uxth	r2, r3
 801add4:	f107 0308 	add.w	r3, r7, #8
 801add8:	4619      	mov	r1, r3
 801adda:	208b      	movs	r0, #139	; 0x8b
 801addc:	f000 fa08 	bl	801b1f0 <SUBGRF_WriteCommand>
        break;
 801ade0:	e000      	b.n	801ade4 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ade2:	bf00      	nop
    }
}
 801ade4:	bf00      	nop
 801ade6:	3718      	adds	r7, #24
 801ade8:	46bd      	mov	sp, r7
 801adea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801adee:	bf00      	nop
 801adf0:	0801d7e4 	.word	0x0801d7e4
 801adf4:	20001b29 	.word	0x20001b29
 801adf8:	3d090000 	.word	0x3d090000
 801adfc:	01e84800 	.word	0x01e84800

0801ae00 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b086      	sub	sp, #24
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ae0c:	4a48      	ldr	r2, [pc, #288]	; (801af30 <SUBGRF_SetPacketParams+0x130>)
 801ae0e:	f107 030c 	add.w	r3, r7, #12
 801ae12:	ca07      	ldmia	r2, {r0, r1, r2}
 801ae14:	c303      	stmia	r3!, {r0, r1}
 801ae16:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	781a      	ldrb	r2, [r3, #0]
 801ae1c:	4b45      	ldr	r3, [pc, #276]	; (801af34 <SUBGRF_SetPacketParams+0x134>)
 801ae1e:	781b      	ldrb	r3, [r3, #0]
 801ae20:	429a      	cmp	r2, r3
 801ae22:	d004      	beq.n	801ae2e <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	781b      	ldrb	r3, [r3, #0]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	f7ff fe23 	bl	801aa74 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	781b      	ldrb	r3, [r3, #0]
 801ae32:	2b03      	cmp	r3, #3
 801ae34:	d878      	bhi.n	801af28 <SUBGRF_SetPacketParams+0x128>
 801ae36:	a201      	add	r2, pc, #4	; (adr r2, 801ae3c <SUBGRF_SetPacketParams+0x3c>)
 801ae38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae3c:	0801ae4d 	.word	0x0801ae4d
 801ae40:	0801aedd 	.word	0x0801aedd
 801ae44:	0801aed1 	.word	0x0801aed1
 801ae48:	0801ae4d 	.word	0x0801ae4d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	7a5b      	ldrb	r3, [r3, #9]
 801ae50:	2bf1      	cmp	r3, #241	; 0xf1
 801ae52:	d10a      	bne.n	801ae6a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801ae54:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae58:	f7ff faae 	bl	801a3b8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801ae5c:	f248 0005 	movw	r0, #32773	; 0x8005
 801ae60:	f7ff faca 	bl	801a3f8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801ae64:	2302      	movs	r3, #2
 801ae66:	75bb      	strb	r3, [r7, #22]
 801ae68:	e011      	b.n	801ae8e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	7a5b      	ldrb	r3, [r3, #9]
 801ae6e:	2bf2      	cmp	r3, #242	; 0xf2
 801ae70:	d10a      	bne.n	801ae88 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801ae72:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801ae76:	f7ff fa9f 	bl	801a3b8 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801ae7a:	f241 0021 	movw	r0, #4129	; 0x1021
 801ae7e:	f7ff fabb 	bl	801a3f8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801ae82:	2306      	movs	r3, #6
 801ae84:	75bb      	strb	r3, [r7, #22]
 801ae86:	e002      	b.n	801ae8e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801ae88:	687b      	ldr	r3, [r7, #4]
 801ae8a:	7a5b      	ldrb	r3, [r3, #9]
 801ae8c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801ae8e:	2309      	movs	r3, #9
 801ae90:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	885b      	ldrh	r3, [r3, #2]
 801ae96:	0a1b      	lsrs	r3, r3, #8
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	b2db      	uxtb	r3, r3
 801ae9c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	885b      	ldrh	r3, [r3, #2]
 801aea2:	b2db      	uxtb	r3, r3
 801aea4:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	791b      	ldrb	r3, [r3, #4]
 801aeaa:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	795b      	ldrb	r3, [r3, #5]
 801aeb0:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	799b      	ldrb	r3, [r3, #6]
 801aeb6:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	79db      	ldrb	r3, [r3, #7]
 801aebc:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	7a1b      	ldrb	r3, [r3, #8]
 801aec2:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801aec4:	7dbb      	ldrb	r3, [r7, #22]
 801aec6:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	7a9b      	ldrb	r3, [r3, #10]
 801aecc:	753b      	strb	r3, [r7, #20]
        break;
 801aece:	e022      	b.n	801af16 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801aed0:	2301      	movs	r3, #1
 801aed2:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	7b1b      	ldrb	r3, [r3, #12]
 801aed8:	733b      	strb	r3, [r7, #12]
        break;
 801aeda:	e01c      	b.n	801af16 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801aedc:	2306      	movs	r3, #6
 801aede:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	89db      	ldrh	r3, [r3, #14]
 801aee4:	0a1b      	lsrs	r3, r3, #8
 801aee6:	b29b      	uxth	r3, r3
 801aee8:	b2db      	uxtb	r3, r3
 801aeea:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	89db      	ldrh	r3, [r3, #14]
 801aef0:	b2db      	uxtb	r3, r3
 801aef2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	7c1a      	ldrb	r2, [r3, #16]
 801aef8:	4b0f      	ldr	r3, [pc, #60]	; (801af38 <SUBGRF_SetPacketParams+0x138>)
 801aefa:	4611      	mov	r1, r2
 801aefc:	7019      	strb	r1, [r3, #0]
 801aefe:	4613      	mov	r3, r2
 801af00:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	7c5b      	ldrb	r3, [r3, #17]
 801af06:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	7c9b      	ldrb	r3, [r3, #18]
 801af0c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801af0e:	687b      	ldr	r3, [r7, #4]
 801af10:	7cdb      	ldrb	r3, [r3, #19]
 801af12:	747b      	strb	r3, [r7, #17]
        break;
 801af14:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801af16:	7dfb      	ldrb	r3, [r7, #23]
 801af18:	b29a      	uxth	r2, r3
 801af1a:	f107 030c 	add.w	r3, r7, #12
 801af1e:	4619      	mov	r1, r3
 801af20:	208c      	movs	r0, #140	; 0x8c
 801af22:	f000 f965 	bl	801b1f0 <SUBGRF_WriteCommand>
 801af26:	e000      	b.n	801af2a <SUBGRF_SetPacketParams+0x12a>
        return;
 801af28:	bf00      	nop
}
 801af2a:	3718      	adds	r7, #24
 801af2c:	46bd      	mov	sp, r7
 801af2e:	bd80      	pop	{r7, pc}
 801af30:	0801d7ec 	.word	0x0801d7ec
 801af34:	20001b29 	.word	0x20001b29
 801af38:	20001b2a 	.word	0x20001b2a

0801af3c <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b084      	sub	sp, #16
 801af40:	af00      	add	r7, sp, #0
 801af42:	4603      	mov	r3, r0
 801af44:	460a      	mov	r2, r1
 801af46:	71fb      	strb	r3, [r7, #7]
 801af48:	4613      	mov	r3, r2
 801af4a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801af4c:	79fb      	ldrb	r3, [r7, #7]
 801af4e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801af50:	79bb      	ldrb	r3, [r7, #6]
 801af52:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801af54:	f107 030c 	add.w	r3, r7, #12
 801af58:	2202      	movs	r2, #2
 801af5a:	4619      	mov	r1, r3
 801af5c:	208f      	movs	r0, #143	; 0x8f
 801af5e:	f000 f947 	bl	801b1f0 <SUBGRF_WriteCommand>
}
 801af62:	bf00      	nop
 801af64:	3710      	adds	r7, #16
 801af66:	46bd      	mov	sp, r7
 801af68:	bd80      	pop	{r7, pc}

0801af6a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801af6a:	b580      	push	{r7, lr}
 801af6c:	b082      	sub	sp, #8
 801af6e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801af70:	2300      	movs	r3, #0
 801af72:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801af74:	1d3b      	adds	r3, r7, #4
 801af76:	2201      	movs	r2, #1
 801af78:	4619      	mov	r1, r3
 801af7a:	2015      	movs	r0, #21
 801af7c:	f000 f95a 	bl	801b234 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801af80:	793b      	ldrb	r3, [r7, #4]
 801af82:	425b      	negs	r3, r3
 801af84:	105b      	asrs	r3, r3, #1
 801af86:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801af88:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801af8c:	4618      	mov	r0, r3
 801af8e:	3708      	adds	r7, #8
 801af90:	46bd      	mov	sp, r7
 801af92:	bd80      	pop	{r7, pc}

0801af94 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801af94:	b580      	push	{r7, lr}
 801af96:	b084      	sub	sp, #16
 801af98:	af00      	add	r7, sp, #0
 801af9a:	6078      	str	r0, [r7, #4]
 801af9c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801af9e:	f107 030c 	add.w	r3, r7, #12
 801afa2:	2202      	movs	r2, #2
 801afa4:	4619      	mov	r1, r3
 801afa6:	2013      	movs	r0, #19
 801afa8:	f000 f944 	bl	801b234 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801afac:	f7ff fd7e 	bl	801aaac <SUBGRF_GetPacketType>
 801afb0:	4603      	mov	r3, r0
 801afb2:	2b01      	cmp	r3, #1
 801afb4:	d10d      	bne.n	801afd2 <SUBGRF_GetRxBufferStatus+0x3e>
 801afb6:	4b0c      	ldr	r3, [pc, #48]	; (801afe8 <SUBGRF_GetRxBufferStatus+0x54>)
 801afb8:	781b      	ldrb	r3, [r3, #0]
 801afba:	b2db      	uxtb	r3, r3
 801afbc:	2b01      	cmp	r3, #1
 801afbe:	d108      	bne.n	801afd2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801afc0:	f240 7002 	movw	r0, #1794	; 0x702
 801afc4:	f000 f878 	bl	801b0b8 <SUBGRF_ReadRegister>
 801afc8:	4603      	mov	r3, r0
 801afca:	461a      	mov	r2, r3
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	701a      	strb	r2, [r3, #0]
 801afd0:	e002      	b.n	801afd8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801afd2:	7b3a      	ldrb	r2, [r7, #12]
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801afd8:	7b7a      	ldrb	r2, [r7, #13]
 801afda:	683b      	ldr	r3, [r7, #0]
 801afdc:	701a      	strb	r2, [r3, #0]
}
 801afde:	bf00      	nop
 801afe0:	3710      	adds	r7, #16
 801afe2:	46bd      	mov	sp, r7
 801afe4:	bd80      	pop	{r7, pc}
 801afe6:	bf00      	nop
 801afe8:	20001b2a 	.word	0x20001b2a

0801afec <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801afec:	b580      	push	{r7, lr}
 801afee:	b084      	sub	sp, #16
 801aff0:	af00      	add	r7, sp, #0
 801aff2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801aff4:	f107 030c 	add.w	r3, r7, #12
 801aff8:	2203      	movs	r2, #3
 801affa:	4619      	mov	r1, r3
 801affc:	2014      	movs	r0, #20
 801affe:	f000 f919 	bl	801b234 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801b002:	f7ff fd53 	bl	801aaac <SUBGRF_GetPacketType>
 801b006:	4603      	mov	r3, r0
 801b008:	461a      	mov	r2, r3
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	781b      	ldrb	r3, [r3, #0]
 801b012:	2b00      	cmp	r3, #0
 801b014:	d002      	beq.n	801b01c <SUBGRF_GetPacketStatus+0x30>
 801b016:	2b01      	cmp	r3, #1
 801b018:	d013      	beq.n	801b042 <SUBGRF_GetPacketStatus+0x56>
 801b01a:	e02a      	b.n	801b072 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801b01c:	7b3a      	ldrb	r2, [r7, #12]
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801b022:	7b7b      	ldrb	r3, [r7, #13]
 801b024:	425b      	negs	r3, r3
 801b026:	105b      	asrs	r3, r3, #1
 801b028:	b25a      	sxtb	r2, r3
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801b02e:	7bbb      	ldrb	r3, [r7, #14]
 801b030:	425b      	negs	r3, r3
 801b032:	105b      	asrs	r3, r3, #1
 801b034:	b25a      	sxtb	r2, r3
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	2200      	movs	r2, #0
 801b03e:	609a      	str	r2, [r3, #8]
            break;
 801b040:	e020      	b.n	801b084 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801b042:	7b3b      	ldrb	r3, [r7, #12]
 801b044:	425b      	negs	r3, r3
 801b046:	105b      	asrs	r3, r3, #1
 801b048:	b25a      	sxtb	r2, r3
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801b04e:	7b7b      	ldrb	r3, [r7, #13]
 801b050:	b25b      	sxtb	r3, r3
 801b052:	3302      	adds	r3, #2
 801b054:	109b      	asrs	r3, r3, #2
 801b056:	b25a      	sxtb	r2, r3
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801b05c:	7bbb      	ldrb	r3, [r7, #14]
 801b05e:	425b      	negs	r3, r3
 801b060:	105b      	asrs	r3, r3, #1
 801b062:	b25a      	sxtb	r2, r3
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801b068:	4b08      	ldr	r3, [pc, #32]	; (801b08c <SUBGRF_GetPacketStatus+0xa0>)
 801b06a:	681a      	ldr	r2, [r3, #0]
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	611a      	str	r2, [r3, #16]
            break;
 801b070:	e008      	b.n	801b084 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801b072:	2214      	movs	r2, #20
 801b074:	2100      	movs	r1, #0
 801b076:	6878      	ldr	r0, [r7, #4]
 801b078:	f000 fbf3 	bl	801b862 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	220f      	movs	r2, #15
 801b080:	701a      	strb	r2, [r3, #0]
            break;
 801b082:	bf00      	nop
    }
}
 801b084:	bf00      	nop
 801b086:	3710      	adds	r7, #16
 801b088:	46bd      	mov	sp, r7
 801b08a:	bd80      	pop	{r7, pc}
 801b08c:	20001b2c 	.word	0x20001b2c

0801b090 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b082      	sub	sp, #8
 801b094:	af00      	add	r7, sp, #0
 801b096:	4603      	mov	r3, r0
 801b098:	460a      	mov	r2, r1
 801b09a:	80fb      	strh	r3, [r7, #6]
 801b09c:	4613      	mov	r3, r2
 801b09e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801b0a0:	1d7a      	adds	r2, r7, #5
 801b0a2:	88f9      	ldrh	r1, [r7, #6]
 801b0a4:	2301      	movs	r3, #1
 801b0a6:	4803      	ldr	r0, [pc, #12]	; (801b0b4 <SUBGRF_WriteRegister+0x24>)
 801b0a8:	f7eb ff88 	bl	8006fbc <HAL_SUBGHZ_WriteRegisters>
}
 801b0ac:	bf00      	nop
 801b0ae:	3708      	adds	r7, #8
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}
 801b0b4:	20000210 	.word	0x20000210

0801b0b8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801b0b8:	b580      	push	{r7, lr}
 801b0ba:	b084      	sub	sp, #16
 801b0bc:	af00      	add	r7, sp, #0
 801b0be:	4603      	mov	r3, r0
 801b0c0:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801b0c2:	f107 020f 	add.w	r2, r7, #15
 801b0c6:	88f9      	ldrh	r1, [r7, #6]
 801b0c8:	2301      	movs	r3, #1
 801b0ca:	4804      	ldr	r0, [pc, #16]	; (801b0dc <SUBGRF_ReadRegister+0x24>)
 801b0cc:	f7eb ffd5 	bl	800707a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801b0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	3710      	adds	r7, #16
 801b0d6:	46bd      	mov	sp, r7
 801b0d8:	bd80      	pop	{r7, pc}
 801b0da:	bf00      	nop
 801b0dc:	20000210 	.word	0x20000210

0801b0e0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b0e0:	b580      	push	{r7, lr}
 801b0e2:	b086      	sub	sp, #24
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	4603      	mov	r3, r0
 801b0e8:	6039      	str	r1, [r7, #0]
 801b0ea:	80fb      	strh	r3, [r7, #6]
 801b0ec:	4613      	mov	r3, r2
 801b0ee:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0f0:	f3ef 8310 	mrs	r3, PRIMASK
 801b0f4:	60fb      	str	r3, [r7, #12]
  return(result);
 801b0f6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b0f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0fa:	b672      	cpsid	i
}
 801b0fc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801b0fe:	88bb      	ldrh	r3, [r7, #4]
 801b100:	88f9      	ldrh	r1, [r7, #6]
 801b102:	683a      	ldr	r2, [r7, #0]
 801b104:	4806      	ldr	r0, [pc, #24]	; (801b120 <SUBGRF_WriteRegisters+0x40>)
 801b106:	f7eb ff59 	bl	8006fbc <HAL_SUBGHZ_WriteRegisters>
 801b10a:	697b      	ldr	r3, [r7, #20]
 801b10c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b10e:	693b      	ldr	r3, [r7, #16]
 801b110:	f383 8810 	msr	PRIMASK, r3
}
 801b114:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b116:	bf00      	nop
 801b118:	3718      	adds	r7, #24
 801b11a:	46bd      	mov	sp, r7
 801b11c:	bd80      	pop	{r7, pc}
 801b11e:	bf00      	nop
 801b120:	20000210 	.word	0x20000210

0801b124 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801b124:	b580      	push	{r7, lr}
 801b126:	b086      	sub	sp, #24
 801b128:	af00      	add	r7, sp, #0
 801b12a:	4603      	mov	r3, r0
 801b12c:	6039      	str	r1, [r7, #0]
 801b12e:	80fb      	strh	r3, [r7, #6]
 801b130:	4613      	mov	r3, r2
 801b132:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b134:	f3ef 8310 	mrs	r3, PRIMASK
 801b138:	60fb      	str	r3, [r7, #12]
  return(result);
 801b13a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b13c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b13e:	b672      	cpsid	i
}
 801b140:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801b142:	88bb      	ldrh	r3, [r7, #4]
 801b144:	88f9      	ldrh	r1, [r7, #6]
 801b146:	683a      	ldr	r2, [r7, #0]
 801b148:	4806      	ldr	r0, [pc, #24]	; (801b164 <SUBGRF_ReadRegisters+0x40>)
 801b14a:	f7eb ff96 	bl	800707a <HAL_SUBGHZ_ReadRegisters>
 801b14e:	697b      	ldr	r3, [r7, #20]
 801b150:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b152:	693b      	ldr	r3, [r7, #16]
 801b154:	f383 8810 	msr	PRIMASK, r3
}
 801b158:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b15a:	bf00      	nop
 801b15c:	3718      	adds	r7, #24
 801b15e:	46bd      	mov	sp, r7
 801b160:	bd80      	pop	{r7, pc}
 801b162:	bf00      	nop
 801b164:	20000210 	.word	0x20000210

0801b168 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b168:	b580      	push	{r7, lr}
 801b16a:	b086      	sub	sp, #24
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	4603      	mov	r3, r0
 801b170:	6039      	str	r1, [r7, #0]
 801b172:	71fb      	strb	r3, [r7, #7]
 801b174:	4613      	mov	r3, r2
 801b176:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b178:	f3ef 8310 	mrs	r3, PRIMASK
 801b17c:	60fb      	str	r3, [r7, #12]
  return(result);
 801b17e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b182:	b672      	cpsid	i
}
 801b184:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801b186:	79bb      	ldrb	r3, [r7, #6]
 801b188:	b29b      	uxth	r3, r3
 801b18a:	79f9      	ldrb	r1, [r7, #7]
 801b18c:	683a      	ldr	r2, [r7, #0]
 801b18e:	4806      	ldr	r0, [pc, #24]	; (801b1a8 <SUBGRF_WriteBuffer+0x40>)
 801b190:	f7ec f887 	bl	80072a2 <HAL_SUBGHZ_WriteBuffer>
 801b194:	697b      	ldr	r3, [r7, #20]
 801b196:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b198:	693b      	ldr	r3, [r7, #16]
 801b19a:	f383 8810 	msr	PRIMASK, r3
}
 801b19e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b1a0:	bf00      	nop
 801b1a2:	3718      	adds	r7, #24
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}
 801b1a8:	20000210 	.word	0x20000210

0801b1ac <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801b1ac:	b580      	push	{r7, lr}
 801b1ae:	b086      	sub	sp, #24
 801b1b0:	af00      	add	r7, sp, #0
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	6039      	str	r1, [r7, #0]
 801b1b6:	71fb      	strb	r3, [r7, #7]
 801b1b8:	4613      	mov	r3, r2
 801b1ba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b1bc:	f3ef 8310 	mrs	r3, PRIMASK
 801b1c0:	60fb      	str	r3, [r7, #12]
  return(result);
 801b1c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b1c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b1c6:	b672      	cpsid	i
}
 801b1c8:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801b1ca:	79bb      	ldrb	r3, [r7, #6]
 801b1cc:	b29b      	uxth	r3, r3
 801b1ce:	79f9      	ldrb	r1, [r7, #7]
 801b1d0:	683a      	ldr	r2, [r7, #0]
 801b1d2:	4806      	ldr	r0, [pc, #24]	; (801b1ec <SUBGRF_ReadBuffer+0x40>)
 801b1d4:	f7ec f8b8 	bl	8007348 <HAL_SUBGHZ_ReadBuffer>
 801b1d8:	697b      	ldr	r3, [r7, #20]
 801b1da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b1dc:	693b      	ldr	r3, [r7, #16]
 801b1de:	f383 8810 	msr	PRIMASK, r3
}
 801b1e2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b1e4:	bf00      	nop
 801b1e6:	3718      	adds	r7, #24
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}
 801b1ec:	20000210 	.word	0x20000210

0801b1f0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b086      	sub	sp, #24
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	4603      	mov	r3, r0
 801b1f8:	6039      	str	r1, [r7, #0]
 801b1fa:	71fb      	strb	r3, [r7, #7]
 801b1fc:	4613      	mov	r3, r2
 801b1fe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b200:	f3ef 8310 	mrs	r3, PRIMASK
 801b204:	60fb      	str	r3, [r7, #12]
  return(result);
 801b206:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b20a:	b672      	cpsid	i
}
 801b20c:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801b20e:	88bb      	ldrh	r3, [r7, #4]
 801b210:	79f9      	ldrb	r1, [r7, #7]
 801b212:	683a      	ldr	r2, [r7, #0]
 801b214:	4806      	ldr	r0, [pc, #24]	; (801b230 <SUBGRF_WriteCommand+0x40>)
 801b216:	f7eb ff91 	bl	800713c <HAL_SUBGHZ_ExecSetCmd>
 801b21a:	697b      	ldr	r3, [r7, #20]
 801b21c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b21e:	693b      	ldr	r3, [r7, #16]
 801b220:	f383 8810 	msr	PRIMASK, r3
}
 801b224:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b226:	bf00      	nop
 801b228:	3718      	adds	r7, #24
 801b22a:	46bd      	mov	sp, r7
 801b22c:	bd80      	pop	{r7, pc}
 801b22e:	bf00      	nop
 801b230:	20000210 	.word	0x20000210

0801b234 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b086      	sub	sp, #24
 801b238:	af00      	add	r7, sp, #0
 801b23a:	4603      	mov	r3, r0
 801b23c:	6039      	str	r1, [r7, #0]
 801b23e:	71fb      	strb	r3, [r7, #7]
 801b240:	4613      	mov	r3, r2
 801b242:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b244:	f3ef 8310 	mrs	r3, PRIMASK
 801b248:	60fb      	str	r3, [r7, #12]
  return(result);
 801b24a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801b24c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b24e:	b672      	cpsid	i
}
 801b250:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801b252:	88bb      	ldrh	r3, [r7, #4]
 801b254:	79f9      	ldrb	r1, [r7, #7]
 801b256:	683a      	ldr	r2, [r7, #0]
 801b258:	4806      	ldr	r0, [pc, #24]	; (801b274 <SUBGRF_ReadCommand+0x40>)
 801b25a:	f7eb ffce 	bl	80071fa <HAL_SUBGHZ_ExecGetCmd>
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b262:	693b      	ldr	r3, [r7, #16]
 801b264:	f383 8810 	msr	PRIMASK, r3
}
 801b268:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801b26a:	bf00      	nop
 801b26c:	3718      	adds	r7, #24
 801b26e:	46bd      	mov	sp, r7
 801b270:	bd80      	pop	{r7, pc}
 801b272:	bf00      	nop
 801b274:	20000210 	.word	0x20000210

0801b278 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801b278:	b580      	push	{r7, lr}
 801b27a:	b084      	sub	sp, #16
 801b27c:	af00      	add	r7, sp, #0
 801b27e:	4603      	mov	r3, r0
 801b280:	460a      	mov	r2, r1
 801b282:	71fb      	strb	r3, [r7, #7]
 801b284:	4613      	mov	r3, r2
 801b286:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801b288:	2301      	movs	r3, #1
 801b28a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801b28c:	79bb      	ldrb	r3, [r7, #6]
 801b28e:	2b01      	cmp	r3, #1
 801b290:	d10d      	bne.n	801b2ae <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801b292:	79fb      	ldrb	r3, [r7, #7]
 801b294:	2b01      	cmp	r3, #1
 801b296:	d104      	bne.n	801b2a2 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801b298:	2302      	movs	r3, #2
 801b29a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801b29c:	2004      	movs	r0, #4
 801b29e:	f000 f8df 	bl	801b460 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801b2a2:	79fb      	ldrb	r3, [r7, #7]
 801b2a4:	2b02      	cmp	r3, #2
 801b2a6:	d107      	bne.n	801b2b8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801b2a8:	2303      	movs	r3, #3
 801b2aa:	73fb      	strb	r3, [r7, #15]
 801b2ac:	e004      	b.n	801b2b8 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801b2ae:	79bb      	ldrb	r3, [r7, #6]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d101      	bne.n	801b2b8 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801b2b4:	2301      	movs	r3, #1
 801b2b6:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801b2b8:	7bfb      	ldrb	r3, [r7, #15]
 801b2ba:	4618      	mov	r0, r3
 801b2bc:	f7ef fa09 	bl	800a6d2 <RBI_ConfigRFSwitch>
}
 801b2c0:	bf00      	nop
 801b2c2:	3710      	adds	r7, #16
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bd80      	pop	{r7, pc}

0801b2c8 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b084      	sub	sp, #16
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	4603      	mov	r3, r0
 801b2d0:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801b2d2:	2301      	movs	r3, #1
 801b2d4:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801b2d6:	f7ef fa0a 	bl	800a6ee <RBI_GetTxConfig>
 801b2da:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801b2dc:	68bb      	ldr	r3, [r7, #8]
 801b2de:	2b02      	cmp	r3, #2
 801b2e0:	d016      	beq.n	801b310 <SUBGRF_SetRfTxPower+0x48>
 801b2e2:	68bb      	ldr	r3, [r7, #8]
 801b2e4:	2b02      	cmp	r3, #2
 801b2e6:	dc16      	bgt.n	801b316 <SUBGRF_SetRfTxPower+0x4e>
 801b2e8:	68bb      	ldr	r3, [r7, #8]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d003      	beq.n	801b2f6 <SUBGRF_SetRfTxPower+0x2e>
 801b2ee:	68bb      	ldr	r3, [r7, #8]
 801b2f0:	2b01      	cmp	r3, #1
 801b2f2:	d00a      	beq.n	801b30a <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801b2f4:	e00f      	b.n	801b316 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801b2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2fa:	2b0f      	cmp	r3, #15
 801b2fc:	dd02      	ble.n	801b304 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801b2fe:	2302      	movs	r3, #2
 801b300:	73fb      	strb	r3, [r7, #15]
            break;
 801b302:	e009      	b.n	801b318 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801b304:	2301      	movs	r3, #1
 801b306:	73fb      	strb	r3, [r7, #15]
            break;
 801b308:	e006      	b.n	801b318 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801b30a:	2301      	movs	r3, #1
 801b30c:	73fb      	strb	r3, [r7, #15]
            break;
 801b30e:	e003      	b.n	801b318 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801b310:	2302      	movs	r3, #2
 801b312:	73fb      	strb	r3, [r7, #15]
            break;
 801b314:	e000      	b.n	801b318 <SUBGRF_SetRfTxPower+0x50>
            break;
 801b316:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801b318:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801b31c:	7bfb      	ldrb	r3, [r7, #15]
 801b31e:	2202      	movs	r2, #2
 801b320:	4618      	mov	r0, r3
 801b322:	f7ff fbcd 	bl	801aac0 <SUBGRF_SetTxParams>

    return paSelect;
 801b326:	7bfb      	ldrb	r3, [r7, #15]
}
 801b328:	4618      	mov	r0, r3
 801b32a:	3710      	adds	r7, #16
 801b32c:	46bd      	mov	sp, r7
 801b32e:	bd80      	pop	{r7, pc}

0801b330 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801b330:	b480      	push	{r7}
 801b332:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801b334:	2301      	movs	r3, #1
}
 801b336:	4618      	mov	r0, r3
 801b338:	46bd      	mov	sp, r7
 801b33a:	bc80      	pop	{r7}
 801b33c:	4770      	bx	lr
	...

0801b340 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b082      	sub	sp, #8
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801b348:	4b03      	ldr	r3, [pc, #12]	; (801b358 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	2001      	movs	r0, #1
 801b34e:	4798      	blx	r3
}
 801b350:	bf00      	nop
 801b352:	3708      	adds	r7, #8
 801b354:	46bd      	mov	sp, r7
 801b356:	bd80      	pop	{r7, pc}
 801b358:	20001b34 	.word	0x20001b34

0801b35c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b35c:	b580      	push	{r7, lr}
 801b35e:	b082      	sub	sp, #8
 801b360:	af00      	add	r7, sp, #0
 801b362:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801b364:	4b03      	ldr	r3, [pc, #12]	; (801b374 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	2002      	movs	r0, #2
 801b36a:	4798      	blx	r3
}
 801b36c:	bf00      	nop
 801b36e:	3708      	adds	r7, #8
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	20001b34 	.word	0x20001b34

0801b378 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801b378:	b580      	push	{r7, lr}
 801b37a:	b082      	sub	sp, #8
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801b380:	4b03      	ldr	r3, [pc, #12]	; (801b390 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	2040      	movs	r0, #64	; 0x40
 801b386:	4798      	blx	r3
}
 801b388:	bf00      	nop
 801b38a:	3708      	adds	r7, #8
 801b38c:	46bd      	mov	sp, r7
 801b38e:	bd80      	pop	{r7, pc}
 801b390:	20001b34 	.word	0x20001b34

0801b394 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801b394:	b580      	push	{r7, lr}
 801b396:	b082      	sub	sp, #8
 801b398:	af00      	add	r7, sp, #0
 801b39a:	6078      	str	r0, [r7, #4]
 801b39c:	460b      	mov	r3, r1
 801b39e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801b3a0:	78fb      	ldrb	r3, [r7, #3]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d002      	beq.n	801b3ac <HAL_SUBGHZ_CADStatusCallback+0x18>
 801b3a6:	2b01      	cmp	r3, #1
 801b3a8:	d005      	beq.n	801b3b6 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801b3aa:	e00a      	b.n	801b3c2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801b3ac:	4b07      	ldr	r3, [pc, #28]	; (801b3cc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	2080      	movs	r0, #128	; 0x80
 801b3b2:	4798      	blx	r3
            break;
 801b3b4:	e005      	b.n	801b3c2 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801b3b6:	4b05      	ldr	r3, [pc, #20]	; (801b3cc <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b3be:	4798      	blx	r3
            break;
 801b3c0:	bf00      	nop
    }
}
 801b3c2:	bf00      	nop
 801b3c4:	3708      	adds	r7, #8
 801b3c6:	46bd      	mov	sp, r7
 801b3c8:	bd80      	pop	{r7, pc}
 801b3ca:	bf00      	nop
 801b3cc:	20001b34 	.word	0x20001b34

0801b3d0 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b3d0:	b580      	push	{r7, lr}
 801b3d2:	b082      	sub	sp, #8
 801b3d4:	af00      	add	r7, sp, #0
 801b3d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801b3d8:	4b04      	ldr	r3, [pc, #16]	; (801b3ec <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 801b3e0:	4798      	blx	r3
}
 801b3e2:	bf00      	nop
 801b3e4:	3708      	adds	r7, #8
 801b3e6:	46bd      	mov	sp, r7
 801b3e8:	bd80      	pop	{r7, pc}
 801b3ea:	bf00      	nop
 801b3ec:	20001b34 	.word	0x20001b34

0801b3f0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b3f0:	b580      	push	{r7, lr}
 801b3f2:	b082      	sub	sp, #8
 801b3f4:	af00      	add	r7, sp, #0
 801b3f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801b3f8:	4b03      	ldr	r3, [pc, #12]	; (801b408 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	2020      	movs	r0, #32
 801b3fe:	4798      	blx	r3
}
 801b400:	bf00      	nop
 801b402:	3708      	adds	r7, #8
 801b404:	46bd      	mov	sp, r7
 801b406:	bd80      	pop	{r7, pc}
 801b408:	20001b34 	.word	0x20001b34

0801b40c <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b082      	sub	sp, #8
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801b414:	4b03      	ldr	r3, [pc, #12]	; (801b424 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	2004      	movs	r0, #4
 801b41a:	4798      	blx	r3
}
 801b41c:	bf00      	nop
 801b41e:	3708      	adds	r7, #8
 801b420:	46bd      	mov	sp, r7
 801b422:	bd80      	pop	{r7, pc}
 801b424:	20001b34 	.word	0x20001b34

0801b428 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b082      	sub	sp, #8
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801b430:	4b03      	ldr	r3, [pc, #12]	; (801b440 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	2008      	movs	r0, #8
 801b436:	4798      	blx	r3
}
 801b438:	bf00      	nop
 801b43a:	3708      	adds	r7, #8
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	20001b34 	.word	0x20001b34

0801b444 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801b444:	b580      	push	{r7, lr}
 801b446:	b082      	sub	sp, #8
 801b448:	af00      	add	r7, sp, #0
 801b44a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801b44c:	4b03      	ldr	r3, [pc, #12]	; (801b45c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	2010      	movs	r0, #16
 801b452:	4798      	blx	r3
}
 801b454:	bf00      	nop
 801b456:	3708      	adds	r7, #8
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}
 801b45c:	20001b34 	.word	0x20001b34

0801b460 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801b460:	b580      	push	{r7, lr}
 801b462:	b084      	sub	sp, #16
 801b464:	af00      	add	r7, sp, #0
 801b466:	4603      	mov	r3, r0
 801b468:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801b46a:	f7ef f94e 	bl	800a70a <RBI_IsDCDC>
 801b46e:	4603      	mov	r3, r0
 801b470:	2b01      	cmp	r3, #1
 801b472:	d112      	bne.n	801b49a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801b474:	f640 1023 	movw	r0, #2339	; 0x923
 801b478:	f7ff fe1e 	bl	801b0b8 <SUBGRF_ReadRegister>
 801b47c:	4603      	mov	r3, r0
 801b47e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801b480:	7bfb      	ldrb	r3, [r7, #15]
 801b482:	f023 0306 	bic.w	r3, r3, #6
 801b486:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801b488:	7bfa      	ldrb	r2, [r7, #15]
 801b48a:	79fb      	ldrb	r3, [r7, #7]
 801b48c:	4313      	orrs	r3, r2
 801b48e:	b2db      	uxtb	r3, r3
 801b490:	4619      	mov	r1, r3
 801b492:	f640 1023 	movw	r0, #2339	; 0x923
 801b496:	f7ff fdfb 	bl	801b090 <SUBGRF_WriteRegister>
  }
}
 801b49a:	bf00      	nop
 801b49c:	3710      	adds	r7, #16
 801b49e:	46bd      	mov	sp, r7
 801b4a0:	bd80      	pop	{r7, pc}
	...

0801b4a4 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801b4a4:	b480      	push	{r7}
 801b4a6:	b085      	sub	sp, #20
 801b4a8:	af00      	add	r7, sp, #0
 801b4aa:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d101      	bne.n	801b4b6 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801b4b2:	231f      	movs	r3, #31
 801b4b4:	e016      	b.n	801b4e4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b4b6:	2300      	movs	r3, #0
 801b4b8:	73fb      	strb	r3, [r7, #15]
 801b4ba:	e00f      	b.n	801b4dc <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801b4bc:	7bfb      	ldrb	r3, [r7, #15]
 801b4be:	4a0c      	ldr	r2, [pc, #48]	; (801b4f0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b4c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	429a      	cmp	r2, r3
 801b4c8:	d205      	bcs.n	801b4d6 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801b4ca:	7bfb      	ldrb	r3, [r7, #15]
 801b4cc:	4a08      	ldr	r2, [pc, #32]	; (801b4f0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801b4ce:	00db      	lsls	r3, r3, #3
 801b4d0:	4413      	add	r3, r2
 801b4d2:	791b      	ldrb	r3, [r3, #4]
 801b4d4:	e006      	b.n	801b4e4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801b4d6:	7bfb      	ldrb	r3, [r7, #15]
 801b4d8:	3301      	adds	r3, #1
 801b4da:	73fb      	strb	r3, [r7, #15]
 801b4dc:	7bfb      	ldrb	r3, [r7, #15]
 801b4de:	2b15      	cmp	r3, #21
 801b4e0:	d9ec      	bls.n	801b4bc <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801b4e2:	e7fe      	b.n	801b4e2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3714      	adds	r7, #20
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bc80      	pop	{r7}
 801b4ec:	4770      	bx	lr
 801b4ee:	bf00      	nop
 801b4f0:	0801ddd4 	.word	0x0801ddd4

0801b4f4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b08a      	sub	sp, #40	; 0x28
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
 801b4fc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801b4fe:	4b35      	ldr	r3, [pc, #212]	; (801b5d4 <SUBGRF_GetCFO+0xe0>)
 801b500:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801b502:	f640 0007 	movw	r0, #2055	; 0x807
 801b506:	f7ff fdd7 	bl	801b0b8 <SUBGRF_ReadRegister>
 801b50a:	4603      	mov	r3, r0
 801b50c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801b50e:	7ffb      	ldrb	r3, [r7, #31]
 801b510:	08db      	lsrs	r3, r3, #3
 801b512:	b2db      	uxtb	r3, r3
 801b514:	f003 0303 	and.w	r3, r3, #3
 801b518:	3328      	adds	r3, #40	; 0x28
 801b51a:	443b      	add	r3, r7
 801b51c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801b520:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801b522:	7ffb      	ldrb	r3, [r7, #31]
 801b524:	f003 0307 	and.w	r3, r3, #7
 801b528:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801b52a:	7fba      	ldrb	r2, [r7, #30]
 801b52c:	7f7b      	ldrb	r3, [r7, #29]
 801b52e:	3b01      	subs	r3, #1
 801b530:	fa02 f303 	lsl.w	r3, r2, r3
 801b534:	461a      	mov	r2, r3
 801b536:	4b28      	ldr	r3, [pc, #160]	; (801b5d8 <SUBGRF_GetCFO+0xe4>)
 801b538:	fbb3 f3f2 	udiv	r3, r3, r2
 801b53c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801b53e:	69ba      	ldr	r2, [r7, #24]
 801b540:	687b      	ldr	r3, [r7, #4]
 801b542:	fbb2 f3f3 	udiv	r3, r2, r3
 801b546:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801b548:	2301      	movs	r3, #1
 801b54a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801b54e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b552:	697a      	ldr	r2, [r7, #20]
 801b554:	fb02 f303 	mul.w	r3, r2, r3
 801b558:	2b07      	cmp	r3, #7
 801b55a:	d802      	bhi.n	801b562 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801b55c:	2302      	movs	r3, #2
 801b55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801b562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b566:	697a      	ldr	r2, [r7, #20]
 801b568:	fb02 f303 	mul.w	r3, r2, r3
 801b56c:	2b03      	cmp	r3, #3
 801b56e:	d802      	bhi.n	801b576 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801b570:	2304      	movs	r3, #4
 801b572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801b576:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b57a:	69bb      	ldr	r3, [r7, #24]
 801b57c:	fb02 f303 	mul.w	r3, r2, r3
 801b580:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801b582:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801b586:	f7ff fd97 	bl	801b0b8 <SUBGRF_ReadRegister>
 801b58a:	4603      	mov	r3, r0
 801b58c:	021b      	lsls	r3, r3, #8
 801b58e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801b592:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801b594:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801b598:	f7ff fd8e 	bl	801b0b8 <SUBGRF_ReadRegister>
 801b59c:	4603      	mov	r3, r0
 801b59e:	461a      	mov	r2, r3
 801b5a0:	6a3b      	ldr	r3, [r7, #32]
 801b5a2:	4313      	orrs	r3, r2
 801b5a4:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801b5a6:	6a3b      	ldr	r3, [r7, #32]
 801b5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d005      	beq.n	801b5bc <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801b5b0:	6a3b      	ldr	r3, [r7, #32]
 801b5b2:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801b5b6:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801b5ba:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801b5bc:	693b      	ldr	r3, [r7, #16]
 801b5be:	095b      	lsrs	r3, r3, #5
 801b5c0:	6a3a      	ldr	r2, [r7, #32]
 801b5c2:	fb02 f303 	mul.w	r3, r2, r3
 801b5c6:	11da      	asrs	r2, r3, #7
 801b5c8:	683b      	ldr	r3, [r7, #0]
 801b5ca:	601a      	str	r2, [r3, #0]
}
 801b5cc:	bf00      	nop
 801b5ce:	3728      	adds	r7, #40	; 0x28
 801b5d0:	46bd      	mov	sp, r7
 801b5d2:	bd80      	pop	{r7, pc}
 801b5d4:	0c0a0804 	.word	0x0c0a0804
 801b5d8:	01e84800 	.word	0x01e84800

0801b5dc <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801b5dc:	b480      	push	{r7}
 801b5de:	b087      	sub	sp, #28
 801b5e0:	af00      	add	r7, sp, #0
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	60b9      	str	r1, [r7, #8]
 801b5e6:	607a      	str	r2, [r7, #4]
 801b5e8:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801b5ee:	f04f 33ff 	mov.w	r3, #4294967295
 801b5f2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b5f4:	697b      	ldr	r3, [r7, #20]
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	371c      	adds	r7, #28
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bc80      	pop	{r7}
 801b5fe:	4770      	bx	lr

0801b600 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801b600:	b480      	push	{r7}
 801b602:	b087      	sub	sp, #28
 801b604:	af00      	add	r7, sp, #0
 801b606:	4603      	mov	r3, r0
 801b608:	60b9      	str	r1, [r7, #8]
 801b60a:	607a      	str	r2, [r7, #4]
 801b60c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801b60e:	2300      	movs	r3, #0
 801b610:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801b612:	f04f 33ff 	mov.w	r3, #4294967295
 801b616:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801b618:	697b      	ldr	r3, [r7, #20]
}
 801b61a:	4618      	mov	r0, r3
 801b61c:	371c      	adds	r7, #28
 801b61e:	46bd      	mov	sp, r7
 801b620:	bc80      	pop	{r7}
 801b622:	4770      	bx	lr

0801b624 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801b624:	b480      	push	{r7}
 801b626:	b085      	sub	sp, #20
 801b628:	af00      	add	r7, sp, #0
 801b62a:	60f8      	str	r0, [r7, #12]
 801b62c:	60b9      	str	r1, [r7, #8]
 801b62e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801b630:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b634:	4618      	mov	r0, r3
 801b636:	3714      	adds	r7, #20
 801b638:	46bd      	mov	sp, r7
 801b63a:	bc80      	pop	{r7}
 801b63c:	4770      	bx	lr

0801b63e <RFW_DeInit>:

void RFW_DeInit( void)
{
 801b63e:	b480      	push	{r7}
 801b640:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801b642:	bf00      	nop
 801b644:	46bd      	mov	sp, r7
 801b646:	bc80      	pop	{r7}
 801b648:	4770      	bx	lr

0801b64a <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801b64a:	b480      	push	{r7}
 801b64c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801b64e:	2300      	movs	r3, #0
#endif
}
 801b650:	4618      	mov	r0, r3
 801b652:	46bd      	mov	sp, r7
 801b654:	bc80      	pop	{r7}
 801b656:	4770      	bx	lr

0801b658 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b658:	b480      	push	{r7}
 801b65a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b65c:	2300      	movs	r3, #0
#endif
}
 801b65e:	4618      	mov	r0, r3
 801b660:	46bd      	mov	sp, r7
 801b662:	bc80      	pop	{r7}
 801b664:	4770      	bx	lr

0801b666 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b666:	b480      	push	{r7}
 801b668:	b083      	sub	sp, #12
 801b66a:	af00      	add	r7, sp, #0
 801b66c:	4603      	mov	r3, r0
 801b66e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b670:	bf00      	nop
 801b672:	370c      	adds	r7, #12
 801b674:	46bd      	mov	sp, r7
 801b676:	bc80      	pop	{r7}
 801b678:	4770      	bx	lr

0801b67a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b67a:	b480      	push	{r7}
 801b67c:	b087      	sub	sp, #28
 801b67e:	af00      	add	r7, sp, #0
 801b680:	60f8      	str	r0, [r7, #12]
 801b682:	460b      	mov	r3, r1
 801b684:	607a      	str	r2, [r7, #4]
 801b686:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b688:	f04f 33ff 	mov.w	r3, #4294967295
 801b68c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b68e:	697b      	ldr	r3, [r7, #20]
}
 801b690:	4618      	mov	r0, r3
 801b692:	371c      	adds	r7, #28
 801b694:	46bd      	mov	sp, r7
 801b696:	bc80      	pop	{r7}
 801b698:	4770      	bx	lr

0801b69a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b69a:	b480      	push	{r7}
 801b69c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b69e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b6a2:	4618      	mov	r0, r3
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bc80      	pop	{r7}
 801b6a8:	4770      	bx	lr

0801b6aa <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b6aa:	b480      	push	{r7}
 801b6ac:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b6ae:	bf00      	nop
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	bc80      	pop	{r7}
 801b6b4:	4770      	bx	lr

0801b6b6 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b6b6:	b480      	push	{r7}
 801b6b8:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b6ba:	bf00      	nop
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bc80      	pop	{r7}
 801b6c0:	4770      	bx	lr

0801b6c2 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b6c2:	b480      	push	{r7}
 801b6c4:	b083      	sub	sp, #12
 801b6c6:	af00      	add	r7, sp, #0
 801b6c8:	4603      	mov	r3, r0
 801b6ca:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b6cc:	bf00      	nop
 801b6ce:	370c      	adds	r7, #12
 801b6d0:	46bd      	mov	sp, r7
 801b6d2:	bc80      	pop	{r7}
 801b6d4:	4770      	bx	lr
	...

0801b6d8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b6d8:	b480      	push	{r7}
 801b6da:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b6dc:	4b04      	ldr	r3, [pc, #16]	; (801b6f0 <UTIL_LPM_Init+0x18>)
 801b6de:	2200      	movs	r2, #0
 801b6e0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b6e2:	4b04      	ldr	r3, [pc, #16]	; (801b6f4 <UTIL_LPM_Init+0x1c>)
 801b6e4:	2200      	movs	r2, #0
 801b6e6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b6e8:	bf00      	nop
 801b6ea:	46bd      	mov	sp, r7
 801b6ec:	bc80      	pop	{r7}
 801b6ee:	4770      	bx	lr
 801b6f0:	20001b38 	.word	0x20001b38
 801b6f4:	20001b3c 	.word	0x20001b3c

0801b6f8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b6f8:	b480      	push	{r7}
 801b6fa:	b087      	sub	sp, #28
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
 801b700:	460b      	mov	r3, r1
 801b702:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b704:	f3ef 8310 	mrs	r3, PRIMASK
 801b708:	613b      	str	r3, [r7, #16]
  return(result);
 801b70a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b70c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b70e:	b672      	cpsid	i
}
 801b710:	bf00      	nop
  
  switch( state )
 801b712:	78fb      	ldrb	r3, [r7, #3]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d008      	beq.n	801b72a <UTIL_LPM_SetStopMode+0x32>
 801b718:	2b01      	cmp	r3, #1
 801b71a:	d10e      	bne.n	801b73a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b71c:	4b0d      	ldr	r3, [pc, #52]	; (801b754 <UTIL_LPM_SetStopMode+0x5c>)
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	4313      	orrs	r3, r2
 801b724:	4a0b      	ldr	r2, [pc, #44]	; (801b754 <UTIL_LPM_SetStopMode+0x5c>)
 801b726:	6013      	str	r3, [r2, #0]
      break;
 801b728:	e008      	b.n	801b73c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	43da      	mvns	r2, r3
 801b72e:	4b09      	ldr	r3, [pc, #36]	; (801b754 <UTIL_LPM_SetStopMode+0x5c>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	4013      	ands	r3, r2
 801b734:	4a07      	ldr	r2, [pc, #28]	; (801b754 <UTIL_LPM_SetStopMode+0x5c>)
 801b736:	6013      	str	r3, [r2, #0]
      break;
 801b738:	e000      	b.n	801b73c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b73a:	bf00      	nop
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	f383 8810 	msr	PRIMASK, r3
}
 801b746:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b748:	bf00      	nop
 801b74a:	371c      	adds	r7, #28
 801b74c:	46bd      	mov	sp, r7
 801b74e:	bc80      	pop	{r7}
 801b750:	4770      	bx	lr
 801b752:	bf00      	nop
 801b754:	20001b38 	.word	0x20001b38

0801b758 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b758:	b480      	push	{r7}
 801b75a:	b087      	sub	sp, #28
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
 801b760:	460b      	mov	r3, r1
 801b762:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b764:	f3ef 8310 	mrs	r3, PRIMASK
 801b768:	613b      	str	r3, [r7, #16]
  return(result);
 801b76a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b76c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b76e:	b672      	cpsid	i
}
 801b770:	bf00      	nop
  
  switch(state)
 801b772:	78fb      	ldrb	r3, [r7, #3]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d008      	beq.n	801b78a <UTIL_LPM_SetOffMode+0x32>
 801b778:	2b01      	cmp	r3, #1
 801b77a:	d10e      	bne.n	801b79a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b77c:	4b0d      	ldr	r3, [pc, #52]	; (801b7b4 <UTIL_LPM_SetOffMode+0x5c>)
 801b77e:	681a      	ldr	r2, [r3, #0]
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	4313      	orrs	r3, r2
 801b784:	4a0b      	ldr	r2, [pc, #44]	; (801b7b4 <UTIL_LPM_SetOffMode+0x5c>)
 801b786:	6013      	str	r3, [r2, #0]
      break;
 801b788:	e008      	b.n	801b79c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	43da      	mvns	r2, r3
 801b78e:	4b09      	ldr	r3, [pc, #36]	; (801b7b4 <UTIL_LPM_SetOffMode+0x5c>)
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	4013      	ands	r3, r2
 801b794:	4a07      	ldr	r2, [pc, #28]	; (801b7b4 <UTIL_LPM_SetOffMode+0x5c>)
 801b796:	6013      	str	r3, [r2, #0]
      break;
 801b798:	e000      	b.n	801b79c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b79a:	bf00      	nop
 801b79c:	697b      	ldr	r3, [r7, #20]
 801b79e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	f383 8810 	msr	PRIMASK, r3
}
 801b7a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b7a8:	bf00      	nop
 801b7aa:	371c      	adds	r7, #28
 801b7ac:	46bd      	mov	sp, r7
 801b7ae:	bc80      	pop	{r7}
 801b7b0:	4770      	bx	lr
 801b7b2:	bf00      	nop
 801b7b4:	20001b3c 	.word	0x20001b3c

0801b7b8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801b7b8:	b580      	push	{r7, lr}
 801b7ba:	b084      	sub	sp, #16
 801b7bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b7be:	f3ef 8310 	mrs	r3, PRIMASK
 801b7c2:	60bb      	str	r3, [r7, #8]
  return(result);
 801b7c4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801b7c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b7c8:	b672      	cpsid	i
}
 801b7ca:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801b7cc:	4b12      	ldr	r3, [pc, #72]	; (801b818 <UTIL_LPM_EnterLowPower+0x60>)
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d006      	beq.n	801b7e2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801b7d4:	4b11      	ldr	r3, [pc, #68]	; (801b81c <UTIL_LPM_EnterLowPower+0x64>)
 801b7d6:	681b      	ldr	r3, [r3, #0]
 801b7d8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801b7da:	4b10      	ldr	r3, [pc, #64]	; (801b81c <UTIL_LPM_EnterLowPower+0x64>)
 801b7dc:	685b      	ldr	r3, [r3, #4]
 801b7de:	4798      	blx	r3
 801b7e0:	e010      	b.n	801b804 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801b7e2:	4b0f      	ldr	r3, [pc, #60]	; (801b820 <UTIL_LPM_EnterLowPower+0x68>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d006      	beq.n	801b7f8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801b7ea:	4b0c      	ldr	r3, [pc, #48]	; (801b81c <UTIL_LPM_EnterLowPower+0x64>)
 801b7ec:	689b      	ldr	r3, [r3, #8]
 801b7ee:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801b7f0:	4b0a      	ldr	r3, [pc, #40]	; (801b81c <UTIL_LPM_EnterLowPower+0x64>)
 801b7f2:	68db      	ldr	r3, [r3, #12]
 801b7f4:	4798      	blx	r3
 801b7f6:	e005      	b.n	801b804 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801b7f8:	4b08      	ldr	r3, [pc, #32]	; (801b81c <UTIL_LPM_EnterLowPower+0x64>)
 801b7fa:	691b      	ldr	r3, [r3, #16]
 801b7fc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801b7fe:	4b07      	ldr	r3, [pc, #28]	; (801b81c <UTIL_LPM_EnterLowPower+0x64>)
 801b800:	695b      	ldr	r3, [r3, #20]
 801b802:	4798      	blx	r3
 801b804:	68fb      	ldr	r3, [r7, #12]
 801b806:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	f383 8810 	msr	PRIMASK, r3
}
 801b80e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801b810:	bf00      	nop
 801b812:	3710      	adds	r7, #16
 801b814:	46bd      	mov	sp, r7
 801b816:	bd80      	pop	{r7, pc}
 801b818:	20001b38 	.word	0x20001b38
 801b81c:	0801d850 	.word	0x0801d850
 801b820:	20001b3c 	.word	0x20001b3c

0801b824 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b824:	b480      	push	{r7}
 801b826:	b087      	sub	sp, #28
 801b828:	af00      	add	r7, sp, #0
 801b82a:	60f8      	str	r0, [r7, #12]
 801b82c:	60b9      	str	r1, [r7, #8]
 801b82e:	4613      	mov	r3, r2
 801b830:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b836:	68bb      	ldr	r3, [r7, #8]
 801b838:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b83a:	e007      	b.n	801b84c <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b83c:	693a      	ldr	r2, [r7, #16]
 801b83e:	1c53      	adds	r3, r2, #1
 801b840:	613b      	str	r3, [r7, #16]
 801b842:	697b      	ldr	r3, [r7, #20]
 801b844:	1c59      	adds	r1, r3, #1
 801b846:	6179      	str	r1, [r7, #20]
 801b848:	7812      	ldrb	r2, [r2, #0]
 801b84a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b84c:	88fb      	ldrh	r3, [r7, #6]
 801b84e:	1e5a      	subs	r2, r3, #1
 801b850:	80fa      	strh	r2, [r7, #6]
 801b852:	2b00      	cmp	r3, #0
 801b854:	d1f2      	bne.n	801b83c <UTIL_MEM_cpy_8+0x18>
    }
}
 801b856:	bf00      	nop
 801b858:	bf00      	nop
 801b85a:	371c      	adds	r7, #28
 801b85c:	46bd      	mov	sp, r7
 801b85e:	bc80      	pop	{r7}
 801b860:	4770      	bx	lr

0801b862 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b862:	b480      	push	{r7}
 801b864:	b085      	sub	sp, #20
 801b866:	af00      	add	r7, sp, #0
 801b868:	6078      	str	r0, [r7, #4]
 801b86a:	460b      	mov	r3, r1
 801b86c:	70fb      	strb	r3, [r7, #3]
 801b86e:	4613      	mov	r3, r2
 801b870:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b876:	e004      	b.n	801b882 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b878:	68fb      	ldr	r3, [r7, #12]
 801b87a:	1c5a      	adds	r2, r3, #1
 801b87c:	60fa      	str	r2, [r7, #12]
 801b87e:	78fa      	ldrb	r2, [r7, #3]
 801b880:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b882:	883b      	ldrh	r3, [r7, #0]
 801b884:	1e5a      	subs	r2, r3, #1
 801b886:	803a      	strh	r2, [r7, #0]
 801b888:	2b00      	cmp	r3, #0
 801b88a:	d1f5      	bne.n	801b878 <UTIL_MEM_set_8+0x16>
  }
}
 801b88c:	bf00      	nop
 801b88e:	bf00      	nop
 801b890:	3714      	adds	r7, #20
 801b892:	46bd      	mov	sp, r7
 801b894:	bc80      	pop	{r7}
 801b896:	4770      	bx	lr

0801b898 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b898:	b082      	sub	sp, #8
 801b89a:	b480      	push	{r7}
 801b89c:	b087      	sub	sp, #28
 801b89e:	af00      	add	r7, sp, #0
 801b8a0:	60f8      	str	r0, [r7, #12]
 801b8a2:	1d38      	adds	r0, r7, #4
 801b8a4:	e880 0006 	stmia.w	r0, {r1, r2}
 801b8a8:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b8aa:	2300      	movs	r3, #0
 801b8ac:	613b      	str	r3, [r7, #16]
 801b8ae:	2300      	movs	r3, #0
 801b8b0:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b8b2:	687a      	ldr	r2, [r7, #4]
 801b8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b8b6:	4413      	add	r3, r2
 801b8b8:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b8ba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b8be:	b29a      	uxth	r2, r3
 801b8c0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b8c4:	b29b      	uxth	r3, r3
 801b8c6:	4413      	add	r3, r2
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	b21b      	sxth	r3, r3
 801b8cc:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b8ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b8d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b8d6:	db0a      	blt.n	801b8ee <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b8d8:	693b      	ldr	r3, [r7, #16]
 801b8da:	3301      	adds	r3, #1
 801b8dc:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b8de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b8e2:	b29b      	uxth	r3, r3
 801b8e4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801b8e8:	b29b      	uxth	r3, r3
 801b8ea:	b21b      	sxth	r3, r3
 801b8ec:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	461a      	mov	r2, r3
 801b8f2:	f107 0310 	add.w	r3, r7, #16
 801b8f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b8fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b8fe:	68f8      	ldr	r0, [r7, #12]
 801b900:	371c      	adds	r7, #28
 801b902:	46bd      	mov	sp, r7
 801b904:	bc80      	pop	{r7}
 801b906:	b002      	add	sp, #8
 801b908:	4770      	bx	lr

0801b90a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b90a:	b082      	sub	sp, #8
 801b90c:	b480      	push	{r7}
 801b90e:	b087      	sub	sp, #28
 801b910:	af00      	add	r7, sp, #0
 801b912:	60f8      	str	r0, [r7, #12]
 801b914:	1d38      	adds	r0, r7, #4
 801b916:	e880 0006 	stmia.w	r0, {r1, r2}
 801b91a:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b91c:	2300      	movs	r3, #0
 801b91e:	613b      	str	r3, [r7, #16]
 801b920:	2300      	movs	r3, #0
 801b922:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b924:	687a      	ldr	r2, [r7, #4]
 801b926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b928:	1ad3      	subs	r3, r2, r3
 801b92a:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b92c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b930:	b29a      	uxth	r2, r3
 801b932:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b936:	b29b      	uxth	r3, r3
 801b938:	1ad3      	subs	r3, r2, r3
 801b93a:	b29b      	uxth	r3, r3
 801b93c:	b21b      	sxth	r3, r3
 801b93e:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b940:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b944:	2b00      	cmp	r3, #0
 801b946:	da0a      	bge.n	801b95e <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b948:	693b      	ldr	r3, [r7, #16]
 801b94a:	3b01      	subs	r3, #1
 801b94c:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b94e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b952:	b29b      	uxth	r3, r3
 801b954:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801b958:	b29b      	uxth	r3, r3
 801b95a:	b21b      	sxth	r3, r3
 801b95c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	461a      	mov	r2, r3
 801b962:	f107 0310 	add.w	r3, r7, #16
 801b966:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b96a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b96e:	68f8      	ldr	r0, [r7, #12]
 801b970:	371c      	adds	r7, #28
 801b972:	46bd      	mov	sp, r7
 801b974:	bc80      	pop	{r7}
 801b976:	b002      	add	sp, #8
 801b978:	4770      	bx	lr
	...

0801b97c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b97c:	b580      	push	{r7, lr}
 801b97e:	b088      	sub	sp, #32
 801b980:	af02      	add	r7, sp, #8
 801b982:	463b      	mov	r3, r7
 801b984:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b988:	2300      	movs	r3, #0
 801b98a:	60bb      	str	r3, [r7, #8]
 801b98c:	2300      	movs	r3, #0
 801b98e:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b990:	4b10      	ldr	r3, [pc, #64]	; (801b9d4 <SysTimeSet+0x58>)
 801b992:	691b      	ldr	r3, [r3, #16]
 801b994:	f107 0208 	add.w	r2, r7, #8
 801b998:	3204      	adds	r2, #4
 801b99a:	4610      	mov	r0, r2
 801b99c:	4798      	blx	r3
 801b99e:	4603      	mov	r3, r0
 801b9a0:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b9a2:	f107 0010 	add.w	r0, r7, #16
 801b9a6:	68fb      	ldr	r3, [r7, #12]
 801b9a8:	9300      	str	r3, [sp, #0]
 801b9aa:	68bb      	ldr	r3, [r7, #8]
 801b9ac:	463a      	mov	r2, r7
 801b9ae:	ca06      	ldmia	r2, {r1, r2}
 801b9b0:	f7ff ffab 	bl	801b90a <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b9b4:	4b07      	ldr	r3, [pc, #28]	; (801b9d4 <SysTimeSet+0x58>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	693a      	ldr	r2, [r7, #16]
 801b9ba:	4610      	mov	r0, r2
 801b9bc:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b9be:	4b05      	ldr	r3, [pc, #20]	; (801b9d4 <SysTimeSet+0x58>)
 801b9c0:	689b      	ldr	r3, [r3, #8]
 801b9c2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b9c6:	4610      	mov	r0, r2
 801b9c8:	4798      	blx	r3
}
 801b9ca:	bf00      	nop
 801b9cc:	3718      	adds	r7, #24
 801b9ce:	46bd      	mov	sp, r7
 801b9d0:	bd80      	pop	{r7, pc}
 801b9d2:	bf00      	nop
 801b9d4:	0801d934 	.word	0x0801d934

0801b9d8 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b9d8:	b580      	push	{r7, lr}
 801b9da:	b08a      	sub	sp, #40	; 0x28
 801b9dc:	af02      	add	r7, sp, #8
 801b9de:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	61bb      	str	r3, [r7, #24]
 801b9e4:	2300      	movs	r3, #0
 801b9e6:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b9e8:	2300      	movs	r3, #0
 801b9ea:	613b      	str	r3, [r7, #16]
 801b9ec:	2300      	movs	r3, #0
 801b9ee:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b9f0:	4b14      	ldr	r3, [pc, #80]	; (801ba44 <SysTimeGet+0x6c>)
 801b9f2:	691b      	ldr	r3, [r3, #16]
 801b9f4:	f107 0218 	add.w	r2, r7, #24
 801b9f8:	3204      	adds	r2, #4
 801b9fa:	4610      	mov	r0, r2
 801b9fc:	4798      	blx	r3
 801b9fe:	4603      	mov	r3, r0
 801ba00:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ba02:	4b10      	ldr	r3, [pc, #64]	; (801ba44 <SysTimeGet+0x6c>)
 801ba04:	68db      	ldr	r3, [r3, #12]
 801ba06:	4798      	blx	r3
 801ba08:	4603      	mov	r3, r0
 801ba0a:	b21b      	sxth	r3, r3
 801ba0c:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801ba0e:	4b0d      	ldr	r3, [pc, #52]	; (801ba44 <SysTimeGet+0x6c>)
 801ba10:	685b      	ldr	r3, [r3, #4]
 801ba12:	4798      	blx	r3
 801ba14:	4603      	mov	r3, r0
 801ba16:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801ba18:	f107 0010 	add.w	r0, r7, #16
 801ba1c:	69fb      	ldr	r3, [r7, #28]
 801ba1e:	9300      	str	r3, [sp, #0]
 801ba20:	69bb      	ldr	r3, [r7, #24]
 801ba22:	f107 0208 	add.w	r2, r7, #8
 801ba26:	ca06      	ldmia	r2, {r1, r2}
 801ba28:	f7ff ff36 	bl	801b898 <SysTimeAdd>

  return sysTime;
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	461a      	mov	r2, r3
 801ba30:	f107 0310 	add.w	r3, r7, #16
 801ba34:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba38:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ba3c:	6878      	ldr	r0, [r7, #4]
 801ba3e:	3720      	adds	r7, #32
 801ba40:	46bd      	mov	sp, r7
 801ba42:	bd80      	pop	{r7, pc}
 801ba44:	0801d934 	.word	0x0801d934

0801ba48 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801ba48:	b580      	push	{r7, lr}
 801ba4a:	b084      	sub	sp, #16
 801ba4c:	af00      	add	r7, sp, #0
 801ba4e:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801ba50:	2300      	movs	r3, #0
 801ba52:	60bb      	str	r3, [r7, #8]
 801ba54:	2300      	movs	r3, #0
 801ba56:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801ba58:	4b0a      	ldr	r3, [pc, #40]	; (801ba84 <SysTimeGetMcuTime+0x3c>)
 801ba5a:	691b      	ldr	r3, [r3, #16]
 801ba5c:	f107 0208 	add.w	r2, r7, #8
 801ba60:	3204      	adds	r2, #4
 801ba62:	4610      	mov	r0, r2
 801ba64:	4798      	blx	r3
 801ba66:	4603      	mov	r3, r0
 801ba68:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	461a      	mov	r2, r3
 801ba6e:	f107 0308 	add.w	r3, r7, #8
 801ba72:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ba76:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801ba7a:	6878      	ldr	r0, [r7, #4]
 801ba7c:	3710      	adds	r7, #16
 801ba7e:	46bd      	mov	sp, r7
 801ba80:	bd80      	pop	{r7, pc}
 801ba82:	bf00      	nop
 801ba84:	0801d934 	.word	0x0801d934

0801ba88 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801ba88:	b580      	push	{r7, lr}
 801ba8a:	b088      	sub	sp, #32
 801ba8c:	af02      	add	r7, sp, #8
 801ba8e:	463b      	mov	r3, r7
 801ba90:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801ba94:	4b0f      	ldr	r3, [pc, #60]	; (801bad4 <SysTimeToMs+0x4c>)
 801ba96:	68db      	ldr	r3, [r3, #12]
 801ba98:	4798      	blx	r3
 801ba9a:	4603      	mov	r3, r0
 801ba9c:	b21b      	sxth	r3, r3
 801ba9e:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801baa0:	4b0c      	ldr	r3, [pc, #48]	; (801bad4 <SysTimeToMs+0x4c>)
 801baa2:	685b      	ldr	r3, [r3, #4]
 801baa4:	4798      	blx	r3
 801baa6:	4603      	mov	r3, r0
 801baa8:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801baaa:	f107 0008 	add.w	r0, r7, #8
 801baae:	697b      	ldr	r3, [r7, #20]
 801bab0:	9300      	str	r3, [sp, #0]
 801bab2:	693b      	ldr	r3, [r7, #16]
 801bab4:	463a      	mov	r2, r7
 801bab6:	ca06      	ldmia	r2, {r1, r2}
 801bab8:	f7ff ff27 	bl	801b90a <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801bac2:	fb02 f303 	mul.w	r3, r2, r3
 801bac6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801baca:	4413      	add	r3, r2
}
 801bacc:	4618      	mov	r0, r3
 801bace:	3718      	adds	r7, #24
 801bad0:	46bd      	mov	sp, r7
 801bad2:	bd80      	pop	{r7, pc}
 801bad4:	0801d934 	.word	0x0801d934

0801bad8 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b08a      	sub	sp, #40	; 0x28
 801badc:	af02      	add	r7, sp, #8
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801bae2:	683b      	ldr	r3, [r7, #0]
 801bae4:	4a19      	ldr	r2, [pc, #100]	; (801bb4c <SysTimeFromMs+0x74>)
 801bae6:	fba2 2303 	umull	r2, r3, r2, r3
 801baea:	099b      	lsrs	r3, r3, #6
 801baec:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801baee:	69fb      	ldr	r3, [r7, #28]
 801baf0:	617b      	str	r3, [r7, #20]
 801baf2:	683b      	ldr	r3, [r7, #0]
 801baf4:	b29a      	uxth	r2, r3
 801baf6:	69fb      	ldr	r3, [r7, #28]
 801baf8:	b29b      	uxth	r3, r3
 801bafa:	4619      	mov	r1, r3
 801bafc:	0149      	lsls	r1, r1, #5
 801bafe:	1ac9      	subs	r1, r1, r3
 801bb00:	0089      	lsls	r1, r1, #2
 801bb02:	440b      	add	r3, r1
 801bb04:	00db      	lsls	r3, r3, #3
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	1ad3      	subs	r3, r2, r3
 801bb0a:	b29b      	uxth	r3, r3
 801bb0c:	b21b      	sxth	r3, r3
 801bb0e:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801bb10:	f107 030c 	add.w	r3, r7, #12
 801bb14:	2200      	movs	r2, #0
 801bb16:	601a      	str	r2, [r3, #0]
 801bb18:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801bb1a:	4b0d      	ldr	r3, [pc, #52]	; (801bb50 <SysTimeFromMs+0x78>)
 801bb1c:	68db      	ldr	r3, [r3, #12]
 801bb1e:	4798      	blx	r3
 801bb20:	4603      	mov	r3, r0
 801bb22:	b21b      	sxth	r3, r3
 801bb24:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801bb26:	4b0a      	ldr	r3, [pc, #40]	; (801bb50 <SysTimeFromMs+0x78>)
 801bb28:	685b      	ldr	r3, [r3, #4]
 801bb2a:	4798      	blx	r3
 801bb2c:	4603      	mov	r3, r0
 801bb2e:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801bb30:	6878      	ldr	r0, [r7, #4]
 801bb32:	693b      	ldr	r3, [r7, #16]
 801bb34:	9300      	str	r3, [sp, #0]
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	f107 0214 	add.w	r2, r7, #20
 801bb3c:	ca06      	ldmia	r2, {r1, r2}
 801bb3e:	f7ff feab 	bl	801b898 <SysTimeAdd>
}
 801bb42:	6878      	ldr	r0, [r7, #4]
 801bb44:	3720      	adds	r7, #32
 801bb46:	46bd      	mov	sp, r7
 801bb48:	bd80      	pop	{r7, pc}
 801bb4a:	bf00      	nop
 801bb4c:	10624dd3 	.word	0x10624dd3
 801bb50:	0801d934 	.word	0x0801d934

0801bb54 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801bb54:	b480      	push	{r7}
 801bb56:	b085      	sub	sp, #20
 801bb58:	af00      	add	r7, sp, #0
 801bb5a:	6078      	str	r0, [r7, #4]
  int i = 0;
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801bb60:	e00e      	b.n	801bb80 <ee_skip_atoi+0x2c>
 801bb62:	68fa      	ldr	r2, [r7, #12]
 801bb64:	4613      	mov	r3, r2
 801bb66:	009b      	lsls	r3, r3, #2
 801bb68:	4413      	add	r3, r2
 801bb6a:	005b      	lsls	r3, r3, #1
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	1c59      	adds	r1, r3, #1
 801bb74:	687a      	ldr	r2, [r7, #4]
 801bb76:	6011      	str	r1, [r2, #0]
 801bb78:	781b      	ldrb	r3, [r3, #0]
 801bb7a:	4403      	add	r3, r0
 801bb7c:	3b30      	subs	r3, #48	; 0x30
 801bb7e:	60fb      	str	r3, [r7, #12]
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	2b2f      	cmp	r3, #47	; 0x2f
 801bb88:	d904      	bls.n	801bb94 <ee_skip_atoi+0x40>
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	781b      	ldrb	r3, [r3, #0]
 801bb90:	2b39      	cmp	r3, #57	; 0x39
 801bb92:	d9e6      	bls.n	801bb62 <ee_skip_atoi+0xe>
  return i;
 801bb94:	68fb      	ldr	r3, [r7, #12]
}
 801bb96:	4618      	mov	r0, r3
 801bb98:	3714      	adds	r7, #20
 801bb9a:	46bd      	mov	sp, r7
 801bb9c:	bc80      	pop	{r7}
 801bb9e:	4770      	bx	lr

0801bba0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801bba0:	b480      	push	{r7}
 801bba2:	b099      	sub	sp, #100	; 0x64
 801bba4:	af00      	add	r7, sp, #0
 801bba6:	60f8      	str	r0, [r7, #12]
 801bba8:	60b9      	str	r1, [r7, #8]
 801bbaa:	607a      	str	r2, [r7, #4]
 801bbac:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801bbae:	4b71      	ldr	r3, [pc, #452]	; (801bd74 <ee_number+0x1d4>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801bbb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d002      	beq.n	801bbc4 <ee_number+0x24>
 801bbbe:	4b6e      	ldr	r3, [pc, #440]	; (801bd78 <ee_number+0x1d8>)
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801bbc4:	683b      	ldr	r3, [r7, #0]
 801bbc6:	2b01      	cmp	r3, #1
 801bbc8:	dd02      	ble.n	801bbd0 <ee_number+0x30>
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	2b24      	cmp	r3, #36	; 0x24
 801bbce:	dd01      	ble.n	801bbd4 <ee_number+0x34>
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	e0ca      	b.n	801bd6a <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801bbd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bbd6:	f003 0301 	and.w	r3, r3, #1
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d001      	beq.n	801bbe2 <ee_number+0x42>
 801bbde:	2330      	movs	r3, #48	; 0x30
 801bbe0:	e000      	b.n	801bbe4 <ee_number+0x44>
 801bbe2:	2320      	movs	r3, #32
 801bbe4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801bbe8:	2300      	movs	r3, #0
 801bbea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801bbee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bbf0:	f003 0302 	and.w	r3, r3, #2
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	d00b      	beq.n	801bc10 <ee_number+0x70>
  {
    if (num < 0)
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	da08      	bge.n	801bc10 <ee_number+0x70>
    {
      sign = '-';
 801bbfe:	232d      	movs	r3, #45	; 0x2d
 801bc00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	425b      	negs	r3, r3
 801bc08:	607b      	str	r3, [r7, #4]
      size--;
 801bc0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bc0c:	3b01      	subs	r3, #1
 801bc0e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801bc10:	2300      	movs	r3, #0
 801bc12:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	d11e      	bne.n	801bc58 <ee_number+0xb8>
    tmp[i++] = '0';
 801bc1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc1c:	1c5a      	adds	r2, r3, #1
 801bc1e:	657a      	str	r2, [r7, #84]	; 0x54
 801bc20:	3360      	adds	r3, #96	; 0x60
 801bc22:	443b      	add	r3, r7
 801bc24:	2230      	movs	r2, #48	; 0x30
 801bc26:	f803 2c50 	strb.w	r2, [r3, #-80]
 801bc2a:	e018      	b.n	801bc5e <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	683a      	ldr	r2, [r7, #0]
 801bc30:	fbb3 f1f2 	udiv	r1, r3, r2
 801bc34:	fb01 f202 	mul.w	r2, r1, r2
 801bc38:	1a9b      	subs	r3, r3, r2
 801bc3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bc3c:	441a      	add	r2, r3
 801bc3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc40:	1c59      	adds	r1, r3, #1
 801bc42:	6579      	str	r1, [r7, #84]	; 0x54
 801bc44:	7812      	ldrb	r2, [r2, #0]
 801bc46:	3360      	adds	r3, #96	; 0x60
 801bc48:	443b      	add	r3, r7
 801bc4a:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801bc4e:	687a      	ldr	r2, [r7, #4]
 801bc50:	683b      	ldr	r3, [r7, #0]
 801bc52:	fbb2 f3f3 	udiv	r3, r2, r3
 801bc56:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d1e6      	bne.n	801bc2c <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801bc5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bc60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bc62:	429a      	cmp	r2, r3
 801bc64:	dd01      	ble.n	801bc6a <ee_number+0xca>
 801bc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bc68:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801bc6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bc6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bc6e:	1ad3      	subs	r3, r2, r3
 801bc70:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801bc72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bc74:	f003 0301 	and.w	r3, r3, #1
 801bc78:	2b00      	cmp	r3, #0
 801bc7a:	d112      	bne.n	801bca2 <ee_number+0x102>
 801bc7c:	e00c      	b.n	801bc98 <ee_number+0xf8>
 801bc7e:	68fb      	ldr	r3, [r7, #12]
 801bc80:	1c5a      	adds	r2, r3, #1
 801bc82:	60fa      	str	r2, [r7, #12]
 801bc84:	2220      	movs	r2, #32
 801bc86:	701a      	strb	r2, [r3, #0]
 801bc88:	68bb      	ldr	r3, [r7, #8]
 801bc8a:	3b01      	subs	r3, #1
 801bc8c:	60bb      	str	r3, [r7, #8]
 801bc8e:	68bb      	ldr	r3, [r7, #8]
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d101      	bne.n	801bc98 <ee_number+0xf8>
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	e068      	b.n	801bd6a <ee_number+0x1ca>
 801bc98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bc9a:	1e5a      	subs	r2, r3, #1
 801bc9c:	66ba      	str	r2, [r7, #104]	; 0x68
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	dced      	bgt.n	801bc7e <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801bca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d01b      	beq.n	801bce2 <ee_number+0x142>
 801bcaa:	68fb      	ldr	r3, [r7, #12]
 801bcac:	1c5a      	adds	r2, r3, #1
 801bcae:	60fa      	str	r2, [r7, #12]
 801bcb0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801bcb4:	701a      	strb	r2, [r3, #0]
 801bcb6:	68bb      	ldr	r3, [r7, #8]
 801bcb8:	3b01      	subs	r3, #1
 801bcba:	60bb      	str	r3, [r7, #8]
 801bcbc:	68bb      	ldr	r3, [r7, #8]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d10f      	bne.n	801bce2 <ee_number+0x142>
 801bcc2:	68fb      	ldr	r3, [r7, #12]
 801bcc4:	e051      	b.n	801bd6a <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	1c5a      	adds	r2, r3, #1
 801bcca:	60fa      	str	r2, [r7, #12]
 801bccc:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801bcd0:	701a      	strb	r2, [r3, #0]
 801bcd2:	68bb      	ldr	r3, [r7, #8]
 801bcd4:	3b01      	subs	r3, #1
 801bcd6:	60bb      	str	r3, [r7, #8]
 801bcd8:	68bb      	ldr	r3, [r7, #8]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d101      	bne.n	801bce2 <ee_number+0x142>
 801bcde:	68fb      	ldr	r3, [r7, #12]
 801bce0:	e043      	b.n	801bd6a <ee_number+0x1ca>
 801bce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bce4:	1e5a      	subs	r2, r3, #1
 801bce6:	66ba      	str	r2, [r7, #104]	; 0x68
 801bce8:	2b00      	cmp	r3, #0
 801bcea:	dcec      	bgt.n	801bcc6 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801bcec:	e00c      	b.n	801bd08 <ee_number+0x168>
 801bcee:	68fb      	ldr	r3, [r7, #12]
 801bcf0:	1c5a      	adds	r2, r3, #1
 801bcf2:	60fa      	str	r2, [r7, #12]
 801bcf4:	2230      	movs	r2, #48	; 0x30
 801bcf6:	701a      	strb	r2, [r3, #0]
 801bcf8:	68bb      	ldr	r3, [r7, #8]
 801bcfa:	3b01      	subs	r3, #1
 801bcfc:	60bb      	str	r3, [r7, #8]
 801bcfe:	68bb      	ldr	r3, [r7, #8]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d101      	bne.n	801bd08 <ee_number+0x168>
 801bd04:	68fb      	ldr	r3, [r7, #12]
 801bd06:	e030      	b.n	801bd6a <ee_number+0x1ca>
 801bd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bd0a:	1e5a      	subs	r2, r3, #1
 801bd0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bd0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bd10:	429a      	cmp	r2, r3
 801bd12:	dbec      	blt.n	801bcee <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801bd14:	e010      	b.n	801bd38 <ee_number+0x198>
 801bd16:	68fb      	ldr	r3, [r7, #12]
 801bd18:	1c5a      	adds	r2, r3, #1
 801bd1a:	60fa      	str	r2, [r7, #12]
 801bd1c:	f107 0110 	add.w	r1, r7, #16
 801bd20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bd22:	440a      	add	r2, r1
 801bd24:	7812      	ldrb	r2, [r2, #0]
 801bd26:	701a      	strb	r2, [r3, #0]
 801bd28:	68bb      	ldr	r3, [r7, #8]
 801bd2a:	3b01      	subs	r3, #1
 801bd2c:	60bb      	str	r3, [r7, #8]
 801bd2e:	68bb      	ldr	r3, [r7, #8]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d101      	bne.n	801bd38 <ee_number+0x198>
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	e018      	b.n	801bd6a <ee_number+0x1ca>
 801bd38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd3a:	1e5a      	subs	r2, r3, #1
 801bd3c:	657a      	str	r2, [r7, #84]	; 0x54
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	dce9      	bgt.n	801bd16 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801bd42:	e00c      	b.n	801bd5e <ee_number+0x1be>
 801bd44:	68fb      	ldr	r3, [r7, #12]
 801bd46:	1c5a      	adds	r2, r3, #1
 801bd48:	60fa      	str	r2, [r7, #12]
 801bd4a:	2220      	movs	r2, #32
 801bd4c:	701a      	strb	r2, [r3, #0]
 801bd4e:	68bb      	ldr	r3, [r7, #8]
 801bd50:	3b01      	subs	r3, #1
 801bd52:	60bb      	str	r3, [r7, #8]
 801bd54:	68bb      	ldr	r3, [r7, #8]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d101      	bne.n	801bd5e <ee_number+0x1be>
 801bd5a:	68fb      	ldr	r3, [r7, #12]
 801bd5c:	e005      	b.n	801bd6a <ee_number+0x1ca>
 801bd5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801bd60:	1e5a      	subs	r2, r3, #1
 801bd62:	66ba      	str	r2, [r7, #104]	; 0x68
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	dced      	bgt.n	801bd44 <ee_number+0x1a4>

  return str;
 801bd68:	68fb      	ldr	r3, [r7, #12]
}
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	3764      	adds	r7, #100	; 0x64
 801bd6e:	46bd      	mov	sp, r7
 801bd70:	bc80      	pop	{r7}
 801bd72:	4770      	bx	lr
 801bd74:	20000148 	.word	0x20000148
 801bd78:	2000014c 	.word	0x2000014c

0801bd7c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b092      	sub	sp, #72	; 0x48
 801bd80:	af04      	add	r7, sp, #16
 801bd82:	60f8      	str	r0, [r7, #12]
 801bd84:	60b9      	str	r1, [r7, #8]
 801bd86:	607a      	str	r2, [r7, #4]
 801bd88:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801bd8a:	68bb      	ldr	r3, [r7, #8]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	dc01      	bgt.n	801bd94 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801bd90:	2300      	movs	r3, #0
 801bd92:	e142      	b.n	801c01a <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	62fb      	str	r3, [r7, #44]	; 0x2c
 801bd98:	e12a      	b.n	801bff0 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801bd9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	1ad2      	subs	r2, r2, r3
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	3b01      	subs	r3, #1
 801bda4:	429a      	cmp	r2, r3
 801bda6:	f280 8131 	bge.w	801c00c <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	781b      	ldrb	r3, [r3, #0]
 801bdae:	2b25      	cmp	r3, #37	; 0x25
 801bdb0:	d006      	beq.n	801bdc0 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801bdb2:	687a      	ldr	r2, [r7, #4]
 801bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdb6:	1c59      	adds	r1, r3, #1
 801bdb8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bdba:	7812      	ldrb	r2, [r2, #0]
 801bdbc:	701a      	strb	r2, [r3, #0]
      continue;
 801bdbe:	e114      	b.n	801bfea <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	781b      	ldrb	r3, [r3, #0]
 801bdce:	2b30      	cmp	r3, #48	; 0x30
 801bdd0:	d103      	bne.n	801bdda <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801bdd2:	6a3b      	ldr	r3, [r7, #32]
 801bdd4:	f043 0301 	orr.w	r3, r3, #1
 801bdd8:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801bdda:	f04f 33ff 	mov.w	r3, #4294967295
 801bdde:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	781b      	ldrb	r3, [r3, #0]
 801bde4:	2b2f      	cmp	r3, #47	; 0x2f
 801bde6:	d908      	bls.n	801bdfa <tiny_vsnprintf_like+0x7e>
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	781b      	ldrb	r3, [r3, #0]
 801bdec:	2b39      	cmp	r3, #57	; 0x39
 801bdee:	d804      	bhi.n	801bdfa <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801bdf0:	1d3b      	adds	r3, r7, #4
 801bdf2:	4618      	mov	r0, r3
 801bdf4:	f7ff feae 	bl	801bb54 <ee_skip_atoi>
 801bdf8:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801bdfa:	f04f 33ff 	mov.w	r3, #4294967295
 801bdfe:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801be00:	f04f 33ff 	mov.w	r3, #4294967295
 801be04:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801be06:	230a      	movs	r3, #10
 801be08:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	781b      	ldrb	r3, [r3, #0]
 801be0e:	3b58      	subs	r3, #88	; 0x58
 801be10:	2b20      	cmp	r3, #32
 801be12:	f200 8094 	bhi.w	801bf3e <tiny_vsnprintf_like+0x1c2>
 801be16:	a201      	add	r2, pc, #4	; (adr r2, 801be1c <tiny_vsnprintf_like+0xa0>)
 801be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be1c:	0801bf27 	.word	0x0801bf27
 801be20:	0801bf3f 	.word	0x0801bf3f
 801be24:	0801bf3f 	.word	0x0801bf3f
 801be28:	0801bf3f 	.word	0x0801bf3f
 801be2c:	0801bf3f 	.word	0x0801bf3f
 801be30:	0801bf3f 	.word	0x0801bf3f
 801be34:	0801bf3f 	.word	0x0801bf3f
 801be38:	0801bf3f 	.word	0x0801bf3f
 801be3c:	0801bf3f 	.word	0x0801bf3f
 801be40:	0801bf3f 	.word	0x0801bf3f
 801be44:	0801bf3f 	.word	0x0801bf3f
 801be48:	0801beab 	.word	0x0801beab
 801be4c:	0801bf35 	.word	0x0801bf35
 801be50:	0801bf3f 	.word	0x0801bf3f
 801be54:	0801bf3f 	.word	0x0801bf3f
 801be58:	0801bf3f 	.word	0x0801bf3f
 801be5c:	0801bf3f 	.word	0x0801bf3f
 801be60:	0801bf35 	.word	0x0801bf35
 801be64:	0801bf3f 	.word	0x0801bf3f
 801be68:	0801bf3f 	.word	0x0801bf3f
 801be6c:	0801bf3f 	.word	0x0801bf3f
 801be70:	0801bf3f 	.word	0x0801bf3f
 801be74:	0801bf3f 	.word	0x0801bf3f
 801be78:	0801bf3f 	.word	0x0801bf3f
 801be7c:	0801bf3f 	.word	0x0801bf3f
 801be80:	0801bf3f 	.word	0x0801bf3f
 801be84:	0801bf3f 	.word	0x0801bf3f
 801be88:	0801becb 	.word	0x0801becb
 801be8c:	0801bf3f 	.word	0x0801bf3f
 801be90:	0801bf8b 	.word	0x0801bf8b
 801be94:	0801bf3f 	.word	0x0801bf3f
 801be98:	0801bf3f 	.word	0x0801bf3f
 801be9c:	0801bf2f 	.word	0x0801bf2f
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bea2:	1c5a      	adds	r2, r3, #1
 801bea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bea6:	2220      	movs	r2, #32
 801bea8:	701a      	strb	r2, [r3, #0]
 801beaa:	69fb      	ldr	r3, [r7, #28]
 801beac:	3b01      	subs	r3, #1
 801beae:	61fb      	str	r3, [r7, #28]
 801beb0:	69fb      	ldr	r3, [r7, #28]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	dcf4      	bgt.n	801bea0 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801beb6:	683b      	ldr	r3, [r7, #0]
 801beb8:	1d1a      	adds	r2, r3, #4
 801beba:	603a      	str	r2, [r7, #0]
 801bebc:	6819      	ldr	r1, [r3, #0]
 801bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bec0:	1c5a      	adds	r2, r3, #1
 801bec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bec4:	b2ca      	uxtb	r2, r1
 801bec6:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801bec8:	e08f      	b.n	801bfea <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801beca:	683b      	ldr	r3, [r7, #0]
 801becc:	1d1a      	adds	r2, r3, #4
 801bece:	603a      	str	r2, [r7, #0]
 801bed0:	681b      	ldr	r3, [r3, #0]
 801bed2:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d101      	bne.n	801bede <tiny_vsnprintf_like+0x162>
 801beda:	4b52      	ldr	r3, [pc, #328]	; (801c024 <tiny_vsnprintf_like+0x2a8>)
 801bedc:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801bede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bee0:	f7e4 f94a 	bl	8000178 <strlen>
 801bee4:	4603      	mov	r3, r0
 801bee6:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801bee8:	e004      	b.n	801bef4 <tiny_vsnprintf_like+0x178>
 801beea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beec:	1c5a      	adds	r2, r3, #1
 801beee:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bef0:	2220      	movs	r2, #32
 801bef2:	701a      	strb	r2, [r3, #0]
 801bef4:	69fb      	ldr	r3, [r7, #28]
 801bef6:	1e5a      	subs	r2, r3, #1
 801bef8:	61fa      	str	r2, [r7, #28]
 801befa:	693a      	ldr	r2, [r7, #16]
 801befc:	429a      	cmp	r2, r3
 801befe:	dbf4      	blt.n	801beea <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801bf00:	2300      	movs	r3, #0
 801bf02:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf04:	e00a      	b.n	801bf1c <tiny_vsnprintf_like+0x1a0>
 801bf06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf08:	1c53      	adds	r3, r2, #1
 801bf0a:	627b      	str	r3, [r7, #36]	; 0x24
 801bf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf0e:	1c59      	adds	r1, r3, #1
 801bf10:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bf12:	7812      	ldrb	r2, [r2, #0]
 801bf14:	701a      	strb	r2, [r3, #0]
 801bf16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf18:	3301      	adds	r3, #1
 801bf1a:	62bb      	str	r3, [r7, #40]	; 0x28
 801bf1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801bf1e:	693b      	ldr	r3, [r7, #16]
 801bf20:	429a      	cmp	r2, r3
 801bf22:	dbf0      	blt.n	801bf06 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801bf24:	e061      	b.n	801bfea <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801bf26:	6a3b      	ldr	r3, [r7, #32]
 801bf28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf2c:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801bf2e:	2310      	movs	r3, #16
 801bf30:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801bf32:	e02d      	b.n	801bf90 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801bf34:	6a3b      	ldr	r3, [r7, #32]
 801bf36:	f043 0302 	orr.w	r3, r3, #2
 801bf3a:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801bf3c:	e025      	b.n	801bf8a <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	781b      	ldrb	r3, [r3, #0]
 801bf42:	2b25      	cmp	r3, #37	; 0x25
 801bf44:	d004      	beq.n	801bf50 <tiny_vsnprintf_like+0x1d4>
 801bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf48:	1c5a      	adds	r2, r3, #1
 801bf4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801bf4c:	2225      	movs	r2, #37	; 0x25
 801bf4e:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801bf50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	1ad2      	subs	r2, r2, r3
 801bf56:	68bb      	ldr	r3, [r7, #8]
 801bf58:	3b01      	subs	r3, #1
 801bf5a:	429a      	cmp	r2, r3
 801bf5c:	da17      	bge.n	801bf8e <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	781b      	ldrb	r3, [r3, #0]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d006      	beq.n	801bf74 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801bf66:	687a      	ldr	r2, [r7, #4]
 801bf68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf6a:	1c59      	adds	r1, r3, #1
 801bf6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801bf6e:	7812      	ldrb	r2, [r2, #0]
 801bf70:	701a      	strb	r2, [r3, #0]
 801bf72:	e002      	b.n	801bf7a <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	3b01      	subs	r3, #1
 801bf78:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801bf7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	1ad2      	subs	r2, r2, r3
 801bf80:	68bb      	ldr	r3, [r7, #8]
 801bf82:	3b01      	subs	r3, #1
 801bf84:	429a      	cmp	r2, r3
 801bf86:	db2f      	blt.n	801bfe8 <tiny_vsnprintf_like+0x26c>
 801bf88:	e002      	b.n	801bf90 <tiny_vsnprintf_like+0x214>
        break;
 801bf8a:	bf00      	nop
 801bf8c:	e000      	b.n	801bf90 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801bf8e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801bf90:	697b      	ldr	r3, [r7, #20]
 801bf92:	2b6c      	cmp	r3, #108	; 0x6c
 801bf94:	d105      	bne.n	801bfa2 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	1d1a      	adds	r2, r3, #4
 801bf9a:	603a      	str	r2, [r7, #0]
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	637b      	str	r3, [r7, #52]	; 0x34
 801bfa0:	e00f      	b.n	801bfc2 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801bfa2:	6a3b      	ldr	r3, [r7, #32]
 801bfa4:	f003 0302 	and.w	r3, r3, #2
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d005      	beq.n	801bfb8 <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801bfac:	683b      	ldr	r3, [r7, #0]
 801bfae:	1d1a      	adds	r2, r3, #4
 801bfb0:	603a      	str	r2, [r7, #0]
 801bfb2:	681b      	ldr	r3, [r3, #0]
 801bfb4:	637b      	str	r3, [r7, #52]	; 0x34
 801bfb6:	e004      	b.n	801bfc2 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	1d1a      	adds	r2, r3, #4
 801bfbc:	603a      	str	r2, [r7, #0]
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801bfc2:	68bb      	ldr	r3, [r7, #8]
 801bfc4:	1e5a      	subs	r2, r3, #1
 801bfc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bfc8:	68fb      	ldr	r3, [r7, #12]
 801bfca:	1acb      	subs	r3, r1, r3
 801bfcc:	1ad1      	subs	r1, r2, r3
 801bfce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bfd0:	6a3b      	ldr	r3, [r7, #32]
 801bfd2:	9302      	str	r3, [sp, #8]
 801bfd4:	69bb      	ldr	r3, [r7, #24]
 801bfd6:	9301      	str	r3, [sp, #4]
 801bfd8:	69fb      	ldr	r3, [r7, #28]
 801bfda:	9300      	str	r3, [sp, #0]
 801bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bfe0:	f7ff fdde 	bl	801bba0 <ee_number>
 801bfe4:	62f8      	str	r0, [r7, #44]	; 0x2c
 801bfe6:	e000      	b.n	801bfea <tiny_vsnprintf_like+0x26e>
        continue;
 801bfe8:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	3301      	adds	r3, #1
 801bfee:	607b      	str	r3, [r7, #4]
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	781b      	ldrb	r3, [r3, #0]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	f47f aed0 	bne.w	801bd9a <tiny_vsnprintf_like+0x1e>
 801bffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bffc:	68fb      	ldr	r3, [r7, #12]
 801bffe:	1ad2      	subs	r2, r2, r3
 801c000:	68bb      	ldr	r3, [r7, #8]
 801c002:	3b01      	subs	r3, #1
 801c004:	429a      	cmp	r2, r3
 801c006:	f6bf aec8 	bge.w	801bd9a <tiny_vsnprintf_like+0x1e>
 801c00a:	e000      	b.n	801c00e <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801c00c:	bf00      	nop
  }

  *str = '\0';
 801c00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c010:	2200      	movs	r2, #0
 801c012:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801c014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	1ad3      	subs	r3, r2, r3
}
 801c01a:	4618      	mov	r0, r3
 801c01c:	3738      	adds	r7, #56	; 0x38
 801c01e:	46bd      	mov	sp, r7
 801c020:	bd80      	pop	{r7, pc}
 801c022:	bf00      	nop
 801c024:	0801d848 	.word	0x0801d848

0801c028 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801c028:	b580      	push	{r7, lr}
 801c02a:	b090      	sub	sp, #64	; 0x40
 801c02c:	af00      	add	r7, sp, #0
 801c02e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801c030:	4b73      	ldr	r3, [pc, #460]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801c036:	4b72      	ldr	r3, [pc, #456]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c038:	681a      	ldr	r2, [r3, #0]
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	4013      	ands	r3, r2
 801c03e:	4a70      	ldr	r2, [pc, #448]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c040:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801c042:	4b70      	ldr	r3, [pc, #448]	; (801c204 <UTIL_SEQ_Run+0x1dc>)
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c048:	4b6f      	ldr	r3, [pc, #444]	; (801c208 <UTIL_SEQ_Run+0x1e0>)
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c04e:	4b6f      	ldr	r3, [pc, #444]	; (801c20c <UTIL_SEQ_Run+0x1e4>)
 801c050:	681b      	ldr	r3, [r3, #0]
 801c052:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801c054:	4b6e      	ldr	r3, [pc, #440]	; (801c210 <UTIL_SEQ_Run+0x1e8>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c05a:	e08d      	b.n	801c178 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801c05c:	2300      	movs	r3, #0
 801c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c060:	e002      	b.n	801c068 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c064:	3301      	adds	r3, #1
 801c066:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801c068:	4a6a      	ldr	r2, [pc, #424]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c06c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c072:	401a      	ands	r2, r3
 801c074:	4b62      	ldr	r3, [pc, #392]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	4013      	ands	r3, r2
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d0f1      	beq.n	801c062 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801c07e:	4a65      	ldr	r2, [pc, #404]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c082:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c088:	401a      	ands	r2, r3
 801c08a:	4b5d      	ldr	r3, [pc, #372]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c08c:	681b      	ldr	r3, [r3, #0]
 801c08e:	4013      	ands	r3, r2
 801c090:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801c092:	4a60      	ldr	r2, [pc, #384]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c096:	00db      	lsls	r3, r3, #3
 801c098:	4413      	add	r3, r2
 801c09a:	685a      	ldr	r2, [r3, #4]
 801c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c09e:	4013      	ands	r3, r2
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d106      	bne.n	801c0b2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801c0a4:	4a5b      	ldr	r2, [pc, #364]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0a8:	00db      	lsls	r3, r3, #3
 801c0aa:	4413      	add	r3, r2
 801c0ac:	f04f 32ff 	mov.w	r2, #4294967295
 801c0b0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801c0b2:	4a58      	ldr	r2, [pc, #352]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0b6:	00db      	lsls	r3, r3, #3
 801c0b8:	4413      	add	r3, r2
 801c0ba:	685a      	ldr	r2, [r3, #4]
 801c0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0be:	4013      	ands	r3, r2
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f000 f907 	bl	801c2d4 <SEQ_BitPosition>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	461a      	mov	r2, r3
 801c0ca:	4b53      	ldr	r3, [pc, #332]	; (801c218 <UTIL_SEQ_Run+0x1f0>)
 801c0cc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801c0ce:	4a51      	ldr	r2, [pc, #324]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0d2:	00db      	lsls	r3, r3, #3
 801c0d4:	4413      	add	r3, r2
 801c0d6:	685a      	ldr	r2, [r3, #4]
 801c0d8:	4b4f      	ldr	r3, [pc, #316]	; (801c218 <UTIL_SEQ_Run+0x1f0>)
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	2101      	movs	r1, #1
 801c0de:	fa01 f303 	lsl.w	r3, r1, r3
 801c0e2:	43db      	mvns	r3, r3
 801c0e4:	401a      	ands	r2, r3
 801c0e6:	494b      	ldr	r1, [pc, #300]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c0ea:	00db      	lsls	r3, r3, #3
 801c0ec:	440b      	add	r3, r1
 801c0ee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0f0:	f3ef 8310 	mrs	r3, PRIMASK
 801c0f4:	61bb      	str	r3, [r7, #24]
  return(result);
 801c0f6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c0f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0fa:	b672      	cpsid	i
}
 801c0fc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801c0fe:	4b46      	ldr	r3, [pc, #280]	; (801c218 <UTIL_SEQ_Run+0x1f0>)
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	2201      	movs	r2, #1
 801c104:	fa02 f303 	lsl.w	r3, r2, r3
 801c108:	43da      	mvns	r2, r3
 801c10a:	4b3e      	ldr	r3, [pc, #248]	; (801c204 <UTIL_SEQ_Run+0x1dc>)
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	4013      	ands	r3, r2
 801c110:	4a3c      	ldr	r2, [pc, #240]	; (801c204 <UTIL_SEQ_Run+0x1dc>)
 801c112:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c114:	2301      	movs	r3, #1
 801c116:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c118:	e013      	b.n	801c142 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801c11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c11c:	3b01      	subs	r3, #1
 801c11e:	4a3d      	ldr	r2, [pc, #244]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c120:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801c124:	4b3c      	ldr	r3, [pc, #240]	; (801c218 <UTIL_SEQ_Run+0x1f0>)
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	2201      	movs	r2, #1
 801c12a:	fa02 f303 	lsl.w	r3, r2, r3
 801c12e:	43da      	mvns	r2, r3
 801c130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c132:	3b01      	subs	r3, #1
 801c134:	400a      	ands	r2, r1
 801c136:	4937      	ldr	r1, [pc, #220]	; (801c214 <UTIL_SEQ_Run+0x1ec>)
 801c138:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801c13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c13e:	3b01      	subs	r3, #1
 801c140:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c144:	2b00      	cmp	r3, #0
 801c146:	d1e8      	bne.n	801c11a <UTIL_SEQ_Run+0xf2>
 801c148:	6a3b      	ldr	r3, [r7, #32]
 801c14a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c14c:	697b      	ldr	r3, [r7, #20]
 801c14e:	f383 8810 	msr	PRIMASK, r3
}
 801c152:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801c154:	4b30      	ldr	r3, [pc, #192]	; (801c218 <UTIL_SEQ_Run+0x1f0>)
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	4a30      	ldr	r2, [pc, #192]	; (801c21c <UTIL_SEQ_Run+0x1f4>)
 801c15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c15e:	4798      	blx	r3

    local_taskset = TaskSet;
 801c160:	4b28      	ldr	r3, [pc, #160]	; (801c204 <UTIL_SEQ_Run+0x1dc>)
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801c166:	4b28      	ldr	r3, [pc, #160]	; (801c208 <UTIL_SEQ_Run+0x1e0>)
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801c16c:	4b27      	ldr	r3, [pc, #156]	; (801c20c <UTIL_SEQ_Run+0x1e4>)
 801c16e:	681b      	ldr	r3, [r3, #0]
 801c170:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801c172:	4b27      	ldr	r3, [pc, #156]	; (801c210 <UTIL_SEQ_Run+0x1e8>)
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801c178:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c17c:	401a      	ands	r2, r3
 801c17e:	4b20      	ldr	r3, [pc, #128]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	4013      	ands	r3, r2
 801c184:	2b00      	cmp	r3, #0
 801c186:	d005      	beq.n	801c194 <UTIL_SEQ_Run+0x16c>
 801c188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c18c:	4013      	ands	r3, r2
 801c18e:	2b00      	cmp	r3, #0
 801c190:	f43f af64 	beq.w	801c05c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801c194:	4b20      	ldr	r3, [pc, #128]	; (801c218 <UTIL_SEQ_Run+0x1f0>)
 801c196:	f04f 32ff 	mov.w	r2, #4294967295
 801c19a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801c19c:	f000 f88e 	bl	801c2bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1a0:	f3ef 8310 	mrs	r3, PRIMASK
 801c1a4:	613b      	str	r3, [r7, #16]
  return(result);
 801c1a6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801c1a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1aa:	b672      	cpsid	i
}
 801c1ac:	bf00      	nop
  local_taskset = TaskSet;
 801c1ae:	4b15      	ldr	r3, [pc, #84]	; (801c204 <UTIL_SEQ_Run+0x1dc>)
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801c1b4:	4b14      	ldr	r3, [pc, #80]	; (801c208 <UTIL_SEQ_Run+0x1e0>)
 801c1b6:	681b      	ldr	r3, [r3, #0]
 801c1b8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801c1ba:	4b14      	ldr	r3, [pc, #80]	; (801c20c <UTIL_SEQ_Run+0x1e4>)
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801c1c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801c1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1c4:	401a      	ands	r2, r3
 801c1c6:	4b0e      	ldr	r3, [pc, #56]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	4013      	ands	r3, r2
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d107      	bne.n	801c1e0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801c1d0:	4b0f      	ldr	r3, [pc, #60]	; (801c210 <UTIL_SEQ_Run+0x1e8>)
 801c1d2:	681a      	ldr	r2, [r3, #0]
 801c1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1d6:	4013      	ands	r3, r2
 801c1d8:	2b00      	cmp	r3, #0
 801c1da:	d101      	bne.n	801c1e0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801c1dc:	f7e5 fc52 	bl	8001a84 <UTIL_SEQ_Idle>
 801c1e0:	69fb      	ldr	r3, [r7, #28]
 801c1e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	f383 8810 	msr	PRIMASK, r3
}
 801c1ea:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801c1ec:	f000 f86c 	bl	801c2c8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801c1f0:	4a03      	ldr	r2, [pc, #12]	; (801c200 <UTIL_SEQ_Run+0x1d8>)
 801c1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c1f4:	6013      	str	r3, [r2, #0]

  return;
 801c1f6:	bf00      	nop
}
 801c1f8:	3740      	adds	r7, #64	; 0x40
 801c1fa:	46bd      	mov	sp, r7
 801c1fc:	bd80      	pop	{r7, pc}
 801c1fe:	bf00      	nop
 801c200:	20000154 	.word	0x20000154
 801c204:	20001b40 	.word	0x20001b40
 801c208:	20001b44 	.word	0x20001b44
 801c20c:	20000150 	.word	0x20000150
 801c210:	20001b48 	.word	0x20001b48
 801c214:	20001b60 	.word	0x20001b60
 801c218:	20001b4c 	.word	0x20001b4c
 801c21c:	20001b50 	.word	0x20001b50

0801c220 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801c220:	b580      	push	{r7, lr}
 801c222:	b088      	sub	sp, #32
 801c224:	af00      	add	r7, sp, #0
 801c226:	60f8      	str	r0, [r7, #12]
 801c228:	60b9      	str	r1, [r7, #8]
 801c22a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c22c:	f3ef 8310 	mrs	r3, PRIMASK
 801c230:	617b      	str	r3, [r7, #20]
  return(result);
 801c232:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801c234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c236:	b672      	cpsid	i
}
 801c238:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801c23a:	68f8      	ldr	r0, [r7, #12]
 801c23c:	f000 f84a 	bl	801c2d4 <SEQ_BitPosition>
 801c240:	4603      	mov	r3, r0
 801c242:	4619      	mov	r1, r3
 801c244:	4a06      	ldr	r2, [pc, #24]	; (801c260 <UTIL_SEQ_RegTask+0x40>)
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801c24c:	69fb      	ldr	r3, [r7, #28]
 801c24e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c250:	69bb      	ldr	r3, [r7, #24]
 801c252:	f383 8810 	msr	PRIMASK, r3
}
 801c256:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801c258:	bf00      	nop
}
 801c25a:	3720      	adds	r7, #32
 801c25c:	46bd      	mov	sp, r7
 801c25e:	bd80      	pop	{r7, pc}
 801c260:	20001b50 	.word	0x20001b50

0801c264 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801c264:	b480      	push	{r7}
 801c266:	b087      	sub	sp, #28
 801c268:	af00      	add	r7, sp, #0
 801c26a:	6078      	str	r0, [r7, #4]
 801c26c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c26e:	f3ef 8310 	mrs	r3, PRIMASK
 801c272:	60fb      	str	r3, [r7, #12]
  return(result);
 801c274:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801c276:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c278:	b672      	cpsid	i
}
 801c27a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801c27c:	4b0d      	ldr	r3, [pc, #52]	; (801c2b4 <UTIL_SEQ_SetTask+0x50>)
 801c27e:	681a      	ldr	r2, [r3, #0]
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	4313      	orrs	r3, r2
 801c284:	4a0b      	ldr	r2, [pc, #44]	; (801c2b4 <UTIL_SEQ_SetTask+0x50>)
 801c286:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801c288:	4a0b      	ldr	r2, [pc, #44]	; (801c2b8 <UTIL_SEQ_SetTask+0x54>)
 801c28a:	683b      	ldr	r3, [r7, #0]
 801c28c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	431a      	orrs	r2, r3
 801c294:	4908      	ldr	r1, [pc, #32]	; (801c2b8 <UTIL_SEQ_SetTask+0x54>)
 801c296:	683b      	ldr	r3, [r7, #0]
 801c298:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801c29c:	697b      	ldr	r3, [r7, #20]
 801c29e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c2a0:	693b      	ldr	r3, [r7, #16]
 801c2a2:	f383 8810 	msr	PRIMASK, r3
}
 801c2a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801c2a8:	bf00      	nop
}
 801c2aa:	371c      	adds	r7, #28
 801c2ac:	46bd      	mov	sp, r7
 801c2ae:	bc80      	pop	{r7}
 801c2b0:	4770      	bx	lr
 801c2b2:	bf00      	nop
 801c2b4:	20001b40 	.word	0x20001b40
 801c2b8:	20001b60 	.word	0x20001b60

0801c2bc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801c2bc:	b480      	push	{r7}
 801c2be:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c2c0:	bf00      	nop
}
 801c2c2:	46bd      	mov	sp, r7
 801c2c4:	bc80      	pop	{r7}
 801c2c6:	4770      	bx	lr

0801c2c8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801c2c8:	b480      	push	{r7}
 801c2ca:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801c2cc:	bf00      	nop
}
 801c2ce:	46bd      	mov	sp, r7
 801c2d0:	bc80      	pop	{r7}
 801c2d2:	4770      	bx	lr

0801c2d4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801c2d4:	b480      	push	{r7}
 801c2d6:	b085      	sub	sp, #20
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801c2dc:	2300      	movs	r3, #0
 801c2de:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801c2e0:	687b      	ldr	r3, [r7, #4]
 801c2e2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	0c1b      	lsrs	r3, r3, #16
 801c2e8:	041b      	lsls	r3, r3, #16
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d104      	bne.n	801c2f8 <SEQ_BitPosition+0x24>
 801c2ee:	2310      	movs	r3, #16
 801c2f0:	73fb      	strb	r3, [r7, #15]
 801c2f2:	68bb      	ldr	r3, [r7, #8]
 801c2f4:	041b      	lsls	r3, r3, #16
 801c2f6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801c2f8:	68bb      	ldr	r3, [r7, #8]
 801c2fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d105      	bne.n	801c30e <SEQ_BitPosition+0x3a>
 801c302:	7bfb      	ldrb	r3, [r7, #15]
 801c304:	3308      	adds	r3, #8
 801c306:	73fb      	strb	r3, [r7, #15]
 801c308:	68bb      	ldr	r3, [r7, #8]
 801c30a:	021b      	lsls	r3, r3, #8
 801c30c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801c30e:	68bb      	ldr	r3, [r7, #8]
 801c310:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801c314:	2b00      	cmp	r3, #0
 801c316:	d105      	bne.n	801c324 <SEQ_BitPosition+0x50>
 801c318:	7bfb      	ldrb	r3, [r7, #15]
 801c31a:	3304      	adds	r3, #4
 801c31c:	73fb      	strb	r3, [r7, #15]
 801c31e:	68bb      	ldr	r3, [r7, #8]
 801c320:	011b      	lsls	r3, r3, #4
 801c322:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801c324:	68bb      	ldr	r3, [r7, #8]
 801c326:	0f1b      	lsrs	r3, r3, #28
 801c328:	4a06      	ldr	r2, [pc, #24]	; (801c344 <SEQ_BitPosition+0x70>)
 801c32a:	5cd2      	ldrb	r2, [r2, r3]
 801c32c:	7bfb      	ldrb	r3, [r7, #15]
 801c32e:	4413      	add	r3, r2
 801c330:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801c332:	7bfb      	ldrb	r3, [r7, #15]
 801c334:	f1c3 031f 	rsb	r3, r3, #31
 801c338:	b2db      	uxtb	r3, r3
}
 801c33a:	4618      	mov	r0, r3
 801c33c:	3714      	adds	r7, #20
 801c33e:	46bd      	mov	sp, r7
 801c340:	bc80      	pop	{r7}
 801c342:	4770      	bx	lr
 801c344:	0801de84 	.word	0x0801de84

0801c348 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801c348:	b580      	push	{r7, lr}
 801c34a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801c34c:	4b04      	ldr	r3, [pc, #16]	; (801c360 <UTIL_TIMER_Init+0x18>)
 801c34e:	2200      	movs	r2, #0
 801c350:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801c352:	4b04      	ldr	r3, [pc, #16]	; (801c364 <UTIL_TIMER_Init+0x1c>)
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	4798      	blx	r3
 801c358:	4603      	mov	r3, r0
}
 801c35a:	4618      	mov	r0, r3
 801c35c:	bd80      	pop	{r7, pc}
 801c35e:	bf00      	nop
 801c360:	20001b68 	.word	0x20001b68
 801c364:	0801d908 	.word	0x0801d908

0801c368 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b084      	sub	sp, #16
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	60f8      	str	r0, [r7, #12]
 801c370:	60b9      	str	r1, [r7, #8]
 801c372:	603b      	str	r3, [r7, #0]
 801c374:	4613      	mov	r3, r2
 801c376:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801c378:	68fb      	ldr	r3, [r7, #12]
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d023      	beq.n	801c3c6 <UTIL_TIMER_Create+0x5e>
 801c37e:	683b      	ldr	r3, [r7, #0]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d020      	beq.n	801c3c6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801c384:	68fb      	ldr	r3, [r7, #12]
 801c386:	2200      	movs	r2, #0
 801c388:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801c38a:	4b11      	ldr	r3, [pc, #68]	; (801c3d0 <UTIL_TIMER_Create+0x68>)
 801c38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c38e:	68b8      	ldr	r0, [r7, #8]
 801c390:	4798      	blx	r3
 801c392:	4602      	mov	r2, r0
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801c398:	68fb      	ldr	r3, [r7, #12]
 801c39a:	2200      	movs	r2, #0
 801c39c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	2200      	movs	r2, #0
 801c3a2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2200      	movs	r2, #0
 801c3a8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	683a      	ldr	r2, [r7, #0]
 801c3ae:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	69ba      	ldr	r2, [r7, #24]
 801c3b4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	79fa      	ldrb	r2, [r7, #7]
 801c3ba:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801c3bc:	68fb      	ldr	r3, [r7, #12]
 801c3be:	2200      	movs	r2, #0
 801c3c0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801c3c2:	2300      	movs	r3, #0
 801c3c4:	e000      	b.n	801c3c8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801c3c6:	2301      	movs	r3, #1
  }
}
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	3710      	adds	r7, #16
 801c3cc:	46bd      	mov	sp, r7
 801c3ce:	bd80      	pop	{r7, pc}
 801c3d0:	0801d908 	.word	0x0801d908

0801c3d4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801c3d4:	b580      	push	{r7, lr}
 801c3d6:	b08a      	sub	sp, #40	; 0x28
 801c3d8:	af00      	add	r7, sp, #0
 801c3da:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c3dc:	2300      	movs	r3, #0
 801c3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d056      	beq.n	801c496 <UTIL_TIMER_Start+0xc2>
 801c3e8:	6878      	ldr	r0, [r7, #4]
 801c3ea:	f000 f9a9 	bl	801c740 <TimerExists>
 801c3ee:	4603      	mov	r3, r0
 801c3f0:	f083 0301 	eor.w	r3, r3, #1
 801c3f4:	b2db      	uxtb	r3, r3
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d04d      	beq.n	801c496 <UTIL_TIMER_Start+0xc2>
 801c3fa:	687b      	ldr	r3, [r7, #4]
 801c3fc:	7a5b      	ldrb	r3, [r3, #9]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	d149      	bne.n	801c496 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c402:	f3ef 8310 	mrs	r3, PRIMASK
 801c406:	613b      	str	r3, [r7, #16]
  return(result);
 801c408:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c40a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801c40c:	b672      	cpsid	i
}
 801c40e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801c416:	4b24      	ldr	r3, [pc, #144]	; (801c4a8 <UTIL_TIMER_Start+0xd4>)
 801c418:	6a1b      	ldr	r3, [r3, #32]
 801c41a:	4798      	blx	r3
 801c41c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801c41e:	6a3a      	ldr	r2, [r7, #32]
 801c420:	69bb      	ldr	r3, [r7, #24]
 801c422:	429a      	cmp	r2, r3
 801c424:	d201      	bcs.n	801c42a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801c426:	69bb      	ldr	r3, [r7, #24]
 801c428:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	6a3a      	ldr	r2, [r7, #32]
 801c42e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	2200      	movs	r2, #0
 801c434:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	2201      	movs	r2, #1
 801c43a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	2200      	movs	r2, #0
 801c440:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801c442:	4b1a      	ldr	r3, [pc, #104]	; (801c4ac <UTIL_TIMER_Start+0xd8>)
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	2b00      	cmp	r3, #0
 801c448:	d106      	bne.n	801c458 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801c44a:	4b17      	ldr	r3, [pc, #92]	; (801c4a8 <UTIL_TIMER_Start+0xd4>)
 801c44c:	691b      	ldr	r3, [r3, #16]
 801c44e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801c450:	6878      	ldr	r0, [r7, #4]
 801c452:	f000 f9eb 	bl	801c82c <TimerInsertNewHeadTimer>
 801c456:	e017      	b.n	801c488 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801c458:	4b13      	ldr	r3, [pc, #76]	; (801c4a8 <UTIL_TIMER_Start+0xd4>)
 801c45a:	699b      	ldr	r3, [r3, #24]
 801c45c:	4798      	blx	r3
 801c45e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	681a      	ldr	r2, [r3, #0]
 801c464:	697b      	ldr	r3, [r7, #20]
 801c466:	441a      	add	r2, r3
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	681a      	ldr	r2, [r3, #0]
 801c470:	4b0e      	ldr	r3, [pc, #56]	; (801c4ac <UTIL_TIMER_Start+0xd8>)
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	681b      	ldr	r3, [r3, #0]
 801c476:	429a      	cmp	r2, r3
 801c478:	d203      	bcs.n	801c482 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801c47a:	6878      	ldr	r0, [r7, #4]
 801c47c:	f000 f9d6 	bl	801c82c <TimerInsertNewHeadTimer>
 801c480:	e002      	b.n	801c488 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801c482:	6878      	ldr	r0, [r7, #4]
 801c484:	f000 f9a2 	bl	801c7cc <TimerInsertTimer>
 801c488:	69fb      	ldr	r3, [r7, #28]
 801c48a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	f383 8810 	msr	PRIMASK, r3
}
 801c492:	bf00      	nop
  {
 801c494:	e002      	b.n	801c49c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801c496:	2301      	movs	r3, #1
 801c498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801c49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c4a0:	4618      	mov	r0, r3
 801c4a2:	3728      	adds	r7, #40	; 0x28
 801c4a4:	46bd      	mov	sp, r7
 801c4a6:	bd80      	pop	{r7, pc}
 801c4a8:	0801d908 	.word	0x0801d908
 801c4ac:	20001b68 	.word	0x20001b68

0801c4b0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801c4b0:	b580      	push	{r7, lr}
 801c4b2:	b088      	sub	sp, #32
 801c4b4:	af00      	add	r7, sp, #0
 801c4b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d05b      	beq.n	801c57a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c4c2:	f3ef 8310 	mrs	r3, PRIMASK
 801c4c6:	60fb      	str	r3, [r7, #12]
  return(result);
 801c4c8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c4ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c4cc:	b672      	cpsid	i
}
 801c4ce:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801c4d0:	4b2d      	ldr	r3, [pc, #180]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c4d2:	681b      	ldr	r3, [r3, #0]
 801c4d4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801c4d6:	4b2c      	ldr	r3, [pc, #176]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c4d8:	681b      	ldr	r3, [r3, #0]
 801c4da:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	2201      	movs	r2, #1
 801c4e0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801c4e2:	4b29      	ldr	r3, [pc, #164]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c4e4:	681b      	ldr	r3, [r3, #0]
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d041      	beq.n	801c56e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801c4f0:	4b25      	ldr	r3, [pc, #148]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	687a      	ldr	r2, [r7, #4]
 801c4f6:	429a      	cmp	r2, r3
 801c4f8:	d134      	bne.n	801c564 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801c4fa:	4b23      	ldr	r3, [pc, #140]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c4fc:	681b      	ldr	r3, [r3, #0]
 801c4fe:	2200      	movs	r2, #0
 801c500:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801c502:	4b21      	ldr	r3, [pc, #132]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c504:	681b      	ldr	r3, [r3, #0]
 801c506:	695b      	ldr	r3, [r3, #20]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d00a      	beq.n	801c522 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801c50c:	4b1e      	ldr	r3, [pc, #120]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	695b      	ldr	r3, [r3, #20]
 801c512:	4a1d      	ldr	r2, [pc, #116]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c514:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801c516:	4b1c      	ldr	r3, [pc, #112]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	4618      	mov	r0, r3
 801c51c:	f000 f92c 	bl	801c778 <TimerSetTimeout>
 801c520:	e023      	b.n	801c56a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801c522:	4b1a      	ldr	r3, [pc, #104]	; (801c58c <UTIL_TIMER_Stop+0xdc>)
 801c524:	68db      	ldr	r3, [r3, #12]
 801c526:	4798      	blx	r3
            TimerListHead = NULL;
 801c528:	4b17      	ldr	r3, [pc, #92]	; (801c588 <UTIL_TIMER_Stop+0xd8>)
 801c52a:	2200      	movs	r2, #0
 801c52c:	601a      	str	r2, [r3, #0]
 801c52e:	e01c      	b.n	801c56a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801c530:	697a      	ldr	r2, [r7, #20]
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	429a      	cmp	r2, r3
 801c536:	d110      	bne.n	801c55a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801c538:	697b      	ldr	r3, [r7, #20]
 801c53a:	695b      	ldr	r3, [r3, #20]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d006      	beq.n	801c54e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801c540:	697b      	ldr	r3, [r7, #20]
 801c542:	695b      	ldr	r3, [r3, #20]
 801c544:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c546:	69bb      	ldr	r3, [r7, #24]
 801c548:	697a      	ldr	r2, [r7, #20]
 801c54a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801c54c:	e00d      	b.n	801c56a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801c54e:	2300      	movs	r3, #0
 801c550:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801c552:	69bb      	ldr	r3, [r7, #24]
 801c554:	697a      	ldr	r2, [r7, #20]
 801c556:	615a      	str	r2, [r3, #20]
            break;
 801c558:	e007      	b.n	801c56a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801c55a:	697b      	ldr	r3, [r7, #20]
 801c55c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801c55e:	697b      	ldr	r3, [r7, #20]
 801c560:	695b      	ldr	r3, [r3, #20]
 801c562:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801c564:	697b      	ldr	r3, [r7, #20]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d1e2      	bne.n	801c530 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801c56a:	2300      	movs	r3, #0
 801c56c:	77fb      	strb	r3, [r7, #31]
 801c56e:	693b      	ldr	r3, [r7, #16]
 801c570:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c572:	68bb      	ldr	r3, [r7, #8]
 801c574:	f383 8810 	msr	PRIMASK, r3
}
 801c578:	e001      	b.n	801c57e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801c57a:	2301      	movs	r3, #1
 801c57c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801c57e:	7ffb      	ldrb	r3, [r7, #31]
}
 801c580:	4618      	mov	r0, r3
 801c582:	3720      	adds	r7, #32
 801c584:	46bd      	mov	sp, r7
 801c586:	bd80      	pop	{r7, pc}
 801c588:	20001b68 	.word	0x20001b68
 801c58c:	0801d908 	.word	0x0801d908

0801c590 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b084      	sub	sp, #16
 801c594:	af00      	add	r7, sp, #0
 801c596:	6078      	str	r0, [r7, #4]
 801c598:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801c59a:	2300      	movs	r3, #0
 801c59c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d102      	bne.n	801c5aa <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801c5a4:	2301      	movs	r3, #1
 801c5a6:	73fb      	strb	r3, [r7, #15]
 801c5a8:	e014      	b.n	801c5d4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801c5aa:	4b0d      	ldr	r3, [pc, #52]	; (801c5e0 <UTIL_TIMER_SetPeriod+0x50>)
 801c5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5ae:	6838      	ldr	r0, [r7, #0]
 801c5b0:	4798      	blx	r3
 801c5b2:	4602      	mov	r2, r0
 801c5b4:	687b      	ldr	r3, [r7, #4]
 801c5b6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801c5b8:	6878      	ldr	r0, [r7, #4]
 801c5ba:	f000 f8c1 	bl	801c740 <TimerExists>
 801c5be:	4603      	mov	r3, r0
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d007      	beq.n	801c5d4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801c5c4:	6878      	ldr	r0, [r7, #4]
 801c5c6:	f7ff ff73 	bl	801c4b0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801c5ca:	6878      	ldr	r0, [r7, #4]
 801c5cc:	f7ff ff02 	bl	801c3d4 <UTIL_TIMER_Start>
 801c5d0:	4603      	mov	r3, r0
 801c5d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801c5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	3710      	adds	r7, #16
 801c5da:	46bd      	mov	sp, r7
 801c5dc:	bd80      	pop	{r7, pc}
 801c5de:	bf00      	nop
 801c5e0:	0801d908 	.word	0x0801d908

0801c5e4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801c5e4:	b590      	push	{r4, r7, lr}
 801c5e6:	b089      	sub	sp, #36	; 0x24
 801c5e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c5ea:	f3ef 8310 	mrs	r3, PRIMASK
 801c5ee:	60bb      	str	r3, [r7, #8]
  return(result);
 801c5f0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801c5f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c5f4:	b672      	cpsid	i
}
 801c5f6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801c5f8:	4b38      	ldr	r3, [pc, #224]	; (801c6dc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c5fa:	695b      	ldr	r3, [r3, #20]
 801c5fc:	4798      	blx	r3
 801c5fe:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801c600:	4b36      	ldr	r3, [pc, #216]	; (801c6dc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c602:	691b      	ldr	r3, [r3, #16]
 801c604:	4798      	blx	r3
 801c606:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801c608:	693a      	ldr	r2, [r7, #16]
 801c60a:	697b      	ldr	r3, [r7, #20]
 801c60c:	1ad3      	subs	r3, r2, r3
 801c60e:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801c610:	4b33      	ldr	r3, [pc, #204]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d037      	beq.n	801c688 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801c618:	4b31      	ldr	r3, [pc, #196]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c61a:	681b      	ldr	r3, [r3, #0]
 801c61c:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801c61e:	69fb      	ldr	r3, [r7, #28]
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	68fa      	ldr	r2, [r7, #12]
 801c624:	429a      	cmp	r2, r3
 801c626:	d206      	bcs.n	801c636 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801c628:	69fb      	ldr	r3, [r7, #28]
 801c62a:	681a      	ldr	r2, [r3, #0]
 801c62c:	68fb      	ldr	r3, [r7, #12]
 801c62e:	1ad2      	subs	r2, r2, r3
 801c630:	69fb      	ldr	r3, [r7, #28]
 801c632:	601a      	str	r2, [r3, #0]
 801c634:	e002      	b.n	801c63c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801c636:	69fb      	ldr	r3, [r7, #28]
 801c638:	2200      	movs	r2, #0
 801c63a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801c63c:	69fb      	ldr	r3, [r7, #28]
 801c63e:	695b      	ldr	r3, [r3, #20]
 801c640:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801c642:	69fb      	ldr	r3, [r7, #28]
 801c644:	2b00      	cmp	r3, #0
 801c646:	d1ea      	bne.n	801c61e <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c648:	e01e      	b.n	801c688 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801c64a:	4b25      	ldr	r3, [pc, #148]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801c650:	4b23      	ldr	r3, [pc, #140]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	695b      	ldr	r3, [r3, #20]
 801c656:	4a22      	ldr	r2, [pc, #136]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c658:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801c65a:	69fb      	ldr	r3, [r7, #28]
 801c65c:	2200      	movs	r2, #0
 801c65e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801c660:	69fb      	ldr	r3, [r7, #28]
 801c662:	2200      	movs	r2, #0
 801c664:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801c666:	69fb      	ldr	r3, [r7, #28]
 801c668:	68db      	ldr	r3, [r3, #12]
 801c66a:	69fa      	ldr	r2, [r7, #28]
 801c66c:	6912      	ldr	r2, [r2, #16]
 801c66e:	4610      	mov	r0, r2
 801c670:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801c672:	69fb      	ldr	r3, [r7, #28]
 801c674:	7adb      	ldrb	r3, [r3, #11]
 801c676:	2b01      	cmp	r3, #1
 801c678:	d106      	bne.n	801c688 <UTIL_TIMER_IRQ_Handler+0xa4>
 801c67a:	69fb      	ldr	r3, [r7, #28]
 801c67c:	7a9b      	ldrb	r3, [r3, #10]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d102      	bne.n	801c688 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801c682:	69f8      	ldr	r0, [r7, #28]
 801c684:	f7ff fea6 	bl	801c3d4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801c688:	4b15      	ldr	r3, [pc, #84]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c68a:	681b      	ldr	r3, [r3, #0]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d00d      	beq.n	801c6ac <UTIL_TIMER_IRQ_Handler+0xc8>
 801c690:	4b13      	ldr	r3, [pc, #76]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c692:	681b      	ldr	r3, [r3, #0]
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	2b00      	cmp	r3, #0
 801c698:	d0d7      	beq.n	801c64a <UTIL_TIMER_IRQ_Handler+0x66>
 801c69a:	4b11      	ldr	r3, [pc, #68]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	681c      	ldr	r4, [r3, #0]
 801c6a0:	4b0e      	ldr	r3, [pc, #56]	; (801c6dc <UTIL_TIMER_IRQ_Handler+0xf8>)
 801c6a2:	699b      	ldr	r3, [r3, #24]
 801c6a4:	4798      	blx	r3
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	429c      	cmp	r4, r3
 801c6aa:	d3ce      	bcc.n	801c64a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801c6ac:	4b0c      	ldr	r3, [pc, #48]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c6ae:	681b      	ldr	r3, [r3, #0]
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d009      	beq.n	801c6c8 <UTIL_TIMER_IRQ_Handler+0xe4>
 801c6b4:	4b0a      	ldr	r3, [pc, #40]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	7a1b      	ldrb	r3, [r3, #8]
 801c6ba:	2b00      	cmp	r3, #0
 801c6bc:	d104      	bne.n	801c6c8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801c6be:	4b08      	ldr	r3, [pc, #32]	; (801c6e0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	f000 f858 	bl	801c778 <TimerSetTimeout>
 801c6c8:	69bb      	ldr	r3, [r7, #24]
 801c6ca:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	f383 8810 	msr	PRIMASK, r3
}
 801c6d2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801c6d4:	bf00      	nop
 801c6d6:	3724      	adds	r7, #36	; 0x24
 801c6d8:	46bd      	mov	sp, r7
 801c6da:	bd90      	pop	{r4, r7, pc}
 801c6dc:	0801d908 	.word	0x0801d908
 801c6e0:	20001b68 	.word	0x20001b68

0801c6e4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b082      	sub	sp, #8
 801c6e8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801c6ea:	4b06      	ldr	r3, [pc, #24]	; (801c704 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c6ec:	69db      	ldr	r3, [r3, #28]
 801c6ee:	4798      	blx	r3
 801c6f0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801c6f2:	4b04      	ldr	r3, [pc, #16]	; (801c704 <UTIL_TIMER_GetCurrentTime+0x20>)
 801c6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	4798      	blx	r3
 801c6fa:	4603      	mov	r3, r0
}
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	3708      	adds	r7, #8
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}
 801c704:	0801d908 	.word	0x0801d908

0801c708 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	b084      	sub	sp, #16
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801c710:	4b0a      	ldr	r3, [pc, #40]	; (801c73c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c712:	69db      	ldr	r3, [r3, #28]
 801c714:	4798      	blx	r3
 801c716:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801c718:	4b08      	ldr	r3, [pc, #32]	; (801c73c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c71c:	6878      	ldr	r0, [r7, #4]
 801c71e:	4798      	blx	r3
 801c720:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801c722:	4b06      	ldr	r3, [pc, #24]	; (801c73c <UTIL_TIMER_GetElapsedTime+0x34>)
 801c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c726:	68f9      	ldr	r1, [r7, #12]
 801c728:	68ba      	ldr	r2, [r7, #8]
 801c72a:	1a8a      	subs	r2, r1, r2
 801c72c:	4610      	mov	r0, r2
 801c72e:	4798      	blx	r3
 801c730:	4603      	mov	r3, r0
}
 801c732:	4618      	mov	r0, r3
 801c734:	3710      	adds	r7, #16
 801c736:	46bd      	mov	sp, r7
 801c738:	bd80      	pop	{r7, pc}
 801c73a:	bf00      	nop
 801c73c:	0801d908 	.word	0x0801d908

0801c740 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801c740:	b480      	push	{r7}
 801c742:	b085      	sub	sp, #20
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c748:	4b0a      	ldr	r3, [pc, #40]	; (801c774 <TimerExists+0x34>)
 801c74a:	681b      	ldr	r3, [r3, #0]
 801c74c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801c74e:	e008      	b.n	801c762 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801c750:	68fa      	ldr	r2, [r7, #12]
 801c752:	687b      	ldr	r3, [r7, #4]
 801c754:	429a      	cmp	r2, r3
 801c756:	d101      	bne.n	801c75c <TimerExists+0x1c>
    {
      return true;
 801c758:	2301      	movs	r3, #1
 801c75a:	e006      	b.n	801c76a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	695b      	ldr	r3, [r3, #20]
 801c760:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d1f3      	bne.n	801c750 <TimerExists+0x10>
  }
  return false;
 801c768:	2300      	movs	r3, #0
}
 801c76a:	4618      	mov	r0, r3
 801c76c:	3714      	adds	r7, #20
 801c76e:	46bd      	mov	sp, r7
 801c770:	bc80      	pop	{r7}
 801c772:	4770      	bx	lr
 801c774:	20001b68 	.word	0x20001b68

0801c778 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801c778:	b590      	push	{r4, r7, lr}
 801c77a:	b085      	sub	sp, #20
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801c780:	4b11      	ldr	r3, [pc, #68]	; (801c7c8 <TimerSetTimeout+0x50>)
 801c782:	6a1b      	ldr	r3, [r3, #32]
 801c784:	4798      	blx	r3
 801c786:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801c788:	687b      	ldr	r3, [r7, #4]
 801c78a:	2201      	movs	r2, #1
 801c78c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	681c      	ldr	r4, [r3, #0]
 801c792:	4b0d      	ldr	r3, [pc, #52]	; (801c7c8 <TimerSetTimeout+0x50>)
 801c794:	699b      	ldr	r3, [r3, #24]
 801c796:	4798      	blx	r3
 801c798:	4602      	mov	r2, r0
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	4413      	add	r3, r2
 801c79e:	429c      	cmp	r4, r3
 801c7a0:	d207      	bcs.n	801c7b2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801c7a2:	4b09      	ldr	r3, [pc, #36]	; (801c7c8 <TimerSetTimeout+0x50>)
 801c7a4:	699b      	ldr	r3, [r3, #24]
 801c7a6:	4798      	blx	r3
 801c7a8:	4602      	mov	r2, r0
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	441a      	add	r2, r3
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801c7b2:	4b05      	ldr	r3, [pc, #20]	; (801c7c8 <TimerSetTimeout+0x50>)
 801c7b4:	689b      	ldr	r3, [r3, #8]
 801c7b6:	687a      	ldr	r2, [r7, #4]
 801c7b8:	6812      	ldr	r2, [r2, #0]
 801c7ba:	4610      	mov	r0, r2
 801c7bc:	4798      	blx	r3
}
 801c7be:	bf00      	nop
 801c7c0:	3714      	adds	r7, #20
 801c7c2:	46bd      	mov	sp, r7
 801c7c4:	bd90      	pop	{r4, r7, pc}
 801c7c6:	bf00      	nop
 801c7c8:	0801d908 	.word	0x0801d908

0801c7cc <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801c7cc:	b480      	push	{r7}
 801c7ce:	b085      	sub	sp, #20
 801c7d0:	af00      	add	r7, sp, #0
 801c7d2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c7d4:	4b14      	ldr	r3, [pc, #80]	; (801c828 <TimerInsertTimer+0x5c>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801c7da:	4b13      	ldr	r3, [pc, #76]	; (801c828 <TimerInsertTimer+0x5c>)
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	695b      	ldr	r3, [r3, #20]
 801c7e0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801c7e2:	e012      	b.n	801c80a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	681a      	ldr	r2, [r3, #0]
 801c7e8:	68bb      	ldr	r3, [r7, #8]
 801c7ea:	681b      	ldr	r3, [r3, #0]
 801c7ec:	429a      	cmp	r2, r3
 801c7ee:	d905      	bls.n	801c7fc <TimerInsertTimer+0x30>
    {
        cur = next;
 801c7f0:	68bb      	ldr	r3, [r7, #8]
 801c7f2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	695b      	ldr	r3, [r3, #20]
 801c7f8:	60bb      	str	r3, [r7, #8]
 801c7fa:	e006      	b.n	801c80a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801c7fc:	68fb      	ldr	r3, [r7, #12]
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	68ba      	ldr	r2, [r7, #8]
 801c806:	615a      	str	r2, [r3, #20]
        return;
 801c808:	e009      	b.n	801c81e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	695b      	ldr	r3, [r3, #20]
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d1e8      	bne.n	801c7e4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801c812:	68fb      	ldr	r3, [r7, #12]
 801c814:	687a      	ldr	r2, [r7, #4]
 801c816:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	2200      	movs	r2, #0
 801c81c:	615a      	str	r2, [r3, #20]
}
 801c81e:	3714      	adds	r7, #20
 801c820:	46bd      	mov	sp, r7
 801c822:	bc80      	pop	{r7}
 801c824:	4770      	bx	lr
 801c826:	bf00      	nop
 801c828:	20001b68 	.word	0x20001b68

0801c82c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b084      	sub	sp, #16
 801c830:	af00      	add	r7, sp, #0
 801c832:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801c834:	4b0b      	ldr	r3, [pc, #44]	; (801c864 <TimerInsertNewHeadTimer+0x38>)
 801c836:	681b      	ldr	r3, [r3, #0]
 801c838:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d002      	beq.n	801c846 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	2200      	movs	r2, #0
 801c844:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	68fa      	ldr	r2, [r7, #12]
 801c84a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801c84c:	4a05      	ldr	r2, [pc, #20]	; (801c864 <TimerInsertNewHeadTimer+0x38>)
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801c852:	4b04      	ldr	r3, [pc, #16]	; (801c864 <TimerInsertNewHeadTimer+0x38>)
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	4618      	mov	r0, r3
 801c858:	f7ff ff8e 	bl	801c778 <TimerSetTimeout>
}
 801c85c:	bf00      	nop
 801c85e:	3710      	adds	r7, #16
 801c860:	46bd      	mov	sp, r7
 801c862:	bd80      	pop	{r7, pc}
 801c864:	20001b68 	.word	0x20001b68

0801c868 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801c868:	b580      	push	{r7, lr}
 801c86a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801c86c:	2218      	movs	r2, #24
 801c86e:	2100      	movs	r1, #0
 801c870:	4807      	ldr	r0, [pc, #28]	; (801c890 <UTIL_ADV_TRACE_Init+0x28>)
 801c872:	f7fe fff6 	bl	801b862 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801c876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c87a:	2100      	movs	r1, #0
 801c87c:	4805      	ldr	r0, [pc, #20]	; (801c894 <UTIL_ADV_TRACE_Init+0x2c>)
 801c87e:	f7fe fff0 	bl	801b862 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801c882:	4b05      	ldr	r3, [pc, #20]	; (801c898 <UTIL_ADV_TRACE_Init+0x30>)
 801c884:	681b      	ldr	r3, [r3, #0]
 801c886:	4805      	ldr	r0, [pc, #20]	; (801c89c <UTIL_ADV_TRACE_Init+0x34>)
 801c888:	4798      	blx	r3
 801c88a:	4603      	mov	r3, r0
}
 801c88c:	4618      	mov	r0, r3
 801c88e:	bd80      	pop	{r7, pc}
 801c890:	20001b6c 	.word	0x20001b6c
 801c894:	20001b84 	.word	0x20001b84
 801c898:	0801d948 	.word	0x0801d948
 801c89c:	0801cb09 	.word	0x0801cb09

0801c8a0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801c8a0:	b480      	push	{r7}
 801c8a2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c8a4:	4b06      	ldr	r3, [pc, #24]	; (801c8c0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c8a6:	8a5a      	ldrh	r2, [r3, #18]
 801c8a8:	4b05      	ldr	r3, [pc, #20]	; (801c8c0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801c8aa:	8a1b      	ldrh	r3, [r3, #16]
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d101      	bne.n	801c8b4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801c8b0:	2301      	movs	r3, #1
 801c8b2:	e000      	b.n	801c8b6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801c8b4:	2300      	movs	r3, #0
}
 801c8b6:	4618      	mov	r0, r3
 801c8b8:	46bd      	mov	sp, r7
 801c8ba:	bc80      	pop	{r7}
 801c8bc:	4770      	bx	lr
 801c8be:	bf00      	nop
 801c8c0:	20001b6c 	.word	0x20001b6c

0801c8c4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801c8c4:	b408      	push	{r3}
 801c8c6:	b580      	push	{r7, lr}
 801c8c8:	b08d      	sub	sp, #52	; 0x34
 801c8ca:	af00      	add	r7, sp, #0
 801c8cc:	60f8      	str	r0, [r7, #12]
 801c8ce:	60b9      	str	r1, [r7, #8]
 801c8d0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c8d6:	2300      	movs	r3, #0
 801c8d8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c8da:	4b37      	ldr	r3, [pc, #220]	; (801c9b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c8dc:	7a1b      	ldrb	r3, [r3, #8]
 801c8de:	461a      	mov	r2, r3
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	4293      	cmp	r3, r2
 801c8e4:	d902      	bls.n	801c8ec <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c8e6:	f06f 0304 	mvn.w	r3, #4
 801c8ea:	e05e      	b.n	801c9aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c8ec:	4b32      	ldr	r3, [pc, #200]	; (801c9b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c8ee:	68da      	ldr	r2, [r3, #12]
 801c8f0:	68bb      	ldr	r3, [r7, #8]
 801c8f2:	4013      	ands	r3, r2
 801c8f4:	68ba      	ldr	r2, [r7, #8]
 801c8f6:	429a      	cmp	r2, r3
 801c8f8:	d002      	beq.n	801c900 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c8fa:	f06f 0305 	mvn.w	r3, #5
 801c8fe:	e054      	b.n	801c9aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c900:	4b2d      	ldr	r3, [pc, #180]	; (801c9b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c902:	685b      	ldr	r3, [r3, #4]
 801c904:	2b00      	cmp	r3, #0
 801c906:	d00a      	beq.n	801c91e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d007      	beq.n	801c91e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c90e:	4b2a      	ldr	r3, [pc, #168]	; (801c9b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c910:	685b      	ldr	r3, [r3, #4]
 801c912:	f107 0116 	add.w	r1, r7, #22
 801c916:	f107 0218 	add.w	r2, r7, #24
 801c91a:	4610      	mov	r0, r2
 801c91c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c91e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c922:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c926:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c928:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c92c:	4823      	ldr	r0, [pc, #140]	; (801c9bc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c92e:	f7ff fa25 	bl	801bd7c <tiny_vsnprintf_like>
 801c932:	4603      	mov	r3, r0
 801c934:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c936:	f000 f9f1 	bl	801cd1c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c93a:	8afa      	ldrh	r2, [r7, #22]
 801c93c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c93e:	4413      	add	r3, r2
 801c940:	b29b      	uxth	r3, r3
 801c942:	f107 0214 	add.w	r2, r7, #20
 801c946:	4611      	mov	r1, r2
 801c948:	4618      	mov	r0, r3
 801c94a:	f000 f969 	bl	801cc20 <TRACE_AllocateBufer>
 801c94e:	4603      	mov	r3, r0
 801c950:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c954:	d025      	beq.n	801c9a2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c956:	2300      	movs	r3, #0
 801c958:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c95a:	e00e      	b.n	801c97a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c95c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c95e:	8aba      	ldrh	r2, [r7, #20]
 801c960:	3330      	adds	r3, #48	; 0x30
 801c962:	443b      	add	r3, r7
 801c964:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c968:	4b15      	ldr	r3, [pc, #84]	; (801c9c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c96a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c96c:	8abb      	ldrh	r3, [r7, #20]
 801c96e:	3301      	adds	r3, #1
 801c970:	b29b      	uxth	r3, r3
 801c972:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c974:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c976:	3301      	adds	r3, #1
 801c978:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c97a:	8afb      	ldrh	r3, [r7, #22]
 801c97c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c97e:	429a      	cmp	r2, r3
 801c980:	d3ec      	bcc.n	801c95c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c982:	8abb      	ldrh	r3, [r7, #20]
 801c984:	461a      	mov	r2, r3
 801c986:	4b0e      	ldr	r3, [pc, #56]	; (801c9c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c988:	18d0      	adds	r0, r2, r3
 801c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c98c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c98e:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c992:	f7ff f9f3 	bl	801bd7c <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c996:	f000 f9df 	bl	801cd58 <TRACE_UnLock>

    return TRACE_Send();
 801c99a:	f000 f831 	bl	801ca00 <TRACE_Send>
 801c99e:	4603      	mov	r3, r0
 801c9a0:	e003      	b.n	801c9aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c9a2:	f000 f9d9 	bl	801cd58 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c9a6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c9aa:	4618      	mov	r0, r3
 801c9ac:	3734      	adds	r7, #52	; 0x34
 801c9ae:	46bd      	mov	sp, r7
 801c9b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c9b4:	b001      	add	sp, #4
 801c9b6:	4770      	bx	lr
 801c9b8:	20001b6c 	.word	0x20001b6c
 801c9bc:	20001f84 	.word	0x20001f84
 801c9c0:	20001b84 	.word	0x20001b84

0801c9c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c9c4:	b480      	push	{r7}
 801c9c6:	b083      	sub	sp, #12
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c9cc:	4a03      	ldr	r2, [pc, #12]	; (801c9dc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c9ce:	687b      	ldr	r3, [r7, #4]
 801c9d0:	6053      	str	r3, [r2, #4]
}
 801c9d2:	bf00      	nop
 801c9d4:	370c      	adds	r7, #12
 801c9d6:	46bd      	mov	sp, r7
 801c9d8:	bc80      	pop	{r7}
 801c9da:	4770      	bx	lr
 801c9dc:	20001b6c 	.word	0x20001b6c

0801c9e0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c9e0:	b480      	push	{r7}
 801c9e2:	b083      	sub	sp, #12
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c9ea:	4a04      	ldr	r2, [pc, #16]	; (801c9fc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c9ec:	79fb      	ldrb	r3, [r7, #7]
 801c9ee:	7213      	strb	r3, [r2, #8]
}
 801c9f0:	bf00      	nop
 801c9f2:	370c      	adds	r7, #12
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bc80      	pop	{r7}
 801c9f8:	4770      	bx	lr
 801c9fa:	bf00      	nop
 801c9fc:	20001b6c 	.word	0x20001b6c

0801ca00 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801ca00:	b580      	push	{r7, lr}
 801ca02:	b088      	sub	sp, #32
 801ca04:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801ca06:	2300      	movs	r3, #0
 801ca08:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ca0e:	f3ef 8310 	mrs	r3, PRIMASK
 801ca12:	613b      	str	r3, [r7, #16]
  return(result);
 801ca14:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ca16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ca18:	b672      	cpsid	i
}
 801ca1a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801ca1c:	f000 f9ba 	bl	801cd94 <TRACE_IsLocked>
 801ca20:	4603      	mov	r3, r0
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d15d      	bne.n	801cae2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801ca26:	f000 f979 	bl	801cd1c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801ca2a:	4b34      	ldr	r3, [pc, #208]	; (801cafc <TRACE_Send+0xfc>)
 801ca2c:	8a1a      	ldrh	r2, [r3, #16]
 801ca2e:	4b33      	ldr	r3, [pc, #204]	; (801cafc <TRACE_Send+0xfc>)
 801ca30:	8a5b      	ldrh	r3, [r3, #18]
 801ca32:	429a      	cmp	r2, r3
 801ca34:	d04d      	beq.n	801cad2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801ca36:	4b31      	ldr	r3, [pc, #196]	; (801cafc <TRACE_Send+0xfc>)
 801ca38:	789b      	ldrb	r3, [r3, #2]
 801ca3a:	2b01      	cmp	r3, #1
 801ca3c:	d117      	bne.n	801ca6e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801ca3e:	4b2f      	ldr	r3, [pc, #188]	; (801cafc <TRACE_Send+0xfc>)
 801ca40:	881a      	ldrh	r2, [r3, #0]
 801ca42:	4b2e      	ldr	r3, [pc, #184]	; (801cafc <TRACE_Send+0xfc>)
 801ca44:	8a1b      	ldrh	r3, [r3, #16]
 801ca46:	1ad3      	subs	r3, r2, r3
 801ca48:	b29a      	uxth	r2, r3
 801ca4a:	4b2c      	ldr	r3, [pc, #176]	; (801cafc <TRACE_Send+0xfc>)
 801ca4c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801ca4e:	4b2b      	ldr	r3, [pc, #172]	; (801cafc <TRACE_Send+0xfc>)
 801ca50:	2202      	movs	r2, #2
 801ca52:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801ca54:	4b29      	ldr	r3, [pc, #164]	; (801cafc <TRACE_Send+0xfc>)
 801ca56:	2200      	movs	r2, #0
 801ca58:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801ca5a:	4b28      	ldr	r3, [pc, #160]	; (801cafc <TRACE_Send+0xfc>)
 801ca5c:	8a9b      	ldrh	r3, [r3, #20]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d105      	bne.n	801ca6e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801ca62:	4b26      	ldr	r3, [pc, #152]	; (801cafc <TRACE_Send+0xfc>)
 801ca64:	2200      	movs	r2, #0
 801ca66:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801ca68:	4b24      	ldr	r3, [pc, #144]	; (801cafc <TRACE_Send+0xfc>)
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801ca6e:	4b23      	ldr	r3, [pc, #140]	; (801cafc <TRACE_Send+0xfc>)
 801ca70:	789b      	ldrb	r3, [r3, #2]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d115      	bne.n	801caa2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801ca76:	4b21      	ldr	r3, [pc, #132]	; (801cafc <TRACE_Send+0xfc>)
 801ca78:	8a5a      	ldrh	r2, [r3, #18]
 801ca7a:	4b20      	ldr	r3, [pc, #128]	; (801cafc <TRACE_Send+0xfc>)
 801ca7c:	8a1b      	ldrh	r3, [r3, #16]
 801ca7e:	429a      	cmp	r2, r3
 801ca80:	d908      	bls.n	801ca94 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801ca82:	4b1e      	ldr	r3, [pc, #120]	; (801cafc <TRACE_Send+0xfc>)
 801ca84:	8a5a      	ldrh	r2, [r3, #18]
 801ca86:	4b1d      	ldr	r3, [pc, #116]	; (801cafc <TRACE_Send+0xfc>)
 801ca88:	8a1b      	ldrh	r3, [r3, #16]
 801ca8a:	1ad3      	subs	r3, r2, r3
 801ca8c:	b29a      	uxth	r2, r3
 801ca8e:	4b1b      	ldr	r3, [pc, #108]	; (801cafc <TRACE_Send+0xfc>)
 801ca90:	829a      	strh	r2, [r3, #20]
 801ca92:	e006      	b.n	801caa2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801ca94:	4b19      	ldr	r3, [pc, #100]	; (801cafc <TRACE_Send+0xfc>)
 801ca96:	8a1b      	ldrh	r3, [r3, #16]
 801ca98:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801ca9c:	b29a      	uxth	r2, r3
 801ca9e:	4b17      	ldr	r3, [pc, #92]	; (801cafc <TRACE_Send+0xfc>)
 801caa0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801caa2:	4b16      	ldr	r3, [pc, #88]	; (801cafc <TRACE_Send+0xfc>)
 801caa4:	8a1b      	ldrh	r3, [r3, #16]
 801caa6:	461a      	mov	r2, r3
 801caa8:	4b15      	ldr	r3, [pc, #84]	; (801cb00 <TRACE_Send+0x100>)
 801caaa:	4413      	add	r3, r2
 801caac:	61bb      	str	r3, [r7, #24]
 801caae:	697b      	ldr	r3, [r7, #20]
 801cab0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cab2:	68fb      	ldr	r3, [r7, #12]
 801cab4:	f383 8810 	msr	PRIMASK, r3
}
 801cab8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801caba:	f7e5 f8e5 	bl	8001c88 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cabe:	4b11      	ldr	r3, [pc, #68]	; (801cb04 <TRACE_Send+0x104>)
 801cac0:	68db      	ldr	r3, [r3, #12]
 801cac2:	4a0e      	ldr	r2, [pc, #56]	; (801cafc <TRACE_Send+0xfc>)
 801cac4:	8a92      	ldrh	r2, [r2, #20]
 801cac6:	4611      	mov	r1, r2
 801cac8:	69b8      	ldr	r0, [r7, #24]
 801caca:	4798      	blx	r3
 801cacc:	4603      	mov	r3, r0
 801cace:	77fb      	strb	r3, [r7, #31]
 801cad0:	e00d      	b.n	801caee <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801cad2:	f000 f941 	bl	801cd58 <TRACE_UnLock>
 801cad6:	697b      	ldr	r3, [r7, #20]
 801cad8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cada:	68bb      	ldr	r3, [r7, #8]
 801cadc:	f383 8810 	msr	PRIMASK, r3
}
 801cae0:	e005      	b.n	801caee <TRACE_Send+0xee>
 801cae2:	697b      	ldr	r3, [r7, #20]
 801cae4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	f383 8810 	msr	PRIMASK, r3
}
 801caec:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801caee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801caf2:	4618      	mov	r0, r3
 801caf4:	3720      	adds	r7, #32
 801caf6:	46bd      	mov	sp, r7
 801caf8:	bd80      	pop	{r7, pc}
 801cafa:	bf00      	nop
 801cafc:	20001b6c 	.word	0x20001b6c
 801cb00:	20001b84 	.word	0x20001b84
 801cb04:	0801d948 	.word	0x0801d948

0801cb08 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	b088      	sub	sp, #32
 801cb0c:	af00      	add	r7, sp, #0
 801cb0e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801cb10:	2300      	movs	r3, #0
 801cb12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cb14:	f3ef 8310 	mrs	r3, PRIMASK
 801cb18:	617b      	str	r3, [r7, #20]
  return(result);
 801cb1a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cb1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801cb1e:	b672      	cpsid	i
}
 801cb20:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801cb22:	4b3c      	ldr	r3, [pc, #240]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb24:	789b      	ldrb	r3, [r3, #2]
 801cb26:	2b02      	cmp	r3, #2
 801cb28:	d106      	bne.n	801cb38 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cb2a:	4b3a      	ldr	r3, [pc, #232]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cb30:	4b38      	ldr	r3, [pc, #224]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb32:	2200      	movs	r2, #0
 801cb34:	821a      	strh	r2, [r3, #16]
 801cb36:	e00a      	b.n	801cb4e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cb38:	4b36      	ldr	r3, [pc, #216]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb3a:	8a1a      	ldrh	r2, [r3, #16]
 801cb3c:	4b35      	ldr	r3, [pc, #212]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb3e:	8a9b      	ldrh	r3, [r3, #20]
 801cb40:	4413      	add	r3, r2
 801cb42:	b29b      	uxth	r3, r3
 801cb44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801cb48:	b29a      	uxth	r2, r3
 801cb4a:	4b32      	ldr	r3, [pc, #200]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb4c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801cb4e:	4b31      	ldr	r3, [pc, #196]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb50:	8a1a      	ldrh	r2, [r3, #16]
 801cb52:	4b30      	ldr	r3, [pc, #192]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb54:	8a5b      	ldrh	r3, [r3, #18]
 801cb56:	429a      	cmp	r2, r3
 801cb58:	d04d      	beq.n	801cbf6 <TRACE_TxCpltCallback+0xee>
 801cb5a:	4b2e      	ldr	r3, [pc, #184]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb5c:	8adb      	ldrh	r3, [r3, #22]
 801cb5e:	2b01      	cmp	r3, #1
 801cb60:	d149      	bne.n	801cbf6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801cb62:	4b2c      	ldr	r3, [pc, #176]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb64:	789b      	ldrb	r3, [r3, #2]
 801cb66:	2b01      	cmp	r3, #1
 801cb68:	d117      	bne.n	801cb9a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801cb6a:	4b2a      	ldr	r3, [pc, #168]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb6c:	881a      	ldrh	r2, [r3, #0]
 801cb6e:	4b29      	ldr	r3, [pc, #164]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb70:	8a1b      	ldrh	r3, [r3, #16]
 801cb72:	1ad3      	subs	r3, r2, r3
 801cb74:	b29a      	uxth	r2, r3
 801cb76:	4b27      	ldr	r3, [pc, #156]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb78:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801cb7a:	4b26      	ldr	r3, [pc, #152]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb7c:	2202      	movs	r2, #2
 801cb7e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801cb80:	4b24      	ldr	r3, [pc, #144]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb82:	2200      	movs	r2, #0
 801cb84:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801cb86:	4b23      	ldr	r3, [pc, #140]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb88:	8a9b      	ldrh	r3, [r3, #20]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d105      	bne.n	801cb9a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801cb8e:	4b21      	ldr	r3, [pc, #132]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb90:	2200      	movs	r2, #0
 801cb92:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801cb94:	4b1f      	ldr	r3, [pc, #124]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb96:	2200      	movs	r2, #0
 801cb98:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801cb9a:	4b1e      	ldr	r3, [pc, #120]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cb9c:	789b      	ldrb	r3, [r3, #2]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d115      	bne.n	801cbce <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cba2:	4b1c      	ldr	r3, [pc, #112]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cba4:	8a5a      	ldrh	r2, [r3, #18]
 801cba6:	4b1b      	ldr	r3, [pc, #108]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cba8:	8a1b      	ldrh	r3, [r3, #16]
 801cbaa:	429a      	cmp	r2, r3
 801cbac:	d908      	bls.n	801cbc0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801cbae:	4b19      	ldr	r3, [pc, #100]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbb0:	8a5a      	ldrh	r2, [r3, #18]
 801cbb2:	4b18      	ldr	r3, [pc, #96]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbb4:	8a1b      	ldrh	r3, [r3, #16]
 801cbb6:	1ad3      	subs	r3, r2, r3
 801cbb8:	b29a      	uxth	r2, r3
 801cbba:	4b16      	ldr	r3, [pc, #88]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbbc:	829a      	strh	r2, [r3, #20]
 801cbbe:	e006      	b.n	801cbce <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801cbc0:	4b14      	ldr	r3, [pc, #80]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbc2:	8a1b      	ldrh	r3, [r3, #16]
 801cbc4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cbc8:	b29a      	uxth	r2, r3
 801cbca:	4b12      	ldr	r3, [pc, #72]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbcc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801cbce:	4b11      	ldr	r3, [pc, #68]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbd0:	8a1b      	ldrh	r3, [r3, #16]
 801cbd2:	461a      	mov	r2, r3
 801cbd4:	4b10      	ldr	r3, [pc, #64]	; (801cc18 <TRACE_TxCpltCallback+0x110>)
 801cbd6:	4413      	add	r3, r2
 801cbd8:	61fb      	str	r3, [r7, #28]
 801cbda:	69bb      	ldr	r3, [r7, #24]
 801cbdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbde:	693b      	ldr	r3, [r7, #16]
 801cbe0:	f383 8810 	msr	PRIMASK, r3
}
 801cbe4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801cbe6:	4b0d      	ldr	r3, [pc, #52]	; (801cc1c <TRACE_TxCpltCallback+0x114>)
 801cbe8:	68db      	ldr	r3, [r3, #12]
 801cbea:	4a0a      	ldr	r2, [pc, #40]	; (801cc14 <TRACE_TxCpltCallback+0x10c>)
 801cbec:	8a92      	ldrh	r2, [r2, #20]
 801cbee:	4611      	mov	r1, r2
 801cbf0:	69f8      	ldr	r0, [r7, #28]
 801cbf2:	4798      	blx	r3
 801cbf4:	e00a      	b.n	801cc0c <TRACE_TxCpltCallback+0x104>
 801cbf6:	69bb      	ldr	r3, [r7, #24]
 801cbf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	f383 8810 	msr	PRIMASK, r3
}
 801cc00:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801cc02:	f7e5 f849 	bl	8001c98 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801cc06:	f000 f8a7 	bl	801cd58 <TRACE_UnLock>
  }
}
 801cc0a:	bf00      	nop
 801cc0c:	bf00      	nop
 801cc0e:	3720      	adds	r7, #32
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	20001b6c 	.word	0x20001b6c
 801cc18:	20001b84 	.word	0x20001b84
 801cc1c:	0801d948 	.word	0x0801d948

0801cc20 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801cc20:	b480      	push	{r7}
 801cc22:	b087      	sub	sp, #28
 801cc24:	af00      	add	r7, sp, #0
 801cc26:	4603      	mov	r3, r0
 801cc28:	6039      	str	r1, [r7, #0]
 801cc2a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801cc2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cc30:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cc32:	f3ef 8310 	mrs	r3, PRIMASK
 801cc36:	60fb      	str	r3, [r7, #12]
  return(result);
 801cc38:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cc3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801cc3c:	b672      	cpsid	i
}
 801cc3e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801cc40:	4b35      	ldr	r3, [pc, #212]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc42:	8a5a      	ldrh	r2, [r3, #18]
 801cc44:	4b34      	ldr	r3, [pc, #208]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc46:	8a1b      	ldrh	r3, [r3, #16]
 801cc48:	429a      	cmp	r2, r3
 801cc4a:	d11b      	bne.n	801cc84 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cc4c:	4b32      	ldr	r3, [pc, #200]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc4e:	8a5b      	ldrh	r3, [r3, #18]
 801cc50:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cc54:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801cc56:	88fa      	ldrh	r2, [r7, #6]
 801cc58:	8afb      	ldrh	r3, [r7, #22]
 801cc5a:	429a      	cmp	r2, r3
 801cc5c:	d33a      	bcc.n	801ccd4 <TRACE_AllocateBufer+0xb4>
 801cc5e:	4b2e      	ldr	r3, [pc, #184]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc60:	8a1b      	ldrh	r3, [r3, #16]
 801cc62:	88fa      	ldrh	r2, [r7, #6]
 801cc64:	429a      	cmp	r2, r3
 801cc66:	d235      	bcs.n	801ccd4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801cc68:	4b2b      	ldr	r3, [pc, #172]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc6a:	2201      	movs	r2, #1
 801cc6c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801cc6e:	4b2a      	ldr	r3, [pc, #168]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc70:	8a5a      	ldrh	r2, [r3, #18]
 801cc72:	4b29      	ldr	r3, [pc, #164]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc74:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801cc76:	4b28      	ldr	r3, [pc, #160]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc78:	8a1b      	ldrh	r3, [r3, #16]
 801cc7a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801cc7c:	4b26      	ldr	r3, [pc, #152]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc7e:	2200      	movs	r2, #0
 801cc80:	825a      	strh	r2, [r3, #18]
 801cc82:	e027      	b.n	801ccd4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801cc84:	4b24      	ldr	r3, [pc, #144]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc86:	8a5a      	ldrh	r2, [r3, #18]
 801cc88:	4b23      	ldr	r3, [pc, #140]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc8a:	8a1b      	ldrh	r3, [r3, #16]
 801cc8c:	429a      	cmp	r2, r3
 801cc8e:	d91b      	bls.n	801ccc8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801cc90:	4b21      	ldr	r3, [pc, #132]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cc92:	8a5b      	ldrh	r3, [r3, #18]
 801cc94:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801cc98:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801cc9a:	88fa      	ldrh	r2, [r7, #6]
 801cc9c:	8afb      	ldrh	r3, [r7, #22]
 801cc9e:	429a      	cmp	r2, r3
 801cca0:	d318      	bcc.n	801ccd4 <TRACE_AllocateBufer+0xb4>
 801cca2:	4b1d      	ldr	r3, [pc, #116]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cca4:	8a1b      	ldrh	r3, [r3, #16]
 801cca6:	88fa      	ldrh	r2, [r7, #6]
 801cca8:	429a      	cmp	r2, r3
 801ccaa:	d213      	bcs.n	801ccd4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801ccac:	4b1a      	ldr	r3, [pc, #104]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccae:	2201      	movs	r2, #1
 801ccb0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801ccb2:	4b19      	ldr	r3, [pc, #100]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccb4:	8a5a      	ldrh	r2, [r3, #18]
 801ccb6:	4b18      	ldr	r3, [pc, #96]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccb8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801ccba:	4b17      	ldr	r3, [pc, #92]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccbc:	8a1b      	ldrh	r3, [r3, #16]
 801ccbe:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801ccc0:	4b15      	ldr	r3, [pc, #84]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccc2:	2200      	movs	r2, #0
 801ccc4:	825a      	strh	r2, [r3, #18]
 801ccc6:	e005      	b.n	801ccd4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801ccc8:	4b13      	ldr	r3, [pc, #76]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccca:	8a1a      	ldrh	r2, [r3, #16]
 801cccc:	4b12      	ldr	r3, [pc, #72]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccce:	8a5b      	ldrh	r3, [r3, #18]
 801ccd0:	1ad3      	subs	r3, r2, r3
 801ccd2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801ccd4:	8afa      	ldrh	r2, [r7, #22]
 801ccd6:	88fb      	ldrh	r3, [r7, #6]
 801ccd8:	429a      	cmp	r2, r3
 801ccda:	d90f      	bls.n	801ccfc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801ccdc:	4b0e      	ldr	r3, [pc, #56]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccde:	8a5a      	ldrh	r2, [r3, #18]
 801cce0:	683b      	ldr	r3, [r7, #0]
 801cce2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801cce4:	4b0c      	ldr	r3, [pc, #48]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801cce6:	8a5a      	ldrh	r2, [r3, #18]
 801cce8:	88fb      	ldrh	r3, [r7, #6]
 801ccea:	4413      	add	r3, r2
 801ccec:	b29b      	uxth	r3, r3
 801ccee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801ccf2:	b29a      	uxth	r2, r3
 801ccf4:	4b08      	ldr	r3, [pc, #32]	; (801cd18 <TRACE_AllocateBufer+0xf8>)
 801ccf6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801ccf8:	2300      	movs	r3, #0
 801ccfa:	82bb      	strh	r3, [r7, #20]
 801ccfc:	693b      	ldr	r3, [r7, #16]
 801ccfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd00:	68bb      	ldr	r3, [r7, #8]
 801cd02:	f383 8810 	msr	PRIMASK, r3
}
 801cd06:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801cd08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801cd0c:	4618      	mov	r0, r3
 801cd0e:	371c      	adds	r7, #28
 801cd10:	46bd      	mov	sp, r7
 801cd12:	bc80      	pop	{r7}
 801cd14:	4770      	bx	lr
 801cd16:	bf00      	nop
 801cd18:	20001b6c 	.word	0x20001b6c

0801cd1c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801cd1c:	b480      	push	{r7}
 801cd1e:	b085      	sub	sp, #20
 801cd20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd22:	f3ef 8310 	mrs	r3, PRIMASK
 801cd26:	607b      	str	r3, [r7, #4]
  return(result);
 801cd28:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cd2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd2c:	b672      	cpsid	i
}
 801cd2e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801cd30:	4b08      	ldr	r3, [pc, #32]	; (801cd54 <TRACE_Lock+0x38>)
 801cd32:	8adb      	ldrh	r3, [r3, #22]
 801cd34:	3301      	adds	r3, #1
 801cd36:	b29a      	uxth	r2, r3
 801cd38:	4b06      	ldr	r3, [pc, #24]	; (801cd54 <TRACE_Lock+0x38>)
 801cd3a:	82da      	strh	r2, [r3, #22]
 801cd3c:	68fb      	ldr	r3, [r7, #12]
 801cd3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd40:	68bb      	ldr	r3, [r7, #8]
 801cd42:	f383 8810 	msr	PRIMASK, r3
}
 801cd46:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cd48:	bf00      	nop
 801cd4a:	3714      	adds	r7, #20
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bc80      	pop	{r7}
 801cd50:	4770      	bx	lr
 801cd52:	bf00      	nop
 801cd54:	20001b6c 	.word	0x20001b6c

0801cd58 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801cd58:	b480      	push	{r7}
 801cd5a:	b085      	sub	sp, #20
 801cd5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd5e:	f3ef 8310 	mrs	r3, PRIMASK
 801cd62:	607b      	str	r3, [r7, #4]
  return(result);
 801cd64:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801cd66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd68:	b672      	cpsid	i
}
 801cd6a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801cd6c:	4b08      	ldr	r3, [pc, #32]	; (801cd90 <TRACE_UnLock+0x38>)
 801cd6e:	8adb      	ldrh	r3, [r3, #22]
 801cd70:	3b01      	subs	r3, #1
 801cd72:	b29a      	uxth	r2, r3
 801cd74:	4b06      	ldr	r3, [pc, #24]	; (801cd90 <TRACE_UnLock+0x38>)
 801cd76:	82da      	strh	r2, [r3, #22]
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	f383 8810 	msr	PRIMASK, r3
}
 801cd82:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801cd84:	bf00      	nop
 801cd86:	3714      	adds	r7, #20
 801cd88:	46bd      	mov	sp, r7
 801cd8a:	bc80      	pop	{r7}
 801cd8c:	4770      	bx	lr
 801cd8e:	bf00      	nop
 801cd90:	20001b6c 	.word	0x20001b6c

0801cd94 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801cd94:	b480      	push	{r7}
 801cd96:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801cd98:	4b05      	ldr	r3, [pc, #20]	; (801cdb0 <TRACE_IsLocked+0x1c>)
 801cd9a:	8adb      	ldrh	r3, [r3, #22]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	bf14      	ite	ne
 801cda0:	2301      	movne	r3, #1
 801cda2:	2300      	moveq	r3, #0
 801cda4:	b2db      	uxtb	r3, r3
}
 801cda6:	4618      	mov	r0, r3
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bc80      	pop	{r7}
 801cdac:	4770      	bx	lr
 801cdae:	bf00      	nop
 801cdb0:	20001b6c 	.word	0x20001b6c

0801cdb4 <__libc_init_array>:
 801cdb4:	b570      	push	{r4, r5, r6, lr}
 801cdb6:	4d0d      	ldr	r5, [pc, #52]	; (801cdec <__libc_init_array+0x38>)
 801cdb8:	4c0d      	ldr	r4, [pc, #52]	; (801cdf0 <__libc_init_array+0x3c>)
 801cdba:	1b64      	subs	r4, r4, r5
 801cdbc:	10a4      	asrs	r4, r4, #2
 801cdbe:	2600      	movs	r6, #0
 801cdc0:	42a6      	cmp	r6, r4
 801cdc2:	d109      	bne.n	801cdd8 <__libc_init_array+0x24>
 801cdc4:	4d0b      	ldr	r5, [pc, #44]	; (801cdf4 <__libc_init_array+0x40>)
 801cdc6:	4c0c      	ldr	r4, [pc, #48]	; (801cdf8 <__libc_init_array+0x44>)
 801cdc8:	f000 f8a2 	bl	801cf10 <_init>
 801cdcc:	1b64      	subs	r4, r4, r5
 801cdce:	10a4      	asrs	r4, r4, #2
 801cdd0:	2600      	movs	r6, #0
 801cdd2:	42a6      	cmp	r6, r4
 801cdd4:	d105      	bne.n	801cde2 <__libc_init_array+0x2e>
 801cdd6:	bd70      	pop	{r4, r5, r6, pc}
 801cdd8:	f855 3b04 	ldr.w	r3, [r5], #4
 801cddc:	4798      	blx	r3
 801cdde:	3601      	adds	r6, #1
 801cde0:	e7ee      	b.n	801cdc0 <__libc_init_array+0xc>
 801cde2:	f855 3b04 	ldr.w	r3, [r5], #4
 801cde6:	4798      	blx	r3
 801cde8:	3601      	adds	r6, #1
 801cdea:	e7f2      	b.n	801cdd2 <__libc_init_array+0x1e>
 801cdec:	0801df5c 	.word	0x0801df5c
 801cdf0:	0801df5c 	.word	0x0801df5c
 801cdf4:	0801df5c 	.word	0x0801df5c
 801cdf8:	0801df60 	.word	0x0801df60

0801cdfc <memset>:
 801cdfc:	4402      	add	r2, r0
 801cdfe:	4603      	mov	r3, r0
 801ce00:	4293      	cmp	r3, r2
 801ce02:	d100      	bne.n	801ce06 <memset+0xa>
 801ce04:	4770      	bx	lr
 801ce06:	f803 1b01 	strb.w	r1, [r3], #1
 801ce0a:	e7f9      	b.n	801ce00 <memset+0x4>
 801ce0c:	0000      	movs	r0, r0
	...

0801ce10 <floor>:
 801ce10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ce14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801ce18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801ce1c:	2e13      	cmp	r6, #19
 801ce1e:	4602      	mov	r2, r0
 801ce20:	460b      	mov	r3, r1
 801ce22:	4607      	mov	r7, r0
 801ce24:	460c      	mov	r4, r1
 801ce26:	4605      	mov	r5, r0
 801ce28:	dc33      	bgt.n	801ce92 <floor+0x82>
 801ce2a:	2e00      	cmp	r6, #0
 801ce2c:	da14      	bge.n	801ce58 <floor+0x48>
 801ce2e:	a334      	add	r3, pc, #208	; (adr r3, 801cf00 <floor+0xf0>)
 801ce30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce34:	f7e3 f9ae 	bl	8000194 <__adddf3>
 801ce38:	2200      	movs	r2, #0
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	f7e3 fbde 	bl	80005fc <__aeabi_dcmpgt>
 801ce40:	b138      	cbz	r0, 801ce52 <floor+0x42>
 801ce42:	2c00      	cmp	r4, #0
 801ce44:	da58      	bge.n	801cef8 <floor+0xe8>
 801ce46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ce4a:	431d      	orrs	r5, r3
 801ce4c:	d001      	beq.n	801ce52 <floor+0x42>
 801ce4e:	4c2e      	ldr	r4, [pc, #184]	; (801cf08 <floor+0xf8>)
 801ce50:	2500      	movs	r5, #0
 801ce52:	4623      	mov	r3, r4
 801ce54:	462f      	mov	r7, r5
 801ce56:	e025      	b.n	801cea4 <floor+0x94>
 801ce58:	4a2c      	ldr	r2, [pc, #176]	; (801cf0c <floor+0xfc>)
 801ce5a:	fa42 f806 	asr.w	r8, r2, r6
 801ce5e:	ea01 0208 	and.w	r2, r1, r8
 801ce62:	4302      	orrs	r2, r0
 801ce64:	d01e      	beq.n	801cea4 <floor+0x94>
 801ce66:	a326      	add	r3, pc, #152	; (adr r3, 801cf00 <floor+0xf0>)
 801ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce6c:	f7e3 f992 	bl	8000194 <__adddf3>
 801ce70:	2200      	movs	r2, #0
 801ce72:	2300      	movs	r3, #0
 801ce74:	f7e3 fbc2 	bl	80005fc <__aeabi_dcmpgt>
 801ce78:	2800      	cmp	r0, #0
 801ce7a:	d0ea      	beq.n	801ce52 <floor+0x42>
 801ce7c:	2c00      	cmp	r4, #0
 801ce7e:	bfbe      	ittt	lt
 801ce80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ce84:	fa43 f606 	asrlt.w	r6, r3, r6
 801ce88:	19a4      	addlt	r4, r4, r6
 801ce8a:	ea24 0408 	bic.w	r4, r4, r8
 801ce8e:	2500      	movs	r5, #0
 801ce90:	e7df      	b.n	801ce52 <floor+0x42>
 801ce92:	2e33      	cmp	r6, #51	; 0x33
 801ce94:	dd0a      	ble.n	801ceac <floor+0x9c>
 801ce96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ce9a:	d103      	bne.n	801cea4 <floor+0x94>
 801ce9c:	f7e3 f97a 	bl	8000194 <__adddf3>
 801cea0:	4607      	mov	r7, r0
 801cea2:	460b      	mov	r3, r1
 801cea4:	4638      	mov	r0, r7
 801cea6:	4619      	mov	r1, r3
 801cea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ceac:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801ceb0:	f04f 32ff 	mov.w	r2, #4294967295
 801ceb4:	fa22 f808 	lsr.w	r8, r2, r8
 801ceb8:	ea18 0f00 	tst.w	r8, r0
 801cebc:	d0f2      	beq.n	801cea4 <floor+0x94>
 801cebe:	a310      	add	r3, pc, #64	; (adr r3, 801cf00 <floor+0xf0>)
 801cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec4:	f7e3 f966 	bl	8000194 <__adddf3>
 801cec8:	2200      	movs	r2, #0
 801ceca:	2300      	movs	r3, #0
 801cecc:	f7e3 fb96 	bl	80005fc <__aeabi_dcmpgt>
 801ced0:	2800      	cmp	r0, #0
 801ced2:	d0be      	beq.n	801ce52 <floor+0x42>
 801ced4:	2c00      	cmp	r4, #0
 801ced6:	da02      	bge.n	801cede <floor+0xce>
 801ced8:	2e14      	cmp	r6, #20
 801ceda:	d103      	bne.n	801cee4 <floor+0xd4>
 801cedc:	3401      	adds	r4, #1
 801cede:	ea25 0508 	bic.w	r5, r5, r8
 801cee2:	e7b6      	b.n	801ce52 <floor+0x42>
 801cee4:	2301      	movs	r3, #1
 801cee6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ceea:	fa03 f606 	lsl.w	r6, r3, r6
 801ceee:	4435      	add	r5, r6
 801cef0:	42bd      	cmp	r5, r7
 801cef2:	bf38      	it	cc
 801cef4:	18e4      	addcc	r4, r4, r3
 801cef6:	e7f2      	b.n	801cede <floor+0xce>
 801cef8:	2500      	movs	r5, #0
 801cefa:	462c      	mov	r4, r5
 801cefc:	e7a9      	b.n	801ce52 <floor+0x42>
 801cefe:	bf00      	nop
 801cf00:	8800759c 	.word	0x8800759c
 801cf04:	7e37e43c 	.word	0x7e37e43c
 801cf08:	bff00000 	.word	0xbff00000
 801cf0c:	000fffff 	.word	0x000fffff

0801cf10 <_init>:
 801cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf12:	bf00      	nop
 801cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf16:	bc08      	pop	{r3}
 801cf18:	469e      	mov	lr, r3
 801cf1a:	4770      	bx	lr

0801cf1c <_fini>:
 801cf1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf1e:	bf00      	nop
 801cf20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cf22:	bc08      	pop	{r3}
 801cf24:	469e      	mov	lr, r3
 801cf26:	4770      	bx	lr
