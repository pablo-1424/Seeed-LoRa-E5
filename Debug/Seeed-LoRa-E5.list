
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5a0  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa8  0801c6d8  0801c6d8  0002c6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801d680  0801d680  0002d680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801d740  0801d740  00030150  2**0
                  CONTENTS
  5 .ARM          00000008  0801d740  0801d740  0002d740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801d748  0801d748  00030150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801d748  0801d748  0002d748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801d74c  0801d74c  0002d74c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000150  20000000  0801d750  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000021b8  20000150  0801d8a0  00030150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002308  0801d8a0  00032308  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 13 .debug_info   00043136  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a01e  00000000  00000000  000732b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033a8  00000000  00000000  0007d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ff8  00000000  00000000  00080678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028186  00000000  00000000  00083670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d4b8  00000000  00000000  000ab7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc564  00000000  00000000  000e8cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b5212  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d5b4  00000000  00000000  001b5264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000150 	.word	0x20000150
 8000154:	00000000 	.word	0x00000000
 8000158:	0801c6c0 	.word	0x0801c6c0

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000154 	.word	0x20000154
 8000174:	0801c6c0 	.word	0x0801c6c0

08000178 <strcmp>:
 8000178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000180:	2a01      	cmp	r2, #1
 8000182:	bf28      	it	cs
 8000184:	429a      	cmpcs	r2, r3
 8000186:	d0f7      	beq.n	8000178 <strcmp>
 8000188:	1ad0      	subs	r0, r2, r3
 800018a:	4770      	bx	lr

0800018c <strlen>:
 800018c:	4603      	mov	r3, r0
 800018e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000192:	2a00      	cmp	r2, #0
 8000194:	d1fb      	bne.n	800018e <strlen+0x2>
 8000196:	1a18      	subs	r0, r3, r0
 8000198:	3801      	subs	r0, #1
 800019a:	4770      	bx	lr

0800019c <__aeabi_drsub>:
 800019c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001a0:	e002      	b.n	80001a8 <__adddf3>
 80001a2:	bf00      	nop

080001a4 <__aeabi_dsub>:
 80001a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001a8 <__adddf3>:
 80001a8:	b530      	push	{r4, r5, lr}
 80001aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001b2:	ea94 0f05 	teq	r4, r5
 80001b6:	bf08      	it	eq
 80001b8:	ea90 0f02 	teqeq	r0, r2
 80001bc:	bf1f      	itttt	ne
 80001be:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001c2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ce:	f000 80e2 	beq.w	8000396 <__adddf3+0x1ee>
 80001d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001da:	bfb8      	it	lt
 80001dc:	426d      	neglt	r5, r5
 80001de:	dd0c      	ble.n	80001fa <__adddf3+0x52>
 80001e0:	442c      	add	r4, r5
 80001e2:	ea80 0202 	eor.w	r2, r0, r2
 80001e6:	ea81 0303 	eor.w	r3, r1, r3
 80001ea:	ea82 0000 	eor.w	r0, r2, r0
 80001ee:	ea83 0101 	eor.w	r1, r3, r1
 80001f2:	ea80 0202 	eor.w	r2, r0, r2
 80001f6:	ea81 0303 	eor.w	r3, r1, r3
 80001fa:	2d36      	cmp	r5, #54	; 0x36
 80001fc:	bf88      	it	hi
 80001fe:	bd30      	pophi	{r4, r5, pc}
 8000200:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000204:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000208:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800020c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x70>
 8000212:	4240      	negs	r0, r0
 8000214:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000218:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800021c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000220:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000224:	d002      	beq.n	800022c <__adddf3+0x84>
 8000226:	4252      	negs	r2, r2
 8000228:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800022c:	ea94 0f05 	teq	r4, r5
 8000230:	f000 80a7 	beq.w	8000382 <__adddf3+0x1da>
 8000234:	f1a4 0401 	sub.w	r4, r4, #1
 8000238:	f1d5 0e20 	rsbs	lr, r5, #32
 800023c:	db0d      	blt.n	800025a <__adddf3+0xb2>
 800023e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000242:	fa22 f205 	lsr.w	r2, r2, r5
 8000246:	1880      	adds	r0, r0, r2
 8000248:	f141 0100 	adc.w	r1, r1, #0
 800024c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000250:	1880      	adds	r0, r0, r2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	4159      	adcs	r1, r3
 8000258:	e00e      	b.n	8000278 <__adddf3+0xd0>
 800025a:	f1a5 0520 	sub.w	r5, r5, #32
 800025e:	f10e 0e20 	add.w	lr, lr, #32
 8000262:	2a01      	cmp	r2, #1
 8000264:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000268:	bf28      	it	cs
 800026a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800026e:	fa43 f305 	asr.w	r3, r3, r5
 8000272:	18c0      	adds	r0, r0, r3
 8000274:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000278:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800027c:	d507      	bpl.n	800028e <__adddf3+0xe6>
 800027e:	f04f 0e00 	mov.w	lr, #0
 8000282:	f1dc 0c00 	rsbs	ip, ip, #0
 8000286:	eb7e 0000 	sbcs.w	r0, lr, r0
 800028a:	eb6e 0101 	sbc.w	r1, lr, r1
 800028e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000292:	d31b      	bcc.n	80002cc <__adddf3+0x124>
 8000294:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000298:	d30c      	bcc.n	80002b4 <__adddf3+0x10c>
 800029a:	0849      	lsrs	r1, r1, #1
 800029c:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002a4:	f104 0401 	add.w	r4, r4, #1
 80002a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002b0:	f080 809a 	bcs.w	80003e8 <__adddf3+0x240>
 80002b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002b8:	bf08      	it	eq
 80002ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002be:	f150 0000 	adcs.w	r0, r0, #0
 80002c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002c6:	ea41 0105 	orr.w	r1, r1, r5
 80002ca:	bd30      	pop	{r4, r5, pc}
 80002cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d0:	4140      	adcs	r0, r0
 80002d2:	eb41 0101 	adc.w	r1, r1, r1
 80002d6:	3c01      	subs	r4, #1
 80002d8:	bf28      	it	cs
 80002da:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002de:	d2e9      	bcs.n	80002b4 <__adddf3+0x10c>
 80002e0:	f091 0f00 	teq	r1, #0
 80002e4:	bf04      	itt	eq
 80002e6:	4601      	moveq	r1, r0
 80002e8:	2000      	moveq	r0, #0
 80002ea:	fab1 f381 	clz	r3, r1
 80002ee:	bf08      	it	eq
 80002f0:	3320      	addeq	r3, #32
 80002f2:	f1a3 030b 	sub.w	r3, r3, #11
 80002f6:	f1b3 0220 	subs.w	r2, r3, #32
 80002fa:	da0c      	bge.n	8000316 <__adddf3+0x16e>
 80002fc:	320c      	adds	r2, #12
 80002fe:	dd08      	ble.n	8000312 <__adddf3+0x16a>
 8000300:	f102 0c14 	add.w	ip, r2, #20
 8000304:	f1c2 020c 	rsb	r2, r2, #12
 8000308:	fa01 f00c 	lsl.w	r0, r1, ip
 800030c:	fa21 f102 	lsr.w	r1, r1, r2
 8000310:	e00c      	b.n	800032c <__adddf3+0x184>
 8000312:	f102 0214 	add.w	r2, r2, #20
 8000316:	bfd8      	it	le
 8000318:	f1c2 0c20 	rsble	ip, r2, #32
 800031c:	fa01 f102 	lsl.w	r1, r1, r2
 8000320:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000324:	bfdc      	itt	le
 8000326:	ea41 010c 	orrle.w	r1, r1, ip
 800032a:	4090      	lslle	r0, r2
 800032c:	1ae4      	subs	r4, r4, r3
 800032e:	bfa2      	ittt	ge
 8000330:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000334:	4329      	orrge	r1, r5
 8000336:	bd30      	popge	{r4, r5, pc}
 8000338:	ea6f 0404 	mvn.w	r4, r4
 800033c:	3c1f      	subs	r4, #31
 800033e:	da1c      	bge.n	800037a <__adddf3+0x1d2>
 8000340:	340c      	adds	r4, #12
 8000342:	dc0e      	bgt.n	8000362 <__adddf3+0x1ba>
 8000344:	f104 0414 	add.w	r4, r4, #20
 8000348:	f1c4 0220 	rsb	r2, r4, #32
 800034c:	fa20 f004 	lsr.w	r0, r0, r4
 8000350:	fa01 f302 	lsl.w	r3, r1, r2
 8000354:	ea40 0003 	orr.w	r0, r0, r3
 8000358:	fa21 f304 	lsr.w	r3, r1, r4
 800035c:	ea45 0103 	orr.w	r1, r5, r3
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f1c4 040c 	rsb	r4, r4, #12
 8000366:	f1c4 0220 	rsb	r2, r4, #32
 800036a:	fa20 f002 	lsr.w	r0, r0, r2
 800036e:	fa01 f304 	lsl.w	r3, r1, r4
 8000372:	ea40 0003 	orr.w	r0, r0, r3
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	fa21 f004 	lsr.w	r0, r1, r4
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	f094 0f00 	teq	r4, #0
 8000386:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800038a:	bf06      	itte	eq
 800038c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000390:	3401      	addeq	r4, #1
 8000392:	3d01      	subne	r5, #1
 8000394:	e74e      	b.n	8000234 <__adddf3+0x8c>
 8000396:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800039a:	bf18      	it	ne
 800039c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a0:	d029      	beq.n	80003f6 <__adddf3+0x24e>
 80003a2:	ea94 0f05 	teq	r4, r5
 80003a6:	bf08      	it	eq
 80003a8:	ea90 0f02 	teqeq	r0, r2
 80003ac:	d005      	beq.n	80003ba <__adddf3+0x212>
 80003ae:	ea54 0c00 	orrs.w	ip, r4, r0
 80003b2:	bf04      	itt	eq
 80003b4:	4619      	moveq	r1, r3
 80003b6:	4610      	moveq	r0, r2
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea91 0f03 	teq	r1, r3
 80003be:	bf1e      	ittt	ne
 80003c0:	2100      	movne	r1, #0
 80003c2:	2000      	movne	r0, #0
 80003c4:	bd30      	popne	{r4, r5, pc}
 80003c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ca:	d105      	bne.n	80003d8 <__adddf3+0x230>
 80003cc:	0040      	lsls	r0, r0, #1
 80003ce:	4149      	adcs	r1, r1
 80003d0:	bf28      	it	cs
 80003d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003dc:	bf3c      	itt	cc
 80003de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003e2:	bd30      	popcc	{r4, r5, pc}
 80003e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf1a      	itte	ne
 80003fc:	4619      	movne	r1, r3
 80003fe:	4610      	movne	r0, r2
 8000400:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000404:	bf1c      	itt	ne
 8000406:	460b      	movne	r3, r1
 8000408:	4602      	movne	r2, r0
 800040a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800040e:	bf06      	itte	eq
 8000410:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000414:	ea91 0f03 	teqeq	r1, r3
 8000418:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	bf00      	nop

08000420 <__aeabi_ui2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f04f 0500 	mov.w	r5, #0
 8000438:	f04f 0100 	mov.w	r1, #0
 800043c:	e750      	b.n	80002e0 <__adddf3+0x138>
 800043e:	bf00      	nop

08000440 <__aeabi_i2d>:
 8000440:	f090 0f00 	teq	r0, #0
 8000444:	bf04      	itt	eq
 8000446:	2100      	moveq	r1, #0
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000450:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000454:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000458:	bf48      	it	mi
 800045a:	4240      	negmi	r0, r0
 800045c:	f04f 0100 	mov.w	r1, #0
 8000460:	e73e      	b.n	80002e0 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_f2d>:
 8000464:	0042      	lsls	r2, r0, #1
 8000466:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800046a:	ea4f 0131 	mov.w	r1, r1, rrx
 800046e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000472:	bf1f      	itttt	ne
 8000474:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000478:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800047c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000480:	4770      	bxne	lr
 8000482:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000486:	bf08      	it	eq
 8000488:	4770      	bxeq	lr
 800048a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800048e:	bf04      	itt	eq
 8000490:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 7460 	mov.w	r4, #896	; 0x380
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004a4:	e71c      	b.n	80002e0 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_ul2d>:
 80004a8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ac:	bf08      	it	eq
 80004ae:	4770      	bxeq	lr
 80004b0:	b530      	push	{r4, r5, lr}
 80004b2:	f04f 0500 	mov.w	r5, #0
 80004b6:	e00a      	b.n	80004ce <__aeabi_l2d+0x16>

080004b8 <__aeabi_l2d>:
 80004b8:	ea50 0201 	orrs.w	r2, r0, r1
 80004bc:	bf08      	it	eq
 80004be:	4770      	bxeq	lr
 80004c0:	b530      	push	{r4, r5, lr}
 80004c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004c6:	d502      	bpl.n	80004ce <__aeabi_l2d+0x16>
 80004c8:	4240      	negs	r0, r0
 80004ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004da:	f43f aed8 	beq.w	800028e <__adddf3+0xe6>
 80004de:	f04f 0203 	mov.w	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004f6:	f1c2 0320 	rsb	r3, r2, #32
 80004fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 fe03 	lsl.w	lr, r1, r3
 8000506:	ea40 000e 	orr.w	r0, r0, lr
 800050a:	fa21 f102 	lsr.w	r1, r1, r2
 800050e:	4414      	add	r4, r2
 8000510:	e6bd      	b.n	800028e <__adddf3+0xe6>
 8000512:	bf00      	nop

08000514 <__gedf2>:
 8000514:	f04f 3cff 	mov.w	ip, #4294967295
 8000518:	e006      	b.n	8000528 <__cmpdf2+0x4>
 800051a:	bf00      	nop

0800051c <__ledf2>:
 800051c:	f04f 0c01 	mov.w	ip, #1
 8000520:	e002      	b.n	8000528 <__cmpdf2+0x4>
 8000522:	bf00      	nop

08000524 <__cmpdf2>:
 8000524:	f04f 0c01 	mov.w	ip, #1
 8000528:	f84d cd04 	str.w	ip, [sp, #-4]!
 800052c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000530:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000534:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000538:	bf18      	it	ne
 800053a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800053e:	d01b      	beq.n	8000578 <__cmpdf2+0x54>
 8000540:	b001      	add	sp, #4
 8000542:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000546:	bf0c      	ite	eq
 8000548:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800054c:	ea91 0f03 	teqne	r1, r3
 8000550:	bf02      	ittt	eq
 8000552:	ea90 0f02 	teqeq	r0, r2
 8000556:	2000      	moveq	r0, #0
 8000558:	4770      	bxeq	lr
 800055a:	f110 0f00 	cmn.w	r0, #0
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf58      	it	pl
 8000564:	4299      	cmppl	r1, r3
 8000566:	bf08      	it	eq
 8000568:	4290      	cmpeq	r0, r2
 800056a:	bf2c      	ite	cs
 800056c:	17d8      	asrcs	r0, r3, #31
 800056e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000572:	f040 0001 	orr.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800057c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000580:	d102      	bne.n	8000588 <__cmpdf2+0x64>
 8000582:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000586:	d107      	bne.n	8000598 <__cmpdf2+0x74>
 8000588:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800058c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000590:	d1d6      	bne.n	8000540 <__cmpdf2+0x1c>
 8000592:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000596:	d0d3      	beq.n	8000540 <__cmpdf2+0x1c>
 8000598:	f85d 0b04 	ldr.w	r0, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__aeabi_cdrcmple>:
 80005a0:	4684      	mov	ip, r0
 80005a2:	4610      	mov	r0, r2
 80005a4:	4662      	mov	r2, ip
 80005a6:	468c      	mov	ip, r1
 80005a8:	4619      	mov	r1, r3
 80005aa:	4663      	mov	r3, ip
 80005ac:	e000      	b.n	80005b0 <__aeabi_cdcmpeq>
 80005ae:	bf00      	nop

080005b0 <__aeabi_cdcmpeq>:
 80005b0:	b501      	push	{r0, lr}
 80005b2:	f7ff ffb7 	bl	8000524 <__cmpdf2>
 80005b6:	2800      	cmp	r0, #0
 80005b8:	bf48      	it	mi
 80005ba:	f110 0f00 	cmnmi.w	r0, #0
 80005be:	bd01      	pop	{r0, pc}

080005c0 <__aeabi_dcmpeq>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff fff4 	bl	80005b0 <__aeabi_cdcmpeq>
 80005c8:	bf0c      	ite	eq
 80005ca:	2001      	moveq	r0, #1
 80005cc:	2000      	movne	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmplt>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffea 	bl	80005b0 <__aeabi_cdcmpeq>
 80005dc:	bf34      	ite	cc
 80005de:	2001      	movcc	r0, #1
 80005e0:	2000      	movcs	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmple>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffe0 	bl	80005b0 <__aeabi_cdcmpeq>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpge>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffce 	bl	80005a0 <__aeabi_cdrcmple>
 8000604:	bf94      	ite	ls
 8000606:	2001      	movls	r0, #1
 8000608:	2000      	movhi	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmpgt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffc4 	bl	80005a0 <__aeabi_cdrcmple>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_d2iz>:
 8000624:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000628:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800062c:	d215      	bcs.n	800065a <__aeabi_d2iz+0x36>
 800062e:	d511      	bpl.n	8000654 <__aeabi_d2iz+0x30>
 8000630:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000634:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000638:	d912      	bls.n	8000660 <__aeabi_d2iz+0x3c>
 800063a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800063e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000642:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000646:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800064a:	fa23 f002 	lsr.w	r0, r3, r2
 800064e:	bf18      	it	ne
 8000650:	4240      	negne	r0, r0
 8000652:	4770      	bx	lr
 8000654:	f04f 0000 	mov.w	r0, #0
 8000658:	4770      	bx	lr
 800065a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800065e:	d105      	bne.n	800066c <__aeabi_d2iz+0x48>
 8000660:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000664:	bf08      	it	eq
 8000666:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800066a:	4770      	bx	lr
 800066c:	f04f 0000 	mov.w	r0, #0
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop

08000674 <__aeabi_frsub>:
 8000674:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000678:	e002      	b.n	8000680 <__addsf3>
 800067a:	bf00      	nop

0800067c <__aeabi_fsub>:
 800067c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000680 <__addsf3>:
 8000680:	0042      	lsls	r2, r0, #1
 8000682:	bf1f      	itttt	ne
 8000684:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000688:	ea92 0f03 	teqne	r2, r3
 800068c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000690:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000694:	d06a      	beq.n	800076c <__addsf3+0xec>
 8000696:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800069a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800069e:	bfc1      	itttt	gt
 80006a0:	18d2      	addgt	r2, r2, r3
 80006a2:	4041      	eorgt	r1, r0
 80006a4:	4048      	eorgt	r0, r1
 80006a6:	4041      	eorgt	r1, r0
 80006a8:	bfb8      	it	lt
 80006aa:	425b      	neglt	r3, r3
 80006ac:	2b19      	cmp	r3, #25
 80006ae:	bf88      	it	hi
 80006b0:	4770      	bxhi	lr
 80006b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006be:	bf18      	it	ne
 80006c0:	4240      	negne	r0, r0
 80006c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ce:	bf18      	it	ne
 80006d0:	4249      	negne	r1, r1
 80006d2:	ea92 0f03 	teq	r2, r3
 80006d6:	d03f      	beq.n	8000758 <__addsf3+0xd8>
 80006d8:	f1a2 0201 	sub.w	r2, r2, #1
 80006dc:	fa41 fc03 	asr.w	ip, r1, r3
 80006e0:	eb10 000c 	adds.w	r0, r0, ip
 80006e4:	f1c3 0320 	rsb	r3, r3, #32
 80006e8:	fa01 f103 	lsl.w	r1, r1, r3
 80006ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006f0:	d502      	bpl.n	80006f8 <__addsf3+0x78>
 80006f2:	4249      	negs	r1, r1
 80006f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006fc:	d313      	bcc.n	8000726 <__addsf3+0xa6>
 80006fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000702:	d306      	bcc.n	8000712 <__addsf3+0x92>
 8000704:	0840      	lsrs	r0, r0, #1
 8000706:	ea4f 0131 	mov.w	r1, r1, rrx
 800070a:	f102 0201 	add.w	r2, r2, #1
 800070e:	2afe      	cmp	r2, #254	; 0xfe
 8000710:	d251      	bcs.n	80007b6 <__addsf3+0x136>
 8000712:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000716:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800071a:	bf08      	it	eq
 800071c:	f020 0001 	biceq.w	r0, r0, #1
 8000720:	ea40 0003 	orr.w	r0, r0, r3
 8000724:	4770      	bx	lr
 8000726:	0049      	lsls	r1, r1, #1
 8000728:	eb40 0000 	adc.w	r0, r0, r0
 800072c:	3a01      	subs	r2, #1
 800072e:	bf28      	it	cs
 8000730:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000734:	d2ed      	bcs.n	8000712 <__addsf3+0x92>
 8000736:	fab0 fc80 	clz	ip, r0
 800073a:	f1ac 0c08 	sub.w	ip, ip, #8
 800073e:	ebb2 020c 	subs.w	r2, r2, ip
 8000742:	fa00 f00c 	lsl.w	r0, r0, ip
 8000746:	bfaa      	itet	ge
 8000748:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800074c:	4252      	neglt	r2, r2
 800074e:	4318      	orrge	r0, r3
 8000750:	bfbc      	itt	lt
 8000752:	40d0      	lsrlt	r0, r2
 8000754:	4318      	orrlt	r0, r3
 8000756:	4770      	bx	lr
 8000758:	f092 0f00 	teq	r2, #0
 800075c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000760:	bf06      	itte	eq
 8000762:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000766:	3201      	addeq	r2, #1
 8000768:	3b01      	subne	r3, #1
 800076a:	e7b5      	b.n	80006d8 <__addsf3+0x58>
 800076c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000770:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000774:	bf18      	it	ne
 8000776:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800077a:	d021      	beq.n	80007c0 <__addsf3+0x140>
 800077c:	ea92 0f03 	teq	r2, r3
 8000780:	d004      	beq.n	800078c <__addsf3+0x10c>
 8000782:	f092 0f00 	teq	r2, #0
 8000786:	bf08      	it	eq
 8000788:	4608      	moveq	r0, r1
 800078a:	4770      	bx	lr
 800078c:	ea90 0f01 	teq	r0, r1
 8000790:	bf1c      	itt	ne
 8000792:	2000      	movne	r0, #0
 8000794:	4770      	bxne	lr
 8000796:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800079a:	d104      	bne.n	80007a6 <__addsf3+0x126>
 800079c:	0040      	lsls	r0, r0, #1
 800079e:	bf28      	it	cs
 80007a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a4:	4770      	bx	lr
 80007a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007aa:	bf3c      	itt	cc
 80007ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007b0:	4770      	bxcc	lr
 80007b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007be:	4770      	bx	lr
 80007c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c4:	bf16      	itet	ne
 80007c6:	4608      	movne	r0, r1
 80007c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007cc:	4601      	movne	r1, r0
 80007ce:	0242      	lsls	r2, r0, #9
 80007d0:	bf06      	itte	eq
 80007d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007d6:	ea90 0f01 	teqeq	r0, r1
 80007da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007de:	4770      	bx	lr

080007e0 <__aeabi_ui2f>:
 80007e0:	f04f 0300 	mov.w	r3, #0
 80007e4:	e004      	b.n	80007f0 <__aeabi_i2f+0x8>
 80007e6:	bf00      	nop

080007e8 <__aeabi_i2f>:
 80007e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007ec:	bf48      	it	mi
 80007ee:	4240      	negmi	r0, r0
 80007f0:	ea5f 0c00 	movs.w	ip, r0
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007fc:	4601      	mov	r1, r0
 80007fe:	f04f 0000 	mov.w	r0, #0
 8000802:	e01c      	b.n	800083e <__aeabi_l2f+0x2a>

08000804 <__aeabi_ul2f>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	e00a      	b.n	8000828 <__aeabi_l2f+0x14>
 8000812:	bf00      	nop

08000814 <__aeabi_l2f>:
 8000814:	ea50 0201 	orrs.w	r2, r0, r1
 8000818:	bf08      	it	eq
 800081a:	4770      	bxeq	lr
 800081c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000820:	d502      	bpl.n	8000828 <__aeabi_l2f+0x14>
 8000822:	4240      	negs	r0, r0
 8000824:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000828:	ea5f 0c01 	movs.w	ip, r1
 800082c:	bf02      	ittt	eq
 800082e:	4684      	moveq	ip, r0
 8000830:	4601      	moveq	r1, r0
 8000832:	2000      	moveq	r0, #0
 8000834:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000838:	bf08      	it	eq
 800083a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800083e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000842:	fabc f28c 	clz	r2, ip
 8000846:	3a08      	subs	r2, #8
 8000848:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800084c:	db10      	blt.n	8000870 <__aeabi_l2f+0x5c>
 800084e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000852:	4463      	add	r3, ip
 8000854:	fa00 fc02 	lsl.w	ip, r0, r2
 8000858:	f1c2 0220 	rsb	r2, r2, #32
 800085c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000860:	fa20 f202 	lsr.w	r2, r0, r2
 8000864:	eb43 0002 	adc.w	r0, r3, r2
 8000868:	bf08      	it	eq
 800086a:	f020 0001 	biceq.w	r0, r0, #1
 800086e:	4770      	bx	lr
 8000870:	f102 0220 	add.w	r2, r2, #32
 8000874:	fa01 fc02 	lsl.w	ip, r1, r2
 8000878:	f1c2 0220 	rsb	r2, r2, #32
 800087c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000880:	fa21 f202 	lsr.w	r2, r1, r2
 8000884:	eb43 0002 	adc.w	r0, r3, r2
 8000888:	bf08      	it	eq
 800088a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800088e:	4770      	bx	lr

08000890 <__aeabi_fmul>:
 8000890:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000894:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000898:	bf1e      	ittt	ne
 800089a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800089e:	ea92 0f0c 	teqne	r2, ip
 80008a2:	ea93 0f0c 	teqne	r3, ip
 80008a6:	d06f      	beq.n	8000988 <__aeabi_fmul+0xf8>
 80008a8:	441a      	add	r2, r3
 80008aa:	ea80 0c01 	eor.w	ip, r0, r1
 80008ae:	0240      	lsls	r0, r0, #9
 80008b0:	bf18      	it	ne
 80008b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008b6:	d01e      	beq.n	80008f6 <__aeabi_fmul+0x66>
 80008b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008c4:	fba0 3101 	umull	r3, r1, r0, r1
 80008c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008d0:	bf3e      	ittt	cc
 80008d2:	0049      	lslcc	r1, r1, #1
 80008d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008d8:	005b      	lslcc	r3, r3, #1
 80008da:	ea40 0001 	orr.w	r0, r0, r1
 80008de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008e2:	2afd      	cmp	r2, #253	; 0xfd
 80008e4:	d81d      	bhi.n	8000922 <__aeabi_fmul+0x92>
 80008e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008ee:	bf08      	it	eq
 80008f0:	f020 0001 	biceq.w	r0, r0, #1
 80008f4:	4770      	bx	lr
 80008f6:	f090 0f00 	teq	r0, #0
 80008fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008fe:	bf08      	it	eq
 8000900:	0249      	lsleq	r1, r1, #9
 8000902:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000906:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800090a:	3a7f      	subs	r2, #127	; 0x7f
 800090c:	bfc2      	ittt	gt
 800090e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000912:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000916:	4770      	bxgt	lr
 8000918:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800091c:	f04f 0300 	mov.w	r3, #0
 8000920:	3a01      	subs	r2, #1
 8000922:	dc5d      	bgt.n	80009e0 <__aeabi_fmul+0x150>
 8000924:	f112 0f19 	cmn.w	r2, #25
 8000928:	bfdc      	itt	le
 800092a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800092e:	4770      	bxle	lr
 8000930:	f1c2 0200 	rsb	r2, r2, #0
 8000934:	0041      	lsls	r1, r0, #1
 8000936:	fa21 f102 	lsr.w	r1, r1, r2
 800093a:	f1c2 0220 	rsb	r2, r2, #32
 800093e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000942:	ea5f 0031 	movs.w	r0, r1, rrx
 8000946:	f140 0000 	adc.w	r0, r0, #0
 800094a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800094e:	bf08      	it	eq
 8000950:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000954:	4770      	bx	lr
 8000956:	f092 0f00 	teq	r2, #0
 800095a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800095e:	bf02      	ittt	eq
 8000960:	0040      	lsleq	r0, r0, #1
 8000962:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000966:	3a01      	subeq	r2, #1
 8000968:	d0f9      	beq.n	800095e <__aeabi_fmul+0xce>
 800096a:	ea40 000c 	orr.w	r0, r0, ip
 800096e:	f093 0f00 	teq	r3, #0
 8000972:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000976:	bf02      	ittt	eq
 8000978:	0049      	lsleq	r1, r1, #1
 800097a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800097e:	3b01      	subeq	r3, #1
 8000980:	d0f9      	beq.n	8000976 <__aeabi_fmul+0xe6>
 8000982:	ea41 010c 	orr.w	r1, r1, ip
 8000986:	e78f      	b.n	80008a8 <__aeabi_fmul+0x18>
 8000988:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800098c:	ea92 0f0c 	teq	r2, ip
 8000990:	bf18      	it	ne
 8000992:	ea93 0f0c 	teqne	r3, ip
 8000996:	d00a      	beq.n	80009ae <__aeabi_fmul+0x11e>
 8000998:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800099c:	bf18      	it	ne
 800099e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80009a2:	d1d8      	bne.n	8000956 <__aeabi_fmul+0xc6>
 80009a4:	ea80 0001 	eor.w	r0, r0, r1
 80009a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009ac:	4770      	bx	lr
 80009ae:	f090 0f00 	teq	r0, #0
 80009b2:	bf17      	itett	ne
 80009b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009b8:	4608      	moveq	r0, r1
 80009ba:	f091 0f00 	teqne	r1, #0
 80009be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009c2:	d014      	beq.n	80009ee <__aeabi_fmul+0x15e>
 80009c4:	ea92 0f0c 	teq	r2, ip
 80009c8:	d101      	bne.n	80009ce <__aeabi_fmul+0x13e>
 80009ca:	0242      	lsls	r2, r0, #9
 80009cc:	d10f      	bne.n	80009ee <__aeabi_fmul+0x15e>
 80009ce:	ea93 0f0c 	teq	r3, ip
 80009d2:	d103      	bne.n	80009dc <__aeabi_fmul+0x14c>
 80009d4:	024b      	lsls	r3, r1, #9
 80009d6:	bf18      	it	ne
 80009d8:	4608      	movne	r0, r1
 80009da:	d108      	bne.n	80009ee <__aeabi_fmul+0x15e>
 80009dc:	ea80 0001 	eor.w	r0, r0, r1
 80009e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ec:	4770      	bx	lr
 80009ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009f6:	4770      	bx	lr

080009f8 <__aeabi_fdiv>:
 80009f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a00:	bf1e      	ittt	ne
 8000a02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a06:	ea92 0f0c 	teqne	r2, ip
 8000a0a:	ea93 0f0c 	teqne	r3, ip
 8000a0e:	d069      	beq.n	8000ae4 <__aeabi_fdiv+0xec>
 8000a10:	eba2 0203 	sub.w	r2, r2, r3
 8000a14:	ea80 0c01 	eor.w	ip, r0, r1
 8000a18:	0249      	lsls	r1, r1, #9
 8000a1a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a1e:	d037      	beq.n	8000a90 <__aeabi_fdiv+0x98>
 8000a20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a24:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a28:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a30:	428b      	cmp	r3, r1
 8000a32:	bf38      	it	cc
 8000a34:	005b      	lslcc	r3, r3, #1
 8000a36:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a3a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a3e:	428b      	cmp	r3, r1
 8000a40:	bf24      	itt	cs
 8000a42:	1a5b      	subcs	r3, r3, r1
 8000a44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a48:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a4c:	bf24      	itt	cs
 8000a4e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a52:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a56:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a5a:	bf24      	itt	cs
 8000a5c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a64:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a68:	bf24      	itt	cs
 8000a6a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a6e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a72:	011b      	lsls	r3, r3, #4
 8000a74:	bf18      	it	ne
 8000a76:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a7a:	d1e0      	bne.n	8000a3e <__aeabi_fdiv+0x46>
 8000a7c:	2afd      	cmp	r2, #253	; 0xfd
 8000a7e:	f63f af50 	bhi.w	8000922 <__aeabi_fmul+0x92>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a94:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a98:	327f      	adds	r2, #127	; 0x7f
 8000a9a:	bfc2      	ittt	gt
 8000a9c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000aa0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000aa4:	4770      	bxgt	lr
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	f04f 0300 	mov.w	r3, #0
 8000aae:	3a01      	subs	r2, #1
 8000ab0:	e737      	b.n	8000922 <__aeabi_fmul+0x92>
 8000ab2:	f092 0f00 	teq	r2, #0
 8000ab6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aba:	bf02      	ittt	eq
 8000abc:	0040      	lsleq	r0, r0, #1
 8000abe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ac2:	3a01      	subeq	r2, #1
 8000ac4:	d0f9      	beq.n	8000aba <__aeabi_fdiv+0xc2>
 8000ac6:	ea40 000c 	orr.w	r0, r0, ip
 8000aca:	f093 0f00 	teq	r3, #0
 8000ace:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad2:	bf02      	ittt	eq
 8000ad4:	0049      	lsleq	r1, r1, #1
 8000ad6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ada:	3b01      	subeq	r3, #1
 8000adc:	d0f9      	beq.n	8000ad2 <__aeabi_fdiv+0xda>
 8000ade:	ea41 010c 	orr.w	r1, r1, ip
 8000ae2:	e795      	b.n	8000a10 <__aeabi_fdiv+0x18>
 8000ae4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ae8:	ea92 0f0c 	teq	r2, ip
 8000aec:	d108      	bne.n	8000b00 <__aeabi_fdiv+0x108>
 8000aee:	0242      	lsls	r2, r0, #9
 8000af0:	f47f af7d 	bne.w	80009ee <__aeabi_fmul+0x15e>
 8000af4:	ea93 0f0c 	teq	r3, ip
 8000af8:	f47f af70 	bne.w	80009dc <__aeabi_fmul+0x14c>
 8000afc:	4608      	mov	r0, r1
 8000afe:	e776      	b.n	80009ee <__aeabi_fmul+0x15e>
 8000b00:	ea93 0f0c 	teq	r3, ip
 8000b04:	d104      	bne.n	8000b10 <__aeabi_fdiv+0x118>
 8000b06:	024b      	lsls	r3, r1, #9
 8000b08:	f43f af4c 	beq.w	80009a4 <__aeabi_fmul+0x114>
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	e76e      	b.n	80009ee <__aeabi_fmul+0x15e>
 8000b10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b14:	bf18      	it	ne
 8000b16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b1a:	d1ca      	bne.n	8000ab2 <__aeabi_fdiv+0xba>
 8000b1c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b20:	f47f af5c 	bne.w	80009dc <__aeabi_fmul+0x14c>
 8000b24:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b28:	f47f af3c 	bne.w	80009a4 <__aeabi_fmul+0x114>
 8000b2c:	e75f      	b.n	80009ee <__aeabi_fmul+0x15e>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_f2iz>:
 8000b30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b38:	d30f      	bcc.n	8000b5a <__aeabi_f2iz+0x2a>
 8000b3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_f2iz+0x30>
 8000b44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b50:	fa23 f002 	lsr.w	r0, r3, r2
 8000b54:	bf18      	it	ne
 8000b56:	4240      	negne	r0, r0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0000 	mov.w	r0, #0
 8000b5e:	4770      	bx	lr
 8000b60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b64:	d101      	bne.n	8000b6a <__aeabi_f2iz+0x3a>
 8000b66:	0242      	lsls	r2, r0, #9
 8000b68:	d105      	bne.n	8000b76 <__aeabi_f2iz+0x46>
 8000b6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b6e:	bf08      	it	eq
 8000b70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_f2uiz>:
 8000b7c:	0042      	lsls	r2, r0, #1
 8000b7e:	d20e      	bcs.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b84:	d30b      	bcc.n	8000b9e <__aeabi_f2uiz+0x22>
 8000b86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b8e:	d409      	bmi.n	8000ba4 <__aeabi_f2uiz+0x28>
 8000b90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b98:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9c:	4770      	bx	lr
 8000b9e:	f04f 0000 	mov.w	r0, #0
 8000ba2:	4770      	bx	lr
 8000ba4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ba8:	d101      	bne.n	8000bae <__aeabi_f2uiz+0x32>
 8000baa:	0242      	lsls	r2, r0, #9
 8000bac:	d102      	bne.n	8000bb4 <__aeabi_f2uiz+0x38>
 8000bae:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	4688      	mov	r8, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14d      	bne.n	8000c98 <__udivmoddi4+0xac>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d968      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c02:	fab2 f282 	clz	r2, r2
 8000c06:	b152      	cbz	r2, 8000c1e <__udivmoddi4+0x32>
 8000c08:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0c:	f1c2 0120 	rsb	r1, r2, #32
 8000c10:	fa20 f101 	lsr.w	r1, r0, r1
 8000c14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c18:	ea41 0803 	orr.w	r8, r1, r3
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c22:	0c21      	lsrs	r1, r4, #16
 8000c24:	fbb8 fef5 	udiv	lr, r8, r5
 8000c28:	fa1f f78c 	uxth.w	r7, ip
 8000c2c:	fb05 831e 	mls	r3, r5, lr, r8
 8000c30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c34:	fb0e f107 	mul.w	r1, lr, r7
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x68>
 8000c3c:	eb1c 0303 	adds.w	r3, ip, r3
 8000c40:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c44:	f080 811e 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f240 811b 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c52:	4463      	add	r3, ip
 8000c54:	1a5b      	subs	r3, r3, r1
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c5c:	fb05 3310 	mls	r3, r5, r0, r3
 8000c60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c64:	fb00 f707 	mul.w	r7, r0, r7
 8000c68:	42a7      	cmp	r7, r4
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x96>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c74:	f080 8108 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c78:	42a7      	cmp	r7, r4
 8000c7a:	f240 8105 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7e:	4464      	add	r4, ip
 8000c80:	3802      	subs	r0, #2
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c88:	2100      	movs	r1, #0
 8000c8a:	b11e      	cbz	r6, 8000c94 <__udivmoddi4+0xa8>
 8000c8c:	40d4      	lsrs	r4, r2
 8000c8e:	2300      	movs	r3, #0
 8000c90:	e9c6 4300 	strd	r4, r3, [r6]
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9c:	2e00      	cmp	r6, #0
 8000c9e:	f000 80ee 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca8:	4608      	mov	r0, r1
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	42ab      	cmp	r3, r5
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb65 0303 	sbc.w	r3, r5, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4698      	mov	r8, r3
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d0e2      	beq.n	8000c94 <__udivmoddi4+0xa8>
 8000cce:	e9c6 4800 	strd	r4, r8, [r6]
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0xa8>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8091 	bne.w	8000e04 <__udivmoddi4+0x218>
 8000ce2:	eba1 050c 	sub.w	r5, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2101      	movs	r1, #1
 8000cf0:	fbb5 f3f7 	udiv	r3, r5, r7
 8000cf4:	fb07 5013 	mls	r0, r7, r3, r5
 8000cf8:	0c25      	lsrs	r5, r4, #16
 8000cfa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	42a8      	cmp	r0, r5
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0505 	adds.w	r5, ip, r5
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	42a8      	cmp	r0, r5
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a2d      	subs	r5, r5, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d20:	fb07 5510 	mls	r5, r7, r0, r5
 8000d24:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4628      	mov	r0, r5
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79e      	b.n	8000c8a <__udivmoddi4+0x9e>
 8000d4c:	f1c1 0720 	rsb	r7, r1, #32
 8000d50:	408b      	lsls	r3, r1
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa05 f301 	lsl.w	r3, r5, r1
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40fd      	lsrs	r5, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f301 	lsl.w	r3, r0, r1
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0505 	adds.w	r5, ip, r5
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	42a8      	cmp	r0, r5
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4465      	add	r5, ip
 8000da4:	1a2d      	subs	r5, r5, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb5 f0f9 	udiv	r0, r5, r9
 8000dac:	fb09 5510 	mls	r5, r9, r0, r5
 8000db0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45ae      	cmp	lr, r5
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0505 	adds.w	r5, ip, r5
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	45ae      	cmp	lr, r5
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4465      	add	r5, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba5 050e 	sub.w	r5, r5, lr
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15e      	cbz	r6, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb65 050e 	sbc.w	r5, r5, lr
 8000dee:	fa05 f707 	lsl.w	r7, r5, r7
 8000df2:	fa22 f301 	lsr.w	r3, r2, r1
 8000df6:	40cd      	lsrs	r5, r1
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c6 7500 	strd	r7, r5, [r6]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e04:	f1c2 0320 	rsb	r3, r2, #32
 8000e08:	fa20 f103 	lsr.w	r1, r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa25 f303 	lsr.w	r3, r5, r3
 8000e14:	4095      	lsls	r5, r2
 8000e16:	430d      	orrs	r5, r1
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e24:	fb07 3011 	mls	r0, r7, r1, r3
 8000e28:	0c2b      	lsrs	r3, r5, #16
 8000e2a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e2e:	fb01 f00e 	mul.w	r0, r1, lr
 8000e32:	4298      	cmp	r0, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	4298      	cmp	r0, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3902      	subs	r1, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a1b      	subs	r3, r3, r0
 8000e4e:	b2ad      	uxth	r5, r5
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3310 	mls	r3, r7, r0, r3
 8000e58:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e5c:	fb00 f30e 	mul.w	r3, r0, lr
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0505 	adds.w	r5, ip, r5
 8000e68:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	42ab      	cmp	r3, r5
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3802      	subs	r0, #2
 8000e74:	4465      	add	r5, ip
 8000e76:	1aed      	subs	r5, r5, r3
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	4630      	mov	r0, r6
 8000e82:	e707      	b.n	8000c94 <__udivmoddi4+0xa8>
 8000e84:	4686      	mov	lr, r0
 8000e86:	e6e5      	b.n	8000c54 <__udivmoddi4+0x68>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6fa      	b.n	8000c82 <__udivmoddi4+0x96>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4641      	mov	r1, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4465      	add	r5, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4608      	mov	r0, r1
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f06:	4013      	ands	r3, r2
 8000f08:	660b      	str	r3, [r1, #96]	; 0x60
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr

08000f14 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f1a:	4a24      	ldr	r2, [pc, #144]	; (8000fac <MX_ADC_Init+0x98>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f20:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f24:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f82:	2207      	movs	r2, #7
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f8e:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <MX_ADC_Init+0x94>)
 8000f96:	f002 f9dd 	bl	8003354 <HAL_ADC_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000fa0:	f000 fde8 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000016c 	.word	0x2000016c
 8000fac:	40012400 	.word	0x40012400

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <HAL_ADC_MspInit+0x24>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d103      	bne.n	8000fca <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fc6:	f7ff ff7b 	bl	8000ec0 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_ADC_MspDeInit+0x24>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d103      	bne.n	8000ff2 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fee:	f7ff ff7f 	bl	8000ef0 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40012400 	.word	0x40012400

08001000 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8001004:	4b03      	ldr	r3, [pc, #12]	; (8001014 <SYS_InitMeasurement+0x14>)
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <SYS_InitMeasurement+0x18>)
 8001008:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	2000016c 	.word	0x2000016c
 8001018:	40012400 	.word	0x40012400

0800101c <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800102a:	4813      	ldr	r0, [pc, #76]	; (8001078 <SYS_GetBatteryLevel+0x5c>)
 800102c:	f000 f82a 	bl	8001084 <ADC_ReadChannels>
 8001030:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	80fb      	strh	r3, [r7, #6]
 800103c:	e016      	b.n	800106c <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <SYS_GetBatteryLevel+0x60>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001046:	4293      	cmp	r3, r2
 8001048:	d00b      	beq.n	8001062 <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <SYS_GetBatteryLevel+0x60>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	f640 43e4 	movw	r3, #3300	; 0xce4
 8001054:	fb03 f202 	mul.w	r2, r3, r2
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	80fb      	strh	r3, [r7, #6]
 8001060:	e004      	b.n	800106c <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <SYS_GetBatteryLevel+0x64>)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	fbb2 f3f3 	udiv	r3, r2, r3
 800106a:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 800106c:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	b4002000 	.word	0xb4002000
 800107c:	1fff75aa 	.word	0x1fff75aa
 8001080:	004c08d8 	.word	0x004c08d8

08001084 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 800109c:	f7ff ff3a 	bl	8000f14 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80010a0:	481a      	ldr	r0, [pc, #104]	; (800110c <ADC_ReadChannels+0x88>)
 80010a2:	f002 ff86 	bl	8003fb2 <HAL_ADCEx_Calibration_Start>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80010ac:	f000 fd62 	bl	8001b74 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80010bc:	f107 0308 	add.w	r3, r7, #8
 80010c0:	4619      	mov	r1, r3
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <ADC_ReadChannels+0x88>)
 80010c4:	f002 fc92 	bl	80039ec <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010ce:	f000 fd51 	bl	8001b74 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <ADC_ReadChannels+0x88>)
 80010d4:	f002 fb6e 	bl	80037b4 <HAL_ADC_Start>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010de:	f000 fd49 	bl	8001b74 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010e2:	f04f 31ff 	mov.w	r1, #4294967295
 80010e6:	4809      	ldr	r0, [pc, #36]	; (800110c <ADC_ReadChannels+0x88>)
 80010e8:	f002 fbdc 	bl	80038a4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <ADC_ReadChannels+0x88>)
 80010ee:	f002 fba7 	bl	8003840 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <ADC_ReadChannels+0x88>)
 80010f4:	f002 fc6d 	bl	80039d2 <HAL_ADC_GetValue>
 80010f8:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <ADC_ReadChannels+0x88>)
 80010fc:	f002 fade 	bl	80036bc <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001100:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000016c 	.word	0x2000016c

08001110 <LL_AHB1_GRP1_EnableClock>:
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800111e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4313      	orrs	r3, r2
 8001126:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4013      	ands	r3, r2
 8001132:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001134:	68fb      	ldr	r3, [r7, #12]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001144:	2004      	movs	r0, #4
 8001146:	f7ff ffe3 	bl	8001110 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff ffe0 	bl	8001110 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2102      	movs	r1, #2
 8001154:	200b      	movs	r0, #11
 8001156:	f003 f8d2 	bl	80042fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800115a:	200b      	movs	r0, #11
 800115c:	f003 f8e9 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	200c      	movs	r0, #12
 8001166:	f003 f8ca 	bl	80042fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800116a:	200c      	movs	r0, #12
 800116c:	f003 f8e1 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	203d      	movs	r0, #61	; 0x3d
 8001176:	f003 f8c2 	bl	80042fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 800117a:	203d      	movs	r0, #61	; 0x3d
 800117c:	f003 f8d9 	bl	8004332 <HAL_NVIC_EnableIRQ>

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}

08001184 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001190:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001194:	d101      	bne.n	800119a <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 800119a:	2300      	movs	r3, #0
#endif
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	58004000 	.word	0x58004000

080011a8 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t page_start_index = PAGE(address);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80011c0:	4b56      	ldr	r3, [pc, #344]	; (800131c <FLASH_IF_Write+0x174>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0299      	lsls	r1, r3, #10
 80011c6:	4b56      	ldr	r3, [pc, #344]	; (8001320 <FLASH_IF_Write+0x178>)
 80011c8:	400b      	ands	r3, r1
 80011ca:	fbb2 f1f3 	udiv	r1, r2, r3
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	0adb      	lsrs	r3, r3, #11
 80011d6:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80011e2:	3b01      	subs	r3, #1
 80011e4:	4a4d      	ldr	r2, [pc, #308]	; (800131c <FLASH_IF_Write+0x174>)
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	0291      	lsls	r1, r2, #10
 80011ea:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <FLASH_IF_Write+0x178>)
 80011ec:	400a      	ands	r2, r1
 80011ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80011f2:	fb01 f202 	mul.w	r2, r1, r2
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	0adb      	lsrs	r3, r3, #11
 80011fa:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t curr_dest_addr = address;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <FLASH_IF_Write+0x7a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	2b00      	cmp	r3, #0
 8001216:	d104      	bne.n	8001222 <FLASH_IF_Write+0x7a>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 8001222:	f06f 0304 	mvn.w	r3, #4
 8001226:	e074      	b.n	8001312 <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001228:	4b3e      	ldr	r3, [pc, #248]	; (8001324 <FLASH_IF_Write+0x17c>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	da02      	bge.n	8001236 <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 8001230:	f06f 0303 	mvn.w	r3, #3
 8001234:	e06d      	b.n	8001312 <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	429a      	cmp	r2, r3
 800123c:	d005      	beq.n	800124a <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001244:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	e05b      	b.n	8001308 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f8f8 	bl	800144a <FLASH_IF_IsEmpty>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d037      	beq.n	80012d0 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 8001266:	f06f 0304 	mvn.w	r3, #4
 800126a:	e052      	b.n	8001312 <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001272:	02db      	lsls	r3, r3, #11
 8001274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001278:	4619      	mov	r1, r3
 800127a:	6838      	ldr	r0, [r7, #0]
 800127c:	f019 ff74 	bl	801b168 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	4413      	add	r3, r2
 800128a:	6a39      	ldr	r1, [r7, #32]
 800128c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800128e:	b292      	uxth	r2, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f019 ff69 	bl	801b168 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 8001296:	2200      	movs	r2, #0
 8001298:	2101      	movs	r1, #1
 800129a:	69f8      	ldr	r0, [r7, #28]
 800129c:	f000 f865 	bl	800136a <FLASH_IF_EraseByPages>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 80012a6:	f06f 0301 	mvn.w	r3, #1
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80012ac:	e030      	b.n	8001310 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80012b4:	02db      	lsls	r3, r3, #11
 80012b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 f88a 	bl	80013d6 <FLASH_IF_Write_Buffer>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d010      	beq.n	80012ea <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 80012c8:	f06f 0302 	mvn.w	r3, #2
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
          break; /* exit for loop */
 80012ce:	e01f      	b.n	8001310 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012d4:	4619      	mov	r1, r3
 80012d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012d8:	f000 f87d 	bl	80013d6 <FLASH_IF_Write_Buffer>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 80012e2:	f06f 0302 	mvn.w	r3, #2
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break; /* exit for loop */
 80012e8:	e012      	b.n	8001310 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	4413      	add	r3, r2
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    curr_src_addr += curr_size;
 80012f2:	6a3a      	ldr	r2, [r7, #32]
 80012f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f6:	4413      	add	r3, r2
 80012f8:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	429a      	cmp	r2, r3
 800130e:	d99f      	bls.n	8001250 <FLASH_IF_Write+0xa8>
  }

  return status;
 8001310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 8001312:	4618      	mov	r0, r3
 8001314:	3730      	adds	r7, #48	; 0x30
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	1fff75e0 	.word	0x1fff75e0
 8001320:	03fffc00 	.word	0x03fffc00
 8001324:	58004000 	.word	0x58004000

08001328 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 8001334:	e00b      	b.n	800134e <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 8001336:	bf00      	nop
 8001338:	f7ff ff24 	bl	8001184 <LL_FLASH_IsActiveFlag_OperationSuspended>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1fa      	bne.n	8001338 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 8001342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001346:	68f9      	ldr	r1, [r7, #12]
 8001348:	2001      	movs	r0, #1
 800134a:	f003 fc8b 	bl	8004c64 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001358:	4299      	cmp	r1, r3
 800135a:	bf08      	it	eq
 800135c:	4290      	cmpeq	r0, r2
 800135e:	d1ea      	bne.n	8001336 <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001360:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b08a      	sub	sp, #40	; 0x28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	460b      	mov	r3, r1
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001380:	897b      	ldrh	r3, [r7, #10]
 8001382:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fe06 	bl	8004fa0 <HAL_FLASHEx_Erase_IT>
 8001394:	4603      	mov	r3, r0
 8001396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800139a:	e00a      	b.n	80013b2 <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 800139c:	f107 0214 	add.w	r2, r7, #20
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fda2 	bl	8004ef0 <HAL_FLASHEx_Erase>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 80013b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d008      	beq.n	80013cc <FLASH_IF_EraseByPages+0x62>
 80013ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d101      	bne.n	80013c6 <FLASH_IF_EraseByPages+0x5c>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e003      	b.n	80013ce <FLASH_IF_EraseByPages+0x64>
 80013c6:	f06f 0301 	mvn.w	r3, #1
 80013ca:	e000      	b.n	80013ce <FLASH_IF_EraseByPages+0x64>
 80013cc:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b08a      	sub	sp, #40	; 0x28
 80013da:	af00      	add	r7, sp, #0
 80013dc:	60f8      	str	r0, [r7, #12]
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
 80013ee:	e020      	b.n	8001432 <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2208      	movs	r2, #8
 80013f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f019 feb5 	bl	801b168 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001406:	bf08      	it	eq
 8001408:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800140c:	d005      	beq.n	800141a <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 800140e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff ff88 	bl	8001328 <FLASH_IF_Write64>
 8001418:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3308      	adds	r3, #8
 800141e:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	3308      	adds	r3, #8
 8001424:	627b      	str	r3, [r7, #36]	; 0x24

    if (status != FLASH_OK)
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d108      	bne.n	800143e <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	08db      	lsrs	r3, r3, #3
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	429a      	cmp	r2, r3
 800143a:	d3d9      	bcc.n	80013f0 <FLASH_IF_Write_Buffer+0x1a>
 800143c:	e000      	b.n	8001440 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 800143e:	bf00      	nop
    }
  }

  return status;
 8001440:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 8001442:	4618      	mov	r0, r3
 8001444:	3728      	adds	r7, #40	; 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 800144a:	b480      	push	{r7}
 800144c:	b085      	sub	sp, #20
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001454:	e00a      	b.n	800146c <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d001      	beq.n	8001466 <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 8001462:	2301      	movs	r3, #1
 8001464:	e039      	b.n	80014da <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ef      	bne.n	8001456 <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	e010      	b.n	80014a2 <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f103 0208 	add.w	r2, r3, #8
 8001486:	60fa      	str	r2, [r7, #12]
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	bf08      	it	eq
 8001492:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001496:	d001      	beq.n	800149c <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001498:	2301      	movs	r3, #1
 800149a:	e01e      	b.n	80014da <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	3301      	adds	r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	08db      	lsrs	r3, r3, #3
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d3e9      	bcc.n	8001480 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	607b      	str	r3, [r7, #4]
  while (size != 0)
 80014ba:	e00a      	b.n	80014d2 <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	d001      	beq.n	80014cc <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e006      	b.n	80014da <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	603b      	str	r3, [r7, #0]
  while (size != 0)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d1f1      	bne.n	80014bc <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 80014d8:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <LL_AHB2_GRP1_EnableClock>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	2004      	movs	r0, #4
 800152a:	f7ff ffdb 	bl	80014e4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2002      	movs	r0, #2
 8001530:	f7ff ffd8 	bl	80014e4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff ffd5 	bl	80014e4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001540:	4829      	ldr	r0, [pc, #164]	; (80015e8 <MX_GPIO_Init+0xd4>)
 8001542:	f004 f81f 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	2120      	movs	r1, #32
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <MX_GPIO_Init+0xd4>)
 800154c:	f004 f81a 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|GPIO_PIN_9|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f240 2121 	movw	r1, #545	; 0x221
 8001556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155a:	f004 f813 	bl	8005584 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 800155e:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001562:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	481c      	ldr	r0, [pc, #112]	; (80015e8 <MX_GPIO_Init+0xd4>)
 8001576:	f003 fdd7 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL2_Pin;
 800157a:	2321      	movs	r3, #33	; 0x21
 800157c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	4619      	mov	r1, r3
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f003 fdc9 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 8001596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800159c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4619      	mov	r1, r3
 80015aa:	480f      	ldr	r0, [pc, #60]	; (80015e8 <MX_GPIO_Init+0xd4>)
 80015ac:	f003 fdbc 	bl	8005128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4619      	mov	r1, r3
 80015c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ca:	f003 fdad 	bl	8005128 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2029      	movs	r0, #41	; 0x29
 80015d4:	f002 fe93 	bl	80042fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015d8:	2029      	movs	r0, #41	; 0x29
 80015da:	f002 feaa 	bl	8004332 <HAL_NVIC_EnableIRQ>

}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	48000400 	.word	0x48000400

080015ec <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015fc:	f023 0218 	bic.w	r2, r3, #24
 8001600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
	...

08001618 <IRDA_Receive>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t IRDA_Receive(IRDA_HandleTypeDef hirda) {
 8001618:	b084      	sub	sp, #16
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	f107 0c10 	add.w	ip, r7, #16
 8001624:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t reception[1];

	// Wait for 10 ms to see if anything else has been sent
	switch (HAL_IRDA_Receive(&hirda, reception, sizeof(reception), 10)) {
 8001628:	1d39      	adds	r1, r7, #4
 800162a:	230a      	movs	r3, #10
 800162c:	2201      	movs	r2, #1
 800162e:	f107 0010 	add.w	r0, r7, #16
 8001632:	f004 f8c4 	bl	80057be <HAL_IRDA_Receive>
 8001636:	4603      	mov	r3, r0
 8001638:	2b03      	cmp	r3, #3
 800163a:	d81c      	bhi.n	8001676 <IRDA_Receive+0x5e>
 800163c:	a201      	add	r2, pc, #4	; (adr r2, 8001644 <IRDA_Receive+0x2c>)
 800163e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001642:	bf00      	nop
 8001644:	08001655 	.word	0x08001655
 8001648:	08001677 	.word	0x08001677
 800164c:	0800166b 	.word	0x0800166b
 8001650:	08001673 	.word	0x08001673
		case HAL_OK: {
			rxBuffer[rxPointer++] = reception[0];
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <IRDA_Receive+0x70>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	b2d1      	uxtb	r1, r2
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <IRDA_Receive+0x70>)
 800165e:	7011      	strb	r1, [r2, #0]
 8001660:	461a      	mov	r2, r3
 8001662:	7939      	ldrb	r1, [r7, #4]
 8001664:	4b09      	ldr	r3, [pc, #36]	; (800168c <IRDA_Receive+0x74>)
 8001666:	5499      	strb	r1, [r3, r2]
			break;
 8001668:	e005      	b.n	8001676 <IRDA_Receive+0x5e>
		};
		case HAL_BUSY: {
			HAL_Delay(5);
 800166a:	2005      	movs	r0, #5
 800166c:	f000 fda0 	bl	80021b0 <HAL_Delay>
			break;
 8001670:	e001      	b.n	8001676 <IRDA_Receive+0x5e>
		case HAL_ERROR: {
			break;
		};
		// Reception is complete
		case HAL_TIMEOUT: {
			return 1;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <IRDA_Receive+0x60>
		};
	}

	return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001682:	b004      	add	sp, #16
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	200001d0 	.word	0x200001d0
 800168c:	200001d4 	.word	0x200001d4

08001690 <IRDA_Transmit_Wake_Up>:

// Send "A\r"
void IRDA_Transmit_Wake_Up(void) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
	uint8_t messageSend[] = "A\r";
 8001696:	4a09      	ldr	r2, [pc, #36]	; (80016bc <IRDA_Transmit_Wake_Up+0x2c>)
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	4611      	mov	r1, r2
 800169e:	8019      	strh	r1, [r3, #0]
 80016a0:	3302      	adds	r3, #2
 80016a2:	0c12      	lsrs	r2, r2, #16
 80016a4:	701a      	strb	r2, [r3, #0]

	HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 80016a6:	1d39      	adds	r1, r7, #4
 80016a8:	2332      	movs	r3, #50	; 0x32
 80016aa:	2202      	movs	r2, #2
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <IRDA_Transmit_Wake_Up+0x30>)
 80016ae:	f003 fffa 	bl	80056a6 <HAL_IRDA_Transmit>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0801c6d8 	.word	0x0801c6d8
 80016c0:	20000338 	.word	0x20000338

080016c4 <IRDA_checksum>:

uint16_t IRDA_checksum(uint8_t receiveString[], uint8_t size) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70fb      	strb	r3, [r7, #3]
	//receiveString
	// Get checksum from message (convert from ASCII to binary)¨
	uint16_t checksum = (((uint16_t) receiveString[size - 7]) - 0x0030) * 1000;
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	3b07      	subs	r3, #7
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	3b30      	subs	r3, #48	; 0x30
 80016dc:	b29b      	uxth	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	0152      	lsls	r2, r2, #5
 80016e2:	1ad2      	subs	r2, r2, r3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	827b      	strh	r3, [r7, #18]
	checksum += (((uint16_t) receiveString[size - 6]) - 0x0030) * 100;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	3b06      	subs	r3, #6
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3b30      	subs	r3, #48	; 0x30
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	0091      	lsls	r1, r2, #2
 8001704:	461a      	mov	r2, r3
 8001706:	460b      	mov	r3, r1
 8001708:	4413      	add	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	b29a      	uxth	r2, r3
 800170e:	8a7b      	ldrh	r3, [r7, #18]
 8001710:	4413      	add	r3, r2
 8001712:	827b      	strh	r3, [r7, #18]
	checksum += (((uint16_t) receiveString[size - 5]) - 0x0030) * 10;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	3b05      	subs	r3, #5
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3b30      	subs	r3, #48	; 0x30
 8001720:	b29b      	uxth	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	4413      	add	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	8a7b      	ldrh	r3, [r7, #18]
 800172e:	4413      	add	r3, r2
 8001730:	827b      	strh	r3, [r7, #18]
	checksum += ((uint16_t) receiveString[size - 4]) - 0x0030;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	3b04      	subs	r3, #4
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b29a      	uxth	r2, r3
 800173e:	8a7b      	ldrh	r3, [r7, #18]
 8001740:	4413      	add	r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	3b30      	subs	r3, #48	; 0x30
 8001746:	827b      	strh	r3, [r7, #18]

	uint16_t checksumCalculated = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	82fb      	strh	r3, [r7, #22]

	for (uint8_t i = 0; i < size - 10; i++) {
 800174c:	2300      	movs	r3, #0
 800174e:	757b      	strb	r3, [r7, #21]
 8001750:	e00a      	b.n	8001768 <IRDA_checksum+0xa4>
		checksumCalculated += receiveString[i];
 8001752:	7d7b      	ldrb	r3, [r7, #21]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	8afb      	ldrh	r3, [r7, #22]
 800175e:	4413      	add	r3, r2
 8001760:	82fb      	strh	r3, [r7, #22]
	for (uint8_t i = 0; i < size - 10; i++) {
 8001762:	7d7b      	ldrb	r3, [r7, #21]
 8001764:	3301      	adds	r3, #1
 8001766:	757b      	strb	r3, [r7, #21]
 8001768:	7d7a      	ldrb	r2, [r7, #21]
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	3b0a      	subs	r3, #10
 800176e:	429a      	cmp	r2, r3
 8001770:	dbef      	blt.n	8001752 <IRDA_checksum+0x8e>
	}

	checksumCalculated += 8 * 0x0020 + receiveString[size - 2];
 8001772:	78fb      	ldrb	r3, [r7, #3]
 8001774:	3b02      	subs	r3, #2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b29a      	uxth	r2, r3
 800177e:	8afb      	ldrh	r3, [r7, #22]
 8001780:	4413      	add	r3, r2
 8001782:	b29b      	uxth	r3, r3
 8001784:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001788:	82fb      	strh	r3, [r7, #22]

	uint8_t message1[] = {checksumCalculated >> 8, checksumCalculated};
 800178a:	8afb      	ldrh	r3, [r7, #22]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b29b      	uxth	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	743b      	strb	r3, [r7, #16]
 8001794:	8afb      	ldrh	r3, [r7, #22]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	747b      	strb	r3, [r7, #17]
	uint8_t message2[] = {checksum >> 8, checksum};
 800179a:	8a7b      	ldrh	r3, [r7, #18]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	b29b      	uxth	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	733b      	strb	r3, [r7, #12]
 80017a4:	8a7b      	ldrh	r3, [r7, #18]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	737b      	strb	r3, [r7, #13]

	HAL_IRDA_Transmit(&hirda1, message1, 2, 50);
 80017aa:	f107 0110 	add.w	r1, r7, #16
 80017ae:	2332      	movs	r3, #50	; 0x32
 80017b0:	2202      	movs	r2, #2
 80017b2:	480b      	ldr	r0, [pc, #44]	; (80017e0 <IRDA_checksum+0x11c>)
 80017b4:	f003 ff77 	bl	80056a6 <HAL_IRDA_Transmit>
	HAL_IRDA_Transmit(&hirda1, message2, 2, 50);
 80017b8:	f107 010c 	add.w	r1, r7, #12
 80017bc:	2332      	movs	r3, #50	; 0x32
 80017be:	2202      	movs	r2, #2
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <IRDA_checksum+0x11c>)
 80017c2:	f003 ff70 	bl	80056a6 <HAL_IRDA_Transmit>

	return checksum << 8 | checksumCalculated;
 80017c6:	8a7b      	ldrh	r3, [r7, #18]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b21b      	sxth	r3, r3
 80017d4:	b29b      	uxth	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000338 	.word	0x20000338

080017e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e8:	b0a7      	sub	sp, #156	; 0x9c
 80017ea:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f001 fbe0 	bl	8002fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f966 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f7ff fe8e 	bl	8001514 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80017f8:	f009 f964 	bl	800aac4 <MX_LoRaWAN_Init>
  /* USER CODE BEGIN 2 */
	MX_USART2_UART_Init();
 80017fc:	f001 f866 	bl	80028cc <MX_USART2_UART_Init>
	MX_USART1_IRDA_Init();
 8001800:	f001 f83a 	bl	8002878 <MX_USART1_IRDA_Init>

	UTIL_TIMER_Create(&wakeUpSendTimer, 2000, UTIL_TIMER_PERIODIC, IRDA_Transmit_Wake_Up, NULL);
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4b97      	ldr	r3, [pc, #604]	; (8001a68 <main+0x284>)
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001810:	4896      	ldr	r0, [pc, #600]	; (8001a6c <main+0x288>)
 8001812:	f01a f943 	bl	801ba9c <UTIL_TIMER_Create>
	UTIL_TIMER_Start(&wakeUpSendTimer);
 8001816:	4895      	ldr	r0, [pc, #596]	; (8001a6c <main+0x288>)
 8001818:	f01a f976 	bl	801bb08 <UTIL_TIMER_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t returnCode = -1;
 800181c:	23ff      	movs	r3, #255	; 0xff
 800181e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t message = -1;
 8001822:	23ff      	movs	r3, #255	; 0xff
 8001824:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	// Start waking up the sensor
	message = MESSAGE_WAKE_UP;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	while (1) {
		returnCode = IRDA_Receive(hirda1);
 800182e:	4e90      	ldr	r6, [pc, #576]	; (8001a70 <main+0x28c>)
 8001830:	466d      	mov	r5, sp
 8001832:	f106 0410 	add.w	r4, r6, #16
 8001836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001846:	e885 0003 	stmia.w	r5, {r0, r1}
 800184a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800184e:	f7ff fee3 	bl	8001618 <IRDA_Receive>
 8001852:	4603      	mov	r3, r0
 8001854:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		// Reception is complete
		if (returnCode) {
 8001858:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0e6      	beq.n	800182e <main+0x4a>
 8001860:	466b      	mov	r3, sp
 8001862:	461c      	mov	r4, r3
			// Get received content in string form, so that it can be compared
			char receiveString[rxPointer];
 8001864:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <main+0x290>)
 8001866:	7819      	ldrb	r1, [r3, #0]
 8001868:	460b      	mov	r3, r1
 800186a:	3b01      	subs	r3, #1
 800186c:	65bb      	str	r3, [r7, #88]	; 0x58
 800186e:	b2cb      	uxtb	r3, r1
 8001870:	2200      	movs	r2, #0
 8001872:	4698      	mov	r8, r3
 8001874:	4691      	mov	r9, r2
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001882:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001886:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800188a:	b2cb      	uxtb	r3, r1
 800188c:	2200      	movs	r2, #0
 800188e:	469a      	mov	sl, r3
 8001890:	4693      	mov	fp, r2
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800189e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80018a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80018a6:	460b      	mov	r3, r1
 80018a8:	3307      	adds	r3, #7
 80018aa:	08db      	lsrs	r3, r3, #3
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	ebad 0d03 	sub.w	sp, sp, r3
 80018b2:	ab0e      	add	r3, sp, #56	; 0x38
 80018b4:	3300      	adds	r3, #0
 80018b6:	657b      	str	r3, [r7, #84]	; 0x54

			strncpy(receiveString, rxBuffer, rxPointer);
 80018b8:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <main+0x290>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	496e      	ldr	r1, [pc, #440]	; (8001a78 <main+0x294>)
 80018c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018c2:	f01a fe51 	bl	801c568 <strncpy>

			// If message contains checksum
			if (strstr(receiveString, "K23") != NULL) {
 80018c6:	496d      	ldr	r1, [pc, #436]	; (8001a7c <main+0x298>)
 80018c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018ca:	f01a fe60 	bl	801c58e <strstr>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d007      	beq.n	80018e4 <main+0x100>
				uint32_t result = IRDA_checksum(receiveString, rxPointer);
 80018d4:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <main+0x290>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018dc:	f7ff fef2 	bl	80016c4 <IRDA_checksum>
 80018e0:	4603      	mov	r3, r0
 80018e2:	653b      	str	r3, [r7, #80]	; 0x50
				 * ADD CODE FOR CHECKSUM
				 */
			}

			// Once woken up, sensor will ask "what function" with "08?\r"
			if (!strcmp(receiveString, "?08\r")) {
 80018e4:	4966      	ldr	r1, [pc, #408]	; (8001a80 <main+0x29c>)
 80018e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018e8:	f7fe fc46 	bl	8000178 <strcmp>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d116      	bne.n	8001920 <main+0x13c>
				// Stop timer
				UTIL_TIMER_Stop(&wakeUpSendTimer);
 80018f2:	485e      	ldr	r0, [pc, #376]	; (8001a6c <main+0x288>)
 80018f4:	f01a f976 	bl	801bbe4 <UTIL_TIMER_Stop>

				// Send request
				uint8_t messageSend[] = "S\r";
 80018f8:	4a62      	ldr	r2, [pc, #392]	; (8001a84 <main+0x2a0>)
 80018fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	4611      	mov	r1, r2
 8001902:	8019      	strh	r1, [r3, #0]
 8001904:	3302      	adds	r3, #2
 8001906:	0c12      	lsrs	r2, r2, #16
 8001908:	701a      	strb	r2, [r3, #0]

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 800190a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800190e:	2332      	movs	r3, #50	; 0x32
 8001910:	2202      	movs	r2, #2
 8001912:	4857      	ldr	r0, [pc, #348]	; (8001a70 <main+0x28c>)
 8001914:	f003 fec7 	bl	80056a6 <HAL_IRDA_Transmit>

				message = MESSAGE_START;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800191e:	e09e      	b.n	8001a5e <main+0x27a>
			} else if (!strcmp(receiveString, "*\r")) {
 8001920:	4959      	ldr	r1, [pc, #356]	; (8001a88 <main+0x2a4>)
 8001922:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001924:	f7fe fc28 	bl	8000178 <strcmp>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d112      	bne.n	8001954 <main+0x170>
				// Acknowledge that there is a send request ("S")
				if (message == MESSAGE_START) {
 800192e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001932:	2b01      	cmp	r3, #1
 8001934:	f040 8093 	bne.w	8001a5e <main+0x27a>
					// Send first register value request
					uint8_t messageSend[] = "F0017G0010\r";
 8001938:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <main+0x2a8>)
 800193a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800193e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001940:	e883 0007 	stmia.w	r3, {r0, r1, r2}

					HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 8001944:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001948:	2332      	movs	r3, #50	; 0x32
 800194a:	220b      	movs	r2, #11
 800194c:	4848      	ldr	r0, [pc, #288]	; (8001a70 <main+0x28c>)
 800194e:	f003 feaa 	bl	80056a6 <HAL_IRDA_Transmit>
 8001952:	e084      	b.n	8001a5e <main+0x27a>

				// Acknowledge the end of transmission ("A", Abbruch)
				if (message == MESSAGE_END) {
					// Done, can go back to sleep
				}
			} else if (!strncmp(receiveString, "K85 00170010", 12)) {
 8001954:	220c      	movs	r2, #12
 8001956:	494e      	ldr	r1, [pc, #312]	; (8001a90 <main+0x2ac>)
 8001958:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800195a:	f01a fdf1 	bl	801c540 <strncmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10d      	bne.n	8001980 <main+0x19c>
				// Register value requests
				uint8_t messageSend[] = "F0017G0020\r";
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <main+0x2b0>)
 8001966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800196a:	ca07      	ldmia	r2, {r0, r1, r2}
 800196c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 8001970:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001974:	2332      	movs	r3, #50	; 0x32
 8001976:	220b      	movs	r2, #11
 8001978:	483d      	ldr	r0, [pc, #244]	; (8001a70 <main+0x28c>)
 800197a:	f003 fe94 	bl	80056a6 <HAL_IRDA_Transmit>
 800197e:	e06e      	b.n	8001a5e <main+0x27a>
			} else if (!strncmp(receiveString, "K85 00170020", 12)) {
 8001980:	220c      	movs	r2, #12
 8001982:	4945      	ldr	r1, [pc, #276]	; (8001a98 <main+0x2b4>)
 8001984:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001986:	f01a fddb 	bl	801c540 <strncmp>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d10d      	bne.n	80019ac <main+0x1c8>
				uint8_t messageSend[] = "F0017G0030\r";
 8001990:	4a42      	ldr	r2, [pc, #264]	; (8001a9c <main+0x2b8>)
 8001992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001996:	ca07      	ldmia	r2, {r0, r1, r2}
 8001998:	e883 0007 	stmia.w	r3, {r0, r1, r2}

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 800199c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80019a0:	2332      	movs	r3, #50	; 0x32
 80019a2:	220b      	movs	r2, #11
 80019a4:	4832      	ldr	r0, [pc, #200]	; (8001a70 <main+0x28c>)
 80019a6:	f003 fe7e 	bl	80056a6 <HAL_IRDA_Transmit>
 80019aa:	e058      	b.n	8001a5e <main+0x27a>
			} else if (!strncmp(receiveString, "K85 00170030", 12)) {
 80019ac:	220c      	movs	r2, #12
 80019ae:	493c      	ldr	r1, [pc, #240]	; (8001aa0 <main+0x2bc>)
 80019b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019b2:	f01a fdc5 	bl	801c540 <strncmp>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10d      	bne.n	80019d8 <main+0x1f4>
				uint8_t messageSend[] = "F0017G0035\r";
 80019bc:	4a39      	ldr	r2, [pc, #228]	; (8001aa4 <main+0x2c0>)
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 80019c8:	f107 011c 	add.w	r1, r7, #28
 80019cc:	2332      	movs	r3, #50	; 0x32
 80019ce:	220b      	movs	r2, #11
 80019d0:	4827      	ldr	r0, [pc, #156]	; (8001a70 <main+0x28c>)
 80019d2:	f003 fe68 	bl	80056a6 <HAL_IRDA_Transmit>
 80019d6:	e042      	b.n	8001a5e <main+0x27a>
			} else if (!strncmp(receiveString, "K85 00170035", 12)) {
 80019d8:	220c      	movs	r2, #12
 80019da:	4933      	ldr	r1, [pc, #204]	; (8001aa8 <main+0x2c4>)
 80019dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80019de:	f01a fdaf 	bl	801c540 <strncmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10d      	bne.n	8001a04 <main+0x220>
				uint8_t messageSend[] = "F0017G0036\r";
 80019e8:	4a30      	ldr	r2, [pc, #192]	; (8001aac <main+0x2c8>)
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80019f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 80019f4:	f107 0110 	add.w	r1, r7, #16
 80019f8:	2332      	movs	r3, #50	; 0x32
 80019fa:	220b      	movs	r2, #11
 80019fc:	481c      	ldr	r0, [pc, #112]	; (8001a70 <main+0x28c>)
 80019fe:	f003 fe52 	bl	80056a6 <HAL_IRDA_Transmit>
 8001a02:	e02c      	b.n	8001a5e <main+0x27a>
			} else if (!strncmp(receiveString, "K85 00170036", 12)) {
 8001a04:	220c      	movs	r2, #12
 8001a06:	492a      	ldr	r1, [pc, #168]	; (8001ab0 <main+0x2cc>)
 8001a08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a0a:	f01a fd99 	bl	801c540 <strncmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10e      	bne.n	8001a32 <main+0x24e>
				message = MESSAGE_END;
 8001a14:	2302      	movs	r3, #2
 8001a16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

				uint8_t messageSend[] = "F0017G0090\r";
 8001a1a:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <main+0x2d0>)
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a20:	e883 0007 	stmia.w	r3, {r0, r1, r2}

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 8001a24:	1d39      	adds	r1, r7, #4
 8001a26:	2332      	movs	r3, #50	; 0x32
 8001a28:	220b      	movs	r2, #11
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <main+0x28c>)
 8001a2c:	f003 fe3b 	bl	80056a6 <HAL_IRDA_Transmit>
 8001a30:	e015      	b.n	8001a5e <main+0x27a>
			} else if (!strncmp(receiveString, "K85 00170090", 12)) {
 8001a32:	220c      	movs	r2, #12
 8001a34:	4920      	ldr	r1, [pc, #128]	; (8001ab8 <main+0x2d4>)
 8001a36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001a38:	f01a fd82 	bl	801c540 <strncmp>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10d      	bne.n	8001a5e <main+0x27a>
				// Last register value request
				uint8_t messageSend[] = "A\r";
 8001a42:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <main+0x2d8>)
 8001a44:	463b      	mov	r3, r7
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	8019      	strh	r1, [r3, #0]
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	0c12      	lsrs	r2, r2, #16
 8001a50:	701a      	strb	r2, [r3, #0]

				HAL_IRDA_Transmit(&hirda1, messageSend, sizeof(messageSend) - 1, 50);
 8001a52:	4639      	mov	r1, r7
 8001a54:	2332      	movs	r3, #50	; 0x32
 8001a56:	2202      	movs	r2, #2
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <main+0x28c>)
 8001a5a:	f003 fe24 	bl	80056a6 <HAL_IRDA_Transmit>
			/*
			 * CODE LORA - SEND
			 */
			//SendTxData();

			rxPointer = 0;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <main+0x290>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
 8001a64:	46a5      	mov	sp, r4
		returnCode = IRDA_Receive(hirda1);
 8001a66:	e6e2      	b.n	800182e <main+0x4a>
 8001a68:	08001691 	.word	0x08001691
 8001a6c:	200002d4 	.word	0x200002d4
 8001a70:	20000338 	.word	0x20000338
 8001a74:	200001d0 	.word	0x200001d0
 8001a78:	200001d4 	.word	0x200001d4
 8001a7c:	0801c6dc 	.word	0x0801c6dc
 8001a80:	0801c6e0 	.word	0x0801c6e0
 8001a84:	0801c74c 	.word	0x0801c74c
 8001a88:	0801c6e8 	.word	0x0801c6e8
 8001a8c:	0801c750 	.word	0x0801c750
 8001a90:	0801c6ec 	.word	0x0801c6ec
 8001a94:	0801c75c 	.word	0x0801c75c
 8001a98:	0801c6fc 	.word	0x0801c6fc
 8001a9c:	0801c768 	.word	0x0801c768
 8001aa0:	0801c70c 	.word	0x0801c70c
 8001aa4:	0801c774 	.word	0x0801c774
 8001aa8:	0801c71c 	.word	0x0801c71c
 8001aac:	0801c780 	.word	0x0801c780
 8001ab0:	0801c72c 	.word	0x0801c72c
 8001ab4:	0801c78c 	.word	0x0801c78c
 8001ab8:	0801c73c 	.word	0x0801c73c
 8001abc:	0801c6d8 	.word	0x0801c6d8

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b09a      	sub	sp, #104	; 0x68
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	2248      	movs	r2, #72	; 0x48
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f01a fd2e 	bl	801c530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad4:	f107 0308 	add.w	r3, r7, #8
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
 8001ae4:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ae6:	f004 fb2b 	bl	8006140 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fd7e 	bl	80015ec <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <SystemClock_Config+0xb0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <SystemClock_Config+0xb0>)
 8001afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <SystemClock_Config+0xb0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b0c:	2324      	movs	r3, #36	; 0x24
 8001b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b10:	2381      	movs	r3, #129	; 0x81
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b14:	2301      	movs	r3, #1
 8001b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001b1c:	23b0      	movs	r3, #176	; 0xb0
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b24:	f107 0320 	add.w	r3, r7, #32
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fdb3 	bl	8006694 <HAL_RCC_OscConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001b34:	f000 f81e 	bl	8001b74 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001b38:	234f      	movs	r3, #79	; 0x4f
 8001b3a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	2102      	movs	r1, #2
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 f938 	bl	8006dcc <HAL_RCC_ClockConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b62:	f000 f807 	bl	8001b74 <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3768      	adds	r7, #104	; 0x68
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	58000400 	.word	0x58000400

08001b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b7c:	e7fe      	b.n	8001b7c <Error_Handler+0x8>

08001b7e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <LL_APB1_GRP1_EnableClock>:
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b085      	sub	sp, #20
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001baa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
	...

08001bd0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	222c      	movs	r2, #44	; 0x2c
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f01a fca7 	bl	801c530 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <MX_RTC_Init+0xa0>)
 8001be6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001bea:	221f      	movs	r2, #31
 8001bec:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001c02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c06:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c16:	4815      	ldr	r0, [pc, #84]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001c18:	f005 fd94 	bl	8007744 <HAL_RTC_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001c22:	f7ff ffa7 	bl	8001b74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001c26:	4811      	ldr	r0, [pc, #68]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001c28:	f006 f882 	bl	8007d30 <HAL_RTCEx_SetSSRU_IT>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c32:	f7ff ff9f 	bl	8001b74 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001c42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001c46:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2200      	movs	r2, #0
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <MX_RTC_Init+0x9c>)
 8001c56:	f005 fdef 	bl	8007838 <HAL_RTC_SetAlarm_IT>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001c60:	f7ff ff88 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200002ec 	.word	0x200002ec
 8001c70:	40002800 	.word	0x40002800

08001c74 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b090      	sub	sp, #64	; 0x40
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	2238      	movs	r2, #56	; 0x38
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f01a fc53 	bl	801c530 <memset>
  if(rtcHandle->Instance==RTC)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a16      	ldr	r2, [pc, #88]	; (8001ce8 <HAL_RTC_MspInit+0x74>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d125      	bne.n	8001ce0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c98:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ca0:	f107 0308 	add.w	r3, r7, #8
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f005 fc33 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001cb0:	f7ff ff60 	bl	8001b74 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cb4:	f7ff ff63 	bl	8001b7e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cbc:	f7ff ff6f 	bl	8001b9e <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f002 fb1a 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f002 fb31 	bl	8004332 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	202a      	movs	r0, #42	; 0x2a
 8001cd6:	f002 fb12 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001cda:	202a      	movs	r0, #42	; 0x2a
 8001cdc:	f002 fb29 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3740      	adds	r7, #64	; 0x40
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40002800 	.word	0x40002800

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <NMI_Handler+0x4>

08001cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <HardFault_Handler+0x4>

08001d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <MemManage_Handler+0x4>

08001d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr

08001d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001d4e:	f006 f82b 	bl	8007da8 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200002ec 	.word	0x200002ec

08001d5c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <DMA1_Channel1_IRQHandler+0x10>)
 8001d62:	f002 fd7d 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000410 	.word	0x20000410

08001d70 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <DMA1_Channel2_IRQHandler+0x10>)
 8001d76:	f002 fd73 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000470 	.word	0x20000470

08001d84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_IRDA_IRQHandler(&hirda1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <USART1_IRQHandler+0x10>)
 8001d8a:	f003 fdd7 	bl	800593c <HAL_IRDA_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000338 	.word	0x20000338

08001d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <USART2_IRQHandler+0x10>)
 8001d9e:	f006 fe63 	bl	8008a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000380 	.word	0x20000380

08001dac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001db0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001db4:	f003 fbfe 	bl	80055b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001dc0:	4802      	ldr	r0, [pc, #8]	; (8001dcc <RTC_Alarm_IRQHandler+0x10>)
 8001dc2:	f005 fea1 	bl	8007b08 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200002ec 	.word	0x200002ec

08001dd0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001dd4:	4802      	ldr	r0, [pc, #8]	; (8001de0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001dd6:	f006 fb4f 	bl	8008478 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000324 	.word	0x20000324

08001de4 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_tx);
 8001de8:	4802      	ldr	r0, [pc, #8]	; (8001df4 <DMAMUX1_OVR_IRQHandler+0x10>)
 8001dea:	f002 fee9 	bl	8004bc0 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000410 	.word	0x20000410

08001df8 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e04:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr

08001e28 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_SUBGHZ_Init+0x20>)
 8001e2e:	2208      	movs	r2, #8
 8001e30:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_SUBGHZ_Init+0x20>)
 8001e34:	f006 f8a4 	bl	8007f80 <HAL_SUBGHZ_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001e3e:	f7ff fe99 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000324 	.word	0x20000324

08001e4c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7ff ffcf 	bl	8001df8 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2032      	movs	r0, #50	; 0x32
 8001e60:	f002 fa4d 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001e64:	2032      	movs	r0, #50	; 0x32
 8001e66:	f002 fa64 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <LL_FLASH_GetUDN+0x10>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	1fff7580 	.word	0x1fff7580

08001eac <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <LL_FLASH_GetDeviceID+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b2db      	uxtb	r3, r3
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bc80      	pop	{r7}
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	1fff7584 	.word	0x1fff7584

08001ec4 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <LL_FLASH_GetSTCompanyID+0x14>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0a1b      	lsrs	r3, r3, #8
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	1fff7584 	.word	0x1fff7584

08001edc <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff ffc6 	bl	8001e72 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001ee6:	f019 fdc9 	bl	801ba7c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <SystemApp_Init+0x48>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001ef0:	f000 f982 	bl	80021f8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001ef4:	f01a f852 	bl	801bf9c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ef8:	480b      	ldr	r0, [pc, #44]	; (8001f28 <SystemApp_Init+0x4c>)
 8001efa:	f01a f8fd 	bl	801c0f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <SystemApp_Init+0x50>)
 8001f00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f04:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001f06:	2002      	movs	r0, #2
 8001f08:	f01a f904 	bl	801c114 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001f0c:	f7ff f878 	bl	8001000 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001f10:	f000 f9f8 	bl	8002304 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001f14:	f019 f8b8 	bl	801b088 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f019 f8f4 	bl	801b108 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000330 	.word	0x20000330
 8001f28:	080020e9 	.word	0x080020e9
 8001f2c:	58004000 	.word	0x58004000

08001f30 <GetBatteryLevel>:

  /* USER CODE END UTIL_SEQ_Idle_2 */
}

uint8_t GetBatteryLevel(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001f3a:	f7ff f86f 	bl	800101c <SYS_GetBatteryLevel>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001f42:	88bb      	ldrh	r3, [r7, #4]
 8001f44:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d902      	bls.n	8001f52 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001f4c:	23fe      	movs	r3, #254	; 0xfe
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	e014      	b.n	8001f7c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001f52:	88bb      	ldrh	r3, [r7, #4]
 8001f54:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001f58:	d202      	bcs.n	8001f60 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	71fb      	strb	r3, [r7, #7]
 8001f5e:	e00d      	b.n	8001f7c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 8001f66:	461a      	mov	r2, r3
 8001f68:	4613      	mov	r3, r2
 8001f6a:	01db      	lsls	r3, r3, #7
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <GetBatteryLevel+0x58>)
 8001f74:	fba3 2302 	umull	r2, r3, r3, r2
 8001f78:	09db      	lsrs	r3, r3, #7
 8001f7a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	1b4e81b5 	.word	0x1b4e81b5

08001f8c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f000 f989 	bl	80022b0 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe fdc5 	bl	8000b30 <__aeabi_f2iz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001faa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001fc2:	f7ff ff69 	bl	8001e98 <LL_FLASH_GetUDN>
 8001fc6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d138      	bne.n	8002042 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001fd0:	f001 f80e 	bl	8002ff0 <HAL_GetUIDw0>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	f001 f81f 	bl	8003018 <HAL_GetUIDw2>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	4423      	add	r3, r4
 8001fde:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001fe0:	f001 f810 	bl	8003004 <HAL_GetUIDw1>
 8001fe4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	0e1a      	lsrs	r2, r3, #24
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3307      	adds	r3, #7
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	0c1a      	lsrs	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	0a1a      	lsrs	r2, r3, #8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3305      	adds	r3, #5
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3304      	adds	r3, #4
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	b2d2      	uxtb	r2, r2
 8002012:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	0e1a      	lsrs	r2, r3, #24
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3303      	adds	r3, #3
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0c1a      	lsrs	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3302      	adds	r3, #2
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	0a1a      	lsrs	r2, r3, #8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3301      	adds	r3, #1
 8002034:	b2d2      	uxtb	r2, r2
 8002036:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002040:	e031      	b.n	80020a6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3307      	adds	r3, #7
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	0a1a      	lsrs	r2, r3, #8
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3306      	adds	r3, #6
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	0c1a      	lsrs	r2, r3, #16
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3305      	adds	r3, #5
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	0e1a      	lsrs	r2, r3, #24
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3304      	adds	r3, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002070:	f7ff ff1c 	bl	8001eac <LL_FLASH_GetDeviceID>
 8002074:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002080:	f7ff ff20 	bl	8001ec4 <LL_FLASH_GetSTCompanyID>
 8002084:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3302      	adds	r3, #2
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	0a1a      	lsrs	r2, r3, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3301      	adds	r3, #1
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	701a      	strb	r2, [r3, #0]
}
 80020a6:	bf00      	nop
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 80020ae:	b590      	push	{r4, r7, lr}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 80020b8:	f7ff feee 	bl	8001e98 <LL_FLASH_GetUDN>
 80020bc:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d10b      	bne.n	80020de <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80020c6:	f000 ff93 	bl	8002ff0 <HAL_GetUIDw0>
 80020ca:	4604      	mov	r4, r0
 80020cc:	f000 ff9a 	bl	8003004 <HAL_GetUIDw1>
 80020d0:	4603      	mov	r3, r0
 80020d2:	405c      	eors	r4, r3
 80020d4:	f000 ffa0 	bl	8003018 <HAL_GetUIDw2>
 80020d8:	4603      	mov	r3, r0
 80020da:	4063      	eors	r3, r4
 80020dc:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 80020de:	687b      	ldr	r3, [r7, #4]

}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd90      	pop	{r4, r7, pc}

080020e8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af02      	add	r7, sp, #8
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	4618      	mov	r0, r3
 80020f8:	f019 f910 	bl	801b31c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	; (8002124 <TimestampNow+0x3c>)
 8002106:	2110      	movs	r1, #16
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f81d 	bl	8002148 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7fe f83c 	bl	800018c <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0801c798 	.word	0x0801c798

08002128 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800212c:	2101      	movs	r1, #1
 800212e:	2002      	movs	r0, #2
 8002130:	f018 ffba 	bl	801b0a8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800213c:	2100      	movs	r1, #0
 800213e:	2002      	movs	r0, #2
 8002140:	f018 ffb2 	bl	801b0a8 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002148:	b40c      	push	{r2, r3}
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 800215a:	6839      	ldr	r1, [r7, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f019 faad 	bl	801b6c0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002170:	b002      	add	sp, #8
 8002172:	4770      	bx	lr

08002174 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_GetTick+0x24>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 800219a:	f000 f97f 	bl	800249c <TIMER_IF_GetTimerValue>
 800219e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 80021a0:	687b      	ldr	r3, [r7, #4]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000330 	.word	0x20000330

080021b0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f9f5 	bl	80025aa <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <LL_AHB2_GRP1_EnableClock>:
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4313      	orrs	r3, r2
 80021de:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ec:	68fb      	ldr	r3, [r7, #12]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr

080021f8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80021fe:	f000 ff15 	bl	800302c <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8002202:	f000 ff19 	bl	8003038 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8002206:	f000 ff1d 	bl	8003044 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002218:	2301      	movs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff ffcf 	bl	80021c8 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800222a:	2002      	movs	r0, #2
 800222c:	f7ff ffcc 	bl	80021c8 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8002230:	2002      	movs	r0, #2
 8002232:	f7ff ffc9 	bl	80021c8 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8002236:	2002      	movs	r0, #2
 8002238:	f7ff ffc6 	bl	80021c8 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800223c:	2301      	movs	r3, #1
 800223e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	4619      	mov	r1, r3
 8002244:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002248:	f002 ff6e 	bl	8005128 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800224c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002250:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	4619      	mov	r1, r3
 8002256:	4815      	ldr	r0, [pc, #84]	; (80022ac <DBG_Init+0xb4>)
 8002258:	f002 ff66 	bl	8005128 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 800225c:	2308      	movs	r3, #8
 800225e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	4619      	mov	r1, r3
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <DBG_Init+0xb4>)
 8002266:	f002 ff5f 	bl	8005128 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 800226a:	2310      	movs	r3, #16
 800226c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	4619      	mov	r1, r3
 8002272:	480e      	ldr	r0, [pc, #56]	; (80022ac <DBG_Init+0xb4>)
 8002274:	f002 ff58 	bl	8005128 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	2101      	movs	r1, #1
 800227c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002280:	f003 f980 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228a:	4808      	ldr	r0, [pc, #32]	; (80022ac <DBG_Init+0xb4>)
 800228c:	f003 f97a 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002290:	2200      	movs	r2, #0
 8002292:	2108      	movs	r1, #8
 8002294:	4805      	ldr	r0, [pc, #20]	; (80022ac <DBG_Init+0xb4>)
 8002296:	f003 f975 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2110      	movs	r1, #16
 800229e:	4803      	ldr	r0, [pc, #12]	; (80022ac <DBG_Init+0xb4>)
 80022a0:	f003 f970 	bl	8005584 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	48000400 	.word	0x48000400

080022b0 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <EnvSensors_Read+0x40>)
 80022ba:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <EnvSensors_Read+0x44>)
 80022be:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <EnvSensors_Read+0x48>)
 80022c2:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <EnvSensors_Read+0x4c>)
 80022da:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <EnvSensors_Read+0x50>)
 80022e0:	611a      	str	r2, [r3, #16]

  return 0;
 80022e2:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	371c      	adds	r7, #28
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	42480000 	.word	0x42480000
 80022f4:	41900000 	.word	0x41900000
 80022f8:	447a0000 	.word	0x447a0000
 80022fc:	003e090d 	.word	0x003e090d
 8002300:	000503ab 	.word	0x000503ab

08002304 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 800230a:	2300      	movs	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 800230e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002346:	4b14      	ldr	r3, [pc, #80]	; (8002398 <TIMER_IF_Init+0x5c>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f083 0301 	eor.w	r3, r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01b      	beq.n	800238c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002354:	4b11      	ldr	r3, [pc, #68]	; (800239c <TIMER_IF_Init+0x60>)
 8002356:	f04f 32ff 	mov.w	r2, #4294967295
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 800235c:	f7ff fc38 	bl	8001bd0 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002360:	f000 f856 	bl	8002410 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <TIMER_IF_Init+0x60>)
 800236a:	f005 fb71 	bl	8007a50 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <TIMER_IF_Init+0x60>)
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002376:	4809      	ldr	r0, [pc, #36]	; (800239c <TIMER_IF_Init+0x60>)
 8002378:	f005 fca8 	bl	8007ccc <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 800237c:	2000      	movs	r0, #0
 800237e:	f000 f9d3 	bl	8002728 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002382:	f000 f85f 	bl	8002444 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002386:	4b04      	ldr	r3, [pc, #16]	; (8002398 <TIMER_IF_Init+0x5c>)
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 800238c:	79fb      	ldrb	r3, [r7, #7]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000331 	.word	0x20000331
 800239c:	200002ec 	.word	0x200002ec

080023a0 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08e      	sub	sp, #56	; 0x38
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	222c      	movs	r2, #44	; 0x2c
 80023b4:	2100      	movs	r1, #0
 80023b6:	4618      	mov	r0, r3
 80023b8:	f01a f8ba 	bl	801c530 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80023bc:	f000 f828 	bl	8002410 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <TIMER_IF_StartTimer+0x68>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	4413      	add	r3, r2
 80023c8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80023d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80023dc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80023de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	2201      	movs	r2, #1
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <TIMER_IF_StartTimer+0x6c>)
 80023ee:	f005 fa23 	bl	8007838 <HAL_RTC_SetAlarm_IT>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80023f8:	f7ff fbbc 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 80023fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002400:	4618      	mov	r0, r3
 8002402:	3738      	adds	r7, #56	; 0x38
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000334 	.word	0x20000334
 800240c:	200002ec 	.word	0x200002ec

08002410 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <TIMER_IF_StopTimer+0x2c>)
 800241c:	2201      	movs	r2, #1
 800241e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002424:	4806      	ldr	r0, [pc, #24]	; (8002440 <TIMER_IF_StopTimer+0x30>)
 8002426:	f005 fb13 	bl	8007a50 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800242a:	4b05      	ldr	r3, [pc, #20]	; (8002440 <TIMER_IF_StopTimer+0x30>)
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002432:	79fb      	ldrb	r3, [r7, #7]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40002800 	.word	0x40002800
 8002440:	200002ec 	.word	0x200002ec

08002444 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002448:	f000 f98e 	bl	8002768 <GetTimerTicks>
 800244c:	4603      	mov	r3, r0
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <TIMER_IF_SetTimerContext+0x18>)
 8002450:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002452:	4b02      	ldr	r3, [pc, #8]	; (800245c <TIMER_IF_SetTimerContext+0x18>)
 8002454:	681b      	ldr	r3, [r3, #0]
}
 8002456:	4618      	mov	r0, r3
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000334 	.word	0x20000334

08002460 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002464:	4b02      	ldr	r3, [pc, #8]	; (8002470 <TIMER_IF_GetTimerContext+0x10>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000334 	.word	0x20000334

08002474 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 800247e:	f000 f973 	bl	8002768 <GetTimerTicks>
 8002482:	4602      	mov	r2, r0
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000334 	.word	0x20000334

0800249c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80024a6:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <TIMER_IF_GetTimerValue+0x24>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80024ae:	f000 f95b 	bl	8002768 <GetTimerTicks>
 80024b2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000331 	.word	0x20000331

080024c4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 80024ce:	2303      	movs	r3, #3
 80024d0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr

080024de <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80024de:	b5b0      	push	{r4, r5, r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 80024e6:	2100      	movs	r1, #0
 80024e8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	2000      	movs	r0, #0
 80024ee:	460a      	mov	r2, r1
 80024f0:	4603      	mov	r3, r0
 80024f2:	0d95      	lsrs	r5, r2, #22
 80024f4:	0294      	lsls	r4, r2, #10
 80024f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024fa:	f04f 0300 	mov.w	r3, #0
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe fb5b 	bl	8000bbc <__aeabi_uldivmod>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4613      	mov	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 800250e:	68fb      	ldr	r3, [r7, #12]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bdb0      	pop	{r4, r5, r7, pc}

08002518 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002518:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002522:	2100      	movs	r1, #0
 8002524:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	2000      	movs	r0, #0
 800252a:	460c      	mov	r4, r1
 800252c:	4605      	mov	r5, r0
 800252e:	4620      	mov	r0, r4
 8002530:	4629      	mov	r1, r5
 8002532:	f04f 0a00 	mov.w	sl, #0
 8002536:	f04f 0b00 	mov.w	fp, #0
 800253a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800253e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002542:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002546:	4650      	mov	r0, sl
 8002548:	4659      	mov	r1, fp
 800254a:	1b02      	subs	r2, r0, r4
 800254c:	eb61 0305 	sbc.w	r3, r1, r5
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	0099      	lsls	r1, r3, #2
 800255a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800255e:	0090      	lsls	r0, r2, #2
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	eb12 0804 	adds.w	r8, r2, r4
 8002568:	eb43 0905 	adc.w	r9, r3, r5
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002578:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800257c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002580:	4690      	mov	r8, r2
 8002582:	4699      	mov	r9, r3
 8002584:	4640      	mov	r0, r8
 8002586:	4649      	mov	r1, r9
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	0a82      	lsrs	r2, r0, #10
 8002592:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002596:	0a8b      	lsrs	r3, r1, #10
 8002598:	4613      	mov	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025a8:	4770      	bx	lr

080025aa <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b084      	sub	sp, #16
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ff93 	bl	80024de <TIMER_IF_Convert_ms2Tick>
 80025b8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80025ba:	f000 f8d5 	bl	8002768 <GetTimerTicks>
 80025be:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80025c0:	e000      	b.n	80025c4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 80025c2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80025c4:	f000 f8d0 	bl	8002768 <GetTimerTicks>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f6      	bhi.n	80025c2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80025e6:	f019 fb97 	bl	801bd18 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80025fa:	f000 f8a5 	bl	8002748 <TIMER_IF_BkUp_Read_MSBticks>
 80025fe:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3301      	adds	r3, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f000 f88f 	bl	8002728 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002612:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002620:	f000 f8a2 	bl	8002768 <GetTimerTicks>
 8002624:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002626:	f000 f88f 	bl	8002748 <TIMER_IF_BkUp_Read_MSBticks>
 800262a:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	2200      	movs	r2, #0
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	60fa      	str	r2, [r7, #12]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	000b      	movs	r3, r1
 8002640:	2200      	movs	r2, #0
 8002642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002644:	2000      	movs	r0, #0
 8002646:	460c      	mov	r4, r1
 8002648:	4605      	mov	r5, r0
 800264a:	eb12 0804 	adds.w	r8, r2, r4
 800264e:	eb43 0905 	adc.w	r9, r3, r5
 8002652:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002656:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	0a82      	lsrs	r2, r0, #10
 8002664:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002668:	0a8b      	lsrs	r3, r1, #10
 800266a:	4613      	mov	r3, r2
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2200      	movs	r2, #0
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800267c:	f04f 0b00 	mov.w	fp, #0
 8002680:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff46 	bl	8002518 <TIMER_IF_Convert_Tick2ms>
 800268c:	4603      	mov	r3, r0
 800268e:	b29a      	uxth	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002696:	4618      	mov	r0, r3
 8002698:	3730      	adds	r7, #48	; 0x30
 800269a:	46bd      	mov	sp, r7
 800269c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026a0 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4803      	ldr	r0, [pc, #12]	; (80026bc <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80026ae:	f005 fb9f 	bl	8007df0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200002ec 	.word	0x200002ec

080026c0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	2101      	movs	r1, #1
 80026cc:	4803      	ldr	r0, [pc, #12]	; (80026dc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80026ce:	f005 fb8f 	bl	8007df0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200002ec 	.word	0x200002ec

080026e0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80026ea:	2100      	movs	r1, #0
 80026ec:	4804      	ldr	r0, [pc, #16]	; (8002700 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80026ee:	f005 fb97 	bl	8007e20 <HAL_RTCEx_BKUPRead>
 80026f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200002ec 	.word	0x200002ec

08002704 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800270e:	2101      	movs	r1, #1
 8002710:	4804      	ldr	r0, [pc, #16]	; (8002724 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002712:	f005 fb85 	bl	8007e20 <HAL_RTCEx_BKUPRead>
 8002716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002718:	687b      	ldr	r3, [r7, #4]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200002ec 	.word	0x200002ec

08002728 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	2102      	movs	r1, #2
 8002734:	4803      	ldr	r0, [pc, #12]	; (8002744 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002736:	f005 fb5b 	bl	8007df0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200002ec 	.word	0x200002ec

08002748 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800274e:	2102      	movs	r1, #2
 8002750:	4804      	ldr	r0, [pc, #16]	; (8002764 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002752:	f005 fb65 	bl	8007e20 <HAL_RTCEx_BKUPRead>
 8002756:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002758:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	200002ec 	.word	0x200002ec

08002768 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800276e:	480b      	ldr	r0, [pc, #44]	; (800279c <GetTimerTicks+0x34>)
 8002770:	f7ff fdd9 	bl	8002326 <LL_RTC_TIME_GetSubSecond>
 8002774:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002776:	e003      	b.n	8002780 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <GetTimerTicks+0x34>)
 800277a:	f7ff fdd4 	bl	8002326 <LL_RTC_TIME_GetSubSecond>
 800277e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002780:	4806      	ldr	r0, [pc, #24]	; (800279c <GetTimerTicks+0x34>)
 8002782:	f7ff fdd0 	bl	8002326 <LL_RTC_TIME_GetSubSecond>
 8002786:	4602      	mov	r2, r0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4293      	cmp	r3, r2
 800278c:	d1f4      	bne.n	8002778 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40002800 	.word	0x40002800

080027a0 <LL_AHB2_GRP1_EnableClock>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80027a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80027b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027c4:	68fb      	ldr	r3, [r7, #12]
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <LL_APB1_GRP1_EnableClock>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027f4:	68fb      	ldr	r3, [r7, #12]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <LL_APB1_GRP1_DisableClock>:
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	43db      	mvns	r3, r3
 8002812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002816:	4013      	ands	r3, r2
 8002818:	658b      	str	r3, [r1, #88]	; 0x58
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <LL_APB2_GRP1_EnableClock>:
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4313      	orrs	r3, r2
 800283a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800283c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002848:	68fb      	ldr	r3, [r7, #12]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <LL_SYSCFG_EnableFastModePlus>:
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	4904      	ldr	r1, [pc, #16]	; (8002874 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40010000 	.word	0x40010000

08002878 <MX_USART1_IRDA_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_IRDA_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <MX_USART1_IRDA_Init+0x50>)
 8002880:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 57600;
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 8002884:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002888:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8002896:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 8002898:	220c      	movs	r2, #12
 800289a:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 10;
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 800289e:	220a      	movs	r2, #10
 80028a0:	751a      	strb	r2, [r3, #20]
  hirda1.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 80028a2:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	82da      	strh	r2, [r3, #22]
  hirda1.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_USART1_IRDA_Init+0x4c>)
 80028b0:	f002 feaa 	bl	8005608 <HAL_IRDA_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_USART1_IRDA_Init+0x46>
  {
    Error_Handler();
 80028ba:	f7ff f95b 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000338 	.word	0x20000338
 80028c8:	40013800 	.word	0x40013800

080028cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028d0:	4b22      	ldr	r3, [pc, #136]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <MX_USART2_UART_Init+0x94>)
 80028d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e4:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028f2:	220c      	movs	r2, #12
 80028f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <MX_USART2_UART_Init+0x90>)
 80028fe:	2200      	movs	r2, #0
 8002900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002902:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_USART2_UART_Init+0x90>)
 8002904:	2200      	movs	r2, #0
 8002906:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <MX_USART2_UART_Init+0x90>)
 800290a:	2200      	movs	r2, #0
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <MX_USART2_UART_Init+0x90>)
 8002910:	2200      	movs	r2, #0
 8002912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002914:	4811      	ldr	r0, [pc, #68]	; (800295c <MX_USART2_UART_Init+0x90>)
 8002916:	f005 ff6e 	bl	80087f6 <HAL_UART_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002920:	f7ff f928 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002924:	2100      	movs	r1, #0
 8002926:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_USART2_UART_Init+0x90>)
 8002928:	f007 ffe2 	bl	800a8f0 <HAL_UARTEx_SetTxFifoThreshold>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002932:	f7ff f91f 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002936:	2100      	movs	r1, #0
 8002938:	4808      	ldr	r0, [pc, #32]	; (800295c <MX_USART2_UART_Init+0x90>)
 800293a:	f008 f817 	bl	800a96c <HAL_UARTEx_SetRxFifoThreshold>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002944:	f7ff f916 	bl	8001b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002948:	4804      	ldr	r0, [pc, #16]	; (800295c <MX_USART2_UART_Init+0x90>)
 800294a:	f007 ff99 	bl	800a880 <HAL_UARTEx_DisableFifoMode>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002954:	f7ff f90e 	bl	8001b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}
 800295c:	20000380 	.word	0x20000380
 8002960:	40004400 	.word	0x40004400

08002964 <HAL_IRDA_MspInit>:

void HAL_IRDA_MspInit(IRDA_HandleTypeDef* irdaHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b09a      	sub	sp, #104	; 0x68
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800297c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	2238      	movs	r2, #56	; 0x38
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f019 fdcc 	bl	801c530 <memset>
  if(irdaHandle->Instance==USART1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a3c      	ldr	r2, [pc, #240]	; (8002a90 <HAL_IRDA_MspInit+0x12c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d171      	bne.n	8002a86 <HAL_IRDA_MspInit+0x122>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80029a6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80029aa:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ac:	f107 030c 	add.w	r3, r7, #12
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 fdad 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_IRDA_MspInit+0x5c>
    {
      Error_Handler();
 80029bc:	f7ff f8da 	bl	8001b74 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029c4:	f7ff ff2e 	bl	8002824 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c8:	2002      	movs	r0, #2
 80029ca:	f7ff fee9 	bl	80027a0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RX_IrDA_Pin|USARTx_TX_Pin;
 80029ce:	23c0      	movs	r3, #192	; 0xc0
 80029d0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029de:	2307      	movs	r3, #7
 80029e0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029e6:	4619      	mov	r1, r3
 80029e8:	482a      	ldr	r0, [pc, #168]	; (8002a94 <HAL_IRDA_MspInit+0x130>)
 80029ea:	f002 fb9d 	bl	8005128 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80029ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029f2:	f7ff ff2f 	bl	8002854 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80029f6:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 80029f8:	4a28      	ldr	r2, [pc, #160]	; (8002a9c <HAL_IRDA_MspInit+0x138>)
 80029fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 80029fe:	2212      	movs	r2, #18
 8002a00:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a02:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a04:	2210      	movs	r2, #16
 8002a06:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a26:	4b1c      	ldr	r3, [pc, #112]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a2c:	481a      	ldr	r0, [pc, #104]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a2e:	f001 fc9d 	bl	800436c <HAL_DMA_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_IRDA_MspInit+0xd8>
    {
      Error_Handler();
 8002a38:	f7ff f89c 	bl	8001b74 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002a40:	2300      	movs	r3, #0
 8002a42:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8002a50:	2301      	movs	r3, #1
 8002a52:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_tx, &pSyncConfig) != HAL_OK)
 8002a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a58:	4619      	mov	r1, r3
 8002a5a:	480f      	ldr	r0, [pc, #60]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a5c:	f002 f870 	bl	8004b40 <HAL_DMAEx_ConfigMuxSync>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_IRDA_MspInit+0x106>
    {
      Error_Handler();
 8002a66:	f7ff f885 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(irdaHandle,hdmatx,hdma_usart1_tx);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_IRDA_MspInit+0x134>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8002a76:	2200      	movs	r2, #0
 8002a78:	2102      	movs	r1, #2
 8002a7a:	2024      	movs	r0, #36	; 0x24
 8002a7c:	f001 fc3f 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a80:	2024      	movs	r0, #36	; 0x24
 8002a82:	f001 fc56 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a86:	bf00      	nop
 8002a88:	3768      	adds	r7, #104	; 0x68
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	40013800 	.word	0x40013800
 8002a94:	48000400 	.word	0x48000400
 8002a98:	20000410 	.word	0x20000410
 8002a9c:	40020008 	.word	0x40020008

08002aa0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b096      	sub	sp, #88	; 0x58
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ab8:	f107 030c 	add.w	r3, r7, #12
 8002abc:	2238      	movs	r2, #56	; 0x38
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f019 fd35 	bl	801c530 <memset>
  if(uartHandle->Instance==USART2)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <HAL_UART_MspInit+0xe8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d157      	bne.n	8002b80 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ad4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8002ad8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fd16 	bl	8007510 <HAL_RCCEx_PeriphCLKConfig>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002aea:	f7ff f843 	bl	8001b74 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002af2:	f7ff fe6d 	bl	80027d0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	2001      	movs	r0, #1
 8002af8:	f7ff fe52 	bl	80027a0 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8002afc:	230c      	movs	r3, #12
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b00:	2302      	movs	r3, #2
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b0c:	2307      	movs	r3, #7
 8002b0e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b14:	4619      	mov	r1, r3
 8002b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b1a:	f002 fb05 	bl	8005128 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b20:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_UART_MspInit+0xf0>)
 8002b22:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b26:	2214      	movs	r2, #20
 8002b28:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b2a:	4b18      	ldr	r3, [pc, #96]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b2c:	2210      	movs	r2, #16
 8002b2e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b38:	2280      	movs	r2, #128	; 0x80
 8002b3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b48:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b54:	480d      	ldr	r0, [pc, #52]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b56:	f001 fc09 	bl	800436c <HAL_DMA_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002b60:	f7ff f808 	bl	8001b74 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b68:	679a      	str	r2, [r3, #120]	; 0x78
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_UART_MspInit+0xec>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	2025      	movs	r0, #37	; 0x25
 8002b76:	f001 fbc2 	bl	80042fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7a:	2025      	movs	r0, #37	; 0x25
 8002b7c:	f001 fbd9 	bl	8004332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b80:	bf00      	nop
 8002b82:	3758      	adds	r7, #88	; 0x58
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40004400 	.word	0x40004400
 8002b8c:	20000470 	.word	0x20000470
 8002b90:	4002001c 	.word	0x4002001c

08002b94 <HAL_UART_MspDeInit>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <HAL_UART_MspDeInit+0x3c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d110      	bne.n	8002bc8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8002ba6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002baa:	f7ff fe29 	bl	8002800 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8002bae:	210c      	movs	r1, #12
 8002bb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb4:	f002 fc18 	bl	80053e8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f001 fc7d 	bl	80044bc <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002bc2:	2025      	movs	r0, #37	; 0x25
 8002bc4:	f001 fbc3 	bl	800434e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40004400 	.word	0x40004400

08002bd4 <LL_APB1_GRP1_ForceReset>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <LL_APB1_GRP1_ReleaseReset>:
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
	...

08002c1c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c26:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002c2a:	4905      	ldr	r1, [pc, #20]	; (8002c40 <LL_EXTI_EnableIT_0_31+0x24>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	58000800 	.word	0x58000800

08002c44 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <vcom_Init+0x28>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002c52:	f7fe fa75 	bl	8001140 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002c56:	f7ff fe39 	bl	80028cc <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002c5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002c5e:	f7ff ffdd 	bl	8002c1c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002c62:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200004d4 	.word	0x200004d4

08002c70 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002c74:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c78:	f7ff ffac 	bl	8002bd4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002c7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c80:	f7ff ffb9 	bl	8002bf6 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002c84:	4804      	ldr	r0, [pc, #16]	; (8002c98 <vcom_DeInit+0x28>)
 8002c86:	f7ff ff85 	bl	8002b94 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002c8a:	200f      	movs	r0, #15
 8002c8c:	f001 fb5f 	bl	800434e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8002c90:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000380 	.word	0x20000380

08002c9c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	461a      	mov	r2, r3
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <vcom_Trace_DMA+0x24>)
 8002cb0:	f005 fe48 	bl	8008944 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002cb4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000380 	.word	0x20000380

08002cc4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <vcom_ReceiveInit+0x70>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002cd2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cd6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ce0:	4815      	ldr	r0, [pc, #84]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002ce2:	f007 fd40 	bl	800a766 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002ce6:	bf00      	nop
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf6:	d0f7      	beq.n	8002ce8 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002cf8:	bf00      	nop
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d08:	d1f7      	bne.n	8002cfa <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d18:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002d1a:	4807      	ldr	r0, [pc, #28]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002d1c:	f007 fd7e 	bl	800a81c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002d20:	2201      	movs	r2, #1
 8002d22:	4906      	ldr	r1, [pc, #24]	; (8002d3c <vcom_ReceiveInit+0x78>)
 8002d24:	4804      	ldr	r0, [pc, #16]	; (8002d38 <vcom_ReceiveInit+0x74>)
 8002d26:	f005 fdb7 	bl	8008898 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002d2a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200004d8 	.word	0x200004d8
 8002d38:	20000380 	.word	0x20000380
 8002d3c:	200004d0 	.word	0x200004d0

08002d40 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_UART_TxCpltCallback+0x24>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d103      	bne.n	8002d5a <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_UART_TxCpltCallback+0x28>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2000      	movs	r0, #0
 8002d58:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40004400 	.word	0x40004400
 8002d68:	200004d4 	.word	0x200004d4

08002d6c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	; (8002db0 <HAL_UART_RxCpltCallback+0x44>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d113      	bne.n	8002da6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002d7e:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_UART_RxCpltCallback+0x48>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_UART_RxCpltCallback+0x30>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <HAL_UART_RxCpltCallback+0x48>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	2101      	movs	r1, #1
 8002d98:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_UART_RxCpltCallback+0x4c>)
 8002d9a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4906      	ldr	r1, [pc, #24]	; (8002db8 <HAL_UART_RxCpltCallback+0x4c>)
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f005 fd79 	bl	8008898 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40004400 	.word	0x40004400
 8002db4:	200004d8 	.word	0x200004d8
 8002db8:	200004d0 	.word	0x200004d0

08002dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dc0:	f7ff faab 	bl	800231a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc4:	480c      	ldr	r0, [pc, #48]	; (8002df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dc6:	490d      	ldr	r1, [pc, #52]	; (8002dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <LoopForever+0xe>)
  movs r3, #0
 8002dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dcc:	e002      	b.n	8002dd4 <LoopCopyDataInit>

08002dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd2:	3304      	adds	r3, #4

08002dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd8:	d3f9      	bcc.n	8002dce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ddc:	4c0a      	ldr	r4, [pc, #40]	; (8002e08 <LoopForever+0x16>)
  movs r3, #0
 8002dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de0:	e001      	b.n	8002de6 <LoopFillZerobss>

08002de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de4:	3204      	adds	r2, #4

08002de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de8:	d3fb      	bcc.n	8002de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dea:	f019 fb7d 	bl	801c4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002dee:	f7fe fcf9 	bl	80017e4 <main>

08002df2 <LoopForever>:

LoopForever:
    b LoopForever
 8002df2:	e7fe      	b.n	8002df2 <LoopForever>
  ldr   r0, =_estack
 8002df4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dfc:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8002e00:	0801d750 	.word	0x0801d750
  ldr r2, =_sbss
 8002e04:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8002e08:	20002308 	.word	0x20002308

08002e0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC_IRQHandler>

08002e0e <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
 8002e1c:	609a      	str	r2, [r3, #8]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e22:	2310      	movs	r3, #16
 8002e24:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e26:	2301      	movs	r3, #1
 8002e28:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f002 f975 	bl	8005128 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e42:	1d3b      	adds	r3, r7, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4a:	f002 f96d 	bl	8005128 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2120      	movs	r1, #32
 8002e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e56:	f002 fb95 	bl	8005584 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e62:	f002 fb8f 	bl	8005584 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d83f      	bhi.n	8002f00 <BSP_RADIO_ConfigRFSwitch+0x90>
 8002e80:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002e99 	.word	0x08002e99
 8002e8c:	08002eb3 	.word	0x08002eb3
 8002e90:	08002ecd 	.word	0x08002ecd
 8002e94:	08002ee7 	.word	0x08002ee7
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2110      	movs	r1, #16
 8002e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ea0:	f002 fb70 	bl	8005584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eac:	f002 fb6a 	bl	8005584 <HAL_GPIO_WritePin>
      break;      
 8002eb0:	e027      	b.n	8002f02 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	2110      	movs	r1, #16
 8002eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eba:	f002 fb63 	bl	8005584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec6:	f002 fb5d 	bl	8005584 <HAL_GPIO_WritePin>
      break;
 8002eca:	e01a      	b.n	8002f02 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ecc:	2201      	movs	r2, #1
 8002ece:	2110      	movs	r1, #16
 8002ed0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed4:	f002 fb56 	bl	8005584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2120      	movs	r1, #32
 8002edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ee0:	f002 fb50 	bl	8005584 <HAL_GPIO_WritePin>
      break;
 8002ee4:	e00d      	b.n	8002f02 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2110      	movs	r1, #16
 8002eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eee:	f002 fb49 	bl	8005584 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002efa:	f002 fb43 	bl	8005584 <HAL_GPIO_WritePin>
      break;
 8002efe:	e000      	b.n	8002f02 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8002f00:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8002f10:	2302      	movs	r3, #2
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr

08002f1a <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8002f1e:	2301      	movs	r3, #1
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002f2c:	2301      	movs	r3, #1
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002f46:	230f      	movs	r3, #15
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e001      	b.n	8002f50 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002f4c:	2316      	movs	r3, #22
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002f50:	68fb      	ldr	r3, [r7, #12]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	4a03      	ldr	r2, [pc, #12]	; (8002f74 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	6053      	str	r3, [r2, #4]
}
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	e0042000 	.word	0xe0042000

08002f78 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002f7c:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a03      	ldr	r2, [pc, #12]	; (8002f90 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002f82:	f023 0302 	bic.w	r3, r3, #2
 8002f86:	6053      	str	r3, [r2, #4]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	e0042000 	.word	0xe0042000

08002f94 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	4a03      	ldr	r2, [pc, #12]	; (8002fac <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002f9e:	f023 0304 	bic.w	r3, r3, #4
 8002fa2:	6053      	str	r3, [r2, #4]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr
 8002fac:	e0042000 	.word	0xe0042000

08002fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fba:	2003      	movs	r0, #3
 8002fbc:	f001 f994 	bl	80042e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fc0:	f004 f8c8 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_Init+0x3c>)
 8002fc8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fca:	200f      	movs	r0, #15
 8002fcc:	f7ff f8d2 	bl	8002174 <HAL_InitTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	71fb      	strb	r3, [r7, #7]
 8002fda:	e001      	b.n	8002fe0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fdc:	f7fe fe86 	bl	8001cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <HAL_GetUIDw0+0x10>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	1fff7590 	.word	0x1fff7590

08003004 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003008:	4b02      	ldr	r3, [pc, #8]	; (8003014 <HAL_GetUIDw1+0x10>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	1fff7594 	.word	0x1fff7594

08003018 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HAL_GetUIDw2+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	1fff7598 	.word	0x1fff7598

0800302c <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003030:	f7ff ff94 	bl	8002f5c <LL_DBGMCU_DisableDBGSleepMode>
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800303c:	f7ff ff9c 	bl	8002f78 <LL_DBGMCU_DisableDBGStopMode>
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003048:	f7ff ffa4 	bl	8002f94 <LL_DBGMCU_DisableDBGStandbyMode>
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}

08003050 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800308e:	b480      	push	{r7}
 8003090:	b085      	sub	sp, #20
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2107      	movs	r1, #7
 80030a6:	fa01 f303 	lsl.w	r3, r1, r3
 80030aa:	43db      	mvns	r3, r3
 80030ac:	401a      	ands	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80030c0:	bf00      	nop
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2107      	movs	r1, #7
 80030e0:	fa01 f303 	lsl.w	r3, r1, r3
 80030e4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr

0800311e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 031f 	and.w	r3, r3, #31
 8003134:	210f      	movs	r1, #15
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	401a      	ands	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	0e9b      	lsrs	r3, r3, #26
 8003142:	f003 010f 	and.w	r1, r3, #15
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003156:	bf00      	nop
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	629a      	str	r2, [r3, #40]	; 0x28
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr

08003184 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003198:	43db      	mvns	r3, r3
 800319a:	401a      	ands	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	43db      	mvns	r3, r3
 80031c0:	401a      	ands	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	0219      	lsls	r1, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	400b      	ands	r3, r1
 80031ca:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 80031ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d2:	431a      	orrs	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr

080031e2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031f2:	f023 0317 	bic.w	r3, r3, #23
 80031f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	bc80      	pop	{r7}
 8003206:	4770      	bx	lr

08003208 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003218:	f023 0317 	bic.w	r3, r3, #23
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6093      	str	r3, [r2, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	bc80      	pop	{r7}
 8003228:	4770      	bx	lr

0800322a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800323e:	d101      	bne.n	8003244 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003260:	f023 0317 	bic.w	r3, r3, #23
 8003264:	f043 0201 	orr.w	r2, r3, #1
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003286:	f023 0317 	bic.w	r3, r3, #23
 800328a:	f043 0202 	orr.w	r2, r3, #2
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <LL_ADC_IsEnabled+0x18>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <LL_ADC_IsEnabled+0x1a>
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc80      	pop	{r7}
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d101      	bne.n	80032d8 <LL_ADC_IsDisableOngoing+0x18>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <LL_ADC_IsDisableOngoing+0x1a>
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032f4:	f023 0317 	bic.w	r3, r3, #23
 80032f8:	f043 0204 	orr.w	r2, r3, #4
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800331a:	f023 0317 	bic.w	r3, r3, #23
 800331e:	f043 0210 	orr.w	r2, r3, #16
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b04      	cmp	r3, #4
 8003342:	d101      	bne.n	8003348 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e19e      	b.n	80036b4 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7fd fe13 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff44 	bl	800322a <LL_ADC_IsInternalRegulatorEnabled>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d115      	bne.n	80033d4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff18 	bl	80031e2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033b2:	4b99      	ldr	r3, [pc, #612]	; (8003618 <HAL_ADC_Init+0x2c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	4a98      	ldr	r2, [pc, #608]	; (800361c <HAL_ADC_Init+0x2c8>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	099b      	lsrs	r3, r3, #6
 80033c0:	3301      	adds	r3, #1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033c6:	e002      	b.n	80033ce <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f9      	bne.n	80033c8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff26 	bl	800322a <LL_ADC_IsInternalRegulatorEnabled>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e8:	f043 0210 	orr.w	r2, r3, #16
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff93 	bl	8003330 <LL_ADC_REG_IsConversionOngoing>
 800340a:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f040 8144 	bne.w	80036a2 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f040 8140 	bne.w	80036a2 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800342a:	f043 0202 	orr.w	r2, r3, #2
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff30 	bl	800329c <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 80a7 	bne.w	8003592 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	7e1b      	ldrb	r3, [r3, #24]
 800344c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800344e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7e5b      	ldrb	r3, [r3, #25]
 8003454:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003456:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e9b      	ldrb	r3, [r3, #26]
 800345c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800345e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003464:	2a00      	cmp	r2, #0
 8003466:	d002      	beq.n	800346e <HAL_ADC_Init+0x11a>
 8003468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800346c:	e000      	b.n	8003470 <HAL_ADC_Init+0x11c>
 800346e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003470:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003476:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	da04      	bge.n	800348a <HAL_ADC_Init+0x136>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003488:	e001      	b.n	800348e <HAL_ADC_Init+0x13a>
 800348a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800348e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003496:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003498:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d114      	bne.n	80034d4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7e9b      	ldrb	r3, [r3, #26]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d104      	bne.n	80034bc <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	61bb      	str	r3, [r7, #24]
 80034ba:	e00b      	b.n	80034d4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d009      	beq.n	80034f0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80034e8:	4313      	orrs	r3, r2
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80034fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6812      	ldr	r2, [r2, #0]
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	430b      	orrs	r3, r1
 8003506:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003514:	4313      	orrs	r3, r2
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d111      	bne.n	800354a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003532:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003538:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800353e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	4b33      	ldr	r3, [pc, #204]	; (8003620 <HAL_ADC_Init+0x2cc>)
 8003552:	4013      	ands	r3, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	6979      	ldr	r1, [r7, #20]
 800355a:	430b      	orrs	r3, r1
 800355c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003566:	d014      	beq.n	8003592 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003570:	d00f      	beq.n	8003592 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800357a:	d00a      	beq.n	8003592 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800357c:	4b29      	ldr	r3, [pc, #164]	; (8003624 <HAL_ADC_Init+0x2d0>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800358c:	4925      	ldr	r1, [pc, #148]	; (8003624 <HAL_ADC_Init+0x2d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	461a      	mov	r2, r3
 800359c:	2100      	movs	r1, #0
 800359e:	f7ff fd76 	bl	800308e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	461a      	mov	r2, r3
 80035ac:	491e      	ldr	r1, [pc, #120]	; (8003628 <HAL_ADC_Init+0x2d4>)
 80035ae:	f7ff fd6e 	bl	800308e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d108      	bne.n	80035cc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f062 020f 	orn	r2, r2, #15
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
 80035ca:	e042      	b.n	8003652 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d4:	d13d      	bne.n	8003652 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
 80035da:	e00c      	b.n	80035f6 <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d006      	beq.n	80035fe <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	3301      	adds	r3, #1
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b07      	cmp	r3, #7
 80035fa:	d9ef      	bls.n	80035dc <HAL_ADC_Init+0x288>
 80035fc:	e000      	b.n	8003600 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 80035fe:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d112      	bne.n	800362c <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f062 020f 	orn	r2, r2, #15
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
 8003616:	e01c      	b.n	8003652 <HAL_ADC_Init+0x2fe>
 8003618:	20000000 	.word	0x20000000
 800361c:	053e2d63 	.word	0x053e2d63
 8003620:	1ffffc02 	.word	0x1ffffc02
 8003624:	40012708 	.word	0x40012708
 8003628:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
 8003636:	3b01      	subs	r3, #1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	f003 031c 	and.w	r3, r3, #28
 800363e:	f06f 020f 	mvn.w	r2, #15
 8003642:	fa02 f103 	lsl.w	r1, r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fd36 	bl	80030ca <LL_ADC_GetSamplingTimeCommonChannels>
 800365e:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003664:	429a      	cmp	r2, r3
 8003666:	d10b      	bne.n	8003680 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	f043 0201 	orr.w	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800367e:	e018      	b.n	80036b2 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003684:	f023 0312 	bic.w	r3, r3, #18
 8003688:	f043 0210 	orr.w	r2, r3, #16
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80036a0:	e007      	b.n	80036b2 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80036b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e06a      	b.n	80037a4 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	f043 0202 	orr.w	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fabe 	bl	8003c5c <ADC_ConversionStop>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10f      	bne.n	800370a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fb82 	bl	8003df4 <ADC_Disable>
 80036f0:	4603      	mov	r3, r0
 80036f2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fd7f 	bl	8003208 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8003718:	f023 0303 	bic.w	r3, r3, #3
 800371c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f240 329f 	movw	r2, #927	; 0x39f
 8003726:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68d9      	ldr	r1, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	4b1e      	ldr	r3, [pc, #120]	; (80037ac <HAL_ADC_DeInit+0xf0>)
 8003734:	400b      	ands	r3, r1
 8003736:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003746:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0207 	bic.w	r2, r2, #7
 8003756:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a1a      	ldr	r2, [r3, #32]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8003766:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2200      	movs	r2, #0
 8003774:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8003776:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_ADC_DeInit+0xf4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_ADC_DeInit+0xf4>)
 800377c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8003780:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fc28 	bl	8000fd8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	833e0200 	.word	0x833e0200
 80037b0:	40012708 	.word	0x40012708

080037b4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff fdb5 	bl	8003330 <LL_ADC_REG_IsConversionOngoing>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d132      	bne.n	8003832 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADC_Start+0x26>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e02e      	b.n	8003838 <HAL_ADC_Start+0x84>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa80 	bl	8003ce8 <ADC_Enable>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d11a      	bne.n	8003828 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037fa:	f023 0301 	bic.w	r3, r3, #1
 80037fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	221c      	movs	r2, #28
 8003812:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fd5f 	bl	80032e4 <LL_ADC_REG_StartConversion>
 8003826:	e006      	b.n	8003836 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003830:	e001      	b.n	8003836 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003832:	2302      	movs	r3, #2
 8003834:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_ADC_Stop+0x16>
 8003852:	2302      	movs	r3, #2
 8003854:	e022      	b.n	800389c <HAL_ADC_Stop+0x5c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f9fc 	bl	8003c5c <ADC_ConversionStop>
 8003864:	4603      	mov	r3, r0
 8003866:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d111      	bne.n	8003892 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fac0 	bl	8003df4 <ADC_Disable>
 8003874:	4603      	mov	r3, r0
 8003876:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003886:	f023 0301 	bic.w	r3, r3, #1
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800389a:	7bfb      	ldrb	r3, [r7, #15]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d102      	bne.n	80038bc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80038b6:	2308      	movs	r3, #8
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	e010      	b.n	80038de <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e077      	b.n	80039ca <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80038da:	2304      	movs	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038de:	f7fe fc53 	bl	8002188 <HAL_GetTick>
 80038e2:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80038e4:	e021      	b.n	800392a <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d01d      	beq.n	800392a <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038ee:	f7fe fc4b 	bl	8002188 <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <HAL_ADC_PollForConversion+0x60>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d112      	bne.n	800392a <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003916:	f043 0204 	orr.w	r2, r3, #4
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e04f      	b.n	80039ca <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0d6      	beq.n	80038e6 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fbd6 	bl	80030fa <LL_ADC_REG_IsTriggerSourceSWStart>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d031      	beq.n	80039b8 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	7e9b      	ldrb	r3, [r3, #26]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d12d      	bne.n	80039b8 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b08      	cmp	r3, #8
 8003968:	d126      	bne.n	80039b8 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff fcde 	bl	8003330 <LL_ADC_REG_IsConversionOngoing>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d112      	bne.n	80039a0 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 020c 	bic.w	r2, r2, #12
 8003988:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	659a      	str	r2, [r3, #88]	; 0x58
 800399e:	e00b      	b.n	80039b8 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a4:	f043 0220 	orr.w	r2, r3, #32
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b0:	f043 0201 	orr.w	r2, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	7e1b      	ldrb	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	220c      	movs	r2, #12
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x28>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e110      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x24a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fc85 	bl	8003330 <LL_ADC_REG_IsConversionOngoing>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f040 80f7 	bne.w	8003c1c <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	f000 80b1 	beq.w	8003b9a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a40:	d004      	beq.n	8003a4c <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a46:	4a7e      	ldr	r2, [pc, #504]	; (8003c40 <HAL_ADC_ConfigChannel+0x254>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d108      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f7ff fb82 	bl	8003160 <LL_ADC_REG_SetSequencerChAdd>
 8003a5c:	e041      	b.n	8003ae2 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	401a      	ands	r2, r3
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <HAL_ADC_ConfigChannel+0xa0>
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	0e9b      	lsrs	r3, r3, #26
 8003a86:	f003 031f 	and.w	r3, r3, #31
 8003a8a:	e011      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0xc4>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	fa93 f3a3 	rbit	r3, r3
 8003a98:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	e003      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	6839      	ldr	r1, [r7, #0]
 8003ab2:	6849      	ldr	r1, [r1, #4]
 8003ab4:	f001 011f 	and.w	r1, r1, #31
 8003ab8:	408b      	lsls	r3, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d808      	bhi.n	8003ae2 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6859      	ldr	r1, [r3, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	461a      	mov	r2, r3
 8003ade:	f7ff fb1e 	bl	800311e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6819      	ldr	r1, [r3, #0]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	461a      	mov	r2, r3
 8003af0:	f7ff fb5b 	bl	80031aa <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f280 8097 	bge.w	8003c2c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003afe:	4851      	ldr	r0, [pc, #324]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003b00:	f7ff fab8 	bl	8003074 <LL_ADC_GetCommonPathInternalCh>
 8003b04:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a4f      	ldr	r2, [pc, #316]	; (8003c48 <HAL_ADC_ConfigChannel+0x25c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d120      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d11b      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b20:	4619      	mov	r1, r3
 8003b22:	4848      	ldr	r0, [pc, #288]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003b24:	f7ff fa94 	bl	8003050 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b28:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <HAL_ADC_ConfigChannel+0x260>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	099b      	lsrs	r3, r3, #6
 8003b2e:	4a48      	ldr	r2, [pc, #288]	; (8003c50 <HAL_ADC_ConfigChannel+0x264>)
 8003b30:	fba2 2303 	umull	r2, r3, r2, r3
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b42:	e002      	b.n	8003b4a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1f9      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003b50:	e06c      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a3f      	ldr	r2, [pc, #252]	; (8003c54 <HAL_ADC_ConfigChannel+0x268>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10c      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x18a>
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4835      	ldr	r0, [pc, #212]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003b70:	f7ff fa6e 	bl	8003050 <LL_ADC_SetCommonPathInternalCh>
 8003b74:	e05a      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a37      	ldr	r2, [pc, #220]	; (8003c58 <HAL_ADC_ConfigChannel+0x26c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d155      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d150      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b90:	4619      	mov	r1, r3
 8003b92:	482c      	ldr	r0, [pc, #176]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003b94:	f7ff fa5c 	bl	8003050 <LL_ADC_SetCommonPathInternalCh>
 8003b98:	e048      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba2:	d004      	beq.n	8003bae <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_ADC_ConfigChannel+0x254>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d107      	bne.n	8003bbe <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	4610      	mov	r0, r2
 8003bba:	f7ff fae3 	bl	8003184 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da32      	bge.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc6:	481f      	ldr	r0, [pc, #124]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003bc8:	f7ff fa54 	bl	8003074 <LL_ADC_GetCommonPathInternalCh>
 8003bcc:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1d      	ldr	r2, [pc, #116]	; (8003c48 <HAL_ADC_ConfigChannel+0x25c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d107      	bne.n	8003be8 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003bde:	4619      	mov	r1, r3
 8003be0:	4818      	ldr	r0, [pc, #96]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003be2:	f7ff fa35 	bl	8003050 <LL_ADC_SetCommonPathInternalCh>
 8003be6:	e021      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <HAL_ADC_ConfigChannel+0x268>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d107      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4812      	ldr	r0, [pc, #72]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003bfc:	f7ff fa28 	bl	8003050 <LL_ADC_SetCommonPathInternalCh>
 8003c00:	e014      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a14      	ldr	r2, [pc, #80]	; (8003c58 <HAL_ADC_ConfigChannel+0x26c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10f      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003c12:	4619      	mov	r1, r3
 8003c14:	480b      	ldr	r0, [pc, #44]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003c16:	f7ff fa1b 	bl	8003050 <LL_ADC_SetCommonPathInternalCh>
 8003c1a:	e007      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f043 0220 	orr.w	r2, r3, #32
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003c34:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	80000004 	.word	0x80000004
 8003c44:	40012708 	.word	0x40012708
 8003c48:	b0001000 	.word	0xb0001000
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	053e2d63 	.word	0x053e2d63
 8003c54:	b8004000 	.word	0xb8004000
 8003c58:	b4002000 	.word	0xb4002000

08003c5c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fb61 	bl	8003330 <LL_ADC_REG_IsConversionOngoing>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d033      	beq.n	8003cdc <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff fb21 	bl	80032c0 <LL_ADC_IsDisableOngoing>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d104      	bne.n	8003c8e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fb3e 	bl	800330a <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c8e:	f7fe fa7b 	bl	8002188 <HAL_GetTick>
 8003c92:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003c94:	e01b      	b.n	8003cce <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003c96:	f7fe fa77 	bl	8002188 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d914      	bls.n	8003cce <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00d      	beq.n	8003cce <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb6:	f043 0210 	orr.w	r2, r3, #16
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc2:	f043 0201 	orr.w	r2, r3, #1
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e007      	b.n	8003cde <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1dc      	bne.n	8003c96 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff facf 	bl	800329c <LL_ADC_IsEnabled>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d169      	bne.n	8003dd8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <ADC_Enable+0xfc>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d16:	f043 0210 	orr.w	r2, r3, #16
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d22:	f043 0201 	orr.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e055      	b.n	8003dda <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fa8c 	bl	8003250 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d38:	482b      	ldr	r0, [pc, #172]	; (8003de8 <ADC_Enable+0x100>)
 8003d3a:	f7ff f99b 	bl	8003074 <LL_ADC_GetCommonPathInternalCh>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00f      	beq.n	8003d68 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d48:	4b28      	ldr	r3, [pc, #160]	; (8003dec <ADC_Enable+0x104>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <ADC_Enable+0x108>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	3301      	adds	r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d5a:	e002      	b.n	8003d62 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f9      	bne.n	8003d5c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7e5b      	ldrb	r3, [r3, #25]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d033      	beq.n	8003dd8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003d70:	f7fe fa0a 	bl	8002188 <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d76:	e028      	b.n	8003dca <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7ff fa8d 	bl	800329c <LL_ADC_IsEnabled>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7ff fa5f 	bl	8003250 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d92:	f7fe f9f9 	bl	8002188 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d914      	bls.n	8003dca <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d00d      	beq.n	8003dca <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db2:	f043 0210 	orr.w	r2, r3, #16
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e007      	b.n	8003dda <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d1cf      	bne.n	8003d78 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	80000017 	.word	0x80000017
 8003de8:	40012708 	.word	0x40012708
 8003dec:	20000000 	.word	0x20000000
 8003df0:	053e2d63 	.word	0x053e2d63

08003df4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fa5d 	bl	80032c0 <LL_ADC_IsDisableOngoing>
 8003e06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff fa45 	bl	800329c <LL_ADC_IsEnabled>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d047      	beq.n	8003ea8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d144      	bne.n	8003ea8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f003 0305 	and.w	r3, r3, #5
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10c      	bne.n	8003e46 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fa20 	bl	8003276 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e3e:	f7fe f9a3 	bl	8002188 <HAL_GetTick>
 8003e42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e44:	e029      	b.n	8003e9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	f043 0210 	orr.w	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e023      	b.n	8003eaa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e62:	f7fe f991 	bl	8002188 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d914      	bls.n	8003e9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e82:	f043 0210 	orr.w	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f043 0201 	orr.w	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e007      	b.n	8003eaa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1dc      	bne.n	8003e62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <LL_ADC_SetCalibrationFactor>:
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ec2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr

08003eda <LL_ADC_GetCalibrationFactor>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <LL_ADC_Enable>:
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f06:	f023 0317 	bic.w	r3, r3, #23
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_Disable>:
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	f023 0317 	bic.w	r3, r3, #23
 8003f30:	f043 0202 	orr.w	r2, r3, #2
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr

08003f42 <LL_ADC_IsEnabled>:
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d101      	bne.n	8003f5a <LL_ADC_IsEnabled+0x18>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <LL_ADC_IsEnabled+0x1a>
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bc80      	pop	{r7}
 8003f64:	4770      	bx	lr

08003f66 <LL_ADC_StartCalibration>:
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f76:	f023 0317 	bic.w	r3, r3, #23
 8003f7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_IsCalibrationOnGoing>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa0:	d101      	bne.n	8003fa6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e000      	b.n	8003fa8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_ADCEx_Calibration_Start+0x1e>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e0b9      	b.n	8004144 <HAL_ADCEx_Calibration_Start+0x192>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff0b 	bl	8003df4 <ADC_Disable>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff ffab 	bl	8003f42 <LL_ADC_IsEnabled>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 809d 	bne.w	800412e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ffc:	f043 0202 	orr.w	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	f248 0303 	movw	r3, #32771	; 0x8003
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004020:	f023 0303 	bic.w	r3, r3, #3
 8004024:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
 800402a:	e02e      	b.n	800408a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff ff98 	bl	8003f66 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004036:	e014      	b.n	8004062 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3301      	adds	r3, #1
 800403c:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004044:	d30d      	bcc.n	8004062 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404a:	f023 0312 	bic.w	r3, r3, #18
 800404e:	f043 0210 	orr.w	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e070      	b.n	8004144 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff ff90 	bl	8003f8c <LL_ADC_IsCalibrationOnGoing>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e2      	bne.n	8004038 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ff2f 	bl	8003eda <LL_ADC_GetCalibrationFactor>
 800407c:	4602      	mov	r2, r0
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	4413      	add	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b07      	cmp	r3, #7
 800408e:	d9cd      	bls.n	800402c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fbb2 f3f3 	udiv	r3, r2, r3
 8004098:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff29 	bl	8003ef6 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69b9      	ldr	r1, [r7, #24]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff ff01 	bl	8003eb2 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff31 	bl	8003f1c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040ba:	f7fe f865 	bl	8002188 <HAL_GetTick>
 80040be:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040c0:	e01c      	b.n	80040fc <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80040c2:	f7fe f861 	bl	8002188 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d915      	bls.n	80040fc <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff34 	bl	8003f42 <LL_ADC_IsEnabled>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00d      	beq.n	80040fc <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e4:	f043 0210 	orr.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e023      	b.n	8004144 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff ff1e 	bl	8003f42 <LL_ADC_IsEnabled>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1da      	bne.n	80040c2 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68d9      	ldr	r1, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	430a      	orrs	r2, r1
 800411a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004120:	f023 0303 	bic.w	r3, r3, #3
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	659a      	str	r2, [r3, #88]	; 0x58
 800412c:	e005      	b.n	800413a <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f043 0210 	orr.w	r2, r3, #16
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004142:	7dfb      	ldrb	r3, [r7, #23]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f003 0307 	and.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800415c:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004168:	4013      	ands	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800417e:	4a04      	ldr	r2, [pc, #16]	; (8004190 <__NVIC_SetPriorityGrouping+0x44>)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	60d3      	str	r3, [r2, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__NVIC_GetPriorityGrouping+0x18>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 0307 	and.w	r3, r3, #7
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	db0b      	blt.n	80041da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 021f 	and.w	r2, r3, #31
 80041c8:	4906      	ldr	r1, [pc, #24]	; (80041e4 <__NVIC_EnableIRQ+0x34>)
 80041ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	2001      	movs	r0, #1
 80041d2:	fa00 f202 	lsl.w	r2, r0, r2
 80041d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	bc80      	pop	{r7}
 80041e2:	4770      	bx	lr
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	db12      	blt.n	8004220 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041fa:	79fb      	ldrb	r3, [r7, #7]
 80041fc:	f003 021f 	and.w	r2, r3, #31
 8004200:	490a      	ldr	r1, [pc, #40]	; (800422c <__NVIC_DisableIRQ+0x44>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	095b      	lsrs	r3, r3, #5
 8004208:	2001      	movs	r0, #1
 800420a:	fa00 f202 	lsl.w	r2, r0, r2
 800420e:	3320      	adds	r3, #32
 8004210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004214:	f3bf 8f4f 	dsb	sy
}
 8004218:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800421a:	f3bf 8f6f 	isb	sy
}
 800421e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000e100 	.word	0xe000e100

08004230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004240:	2b00      	cmp	r3, #0
 8004242:	db0a      	blt.n	800425a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	b2da      	uxtb	r2, r3
 8004248:	490c      	ldr	r1, [pc, #48]	; (800427c <__NVIC_SetPriority+0x4c>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	0112      	lsls	r2, r2, #4
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	440b      	add	r3, r1
 8004254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004258:	e00a      	b.n	8004270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	4908      	ldr	r1, [pc, #32]	; (8004280 <__NVIC_SetPriority+0x50>)
 8004260:	79fb      	ldrb	r3, [r7, #7]
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3b04      	subs	r3, #4
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	440b      	add	r3, r1
 800426e:	761a      	strb	r2, [r3, #24]
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000e100 	.word	0xe000e100
 8004280:	e000ed00 	.word	0xe000ed00

08004284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004284:	b480      	push	{r7}
 8004286:	b089      	sub	sp, #36	; 0x24
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f1c3 0307 	rsb	r3, r3, #7
 800429e:	2b04      	cmp	r3, #4
 80042a0:	bf28      	it	cs
 80042a2:	2304      	movcs	r3, #4
 80042a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	3304      	adds	r3, #4
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d902      	bls.n	80042b4 <NVIC_EncodePriority+0x30>
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	3b03      	subs	r3, #3
 80042b2:	e000      	b.n	80042b6 <NVIC_EncodePriority+0x32>
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042b8:	f04f 32ff 	mov.w	r2, #4294967295
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	401a      	ands	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042cc:	f04f 31ff 	mov.w	r1, #4294967295
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	43d9      	mvns	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042dc:	4313      	orrs	r3, r2
         );
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3724      	adds	r7, #36	; 0x24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bc80      	pop	{r7}
 80042e6:	4770      	bx	lr

080042e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff2b 	bl	800414c <__NVIC_SetPriorityGrouping>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b086      	sub	sp, #24
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	60b9      	str	r1, [r7, #8]
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800430c:	f7ff ff42 	bl	8004194 <__NVIC_GetPriorityGrouping>
 8004310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68b9      	ldr	r1, [r7, #8]
 8004316:	6978      	ldr	r0, [r7, #20]
 8004318:	f7ff ffb4 	bl	8004284 <NVIC_EncodePriority>
 800431c:	4602      	mov	r2, r0
 800431e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff ff83 	bl	8004230 <__NVIC_SetPriority>
}
 800432a:	bf00      	nop
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004340:	4618      	mov	r0, r3
 8004342:	f7ff ff35 	bl	80041b0 <__NVIC_EnableIRQ>
}
 8004346:	bf00      	nop
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b082      	sub	sp, #8
 8004352:	af00      	add	r7, sp, #0
 8004354:	4603      	mov	r3, r0
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff43 	bl	80041e8 <__NVIC_DisableIRQ>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e08e      	b.n	800449c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <HAL_DMA_Init+0x138>)
 8004386:	429a      	cmp	r2, r3
 8004388:	d80f      	bhi.n	80043aa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <HAL_DMA_Init+0x13c>)
 8004392:	4413      	add	r3, r2
 8004394:	4a45      	ldr	r2, [pc, #276]	; (80044ac <HAL_DMA_Init+0x140>)
 8004396:	fba2 2303 	umull	r2, r3, r2, r3
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	009a      	lsls	r2, r3, #2
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a42      	ldr	r2, [pc, #264]	; (80044b0 <HAL_DMA_Init+0x144>)
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
 80043a8:	e00e      	b.n	80043c8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4b40      	ldr	r3, [pc, #256]	; (80044b4 <HAL_DMA_Init+0x148>)
 80043b2:	4413      	add	r3, r2
 80043b4:	4a3d      	ldr	r2, [pc, #244]	; (80044ac <HAL_DMA_Init+0x140>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	009a      	lsls	r2, r3, #2
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a3c      	ldr	r2, [pc, #240]	; (80044b8 <HAL_DMA_Init+0x14c>)
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6819      	ldr	r1, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb24 	bl	8004a68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004428:	d102      	bne.n	8004430 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800443c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004446:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_DMA_Init+0x106>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d80c      	bhi.n	8004472 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb4d 	bl	8004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e008      	b.n	8004484 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40020407 	.word	0x40020407
 80044a8:	bffdfff8 	.word	0xbffdfff8
 80044ac:	cccccccd 	.word	0xcccccccd
 80044b0:	40020000 	.word	0x40020000
 80044b4:	bffdfbf8 	.word	0xbffdfbf8
 80044b8:	40020400 	.word	0x40020400

080044bc <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e07b      	b.n	80045c6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_DMA_DeInit+0x114>)
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d80f      	bhi.n	800450a <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b38      	ldr	r3, [pc, #224]	; (80045d4 <HAL_DMA_DeInit+0x118>)
 80044f2:	4413      	add	r3, r2
 80044f4:	4a38      	ldr	r2, [pc, #224]	; (80045d8 <HAL_DMA_DeInit+0x11c>)
 80044f6:	fba2 2303 	umull	r2, r3, r2, r3
 80044fa:	091b      	lsrs	r3, r3, #4
 80044fc:	009a      	lsls	r2, r3, #2
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a35      	ldr	r2, [pc, #212]	; (80045dc <HAL_DMA_DeInit+0x120>)
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
 8004508:	e00e      	b.n	8004528 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	4b33      	ldr	r3, [pc, #204]	; (80045e0 <HAL_DMA_DeInit+0x124>)
 8004512:	4413      	add	r3, r2
 8004514:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <HAL_DMA_DeInit+0x11c>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	009a      	lsls	r2, r3, #2
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <HAL_DMA_DeInit+0x128>)
 8004526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004534:	f003 021c 	and.w	r2, r3, #28
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	2101      	movs	r1, #1
 800453e:	fa01 f202 	lsl.w	r2, r1, r2
 8004542:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fa8f 	bl	8004a68 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800455a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00f      	beq.n	8004584 <HAL_DMA_DeInit+0xc8>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b04      	cmp	r3, #4
 800456a:	d80b      	bhi.n	8004584 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 fac3 	bl	8004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	2200      	movs	r2, #0
 8004578:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004582:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40020407 	.word	0x40020407
 80045d4:	bffdfff8 	.word	0xbffdfff8
 80045d8:	cccccccd 	.word	0xcccccccd
 80045dc:	40020000 	.word	0x40020000
 80045e0:	bffdfbf8 	.word	0xbffdfbf8
 80045e4:	40020400 	.word	0x40020400

080045e8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_DMA_Start_IT+0x20>
 8004604:	2302      	movs	r3, #2
 8004606:	e069      	b.n	80046dc <HAL_DMA_Start_IT+0xf4>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d155      	bne.n	80046c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 f9d3 	bl	80049ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 020e 	orr.w	r2, r2, #14
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e00f      	b.n	8004680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0204 	bic.w	r2, r2, #4
 800466e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 020a 	orr.w	r2, r2, #10
 800467e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800469c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	e008      	b.n	80046da <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80046da:	7dfb      	ldrb	r3, [r7, #23]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e04f      	b.n	8004796 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d008      	beq.n	8004714 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2204      	movs	r2, #4
 8004706:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e040      	b.n	8004796 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 020e 	bic.w	r2, r2, #14
 8004722:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004732:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	f003 021c 	and.w	r2, r3, #28
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	2101      	movs	r1, #1
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004760:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00c      	beq.n	8004784 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004778:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004782:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d005      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2204      	movs	r2, #4
 80047bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e047      	b.n	8004854 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 020e 	bic.w	r2, r2, #14
 80047d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0201 	bic.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f8:	f003 021c 	and.w	r2, r3, #28
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	2101      	movs	r1, #1
 8004802:	fa01 f202 	lsl.w	r2, r1, r2
 8004806:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004810:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004828:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004832:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	4798      	blx	r3
    }
  }
  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487c:	f003 031c 	and.w	r3, r3, #28
 8004880:	2204      	movs	r2, #4
 8004882:	409a      	lsls	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d027      	beq.n	80048dc <HAL_DMA_IRQHandler+0x7c>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d022      	beq.n	80048dc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0320 	and.w	r3, r3, #32
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d107      	bne.n	80048b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	f003 021c 	and.w	r2, r3, #28
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	2104      	movs	r1, #4
 80048c2:	fa01 f202 	lsl.w	r2, r1, r2
 80048c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8081 	beq.w	80049d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80048da:	e07b      	b.n	80049d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e0:	f003 031c 	and.w	r3, r3, #28
 80048e4:	2202      	movs	r2, #2
 80048e6:	409a      	lsls	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d03d      	beq.n	800496c <HAL_DMA_IRQHandler+0x10c>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d038      	beq.n	800496c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10b      	bne.n	8004920 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 020a 	bic.w	r2, r2, #10
 8004916:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <HAL_DMA_IRQHandler+0x180>)
 8004928:	429a      	cmp	r2, r3
 800492a:	d909      	bls.n	8004940 <HAL_DMA_IRQHandler+0xe0>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004930:	f003 031c 	and.w	r3, r3, #28
 8004934:	4a2b      	ldr	r2, [pc, #172]	; (80049e4 <HAL_DMA_IRQHandler+0x184>)
 8004936:	2102      	movs	r1, #2
 8004938:	fa01 f303 	lsl.w	r3, r1, r3
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	e008      	b.n	8004952 <HAL_DMA_IRQHandler+0xf2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	f003 031c 	and.w	r3, r3, #28
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <HAL_DMA_IRQHandler+0x188>)
 800494a:	2102      	movs	r1, #2
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d038      	beq.n	80049d4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800496a:	e033      	b.n	80049d4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004970:	f003 031c 	and.w	r3, r3, #28
 8004974:	2208      	movs	r2, #8
 8004976:	409a      	lsls	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d02a      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x176>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	2b00      	cmp	r3, #0
 8004988:	d025      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 020e 	bic.w	r2, r2, #14
 8004998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f003 021c 	and.w	r2, r3, #28
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2101      	movs	r1, #1
 80049a8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
}
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40020080 	.word	0x40020080
 80049e4:	40020400 	.word	0x40020400
 80049e8:	40020000 	.word	0x40020000

080049ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	f003 021c 	and.w	r2, r3, #28
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2101      	movs	r1, #1
 8004a24:	fa01 f202 	lsl.w	r2, r1, r2
 8004a28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b10      	cmp	r3, #16
 8004a38:	d108      	bne.n	8004a4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a4a:	e007      	b.n	8004a5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	60da      	str	r2, [r3, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bc80      	pop	{r7}
 8004a64:	4770      	bx	lr
	...

08004a68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d813      	bhi.n	8004aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a88:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	3b08      	subs	r3, #8
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	e011      	b.n	8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	009a      	lsls	r2, r3, #2
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004aae:	4413      	add	r3, r2
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	3b08      	subs	r3, #8
 8004abc:	4a0b      	ldr	r2, [pc, #44]	; (8004aec <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004abe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	3307      	adds	r3, #7
 8004ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a0a      	ldr	r2, [pc, #40]	; (8004af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8004acc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40020407 	.word	0x40020407
 8004aec:	cccccccd 	.word	0xcccccccd
 8004af0:	4002081c 	.word	0x4002081c
 8004af4:	40020880 	.word	0x40020880

08004af8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b08:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	461a      	mov	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004b2e:	bf00      	nop
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr
 8004b38:	1000823f 	.word	0x1000823f
 8004b3c:	40020940 	.word	0x40020940

08004b40 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d12b      	bne.n	8004bae <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e028      	b.n	8004bb6 <HAL_DMAEx_ConfigMuxSync+0x76>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	04db      	lsls	r3, r3, #19
 8004b82:	431a      	orrs	r2, r3
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	7a1b      	ldrb	r3, [r3, #8]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	431a      	orrs	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	7a5b      	ldrb	r3, [r3, #9]
 8004b96:	025b      	lsls	r3, r3, #9
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004baa:	2300      	movs	r3, #0
 8004bac:	e003      	b.n	8004bb6 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bc80      	pop	{r7}
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d01a      	beq.n	8004c0e <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004be6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bf0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d022      	beq.n	8004c5c <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	4013      	ands	r3, r2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d01a      	beq.n	8004c5c <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
      }
    }
  }
}
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <HAL_FLASH_Program+0x80>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_FLASH_Program+0x1a>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e02d      	b.n	8004cda <HAL_FLASH_Program+0x76>
 8004c7e:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <HAL_FLASH_Program+0x80>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c84:	4b17      	ldr	r3, [pc, #92]	; (8004ce4 <HAL_FLASH_Program+0x80>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c8e:	f000 f869 	bl	8004d64 <FLASH_WaitForLastOperation>
 8004c92:	4603      	mov	r3, r0
 8004c94:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d11a      	bne.n	8004cd2 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca6:	68b8      	ldr	r0, [r7, #8]
 8004ca8:	f000 f8be 	bl	8004e28 <FLASH_Program_DoubleWord>
 8004cac:	e004      	b.n	8004cb8 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68b8      	ldr	r0, [r7, #8]
 8004cb4:	f000 f8de 	bl	8004e74 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004cb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cbc:	f000 f852 	bl	8004d64 <FLASH_WaitForLastOperation>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <HAL_FLASH_Program+0x84>)
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43db      	mvns	r3, r3
 8004ccc:	4906      	ldr	r1, [pc, #24]	; (8004ce8 <HAL_FLASH_Program+0x84>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <HAL_FLASH_Program+0x80>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	200004dc 	.word	0x200004dc
 8004ce8:	58004000 	.word	0x58004000

08004cec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_FLASH_Unlock+0x38>)
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da0b      	bge.n	8004d16 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_FLASH_Unlock+0x38>)
 8004d00:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <HAL_FLASH_Unlock+0x3c>)
 8004d02:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <HAL_FLASH_Unlock+0x38>)
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <HAL_FLASH_Unlock+0x40>)
 8004d08:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_FLASH_Unlock+0x38>)
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da01      	bge.n	8004d16 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004d16:	79fb      	ldrb	r3, [r7, #7]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	58004000 	.word	0x58004000
 8004d28:	45670123 	.word	0x45670123
 8004d2c:	cdef89ab 	.word	0xcdef89ab

08004d30 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8004d3a:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_FLASH_Lock+0x30>)
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4a08      	ldr	r2, [pc, #32]	; (8004d60 <HAL_FLASH_Lock+0x30>)
 8004d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d44:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_FLASH_Lock+0x30>)
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	db01      	blt.n	8004d52 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004d52:	79fb      	ldrb	r3, [r7, #7]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	58004000 	.word	0x58004000

08004d64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004d6c:	f7fd fa0c 	bl	8002188 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d72:	e009      	b.n	8004d88 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004d74:	f7fd fa08 	bl	8002188 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d801      	bhi.n	8004d88 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e047      	b.n	8004e18 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004d88:	4b25      	ldr	r3, [pc, #148]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d94:	d0ee      	beq.n	8004d74 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004d96:	4b22      	ldr	r3, [pc, #136]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004da6:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8004db2:	4013      	ands	r3, r2
 8004db4:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <FLASH_WaitForLastOperation+0x6c>
 8004dc0:	4b17      	ldr	r3, [pc, #92]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004dca:	4915      	ldr	r1, [pc, #84]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	618b      	str	r3, [r1, #24]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <FLASH_WaitForLastOperation+0x80>
 8004dda:	4a11      	ldr	r2, [pc, #68]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004de2:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00e      	beq.n	8004e08 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8004dea:	4a0e      	ldr	r2, [pc, #56]	; (8004e24 <FLASH_WaitForLastOperation+0xc0>)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e011      	b.n	8004e18 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004df4:	f7fd f9c8 	bl	8002188 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d801      	bhi.n	8004e08 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e007      	b.n	8004e18 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <FLASH_WaitForLastOperation+0xbc>)
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e14:	d0ee      	beq.n	8004df4 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	58004000 	.word	0x58004000
 8004e24:	200004dc 	.word	0x200004dc

08004e28 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <FLASH_Program_DoubleWord+0x48>)
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	4a0d      	ldr	r2, [pc, #52]	; (8004e70 <FLASH_Program_DoubleWord+0x48>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e46:	f3bf 8f6f 	isb	sy
}
 8004e4a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	000a      	movs	r2, r1
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	3104      	adds	r1, #4
 8004e60:	4613      	mov	r3, r2
 8004e62:	600b      	str	r3, [r1, #0]
}
 8004e64:	bf00      	nop
 8004e66:	3714      	adds	r7, #20
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bc80      	pop	{r7}
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	58004000 	.word	0x58004000

08004e74 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	; 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <FLASH_Program_Fast+0x78>)
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <FLASH_Program_Fast+0x78>)
 8004e90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e96:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea0:	b672      	cpsid	i
}
 8004ea2:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	617b      	str	r3, [r7, #20]
    row_index--;
 8004eb8:	7ffb      	ldrb	r3, [r7, #31]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004ebe:	7ffb      	ldrb	r3, [r7, #31]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1ef      	bne.n	8004ea4 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004ec4:	bf00      	nop
 8004ec6:	4b09      	ldr	r3, [pc, #36]	; (8004eec <FLASH_Program_Fast+0x78>)
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed2:	d0f8      	beq.n	8004ec6 <FLASH_Program_Fast+0x52>
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f383 8810 	msr	PRIMASK, r3
}
 8004ede:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004ee0:	bf00      	nop
 8004ee2:	3724      	adds	r7, #36	; 0x24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	58004000 	.word	0x58004000

08004ef0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004efa:	4b28      	ldr	r3, [pc, #160]	; (8004f9c <HAL_FLASHEx_Erase+0xac>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <HAL_FLASHEx_Erase+0x16>
 8004f02:	2302      	movs	r3, #2
 8004f04:	e046      	b.n	8004f94 <HAL_FLASHEx_Erase+0xa4>
 8004f06:	4b25      	ldr	r3, [pc, #148]	; (8004f9c <HAL_FLASHEx_Erase+0xac>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f0c:	4b23      	ldr	r3, [pc, #140]	; (8004f9c <HAL_FLASHEx_Erase+0xac>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f16:	f7ff ff25 	bl	8004d64 <FLASH_WaitForLastOperation>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d133      	bne.n	8004f8c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d108      	bne.n	8004f3e <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8004f2c:	f000 f880 	bl	8005030 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f34:	f7ff ff16 	bl	8004d64 <FLASH_WaitForLastOperation>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]
 8004f3c:	e024      	b.n	8004f88 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f04f 32ff 	mov.w	r2, #4294967295
 8004f44:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	60bb      	str	r3, [r7, #8]
 8004f4c:	e012      	b.n	8004f74 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004f4e:	68b8      	ldr	r0, [r7, #8]
 8004f50:	f000 f87e 	bl	8005050 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f58:	f7ff ff04 	bl	8004d64 <FLASH_WaitForLastOperation>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	601a      	str	r2, [r3, #0]
          break;
 8004f6c:	e00a      	b.n	8004f84 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3301      	adds	r3, #1
 8004f72:	60bb      	str	r3, [r7, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d3e4      	bcc.n	8004f4e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004f84:	f000 f8c0 	bl	8005108 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004f88:	f000 f87a 	bl	8005080 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004f8c:	4b03      	ldr	r3, [pc, #12]	; (8004f9c <HAL_FLASHEx_Erase+0xac>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]

  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	200004dc 	.word	0x200004dc

08004fa0 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004fa8:	4b1f      	ldr	r3, [pc, #124]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_FLASHEx_Erase_IT+0x14>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e034      	b.n	800501e <HAL_FLASHEx_Erase_IT+0x7e>
 8004fb4:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fba:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fc6:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fcc:	f7ff feca 	bl	8004d64 <FLASH_WaitForLastOperation>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8004fda:	4b13      	ldr	r3, [pc, #76]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e01c      	b.n	800501c <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004fe2:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_FLASHEx_Erase_IT+0x8c>)
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4a11      	ldr	r2, [pc, #68]	; (800502c <HAL_FLASHEx_Erase_IT+0x8c>)
 8004fe8:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004fec:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d105      	bne.n	8005002 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 8004ffc:	f000 f818 	bl	8005030 <FLASH_MassErase>
 8005000:	e00c      	b.n	800501c <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4a08      	ldr	r2, [pc, #32]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8005008:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	4a06      	ldr	r2, [pc, #24]	; (8005028 <HAL_FLASHEx_Erase_IT+0x88>)
 8005010:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 f81a 	bl	8005050 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800501c:	7bfb      	ldrb	r3, [r7, #15]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200004dc 	.word	0x200004dc
 800502c:	58004000 	.word	0x58004000

08005030 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <FLASH_MassErase+0x1c>)
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	4a04      	ldr	r2, [pc, #16]	; (800504c <FLASH_MassErase+0x1c>)
 800503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800503e:	f043 0304 	orr.w	r3, r3, #4
 8005042:	6153      	str	r3, [r2, #20]
#endif
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	58004000 	.word	0x58004000

08005050 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <FLASH_PageErase+0x2c>)
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4313      	orrs	r3, r2
 8005066:	4a05      	ldr	r2, [pc, #20]	; (800507c <FLASH_PageErase+0x2c>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	f043 0302 	orr.w	r3, r3, #2
 8005070:	6153      	str	r3, [r2, #20]
#endif
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr
 800507c:	58004000 	.word	0x58004000

08005080 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <FLASH_FlushCaches+0x84>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800508c:	2b01      	cmp	r3, #1
 800508e:	d117      	bne.n	80050c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005090:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <FLASH_FlushCaches+0x84>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <FLASH_FlushCaches+0x84>)
 8005096:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800509a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800509c:	4b19      	ldr	r3, [pc, #100]	; (8005104 <FLASH_FlushCaches+0x84>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a18      	ldr	r2, [pc, #96]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b16      	ldr	r3, [pc, #88]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a15      	ldr	r2, [pc, #84]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050b4:	4b13      	ldr	r3, [pc, #76]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a12      	ldr	r2, [pc, #72]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050be:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80050c0:	4b10      	ldr	r3, [pc, #64]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d117      	bne.n	80050fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80050cc:	4b0d      	ldr	r3, [pc, #52]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a09      	ldr	r2, [pc, #36]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	4b07      	ldr	r3, [pc, #28]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a06      	ldr	r2, [pc, #24]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80050f0:	4b04      	ldr	r3, [pc, #16]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a03      	ldr	r2, [pc, #12]	; (8005104 <FLASH_FlushCaches+0x84>)
 80050f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050fa:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	58004000 	.word	0x58004000

08005108 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <FLASH_AcknowledgePageErase+0x1c>)
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <FLASH_AcknowledgePageErase+0x1c>)
 8005112:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8005116:	f023 0302 	bic.w	r3, r3, #2
 800511a:	6153      	str	r3, [r2, #20]
#endif
}
 800511c:	bf00      	nop
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	58004000 	.word	0x58004000

08005128 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005136:	e140      	b.n	80053ba <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	2101      	movs	r1, #1
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8132 	beq.w	80053b4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f003 0303 	and.w	r3, r3, #3
 8005158:	2b01      	cmp	r3, #1
 800515a:	d005      	beq.n	8005168 <HAL_GPIO_Init+0x40>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d130      	bne.n	80051ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	2203      	movs	r2, #3
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4013      	ands	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800519e:	2201      	movs	r2, #1
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43db      	mvns	r3, r3
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f003 0201 	and.w	r2, r3, #1
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	d017      	beq.n	8005206 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	2203      	movs	r2, #3
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	43db      	mvns	r3, r3
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	4013      	ands	r3, r2
 80051ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	689a      	ldr	r2, [r3, #8]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d123      	bne.n	800525a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	08da      	lsrs	r2, r3, #3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3208      	adds	r2, #8
 800521a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800521e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	220f      	movs	r2, #15
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	43db      	mvns	r3, r3
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	4013      	ands	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	fa02 f303 	lsl.w	r3, r2, r3
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	08da      	lsrs	r2, r3, #3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3208      	adds	r2, #8
 8005254:	6939      	ldr	r1, [r7, #16]
 8005256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	2203      	movs	r2, #3
 8005266:	fa02 f303 	lsl.w	r3, r2, r3
 800526a:	43db      	mvns	r3, r3
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f003 0203 	and.w	r2, r3, #3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 808c 	beq.w	80053b4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800529c:	4a4e      	ldr	r2, [pc, #312]	; (80053d8 <HAL_GPIO_Init+0x2b0>)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	089b      	lsrs	r3, r3, #2
 80052a2:	3302      	adds	r3, #2
 80052a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	2207      	movs	r2, #7
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4013      	ands	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80052c6:	d00d      	beq.n	80052e4 <HAL_GPIO_Init+0x1bc>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a44      	ldr	r2, [pc, #272]	; (80053dc <HAL_GPIO_Init+0x2b4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d007      	beq.n	80052e0 <HAL_GPIO_Init+0x1b8>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a43      	ldr	r2, [pc, #268]	; (80053e0 <HAL_GPIO_Init+0x2b8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_GPIO_Init+0x1b4>
 80052d8:	2302      	movs	r3, #2
 80052da:	e004      	b.n	80052e6 <HAL_GPIO_Init+0x1be>
 80052dc:	2307      	movs	r3, #7
 80052de:	e002      	b.n	80052e6 <HAL_GPIO_Init+0x1be>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <HAL_GPIO_Init+0x1be>
 80052e4:	2300      	movs	r3, #0
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	f002 0203 	and.w	r2, r2, #3
 80052ec:	0092      	lsls	r2, r2, #2
 80052ee:	4093      	lsls	r3, r2
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052f6:	4938      	ldr	r1, [pc, #224]	; (80053d8 <HAL_GPIO_Init+0x2b0>)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	089b      	lsrs	r3, r3, #2
 80052fc:	3302      	adds	r3, #2
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005304:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	43db      	mvns	r3, r3
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4013      	ands	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005328:	4a2e      	ldr	r2, [pc, #184]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800532e:	4b2d      	ldr	r3, [pc, #180]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	43db      	mvns	r3, r3
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	4013      	ands	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005352:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005358:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 800535a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800535e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	43db      	mvns	r3, r3
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4013      	ands	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800537e:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005386:	4b17      	ldr	r3, [pc, #92]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 8005388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800538c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	43db      	mvns	r3, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4013      	ands	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80053ac:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <HAL_GPIO_Init+0x2bc>)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3301      	adds	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	fa22 f303 	lsr.w	r3, r2, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f47f aeb7 	bne.w	8005138 <HAL_GPIO_Init+0x10>
  }
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bc80      	pop	{r7}
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	48000400 	.word	0x48000400
 80053e0:	48000800 	.word	0x48000800
 80053e4:	58000800 	.word	0x58000800

080053e8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80053f6:	e0af      	b.n	8005558 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053f8:	2201      	movs	r2, #1
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	4013      	ands	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80a2 	beq.w	8005552 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800540e:	4a59      	ldr	r2, [pc, #356]	; (8005574 <HAL_GPIO_DeInit+0x18c>)
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	089b      	lsrs	r3, r3, #2
 8005414:	3302      	adds	r3, #2
 8005416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	2207      	movs	r2, #7
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4013      	ands	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005436:	d00d      	beq.n	8005454 <HAL_GPIO_DeInit+0x6c>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a4f      	ldr	r2, [pc, #316]	; (8005578 <HAL_GPIO_DeInit+0x190>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d007      	beq.n	8005450 <HAL_GPIO_DeInit+0x68>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a4e      	ldr	r2, [pc, #312]	; (800557c <HAL_GPIO_DeInit+0x194>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d101      	bne.n	800544c <HAL_GPIO_DeInit+0x64>
 8005448:	2302      	movs	r3, #2
 800544a:	e004      	b.n	8005456 <HAL_GPIO_DeInit+0x6e>
 800544c:	2307      	movs	r3, #7
 800544e:	e002      	b.n	8005456 <HAL_GPIO_DeInit+0x6e>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <HAL_GPIO_DeInit+0x6e>
 8005454:	2300      	movs	r3, #0
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	f002 0203 	and.w	r2, r2, #3
 800545c:	0092      	lsls	r2, r2, #2
 800545e:	4093      	lsls	r3, r2
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d136      	bne.n	80054d4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8005466:	4b46      	ldr	r3, [pc, #280]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 8005468:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	43db      	mvns	r3, r3
 8005470:	4943      	ldr	r1, [pc, #268]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 8005472:	4013      	ands	r3, r2
 8005474:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005478:	4b41      	ldr	r3, [pc, #260]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 800547a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	43db      	mvns	r3, r3
 8005482:	493f      	ldr	r1, [pc, #252]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 8005484:	4013      	ands	r3, r2
 8005486:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800548a:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	43db      	mvns	r3, r3
 8005492:	493b      	ldr	r1, [pc, #236]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 8005494:	4013      	ands	r3, r2
 8005496:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	43db      	mvns	r3, r3
 80054a0:	4937      	ldr	r1, [pc, #220]	; (8005580 <HAL_GPIO_DeInit+0x198>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	2207      	movs	r2, #7
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80054b6:	4a2f      	ldr	r2, [pc, #188]	; (8005574 <HAL_GPIO_DeInit+0x18c>)
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	089b      	lsrs	r3, r3, #2
 80054bc:	3302      	adds	r3, #2
 80054be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	43da      	mvns	r2, r3
 80054c6:	482b      	ldr	r0, [pc, #172]	; (8005574 <HAL_GPIO_DeInit+0x18c>)
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	089b      	lsrs	r3, r3, #2
 80054cc:	400a      	ands	r2, r1
 80054ce:	3302      	adds	r3, #2
 80054d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	2103      	movs	r1, #3
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	08da      	lsrs	r2, r3, #3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3208      	adds	r2, #8
 80054f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	220f      	movs	r2, #15
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43db      	mvns	r3, r3
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	08d2      	lsrs	r2, r2, #3
 8005508:	4019      	ands	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3208      	adds	r2, #8
 800550e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	2103      	movs	r1, #3
 800551c:	fa01 f303 	lsl.w	r3, r1, r3
 8005520:	43db      	mvns	r3, r3
 8005522:	401a      	ands	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	2101      	movs	r1, #1
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	43db      	mvns	r3, r3
 8005536:	401a      	ands	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	005b      	lsls	r3, r3, #1
 8005544:	2103      	movs	r1, #3
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	43db      	mvns	r3, r3
 800554c:	401a      	ands	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60da      	str	r2, [r3, #12]
    }

    position++;
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	3301      	adds	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	f47f af49 	bne.w	80053f8 <HAL_GPIO_DeInit+0x10>
  }
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	371c      	adds	r7, #28
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000
 8005578:	48000400 	.word	0x48000400
 800557c:	48000800 	.word	0x48000800
 8005580:	58000800 	.word	0x58000800

08005584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	807b      	strh	r3, [r7, #2]
 8005590:	4613      	mov	r3, r2
 8005592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005594:	787b      	ldrb	r3, [r7, #1]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800559a:	887a      	ldrh	r2, [r7, #2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055a0:	e002      	b.n	80055a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bc80      	pop	{r7}
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ca:	4a05      	ldr	r2, [pc, #20]	; (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f005 fb86 	bl	800ace4 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	58000800 	.word	0x58000800

080055e4 <LL_RCC_GetUSARTClockSource>:
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	401a      	ands	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	041b      	lsls	r3, r3, #16
 80055fc:	4313      	orrs	r3, r2
}
 80055fe:	4618      	mov	r0, r3
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <HAL_IRDA_Init>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e041      	b.n	800569e <HAL_IRDA_Init+0x96>
  }

  /* Check the USART/UART associated to the IRDA handle */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <HAL_IRDA_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fd f99a 	bl	8002964 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable the Peripheral to update the configuration registers */
  __HAL_IRDA_DISABLE(hirda);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]

  /* Set the IRDA Communication parameters */
  if (IRDA_SetConfig(hirda) == HAL_ERROR)
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa9a 	bl	8005b80 <IRDA_SetConfig>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_IRDA_Init+0x4e>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e023      	b.n	800569e <HAL_IRDA_Init+0x96>
  }

  /* In IRDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8005664:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0228 	bic.w	r2, r2, #40	; 0x28
 8005674:	609a      	str	r2, [r3, #8]

  /* set the UART/USART in IRDA mode */
  hirda->Instance->CR3 |= USART_CR3_IREN;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0202 	orr.w	r2, r2, #2
 8005684:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_IRDA_ENABLE(hirda);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hirda->gState and hirda->RxState to Ready */
  return (IRDA_CheckIdleState(hirda));
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fbcc 	bl	8005e34 <IRDA_CheckIdleState>
 800569c:	4603      	mov	r3, r0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <HAL_IRDA_Transmit>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  */
#endif /* CORE_CM0PLUS */
HAL_StatusTypeDef HAL_IRDA_Transmit(IRDA_HandleTypeDef *hirda, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08a      	sub	sp, #40	; 0x28
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4613      	mov	r3, r2
 80056b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (hirda->gState == HAL_IRDA_STATE_READY)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d17a      	bne.n	80057b4 <HAL_IRDA_Transmit+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <HAL_IRDA_Transmit+0x24>
 80056c4:	88fb      	ldrh	r3, [r7, #6]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_IRDA_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e073      	b.n	80057b6 <HAL_IRDA_Transmit+0x110>
      }
    }
#endif /* CORE_CM0PLUS */

    /* Process Locked */
    __HAL_LOCK(hirda);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_IRDA_Transmit+0x36>
 80056d8:	2302      	movs	r3, #2
 80056da:	e06c      	b.n	80057b6 <HAL_IRDA_Transmit+0x110>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
    hirda->gState = HAL_IRDA_STATE_BUSY_TX;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2221      	movs	r2, #33	; 0x21
 80056ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056f0:	f7fc fd4a 	bl	8002188 <HAL_GetTick>
 80056f4:	6178      	str	r0, [r7, #20]

    hirda->TxXferSize = Size;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	88fa      	ldrh	r2, [r7, #6]
 80056fa:	841a      	strh	r2, [r3, #32]
    hirda->TxXferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	845a      	strh	r2, [r3, #34]	; 0x22

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570a:	d108      	bne.n	800571e <HAL_IRDA_Transmit+0x78>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <HAL_IRDA_Transmit+0x78>
    {
      pdata8bits  = NULL;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData; /* Derogation R.11.3 */
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e003      	b.n	8005726 <HAL_IRDA_Transmit+0x80>
    }
    else
    {
      pdata8bits  = pData;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
    }

    while (hirda->TxXferCount > 0U)
 8005726:	e02a      	b.n	800577e <HAL_IRDA_Transmit+0xd8>
    {
      hirda->TxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	845a      	strh	r2, [r3, #34]	; 0x22

      if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	2200      	movs	r2, #0
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fbbc 	bl	8005ebe <IRDA_WaitOnFlagUntilTimeout>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <HAL_IRDA_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e032      	b.n	80057b6 <HAL_IRDA_Transmit+0x110>
      }
      if (pdata8bits == NULL)
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10b      	bne.n	800576e <HAL_IRDA_Transmit+0xc8>
      {
        hirda->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005764:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3302      	adds	r3, #2
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e007      	b.n	800577e <HAL_IRDA_Transmit+0xd8>
      }
      else
      {
        hirda->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	781a      	ldrb	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	3301      	adds	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
    while (hirda->TxXferCount > 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1cf      	bne.n	8005728 <HAL_IRDA_Transmit+0x82>
      }
    }

    if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2200      	movs	r2, #0
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fb93 	bl	8005ebe <IRDA_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <HAL_IRDA_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e009      	b.n	80057b6 <HAL_IRDA_Transmit+0x110>
    }

    /* At end of Tx process, restore hirda->gState to Ready */
    hirda->gState = HAL_IRDA_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hirda);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_IRDA_Transmit+0x110>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_IRDA_Receive>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  */
#endif /* CORE_CM0PLUS */
HAL_StatusTypeDef HAL_IRDA_Receive(IRDA_HandleTypeDef *hirda, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b08a      	sub	sp, #40	; 0x28
 80057c2:	af02      	add	r7, sp, #8
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	4613      	mov	r3, r2
 80057cc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_READY)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	2b20      	cmp	r3, #32
 80057d4:	f040 80ad 	bne.w	8005932 <HAL_IRDA_Receive+0x174>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_IRDA_Receive+0x26>
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_IRDA_Receive+0x2a>
    {
      return  HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0a5      	b.n	8005934 <HAL_IRDA_Receive+0x176>
      }
    }
#endif /* CORE_CM0PLUS */

    /* Process Locked */
    __HAL_LOCK(hirda);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d101      	bne.n	80057f6 <HAL_IRDA_Receive+0x38>
 80057f2:	2302      	movs	r3, #2
 80057f4:	e09e      	b.n	8005934 <HAL_IRDA_Receive+0x176>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	645a      	str	r2, [r3, #68]	; 0x44
    hirda->RxState = HAL_IRDA_STATE_BUSY_RX;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2222      	movs	r2, #34	; 0x22
 8005808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800580a:	f7fc fcbd 	bl	8002188 <HAL_GetTick>
 800580e:	6178      	str	r0, [r7, #20]

    hirda->RxXferSize = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	851a      	strh	r2, [r3, #40]	; 0x28
    hirda->RxXferCount = Size;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	88fa      	ldrh	r2, [r7, #6]
 800581a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Computation of the mask to apply to RDR register
       of the UART associated to the IRDA */
    IRDA_MASK_COMPUTATION(hirda);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005824:	d10c      	bne.n	8005840 <HAL_IRDA_Receive+0x82>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_IRDA_Receive+0x7a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005834:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005836:	e027      	b.n	8005888 <HAL_IRDA_Receive+0xca>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	22ff      	movs	r2, #255	; 0xff
 800583c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800583e:	e023      	b.n	8005888 <HAL_IRDA_Receive+0xca>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <HAL_IRDA_Receive+0xa2>
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <HAL_IRDA_Receive+0x9a>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	22ff      	movs	r2, #255	; 0xff
 8005854:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005856:	e017      	b.n	8005888 <HAL_IRDA_Receive+0xca>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	227f      	movs	r2, #127	; 0x7f
 800585c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800585e:	e013      	b.n	8005888 <HAL_IRDA_Receive+0xca>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005868:	d10b      	bne.n	8005882 <HAL_IRDA_Receive+0xc4>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d103      	bne.n	800587a <HAL_IRDA_Receive+0xbc>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	227f      	movs	r2, #127	; 0x7f
 8005876:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005878:	e006      	b.n	8005888 <HAL_IRDA_Receive+0xca>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	223f      	movs	r2, #63	; 0x3f
 800587e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005880:	e002      	b.n	8005888 <HAL_IRDA_Receive+0xca>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	859a      	strh	r2, [r3, #44]	; 0x2c
    uhMask = hirda->Mask;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800588c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005896:	d108      	bne.n	80058aa <HAL_IRDA_Receive+0xec>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_IRDA_Receive+0xec>
    {
      pdata8bits  = NULL;
 80058a0:	2300      	movs	r3, #0
 80058a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData; /* Derogation R.11.3 */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	61bb      	str	r3, [r7, #24]
 80058a8:	e003      	b.n	80058b2 <HAL_IRDA_Receive+0xf4>
    }
    else
    {
      pdata8bits  = pData;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
    }

    /* Check data remaining to be received */
    while (hirda->RxXferCount > 0U)
 80058b2:	e030      	b.n	8005916 <HAL_IRDA_Receive+0x158>
    {
      hirda->RxXferCount--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (IRDA_WaitOnFlagUntilTimeout(hirda, IRDA_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	2200      	movs	r2, #0
 80058ca:	2120      	movs	r1, #32
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 faf6 	bl	8005ebe <IRDA_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_IRDA_Receive+0x11e>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e02b      	b.n	8005934 <HAL_IRDA_Receive+0x176>
      }
      if (pdata8bits == NULL)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10c      	bne.n	80058fc <HAL_IRDA_Receive+0x13e>
      {
        *pdata16bits = (uint16_t)(hirda->Instance->RDR & uhMask);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	8a7b      	ldrh	r3, [r7, #18]
 80058ec:	4013      	ands	r3, r2
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	3302      	adds	r3, #2
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	e00c      	b.n	8005916 <HAL_IRDA_Receive+0x158>
      }
      else
      {
        *pdata8bits = (uint8_t)(hirda->Instance->RDR & (uint8_t)uhMask);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8a7b      	ldrh	r3, [r7, #18]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	4013      	ands	r3, r2
 800590a:	b2da      	uxtb	r2, r3
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
    while (hirda->RxXferCount > 0U)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1c9      	bne.n	80058b4 <HAL_IRDA_Receive+0xf6>
      }
    }

    /* At end of Rx process, restore hirda->RxState to Ready */
    hirda->RxState = HAL_IRDA_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hirda);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <HAL_IRDA_Receive+0x176>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_IRDA_IRQHandler>:
  * @param hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(hirda->Instance->ISR);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its;
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	617b      	str	r3, [r7, #20]
  if (errorflags == 0U)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10d      	bne.n	800597e <HAL_IRDA_IRQHandler+0x42>
  {
    /* IRDA in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d008      	beq.n	800597e <HAL_IRDA_IRQHandler+0x42>
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_IRDA_IRQHandler+0x42>
    {
      IRDA_Receive_IT(hirda);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb7e 	bl	8006078 <IRDA_Receive_IT>
      return;
 800597c:	e0df      	b.n	8005b3e <HAL_IRDA_IRQHandler+0x202>
    }
  }

  /* If some errors occur */
  cr3its = READ_REG(hirda->Instance->CR3);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	613b      	str	r3, [r7, #16]
  if ((errorflags != 0U)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80bb 	beq.w	8005b04 <HAL_IRDA_IRQHandler+0x1c8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d105      	bne.n	80059a4 <HAL_IRDA_IRQHandler+0x68>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80b0 	beq.w	8005b04 <HAL_IRDA_IRQHandler+0x1c8>
  {
    /* IRDA parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00e      	beq.n	80059cc <HAL_IRDA_IRQHandler+0x90>
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_IRDA_IRQHandler+0x90>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_PEF);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00e      	beq.n	80059f4 <HAL_IRDA_IRQHandler+0xb8>
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d009      	beq.n	80059f4 <HAL_IRDA_IRQHandler+0xb8>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_FEF);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2202      	movs	r2, #2
 80059e6:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ec:	f043 0204 	orr.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00e      	beq.n	8005a1c <HAL_IRDA_IRQHandler+0xe0>
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <HAL_IRDA_IRQHandler+0xe0>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_NEF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a14:	f043 0202 	orr.w	r2, r3, #2
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d013      	beq.n	8005a4e <HAL_IRDA_IRQHandler+0x112>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f003 0320 	and.w	r3, r3, #32
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <HAL_IRDA_IRQHandler+0xfe>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d009      	beq.n	8005a4e <HAL_IRDA_IRQHandler+0x112>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_OREF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2208      	movs	r2, #8
 8005a40:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	f043 0208 	orr.w	r2, r3, #8
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call IRDA Error Call back function if need be --------------------------*/
    if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d072      	beq.n	8005b3c <HAL_IRDA_IRQHandler+0x200>
    {
      /* IRDA in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d007      	beq.n	8005a70 <HAL_IRDA_IRQHandler+0x134>
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_IRDA_IRQHandler+0x134>
      {
        IRDA_Receive_IT(hirda);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fb04 	bl	8006078 <IRDA_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = hirda->ErrorCode;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d004      	beq.n	8005a8e <HAL_IRDA_IRQHandler+0x152>
          ((errorcode & HAL_IRDA_ERROR_ORE) != 0U))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d031      	beq.n	8005af2 <HAL_IRDA_IRQHandler+0x1b6>
      {
        /* Blocking error : transfer is aborted
           Set the IRDA state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        IRDA_EndRxTransfer(hirda);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa5d 	bl	8005f4e <IRDA_EndRxTransfer>

        /* Disable the IRDA DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9e:	2b40      	cmp	r3, #64	; 0x40
 8005aa0:	d123      	bne.n	8005aea <HAL_IRDA_IRQHandler+0x1ae>
        {
          CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab0:	609a      	str	r2, [r3, #8]

          /* Abort the IRDA DMA Rx channel */
          if (hirda->hdmarx != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d013      	beq.n	8005ae2 <HAL_IRDA_IRQHandler+0x1a6>
          {
            /* Set the IRDA DMA Abort callback :
               will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
            hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <HAL_IRDA_IRQHandler+0x208>)
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fe6a 	bl	80047a0 <HAL_DMA_Abort_IT>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_IRDA_IRQHandler+0x1c4>
            {
              /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
              hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00e      	b.n	8005b00 <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
            /* Call registered user error callback */
            hirda->ErrorCallback(hirda);
#else
            /* Call legacy weak user error callback */
            HAL_IRDA_ErrorCallback(hirda);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f842 	bl	8005b6c <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00a      	b.n	8005b00 <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
          /* Call registered user error callback */
          hirda->ErrorCallback(hirda);
#else
          /* Call legacy weak user error callback */
          HAL_IRDA_ErrorCallback(hirda);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f83e 	bl	8005b6c <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e006      	b.n	8005b00 <HAL_IRDA_IRQHandler+0x1c4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
        /* Call registered user error callback */
        hirda->ErrorCallback(hirda);
#else
        /* Call legacy weak user error callback */
        HAL_IRDA_ErrorCallback(hirda);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f83a 	bl	8005b6c <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005afe:	e01d      	b.n	8005b3c <HAL_IRDA_IRQHandler+0x200>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8005b00:	bf00      	nop
    return;
 8005b02:	e01b      	b.n	8005b3c <HAL_IRDA_IRQHandler+0x200>

  } /* End if some error occurs */

  /* IRDA in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U))
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d008      	beq.n	8005b20 <HAL_IRDA_IRQHandler+0x1e4>
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d003      	beq.n	8005b20 <HAL_IRDA_IRQHandler+0x1e4>
  {
    IRDA_Transmit_IT(hirda);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa48 	bl	8005fae <IRDA_Transmit_IT>
    return;
 8005b1e:	e00e      	b.n	8005b3e <HAL_IRDA_IRQHandler+0x202>
  }

  /* IRDA in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <HAL_IRDA_IRQHandler+0x202>
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d004      	beq.n	8005b3e <HAL_IRDA_IRQHandler+0x202>
  {
    IRDA_EndTransmit_IT(hirda);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fa89 	bl	800604c <IRDA_EndTransmit_IT>
    return;
 8005b3a:	e000      	b.n	8005b3e <HAL_IRDA_IRQHandler+0x202>
    return;
 8005b3c:	bf00      	nop
  }

}
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	08005f87 	.word	0x08005f87

08005b48 <HAL_IRDA_TxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxCpltCallback can be implemented in the user file.
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bc80      	pop	{r7}
 8005b58:	4770      	bx	lr

08005b5a <HAL_IRDA_RxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_RxCpltCallback can be implemented in the user file.
   */
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <HAL_IRDA_ErrorCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_ErrorCallback can be implemented in the user file.
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
	...

08005b80 <IRDA_SetConfig>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  IRDA_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	74bb      	strb	r3, [r7, #18]
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the IRDA Word Length, Parity and transfer Mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	4b9e      	ldr	r3, [pc, #632]	; (8005e20 <IRDA_SetConfig+0x2a0>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	6979      	ldr	r1, [r7, #20]
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 0204 	bic.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8adb      	ldrh	r3, [r3, #22]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]

  /*--------------------- USART clock PRESC Configuration ----------------*/
  /* Configure
  * - IRDA Clock Prescaler: set PRESCALER according to hirda->Init.ClockPrescaler value */
  MODIFY_REG(hirda->Instance->PRESC, USART_PRESC_PRESCALER, hirda->Init.ClockPrescaler);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	f023 010f 	bic.w	r1, r3, #15
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART GTPR Configuration ----------------------*/
  MODIFY_REG(hirda->Instance->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)hirda->Init.Prescaler);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	7d1b      	ldrb	r3, [r3, #20]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART BRR Configuration -----------------------*/
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a89      	ldr	r2, [pc, #548]	; (8005e24 <IRDA_SetConfig+0x2a4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d121      	bne.n	8005c46 <IRDA_SetConfig+0xc6>
 8005c02:	2003      	movs	r0, #3
 8005c04:	f7ff fcee 	bl	80055e4 <LL_RCC_GetUSARTClockSource>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d816      	bhi.n	8005c40 <IRDA_SetConfig+0xc0>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <IRDA_SetConfig+0x98>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c35 	.word	0x08005c35
 8005c20:	08005c2f 	.word	0x08005c2f
 8005c24:	08005c3b 	.word	0x08005c3b
 8005c28:	2301      	movs	r3, #1
 8005c2a:	74fb      	strb	r3, [r7, #19]
 8005c2c:	e047      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	74fb      	strb	r3, [r7, #19]
 8005c32:	e044      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005c34:	2304      	movs	r3, #4
 8005c36:	74fb      	strb	r3, [r7, #19]
 8005c38:	e041      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005c3a:	2310      	movs	r3, #16
 8005c3c:	74fb      	strb	r3, [r7, #19]
 8005c3e:	e03e      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005c40:	2320      	movs	r3, #32
 8005c42:	74fb      	strb	r3, [r7, #19]
 8005c44:	e03b      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a77      	ldr	r2, [pc, #476]	; (8005e28 <IRDA_SetConfig+0x2a8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d134      	bne.n	8005cba <IRDA_SetConfig+0x13a>
 8005c50:	200c      	movs	r0, #12
 8005c52:	f7ff fcc7 	bl	80055e4 <LL_RCC_GetUSARTClockSource>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d829      	bhi.n	8005cb4 <IRDA_SetConfig+0x134>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <IRDA_SetConfig+0xe8>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005cb5 	.word	0x08005cb5
 8005c70:	08005cb5 	.word	0x08005cb5
 8005c74:	08005cb5 	.word	0x08005cb5
 8005c78:	08005ca9 	.word	0x08005ca9
 8005c7c:	08005cb5 	.word	0x08005cb5
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cb5 	.word	0x08005cb5
 8005c88:	08005ca3 	.word	0x08005ca3
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cb5 	.word	0x08005cb5
 8005c94:	08005cb5 	.word	0x08005cb5
 8005c98:	08005caf 	.word	0x08005caf
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	74fb      	strb	r3, [r7, #19]
 8005ca0:	e00d      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	74fb      	strb	r3, [r7, #19]
 8005ca6:	e00a      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005ca8:	2304      	movs	r3, #4
 8005caa:	74fb      	strb	r3, [r7, #19]
 8005cac:	e007      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005cae:	2310      	movs	r3, #16
 8005cb0:	74fb      	strb	r3, [r7, #19]
 8005cb2:	e004      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	74fb      	strb	r3, [r7, #19]
 8005cb8:	e001      	b.n	8005cbe <IRDA_SetConfig+0x13e>
 8005cba:	2320      	movs	r3, #32
 8005cbc:	74fb      	strb	r3, [r7, #19]
  tmpreg =   0U;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  switch (clocksource)
 8005cc2:	7cfb      	ldrb	r3, [r7, #19]
 8005cc4:	2b10      	cmp	r3, #16
 8005cc6:	f200 8094 	bhi.w	8005df2 <IRDA_SetConfig+0x272>
 8005cca:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <IRDA_SetConfig+0x150>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005d15 	.word	0x08005d15
 8005cd4:	08005d43 	.word	0x08005d43
 8005cd8:	08005d71 	.word	0x08005d71
 8005cdc:	08005df3 	.word	0x08005df3
 8005ce0:	08005d99 	.word	0x08005d99
 8005ce4:	08005df3 	.word	0x08005df3
 8005ce8:	08005df3 	.word	0x08005df3
 8005cec:	08005df3 	.word	0x08005df3
 8005cf0:	08005df3 	.word	0x08005df3
 8005cf4:	08005df3 	.word	0x08005df3
 8005cf8:	08005df3 	.word	0x08005df3
 8005cfc:	08005df3 	.word	0x08005df3
 8005d00:	08005df3 	.word	0x08005df3
 8005d04:	08005df3 	.word	0x08005df3
 8005d08:	08005df3 	.word	0x08005df3
 8005d0c:	08005df3 	.word	0x08005df3
 8005d10:	08005dc7 	.word	0x08005dc7
  {
    case IRDA_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d14:	f001 fa32 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8005d18:	60f8      	str	r0, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	4a43      	ldr	r2, [pc, #268]	; (8005e2c <IRDA_SetConfig+0x2ac>)
 8005d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d24:	461a      	mov	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	085b      	lsrs	r3, r3, #1
 8005d32:	441a      	add	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	617b      	str	r3, [r7, #20]
      break;
 8005d40:	e05a      	b.n	8005df8 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d42:	f001 fa2d 	bl	80071a0 <HAL_RCC_GetPCLK2Freq>
 8005d46:	60f8      	str	r0, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699b      	ldr	r3, [r3, #24]
 8005d4c:	4a37      	ldr	r2, [pc, #220]	; (8005e2c <IRDA_SetConfig+0x2ac>)
 8005d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d52:	461a      	mov	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	441a      	add	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	617b      	str	r3, [r7, #20]
      break;
 8005d6e:	e043      	b.n	8005df8 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_HSI:
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(HSI_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	4a2d      	ldr	r2, [pc, #180]	; (8005e2c <IRDA_SetConfig+0x2ac>)
 8005d76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	4b2c      	ldr	r3, [pc, #176]	; (8005e30 <IRDA_SetConfig+0x2b0>)
 8005d7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	441a      	add	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	617b      	str	r3, [r7, #20]
      break;
 8005d96:	e02f      	b.n	8005df8 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005d98:	f001 f93c 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8005d9c:	60f8      	str	r0, [r7, #12]
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <IRDA_SetConfig+0x2ac>)
 8005da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005da8:	461a      	mov	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	fbb3 f2f2 	udiv	r2, r3, r2
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	441a      	add	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	617b      	str	r3, [r7, #20]
      break;
 8005dc4:	e018      	b.n	8005df8 <IRDA_SetConfig+0x278>
    case IRDA_CLOCKSOURCE_LSE:
      tmpreg = (uint16_t)(IRDA_DIV_SAMPLING16((uint32_t)LSE_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <IRDA_SetConfig+0x2ac>)
 8005dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	085b      	lsrs	r3, r3, #1
 8005de2:	441a      	add	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	617b      	str	r3, [r7, #20]
      break;
 8005df0:	e002      	b.n	8005df8 <IRDA_SetConfig+0x278>
    default:
      ret = HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	74bb      	strb	r3, [r7, #18]
      break;
 8005df6:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b0f      	cmp	r3, #15
 8005dfc:	d908      	bls.n	8005e10 <IRDA_SetConfig+0x290>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d204      	bcs.n	8005e10 <IRDA_SetConfig+0x290>
  {
    hirda->Instance->BRR = tmpreg;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	e001      	b.n	8005e14 <IRDA_SetConfig+0x294>
  }
  else
  {
    ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	74bb      	strb	r3, [r7, #18]
  }

  return ret;
 8005e14:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	efffe9f3 	.word	0xefffe9f3
 8005e24:	40013800 	.word	0x40013800
 8005e28:	40004400 	.word	0x40004400
 8005e2c:	0801d1b0 	.word	0x0801d1b0
 8005e30:	00f42400 	.word	0x00f42400

08005e34 <IRDA_CheckIdleState>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_CheckIdleState(IRDA_HandleTypeDef *hirda)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the IRDA ErrorCode */
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e42:	f7fc f9a1 	bl	8002188 <HAL_GetTick>
 8005e46:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b08      	cmp	r3, #8
 8005e54:	d10e      	bne.n	8005e74 <IRDA_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_TEACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 f82a 	bl	8005ebe <IRDA_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <IRDA_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e020      	b.n	8005eb6 <IRDA_CheckIdleState+0x82>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d10e      	bne.n	8005ea0 <IRDA_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_REACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e86:	9300      	str	r3, [sp, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 f814 	bl	8005ebe <IRDA_WaitOnFlagUntilTimeout>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <IRDA_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e00a      	b.n	8005eb6 <IRDA_CheckIdleState+0x82>
    }
  }

  /* Initialize the IRDA state*/
  hirda->gState  = HAL_IRDA_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	63da      	str	r2, [r3, #60]	; 0x3c
  hirda->RxState = HAL_IRDA_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Process Unlocked */
  __HAL_UNLOCK(hirda);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <IRDA_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	60f8      	str	r0, [r7, #12]
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	603b      	str	r3, [r7, #0]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8005ece:	e02a      	b.n	8005f26 <IRDA_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d026      	beq.n	8005f26 <IRDA_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed8:	f7fc f956 	bl	8002188 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d302      	bcc.n	8005eee <IRDA_WaitOnFlagUntilTimeout+0x30>
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d11b      	bne.n	8005f26 <IRDA_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005efc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	609a      	str	r2, [r3, #8]

        hirda->gState  = HAL_IRDA_STATE_READY;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2220      	movs	r2, #32
 8005f12:	63da      	str	r2, [r3, #60]	; 0x3c
        hirda->RxState = HAL_IRDA_STATE_READY;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2220      	movs	r2, #32
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hirda);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e00f      	b.n	8005f46 <IRDA_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	bf0c      	ite	eq
 8005f36:	2301      	moveq	r3, #1
 8005f38:	2300      	movne	r3, #0
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d0c5      	beq.n	8005ed0 <IRDA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <IRDA_EndRxTransfer>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f64:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0201 	bic.w	r2, r2, #1
 8005f74:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore hirda->RxState to Ready */
  hirda->RxState = HAL_IRDA_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <IRDA_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b084      	sub	sp, #16
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)(hdma->Parent);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f92:	60fb      	str	r3, [r7, #12]
  hirda->RxXferCount = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a
  hirda->TxXferCount = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	845a      	strh	r2, [r3, #34]	; 0x22
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered user error callback */
  hirda->ErrorCallback(hirda);
#else
  /* Call legacy weak user error callback */
  HAL_IRDA_ErrorCallback(hirda);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff fde3 	bl	8005b6c <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <IRDA_Transmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	2b21      	cmp	r3, #33	; 0x21
 8005fbc:	d141      	bne.n	8006042 <IRDA_Transmit_IT+0x94>
  {
    if (hirda->TxXferCount == 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d110      	bne.n	8005fea <IRDA_Transmit_IT+0x3c>
    {
      /* Disable the IRDA Transmit Data Register Empty Interrupt */
      CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fd6:	601a      	str	r2, [r3, #0]

      /* Enable the IRDA Transmit Complete Interrupt */
      SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fe6:	601a      	str	r2, [r3, #0]
        hirda->pTxBuffPtr++;
      }
      hirda->TxXferCount--;
    }
  }
}
 8005fe8:	e02b      	b.n	8006042 <IRDA_Transmit_IT+0x94>
      if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff2:	d114      	bne.n	800601e <IRDA_Transmit_IT+0x70>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d110      	bne.n	800601e <IRDA_Transmit_IT+0x70>
        tmp = (const uint16_t *) hirda->pTxBuffPtr; /* Derogation R.11.3 */
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	60fb      	str	r3, [r7, #12]
        hirda->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006010:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr += 2U;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	61da      	str	r2, [r3, #28]
 800601c:	e00a      	b.n	8006034 <IRDA_Transmit_IT+0x86>
        hirda->Instance->TDR = (uint8_t)(*hirda->pTxBuffPtr & 0xFFU);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	781a      	ldrb	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr++;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	61da      	str	r2, [r3, #28]
      hirda->TxXferCount--;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8006042:	bf00      	nop
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <IRDA_EndTransmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Disable the IRDA Transmit Complete Interrupt */
  CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006062:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore hirda->gState to Ready */
  hirda->gState = HAL_IRDA_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered Tx complete callback */
  hirda->TxCpltCallback(hirda);
#else
  /* Call legacy weak Tx complete callback */
  HAL_IRDA_TxCpltCallback(hirda);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff fd6c 	bl	8005b48 <HAL_IRDA_TxCpltCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <IRDA_Receive_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = hirda->Mask;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006084:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	2b22      	cmp	r3, #34	; 0x22
 800608c:	d14c      	bne.n	8006128 <IRDA_Receive_IT+0xb0>
  {
    uhdata = (uint16_t) READ_REG(hirda->Instance->RDR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	81bb      	strh	r3, [r7, #12]
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609e:	d112      	bne.n	80060c6 <IRDA_Receive_IT+0x4e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10e      	bne.n	80060c6 <IRDA_Receive_IT+0x4e>
    {
      tmp = (uint16_t *) hirda->pRxBuffPtr; /* Derogation R.11.3 */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 80060ae:	89ba      	ldrh	r2, [r7, #12]
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	4013      	ands	r3, r2
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	801a      	strh	r2, [r3, #0]
      hirda->pRxBuffPtr  += 2U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24
 80060c4:	e00d      	b.n	80060e2 <IRDA_Receive_IT+0x6a>
    }
    else
    {
      *hirda->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80060c6:	89bb      	ldrh	r3, [r7, #12]
 80060c8:	b2d9      	uxtb	r1, r3
 80060ca:	89fb      	ldrh	r3, [r7, #14]
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	400a      	ands	r2, r1
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
      hirda->pRxBuffPtr++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    hirda->RxXferCount--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hirda->RxXferCount == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d11e      	bne.n	8006138 <IRDA_Receive_IT+0xc0>
    {
      /* Disable the IRDA Parity Error Interrupt and RXNE interrupt */
      CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006108:	601a      	str	r2, [r3, #0]

      /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f022 0201 	bic.w	r2, r2, #1
 8006118:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore hirda->RxState to Ready */
      hirda->RxState = HAL_IRDA_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2220      	movs	r2, #32
 800611e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
      /* Call registered Rx complete callback */
      hirda->RxCpltCallback(hirda);
#else
      /* Call legacy weak Rx complete callback */
      HAL_IRDA_RxCpltCallback(hirda);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fd1a 	bl	8005b5a <HAL_IRDA_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
  }
}
 8006126:	e007      	b.n	8006138 <IRDA_Receive_IT+0xc0>
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699a      	ldr	r2, [r3, #24]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 0208 	orr.w	r2, r2, #8
 8006136:	619a      	str	r2, [r3, #24]
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a03      	ldr	r2, [pc, #12]	; (8006158 <HAL_PWR_EnableBkUpAccess+0x18>)
 800614a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614e:	6013      	str	r3, [r2, #0]
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	bc80      	pop	{r7}
 8006156:	4770      	bx	lr
 8006158:	58000400 	.word	0x58000400

0800615c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <HAL_PWREx_GetVoltageRange+0x14>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr
 8006170:	58000400 	.word	0x58000400

08006174 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006178:	4b06      	ldr	r3, [pc, #24]	; (8006194 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006184:	d101      	bne.n	800618a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	bc80      	pop	{r7}
 8006192:	4770      	bx	lr
 8006194:	58000400 	.word	0x58000400

08006198 <LL_RCC_HSE_EnableTcxo>:
{
 8006198:	b480      	push	{r7}
 800619a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061aa:	6013      	str	r3, [r2, #0]
}
 80061ac:	bf00      	nop
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr

080061b4 <LL_RCC_HSE_DisableTcxo>:
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80061b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061c6:	6013      	str	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr

080061d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061e2:	d101      	bne.n	80061e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_HSE_Enable>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006204:	6013      	str	r3, [r2, #0]
}
 8006206:	bf00      	nop
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <LL_RCC_HSE_Disable>:
{
 800620e:	b480      	push	{r7}
 8006210:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006220:	6013      	str	r3, [r2, #0]
}
 8006222:	bf00      	nop
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <LL_RCC_HSE_IsReady>:
{
 800622a:	b480      	push	{r7}
 800622c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800622e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006238:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800623c:	d101      	bne.n	8006242 <LL_RCC_HSE_IsReady+0x18>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <LL_RCC_HSE_IsReady+0x1a>
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <LL_RCC_HSI_Enable>:
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800625a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	46bd      	mov	sp, r7
 8006264:	bc80      	pop	{r7}
 8006266:	4770      	bx	lr

08006268 <LL_RCC_HSI_Disable>:
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800626c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800627a:	6013      	str	r3, [r2, #0]
}
 800627c:	bf00      	nop
 800627e:	46bd      	mov	sp, r7
 8006280:	bc80      	pop	{r7}
 8006282:	4770      	bx	lr

08006284 <LL_RCC_HSI_IsReady>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006296:	d101      	bne.n	800629c <LL_RCC_HSI_IsReady+0x18>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <LL_RCC_HSI_IsReady+0x1a>
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr

080062a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80062ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	061b      	lsls	r3, r3, #24
 80062bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c0:	4313      	orrs	r3, r2
 80062c2:	604b      	str	r3, [r1, #4]
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr

080062ce <LL_RCC_LSE_IsReady>:
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d101      	bne.n	80062e6 <LL_RCC_LSE_IsReady+0x18>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <LL_RCC_LSE_IsReady+0x1a>
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bc80      	pop	{r7}
 80062ee:	4770      	bx	lr

080062f0 <LL_RCC_LSI_Enable>:
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80062f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006308:	bf00      	nop
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <LL_RCC_LSI_Disable>:
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800631c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006328:	bf00      	nop
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr

08006330 <LL_RCC_LSI_IsReady>:
{
 8006330:	b480      	push	{r7}
 8006332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006338:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800633c:	f003 0302 	and.w	r3, r3, #2
 8006340:	2b02      	cmp	r3, #2
 8006342:	d101      	bne.n	8006348 <LL_RCC_LSI_IsReady+0x18>
 8006344:	2301      	movs	r3, #1
 8006346:	e000      	b.n	800634a <LL_RCC_LSI_IsReady+0x1a>
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <LL_RCC_MSI_Enable>:
{
 8006352:	b480      	push	{r7}
 8006354:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	6013      	str	r3, [r2, #0]
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	bc80      	pop	{r7}
 800636c:	4770      	bx	lr

0800636e <LL_RCC_MSI_Disable>:
{
 800636e:	b480      	push	{r7}
 8006370:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	6013      	str	r3, [r2, #0]
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <LL_RCC_MSI_IsReady>:
{
 800638a:	b480      	push	{r7}
 800638c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800638e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b02      	cmp	r3, #2
 800639a:	d101      	bne.n	80063a0 <LL_RCC_MSI_IsReady+0x16>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <LL_RCC_MSI_IsReady+0x18>
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bc80      	pop	{r7}
 80063a8:	4770      	bx	lr

080063aa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80063aa:	b480      	push	{r7}
 80063ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d101      	bne.n	80063c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <LL_RCC_MSI_GetRange>:
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	bc80      	pop	{r7}
 80063de:	4770      	bx	lr

080063e0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80063e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bc80      	pop	{r7}
 80063f6:	4770      	bx	lr

080063f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006412:	4313      	orrs	r3, r2
 8006414:	604b      	str	r3, [r1, #4]
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	bc80      	pop	{r7}
 800641e:	4770      	bx	lr

08006420 <LL_RCC_SetSysClkSource>:
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f023 0203 	bic.w	r2, r3, #3
 8006432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4313      	orrs	r3, r2
 800643a:	608b      	str	r3, [r1, #8]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <LL_RCC_GetSysClkSource>:
{
 8006446:	b480      	push	{r7}
 8006448:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800644a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 030c 	and.w	r3, r3, #12
}
 8006454:	4618      	mov	r0, r3
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <LL_RCC_SetAHBPrescaler>:
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800646e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4313      	orrs	r3, r2
 8006476:	608b      	str	r3, [r1, #8]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr

08006482 <LL_RCC_SetAHB3Prescaler>:
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800648a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006492:	f023 020f 	bic.w	r2, r3, #15
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bc80      	pop	{r7}
 80064ac:	4770      	bx	lr

080064ae <LL_RCC_SetAPB1Prescaler>:
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80064b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	608b      	str	r3, [r1, #8]
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <LL_RCC_SetAPB2Prescaler>:
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80064e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	608b      	str	r3, [r1, #8]
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <LL_RCC_GetAHBPrescaler>:
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80064fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <LL_RCC_GetAHB3Prescaler>:
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006518:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006522:	4618      	mov	r0, r3
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <LL_RCC_GetAPB1Prescaler>:
{
 800652a:	b480      	push	{r7}
 800652c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800652e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <LL_RCC_GetAPB2Prescaler>:
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	bc80      	pop	{r7}
 8006554:	4770      	bx	lr

08006556 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006556:	b480      	push	{r7}
 8006558:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800655a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006564:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006568:	6013      	str	r3, [r2, #0]
}
 800656a:	bf00      	nop
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr

08006572 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006572:	b480      	push	{r7}
 8006574:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006584:	6013      	str	r3, [r2, #0]
}
 8006586:	bf00      	nop
 8006588:	46bd      	mov	sp, r7
 800658a:	bc80      	pop	{r7}
 800658c:	4770      	bx	lr

0800658e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800658e:	b480      	push	{r7}
 8006590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a0:	d101      	bne.n	80065a6 <LL_RCC_PLL_IsReady+0x18>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <LL_RCC_PLL_IsReady+0x1a>
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	0a1b      	lsrs	r3, r3, #8
 80065bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr

080065c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80065cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	bc80      	pop	{r7}
 80065dc:	4770      	bx	lr

080065de <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80065de:	b480      	push	{r7}
 80065e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80065e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bc80      	pop	{r7}
 80065f2:	4770      	bx	lr

080065f4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80065f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f003 0303 	and.w	r3, r3, #3
}
 8006602:	4618      	mov	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800660a:	b480      	push	{r7}
 800660c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800660e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661c:	d101      	bne.n	8006622 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	bc80      	pop	{r7}
 800662a:	4770      	bx	lr

0800662c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006634:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006640:	d101      	bne.n	8006646 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	bc80      	pop	{r7}
 800664e:	4770      	bx	lr

08006650 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006662:	d101      	bne.n	8006668 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	bc80      	pop	{r7}
 8006670:	4770      	bx	lr

08006672 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006684:	d101      	bne.n	800668a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	bc80      	pop	{r7}
 8006692:	4770      	bx	lr

08006694 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e38b      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066a6:	f7ff fece 	bl	8006446 <LL_RCC_GetSysClkSource>
 80066aa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066ac:	f7ff ffa2 	bl	80065f4 <LL_RCC_PLL_GetMainSource>
 80066b0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80c9 	beq.w	8006852 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <HAL_RCC_OscConfig+0x3e>
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2b0c      	cmp	r3, #12
 80066ca:	d17b      	bne.n	80067c4 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d178      	bne.n	80067c4 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066d2:	f7ff fe5a 	bl	800638a <LL_RCC_MSI_IsReady>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_OscConfig+0x54>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e36a      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x72>
 80066fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006704:	e006      	b.n	8006714 <HAL_RCC_OscConfig+0x80>
 8006706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800670e:	091b      	lsrs	r3, r3, #4
 8006710:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006714:	4293      	cmp	r3, r2
 8006716:	d222      	bcs.n	800675e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fd51 	bl	80071c4 <RCC_SetFlashLatencyFromMSIRange>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e348      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800672c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006736:	f043 0308 	orr.w	r3, r3, #8
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674e:	4313      	orrs	r3, r2
 8006750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	4618      	mov	r0, r3
 8006758:	f7ff fe4e 	bl	80063f8 <LL_RCC_MSI_SetCalibTrimming>
 800675c:	e021      	b.n	80067a2 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800675e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006768:	f043 0308 	orr.w	r3, r3, #8
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006780:	4313      	orrs	r3, r2
 8006782:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff fe35 	bl	80063f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fd16 	bl	80071c4 <RCC_SetFlashLatencyFromMSIRange>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e30d      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80067a2:	f000 fcd7 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 80067a6:	4603      	mov	r3, r0
 80067a8:	4aa1      	ldr	r2, [pc, #644]	; (8006a30 <HAL_RCC_OscConfig+0x39c>)
 80067aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80067ac:	4ba1      	ldr	r3, [pc, #644]	; (8006a34 <HAL_RCC_OscConfig+0x3a0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7fb fcdf 	bl	8002174 <HAL_InitTick>
 80067b6:	4603      	mov	r3, r0
 80067b8:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80067ba:	7cfb      	ldrb	r3, [r7, #19]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d047      	beq.n	8006850 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 80067c0:	7cfb      	ldrb	r3, [r7, #19]
 80067c2:	e2fc      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d02c      	beq.n	8006826 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80067cc:	f7ff fdc1 	bl	8006352 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80067d0:	f7fb fcda 	bl	8002188 <HAL_GetTick>
 80067d4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80067d8:	f7fb fcd6 	bl	8002188 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e2e9      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80067ea:	f7ff fdce 	bl	800638a <LL_RCC_MSI_IsReady>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d0f1      	beq.n	80067d8 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067fe:	f043 0308 	orr.w	r3, r3, #8
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006816:	4313      	orrs	r3, r2
 8006818:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	4618      	mov	r0, r3
 8006820:	f7ff fdea 	bl	80063f8 <LL_RCC_MSI_SetCalibTrimming>
 8006824:	e015      	b.n	8006852 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006826:	f7ff fda2 	bl	800636e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800682a:	f7fb fcad 	bl	8002188 <HAL_GetTick>
 800682e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006832:	f7fb fca9 	bl	8002188 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e2bc      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8006844:	f7ff fda1 	bl	800638a <LL_RCC_MSI_IsReady>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1f1      	bne.n	8006832 <HAL_RCC_OscConfig+0x19e>
 800684e:	e000      	b.n	8006852 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006850:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d05f      	beq.n	800691e <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b08      	cmp	r3, #8
 8006862:	d005      	beq.n	8006870 <HAL_RCC_OscConfig+0x1dc>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b0c      	cmp	r3, #12
 8006868:	d10d      	bne.n	8006886 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b03      	cmp	r3, #3
 800686e:	d10a      	bne.n	8006886 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006870:	f7ff fcdb 	bl	800622a <LL_RCC_HSE_IsReady>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d050      	beq.n	800691c <HAL_RCC_OscConfig+0x288>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d14c      	bne.n	800691c <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e29b      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8006886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006898:	4313      	orrs	r3, r2
 800689a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068a4:	d102      	bne.n	80068ac <HAL_RCC_OscConfig+0x218>
 80068a6:	f7ff fca4 	bl	80061f2 <LL_RCC_HSE_Enable>
 80068aa:	e00d      	b.n	80068c8 <HAL_RCC_OscConfig+0x234>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80068b4:	d104      	bne.n	80068c0 <HAL_RCC_OscConfig+0x22c>
 80068b6:	f7ff fc6f 	bl	8006198 <LL_RCC_HSE_EnableTcxo>
 80068ba:	f7ff fc9a 	bl	80061f2 <LL_RCC_HSE_Enable>
 80068be:	e003      	b.n	80068c8 <HAL_RCC_OscConfig+0x234>
 80068c0:	f7ff fca5 	bl	800620e <LL_RCC_HSE_Disable>
 80068c4:	f7ff fc76 	bl	80061b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d012      	beq.n	80068f6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d0:	f7fb fc5a 	bl	8002188 <HAL_GetTick>
 80068d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80068d6:	e008      	b.n	80068ea <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d8:	f7fb fc56 	bl	8002188 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b64      	cmp	r3, #100	; 0x64
 80068e4:	d901      	bls.n	80068ea <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80068e6:	2303      	movs	r3, #3
 80068e8:	e269      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80068ea:	f7ff fc9e 	bl	800622a <LL_RCC_HSE_IsReady>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0f1      	beq.n	80068d8 <HAL_RCC_OscConfig+0x244>
 80068f4:	e013      	b.n	800691e <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fb fc47 	bl	8002188 <HAL_GetTick>
 80068fa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068fe:	f7fb fc43 	bl	8002188 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b64      	cmp	r3, #100	; 0x64
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e256      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006910:	f7ff fc8b 	bl	800622a <LL_RCC_HSE_IsReady>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f1      	bne.n	80068fe <HAL_RCC_OscConfig+0x26a>
 800691a:	e000      	b.n	800691e <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800691c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04b      	beq.n	80069c2 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b04      	cmp	r3, #4
 800692e:	d005      	beq.n	800693c <HAL_RCC_OscConfig+0x2a8>
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2b0c      	cmp	r3, #12
 8006934:	d113      	bne.n	800695e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	2b02      	cmp	r3, #2
 800693a:	d110      	bne.n	800695e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800693c:	f7ff fca2 	bl	8006284 <LL_RCC_HSI_IsReady>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <HAL_RCC_OscConfig+0x2be>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e235      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fca5 	bl	80062a6 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800695c:	e031      	b.n	80069c2 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d019      	beq.n	800699a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006966:	f7ff fc71 	bl	800624c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696a:	f7fb fc0d 	bl	8002188 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006972:	f7fb fc09 	bl	8002188 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e21c      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006984:	f7ff fc7e 	bl	8006284 <LL_RCC_HSI_IsReady>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0f1      	beq.n	8006972 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff fc87 	bl	80062a6 <LL_RCC_HSI_SetCalibTrimming>
 8006998:	e013      	b.n	80069c2 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800699a:	f7ff fc65 	bl	8006268 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699e:	f7fb fbf3 	bl	8002188 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80069a4:	e008      	b.n	80069b8 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a6:	f7fb fbef 	bl	8002188 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e202      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 80069b8:	f7ff fc64 	bl	8006284 <LL_RCC_HSI_IsReady>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f1      	bne.n	80069a6 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d06f      	beq.n	8006aae <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d057      	beq.n	8006a86 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 80069d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069de:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d036      	beq.n	8006a5c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e1db      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d018      	beq.n	8006a42 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 8006a10:	f7ff fc7e 	bl	8006310 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a14:	f7fb fbb8 	bl	8002188 <HAL_GetTick>
 8006a18:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8006a1a:	e00d      	b.n	8006a38 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a1c:	f7fb fbb4 	bl	8002188 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b11      	cmp	r3, #17
 8006a28:	d906      	bls.n	8006a38 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e1c7      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
 8006a2e:	bf00      	nop
 8006a30:	20000000 	.word	0x20000000
 8006a34:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 8006a38:	f7ff fc7a 	bl	8006330 <LL_RCC_LSI_IsReady>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1ec      	bne.n	8006a1c <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4a:	f023 0210 	bic.w	r2, r3, #16
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69db      	ldr	r3, [r3, #28]
 8006a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a5c:	f7ff fc48 	bl	80062f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a60:	f7fb fb92 	bl	8002188 <HAL_GetTick>
 8006a64:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a68:	f7fb fb8e 	bl	8002188 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b11      	cmp	r3, #17
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e1a1      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8006a7a:	f7ff fc59 	bl	8006330 <LL_RCC_LSI_IsReady>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0f1      	beq.n	8006a68 <HAL_RCC_OscConfig+0x3d4>
 8006a84:	e013      	b.n	8006aae <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a86:	f7ff fc43 	bl	8006310 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a8a:	f7fb fb7d 	bl	8002188 <HAL_GetTick>
 8006a8e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a92:	f7fb fb79 	bl	8002188 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b11      	cmp	r3, #17
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e18c      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8006aa4:	f7ff fc44 	bl	8006330 <LL_RCC_LSI_IsReady>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f1      	bne.n	8006a92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0304 	and.w	r3, r3, #4
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 80d8 	beq.w	8006c6c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006abc:	f7ff fb5a 	bl	8006174 <LL_PWR_IsEnabledBkUpAccess>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d113      	bne.n	8006aee <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006ac6:	f7ff fb3b 	bl	8006140 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006aca:	f7fb fb5d 	bl	8002188 <HAL_GetTick>
 8006ace:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006ad0:	e008      	b.n	8006ae4 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ad2:	f7fb fb59 	bl	8002188 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e16c      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8006ae4:	f7ff fb46 	bl	8006174 <LL_PWR_IsEnabledBkUpAccess>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f1      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d07b      	beq.n	8006bee <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b85      	cmp	r3, #133	; 0x85
 8006afc:	d003      	beq.n	8006b06 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d109      	bne.n	8006b1a <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b12:	f043 0304 	orr.w	r3, r3, #4
 8006b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b1a:	f7fb fb35 	bl	8002188 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b34:	e00a      	b.n	8006b4c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b36:	f7fb fb27 	bl	8002188 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e138      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006b4c:	f7ff fbbf 	bl	80062ce <LL_RCC_LSE_IsReady>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0ef      	beq.n	8006b36 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b81      	cmp	r3, #129	; 0x81
 8006b5c:	d003      	beq.n	8006b66 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	2b85      	cmp	r3, #133	; 0x85
 8006b64:	d121      	bne.n	8006baa <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b66:	f7fb fb0f 	bl	8002188 <HAL_GetTick>
 8006b6a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b80:	e00a      	b.n	8006b98 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fb fb01 	bl	8002188 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e112      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d0ec      	beq.n	8006b82 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8006ba8:	e060      	b.n	8006c6c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006baa:	f7fb faed 	bl	8002188 <HAL_GetTick>
 8006bae:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bc4:	e00a      	b.n	8006bdc <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bc6:	f7fb fadf 	bl	8002188 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e0f0      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1ec      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x532>
 8006bec:	e03e      	b.n	8006c6c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bee:	f7fb facb 	bl	8002188 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c08:	e00a      	b.n	8006c20 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0a:	f7fb fabd 	bl	8002188 <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e0ce      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1ec      	bne.n	8006c0a <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c30:	f7fb faaa 	bl	8002188 <HAL_GetTick>
 8006c34:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c4a:	e00a      	b.n	8006c62 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c4c:	f7fb fa9c 	bl	8002188 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e0ad      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006c62:	f7ff fb34 	bl	80062ce <LL_RCC_LSE_IsReady>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1ef      	bne.n	8006c4c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a3 	beq.w	8006dbc <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d076      	beq.n	8006d6a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d14b      	bne.n	8006d1c <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c84:	f7ff fc75 	bl	8006572 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fb fa7e 	bl	8002188 <HAL_GetTick>
 8006c8c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c90:	f7fb fa7a 	bl	8002188 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b0a      	cmp	r3, #10
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e08d      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006ca2:	f7ff fc74 	bl	800658e <LL_RCC_PLL_IsReady>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f1      	bne.n	8006c90 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	4b45      	ldr	r3, [pc, #276]	; (8006dc8 <HAL_RCC_OscConfig+0x734>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006cbe:	4311      	orrs	r1, r2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006cc4:	0212      	lsls	r2, r2, #8
 8006cc6:	4311      	orrs	r1, r2
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ccc:	4311      	orrs	r1, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006cd2:	4311      	orrs	r1, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce2:	f7ff fc38 	bl	8006556 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cf4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf6:	f7fb fa47 	bl	8002188 <HAL_GetTick>
 8006cfa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8006cfc:	e008      	b.n	8006d10 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfe:	f7fb fa43 	bl	8002188 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b0a      	cmp	r3, #10
 8006d0a:	d901      	bls.n	8006d10 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e056      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8006d10:	f7ff fc3d 	bl	800658e <LL_RCC_PLL_IsReady>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f1      	beq.n	8006cfe <HAL_RCC_OscConfig+0x66a>
 8006d1a:	e04f      	b.n	8006dbc <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1c:	f7ff fc29 	bl	8006572 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8006d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d3a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8006d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d42:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d44:	f7fb fa20 	bl	8002188 <HAL_GetTick>
 8006d48:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8006d4a:	e008      	b.n	8006d5e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4c:	f7fb fa1c 	bl	8002188 <HAL_GetTick>
 8006d50:	4602      	mov	r2, r0
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	2b0a      	cmp	r3, #10
 8006d58:	d901      	bls.n	8006d5e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e02f      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8006d5e:	f7ff fc16 	bl	800658e <LL_RCC_PLL_IsReady>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1f1      	bne.n	8006d4c <HAL_RCC_OscConfig+0x6b8>
 8006d68:	e028      	b.n	8006dbc <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d101      	bne.n	8006d76 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e023      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	f003 0203 	and.w	r2, r3, #3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d115      	bne.n	8006db8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d10e      	bne.n	8006db8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d106      	bne.n	8006db8 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3720      	adds	r7, #32
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	11c1808c 	.word	0x11c1808c

08006dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e10f      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006de0:	4b89      	ldr	r3, [pc, #548]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d91b      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dee:	4b86      	ldr	r3, [pc, #536]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f023 0207 	bic.w	r2, r3, #7
 8006df6:	4984      	ldr	r1, [pc, #528]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfe:	f7fb f9c3 	bl	8002188 <HAL_GetTick>
 8006e02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e06:	f7fb f9bf 	bl	8002188 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e0f3      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e18:	4b7b      	ldr	r3, [pc, #492]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d1ef      	bne.n	8006e06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d016      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fb10 	bl	800645c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e3c:	f7fb f9a4 	bl	8002188 <HAL_GetTick>
 8006e40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e42:	e008      	b.n	8006e56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e44:	f7fb f9a0 	bl	8002188 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e0d4      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006e56:	f7ff fbd8 	bl	800660a <LL_RCC_IsActiveFlag_HPRE>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d0f1      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d016      	beq.n	8006e9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff fb06 	bl	8006482 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e76:	f7fb f987 	bl	8002188 <HAL_GetTick>
 8006e7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006e7c:	e008      	b.n	8006e90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e7e:	f7fb f983 	bl	8002188 <HAL_GetTick>
 8006e82:	4602      	mov	r2, r0
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	2b02      	cmp	r3, #2
 8006e8a:	d901      	bls.n	8006e90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e0b7      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006e90:	f7ff fbcc 	bl	800662c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d0f1      	beq.n	8006e7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0304 	and.w	r3, r3, #4
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d016      	beq.n	8006ed4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7ff faff 	bl	80064ae <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006eb0:	f7fb f96a 	bl	8002188 <HAL_GetTick>
 8006eb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006eb8:	f7fb f966 	bl	8002188 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e09a      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006eca:	f7ff fbc1 	bl	8006650 <LL_RCC_IsActiveFlag_PPRE1>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f1      	beq.n	8006eb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d017      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	00db      	lsls	r3, r3, #3
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff faf4 	bl	80064d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006eec:	f7fb f94c 	bl	8002188 <HAL_GetTick>
 8006ef0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006ef2:	e008      	b.n	8006f06 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006ef4:	f7fb f948 	bl	8002188 <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e07c      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006f06:	f7ff fbb4 	bl	8006672 <LL_RCC_IsActiveFlag_PPRE2>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0f1      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d043      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d106      	bne.n	8006f32 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006f24:	f7ff f981 	bl	800622a <LL_RCC_HSE_IsReady>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d11e      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e066      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	2b03      	cmp	r3, #3
 8006f38:	d106      	bne.n	8006f48 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006f3a:	f7ff fb28 	bl	800658e <LL_RCC_PLL_IsReady>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d113      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e05b      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006f50:	f7ff fa1b 	bl	800638a <LL_RCC_MSI_IsReady>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d108      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e050      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006f5e:	f7ff f991 	bl	8006284 <LL_RCC_HSI_IsReady>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d101      	bne.n	8006f6c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e049      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff fa55 	bl	8006420 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f76:	f7fb f907 	bl	8002188 <HAL_GetTick>
 8006f7a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f7e:	f7fb f903 	bl	8002188 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e035      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f94:	f7ff fa57 	bl	8006446 <LL_RCC_GetSysClkSource>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d1ec      	bne.n	8006f7e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fa4:	4b18      	ldr	r3, [pc, #96]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d21b      	bcs.n	8006fea <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f023 0207 	bic.w	r2, r3, #7
 8006fba:	4913      	ldr	r1, [pc, #76]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fc2:	f7fb f8e1 	bl	8002188 <HAL_GetTick>
 8006fc6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc8:	e008      	b.n	8006fdc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006fca:	f7fb f8dd 	bl	8002188 <HAL_GetTick>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d901      	bls.n	8006fdc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e011      	b.n	8007000 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <HAL_RCC_ClockConfig+0x23c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d1ef      	bne.n	8006fca <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006fea:	f000 f8b3 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	4a06      	ldr	r2, [pc, #24]	; (800700c <HAL_RCC_ClockConfig+0x240>)
 8006ff2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <HAL_RCC_ClockConfig+0x244>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fb f8bb 	bl	8002174 <HAL_InitTick>
 8006ffe:	4603      	mov	r3, r0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	58004000 	.word	0x58004000
 800700c:	20000000 	.word	0x20000000
 8007010:	20000004 	.word	0x20000004

08007014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007022:	f7ff fa10 	bl	8006446 <LL_RCC_GetSysClkSource>
 8007026:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007028:	f7ff fae4 	bl	80065f4 <LL_RCC_PLL_GetMainSource>
 800702c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_GetSysClockFreq+0x2c>
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b0c      	cmp	r3, #12
 8007038:	d139      	bne.n	80070ae <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d136      	bne.n	80070ae <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007040:	f7ff f9b3 	bl	80063aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8007044:	4603      	mov	r3, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	d115      	bne.n	8007076 <HAL_RCC_GetSysClockFreq+0x62>
 800704a:	f7ff f9ae 	bl	80063aa <LL_RCC_MSI_IsEnabledRangeSelect>
 800704e:	4603      	mov	r3, r0
 8007050:	2b01      	cmp	r3, #1
 8007052:	d106      	bne.n	8007062 <HAL_RCC_GetSysClockFreq+0x4e>
 8007054:	f7ff f9b9 	bl	80063ca <LL_RCC_MSI_GetRange>
 8007058:	4603      	mov	r3, r0
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	e005      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x5a>
 8007062:	f7ff f9bd 	bl	80063e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007066:	4603      	mov	r3, r0
 8007068:	0a1b      	lsrs	r3, r3, #8
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	4a36      	ldr	r2, [pc, #216]	; (8007148 <HAL_RCC_GetSysClockFreq+0x134>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	e014      	b.n	80070a0 <HAL_RCC_GetSysClockFreq+0x8c>
 8007076:	f7ff f998 	bl	80063aa <LL_RCC_MSI_IsEnabledRangeSelect>
 800707a:	4603      	mov	r3, r0
 800707c:	2b01      	cmp	r3, #1
 800707e:	d106      	bne.n	800708e <HAL_RCC_GetSysClockFreq+0x7a>
 8007080:	f7ff f9a3 	bl	80063ca <LL_RCC_MSI_GetRange>
 8007084:	4603      	mov	r3, r0
 8007086:	091b      	lsrs	r3, r3, #4
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	e005      	b.n	800709a <HAL_RCC_GetSysClockFreq+0x86>
 800708e:	f7ff f9a7 	bl	80063e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8007092:	4603      	mov	r3, r0
 8007094:	091b      	lsrs	r3, r3, #4
 8007096:	f003 030f 	and.w	r3, r3, #15
 800709a:	4a2b      	ldr	r2, [pc, #172]	; (8007148 <HAL_RCC_GetSysClockFreq+0x134>)
 800709c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d115      	bne.n	80070d4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80070ac:	e012      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d102      	bne.n	80070ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <HAL_RCC_GetSysClockFreq+0x138>)
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e00c      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d109      	bne.n	80070d4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070c0:	f7ff f886 	bl	80061d0 <LL_RCC_HSE_IsEnabledDiv2>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d102      	bne.n	80070d0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80070ca:	4b20      	ldr	r3, [pc, #128]	; (800714c <HAL_RCC_GetSysClockFreq+0x138>)
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e001      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80070d0:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <HAL_RCC_GetSysClockFreq+0x13c>)
 80070d2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80070d4:	f7ff f9b7 	bl	8006446 <LL_RCC_GetSysClkSource>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b0c      	cmp	r3, #12
 80070dc:	d12f      	bne.n	800713e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80070de:	f7ff fa89 	bl	80065f4 <LL_RCC_PLL_GetMainSource>
 80070e2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d003      	beq.n	80070f2 <HAL_RCC_GetSysClockFreq+0xde>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d003      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0xe4>
 80070f0:	e00d      	b.n	800710e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80070f2:	4b16      	ldr	r3, [pc, #88]	; (800714c <HAL_RCC_GetSysClockFreq+0x138>)
 80070f4:	60fb      	str	r3, [r7, #12]
        break;
 80070f6:	e00d      	b.n	8007114 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80070f8:	f7ff f86a 	bl	80061d0 <LL_RCC_HSE_IsEnabledDiv2>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d102      	bne.n	8007108 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007102:	4b12      	ldr	r3, [pc, #72]	; (800714c <HAL_RCC_GetSysClockFreq+0x138>)
 8007104:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007106:	e005      	b.n	8007114 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCC_GetSysClockFreq+0x13c>)
 800710a:	60fb      	str	r3, [r7, #12]
        break;
 800710c:	e002      	b.n	8007114 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	60fb      	str	r3, [r7, #12]
        break;
 8007112:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007114:	f7ff fa4c 	bl	80065b0 <LL_RCC_PLL_GetN>
 8007118:	4602      	mov	r2, r0
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	fb03 f402 	mul.w	r4, r3, r2
 8007120:	f7ff fa5d 	bl	80065de <LL_RCC_PLL_GetDivider>
 8007124:	4603      	mov	r3, r0
 8007126:	091b      	lsrs	r3, r3, #4
 8007128:	3301      	adds	r3, #1
 800712a:	fbb4 f4f3 	udiv	r4, r4, r3
 800712e:	f7ff fa4b 	bl	80065c8 <LL_RCC_PLL_GetR>
 8007132:	4603      	mov	r3, r0
 8007134:	0f5b      	lsrs	r3, r3, #29
 8007136:	3301      	adds	r3, #1
 8007138:	fbb4 f3f3 	udiv	r3, r4, r3
 800713c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800713e:	697b      	ldr	r3, [r7, #20]
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	bd90      	pop	{r4, r7, pc}
 8007148:	0801d120 	.word	0x0801d120
 800714c:	00f42400 	.word	0x00f42400
 8007150:	01e84800 	.word	0x01e84800

08007154 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007154:	b598      	push	{r3, r4, r7, lr}
 8007156:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007158:	f7ff ff5c 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 800715c:	4604      	mov	r4, r0
 800715e:	f7ff f9cc 	bl	80064fa <LL_RCC_GetAHBPrescaler>
 8007162:	4603      	mov	r3, r0
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	4a03      	ldr	r2, [pc, #12]	; (8007178 <HAL_RCC_GetHCLKFreq+0x24>)
 800716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007170:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007174:	4618      	mov	r0, r3
 8007176:	bd98      	pop	{r3, r4, r7, pc}
 8007178:	0801d0c0 	.word	0x0801d0c0

0800717c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800717c:	b598      	push	{r3, r4, r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007180:	f7ff ffe8 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 8007184:	4604      	mov	r4, r0
 8007186:	f7ff f9d0 	bl	800652a <LL_RCC_GetAPB1Prescaler>
 800718a:	4603      	mov	r3, r0
 800718c:	0a1b      	lsrs	r3, r3, #8
 800718e:	4a03      	ldr	r2, [pc, #12]	; (800719c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007194:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd98      	pop	{r3, r4, r7, pc}
 800719c:	0801d100 	.word	0x0801d100

080071a0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a0:	b598      	push	{r3, r4, r7, lr}
 80071a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80071a4:	f7ff ffd6 	bl	8007154 <HAL_RCC_GetHCLKFreq>
 80071a8:	4604      	mov	r4, r0
 80071aa:	f7ff f9c9 	bl	8006540 <LL_RCC_GetAPB2Prescaler>
 80071ae:	4603      	mov	r3, r0
 80071b0:	0adb      	lsrs	r3, r3, #11
 80071b2:	4a03      	ldr	r2, [pc, #12]	; (80071c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80071bc:	4618      	mov	r0, r3
 80071be:	bd98      	pop	{r3, r4, r7, pc}
 80071c0:	0801d100 	.word	0x0801d100

080071c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80071c4:	b590      	push	{r4, r7, lr}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	091b      	lsrs	r3, r3, #4
 80071d0:	f003 030f 	and.w	r3, r3, #15
 80071d4:	4a10      	ldr	r2, [pc, #64]	; (8007218 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80071d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071da:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80071dc:	f7ff f998 	bl	8006510 <LL_RCC_GetAHB3Prescaler>
 80071e0:	4603      	mov	r3, r0
 80071e2:	091b      	lsrs	r3, r3, #4
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	4a0c      	ldr	r2, [pc, #48]	; (800721c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80071ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	4a09      	ldr	r2, [pc, #36]	; (8007220 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	0c9c      	lsrs	r4, r3, #18
 8007200:	f7fe ffac 	bl	800615c <HAL_PWREx_GetVoltageRange>
 8007204:	4603      	mov	r3, r0
 8007206:	4619      	mov	r1, r3
 8007208:	4620      	mov	r0, r4
 800720a:	f000 f80b 	bl	8007224 <RCC_SetFlashLatency>
 800720e:	4603      	mov	r3, r0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	bd90      	pop	{r4, r7, pc}
 8007218:	0801d120 	.word	0x0801d120
 800721c:	0801d0c0 	.word	0x0801d0c0
 8007220:	431bde83 	.word	0x431bde83

08007224 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	; 0x38
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800722e:	4a3a      	ldr	r2, [pc, #232]	; (8007318 <RCC_SetFlashLatency+0xf4>)
 8007230:	f107 0320 	add.w	r3, r7, #32
 8007234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007238:	6018      	str	r0, [r3, #0]
 800723a:	3304      	adds	r3, #4
 800723c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800723e:	4a37      	ldr	r2, [pc, #220]	; (800731c <RCC_SetFlashLatency+0xf8>)
 8007240:	f107 0318 	add.w	r3, r7, #24
 8007244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007248:	6018      	str	r0, [r3, #0]
 800724a:	3304      	adds	r3, #4
 800724c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800724e:	4a34      	ldr	r2, [pc, #208]	; (8007320 <RCC_SetFlashLatency+0xfc>)
 8007250:	f107 030c 	add.w	r3, r7, #12
 8007254:	ca07      	ldmia	r2, {r0, r1, r2}
 8007256:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007264:	d11b      	bne.n	800729e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007266:	2300      	movs	r3, #0
 8007268:	633b      	str	r3, [r7, #48]	; 0x30
 800726a:	e014      	b.n	8007296 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	005b      	lsls	r3, r3, #1
 8007270:	3338      	adds	r3, #56	; 0x38
 8007272:	443b      	add	r3, r7
 8007274:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007278:	461a      	mov	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4293      	cmp	r3, r2
 800727e:	d807      	bhi.n	8007290 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	3338      	adds	r3, #56	; 0x38
 8007286:	443b      	add	r3, r7
 8007288:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800728e:	e021      	b.n	80072d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	3301      	adds	r3, #1
 8007294:	633b      	str	r3, [r7, #48]	; 0x30
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	2b02      	cmp	r3, #2
 800729a:	d9e7      	bls.n	800726c <RCC_SetFlashLatency+0x48>
 800729c:	e01a      	b.n	80072d4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800729e:	2300      	movs	r3, #0
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a2:	e014      	b.n	80072ce <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	3338      	adds	r3, #56	; 0x38
 80072aa:	443b      	add	r3, r7
 80072ac:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80072b0:	461a      	mov	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d807      	bhi.n	80072c8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	3338      	adds	r3, #56	; 0x38
 80072be:	443b      	add	r3, r7
 80072c0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c6:	e005      	b.n	80072d4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80072c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ca:	3301      	adds	r3, #1
 80072cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d9e7      	bls.n	80072a4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <RCC_SetFlashLatency+0x100>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f023 0207 	bic.w	r2, r3, #7
 80072dc:	4911      	ldr	r1, [pc, #68]	; (8007324 <RCC_SetFlashLatency+0x100>)
 80072de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e0:	4313      	orrs	r3, r2
 80072e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072e4:	f7fa ff50 	bl	8002188 <HAL_GetTick>
 80072e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80072ea:	e008      	b.n	80072fe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80072ec:	f7fa ff4c 	bl	8002188 <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d901      	bls.n	80072fe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80072fa:	2303      	movs	r3, #3
 80072fc:	e007      	b.n	800730e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <RCC_SetFlashLatency+0x100>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007308:	429a      	cmp	r2, r3
 800730a:	d1ef      	bne.n	80072ec <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3738      	adds	r7, #56	; 0x38
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	0801c7a4 	.word	0x0801c7a4
 800731c:	0801c7ac 	.word	0x0801c7ac
 8007320:	0801c7b4 	.word	0x0801c7b4
 8007324:	58004000 	.word	0x58004000

08007328 <LL_RCC_LSE_IsReady>:
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800732c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b02      	cmp	r3, #2
 800733a:	d101      	bne.n	8007340 <LL_RCC_LSE_IsReady+0x18>
 800733c:	2301      	movs	r3, #1
 800733e:	e000      	b.n	8007342 <LL_RCC_LSE_IsReady+0x1a>
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <LL_RCC_SetUSARTClockSource>:
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007356:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	43db      	mvns	r3, r3
 8007360:	401a      	ands	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	b29b      	uxth	r3, r3
 8007366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	bc80      	pop	{r7}
 8007378:	4770      	bx	lr

0800737a <LL_RCC_SetI2SClockSource>:
{
 800737a:	b480      	push	{r7}
 800737c:	b083      	sub	sp, #12
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800738e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4313      	orrs	r3, r2
 8007396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	bc80      	pop	{r7}
 80073a2:	4770      	bx	lr

080073a4 <LL_RCC_SetLPUARTClockSource>:
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80073ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr

080073ce <LL_RCC_SetI2CClockSource>:
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80073d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	091b      	lsrs	r3, r3, #4
 80073e2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80073e6:	43db      	mvns	r3, r3
 80073e8:	401a      	ands	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80073f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr

08007406 <LL_RCC_SetLPTIMClockSource>:
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800740e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007412:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	041b      	lsls	r3, r3, #16
 800741c:	43db      	mvns	r3, r3
 800741e:	401a      	ands	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	041b      	lsls	r3, r3, #16
 8007424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr

08007438 <LL_RCC_SetRNGClockSource>:
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007448:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800744c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	bc80      	pop	{r7}
 8007460:	4770      	bx	lr

08007462 <LL_RCC_SetADCClockSource>:
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800746a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800746e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007472:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007476:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4313      	orrs	r3, r2
 800747e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <LL_RCC_SetRTCClockSource>:
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bc80      	pop	{r7}
 80074b4:	4770      	bx	lr

080074b6 <LL_RCC_GetRTCClockSource>:
{
 80074b6:	b480      	push	{r7}
 80074b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80074ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc80      	pop	{r7}
 80074cc:	4770      	bx	lr

080074ce <LL_RCC_ForceBackupDomainReset>:
{
 80074ce:	b480      	push	{r7}
 80074d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074e6:	bf00      	nop
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bc80      	pop	{r7}
 80074ec:	4770      	bx	lr

080074ee <LL_RCC_ReleaseBackupDomainReset>:
{
 80074ee:	b480      	push	{r7}
 80074f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007506:	bf00      	nop
 8007508:	46bd      	mov	sp, r7
 800750a:	bc80      	pop	{r7}
 800750c:	4770      	bx	lr
	...

08007510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800751c:	2300      	movs	r3, #0
 800751e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007520:	2300      	movs	r3, #0
 8007522:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d058      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007530:	f7fe fe06 	bl	8006140 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007534:	f7fa fe28 	bl	8002188 <HAL_GetTick>
 8007538:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800753a:	e009      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800753c:	f7fa fe24 	bl	8002188 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d902      	bls.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	74fb      	strb	r3, [r7, #19]
        break;
 800754e:	e006      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007550:	4b7b      	ldr	r3, [pc, #492]	; (8007740 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800755c:	d1ee      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800755e:	7cfb      	ldrb	r3, [r7, #19]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d13c      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007564:	f7ff ffa7 	bl	80074b6 <LL_RCC_GetRTCClockSource>
 8007568:	4602      	mov	r2, r0
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756e:	429a      	cmp	r2, r3
 8007570:	d00f      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007580:	f7ff ffa5 	bl	80074ce <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007584:	f7ff ffb3 	bl	80074ee <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007588:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b00      	cmp	r3, #0
 800759a:	d014      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fa fdf4 	bl	8002188 <HAL_GetTick>
 80075a0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80075a2:	e00b      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a4:	f7fa fdf0 	bl	8002188 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d902      	bls.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	74fb      	strb	r3, [r7, #19]
            break;
 80075ba:	e004      	b.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80075bc:	f7ff feb4 	bl	8007328 <LL_RCC_LSE_IsReady>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d1ee      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff ff5b 	bl	800748c <LL_RCC_SetRTCClockSource>
 80075d6:	e004      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	74bb      	strb	r3, [r7, #18]
 80075dc:	e001      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075de:	7cfb      	ldrb	r3, [r7, #19]
 80075e0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d004      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7ff fea9 	bl	800734a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d004      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff fe9e 	bl	800734a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d004      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff fec0 	bl	80073a4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800762c:	2b00      	cmp	r3, #0
 800762e:	d004      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fee6 	bl	8007406 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007642:	2b00      	cmp	r3, #0
 8007644:	d004      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fedb 	bl	8007406 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007658:	2b00      	cmp	r3, #0
 800765a:	d004      	beq.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fed0 	bl	8007406 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d004      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fea9 	bl	80073ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff fe9e 	bl	80073ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fe93 	bl	80073ce <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0310 	and.w	r3, r3, #16
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d011      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fe5e 	bl	800737a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c6:	d107      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80076c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fea5 	bl	8007438 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d107      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80076f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007704:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d011      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fea3 	bl	8007462 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007724:	d107      	bne.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007734:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007736:	7cbb      	ldrb	r3, [r7, #18]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	58000400 	.word	0x58000400

08007744 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d068      	beq.n	8007828 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa fa82 	bl	8001c74 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007778:	4b2e      	ldr	r3, [pc, #184]	; (8007834 <HAL_RTC_Init+0xf0>)
 800777a:	22ca      	movs	r2, #202	; 0xca
 800777c:	625a      	str	r2, [r3, #36]	; 0x24
 800777e:	4b2d      	ldr	r3, [pc, #180]	; (8007834 <HAL_RTC_Init+0xf0>)
 8007780:	2253      	movs	r2, #83	; 0x53
 8007782:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fa0f 	bl	8007ba8 <RTC_EnterInitMode>
 800778a:	4603      	mov	r3, r0
 800778c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d13f      	bne.n	8007814 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007794:	4b27      	ldr	r3, [pc, #156]	; (8007834 <HAL_RTC_Init+0xf0>)
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	4a26      	ldr	r2, [pc, #152]	; (8007834 <HAL_RTC_Init+0xf0>)
 800779a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800779e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a2:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80077a4:	4b23      	ldr	r3, [pc, #140]	; (8007834 <HAL_RTC_Init+0xf0>)
 80077a6:	699a      	ldr	r2, [r3, #24]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6859      	ldr	r1, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	4319      	orrs	r1, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	430b      	orrs	r3, r1
 80077b8:	491e      	ldr	r1, [pc, #120]	; (8007834 <HAL_RTC_Init+0xf0>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	491a      	ldr	r1, [pc, #104]	; (8007834 <HAL_RTC_Init+0xf0>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80077ce:	4b19      	ldr	r3, [pc, #100]	; (8007834 <HAL_RTC_Init+0xf0>)
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077de:	430b      	orrs	r3, r1
 80077e0:	4914      	ldr	r1, [pc, #80]	; (8007834 <HAL_RTC_Init+0xf0>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fa12 	bl	8007c10 <RTC_ExitInitMode>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10e      	bne.n	8007814 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 80077f6:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <HAL_RTC_Init+0xf0>)
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6a19      	ldr	r1, [r3, #32]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	4319      	orrs	r1, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	430b      	orrs	r3, r1
 800780e:	4909      	ldr	r1, [pc, #36]	; (8007834 <HAL_RTC_Init+0xf0>)
 8007810:	4313      	orrs	r3, r2
 8007812:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007814:	4b07      	ldr	r3, [pc, #28]	; (8007834 <HAL_RTC_Init+0xf0>)
 8007816:	22ff      	movs	r2, #255	; 0xff
 8007818:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d103      	bne.n	8007828 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	40002800 	.word	0x40002800

08007838 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007838:	b590      	push	{r4, r7, lr}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_RTC_SetAlarm_IT+0x1e>
 8007852:	2302      	movs	r3, #2
 8007854:	e0f3      	b.n	8007a3e <HAL_RTC_SetAlarm_IT+0x206>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2202      	movs	r2, #2
 8007862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8007866:	4b78      	ldr	r3, [pc, #480]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800786e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007876:	d06a      	beq.n	800794e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d13a      	bne.n	80078f4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800787e:	4b72      	ldr	r3, [pc, #456]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2200      	movs	r2, #0
 800788e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f000 f9f5 	bl	8007c8c <RTC_ByteToBcd2>
 80078a2:	4603      	mov	r3, r0
 80078a4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f000 f9ee 	bl	8007c8c <RTC_ByteToBcd2>
 80078b0:	4603      	mov	r3, r0
 80078b2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80078b4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	789b      	ldrb	r3, [r3, #2]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f9e6 	bl	8007c8c <RTC_ByteToBcd2>
 80078c0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80078c2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	78db      	ldrb	r3, [r3, #3]
 80078ca:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80078cc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f9d8 	bl	8007c8c <RTC_ByteToBcd2>
 80078dc:	4603      	mov	r3, r0
 80078de:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80078e0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80078e8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
 80078f2:	e02c      	b.n	800794e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 80078fc:	d00d      	beq.n	800791a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007906:	d008      	beq.n	800791a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007908:	4b4f      	ldr	r3, [pc, #316]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	2200      	movs	r2, #0
 8007918:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007926:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007928:	68ba      	ldr	r2, [r7, #8]
 800792a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800792c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	78db      	ldrb	r3, [r3, #3]
 8007932:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007934:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800793c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800793e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007944:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800794a:	4313      	orrs	r3, r2
 800794c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800794e:	4b3e      	ldr	r3, [pc, #248]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007950:	22ca      	movs	r2, #202	; 0xca
 8007952:	625a      	str	r2, [r3, #36]	; 0x24
 8007954:	4b3c      	ldr	r3, [pc, #240]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007956:	2253      	movs	r2, #83	; 0x53
 8007958:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007962:	d12c      	bne.n	80079be <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007964:	4b38      	ldr	r3, [pc, #224]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	4a37      	ldr	r2, [pc, #220]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 800796a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800796e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007970:	4b35      	ldr	r3, [pc, #212]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007972:	2201      	movs	r2, #1
 8007974:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797c:	d107      	bne.n	800798e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	4930      	ldr	r1, [pc, #192]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007988:	4313      	orrs	r3, r2
 800798a:	644b      	str	r3, [r1, #68]	; 0x44
 800798c:	e006      	b.n	800799c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800798e:	4a2e      	ldr	r2, [pc, #184]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007994:	4a2c      	ldr	r2, [pc, #176]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800799c:	4a2a      	ldr	r2, [pc, #168]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	f043 0201 	orr.w	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80079b0:	4b25      	ldr	r3, [pc, #148]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	4a24      	ldr	r2, [pc, #144]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079b6:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 80079ba:	6193      	str	r3, [r2, #24]
 80079bc:	e02b      	b.n	8007a16 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80079be:	4b22      	ldr	r3, [pc, #136]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	4a21      	ldr	r2, [pc, #132]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079c4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80079c8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80079ca:	4b1f      	ldr	r3, [pc, #124]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079cc:	2202      	movs	r2, #2
 80079ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d6:	d107      	bne.n	80079e8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	699a      	ldr	r2, [r3, #24]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	69db      	ldr	r3, [r3, #28]
 80079e0:	4919      	ldr	r1, [pc, #100]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80079e6:	e006      	b.n	80079f6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80079e8:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80079ee:	4a16      	ldr	r2, [pc, #88]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80079f6:	4a14      	ldr	r2, [pc, #80]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	f043 0202 	orr.w	r2, r3, #2
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	4a0e      	ldr	r2, [pc, #56]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a10:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8007a14:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007a16:	4b0d      	ldr	r3, [pc, #52]	; (8007a4c <HAL_RTC_SetAlarm_IT+0x214>)
 8007a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1c:	4a0b      	ldr	r2, [pc, #44]	; (8007a4c <HAL_RTC_SetAlarm_IT+0x214>)
 8007a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a26:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <HAL_RTC_SetAlarm_IT+0x210>)
 8007a28:	22ff      	movs	r2, #255	; 0xff
 8007a2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	371c      	adds	r7, #28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd90      	pop	{r4, r7, pc}
 8007a46:	bf00      	nop
 8007a48:	40002800 	.word	0x40002800
 8007a4c:	58000800 	.word	0x58000800

08007a50 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_RTC_DeactivateAlarm+0x18>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e048      	b.n	8007afa <HAL_RTC_DeactivateAlarm+0xaa>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a78:	4b22      	ldr	r3, [pc, #136]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007a7a:	22ca      	movs	r2, #202	; 0xca
 8007a7c:	625a      	str	r2, [r3, #36]	; 0x24
 8007a7e:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007a80:	2253      	movs	r2, #83	; 0x53
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8a:	d115      	bne.n	8007ab8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8007a8c:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	4a1c      	ldr	r2, [pc, #112]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a96:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8007a98:	4b1a      	ldr	r3, [pc, #104]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9c:	4a19      	ldr	r2, [pc, #100]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007a9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007aa2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	f023 0201 	bic.w	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007ab0:	4b14      	ldr	r3, [pc, #80]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ab6:	e014      	b.n	8007ae2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007ab8:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	4a11      	ldr	r2, [pc, #68]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007abe:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8007ac2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac8:	4a0e      	ldr	r2, [pc, #56]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007aca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ace:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	f023 0202 	bic.w	r2, r3, #2
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007adc:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ade:	2202      	movs	r2, #2
 8007ae0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae2:	4b08      	ldr	r3, [pc, #32]	; (8007b04 <HAL_RTC_DeactivateAlarm+0xb4>)
 8007ae4:	22ff      	movs	r2, #255	; 0xff
 8007ae6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	370c      	adds	r7, #12
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr
 8007b04:	40002800 	.word	0x40002800

08007b08 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8007b10:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007b12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d005      	beq.n	8007b32 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007b26:	4b0c      	ldr	r3, [pc, #48]	; (8007b58 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007b28:	2201      	movs	r2, #1
 8007b2a:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7fa fd56 	bl	80025de <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d005      	beq.n	8007b48 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <HAL_RTC_AlarmIRQHandler+0x50>)
 8007b3e:	2202      	movs	r2, #2
 8007b40:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f94a 	bl	8007ddc <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40002800 	.word	0x40002800

08007b5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <HAL_RTC_WaitForSynchro+0x48>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	4a0e      	ldr	r2, [pc, #56]	; (8007ba4 <HAL_RTC_WaitForSynchro+0x48>)
 8007b6a:	f023 0320 	bic.w	r3, r3, #32
 8007b6e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8007b70:	f7fa fb0a 	bl	8002188 <HAL_GetTick>
 8007b74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007b76:	e009      	b.n	8007b8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b78:	f7fa fb06 	bl	8002188 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b86:	d901      	bls.n	8007b8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	e006      	b.n	8007b9a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007b8c:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <HAL_RTC_WaitForSynchro+0x48>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f003 0320 	and.w	r3, r3, #32
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0ef      	beq.n	8007b78 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3710      	adds	r7, #16
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	40002800 	.word	0x40002800

08007ba8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007bb4:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <RTC_EnterInitMode+0x64>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d120      	bne.n	8007c02 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007bc0:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <RTC_EnterInitMode+0x64>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <RTC_EnterInitMode+0x64>)
 8007bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8007bcc:	f7fa fadc 	bl	8002188 <HAL_GetTick>
 8007bd0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007bd2:	e00d      	b.n	8007bf0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007bd4:	f7fa fad8 	bl	8002188 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007be2:	d905      	bls.n	8007bf0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2203      	movs	r2, #3
 8007bec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007bf0:	4b06      	ldr	r3, [pc, #24]	; (8007c0c <RTC_EnterInitMode+0x64>)
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d102      	bne.n	8007c02 <RTC_EnterInitMode+0x5a>
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d1e8      	bne.n	8007bd4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	40002800 	.word	0x40002800

08007c10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	4a19      	ldr	r2, [pc, #100]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c26:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007c28:	4b17      	ldr	r3, [pc, #92]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10c      	bne.n	8007c4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff ff91 	bl	8007b5c <HAL_RTC_WaitForSynchro>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d01e      	beq.n	8007c7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2203      	movs	r2, #3
 8007c44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	73fb      	strb	r3, [r7, #15]
 8007c4c:	e017      	b.n	8007c7e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c4e:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	4a0d      	ldr	r2, [pc, #52]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c54:	f023 0320 	bic.w	r3, r3, #32
 8007c58:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f7ff ff7e 	bl	8007b5c <HAL_RTC_WaitForSynchro>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c72:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <RTC_ExitInitMode+0x78>)
 8007c78:	f043 0320 	orr.w	r3, r3, #32
 8007c7c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40002800 	.word	0x40002800

08007c8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8007c9e:	e005      	b.n	8007cac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007ca6:	7afb      	ldrb	r3, [r7, #11]
 8007ca8:	3b0a      	subs	r3, #10
 8007caa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	2b09      	cmp	r3, #9
 8007cb0:	d8f6      	bhi.n	8007ca0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	b2db      	uxtb	r3, r3
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bc80      	pop	{r7}
 8007cc8:	4770      	bx	lr
	...

08007ccc <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e01f      	b.n	8007d22 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	; (8007d2c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007cf4:	22ca      	movs	r2, #202	; 0xca
 8007cf6:	625a      	str	r2, [r3, #36]	; 0x24
 8007cf8:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007cfa:	2253      	movs	r2, #83	; 0x53
 8007cfc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d04:	f043 0320 	orr.w	r3, r3, #32
 8007d08:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d0a:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007d0c:	22ff      	movs	r2, #255	; 0xff
 8007d0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bc80      	pop	{r7}
 8007d2a:	4770      	bx	lr
 8007d2c:	40002800 	.word	0x40002800

08007d30 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d101      	bne.n	8007d46 <HAL_RTCEx_SetSSRU_IT+0x16>
 8007d42:	2302      	movs	r3, #2
 8007d44:	e027      	b.n	8007d96 <HAL_RTCEx_SetSSRU_IT+0x66>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d56:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007d58:	22ca      	movs	r2, #202	; 0xca
 8007d5a:	625a      	str	r2, [r3, #36]	; 0x24
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007d5e:	2253      	movs	r2, #83	; 0x53
 8007d60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8007d62:	4b0f      	ldr	r3, [pc, #60]	; (8007da0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	4a0e      	ldr	r2, [pc, #56]	; (8007da0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6c:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d74:	4a0b      	ldr	r2, [pc, #44]	; (8007da4 <HAL_RTCEx_SetSSRU_IT+0x74>)
 8007d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7e:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8007d80:	22ff      	movs	r2, #255	; 0xff
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	370c      	adds	r7, #12
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bc80      	pop	{r7}
 8007d9e:	4770      	bx	lr
 8007da0:	40002800 	.word	0x40002800
 8007da4:	58000800 	.word	0x58000800

08007da8 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8007db0:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d005      	beq.n	8007dc8 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007dbc:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8007dbe:	2240      	movs	r2, #64	; 0x40
 8007dc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fa fc15 	bl	80025f2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40002800 	.word	0x40002800

08007ddc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
	...

08007df0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007dfc:	4b07      	ldr	r3, [pc, #28]	; (8007e1c <HAL_RTCEx_BKUPWrite+0x2c>)
 8007dfe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	4413      	add	r3, r2
 8007e08:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
}
 8007e10:	bf00      	nop
 8007e12:	371c      	adds	r7, #28
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	4000b100 	.word	0x4000b100

08007e20 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8007e2a:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <HAL_RTCEx_BKUPRead+0x28>)
 8007e2c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	4000b100 	.word	0x4000b100

08007e4c <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007e54:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e5c:	4904      	ldr	r1, [pc, #16]	; (8007e70 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	608b      	str	r3, [r1, #8]
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bc80      	pop	{r7}
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	58000400 	.word	0x58000400

08007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7e:	4a04      	ldr	r2, [pc, #16]	; (8007e90 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007e88:	bf00      	nop
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	58000400 	.word	0x58000400

08007e94 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007e98:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e9e:	4a04      	ldr	r2, [pc, #16]	; (8007eb0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007ea0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007ea8:	bf00      	nop
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	58000400 	.word	0x58000400

08007eb4 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007eb8:	4b03      	ldr	r3, [pc, #12]	; (8007ec8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ebe:	619a      	str	r2, [r3, #24]
}
 8007ec0:	bf00      	nop
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr
 8007ec8:	58000400 	.word	0x58000400

08007ecc <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007ed0:	4b06      	ldr	r3, [pc, #24]	; (8007eec <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d101      	bne.n	8007ee0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bc80      	pop	{r7}
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	58000400 	.word	0x58000400

08007ef0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007ef4:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d101      	bne.n	8007f04 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bc80      	pop	{r7}
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	58000400 	.word	0x58000400

08007f14 <LL_RCC_RF_DisableReset>:
{
 8007f14:	b480      	push	{r7}
 8007f16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007f2c:	bf00      	nop
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <LL_RCC_IsRFUnderReset>:
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f48:	d101      	bne.n	8007f4e <LL_RCC_IsRFUnderReset+0x1a>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e000      	b.n	8007f50 <LL_RCC_IsRFUnderReset+0x1c>
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bc80      	pop	{r7}
 8007f56:	4770      	bx	lr

08007f58 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007f60:	4b06      	ldr	r3, [pc, #24]	; (8007f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8007f62:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8007f66:	4905      	ldr	r1, [pc, #20]	; (8007f7c <LL_EXTI_EnableIT_32_63+0x24>)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	58000800 	.word	0x58000800

08007f80 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d103      	bne.n	8007f96 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	73fb      	strb	r3, [r7, #15]
    return status;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	e04b      	b.n	800802e <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	799b      	ldrb	r3, [r3, #6]
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7f9 ff4e 	bl	8001e4c <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8007fb6:	f7ff ffad 	bl	8007f14 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007fba:	4b1f      	ldr	r3, [pc, #124]	; (8008038 <HAL_SUBGHZ_Init+0xb8>)
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	0cdb      	lsrs	r3, r3, #19
 8007fc8:	2264      	movs	r2, #100	; 0x64
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d105      	bne.n	8007fe2 <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	609a      	str	r2, [r3, #8]
      break;
 8007fe0:	e007      	b.n	8007ff2 <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007fe8:	f7ff ffa4 	bl	8007f34 <LL_RCC_IsRFUnderReset>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1ee      	bne.n	8007fd0 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8007ff2:	f7ff ff3f 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007ff6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007ffa:	f7ff ffad 	bl	8007f58 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8007ffe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008002:	f7ff ff23 	bl	8007e4c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8008006:	f7ff ff55 	bl	8007eb4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800800a:	7bfb      	ldrb	r3, [r7, #15]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 faad 	bl	8008574 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	719a      	strb	r2, [r3, #6]

  return status;
 800802c:	7bfb      	ldrb	r3, [r7, #15]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20000000 	.word	0x20000000

0800803c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	461a      	mov	r2, r3
 8008048:	460b      	mov	r3, r1
 800804a:	817b      	strh	r3, [r7, #10]
 800804c:	4613      	mov	r3, r2
 800804e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	799b      	ldrb	r3, [r3, #6]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b01      	cmp	r3, #1
 8008058:	d14a      	bne.n	80080f0 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	795b      	ldrb	r3, [r3, #5]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8008062:	2302      	movs	r3, #2
 8008064:	e045      	b.n	80080f2 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2202      	movs	r2, #2
 8008070:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fb4c 	bl	8008710 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008078:	f7ff ff0c 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800807c:	210d      	movs	r1, #13
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fa98 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008084:	897b      	ldrh	r3, [r7, #10]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b29b      	uxth	r3, r3
 800808a:	b2db      	uxtb	r3, r3
 800808c:	4619      	mov	r1, r3
 800808e:	68f8      	ldr	r0, [r7, #12]
 8008090:	f000 fa90 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008094:	897b      	ldrh	r3, [r7, #10]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	4619      	mov	r1, r3
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fa8a 	bl	80085b4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	82bb      	strh	r3, [r7, #20]
 80080a4:	e00a      	b.n	80080bc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80080a6:	8abb      	ldrh	r3, [r7, #20]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	4619      	mov	r1, r3
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fa7f 	bl	80085b4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80080b6:	8abb      	ldrh	r3, [r7, #20]
 80080b8:	3301      	adds	r3, #1
 80080ba:	82bb      	strh	r3, [r7, #20]
 80080bc:	8aba      	ldrh	r2, [r7, #20]
 80080be:	893b      	ldrh	r3, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d3f0      	bcc.n	80080a6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80080c4:	f7ff fed6 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f000 fb45 	bl	8008758 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	75fb      	strb	r3, [r7, #23]
 80080da:	e001      	b.n	80080e0 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2201      	movs	r2, #1
 80080e4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	715a      	strb	r2, [r3, #5]

    return status;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	e000      	b.n	80080f2 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80080f0:	2302      	movs	r3, #2
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3718      	adds	r7, #24
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b088      	sub	sp, #32
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	461a      	mov	r2, r3
 8008106:	460b      	mov	r3, r1
 8008108:	817b      	strh	r3, [r7, #10]
 800810a:	4613      	mov	r3, r2
 800810c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	799b      	ldrb	r3, [r3, #6]
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b01      	cmp	r3, #1
 800811a:	d14a      	bne.n	80081b2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	795b      	ldrb	r3, [r3, #5]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d101      	bne.n	8008128 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8008124:	2302      	movs	r3, #2
 8008126:	e045      	b.n	80081b4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 faee 	bl	8008710 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008134:	f7ff feae 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8008138:	211d      	movs	r1, #29
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fa3a 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008140:	897b      	ldrh	r3, [r7, #10]
 8008142:	0a1b      	lsrs	r3, r3, #8
 8008144:	b29b      	uxth	r3, r3
 8008146:	b2db      	uxtb	r3, r3
 8008148:	4619      	mov	r1, r3
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f000 fa32 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008150:	897b      	ldrh	r3, [r7, #10]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	f000 fa2c 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800815c:	2100      	movs	r1, #0
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 fa28 	bl	80085b4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008164:	2300      	movs	r3, #0
 8008166:	82fb      	strh	r3, [r7, #22]
 8008168:	e009      	b.n	800817e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800816a:	69b9      	ldr	r1, [r7, #24]
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 fa77 	bl	8008660 <SUBGHZSPI_Receive>
      pData++;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	3301      	adds	r3, #1
 8008176:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008178:	8afb      	ldrh	r3, [r7, #22]
 800817a:	3301      	adds	r3, #1
 800817c:	82fb      	strh	r3, [r7, #22]
 800817e:	8afa      	ldrh	r2, [r7, #22]
 8008180:	893b      	ldrh	r3, [r7, #8]
 8008182:	429a      	cmp	r2, r3
 8008184:	d3f1      	bcc.n	800816a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008186:	f7ff fe75 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f000 fae4 	bl	8008758 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	77fb      	strb	r3, [r7, #31]
 800819c:	e001      	b.n	80081a2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2201      	movs	r2, #1
 80081a6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	715a      	strb	r2, [r3, #5]

    return status;
 80081ae:	7ffb      	ldrb	r3, [r7, #31]
 80081b0:	e000      	b.n	80081b4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80081b2:	2302      	movs	r3, #2
  }
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3720      	adds	r7, #32
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	461a      	mov	r2, r3
 80081c8:	460b      	mov	r3, r1
 80081ca:	72fb      	strb	r3, [r7, #11]
 80081cc:	4613      	mov	r3, r2
 80081ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	799b      	ldrb	r3, [r3, #6]
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d14a      	bne.n	8008270 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	795b      	ldrb	r3, [r3, #5]
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d101      	bne.n	80081e6 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e045      	b.n	8008272 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2201      	movs	r2, #1
 80081ea:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fa8f 	bl	8008710 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80081f2:	7afb      	ldrb	r3, [r7, #11]
 80081f4:	2b84      	cmp	r3, #132	; 0x84
 80081f6:	d002      	beq.n	80081fe <HAL_SUBGHZ_ExecSetCmd+0x42>
 80081f8:	7afb      	ldrb	r3, [r7, #11]
 80081fa:	2b94      	cmp	r3, #148	; 0x94
 80081fc:	d103      	bne.n	8008206 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2201      	movs	r2, #1
 8008202:	711a      	strb	r2, [r3, #4]
 8008204:	e002      	b.n	800820c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2200      	movs	r2, #0
 800820a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800820c:	f7ff fe42 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008210:	7afb      	ldrb	r3, [r7, #11]
 8008212:	4619      	mov	r1, r3
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 f9cd 	bl	80085b4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800821a:	2300      	movs	r3, #0
 800821c:	82bb      	strh	r3, [r7, #20]
 800821e:	e00a      	b.n	8008236 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008220:	8abb      	ldrh	r3, [r7, #20]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	4413      	add	r3, r2
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 f9c2 	bl	80085b4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008230:	8abb      	ldrh	r3, [r7, #20]
 8008232:	3301      	adds	r3, #1
 8008234:	82bb      	strh	r3, [r7, #20]
 8008236:	8aba      	ldrh	r2, [r7, #20]
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	429a      	cmp	r2, r3
 800823c:	d3f0      	bcc.n	8008220 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800823e:	f7ff fe19 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	2b84      	cmp	r3, #132	; 0x84
 8008246:	d002      	beq.n	800824e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fa85 	bl	8008758 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	75fb      	strb	r3, [r7, #23]
 800825a:	e001      	b.n	8008260 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	715a      	strb	r2, [r3, #5]

    return status;
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	e000      	b.n	8008272 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008270:	2302      	movs	r3, #2
  }
}
 8008272:	4618      	mov	r0, r3
 8008274:	3718      	adds	r7, #24
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b088      	sub	sp, #32
 800827e:	af00      	add	r7, sp, #0
 8008280:	60f8      	str	r0, [r7, #12]
 8008282:	607a      	str	r2, [r7, #4]
 8008284:	461a      	mov	r2, r3
 8008286:	460b      	mov	r3, r1
 8008288:	72fb      	strb	r3, [r7, #11]
 800828a:	4613      	mov	r3, r2
 800828c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	799b      	ldrb	r3, [r3, #6]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	d13d      	bne.n	8008318 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	795b      	ldrb	r3, [r3, #5]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d101      	bne.n	80082a8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80082a4:	2302      	movs	r3, #2
 80082a6:	e038      	b.n	800831a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2201      	movs	r2, #1
 80082ac:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80082ae:	68f8      	ldr	r0, [r7, #12]
 80082b0:	f000 fa2e 	bl	8008710 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80082b4:	f7ff fdee 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80082b8:	7afb      	ldrb	r3, [r7, #11]
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f979 	bl	80085b4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80082c2:	2100      	movs	r1, #0
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 f975 	bl	80085b4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80082ca:	2300      	movs	r3, #0
 80082cc:	82fb      	strh	r3, [r7, #22]
 80082ce:	e009      	b.n	80082e4 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80082d0:	69b9      	ldr	r1, [r7, #24]
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f9c4 	bl	8008660 <SUBGHZSPI_Receive>
      pData++;
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	3301      	adds	r3, #1
 80082dc:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80082de:	8afb      	ldrh	r3, [r7, #22]
 80082e0:	3301      	adds	r3, #1
 80082e2:	82fb      	strh	r3, [r7, #22]
 80082e4:	8afa      	ldrh	r2, [r7, #22]
 80082e6:	893b      	ldrh	r3, [r7, #8]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d3f1      	bcc.n	80082d0 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80082ec:	f7ff fdc2 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	f000 fa31 	bl	8008758 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	77fb      	strb	r3, [r7, #31]
 8008302:	e001      	b.n	8008308 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2201      	movs	r2, #1
 800830c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	715a      	strb	r2, [r3, #5]

    return status;
 8008314:	7ffb      	ldrb	r3, [r7, #31]
 8008316:	e000      	b.n	800831a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008318:	2302      	movs	r3, #2
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b086      	sub	sp, #24
 8008326:	af00      	add	r7, sp, #0
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	461a      	mov	r2, r3
 800832e:	460b      	mov	r3, r1
 8008330:	72fb      	strb	r3, [r7, #11]
 8008332:	4613      	mov	r3, r2
 8008334:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	799b      	ldrb	r3, [r3, #6]
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	d13e      	bne.n	80083be <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	795b      	ldrb	r3, [r3, #5]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008348:	2302      	movs	r3, #2
 800834a:	e039      	b.n	80083c0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2201      	movs	r2, #1
 8008350:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f9dc 	bl	8008710 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008358:	f7ff fd9c 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800835c:	210e      	movs	r1, #14
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f928 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008364:	7afb      	ldrb	r3, [r7, #11]
 8008366:	4619      	mov	r1, r3
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f000 f923 	bl	80085b4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800836e:	2300      	movs	r3, #0
 8008370:	82bb      	strh	r3, [r7, #20]
 8008372:	e00a      	b.n	800838a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008374:	8abb      	ldrh	r3, [r7, #20]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4413      	add	r3, r2
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4619      	mov	r1, r3
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f918 	bl	80085b4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008384:	8abb      	ldrh	r3, [r7, #20]
 8008386:	3301      	adds	r3, #1
 8008388:	82bb      	strh	r3, [r7, #20]
 800838a:	8aba      	ldrh	r2, [r7, #20]
 800838c:	893b      	ldrh	r3, [r7, #8]
 800838e:	429a      	cmp	r2, r3
 8008390:	d3f0      	bcc.n	8008374 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008392:	f7ff fd6f 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f9de 	bl	8008758 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	75fb      	strb	r3, [r7, #23]
 80083a8:	e001      	b.n	80083ae <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	715a      	strb	r2, [r3, #5]

    return status;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
 80083bc:	e000      	b.n	80083c0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80083be:	2302      	movs	r3, #2
  }
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b088      	sub	sp, #32
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	607a      	str	r2, [r7, #4]
 80083d2:	461a      	mov	r2, r3
 80083d4:	460b      	mov	r3, r1
 80083d6:	72fb      	strb	r3, [r7, #11]
 80083d8:	4613      	mov	r3, r2
 80083da:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	799b      	ldrb	r3, [r3, #6]
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d141      	bne.n	800846e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	795b      	ldrb	r3, [r3, #5]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d101      	bne.n	80083f6 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80083f2:	2302      	movs	r3, #2
 80083f4:	e03c      	b.n	8008470 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2201      	movs	r2, #1
 80083fa:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f987 	bl	8008710 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008402:	f7ff fd47 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8008406:	211e      	movs	r1, #30
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f8d3 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	4619      	mov	r1, r3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f8ce 	bl	80085b4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008418:	2100      	movs	r1, #0
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f8ca 	bl	80085b4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008420:	2300      	movs	r3, #0
 8008422:	82fb      	strh	r3, [r7, #22]
 8008424:	e009      	b.n	800843a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008426:	69b9      	ldr	r1, [r7, #24]
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f919 	bl	8008660 <SUBGHZSPI_Receive>
      pData++;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	3301      	adds	r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008434:	8afb      	ldrh	r3, [r7, #22]
 8008436:	3301      	adds	r3, #1
 8008438:	82fb      	strh	r3, [r7, #22]
 800843a:	8afa      	ldrh	r2, [r7, #22]
 800843c:	893b      	ldrh	r3, [r7, #8]
 800843e:	429a      	cmp	r2, r3
 8008440:	d3f1      	bcc.n	8008426 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008442:	f7ff fd17 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f986 	bl	8008758 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	e001      	b.n	800845e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	715a      	strb	r2, [r3, #5]

    return status;
 800846a:	7ffb      	ldrb	r3, [r7, #31]
 800846c:	e000      	b.n	8008470 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800846e:	2302      	movs	r3, #2
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8008480:	2300      	movs	r3, #0
 8008482:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8008484:	f107 020c 	add.w	r2, r7, #12
 8008488:	2302      	movs	r3, #2
 800848a:	2112      	movs	r1, #18
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7ff fef4 	bl	800827a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008492:	7b3b      	ldrb	r3, [r7, #12]
 8008494:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 8008496:	89fb      	ldrh	r3, [r7, #14]
 8008498:	021b      	lsls	r3, r3, #8
 800849a:	b21a      	sxth	r2, r3
 800849c:	7b7b      	ldrb	r3, [r7, #13]
 800849e:	b21b      	sxth	r3, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	b21b      	sxth	r3, r3
 80084a4:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80084a6:	89fb      	ldrh	r3, [r7, #14]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f012 fc1d 	bl	801acf0 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80084b6:	89fb      	ldrh	r3, [r7, #14]
 80084b8:	085b      	lsrs	r3, r3, #1
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f012 fc22 	bl	801ad0c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80084c8:	89fb      	ldrh	r3, [r7, #14]
 80084ca:	089b      	lsrs	r3, r3, #2
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d002      	beq.n	80084da <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f012 fc71 	bl	801adbc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80084da:	89fb      	ldrh	r3, [r7, #14]
 80084dc:	08db      	lsrs	r3, r3, #3
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f012 fc76 	bl	801add8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80084ec:	89fb      	ldrh	r3, [r7, #14]
 80084ee:	091b      	lsrs	r3, r3, #4
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f012 fc7b 	bl	801adf4 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80084fe:	89fb      	ldrh	r3, [r7, #14]
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d002      	beq.n	8008510 <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f012 fc48 	bl	801ada0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008510:	89fb      	ldrh	r3, [r7, #14]
 8008512:	099b      	lsrs	r3, r3, #6
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f012 fc03 	bl	801ad28 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008522:	89fb      	ldrh	r3, [r7, #14]
 8008524:	09db      	lsrs	r3, r3, #7
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00e      	beq.n	800854c <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800852e:	89fb      	ldrh	r3, [r7, #14]
 8008530:	0a1b      	lsrs	r3, r3, #8
 8008532:	f003 0301 	and.w	r3, r3, #1
 8008536:	2b00      	cmp	r3, #0
 8008538:	d004      	beq.n	8008544 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800853a:	2101      	movs	r1, #1
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	f012 fc01 	bl	801ad44 <HAL_SUBGHZ_CADStatusCallback>
 8008542:	e003      	b.n	800854c <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8008544:	2100      	movs	r1, #0
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f012 fbfc 	bl	801ad44 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800854c:	89fb      	ldrh	r3, [r7, #14]
 800854e:	0a5b      	lsrs	r3, r3, #9
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f012 fc11 	bl	801ad80 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 800855e:	f107 020c 	add.w	r2, r7, #12
 8008562:	2302      	movs	r3, #2
 8008564:	2102      	movs	r1, #2
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff fe28 	bl	80081bc <HAL_SUBGHZ_ExecSetCmd>
}
 800856c:	bf00      	nop
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <SUBGHZSPI_Init+0x3c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a0b      	ldr	r2, [pc, #44]	; (80085b0 <SUBGHZSPI_Init+0x3c>)
 8008582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008586:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <SUBGHZSPI_Init+0x3c>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8008590:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8008592:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <SUBGHZSPI_Init+0x3c>)
 8008594:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008598:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800859a:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <SUBGHZSPI_Init+0x3c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a04      	ldr	r2, [pc, #16]	; (80085b0 <SUBGHZSPI_Init+0x3c>)
 80085a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a4:	6013      	str	r3, [r2, #0]
}
 80085a6:	bf00      	nop
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	58010000 	.word	0x58010000

080085b4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	460b      	mov	r3, r1
 80085be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80085c4:	4b23      	ldr	r3, [pc, #140]	; (8008654 <SUBGHZSPI_Transmit+0xa0>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	4613      	mov	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	0cdb      	lsrs	r3, r3, #19
 80085d2:	2264      	movs	r2, #100	; 0x64
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	609a      	str	r2, [r3, #8]
      break;
 80085ea:	e008      	b.n	80085fe <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3b01      	subs	r3, #1
 80085f0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80085f2:	4b19      	ldr	r3, [pc, #100]	; (8008658 <SUBGHZSPI_Transmit+0xa4>)
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d1ed      	bne.n	80085da <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80085fe:	4b17      	ldr	r3, [pc, #92]	; (800865c <SUBGHZSPI_Transmit+0xa8>)
 8008600:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	78fa      	ldrb	r2, [r7, #3]
 8008606:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008608:	4b12      	ldr	r3, [pc, #72]	; (8008654 <SUBGHZSPI_Transmit+0xa0>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	0cdb      	lsrs	r3, r3, #19
 8008616:	2264      	movs	r2, #100	; 0x64
 8008618:	fb02 f303 	mul.w	r3, r2, r3
 800861c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d105      	bne.n	8008630 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	609a      	str	r2, [r3, #8]
      break;
 800862e:	e008      	b.n	8008642 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3b01      	subs	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8008636:	4b08      	ldr	r3, [pc, #32]	; (8008658 <SUBGHZSPI_Transmit+0xa4>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b01      	cmp	r3, #1
 8008640:	d1ed      	bne.n	800861e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8008642:	4b05      	ldr	r3, [pc, #20]	; (8008658 <SUBGHZSPI_Transmit+0xa4>)
 8008644:	68db      	ldr	r3, [r3, #12]

  return status;
 8008646:	7dfb      	ldrb	r3, [r7, #23]
}
 8008648:	4618      	mov	r0, r3
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	20000000 	.word	0x20000000
 8008658:	58010000 	.word	0x58010000
 800865c:	5801000c 	.word	0x5801000c

08008660 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800866e:	4b25      	ldr	r3, [pc, #148]	; (8008704 <SUBGHZSPI_Receive+0xa4>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4613      	mov	r3, r2
 8008674:	00db      	lsls	r3, r3, #3
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	0cdb      	lsrs	r3, r3, #19
 800867c:	2264      	movs	r2, #100	; 0x64
 800867e:	fb02 f303 	mul.w	r3, r2, r3
 8008682:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d105      	bne.n	8008696 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	609a      	str	r2, [r3, #8]
      break;
 8008694:	e008      	b.n	80086a8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3b01      	subs	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800869c:	4b1a      	ldr	r3, [pc, #104]	; (8008708 <SUBGHZSPI_Receive+0xa8>)
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d1ed      	bne.n	8008684 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80086a8:	4b18      	ldr	r3, [pc, #96]	; (800870c <SUBGHZSPI_Receive+0xac>)
 80086aa:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	22ff      	movs	r2, #255	; 0xff
 80086b0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <SUBGHZSPI_Receive+0xa4>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	4613      	mov	r3, r2
 80086b8:	00db      	lsls	r3, r3, #3
 80086ba:	1a9b      	subs	r3, r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	0cdb      	lsrs	r3, r3, #19
 80086c0:	2264      	movs	r2, #100	; 0x64
 80086c2:	fb02 f303 	mul.w	r3, r2, r3
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d105      	bne.n	80086da <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	609a      	str	r2, [r3, #8]
      break;
 80086d8:	e008      	b.n	80086ec <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3b01      	subs	r3, #1
 80086de:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80086e0:	4b09      	ldr	r3, [pc, #36]	; (8008708 <SUBGHZSPI_Receive+0xa8>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d1ed      	bne.n	80086c8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <SUBGHZSPI_Receive+0xa8>)
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	701a      	strb	r2, [r3, #0]

  return status;
 80086f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20000000 	.word	0x20000000
 8008708:	58010000 	.word	0x58010000
 800870c:	5801000c 	.word	0x5801000c

08008710 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	791b      	ldrb	r3, [r3, #4]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d111      	bne.n	8008744 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008720:	4b0c      	ldr	r3, [pc, #48]	; (8008754 <SUBGHZ_CheckDeviceReady+0x44>)
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	4613      	mov	r3, r2
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	4413      	add	r3, r2
 800872a:	00db      	lsls	r3, r3, #3
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008730:	f7ff fbb0 	bl	8007e94 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	3b01      	subs	r3, #1
 8008738:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f9      	bne.n	8008734 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8008740:	f7ff fb98 	bl	8007e74 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f807 	bl	8008758 <SUBGHZ_WaitOnBusy>
 800874a:	4603      	mov	r3, r0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20000000 	.word	0x20000000

08008758 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008764:	4b12      	ldr	r3, [pc, #72]	; (80087b0 <SUBGHZ_WaitOnBusy+0x58>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	4613      	mov	r3, r2
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	4413      	add	r3, r2
 800876e:	00db      	lsls	r3, r3, #3
 8008770:	0d1b      	lsrs	r3, r3, #20
 8008772:	2264      	movs	r2, #100	; 0x64
 8008774:	fb02 f303 	mul.w	r3, r2, r3
 8008778:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800877a:	f7ff fbb9 	bl	8007ef0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800877e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d105      	bne.n	8008792 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	609a      	str	r2, [r3, #8]
      break;
 8008790:	e009      	b.n	80087a6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b01      	subs	r3, #1
 8008796:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008798:	f7ff fb98 	bl	8007ecc <LL_PWR_IsActiveFlag_RFBUSYS>
 800879c:	4602      	mov	r2, r0
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	4013      	ands	r3, r2
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d0e9      	beq.n	800877a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	20000000 	.word	0x20000000

080087b4 <LL_RCC_GetUSARTClockSource>:
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80087bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	401a      	ands	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	041b      	lsls	r3, r3, #16
 80087cc:	4313      	orrs	r3, r2
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bc80      	pop	{r7}
 80087d6:	4770      	bx	lr

080087d8 <LL_RCC_GetLPUARTClockSource>:
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80087e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4013      	ands	r3, r2
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bc80      	pop	{r7}
 80087f4:	4770      	bx	lr

080087f6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e042      	b.n	800888e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800880e:	2b00      	cmp	r3, #0
 8008810:	d106      	bne.n	8008820 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7fa f940 	bl	8002aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2224      	movs	r2, #36	; 0x24
 8008824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0201 	bic.w	r2, r2, #1
 8008836:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fc4b 	bl	80090d4 <UART_SetConfig>
 800883e:	4603      	mov	r3, r0
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e022      	b.n	800888e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884c:	2b00      	cmp	r3, #0
 800884e:	d002      	beq.n	8008856 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 feb3 	bl	80095bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008864:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008874:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f042 0201 	orr.w	r2, r2, #1
 8008884:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 ff39 	bl	80096fe <UART_CheckIdleState>
 800888c:	4603      	mov	r3, r0
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
	...

08008898 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08a      	sub	sp, #40	; 0x28
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4613      	mov	r3, r2
 80088a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ac:	2b20      	cmp	r3, #32
 80088ae:	d142      	bne.n	8008936 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <HAL_UART_Receive_IT+0x24>
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e03b      	b.n	8008938 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_UART_Receive_IT+0x36>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e034      	b.n	8008938 <HAL_UART_Receive_IT+0xa0>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a17      	ldr	r2, [pc, #92]	; (8008940 <HAL_UART_Receive_IT+0xa8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d01f      	beq.n	8008926 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d018      	beq.n	8008926 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	e853 3f00 	ldrex	r3, [r3]
 8008900:	613b      	str	r3, [r7, #16]
   return(result);
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008908:	627b      	str	r3, [r7, #36]	; 0x24
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008912:	623b      	str	r3, [r7, #32]
 8008914:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	69f9      	ldr	r1, [r7, #28]
 8008918:	6a3a      	ldr	r2, [r7, #32]
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e6      	bne.n	80088f4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008926:	88fb      	ldrh	r3, [r7, #6]
 8008928:	461a      	mov	r2, r3
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fff9 	bl	8009924 <UART_Start_Receive_IT>
 8008932:	4603      	mov	r3, r0
 8008934:	e000      	b.n	8008938 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008936:	2302      	movs	r3, #2
  }
}
 8008938:	4618      	mov	r0, r3
 800893a:	3728      	adds	r7, #40	; 0x28
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	40008000 	.word	0x40008000

08008944 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b08a      	sub	sp, #40	; 0x28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008958:	2b20      	cmp	r3, #32
 800895a:	d17a      	bne.n	8008a52 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d002      	beq.n	8008968 <HAL_UART_Transmit_DMA+0x24>
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e073      	b.n	8008a54 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_UART_Transmit_DMA+0x36>
 8008976:	2302      	movs	r3, #2
 8008978:	e06c      	b.n	8008a54 <HAL_UART_Transmit_DMA+0x110>
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2201      	movs	r2, #1
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	88fa      	ldrh	r2, [r7, #6]
 8008994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2200      	movs	r2, #0
 800899c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2221      	movs	r2, #33	; 0x21
 80089a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d02c      	beq.n	8008a0a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089b4:	4a29      	ldr	r2, [pc, #164]	; (8008a5c <HAL_UART_Transmit_DMA+0x118>)
 80089b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089bc:	4a28      	ldr	r2, [pc, #160]	; (8008a60 <HAL_UART_Transmit_DMA+0x11c>)
 80089be:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c4:	4a27      	ldr	r2, [pc, #156]	; (8008a64 <HAL_UART_Transmit_DMA+0x120>)
 80089c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089cc:	2200      	movs	r2, #0
 80089ce:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	4619      	mov	r1, r3
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	3328      	adds	r3, #40	; 0x28
 80089e0:	461a      	mov	r2, r3
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	f7fb fe00 	bl	80045e8 <HAL_DMA_Start_IT>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2210      	movs	r2, #16
 80089f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e024      	b.n	8008a54 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2240      	movs	r2, #64	; 0x40
 8008a10:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	3308      	adds	r3, #8
 8008a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3a:	623a      	str	r2, [r7, #32]
 8008a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	69f9      	ldr	r1, [r7, #28]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e5      	bne.n	8008a1a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e000      	b.n	8008a54 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8008a52:	2302      	movs	r3, #2
  }
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3728      	adds	r7, #40	; 0x28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	08009cbf 	.word	0x08009cbf
 8008a60:	08009d59 	.word	0x08009d59
 8008a64:	08009d75 	.word	0x08009d75

08008a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b0ba      	sub	sp, #232	; 0xe8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a96:	4013      	ands	r3, r2
 8008a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d11b      	bne.n	8008adc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aa8:	f003 0320 	and.w	r3, r3, #32
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d015      	beq.n	8008adc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ab4:	f003 0320 	and.w	r3, r3, #32
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d105      	bne.n	8008ac8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d009      	beq.n	8008adc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 82d6 	beq.w	800907e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
      }
      return;
 8008ada:	e2d0      	b.n	800907e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008adc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 811f 	beq.w	8008d24 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008ae6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008aea:	4b8b      	ldr	r3, [pc, #556]	; (8008d18 <HAL_UART_IRQHandler+0x2b0>)
 8008aec:	4013      	ands	r3, r2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d106      	bne.n	8008b00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008af2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008af6:	4b89      	ldr	r3, [pc, #548]	; (8008d1c <HAL_UART_IRQHandler+0x2b4>)
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 8112 	beq.w	8008d24 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b04:	f003 0301 	and.w	r3, r3, #1
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d011      	beq.n	8008b30 <HAL_UART_IRQHandler+0xc8>
 8008b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b26:	f043 0201 	orr.w	r2, r3, #1
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d011      	beq.n	8008b60 <HAL_UART_IRQHandler+0xf8>
 8008b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b40:	f003 0301 	and.w	r3, r3, #1
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b56:	f043 0204 	orr.w	r2, r3, #4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b64:	f003 0304 	and.w	r3, r3, #4
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d011      	beq.n	8008b90 <HAL_UART_IRQHandler+0x128>
 8008b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b86:	f043 0202 	orr.w	r2, r3, #2
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b94:	f003 0308 	and.w	r3, r3, #8
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d017      	beq.n	8008bcc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ba8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008bac:	4b5a      	ldr	r3, [pc, #360]	; (8008d18 <HAL_UART_IRQHandler+0x2b0>)
 8008bae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bc2:	f043 0208 	orr.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d012      	beq.n	8008bfe <HAL_UART_IRQHandler+0x196>
 8008bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00c      	beq.n	8008bfe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf4:	f043 0220 	orr.w	r2, r3, #32
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 823c 	beq.w	8009082 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d013      	beq.n	8008c3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d003      	beq.n	8008c3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c52:	2b40      	cmp	r3, #64	; 0x40
 8008c54:	d005      	beq.n	8008c62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d04f      	beq.n	8008d02 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 ffc6 	bl	8009bf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c72:	2b40      	cmp	r3, #64	; 0x40
 8008c74:	d141      	bne.n	8008cfa <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	3308      	adds	r3, #8
 8008c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008cb2:	e841 2300 	strex	r3, r2, [r1]
 8008cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1d9      	bne.n	8008c76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d013      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cce:	4a14      	ldr	r2, [pc, #80]	; (8008d20 <HAL_UART_IRQHandler+0x2b8>)
 8008cd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fb fd62 	bl	80047a0 <HAL_DMA_Abort_IT>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d017      	beq.n	8008d12 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008cec:	4610      	mov	r0, r2
 8008cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf0:	e00f      	b.n	8008d12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f9d9 	bl	80090aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf8:	e00b      	b.n	8008d12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f9d5 	bl	80090aa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d00:	e007      	b.n	8008d12 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9d1 	bl	80090aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008d10:	e1b7      	b.n	8009082 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d12:	bf00      	nop
    return;
 8008d14:	e1b5      	b.n	8009082 <HAL_UART_IRQHandler+0x61a>
 8008d16:	bf00      	nop
 8008d18:	10000001 	.word	0x10000001
 8008d1c:	04000120 	.word	0x04000120
 8008d20:	08009df5 	.word	0x08009df5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 814a 	bne.w	8008fc2 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d32:	f003 0310 	and.w	r3, r3, #16
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 8143 	beq.w	8008fc2 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d40:	f003 0310 	and.w	r3, r3, #16
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 813c 	beq.w	8008fc2 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2210      	movs	r2, #16
 8008d50:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5c:	2b40      	cmp	r3, #64	; 0x40
 8008d5e:	f040 80b5 	bne.w	8008ecc <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8008d6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 8187 	beq.w	8009086 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d82:	429a      	cmp	r2, r3
 8008d84:	f080 817f 	bcs.w	8009086 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 8086 	bne.w	8008eb0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008dd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1da      	bne.n	8008da4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	3308      	adds	r3, #8
 8008df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008df8:	e853 3f00 	ldrex	r3, [r3]
 8008dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3308      	adds	r3, #8
 8008e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e1      	bne.n	8008dee <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e34:	e853 3f00 	ldrex	r3, [r3]
 8008e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e56:	e841 2300 	strex	r3, r2, [r1]
 8008e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d1e3      	bne.n	8008e2a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e80:	f023 0310 	bic.w	r3, r3, #16
 8008e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e4      	bne.n	8008e70 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fb fc1a 	bl	80046e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f8f9 	bl	80090bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008eca:	e0dc      	b.n	8009086 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 80ce 	beq.w	800908a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8008eee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80c9 	beq.w	800908a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f1c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e4      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	e853 3f00 	ldrex	r3, [r3]
 8008f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f44:	f023 0301 	bic.w	r3, r3, #1
 8008f48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3308      	adds	r3, #8
 8008f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f56:	633a      	str	r2, [r7, #48]	; 0x30
 8008f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5e:	e841 2300 	strex	r3, r2, [r1]
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1e1      	bne.n	8008f2e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f023 0310 	bic.w	r3, r3, #16
 8008f92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008fa0:	61fb      	str	r3, [r7, #28]
 8008fa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	69b9      	ldr	r1, [r7, #24]
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	617b      	str	r3, [r7, #20]
   return(result);
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e4      	bne.n	8008f7e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 f87e 	bl	80090bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008fc0:	e063      	b.n	800908a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00e      	beq.n	8008fec <HAL_UART_IRQHandler+0x584>
 8008fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d008      	beq.n	8008fec <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008fe2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 fba3 	bl	800a730 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008fea:	e051      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d014      	beq.n	8009022 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009000:	2b00      	cmp	r3, #0
 8009002:	d105      	bne.n	8009010 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d008      	beq.n	8009022 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009014:	2b00      	cmp	r3, #0
 8009016:	d03a      	beq.n	800908e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
    }
    return;
 8009020:	e035      	b.n	800908e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <HAL_UART_IRQHandler+0x5da>
 800902e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d003      	beq.n	8009042 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fef0 	bl	8009e20 <UART_EndTransmit_IT>
    return;
 8009040:	e026      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d009      	beq.n	8009062 <HAL_UART_IRQHandler+0x5fa>
 800904e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009052:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f001 fb7a 	bl	800a754 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009060:	e016      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d010      	beq.n	8009090 <HAL_UART_IRQHandler+0x628>
 800906e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009072:	2b00      	cmp	r3, #0
 8009074:	da0c      	bge.n	8009090 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 fb63 	bl	800a742 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800907c:	e008      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
      return;
 800907e:	bf00      	nop
 8009080:	e006      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
    return;
 8009082:	bf00      	nop
 8009084:	e004      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
      return;
 8009086:	bf00      	nop
 8009088:	e002      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
      return;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_UART_IRQHandler+0x628>
    return;
 800908e:	bf00      	nop
  }
}
 8009090:	37e8      	adds	r7, #232	; 0xe8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop

08009098 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b083      	sub	sp, #12
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090b2:	bf00      	nop
 80090b4:	370c      	adds	r7, #12
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr

080090bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
	...

080090d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090d8:	b08c      	sub	sp, #48	; 0x30
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	431a      	orrs	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	4b94      	ldr	r3, [pc, #592]	; (8009354 <UART_SetConfig+0x280>)
 8009104:	4013      	ands	r3, r2
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	6812      	ldr	r2, [r2, #0]
 800910a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800910c:	430b      	orrs	r3, r1
 800910e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	68da      	ldr	r2, [r3, #12]
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a89      	ldr	r2, [pc, #548]	; (8009358 <UART_SetConfig+0x284>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913c:	4313      	orrs	r3, r2
 800913e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800914a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	6812      	ldr	r2, [r2, #0]
 8009152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009154:	430b      	orrs	r3, r1
 8009156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800915e:	f023 010f 	bic.w	r1, r3, #15
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	430a      	orrs	r2, r1
 800916c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a7a      	ldr	r2, [pc, #488]	; (800935c <UART_SetConfig+0x288>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d127      	bne.n	80091c8 <UART_SetConfig+0xf4>
 8009178:	2003      	movs	r0, #3
 800917a:	f7ff fb1b 	bl	80087b4 <LL_RCC_GetUSARTClockSource>
 800917e:	4603      	mov	r3, r0
 8009180:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8009184:	2b03      	cmp	r3, #3
 8009186:	d81b      	bhi.n	80091c0 <UART_SetConfig+0xec>
 8009188:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <UART_SetConfig+0xbc>)
 800918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918e:	bf00      	nop
 8009190:	080091a1 	.word	0x080091a1
 8009194:	080091b1 	.word	0x080091b1
 8009198:	080091a9 	.word	0x080091a9
 800919c:	080091b9 	.word	0x080091b9
 80091a0:	2301      	movs	r3, #1
 80091a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091a6:	e080      	b.n	80092aa <UART_SetConfig+0x1d6>
 80091a8:	2302      	movs	r3, #2
 80091aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091ae:	e07c      	b.n	80092aa <UART_SetConfig+0x1d6>
 80091b0:	2304      	movs	r3, #4
 80091b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091b6:	e078      	b.n	80092aa <UART_SetConfig+0x1d6>
 80091b8:	2308      	movs	r3, #8
 80091ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091be:	e074      	b.n	80092aa <UART_SetConfig+0x1d6>
 80091c0:	2310      	movs	r3, #16
 80091c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80091c6:	e070      	b.n	80092aa <UART_SetConfig+0x1d6>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a64      	ldr	r2, [pc, #400]	; (8009360 <UART_SetConfig+0x28c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d138      	bne.n	8009244 <UART_SetConfig+0x170>
 80091d2:	200c      	movs	r0, #12
 80091d4:	f7ff faee 	bl	80087b4 <LL_RCC_GetUSARTClockSource>
 80091d8:	4603      	mov	r3, r0
 80091da:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80091de:	2b0c      	cmp	r3, #12
 80091e0:	d82c      	bhi.n	800923c <UART_SetConfig+0x168>
 80091e2:	a201      	add	r2, pc, #4	; (adr r2, 80091e8 <UART_SetConfig+0x114>)
 80091e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e8:	0800921d 	.word	0x0800921d
 80091ec:	0800923d 	.word	0x0800923d
 80091f0:	0800923d 	.word	0x0800923d
 80091f4:	0800923d 	.word	0x0800923d
 80091f8:	0800922d 	.word	0x0800922d
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	0800923d 	.word	0x0800923d
 8009204:	0800923d 	.word	0x0800923d
 8009208:	08009225 	.word	0x08009225
 800920c:	0800923d 	.word	0x0800923d
 8009210:	0800923d 	.word	0x0800923d
 8009214:	0800923d 	.word	0x0800923d
 8009218:	08009235 	.word	0x08009235
 800921c:	2300      	movs	r3, #0
 800921e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009222:	e042      	b.n	80092aa <UART_SetConfig+0x1d6>
 8009224:	2302      	movs	r3, #2
 8009226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800922a:	e03e      	b.n	80092aa <UART_SetConfig+0x1d6>
 800922c:	2304      	movs	r3, #4
 800922e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009232:	e03a      	b.n	80092aa <UART_SetConfig+0x1d6>
 8009234:	2308      	movs	r3, #8
 8009236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800923a:	e036      	b.n	80092aa <UART_SetConfig+0x1d6>
 800923c:	2310      	movs	r3, #16
 800923e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009242:	e032      	b.n	80092aa <UART_SetConfig+0x1d6>
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a43      	ldr	r2, [pc, #268]	; (8009358 <UART_SetConfig+0x284>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d12a      	bne.n	80092a4 <UART_SetConfig+0x1d0>
 800924e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009252:	f7ff fac1 	bl	80087d8 <LL_RCC_GetLPUARTClockSource>
 8009256:	4603      	mov	r3, r0
 8009258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800925c:	d01a      	beq.n	8009294 <UART_SetConfig+0x1c0>
 800925e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009262:	d81b      	bhi.n	800929c <UART_SetConfig+0x1c8>
 8009264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009268:	d00c      	beq.n	8009284 <UART_SetConfig+0x1b0>
 800926a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800926e:	d815      	bhi.n	800929c <UART_SetConfig+0x1c8>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <UART_SetConfig+0x1a8>
 8009274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009278:	d008      	beq.n	800928c <UART_SetConfig+0x1b8>
 800927a:	e00f      	b.n	800929c <UART_SetConfig+0x1c8>
 800927c:	2300      	movs	r3, #0
 800927e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009282:	e012      	b.n	80092aa <UART_SetConfig+0x1d6>
 8009284:	2302      	movs	r3, #2
 8009286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800928a:	e00e      	b.n	80092aa <UART_SetConfig+0x1d6>
 800928c:	2304      	movs	r3, #4
 800928e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009292:	e00a      	b.n	80092aa <UART_SetConfig+0x1d6>
 8009294:	2308      	movs	r3, #8
 8009296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800929a:	e006      	b.n	80092aa <UART_SetConfig+0x1d6>
 800929c:	2310      	movs	r3, #16
 800929e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80092a2:	e002      	b.n	80092aa <UART_SetConfig+0x1d6>
 80092a4:	2310      	movs	r3, #16
 80092a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a2a      	ldr	r2, [pc, #168]	; (8009358 <UART_SetConfig+0x284>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	f040 80a4 	bne.w	80093fe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d823      	bhi.n	8009306 <UART_SetConfig+0x232>
 80092be:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <UART_SetConfig+0x1f0>)
 80092c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c4:	080092e9 	.word	0x080092e9
 80092c8:	08009307 	.word	0x08009307
 80092cc:	080092f1 	.word	0x080092f1
 80092d0:	08009307 	.word	0x08009307
 80092d4:	080092f7 	.word	0x080092f7
 80092d8:	08009307 	.word	0x08009307
 80092dc:	08009307 	.word	0x08009307
 80092e0:	08009307 	.word	0x08009307
 80092e4:	080092ff 	.word	0x080092ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092e8:	f7fd ff48 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 80092ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092ee:	e010      	b.n	8009312 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092f0:	4b1c      	ldr	r3, [pc, #112]	; (8009364 <UART_SetConfig+0x290>)
 80092f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80092f4:	e00d      	b.n	8009312 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092f6:	f7fd fe8d 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 80092fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80092fc:	e009      	b.n	8009312 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009304:	e005      	b.n	8009312 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8137 	beq.w	8009588 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931e:	4a12      	ldr	r2, [pc, #72]	; (8009368 <UART_SetConfig+0x294>)
 8009320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009324:	461a      	mov	r2, r3
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	fbb3 f3f2 	udiv	r3, r3, r2
 800932c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	4613      	mov	r3, r2
 8009334:	005b      	lsls	r3, r3, #1
 8009336:	4413      	add	r3, r2
 8009338:	69ba      	ldr	r2, [r7, #24]
 800933a:	429a      	cmp	r2, r3
 800933c:	d305      	bcc.n	800934a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009344:	69ba      	ldr	r2, [r7, #24]
 8009346:	429a      	cmp	r2, r3
 8009348:	d910      	bls.n	800936c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009350:	e11a      	b.n	8009588 <UART_SetConfig+0x4b4>
 8009352:	bf00      	nop
 8009354:	cfff69f3 	.word	0xcfff69f3
 8009358:	40008000 	.word	0x40008000
 800935c:	40013800 	.word	0x40013800
 8009360:	40004400 	.word	0x40004400
 8009364:	00f42400 	.word	0x00f42400
 8009368:	0801d1c8 	.word	0x0801d1c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800936c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936e:	2200      	movs	r2, #0
 8009370:	60bb      	str	r3, [r7, #8]
 8009372:	60fa      	str	r2, [r7, #12]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	4a8e      	ldr	r2, [pc, #568]	; (80095b4 <UART_SetConfig+0x4e0>)
 800937a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800937e:	b29b      	uxth	r3, r3
 8009380:	2200      	movs	r2, #0
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	607a      	str	r2, [r7, #4]
 8009386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800938e:	f7f7 fc15 	bl	8000bbc <__aeabi_uldivmod>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4610      	mov	r0, r2
 8009398:	4619      	mov	r1, r3
 800939a:	f04f 0200 	mov.w	r2, #0
 800939e:	f04f 0300 	mov.w	r3, #0
 80093a2:	020b      	lsls	r3, r1, #8
 80093a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80093a8:	0202      	lsls	r2, r0, #8
 80093aa:	6979      	ldr	r1, [r7, #20]
 80093ac:	6849      	ldr	r1, [r1, #4]
 80093ae:	0849      	lsrs	r1, r1, #1
 80093b0:	2000      	movs	r0, #0
 80093b2:	460c      	mov	r4, r1
 80093b4:	4605      	mov	r5, r0
 80093b6:	eb12 0804 	adds.w	r8, r2, r4
 80093ba:	eb43 0905 	adc.w	r9, r3, r5
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	469a      	mov	sl, r3
 80093c6:	4693      	mov	fp, r2
 80093c8:	4652      	mov	r2, sl
 80093ca:	465b      	mov	r3, fp
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f7 fbf4 	bl	8000bbc <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4613      	mov	r3, r2
 80093da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093e2:	d308      	bcc.n	80093f6 <UART_SetConfig+0x322>
 80093e4:	6a3b      	ldr	r3, [r7, #32]
 80093e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093ea:	d204      	bcs.n	80093f6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6a3a      	ldr	r2, [r7, #32]
 80093f2:	60da      	str	r2, [r3, #12]
 80093f4:	e0c8      	b.n	8009588 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80093fc:	e0c4      	b.n	8009588 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009406:	d168      	bne.n	80094da <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8009408:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800940c:	2b08      	cmp	r3, #8
 800940e:	d828      	bhi.n	8009462 <UART_SetConfig+0x38e>
 8009410:	a201      	add	r2, pc, #4	; (adr r2, 8009418 <UART_SetConfig+0x344>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	0800943d 	.word	0x0800943d
 800941c:	08009445 	.word	0x08009445
 8009420:	0800944d 	.word	0x0800944d
 8009424:	08009463 	.word	0x08009463
 8009428:	08009453 	.word	0x08009453
 800942c:	08009463 	.word	0x08009463
 8009430:	08009463 	.word	0x08009463
 8009434:	08009463 	.word	0x08009463
 8009438:	0800945b 	.word	0x0800945b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800943c:	f7fd fe9e 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8009440:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009442:	e014      	b.n	800946e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009444:	f7fd feac 	bl	80071a0 <HAL_RCC_GetPCLK2Freq>
 8009448:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800944a:	e010      	b.n	800946e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800944c:	4b5a      	ldr	r3, [pc, #360]	; (80095b8 <UART_SetConfig+0x4e4>)
 800944e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009450:	e00d      	b.n	800946e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009452:	f7fd fddf 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8009456:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009458:	e009      	b.n	800946e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800945a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800945e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009460:	e005      	b.n	800946e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8009462:	2300      	movs	r3, #0
 8009464:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800946c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 8089 	beq.w	8009588 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	4a4e      	ldr	r2, [pc, #312]	; (80095b4 <UART_SetConfig+0x4e0>)
 800947c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009480:	461a      	mov	r2, r3
 8009482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009484:	fbb3 f3f2 	udiv	r3, r3, r2
 8009488:	005a      	lsls	r2, r3, #1
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	085b      	lsrs	r3, r3, #1
 8009490:	441a      	add	r2, r3
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	fbb2 f3f3 	udiv	r3, r2, r3
 800949a:	b29b      	uxth	r3, r3
 800949c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800949e:	6a3b      	ldr	r3, [r7, #32]
 80094a0:	2b0f      	cmp	r3, #15
 80094a2:	d916      	bls.n	80094d2 <UART_SetConfig+0x3fe>
 80094a4:	6a3b      	ldr	r3, [r7, #32]
 80094a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094aa:	d212      	bcs.n	80094d2 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094ac:	6a3b      	ldr	r3, [r7, #32]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	f023 030f 	bic.w	r3, r3, #15
 80094b4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	085b      	lsrs	r3, r3, #1
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f003 0307 	and.w	r3, r3, #7
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	8bfb      	ldrh	r3, [r7, #30]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	8bfa      	ldrh	r2, [r7, #30]
 80094ce:	60da      	str	r2, [r3, #12]
 80094d0:	e05a      	b.n	8009588 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80094d8:	e056      	b.n	8009588 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80094de:	2b08      	cmp	r3, #8
 80094e0:	d827      	bhi.n	8009532 <UART_SetConfig+0x45e>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <UART_SetConfig+0x414>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	0800950d 	.word	0x0800950d
 80094ec:	08009515 	.word	0x08009515
 80094f0:	0800951d 	.word	0x0800951d
 80094f4:	08009533 	.word	0x08009533
 80094f8:	08009523 	.word	0x08009523
 80094fc:	08009533 	.word	0x08009533
 8009500:	08009533 	.word	0x08009533
 8009504:	08009533 	.word	0x08009533
 8009508:	0800952b 	.word	0x0800952b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800950c:	f7fd fe36 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 8009510:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009512:	e014      	b.n	800953e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009514:	f7fd fe44 	bl	80071a0 <HAL_RCC_GetPCLK2Freq>
 8009518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800951a:	e010      	b.n	800953e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800951c:	4b26      	ldr	r3, [pc, #152]	; (80095b8 <UART_SetConfig+0x4e4>)
 800951e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009520:	e00d      	b.n	800953e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009522:	f7fd fd77 	bl	8007014 <HAL_RCC_GetSysClockFreq>
 8009526:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009528:	e009      	b.n	800953e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800952a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009530:	e005      	b.n	800953e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800953c:	bf00      	nop
    }

    if (pclk != 0U)
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	2b00      	cmp	r3, #0
 8009542:	d021      	beq.n	8009588 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	4a1a      	ldr	r2, [pc, #104]	; (80095b4 <UART_SetConfig+0x4e0>)
 800954a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800954e:	461a      	mov	r2, r3
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	fbb3 f2f2 	udiv	r2, r3, r2
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	441a      	add	r2, r3
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	fbb2 f3f3 	udiv	r3, r2, r3
 8009566:	b29b      	uxth	r3, r3
 8009568:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	2b0f      	cmp	r3, #15
 800956e:	d908      	bls.n	8009582 <UART_SetConfig+0x4ae>
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009576:	d204      	bcs.n	8009582 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6a3a      	ldr	r2, [r7, #32]
 800957e:	60da      	str	r2, [r3, #12]
 8009580:	e002      	b.n	8009588 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2201      	movs	r2, #1
 800958c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	2201      	movs	r2, #1
 8009594:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2200      	movs	r2, #0
 800959c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2200      	movs	r2, #0
 80095a2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80095a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3730      	adds	r7, #48	; 0x30
 80095ac:	46bd      	mov	sp, r7
 80095ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095b2:	bf00      	nop
 80095b4:	0801d1c8 	.word	0x0801d1c8
 80095b8:	00f42400 	.word	0x00f42400

080095bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d00a      	beq.n	80095e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00a      	beq.n	8009608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00a      	beq.n	800962a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962e:	f003 0308 	and.w	r3, r3, #8
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01a      	beq.n	80096d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ba:	d10a      	bne.n	80096d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00a      	beq.n	80096f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	605a      	str	r2, [r3, #4]
  }
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b086      	sub	sp, #24
 8009702:	af02      	add	r7, sp, #8
 8009704:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800970e:	f7f8 fd3b 	bl	8002188 <HAL_GetTick>
 8009712:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0308 	and.w	r3, r3, #8
 800971e:	2b08      	cmp	r3, #8
 8009720:	d10e      	bne.n	8009740 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009722:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f82f 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800973c:	2303      	movs	r3, #3
 800973e:	e025      	b.n	800978c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0304 	and.w	r3, r3, #4
 800974a:	2b04      	cmp	r3, #4
 800974c:	d10e      	bne.n	800976c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800974e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f819 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e00f      	b.n	800978c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2220      	movs	r2, #32
 8009770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b09c      	sub	sp, #112	; 0x70
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	4613      	mov	r3, r2
 80097a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097a4:	e0a9      	b.n	80098fa <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	f000 80a5 	beq.w	80098fa <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097b0:	f7f8 fcea 	bl	8002188 <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80097bc:	429a      	cmp	r2, r3
 80097be:	d302      	bcc.n	80097c6 <UART_WaitOnFlagUntilTimeout+0x32>
 80097c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d140      	bne.n	8009848 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80097d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097da:	667b      	str	r3, [r7, #100]	; 0x64
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80097e6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80097ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80097f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009802:	e853 3f00 	ldrex	r3, [r3]
 8009806:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980a:	f023 0301 	bic.w	r3, r3, #1
 800980e:	663b      	str	r3, [r7, #96]	; 0x60
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3308      	adds	r3, #8
 8009816:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009818:	64ba      	str	r2, [r7, #72]	; 0x48
 800981a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800981e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009820:	e841 2300 	strex	r3, r2, [r1]
 8009824:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1e5      	bne.n	80097f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2220      	movs	r2, #32
 8009830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2220      	movs	r2, #32
 8009838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e069      	b.n	800991c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d051      	beq.n	80098fa <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69db      	ldr	r3, [r3, #28]
 800985c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009860:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009864:	d149      	bne.n	80098fa <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800986e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009884:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800988e:	637b      	str	r3, [r7, #52]	; 0x34
 8009890:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009892:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009894:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009896:	e841 2300 	strex	r3, r2, [r1]
 800989a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1e6      	bne.n	8009870 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	3308      	adds	r3, #8
 80098a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	e853 3f00 	ldrex	r3, [r3]
 80098b0:	613b      	str	r3, [r7, #16]
   return(result);
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	f023 0301 	bic.w	r3, r3, #1
 80098b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3308      	adds	r3, #8
 80098c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80098c2:	623a      	str	r2, [r7, #32]
 80098c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098c6:	69f9      	ldr	r1, [r7, #28]
 80098c8:	6a3a      	ldr	r2, [r7, #32]
 80098ca:	e841 2300 	strex	r3, r2, [r1]
 80098ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1e5      	bne.n	80098a2 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e010      	b.n	800991c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69da      	ldr	r2, [r3, #28]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4013      	ands	r3, r2
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	bf0c      	ite	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	2300      	movne	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	429a      	cmp	r2, r3
 8009916:	f43f af46 	beq.w	80097a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3770      	adds	r7, #112	; 0x70
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009924:	b480      	push	{r7}
 8009926:	b0a3      	sub	sp, #140	; 0x8c
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4613      	mov	r3, r2
 8009930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009956:	d10e      	bne.n	8009976 <UART_Start_Receive_IT+0x52>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <UART_Start_Receive_IT+0x48>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800996a:	e02d      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	22ff      	movs	r2, #255	; 0xff
 8009970:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009974:	e028      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10d      	bne.n	800999a <UART_Start_Receive_IT+0x76>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <UART_Start_Receive_IT+0x6c>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	22ff      	movs	r2, #255	; 0xff
 800998a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800998e:	e01b      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	227f      	movs	r2, #127	; 0x7f
 8009994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009998:	e016      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a2:	d10d      	bne.n	80099c0 <UART_Start_Receive_IT+0x9c>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <UART_Start_Receive_IT+0x92>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	227f      	movs	r2, #127	; 0x7f
 80099b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099b4:	e008      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	223f      	movs	r2, #63	; 0x3f
 80099ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80099be:	e003      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2222      	movs	r2, #34	; 0x22
 80099d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80099e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3308      	adds	r3, #8
 80099f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80099fc:	673a      	str	r2, [r7, #112]	; 0x70
 80099fe:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009a02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8009a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e3      	bne.n	80099d8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a18:	d153      	bne.n	8009ac2 <UART_Start_Receive_IT+0x19e>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a20:	88fa      	ldrh	r2, [r7, #6]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d34d      	bcc.n	8009ac2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a2e:	d107      	bne.n	8009a40 <UART_Start_Receive_IT+0x11c>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d103      	bne.n	8009a40 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a4a      	ldr	r2, [pc, #296]	; (8009b64 <UART_Start_Receive_IT+0x240>)
 8009a3c:	671a      	str	r2, [r3, #112]	; 0x70
 8009a3e:	e002      	b.n	8009a46 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4a49      	ldr	r2, [pc, #292]	; (8009b68 <UART_Start_Receive_IT+0x244>)
 8009a44:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d01a      	beq.n	8009a8c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a5e:	e853 3f00 	ldrex	r3, [r3]
 8009a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a7a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a80:	e841 2300 	strex	r3, r2, [r1]
 8009a84:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1e4      	bne.n	8009a56 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3308      	adds	r3, #8
 8009a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	3308      	adds	r3, #8
 8009aaa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009aac:	64ba      	str	r2, [r7, #72]	; 0x48
 8009aae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ab4:	e841 2300 	strex	r3, r2, [r1]
 8009ab8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e5      	bne.n	8009a8c <UART_Start_Receive_IT+0x168>
 8009ac0:	e04a      	b.n	8009b58 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aca:	d107      	bne.n	8009adc <UART_Start_Receive_IT+0x1b8>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4a25      	ldr	r2, [pc, #148]	; (8009b6c <UART_Start_Receive_IT+0x248>)
 8009ad8:	671a      	str	r2, [r3, #112]	; 0x70
 8009ada:	e002      	b.n	8009ae2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4a24      	ldr	r2, [pc, #144]	; (8009b70 <UART_Start_Receive_IT+0x24c>)
 8009ae0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d019      	beq.n	8009b26 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009b06:	677b      	str	r3, [r7, #116]	; 0x74
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
 8009b12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_Start_Receive_IT+0x1ce>
 8009b24:	e018      	b.n	8009b58 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f043 0320 	orr.w	r3, r3, #32
 8009b3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b44:	623b      	str	r3, [r7, #32]
 8009b46:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69f9      	ldr	r1, [r7, #28]
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e6      	bne.n	8009b26 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	378c      	adds	r7, #140	; 0x8c
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bc80      	pop	{r7}
 8009b62:	4770      	bx	lr
 8009b64:	0800a431 	.word	0x0800a431
 8009b68:	0800a139 	.word	0x0800a139
 8009b6c:	08009fd7 	.word	0x08009fd7
 8009b70:	08009e77 	.word	0x08009e77

08009b74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b08f      	sub	sp, #60	; 0x3c
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b90:	637b      	str	r3, [r7, #52]	; 0x34
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ba0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e6      	bne.n	8009b7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	3308      	adds	r3, #8
 8009bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3308      	adds	r3, #8
 8009bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bce:	61ba      	str	r2, [r7, #24]
 8009bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6979      	ldr	r1, [r7, #20]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	613b      	str	r3, [r7, #16]
   return(result);
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e5      	bne.n	8009bae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2220      	movs	r2, #32
 8009be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009bea:	bf00      	nop
 8009bec:	373c      	adds	r7, #60	; 0x3c
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b095      	sub	sp, #84	; 0x54
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c04:	e853 3f00 	ldrex	r3, [r3]
 8009c08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	461a      	mov	r2, r3
 8009c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009c20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d1e6      	bne.n	8009bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3308      	adds	r3, #8
 8009c34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	e853 3f00 	ldrex	r3, [r3]
 8009c3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e3      	bne.n	8009c2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d118      	bne.n	8009ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	e853 3f00 	ldrex	r3, [r3]
 8009c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f023 0310 	bic.w	r3, r3, #16
 8009c82:	647b      	str	r3, [r7, #68]	; 0x44
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c8c:	61bb      	str	r3, [r7, #24]
 8009c8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c90:	6979      	ldr	r1, [r7, #20]
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	e841 2300 	strex	r3, r2, [r1]
 8009c98:	613b      	str	r3, [r7, #16]
   return(result);
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d1e6      	bne.n	8009c6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009cb4:	bf00      	nop
 8009cb6:	3754      	adds	r7, #84	; 0x54
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr

08009cbe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b090      	sub	sp, #64	; 0x40
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d137      	bne.n	8009d4a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cec:	e853 3f00 	ldrex	r3, [r3]
 8009cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cf8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	3308      	adds	r3, #8
 8009d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d02:	633a      	str	r2, [r7, #48]	; 0x30
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0a:	e841 2300 	strex	r3, r2, [r1]
 8009d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1e5      	bne.n	8009ce2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	e853 3f00 	ldrex	r3, [r3]
 8009d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	461a      	mov	r2, r3
 8009d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d38:	69b9      	ldr	r1, [r7, #24]
 8009d3a:	69fa      	ldr	r2, [r7, #28]
 8009d3c:	e841 2300 	strex	r3, r2, [r1]
 8009d40:	617b      	str	r3, [r7, #20]
   return(result);
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1e6      	bne.n	8009d16 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d48:	e002      	b.n	8009d50 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009d4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d4c:	f7f8 fff8 	bl	8002d40 <HAL_UART_TxCpltCallback>
}
 8009d50:	bf00      	nop
 8009d52:	3740      	adds	r7, #64	; 0x40
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f7ff f996 	bl	8009098 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d6c:	bf00      	nop
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d80:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d88:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d90:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9c:	2b80      	cmp	r3, #128	; 0x80
 8009d9e:	d109      	bne.n	8009db4 <UART_DMAError+0x40>
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	2b21      	cmp	r3, #33	; 0x21
 8009da4:	d106      	bne.n	8009db4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2200      	movs	r2, #0
 8009daa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009dae:	6978      	ldr	r0, [r7, #20]
 8009db0:	f7ff fee0 	bl	8009b74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dbe:	2b40      	cmp	r3, #64	; 0x40
 8009dc0:	d109      	bne.n	8009dd6 <UART_DMAError+0x62>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2b22      	cmp	r3, #34	; 0x22
 8009dc6:	d106      	bne.n	8009dd6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009dd0:	6978      	ldr	r0, [r7, #20]
 8009dd2:	f7ff ff0f 	bl	8009bf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ddc:	f043 0210 	orr.w	r2, r3, #16
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009de6:	6978      	ldr	r0, [r7, #20]
 8009de8:	f7ff f95f 	bl	80090aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dec:	bf00      	nop
 8009dee:	3718      	adds	r7, #24
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009e12:	68f8      	ldr	r0, [r7, #12]
 8009e14:	f7ff f949 	bl	80090aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e18:	bf00      	nop
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b088      	sub	sp, #32
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	61bb      	str	r3, [r7, #24]
 8009e48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6979      	ldr	r1, [r7, #20]
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	613b      	str	r3, [r7, #16]
   return(result);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e6      	bne.n	8009e28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7f8 ff69 	bl	8002d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e6e:	bf00      	nop
 8009e70:	3720      	adds	r7, #32
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b096      	sub	sp, #88	; 0x58
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8e:	2b22      	cmp	r3, #34	; 0x22
 8009e90:	f040 8095 	bne.w	8009fbe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009e9e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009ea2:	b2d9      	uxtb	r1, r3
 8009ea4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eae:	400a      	ands	r2, r1
 8009eb0:	b2d2      	uxtb	r2, r2
 8009eb2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d178      	bne.n	8009fce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ef0:	653b      	str	r3, [r7, #80]	; 0x50
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efa:	647b      	str	r3, [r7, #68]	; 0x44
 8009efc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e6      	bne.n	8009edc <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3308      	adds	r3, #8
 8009f14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	f023 0301 	bic.w	r3, r3, #1
 8009f24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e5      	bne.n	8009f0e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2220      	movs	r2, #32
 8009f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d12e      	bne.n	8009fb6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	e853 3f00 	ldrex	r3, [r3]
 8009f6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0310 	bic.w	r3, r3, #16
 8009f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f7c:	61fb      	str	r3, [r7, #28]
 8009f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f80:	69b9      	ldr	r1, [r7, #24]
 8009f82:	69fa      	ldr	r2, [r7, #28]
 8009f84:	e841 2300 	strex	r3, r2, [r1]
 8009f88:	617b      	str	r3, [r7, #20]
   return(result);
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1e6      	bne.n	8009f5e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	f003 0310 	and.w	r3, r3, #16
 8009f9a:	2b10      	cmp	r3, #16
 8009f9c:	d103      	bne.n	8009fa6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2210      	movs	r2, #16
 8009fa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7ff f884 	bl	80090bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009fb4:	e00b      	b.n	8009fce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7f8 fed8 	bl	8002d6c <HAL_UART_RxCpltCallback>
}
 8009fbc:	e007      	b.n	8009fce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	699a      	ldr	r2, [r3, #24]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 0208 	orr.w	r2, r2, #8
 8009fcc:	619a      	str	r2, [r3, #24]
}
 8009fce:	bf00      	nop
 8009fd0:	3758      	adds	r7, #88	; 0x58
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b096      	sub	sp, #88	; 0x58
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fe4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fee:	2b22      	cmp	r3, #34	; 0x22
 8009ff0:	f040 8095 	bne.w	800a11e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a002:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800a004:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800a008:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a00c:	4013      	ands	r3, r2
 800a00e:	b29a      	uxth	r2, r3
 800a010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a012:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a018:	1c9a      	adds	r2, r3, #2
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a024:	b29b      	uxth	r3, r3
 800a026:	3b01      	subs	r3, #1
 800a028:	b29a      	uxth	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a036:	b29b      	uxth	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d178      	bne.n	800a12e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a044:	e853 3f00 	ldrex	r3, [r3]
 800a048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a050:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	461a      	mov	r2, r3
 800a058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a05a:	643b      	str	r3, [r7, #64]	; 0x40
 800a05c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a062:	e841 2300 	strex	r3, r2, [r1]
 800a066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1e6      	bne.n	800a03c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	f023 0301 	bic.w	r3, r3, #1
 800a084:	64bb      	str	r3, [r7, #72]	; 0x48
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3308      	adds	r3, #8
 800a08c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a08e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e5      	bne.n	800a06e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2220      	movs	r2, #32
 800a0a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d12e      	bne.n	800a116 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	e853 3f00 	ldrex	r3, [r3]
 800a0ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f023 0310 	bic.w	r3, r3, #16
 800a0d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e0:	6979      	ldr	r1, [r7, #20]
 800a0e2:	69ba      	ldr	r2, [r7, #24]
 800a0e4:	e841 2300 	strex	r3, r2, [r1]
 800a0e8:	613b      	str	r3, [r7, #16]
   return(result);
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1e6      	bne.n	800a0be <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0310 	and.w	r3, r3, #16
 800a0fa:	2b10      	cmp	r3, #16
 800a0fc:	d103      	bne.n	800a106 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7fe ffd4 	bl	80090bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a114:	e00b      	b.n	800a12e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f8 fe28 	bl	8002d6c <HAL_UART_RxCpltCallback>
}
 800a11c:	e007      	b.n	800a12e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f042 0208 	orr.w	r2, r2, #8
 800a12c:	619a      	str	r2, [r3, #24]
}
 800a12e:	bf00      	nop
 800a130:	3758      	adds	r7, #88	; 0x58
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b0a6      	sub	sp, #152	; 0x98
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a146:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	2b22      	cmp	r3, #34	; 0x22
 800a170:	f040 814f 	bne.w	800a412 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a17a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a17e:	e0f6      	b.n	800a36e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a186:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a18a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a18e:	b2d9      	uxtb	r1, r3
 800a190:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a19a:	400a      	ands	r2, r1
 800a19c:	b2d2      	uxtb	r2, r2
 800a19e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	3b01      	subs	r3, #1
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69db      	ldr	r3, [r3, #28]
 800a1c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a1c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1ca:	f003 0307 	and.w	r3, r3, #7
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d053      	beq.n	800a27a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d011      	beq.n	800a202 <UART_RxISR_8BIT_FIFOEN+0xca>
 800a1de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1f8:	f043 0201 	orr.w	r2, r3, #1
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d011      	beq.n	800a232 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a20e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a212:	f003 0301 	and.w	r3, r3, #1
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00b      	beq.n	800a232 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2202      	movs	r2, #2
 800a220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a228:	f043 0204 	orr.w	r2, r3, #4
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a232:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d011      	beq.n	800a262 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a23e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00b      	beq.n	800a262 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2204      	movs	r2, #4
 800a250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a258:	f043 0202 	orr.w	r2, r3, #2
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d006      	beq.n	800a27a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f7fe ff1c 	bl	80090aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a280:	b29b      	uxth	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d173      	bne.n	800a36e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a28c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a28e:	e853 3f00 	ldrex	r3, [r3]
 800a292:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a294:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a29a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a2a8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a2aa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ac:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a2ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a2b0:	e841 2300 	strex	r3, r2, [r1]
 800a2b4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a2b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1e4      	bne.n	800a286 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c6:	e853 3f00 	ldrex	r3, [r3]
 800a2ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a2cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2d2:	f023 0301 	bic.w	r3, r3, #1
 800a2d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a2e0:	657a      	str	r2, [r7, #84]	; 0x54
 800a2e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2e8:	e841 2300 	strex	r3, r2, [r1]
 800a2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1e3      	bne.n	800a2bc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2220      	movs	r2, #32
 800a2f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a306:	2b01      	cmp	r3, #1
 800a308:	d12e      	bne.n	800a368 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a320:	f023 0310 	bic.w	r3, r3, #16
 800a324:	67bb      	str	r3, [r7, #120]	; 0x78
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a32e:	643b      	str	r3, [r7, #64]	; 0x40
 800a330:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a332:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a334:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a336:	e841 2300 	strex	r3, r2, [r1]
 800a33a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1e6      	bne.n	800a310 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	f003 0310 	and.w	r3, r3, #16
 800a34c:	2b10      	cmp	r3, #16
 800a34e:	d103      	bne.n	800a358 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2210      	movs	r2, #16
 800a356:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7fe feab 	bl	80090bc <HAL_UARTEx_RxEventCallback>
 800a366:	e002      	b.n	800a36e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f7f8 fcff 	bl	8002d6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a36e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <UART_RxISR_8BIT_FIFOEN+0x24c>
 800a376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a37a:	f003 0320 	and.w	r3, r3, #32
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f47f aefe 	bne.w	800a180 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a38a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a38e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800a392:	2b00      	cmp	r3, #0
 800a394:	d045      	beq.n	800a422 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a39c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d23e      	bcs.n	800a422 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	e853 3f00 	ldrex	r3, [r3]
 800a3b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3ba:	673b      	str	r3, [r7, #112]	; 0x70
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a3c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a3c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3cc:	e841 2300 	strex	r3, r2, [r1]
 800a3d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d1e5      	bne.n	800a3a4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a14      	ldr	r2, [pc, #80]	; (800a42c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800a3dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	e853 3f00 	ldrex	r3, [r3]
 800a3ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f043 0320 	orr.w	r3, r3, #32
 800a3f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3fc:	61bb      	str	r3, [r7, #24]
 800a3fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a400:	6979      	ldr	r1, [r7, #20]
 800a402:	69ba      	ldr	r2, [r7, #24]
 800a404:	e841 2300 	strex	r3, r2, [r1]
 800a408:	613b      	str	r3, [r7, #16]
   return(result);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d1e6      	bne.n	800a3de <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a410:	e007      	b.n	800a422 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	699a      	ldr	r2, [r3, #24]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f042 0208 	orr.w	r2, r2, #8
 800a420:	619a      	str	r2, [r3, #24]
}
 800a422:	bf00      	nop
 800a424:	3798      	adds	r7, #152	; 0x98
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	08009e77 	.word	0x08009e77

0800a430 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b0a8      	sub	sp, #160	; 0xa0
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a43e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a466:	2b22      	cmp	r3, #34	; 0x22
 800a468:	f040 8153 	bne.w	800a712 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a472:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a476:	e0fa      	b.n	800a66e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a486:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800a48a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800a48e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a492:	4013      	ands	r3, r2
 800a494:	b29a      	uxth	r2, r3
 800a496:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a49a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a0:	1c9a      	adds	r2, r3, #2
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	3b01      	subs	r3, #1
 800a4b0:	b29a      	uxth	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	69db      	ldr	r3, [r3, #28]
 800a4be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a4c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4c6:	f003 0307 	and.w	r3, r3, #7
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d053      	beq.n	800a576 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d011      	beq.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0xce>
 800a4da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a4de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00b      	beq.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f4:	f043 0201 	orr.w	r2, r3, #1
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a502:	f003 0302 	and.w	r3, r3, #2
 800a506:	2b00      	cmp	r3, #0
 800a508:	d011      	beq.n	800a52e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a50a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00b      	beq.n	800a52e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2202      	movs	r2, #2
 800a51c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a524:	f043 0204 	orr.w	r2, r3, #4
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a52e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a532:	f003 0304 	and.w	r3, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d011      	beq.n	800a55e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a53a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00b      	beq.n	800a55e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2204      	movs	r2, #4
 800a54c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a554:	f043 0202 	orr.w	r2, r3, #2
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a564:	2b00      	cmp	r3, #0
 800a566:	d006      	beq.n	800a576 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7fe fd9e 	bl	80090aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d175      	bne.n	800a66e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a592:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a596:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a5a6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e4      	bne.n	800a582 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3308      	adds	r3, #8
 800a5be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c2:	e853 3f00 	ldrex	r3, [r3]
 800a5c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5ce:	f023 0301 	bic.w	r3, r3, #1
 800a5d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a5e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5e8:	e841 2300 	strex	r3, r2, [r1]
 800a5ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1e1      	bne.n	800a5b8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2220      	movs	r2, #32
 800a5f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a606:	2b01      	cmp	r3, #1
 800a608:	d12e      	bne.n	800a668 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a618:	e853 3f00 	ldrex	r3, [r3]
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a620:	f023 0310 	bic.w	r3, r3, #16
 800a624:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a62e:	647b      	str	r3, [r7, #68]	; 0x44
 800a630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a636:	e841 2300 	strex	r3, r2, [r1]
 800a63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a63c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1e6      	bne.n	800a610 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d103      	bne.n	800a658 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2210      	movs	r2, #16
 800a656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a65e:	4619      	mov	r1, r3
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7fe fd2b 	bl	80090bc <HAL_UARTEx_RxEventCallback>
 800a666:	e002      	b.n	800a66e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7f8 fb7f 	bl	8002d6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a66e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a672:	2b00      	cmp	r3, #0
 800a674:	d006      	beq.n	800a684 <UART_RxISR_16BIT_FIFOEN+0x254>
 800a676:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a67a:	f003 0320 	and.w	r3, r3, #32
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f47f aefa 	bne.w	800a478 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a68a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a68e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a692:	2b00      	cmp	r3, #0
 800a694:	d045      	beq.n	800a722 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a69c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d23e      	bcs.n	800a722 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3308      	adds	r3, #8
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	e853 3f00 	ldrex	r3, [r3]
 800a6b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	677b      	str	r3, [r7, #116]	; 0x74
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3308      	adds	r3, #8
 800a6c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a6c4:	633a      	str	r2, [r7, #48]	; 0x30
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6cc:	e841 2300 	strex	r3, r2, [r1]
 800a6d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1e5      	bne.n	800a6a4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a14      	ldr	r2, [pc, #80]	; (800a72c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a6dc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f043 0320 	orr.w	r3, r3, #32
 800a6f2:	673b      	str	r3, [r7, #112]	; 0x70
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	69b9      	ldr	r1, [r7, #24]
 800a702:	69fa      	ldr	r2, [r7, #28]
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	617b      	str	r3, [r7, #20]
   return(result);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e6      	bne.n	800a6de <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a710:	e007      	b.n	800a722 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	699a      	ldr	r2, [r3, #24]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0208 	orr.w	r2, r2, #8
 800a720:	619a      	str	r2, [r3, #24]
}
 800a722:	bf00      	nop
 800a724:	37a0      	adds	r7, #160	; 0xa0
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	08009fd7 	.word	0x08009fd7

0800a730 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bc80      	pop	{r7}
 800a740:	4770      	bx	lr

0800a742 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	bc80      	pop	{r7}
 800a752:	4770      	bx	lr

0800a754 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	bc80      	pop	{r7}
 800a764:	4770      	bx	lr

0800a766 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a766:	b580      	push	{r7, lr}
 800a768:	b088      	sub	sp, #32
 800a76a:	af02      	add	r7, sp, #8
 800a76c:	60f8      	str	r0, [r7, #12]
 800a76e:	1d3b      	adds	r3, r7, #4
 800a770:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a774:	2300      	movs	r3, #0
 800a776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d101      	bne.n	800a786 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a782:	2302      	movs	r3, #2
 800a784:	e046      	b.n	800a814 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2224      	movs	r2, #36	; 0x24
 800a792:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f022 0201 	bic.w	r2, r2, #1
 800a7a4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a7c0:	1d3b      	adds	r3, r7, #4
 800a7c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 f90e 	bl	800a9e8 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f042 0201 	orr.w	r2, r2, #1
 800a7da:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7dc:	f7f7 fcd4 	bl	8002188 <HAL_GetTick>
 800a7e0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f7fe ffcf 	bl	8009794 <UART_WaitOnFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	75fb      	strb	r3, [r7, #23]
 800a800:	e003      	b.n	800a80a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2220      	movs	r2, #32
 800a806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 800a812:	7dfb      	ldrb	r3, [r7, #23]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b089      	sub	sp, #36	; 0x24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d101      	bne.n	800a832 <HAL_UARTEx_EnableStopMode+0x16>
 800a82e:	2302      	movs	r3, #2
 800a830:	e021      	b.n	800a876 <HAL_UARTEx_EnableStopMode+0x5a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	e853 3f00 	ldrex	r3, [r3]
 800a846:	60bb      	str	r3, [r7, #8]
   return(result);
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f043 0302 	orr.w	r3, r3, #2
 800a84e:	61fb      	str	r3, [r7, #28]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85c:	6979      	ldr	r1, [r7, #20]
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	e841 2300 	strex	r3, r2, [r1]
 800a864:	613b      	str	r3, [r7, #16]
   return(result);
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1e6      	bne.n	800a83a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a874:	2300      	movs	r3, #0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3724      	adds	r7, #36	; 0x24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bc80      	pop	{r7}
 800a87e:	4770      	bx	lr

0800a880 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_UARTEx_DisableFifoMode+0x16>
 800a892:	2302      	movs	r3, #2
 800a894:	e027      	b.n	800a8e6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2224      	movs	r2, #36	; 0x24
 800a8a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f022 0201 	bic.w	r2, r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a8c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	68fa      	ldr	r2, [r7, #12]
 800a8d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2220      	movs	r2, #32
 800a8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8e4:	2300      	movs	r3, #0
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3714      	adds	r7, #20
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bc80      	pop	{r7}
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a900:	2b01      	cmp	r3, #1
 800a902:	d101      	bne.n	800a908 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a904:	2302      	movs	r3, #2
 800a906:	e02d      	b.n	800a964 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2224      	movs	r2, #36	; 0x24
 800a914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0201 	bic.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f000 f871 	bl	800aa2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3710      	adds	r7, #16
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d101      	bne.n	800a984 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a980:	2302      	movs	r3, #2
 800a982:	e02d      	b.n	800a9e0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2224      	movs	r2, #36	; 0x24
 800a990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f022 0201 	bic.w	r2, r2, #1
 800a9aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	430a      	orrs	r2, r1
 800a9be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f833 	bl	800aa2c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2220      	movs	r2, #32
 800a9d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b085      	sub	sp, #20
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	1d3b      	adds	r3, r7, #4
 800a9f2:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f023 0210 	bic.w	r2, r3, #16
 800aa00:	893b      	ldrh	r3, [r7, #8]
 800aa02:	4619      	mov	r1, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800aa16:	7abb      	ldrb	r3, [r7, #10]
 800aa18:	061a      	lsls	r2, r3, #24
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
}
 800aa22:	bf00      	nop
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bc80      	pop	{r7}
 800aa2a:	4770      	bx	lr

0800aa2c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d108      	bne.n	800aa4e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa4c:	e031      	b.n	800aab2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa4e:	2308      	movs	r3, #8
 800aa50:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa52:	2308      	movs	r3, #8
 800aa54:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	0e5b      	lsrs	r3, r3, #25
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	0f5b      	lsrs	r3, r3, #29
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	f003 0307 	and.w	r3, r3, #7
 800aa74:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	7b3a      	ldrb	r2, [r7, #12]
 800aa7a:	4910      	ldr	r1, [pc, #64]	; (800aabc <UARTEx_SetNbDataToProcess+0x90>)
 800aa7c:	5c8a      	ldrb	r2, [r1, r2]
 800aa7e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa82:	7b3a      	ldrb	r2, [r7, #12]
 800aa84:	490e      	ldr	r1, [pc, #56]	; (800aac0 <UARTEx_SetNbDataToProcess+0x94>)
 800aa86:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa88:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	7b7a      	ldrb	r2, [r7, #13]
 800aa98:	4908      	ldr	r1, [pc, #32]	; (800aabc <UARTEx_SetNbDataToProcess+0x90>)
 800aa9a:	5c8a      	ldrb	r2, [r1, r2]
 800aa9c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aaa0:	7b7a      	ldrb	r2, [r7, #13]
 800aaa2:	4907      	ldr	r1, [pc, #28]	; (800aac0 <UARTEx_SetNbDataToProcess+0x94>)
 800aaa4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aab2:	bf00      	nop
 800aab4:	3714      	adds	r7, #20
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bc80      	pop	{r7}
 800aaba:	4770      	bx	lr
 800aabc:	0801d1e0 	.word	0x0801d1e0
 800aac0:	0801d1e8 	.word	0x0801d1e8

0800aac4 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800aac8:	f7f7 fa08 	bl	8001edc <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800aacc:	f000 f818 	bl	800ab00 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800aad0:	bf00      	nop
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800aad4:	b480      	push	{r7}
 800aad6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800aad8:	f3bf 8f4f 	dsb	sy
}
 800aadc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aade:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <__NVIC_SystemReset+0x24>)
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aae6:	4904      	ldr	r1, [pc, #16]	; (800aaf8 <__NVIC_SystemReset+0x24>)
 800aae8:	4b04      	ldr	r3, [pc, #16]	; (800aafc <__NVIC_SystemReset+0x28>)
 800aaea:	4313      	orrs	r3, r2
 800aaec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800aaee:	f3bf 8f4f 	dsb	sy
}
 800aaf2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <__NVIC_SystemReset+0x20>
 800aaf8:	e000ed00 	.word	0xe000ed00
 800aafc:	05fa0004 	.word	0x05fa0004

0800ab00 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	9302      	str	r3, [sp, #8]
 800ab0e:	2302      	movs	r3, #2
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	2301      	movs	r3, #1
 800ab14:	9300      	str	r3, [sp, #0]
 800ab16:	4b5a      	ldr	r3, [pc, #360]	; (800ac80 <LoRaWAN_Init+0x180>)
 800ab18:	2200      	movs	r2, #0
 800ab1a:	2100      	movs	r1, #0
 800ab1c:	2002      	movs	r0, #2
 800ab1e:	f011 fa6b 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800ab22:	2300      	movs	r3, #0
 800ab24:	9302      	str	r3, [sp, #8]
 800ab26:	2304      	movs	r3, #4
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	4b55      	ldr	r3, [pc, #340]	; (800ac84 <LoRaWAN_Init+0x184>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	2100      	movs	r1, #0
 800ab34:	2002      	movs	r0, #2
 800ab36:	f011 fa5f 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	2302      	movs	r3, #2
 800ab40:	9301      	str	r3, [sp, #4]
 800ab42:	2301      	movs	r3, #1
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	4b50      	ldr	r3, [pc, #320]	; (800ac88 <LoRaWAN_Init+0x188>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	2002      	movs	r0, #2
 800ab4e:	f011 fa53 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800ab52:	1d3b      	adds	r3, r7, #4
 800ab54:	4619      	mov	r1, r3
 800ab56:	2000      	movs	r0, #0
 800ab58:	f003 f984 	bl	800de64 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	0e1b      	lsrs	r3, r3, #24
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	461a      	mov	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	0c1b      	lsrs	r3, r3, #16
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	0a1b      	lsrs	r3, r3, #8
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	9302      	str	r3, [sp, #8]
 800ab74:	9101      	str	r1, [sp, #4]
 800ab76:	9200      	str	r2, [sp, #0]
 800ab78:	4b44      	ldr	r3, [pc, #272]	; (800ac8c <LoRaWAN_Init+0x18c>)
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	2002      	movs	r0, #2
 800ab80:	f011 fa3a 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800ab84:	1d3b      	adds	r3, r7, #4
 800ab86:	4619      	mov	r1, r3
 800ab88:	2001      	movs	r0, #1
 800ab8a:	f003 f96b 	bl	800de64 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	0e1b      	lsrs	r3, r3, #24
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	461a      	mov	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	0c1b      	lsrs	r3, r3, #16
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	0a1b      	lsrs	r3, r3, #8
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	b2c0      	uxtb	r0, r0
 800aba8:	9003      	str	r0, [sp, #12]
 800abaa:	9302      	str	r3, [sp, #8]
 800abac:	9101      	str	r1, [sp, #4]
 800abae:	9200      	str	r2, [sp, #0]
 800abb0:	4b37      	ldr	r3, [pc, #220]	; (800ac90 <LoRaWAN_Init+0x190>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	2002      	movs	r0, #2
 800abb8:	f011 fa1e 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800abbc:	2300      	movs	r3, #0
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	4b34      	ldr	r3, [pc, #208]	; (800ac94 <LoRaWAN_Init+0x194>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800abc8:	4833      	ldr	r0, [pc, #204]	; (800ac98 <LoRaWAN_Init+0x198>)
 800abca:	f010 ff67 	bl	801ba9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800abce:	2300      	movs	r3, #0
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	4b32      	ldr	r3, [pc, #200]	; (800ac9c <LoRaWAN_Init+0x19c>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800abda:	4831      	ldr	r0, [pc, #196]	; (800aca0 <LoRaWAN_Init+0x1a0>)
 800abdc:	f010 ff5e 	bl	801ba9c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800abe0:	2300      	movs	r3, #0
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	4b2f      	ldr	r3, [pc, #188]	; (800aca4 <LoRaWAN_Init+0x1a4>)
 800abe6:	2201      	movs	r2, #1
 800abe8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800abec:	482e      	ldr	r0, [pc, #184]	; (800aca8 <LoRaWAN_Init+0x1a8>)
 800abee:	f010 ff55 	bl	801ba9c <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800abf2:	2300      	movs	r3, #0
 800abf4:	9300      	str	r3, [sp, #0]
 800abf6:	4b2d      	ldr	r3, [pc, #180]	; (800acac <LoRaWAN_Init+0x1ac>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800abfe:	482c      	ldr	r0, [pc, #176]	; (800acb0 <LoRaWAN_Init+0x1b0>)
 800ac00:	f010 ff4c 	bl	801ba9c <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800ac04:	4a2b      	ldr	r2, [pc, #172]	; (800acb4 <LoRaWAN_Init+0x1b4>)
 800ac06:	2100      	movs	r1, #0
 800ac08:	2001      	movs	r0, #1
 800ac0a:	f010 feaf 	bl	801b96c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800ac0e:	4a2a      	ldr	r2, [pc, #168]	; (800acb8 <LoRaWAN_Init+0x1b8>)
 800ac10:	2100      	movs	r1, #0
 800ac12:	2002      	movs	r0, #2
 800ac14:	f010 feaa 	bl	801b96c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800ac18:	4a28      	ldr	r2, [pc, #160]	; (800acbc <LoRaWAN_Init+0x1bc>)
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	2004      	movs	r0, #4
 800ac1e:	f010 fea5 	bl	801b96c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800ac22:	4a27      	ldr	r2, [pc, #156]	; (800acc0 <LoRaWAN_Init+0x1c0>)
 800ac24:	2100      	movs	r1, #0
 800ac26:	2008      	movs	r0, #8
 800ac28:	f010 fea0 	bl	801b96c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800ac2c:	f000 fd3c 	bl	800b6a8 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800ac30:	f04f 7181 	mov.w	r1, #16908288	; 0x1020000
 800ac34:	4823      	ldr	r0, [pc, #140]	; (800acc4 <LoRaWAN_Init+0x1c4>)
 800ac36:	f002 f9f9 	bl	800d02c <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800ac3a:	4823      	ldr	r0, [pc, #140]	; (800acc8 <LoRaWAN_Init+0x1c8>)
 800ac3c:	f002 fa54 	bl	800d0e8 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800ac40:	4819      	ldr	r0, [pc, #100]	; (800aca8 <LoRaWAN_Init+0x1a8>)
 800ac42:	f010 ff61 	bl	801bb08 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800ac46:	4b21      	ldr	r3, [pc, #132]	; (800accc <LoRaWAN_Init+0x1cc>)
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	4a21      	ldr	r2, [pc, #132]	; (800acd0 <LoRaWAN_Init+0x1d0>)
 800ac4c:	7812      	ldrb	r2, [r2, #0]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f002 fbc3 	bl	800d3dc <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800ac56:	4b1f      	ldr	r3, [pc, #124]	; (800acd4 <LoRaWAN_Init+0x1d4>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d10b      	bne.n	800ac76 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800ac5e:	4b1e      	ldr	r3, [pc, #120]	; (800acd8 <LoRaWAN_Init+0x1d8>)
 800ac60:	6819      	ldr	r1, [r3, #0]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	4b1d      	ldr	r3, [pc, #116]	; (800acdc <LoRaWAN_Init+0x1dc>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	481d      	ldr	r0, [pc, #116]	; (800ace0 <LoRaWAN_Init+0x1e0>)
 800ac6c:	f010 ff16 	bl	801ba9c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800ac70:	481b      	ldr	r0, [pc, #108]	; (800ace0 <LoRaWAN_Init+0x1e0>)
 800ac72:	f010 ff49 	bl	801bb08 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800ac76:	bf00      	nop
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	0801c7e0 	.word	0x0801c7e0
 800ac84:	0801c804 	.word	0x0801c804
 800ac88:	0801c828 	.word	0x0801c828
 800ac8c:	0801c84c 	.word	0x0801c84c
 800ac90:	0801c870 	.word	0x0801c870
 800ac94:	0800b199 	.word	0x0800b199
 800ac98:	2000061c 	.word	0x2000061c
 800ac9c:	0800b1ab 	.word	0x0800b1ab
 800aca0:	20000634 	.word	0x20000634
 800aca4:	0800b1bd 	.word	0x0800b1bd
 800aca8:	2000064c 	.word	0x2000064c
 800acac:	0800b571 	.word	0x0800b571
 800acb0:	20000510 	.word	0x20000510
 800acb4:	0800d371 	.word	0x0800d371
 800acb8:	0800ae59 	.word	0x0800ae59
 800acbc:	0800b595 	.word	0x0800b595
 800acc0:	0800b4f1 	.word	0x0800b4f1
 800acc4:	20000024 	.word	0x20000024
 800acc8:	20000070 	.word	0x20000070
 800accc:	20000020 	.word	0x20000020
 800acd0:	20000021 	.word	0x20000021
 800acd4:	200004f4 	.word	0x200004f4
 800acd8:	20000084 	.word	0x20000084
 800acdc:	0800b175 	.word	0x0800b175
 800ace0:	200004f8 	.word	0x200004f8

0800ace4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800acee:	88fb      	ldrh	r3, [r7, #6]
 800acf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acf4:	d104      	bne.n	800ad00 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800acf6:	2100      	movs	r1, #0
 800acf8:	2002      	movs	r0, #2
 800acfa:	f010 fe59 	bl	801b9b0 <UTIL_SEQ_SetTask>
      }
      break;
 800acfe:	e000      	b.n	800ad02 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 800ad00:	bf00      	nop
  }
}
 800ad02:	bf00      	nop
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800ad0c:	b5b0      	push	{r4, r5, r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af06      	add	r7, sp, #24
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 800ad16:	2300      	movs	r3, #0
 800ad18:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8088 	beq.w	800ae32 <OnRxData+0x126>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800ad22:	4846      	ldr	r0, [pc, #280]	; (800ae3c <OnRxData+0x130>)
 800ad24:	f010 fef0 	bl	801bb08 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d057      	beq.n	800ade0 <OnRxData+0xd4>
    {
      if (appData != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d054      	beq.n	800ade0 <OnRxData+0xd4>
      {
        RxPort = appData->Port;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d04d      	beq.n	800ade0 <OnRxData+0xd4>
        {
          switch (appData->Port)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d021      	beq.n	800ad90 <OnRxData+0x84>
 800ad4c:	2b03      	cmp	r3, #3
 800ad4e:	d149      	bne.n	800ade4 <OnRxData+0xd8>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	785b      	ldrb	r3, [r3, #1]
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d117      	bne.n	800ad88 <OnRxData+0x7c>
              {
                switch (appData->Buffer[0])
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d00e      	beq.n	800ad80 <OnRxData+0x74>
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	dc12      	bgt.n	800ad8c <OnRxData+0x80>
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d002      	beq.n	800ad70 <OnRxData+0x64>
 800ad6a:	2b01      	cmp	r3, #1
 800ad6c:	d004      	beq.n	800ad78 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 800ad6e:	e00d      	b.n	800ad8c <OnRxData+0x80>
                    LmHandlerRequestClass(CLASS_A);
 800ad70:	2000      	movs	r0, #0
 800ad72:	f002 fcbf 	bl	800d6f4 <LmHandlerRequestClass>
                    break;
 800ad76:	e00a      	b.n	800ad8e <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_B);
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f002 fcbb 	bl	800d6f4 <LmHandlerRequestClass>
                    break;
 800ad7e:	e006      	b.n	800ad8e <OnRxData+0x82>
                    LmHandlerRequestClass(CLASS_C);
 800ad80:	2002      	movs	r0, #2
 800ad82:	f002 fcb7 	bl	800d6f4 <LmHandlerRequestClass>
                    break;
 800ad86:	e002      	b.n	800ad8e <OnRxData+0x82>
                }
              }
 800ad88:	bf00      	nop
 800ad8a:	e02e      	b.n	800adea <OnRxData+0xde>
                    break;
 800ad8c:	bf00      	nop
              break;
 800ad8e:	e02c      	b.n	800adea <OnRxData+0xde>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	785b      	ldrb	r3, [r3, #1]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d127      	bne.n	800ade8 <OnRxData+0xdc>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f003 0301 	and.w	r3, r3, #1
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	4b26      	ldr	r3, [pc, #152]	; (800ae40 <OnRxData+0x134>)
 800ada6:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 800ada8:	4b25      	ldr	r3, [pc, #148]	; (800ae40 <OnRxData+0x134>)
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10b      	bne.n	800adc8 <OnRxData+0xbc>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 800adb0:	4b24      	ldr	r3, [pc, #144]	; (800ae44 <OnRxData+0x138>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	2100      	movs	r1, #0
 800adb6:	2003      	movs	r0, #3
 800adb8:	f011 f91e 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800adbc:	2201      	movs	r2, #1
 800adbe:	2120      	movs	r1, #32
 800adc0:	4821      	ldr	r0, [pc, #132]	; (800ae48 <OnRxData+0x13c>)
 800adc2:	f7fa fbdf 	bl	8005584 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 800adc6:	e00f      	b.n	800ade8 <OnRxData+0xdc>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800adc8:	4b20      	ldr	r3, [pc, #128]	; (800ae4c <OnRxData+0x140>)
 800adca:	2200      	movs	r2, #0
 800adcc:	2100      	movs	r1, #0
 800adce:	2003      	movs	r0, #3
 800add0:	f011 f912 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800add4:	2200      	movs	r2, #0
 800add6:	2120      	movs	r1, #32
 800add8:	481b      	ldr	r0, [pc, #108]	; (800ae48 <OnRxData+0x13c>)
 800adda:	f7fa fbd3 	bl	8005584 <HAL_GPIO_WritePin>
              break;
 800adde:	e003      	b.n	800ade8 <OnRxData+0xdc>

            default:

              break;
          }
        }
 800ade0:	bf00      	nop
 800ade2:	e002      	b.n	800adea <OnRxData+0xde>
              break;
 800ade4:	bf00      	nop
 800ade6:	e000      	b.n	800adea <OnRxData+0xde>
              break;
 800ade8:	bf00      	nop
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	7c1b      	ldrb	r3, [r3, #16]
 800adee:	2b05      	cmp	r3, #5
 800adf0:	d81f      	bhi.n	800ae32 <OnRxData+0x126>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	7bfa      	ldrb	r2, [r7, #15]
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800adfe:	460c      	mov	r4, r1
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	7c09      	ldrb	r1, [r1, #16]
 800ae04:	4608      	mov	r0, r1
 800ae06:	4912      	ldr	r1, [pc, #72]	; (800ae50 <OnRxData+0x144>)
 800ae08:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ae0c:	6838      	ldr	r0, [r7, #0]
 800ae0e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800ae12:	4605      	mov	r5, r0
 800ae14:	6838      	ldr	r0, [r7, #0]
 800ae16:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800ae1a:	9005      	str	r0, [sp, #20]
 800ae1c:	9504      	str	r5, [sp, #16]
 800ae1e:	9103      	str	r1, [sp, #12]
 800ae20:	9402      	str	r4, [sp, #8]
 800ae22:	9201      	str	r2, [sp, #4]
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	4b0b      	ldr	r3, [pc, #44]	; (800ae54 <OnRxData+0x148>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	2003      	movs	r0, #3
 800ae2e:	f011 f8e3 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800ae32:	bf00      	nop
 800ae34:	3710      	adds	r7, #16
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bdb0      	pop	{r4, r5, r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20000634 	.word	0x20000634
 800ae40:	2000061a 	.word	0x2000061a
 800ae44:	0801c894 	.word	0x0801c894
 800ae48:	48000400 	.word	0x48000400
 800ae4c:	0801c8a0 	.word	0x0801c8a0
 800ae50:	20000008 	.word	0x20000008
 800ae54:	0801c8ac 	.word	0x0801c8ac

0800ae58 <SendTxData>:

static void SendTxData(void)
{
 800ae58:	b590      	push	{r4, r7, lr}
 800ae5a:	b091      	sub	sp, #68	; 0x44
 800ae5c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800ae5e:	23ff      	movs	r3, #255	; 0xff
 800ae60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 800ae64:	f7f7 f864 	bl	8001f30 <GetBatteryLevel>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t temperature = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t humidity = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	853b      	strh	r3, [r7, #40]	; 0x28
  uint32_t i = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t latitude = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t longitude = 0;
 800ae86:	2300      	movs	r3, #0
 800ae88:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 800ae8e:	1d3b      	adds	r3, r7, #4
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7f7 fa0d 	bl	80022b0 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 800ae96:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4b8f      	ldr	r3, [pc, #572]	; (800b0dc <SendTxData+0x284>)
 800ae9e:	2201      	movs	r2, #1
 800aea0:	2100      	movs	r1, #0
 800aea2:	2002      	movs	r0, #2
 800aea4:	f011 f8a8 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7f5 fe40 	bl	8000b30 <__aeabi_f2iz>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	b21b      	sxth	r3, r3
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	4b8a      	ldr	r3, [pc, #552]	; (800b0e0 <SendTxData+0x288>)
 800aeb8:	2201      	movs	r2, #1
 800aeba:	2100      	movs	r1, #0
 800aebc:	2002      	movs	r0, #2
 800aebe:	f011 f89b 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800aec2:	4b88      	ldr	r3, [pc, #544]	; (800b0e4 <SendTxData+0x28c>)
 800aec4:	2202      	movs	r2, #2
 800aec6:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	4987      	ldr	r1, [pc, #540]	; (800b0e8 <SendTxData+0x290>)
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f5 fcdf 	bl	8000890 <__aeabi_fmul>
 800aed2:	4603      	mov	r3, r0
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f5 fe51 	bl	8000b7c <__aeabi_f2uiz>
 800aeda:	4603      	mov	r3, r0
 800aedc:	853b      	strh	r3, [r7, #40]	; 0x28
  temperature = (int16_t)(sensor_data.temperature);
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7f5 fe25 	bl	8000b30 <__aeabi_f2iz>
 800aee6:	4603      	mov	r3, r0
 800aee8:	857b      	strh	r3, [r7, #42]	; 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	497f      	ldr	r1, [pc, #508]	; (800b0ec <SendTxData+0x294>)
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f5 fcce 	bl	8000890 <__aeabi_fmul>
 800aef4:	4603      	mov	r3, r0
 800aef6:	497c      	ldr	r1, [pc, #496]	; (800b0e8 <SendTxData+0x290>)
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7f5 fd7d 	bl	80009f8 <__aeabi_fdiv>
 800aefe:	4603      	mov	r3, r0
 800af00:	4618      	mov	r0, r3
 800af02:	f7f5 fe3b 	bl	8000b7c <__aeabi_f2uiz>
 800af06:	4603      	mov	r3, r0
 800af08:	85bb      	strh	r3, [r7, #44]	; 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 800af0a:	4b76      	ldr	r3, [pc, #472]	; (800b0e4 <SendTxData+0x28c>)
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	1c59      	adds	r1, r3, #1
 800af12:	6339      	str	r1, [r7, #48]	; 0x30
 800af14:	4413      	add	r3, r2
 800af16:	4a76      	ldr	r2, [pc, #472]	; (800b0f0 <SendTxData+0x298>)
 800af18:	7812      	ldrb	r2, [r2, #0]
 800af1a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 800af1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af1e:	0a1b      	lsrs	r3, r3, #8
 800af20:	b298      	uxth	r0, r3
 800af22:	4b70      	ldr	r3, [pc, #448]	; (800b0e4 <SendTxData+0x28c>)
 800af24:	685a      	ldr	r2, [r3, #4]
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	1c59      	adds	r1, r3, #1
 800af2a:	6339      	str	r1, [r7, #48]	; 0x30
 800af2c:	4413      	add	r3, r2
 800af2e:	b2c2      	uxtb	r2, r0
 800af30:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 800af32:	4b6c      	ldr	r3, [pc, #432]	; (800b0e4 <SendTxData+0x28c>)
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	1c59      	adds	r1, r3, #1
 800af3a:	6339      	str	r1, [r7, #48]	; 0x30
 800af3c:	4413      	add	r3, r2
 800af3e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800af40:	b2d2      	uxtb	r2, r2
 800af42:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 800af44:	4b67      	ldr	r3, [pc, #412]	; (800b0e4 <SendTxData+0x28c>)
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	1c59      	adds	r1, r3, #1
 800af4c:	6339      	str	r1, [r7, #48]	; 0x30
 800af4e:	4413      	add	r3, r2
 800af50:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 800af56:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af58:	0a1b      	lsrs	r3, r3, #8
 800af5a:	b298      	uxth	r0, r3
 800af5c:	4b61      	ldr	r3, [pc, #388]	; (800b0e4 <SendTxData+0x28c>)
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af62:	1c59      	adds	r1, r3, #1
 800af64:	6339      	str	r1, [r7, #48]	; 0x30
 800af66:	4413      	add	r3, r2
 800af68:	b2c2      	uxtb	r2, r0
 800af6a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 800af6c:	4b5d      	ldr	r3, [pc, #372]	; (800b0e4 <SendTxData+0x28c>)
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	1c59      	adds	r1, r3, #1
 800af74:	6339      	str	r1, [r7, #48]	; 0x30
 800af76:	4413      	add	r3, r2
 800af78:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800af7a:	b2d2      	uxtb	r2, r2
 800af7c:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 800af7e:	4b5d      	ldr	r3, [pc, #372]	; (800b0f4 <SendTxData+0x29c>)
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b08      	cmp	r3, #8
 800af84:	d007      	beq.n	800af96 <SendTxData+0x13e>
 800af86:	4b5b      	ldr	r3, [pc, #364]	; (800b0f4 <SendTxData+0x29c>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d003      	beq.n	800af96 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 800af8e:	4b59      	ldr	r3, [pc, #356]	; (800b0f4 <SendTxData+0x29c>)
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d120      	bne.n	800afd8 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 800af96:	4b53      	ldr	r3, [pc, #332]	; (800b0e4 <SendTxData+0x28c>)
 800af98:	685a      	ldr	r2, [r3, #4]
 800af9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9c:	1c59      	adds	r1, r3, #1
 800af9e:	6339      	str	r1, [r7, #48]	; 0x30
 800afa0:	4413      	add	r3, r2
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800afa6:	4b4f      	ldr	r3, [pc, #316]	; (800b0e4 <SendTxData+0x28c>)
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	1c59      	adds	r1, r3, #1
 800afae:	6339      	str	r1, [r7, #48]	; 0x30
 800afb0:	4413      	add	r3, r2
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800afb6:	4b4b      	ldr	r3, [pc, #300]	; (800b0e4 <SendTxData+0x28c>)
 800afb8:	685a      	ldr	r2, [r3, #4]
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	1c59      	adds	r1, r3, #1
 800afbe:	6339      	str	r1, [r7, #48]	; 0x30
 800afc0:	4413      	add	r3, r2
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 800afc6:	4b47      	ldr	r3, [pc, #284]	; (800b0e4 <SendTxData+0x28c>)
 800afc8:	685a      	ldr	r2, [r3, #4]
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	1c59      	adds	r1, r3, #1
 800afce:	6339      	str	r1, [r7, #48]	; 0x30
 800afd0:	4413      	add	r3, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	701a      	strb	r2, [r3, #0]
 800afd6:	e05b      	b.n	800b090 <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
    longitude = sensor_data.longitude;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 800afe0:	4b40      	ldr	r3, [pc, #256]	; (800b0e4 <SendTxData+0x28c>)
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe6:	1c59      	adds	r1, r3, #1
 800afe8:	6339      	str	r1, [r7, #48]	; 0x30
 800afea:	18d4      	adds	r4, r2, r3
 800afec:	f7f6 ffa0 	bl	8001f30 <GetBatteryLevel>
 800aff0:	4603      	mov	r3, r0
 800aff2:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	1418      	asrs	r0, r3, #16
 800aff8:	4b3a      	ldr	r3, [pc, #232]	; (800b0e4 <SendTxData+0x28c>)
 800affa:	685a      	ldr	r2, [r3, #4]
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	1c59      	adds	r1, r3, #1
 800b000:	6339      	str	r1, [r7, #48]	; 0x30
 800b002:	4413      	add	r3, r2
 800b004:	b2c2      	uxtb	r2, r0
 800b006:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	1218      	asrs	r0, r3, #8
 800b00c:	4b35      	ldr	r3, [pc, #212]	; (800b0e4 <SendTxData+0x28c>)
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b012:	1c59      	adds	r1, r3, #1
 800b014:	6339      	str	r1, [r7, #48]	; 0x30
 800b016:	4413      	add	r3, r2
 800b018:	b2c2      	uxtb	r2, r0
 800b01a:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 800b01c:	4b31      	ldr	r3, [pc, #196]	; (800b0e4 <SendTxData+0x28c>)
 800b01e:	685a      	ldr	r2, [r3, #4]
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	1c59      	adds	r1, r3, #1
 800b024:	6339      	str	r1, [r7, #48]	; 0x30
 800b026:	4413      	add	r3, r2
 800b028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b02a:	b2d2      	uxtb	r2, r2
 800b02c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	1418      	asrs	r0, r3, #16
 800b032:	4b2c      	ldr	r3, [pc, #176]	; (800b0e4 <SendTxData+0x28c>)
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	1c59      	adds	r1, r3, #1
 800b03a:	6339      	str	r1, [r7, #48]	; 0x30
 800b03c:	4413      	add	r3, r2
 800b03e:	b2c2      	uxtb	r2, r0
 800b040:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	1218      	asrs	r0, r3, #8
 800b046:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <SendTxData+0x28c>)
 800b048:	685a      	ldr	r2, [r3, #4]
 800b04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04c:	1c59      	adds	r1, r3, #1
 800b04e:	6339      	str	r1, [r7, #48]	; 0x30
 800b050:	4413      	add	r3, r2
 800b052:	b2c2      	uxtb	r2, r0
 800b054:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 800b056:	4b23      	ldr	r3, [pc, #140]	; (800b0e4 <SendTxData+0x28c>)
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	1c59      	adds	r1, r3, #1
 800b05e:	6339      	str	r1, [r7, #48]	; 0x30
 800b060:	4413      	add	r3, r2
 800b062:	6a3a      	ldr	r2, [r7, #32]
 800b064:	b2d2      	uxtb	r2, r2
 800b066:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 800b068:	8bfb      	ldrh	r3, [r7, #30]
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	b298      	uxth	r0, r3
 800b06e:	4b1d      	ldr	r3, [pc, #116]	; (800b0e4 <SendTxData+0x28c>)
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	1c59      	adds	r1, r3, #1
 800b076:	6339      	str	r1, [r7, #48]	; 0x30
 800b078:	4413      	add	r3, r2
 800b07a:	b2c2      	uxtb	r2, r0
 800b07c:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 800b07e:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <SendTxData+0x28c>)
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	1c59      	adds	r1, r3, #1
 800b086:	6339      	str	r1, [r7, #48]	; 0x30
 800b088:	4413      	add	r3, r2
 800b08a:	8bfa      	ldrh	r2, [r7, #30]
 800b08c:	b2d2      	uxtb	r2, r2
 800b08e:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	b2da      	uxtb	r2, r3
 800b094:	4b13      	ldr	r3, [pc, #76]	; (800b0e4 <SendTxData+0x28c>)
 800b096:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b098:	4b17      	ldr	r3, [pc, #92]	; (800b0f8 <SendTxData+0x2a0>)
 800b09a:	7a5b      	ldrb	r3, [r3, #9]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d007      	beq.n	800b0b0 <SendTxData+0x258>
 800b0a0:	f002 fa1e 	bl	800d4e0 <LmHandlerJoinStatus>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d102      	bne.n	800b0b0 <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800b0aa:	4813      	ldr	r0, [pc, #76]	; (800b0f8 <SendTxData+0x2a0>)
 800b0ac:	f010 fd9a 	bl	801bbe4 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800b0b0:	4b10      	ldr	r3, [pc, #64]	; (800b0f4 <SendTxData+0x29c>)
 800b0b2:	78db      	ldrb	r3, [r3, #3]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	480a      	ldr	r0, [pc, #40]	; (800b0e4 <SendTxData+0x28c>)
 800b0ba:	f002 fa2d 	bl	800d518 <LmHandlerSend>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 800b0c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d119      	bne.n	800b100 <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800b0cc:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <SendTxData+0x2a4>)
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	2100      	movs	r1, #0
 800b0d2:	2001      	movs	r0, #1
 800b0d4:	f010 ff90 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800b0d8:	e029      	b.n	800b12e <SendTxData+0x2d6>
 800b0da:	bf00      	nop
 800b0dc:	0801c8f4 	.word	0x0801c8f4
 800b0e0:	0801c900 	.word	0x0801c900
 800b0e4:	20000088 	.word	0x20000088
 800b0e8:	41200000 	.word	0x41200000
 800b0ec:	42c80000 	.word	0x42c80000
 800b0f0:	2000061a 	.word	0x2000061a
 800b0f4:	20000070 	.word	0x20000070
 800b0f8:	2000064c 	.word	0x2000064c
 800b0fc:	0801c90c 	.word	0x0801c90c
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800b100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b104:	f113 0f06 	cmn.w	r3, #6
 800b108:	d111      	bne.n	800b12e <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800b10a:	f002 f95d 	bl	800d3c8 <LmHandlerGetDutyCycleWaitTime>
 800b10e:	6378      	str	r0, [r7, #52]	; 0x34
    if (nextTxIn > 0)
 800b110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b112:	2b00      	cmp	r3, #0
 800b114:	d00b      	beq.n	800b12e <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800b116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b118:	4a11      	ldr	r2, [pc, #68]	; (800b160 <SendTxData+0x308>)
 800b11a:	fba2 2303 	umull	r2, r3, r2, r3
 800b11e:	099b      	lsrs	r3, r3, #6
 800b120:	9300      	str	r3, [sp, #0]
 800b122:	4b10      	ldr	r3, [pc, #64]	; (800b164 <SendTxData+0x30c>)
 800b124:	2201      	movs	r2, #1
 800b126:	2100      	movs	r1, #0
 800b128:	2001      	movs	r0, #1
 800b12a:	f010 ff65 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 800b12e:	4b0e      	ldr	r3, [pc, #56]	; (800b168 <SendTxData+0x310>)
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10f      	bne.n	800b156 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800b136:	480d      	ldr	r0, [pc, #52]	; (800b16c <SendTxData+0x314>)
 800b138:	f010 fd54 	bl	801bbe4 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800b13c:	4b0c      	ldr	r3, [pc, #48]	; (800b170 <SendTxData+0x318>)
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b142:	4293      	cmp	r3, r2
 800b144:	bf38      	it	cc
 800b146:	4613      	movcc	r3, r2
 800b148:	4619      	mov	r1, r3
 800b14a:	4808      	ldr	r0, [pc, #32]	; (800b16c <SendTxData+0x314>)
 800b14c:	f010 fdba 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800b150:	4806      	ldr	r0, [pc, #24]	; (800b16c <SendTxData+0x314>)
 800b152:	f010 fcd9 	bl	801bb08 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800b156:	bf00      	nop
 800b158:	373c      	adds	r7, #60	; 0x3c
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd90      	pop	{r4, r7, pc}
 800b15e:	bf00      	nop
 800b160:	10624dd3 	.word	0x10624dd3
 800b164:	0801c91c 	.word	0x0801c91c
 800b168:	200004f4 	.word	0x200004f4
 800b16c:	200004f8 	.word	0x200004f8
 800b170:	20000084 	.word	0x20000084

0800b174 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800b17c:	2100      	movs	r1, #0
 800b17e:	2002      	movs	r0, #2
 800b180:	f010 fc16 	bl	801b9b0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800b184:	4803      	ldr	r0, [pc, #12]	; (800b194 <OnTxTimerEvent+0x20>)
 800b186:	f010 fcbf 	bl	801bb08 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800b18a:	bf00      	nop
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	200004f8 	.word	0x200004f8

0800b198 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bc80      	pop	{r7}
 800b1a8:	4770      	bx	lr

0800b1aa <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800b1aa:	b480      	push	{r7}
 800b1ac:	b083      	sub	sp, #12
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800b1b2:	bf00      	nop
 800b1b4:	370c      	adds	r7, #12
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bc80      	pop	{r7}
 800b1ba:	4770      	bx	lr

0800b1bc <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800b1c4:	bf00      	nop
 800b1c6:	370c      	adds	r7, #12
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bc80      	pop	{r7}
 800b1cc:	4770      	bx	lr
	...

0800b1d0 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af04      	add	r7, sp, #16
 800b1d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d041      	beq.n	800b262 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d03d      	beq.n	800b262 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800b1e6:	4821      	ldr	r0, [pc, #132]	; (800b26c <OnTxData+0x9c>)
 800b1e8:	f010 fc8e 	bl	801bb08 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800b1ec:	4b20      	ldr	r3, [pc, #128]	; (800b270 <OnTxData+0xa0>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	2002      	movs	r0, #2
 800b1f4:	f010 ff00 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	7c12      	ldrb	r2, [r2, #16]
 800b200:	4611      	mov	r1, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800b208:	4610      	mov	r0, r2
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800b210:	9203      	str	r2, [sp, #12]
 800b212:	9002      	str	r0, [sp, #8]
 800b214:	9101      	str	r1, [sp, #4]
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	4b16      	ldr	r3, [pc, #88]	; (800b274 <OnTxData+0xa4>)
 800b21a:	2200      	movs	r2, #0
 800b21c:	2100      	movs	r1, #0
 800b21e:	2003      	movs	r0, #3
 800b220:	f010 feea 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800b224:	4b14      	ldr	r3, [pc, #80]	; (800b278 <OnTxData+0xa8>)
 800b226:	2200      	movs	r2, #0
 800b228:	2100      	movs	r1, #0
 800b22a:	2003      	movs	r0, #3
 800b22c:	f010 fee4 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	7a1b      	ldrb	r3, [r3, #8]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d10e      	bne.n	800b256 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	7a5b      	ldrb	r3, [r3, #9]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <OnTxData+0x74>
 800b240:	4b0e      	ldr	r3, [pc, #56]	; (800b27c <OnTxData+0xac>)
 800b242:	e000      	b.n	800b246 <OnTxData+0x76>
 800b244:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <OnTxData+0xb0>)
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	4b0e      	ldr	r3, [pc, #56]	; (800b284 <OnTxData+0xb4>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	2100      	movs	r1, #0
 800b24e:	2003      	movs	r0, #3
 800b250:	f010 fed2 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800b254:	e005      	b.n	800b262 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800b256:	4b0c      	ldr	r3, [pc, #48]	; (800b288 <OnTxData+0xb8>)
 800b258:	2200      	movs	r2, #0
 800b25a:	2100      	movs	r1, #0
 800b25c:	2003      	movs	r0, #3
 800b25e:	f010 fecb 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b262:	bf00      	nop
 800b264:	3708      	adds	r7, #8
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	2000061c 	.word	0x2000061c
 800b270:	0801c93c 	.word	0x0801c93c
 800b274:	0801c970 	.word	0x0801c970
 800b278:	0801c9a4 	.word	0x0801c9a4
 800b27c:	0801c9b4 	.word	0x0801c9b4
 800b280:	0801c9b8 	.word	0x0801c9b8
 800b284:	0801c9c0 	.word	0x0801c9c0
 800b288:	0801c9d4 	.word	0x0801c9d4

0800b28c <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d039      	beq.n	800b30e <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d11e      	bne.n	800b2e2 <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	2004      	movs	r0, #4
 800b2a8:	f010 fb82 	bl	801b9b0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800b2ac:	481a      	ldr	r0, [pc, #104]	; (800b318 <OnJoinRequest+0x8c>)
 800b2ae:	f010 fc99 	bl	801bbe4 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800b2b2:	4b1a      	ldr	r3, [pc, #104]	; (800b31c <OnJoinRequest+0x90>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	2002      	movs	r0, #2
 800b2ba:	f010 fe9d 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	799b      	ldrb	r3, [r3, #6]
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d106      	bne.n	800b2d4 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800b2c6:	4b16      	ldr	r3, [pc, #88]	; (800b320 <OnJoinRequest+0x94>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	2002      	movs	r0, #2
 800b2ce:	f010 fe93 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800b2d2:	e01c      	b.n	800b30e <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800b2d4:	4b13      	ldr	r3, [pc, #76]	; (800b324 <OnJoinRequest+0x98>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2100      	movs	r1, #0
 800b2da:	2002      	movs	r0, #2
 800b2dc:	f010 fe8c 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b2e0:	e015      	b.n	800b30e <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800b2e2:	4b11      	ldr	r3, [pc, #68]	; (800b328 <OnJoinRequest+0x9c>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2100      	movs	r1, #0
 800b2e8:	2002      	movs	r0, #2
 800b2ea:	f010 fe85 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	799b      	ldrb	r3, [r3, #6]
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d10b      	bne.n	800b30e <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	; (800b32c <OnJoinRequest+0xa0>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	2002      	movs	r0, #2
 800b2fe:	f010 fe7b 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800b302:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <OnJoinRequest+0xa4>)
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	2101      	movs	r1, #1
 800b308:	4618      	mov	r0, r3
 800b30a:	f002 f867 	bl	800d3dc <LmHandlerJoin>
}
 800b30e:	bf00      	nop
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	2000064c 	.word	0x2000064c
 800b31c:	0801c9e4 	.word	0x0801c9e4
 800b320:	0801c9fc 	.word	0x0801c9fc
 800b324:	0801ca1c 	.word	0x0801ca1c
 800b328:	0801ca3c 	.word	0x0801ca3c
 800b32c:	0801ca58 	.word	0x0801ca58
 800b330:	20000020 	.word	0x20000020

0800b334 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800b334:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b336:	b093      	sub	sp, #76	; 0x4c
 800b338:	af0c      	add	r7, sp, #48	; 0x30
 800b33a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d056      	beq.n	800b3f0 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	2b02      	cmp	r3, #2
 800b348:	d008      	beq.n	800b35c <OnBeaconStatusChange+0x28>
 800b34a:	2b03      	cmp	r3, #3
 800b34c:	d049      	beq.n	800b3e2 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800b34e:	4b2b      	ldr	r3, [pc, #172]	; (800b3fc <OnBeaconStatusChange+0xc8>)
 800b350:	2200      	movs	r2, #0
 800b352:	2100      	movs	r1, #0
 800b354:	2002      	movs	r0, #2
 800b356:	f010 fe4f 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b35a:	e04a      	b.n	800b3f2 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	7c1b      	ldrb	r3, [r3, #16]
 800b360:	4618      	mov	r0, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800b368:	461c      	mov	r4, r3
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800b370:	461d      	mov	r5, r3
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	697a      	ldr	r2, [r7, #20]
 800b378:	6852      	ldr	r2, [r2, #4]
 800b37a:	6979      	ldr	r1, [r7, #20]
 800b37c:	7d89      	ldrb	r1, [r1, #22]
 800b37e:	460e      	mov	r6, r1
 800b380:	6979      	ldr	r1, [r7, #20]
 800b382:	7dc9      	ldrb	r1, [r1, #23]
 800b384:	6139      	str	r1, [r7, #16]
 800b386:	6979      	ldr	r1, [r7, #20]
 800b388:	7e09      	ldrb	r1, [r1, #24]
 800b38a:	60f9      	str	r1, [r7, #12]
 800b38c:	6979      	ldr	r1, [r7, #20]
 800b38e:	7e49      	ldrb	r1, [r1, #25]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	6979      	ldr	r1, [r7, #20]
 800b394:	7e89      	ldrb	r1, [r1, #26]
 800b396:	6079      	str	r1, [r7, #4]
 800b398:	6979      	ldr	r1, [r7, #20]
 800b39a:	7ec9      	ldrb	r1, [r1, #27]
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	6979      	ldr	r1, [r7, #20]
 800b3a0:	7f09      	ldrb	r1, [r1, #28]
 800b3a2:	910b      	str	r1, [sp, #44]	; 0x2c
 800b3a4:	f8d7 c000 	ldr.w	ip, [r7]
 800b3a8:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800b3ac:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800b3b0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800b3b4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800b3b8:	f8cd c020 	str.w	ip, [sp, #32]
 800b3bc:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800b3c0:	f8cd c01c 	str.w	ip, [sp, #28]
 800b3c4:	6939      	ldr	r1, [r7, #16]
 800b3c6:	9106      	str	r1, [sp, #24]
 800b3c8:	9605      	str	r6, [sp, #20]
 800b3ca:	9204      	str	r2, [sp, #16]
 800b3cc:	9303      	str	r3, [sp, #12]
 800b3ce:	9502      	str	r5, [sp, #8]
 800b3d0:	9401      	str	r4, [sp, #4]
 800b3d2:	9000      	str	r0, [sp, #0]
 800b3d4:	4b0a      	ldr	r3, [pc, #40]	; (800b400 <OnBeaconStatusChange+0xcc>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2100      	movs	r1, #0
 800b3da:	2002      	movs	r0, #2
 800b3dc:	f010 fe0c 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800b3e0:	e007      	b.n	800b3f2 <OnBeaconStatusChange+0xbe>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800b3e2:	4b08      	ldr	r3, [pc, #32]	; (800b404 <OnBeaconStatusChange+0xd0>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	2002      	movs	r0, #2
 800b3ea:	f010 fe05 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800b3ee:	e000      	b.n	800b3f2 <OnBeaconStatusChange+0xbe>
      }
    }
  }
 800b3f0:	bf00      	nop
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800b3f2:	bf00      	nop
 800b3f4:	371c      	adds	r7, #28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	0801ca7c 	.word	0x0801ca7c
 800b400:	0801ca94 	.word	0x0801ca94
 800b404:	0801cb08 	.word	0x0801cb08

0800b408 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af02      	add	r7, sp, #8
 800b40e:	4603      	mov	r3, r0
 800b410:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800b412:	79fb      	ldrb	r3, [r7, #7]
 800b414:	4a06      	ldr	r2, [pc, #24]	; (800b430 <OnClassChange+0x28>)
 800b416:	5cd3      	ldrb	r3, [r2, r3]
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	4b06      	ldr	r3, [pc, #24]	; (800b434 <OnClassChange+0x2c>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	2100      	movs	r1, #0
 800b420:	2002      	movs	r0, #2
 800b422:	f010 fde9 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	0801cb44 	.word	0x0801cb44
 800b434:	0801cb28 	.word	0x0801cb28

0800b438 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800b43c:	2100      	movs	r1, #0
 800b43e:	2001      	movs	r0, #1
 800b440:	f010 fab6 	bl	801b9b0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800b444:	bf00      	nop
 800b446:	bd80      	pop	{r7, pc}

0800b448 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800b450:	4a0d      	ldr	r2, [pc, #52]	; (800b488 <OnTxPeriodicityChanged+0x40>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800b456:	4b0c      	ldr	r3, [pc, #48]	; (800b488 <OnTxPeriodicityChanged+0x40>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d103      	bne.n	800b466 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800b45e:	4b0a      	ldr	r3, [pc, #40]	; (800b488 <OnTxPeriodicityChanged+0x40>)
 800b460:	f242 7210 	movw	r2, #10000	; 0x2710
 800b464:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800b466:	4809      	ldr	r0, [pc, #36]	; (800b48c <OnTxPeriodicityChanged+0x44>)
 800b468:	f010 fbbc 	bl	801bbe4 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <OnTxPeriodicityChanged+0x40>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4619      	mov	r1, r3
 800b472:	4806      	ldr	r0, [pc, #24]	; (800b48c <OnTxPeriodicityChanged+0x44>)
 800b474:	f010 fc26 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800b478:	4804      	ldr	r0, [pc, #16]	; (800b48c <OnTxPeriodicityChanged+0x44>)
 800b47a:	f010 fb45 	bl	801bb08 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800b47e:	bf00      	nop
 800b480:	3708      	adds	r7, #8
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	20000084 	.word	0x20000084
 800b48c:	200004f8 	.word	0x200004f8

0800b490 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800b49a:	4a04      	ldr	r2, [pc, #16]	; (800b4ac <OnTxFrameCtrlChanged+0x1c>)
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800b4a0:	bf00      	nop
 800b4a2:	370c      	adds	r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc80      	pop	{r7}
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	20000070 	.word	0x20000070

0800b4b0 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b083      	sub	sp, #12
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800b4ba:	4a04      	ldr	r2, [pc, #16]	; (800b4cc <OnPingSlotPeriodicityChanged+0x1c>)
 800b4bc:	79fb      	ldrb	r3, [r7, #7]
 800b4be:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bc80      	pop	{r7}
 800b4c8:	4770      	bx	lr
 800b4ca:	bf00      	nop
 800b4cc:	20000070 	.word	0x20000070

0800b4d0 <OnSystemReset>:

static void OnSystemReset(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800b4d4:	f002 fcf7 	bl	800dec6 <LmHandlerHalt>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d106      	bne.n	800b4ec <OnSystemReset+0x1c>
 800b4de:	f001 ffff 	bl	800d4e0 <LmHandlerJoinStatus>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d101      	bne.n	800b4ec <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800b4e8:	f7ff faf4 	bl	800aad4 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800b4ec:	bf00      	nop
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <StopJoin>:

static void StopJoin(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800b4f4:	4817      	ldr	r0, [pc, #92]	; (800b554 <StopJoin+0x64>)
 800b4f6:	f010 fb75 	bl	801bbe4 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800b4fa:	f002 fcd7 	bl	800deac <LmHandlerStop>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d006      	beq.n	800b512 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800b504:	4b14      	ldr	r3, [pc, #80]	; (800b558 <StopJoin+0x68>)
 800b506:	2200      	movs	r2, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	2002      	movs	r0, #2
 800b50c:	f010 fd74 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800b510:	e01a      	b.n	800b548 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800b512:	4b12      	ldr	r3, [pc, #72]	; (800b55c <StopJoin+0x6c>)
 800b514:	2200      	movs	r2, #0
 800b516:	2100      	movs	r1, #0
 800b518:	2002      	movs	r0, #2
 800b51a:	f010 fd6d 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800b51e:	4b10      	ldr	r3, [pc, #64]	; (800b560 <StopJoin+0x70>)
 800b520:	2201      	movs	r2, #1
 800b522:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800b524:	4b0f      	ldr	r3, [pc, #60]	; (800b564 <StopJoin+0x74>)
 800b526:	2200      	movs	r2, #0
 800b528:	2100      	movs	r1, #0
 800b52a:	2002      	movs	r0, #2
 800b52c:	f010 fd64 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800b530:	480d      	ldr	r0, [pc, #52]	; (800b568 <StopJoin+0x78>)
 800b532:	f001 fdd9 	bl	800d0e8 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800b536:	4b0a      	ldr	r3, [pc, #40]	; (800b560 <StopJoin+0x70>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2101      	movs	r1, #1
 800b53c:	4618      	mov	r0, r3
 800b53e:	f001 ff4d 	bl	800d3dc <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800b542:	4804      	ldr	r0, [pc, #16]	; (800b554 <StopJoin+0x64>)
 800b544:	f010 fae0 	bl	801bb08 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800b548:	4808      	ldr	r0, [pc, #32]	; (800b56c <StopJoin+0x7c>)
 800b54a:	f010 fadd 	bl	801bb08 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800b54e:	bf00      	nop
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	200004f8 	.word	0x200004f8
 800b558:	0801cb48 	.word	0x0801cb48
 800b55c:	0801cb68 	.word	0x0801cb68
 800b560:	20000020 	.word	0x20000020
 800b564:	0801cb7c 	.word	0x0801cb7c
 800b568:	20000070 	.word	0x20000070
 800b56c:	20000510 	.word	0x20000510

0800b570 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800b578:	4b05      	ldr	r3, [pc, #20]	; (800b590 <OnStopJoinTimerEvent+0x20>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	2b02      	cmp	r3, #2
 800b57e:	d103      	bne.n	800b588 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800b580:	2100      	movs	r1, #0
 800b582:	2008      	movs	r0, #8
 800b584:	f010 fa14 	bl	801b9b0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800b588:	bf00      	nop
 800b58a:	3708      	adds	r7, #8
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000020 	.word	0x20000020

0800b594 <StoreContext>:

static void StoreContext(void)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800b59a:	23ff      	movs	r3, #255	; 0xff
 800b59c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800b59e:	f002 fc9f 	bl	800dee0 <LmHandlerNvmDataStore>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800b5a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5aa:	f113 0f08 	cmn.w	r3, #8
 800b5ae:	d106      	bne.n	800b5be <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	; (800b5dc <StoreContext+0x48>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	2002      	movs	r0, #2
 800b5b8:	f010 fd1e 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800b5bc:	e00a      	b.n	800b5d4 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800b5be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c6:	d105      	bne.n	800b5d4 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800b5c8:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <StoreContext+0x4c>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	2002      	movs	r0, #2
 800b5d0:	f010 fd12 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	0801cb9c 	.word	0x0801cb9c
 800b5e0:	0801cbb4 	.word	0x0801cbb4

0800b5e4 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d106      	bne.n	800b602 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800b5f4:	4b08      	ldr	r3, [pc, #32]	; (800b618 <OnNvmDataChange+0x34>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2002      	movs	r0, #2
 800b5fc:	f010 fcfc 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800b600:	e005      	b.n	800b60e <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800b602:	4b06      	ldr	r3, [pc, #24]	; (800b61c <OnNvmDataChange+0x38>)
 800b604:	2200      	movs	r2, #0
 800b606:	2100      	movs	r1, #0
 800b608:	2002      	movs	r0, #2
 800b60a:	f010 fcf5 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	0801cbcc 	.word	0x0801cbcc
 800b61c:	0801cbe0 	.word	0x0801cbe0

0800b620 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800b62a:	f7f9 fb5f 	bl	8004cec <HAL_FLASH_Unlock>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d11c      	bne.n	800b66e <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800b634:	4b10      	ldr	r3, [pc, #64]	; (800b678 <OnStoreContextRequest+0x58>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	029a      	lsls	r2, r3, #10
 800b63a:	4b10      	ldr	r3, [pc, #64]	; (800b67c <OnStoreContextRequest+0x5c>)
 800b63c:	4013      	ands	r3, r2
 800b63e:	f44f 327c 	mov.w	r2, #258048	; 0x3f000
 800b642:	fbb2 f1f3 	udiv	r1, r2, r3
 800b646:	fb01 f303 	mul.w	r3, r1, r3
 800b64a:	1ad3      	subs	r3, r2, r3
 800b64c:	0adb      	lsrs	r3, r3, #11
 800b64e:	2200      	movs	r2, #0
 800b650:	2101      	movs	r1, #1
 800b652:	4618      	mov	r0, r3
 800b654:	f7f5 fe89 	bl	800136a <FLASH_IF_EraseByPages>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d105      	bne.n	800b66a <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800b65e:	2300      	movs	r3, #0
 800b660:	683a      	ldr	r2, [r7, #0]
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	4806      	ldr	r0, [pc, #24]	; (800b680 <OnStoreContextRequest+0x60>)
 800b666:	f7f5 fd9f 	bl	80011a8 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800b66a:	f7f9 fb61 	bl	8004d30 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	1fff75e0 	.word	0x1fff75e0
 800b67c:	03fffc00 	.word	0x03fffc00
 800b680:	0803f000 	.word	0x0803f000

0800b684 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	b29b      	uxth	r3, r3
 800b692:	461a      	mov	r2, r3
 800b694:	4903      	ldr	r1, [pc, #12]	; (800b6a4 <OnRestoreContextRequest+0x20>)
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f00f fd66 	bl	801b168 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800b69c:	bf00      	nop
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	0803f000 	.word	0x0803f000

0800b6a8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800b6ac:	4b15      	ldr	r3, [pc, #84]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800b6b2:	4b14      	ldr	r3, [pc, #80]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800b6b8:	4b12      	ldr	r3, [pc, #72]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800b6be:	4b11      	ldr	r3, [pc, #68]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800b6c4:	4b0f      	ldr	r3, [pc, #60]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	f043 0320 	orr.w	r3, r3, #32
 800b6cc:	4a0d      	ldr	r2, [pc, #52]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6ce:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800b6d0:	4b0c      	ldr	r3, [pc, #48]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10c      	bne.n	800b6f2 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800b6d8:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <LoraInfo_Init+0x60>)
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	2000      	movs	r0, #0
 800b6e0:	f010 fc8a 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800b6e4:	bf00      	nop
 800b6e6:	f010 fc75 	bl	801bfd4 <UTIL_ADV_TRACE_IsBufferEmpty>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d1fa      	bne.n	800b6e6 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800b6f0:	e7fe      	b.n	800b6f0 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800b6f2:	4b04      	ldr	r3, [pc, #16]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800b6f8:	4b02      	ldr	r3, [pc, #8]	; (800b704 <LoraInfo_Init+0x5c>)
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800b6fe:	bf00      	nop
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20000664 	.word	0x20000664
 800b708:	0801cbf4 	.word	0x0801cbf4

0800b70c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800b710:	4b02      	ldr	r3, [pc, #8]	; (800b71c <LoraInfo_GetPtr+0x10>)
}
 800b712:	4618      	mov	r0, r3
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	20000664 	.word	0x20000664

0800b720 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800b724:	f7f7 fb73 	bl	8002e0e <BSP_RADIO_Init>
 800b728:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b082      	sub	sp, #8
 800b732:	af00      	add	r7, sp, #0
 800b734:	4603      	mov	r3, r0
 800b736:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7f7 fb98 	bl	8002e70 <BSP_RADIO_ConfigRFSwitch>
 800b740:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b742:	4618      	mov	r0, r3
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800b74e:	f7f7 fbdd 	bl	8002f0c <BSP_RADIO_GetTxConfig>
 800b752:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800b754:	4618      	mov	r0, r3
 800b756:	bd80      	pop	{r7, pc}

0800b758 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800b75c:	f7f7 fbdd 	bl	8002f1a <BSP_RADIO_IsTCXO>
 800b760:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b762:	4618      	mov	r0, r3
 800b764:	bd80      	pop	{r7, pc}

0800b766 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800b76a:	f7f7 fbdd 	bl	8002f28 <BSP_RADIO_IsDCDC>
 800b76e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800b770:	4618      	mov	r0, r3
 800b772:	bd80      	pop	{r7, pc}

0800b774 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	4603      	mov	r3, r0
 800b77c:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	4618      	mov	r0, r3
 800b782:	f7f7 fbd8 	bl	8002f36 <BSP_RADIO_GetRFOMaxPowerConfig>
 800b786:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	33f1      	adds	r3, #241	; 0xf1
 800b79c:	2210      	movs	r2, #16
 800b79e:	2100      	movs	r1, #0
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f00c fa4d 	bl	8017c40 <memset1>
    ctx->M_n = 0;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	22f0      	movs	r2, #240	; 0xf0
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f00c fa43 	bl	8017c40 <memset1>
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b082      	sub	sp, #8
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	2110      	movs	r1, #16
 800b7d2:	6838      	ldr	r0, [r7, #0]
 800b7d4:	f000 fe5c 	bl	800c490 <lorawan_aes_set_key>
}
 800b7d8:	bf00      	nop
 800b7da:	3708      	adds	r7, #8
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b08c      	sub	sp, #48	; 0x30
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f000 80a1 	beq.w	800b93a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b7fe:	f1c3 0310 	rsb	r3, r3, #16
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	4293      	cmp	r3, r2
 800b806:	bf28      	it	cs
 800b808:	4613      	movcs	r3, r2
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f203 1201 	addw	r2, r3, #257	; 0x101
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b818:	4413      	add	r3, r2
 800b81a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b81c:	b292      	uxth	r2, r2
 800b81e:	68b9      	ldr	r1, [r7, #8]
 800b820:	4618      	mov	r0, r3
 800b822:	f00c f9d2 	bl	8017bca <memcpy1>
        ctx->M_n += mlen;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	441a      	add	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b83c:	2b0f      	cmp	r3, #15
 800b83e:	f240 808d 	bls.w	800b95c <AES_CMAC_Update+0x17c>
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	429a      	cmp	r2, r3
 800b848:	f000 8088 	beq.w	800b95c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800b84c:	2300      	movs	r3, #0
 800b84e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b850:	e015      	b.n	800b87e <AES_CMAC_Update+0x9e>
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	4413      	add	r3, r2
 800b858:	33f1      	adds	r3, #241	; 0xf1
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	68f9      	ldr	r1, [r7, #12]
 800b85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b860:	440b      	add	r3, r1
 800b862:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	4053      	eors	r3, r2
 800b86a:	b2d9      	uxtb	r1, r3
 800b86c:	68fa      	ldr	r2, [r7, #12]
 800b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b870:	4413      	add	r3, r2
 800b872:	33f1      	adds	r3, #241	; 0xf1
 800b874:	460a      	mov	r2, r1
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b87a:	3301      	adds	r3, #1
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	2b0f      	cmp	r3, #15
 800b882:	dde6      	ble.n	800b852 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b88a:	f107 0314 	add.w	r3, r7, #20
 800b88e:	2210      	movs	r2, #16
 800b890:	4618      	mov	r0, r3
 800b892:	f00c f99a 	bl	8017bca <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	f107 0114 	add.w	r1, r7, #20
 800b89c:	f107 0314 	add.w	r3, r7, #20
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 fed3 	bl	800c64c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	33f1      	adds	r3, #241	; 0xf1
 800b8aa:	f107 0114 	add.w	r1, r7, #20
 800b8ae:	2210      	movs	r2, #16
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f00c f98a 	bl	8017bca <memcpy1>

        data += mlen;
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	4413      	add	r3, r2
 800b8bc:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800b8c6:	e038      	b.n	800b93a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8cc:	e013      	b.n	800b8f6 <AES_CMAC_Update+0x116>
 800b8ce:	68fa      	ldr	r2, [r7, #12]
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	4413      	add	r3, r2
 800b8d4:	33f1      	adds	r3, #241	; 0xf1
 800b8d6:	781a      	ldrb	r2, [r3, #0]
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	440b      	add	r3, r1
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	4053      	eors	r3, r2
 800b8e2:	b2d9      	uxtb	r1, r3
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	4413      	add	r3, r2
 800b8ea:	33f1      	adds	r3, #241	; 0xf1
 800b8ec:	460a      	mov	r2, r1
 800b8ee:	701a      	strb	r2, [r3, #0]
 800b8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	2b0f      	cmp	r3, #15
 800b8fa:	dde8      	ble.n	800b8ce <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800b902:	f107 0314 	add.w	r3, r7, #20
 800b906:	2210      	movs	r2, #16
 800b908:	4618      	mov	r0, r3
 800b90a:	f00c f95e 	bl	8017bca <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	f107 0114 	add.w	r1, r7, #20
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 fe97 	bl	800c64c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	33f1      	adds	r3, #241	; 0xf1
 800b922:	f107 0114 	add.w	r1, r7, #20
 800b926:	2210      	movs	r2, #16
 800b928:	4618      	mov	r0, r3
 800b92a:	f00c f94e 	bl	8017bca <memcpy1>

        data += 16;
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	3310      	adds	r3, #16
 800b932:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	3b10      	subs	r3, #16
 800b938:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b10      	cmp	r3, #16
 800b93e:	d8c3      	bhi.n	800b8c8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f203 1301 	addw	r3, r3, #257	; 0x101
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	b292      	uxth	r2, r2
 800b94a:	68b9      	ldr	r1, [r7, #8]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f00c f93c 	bl	8017bca <memcpy1>
    ctx->M_n = len;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800b95a:	e000      	b.n	800b95e <AES_CMAC_Update+0x17e>
            return;
 800b95c:	bf00      	nop
}
 800b95e:	3730      	adds	r7, #48	; 0x30
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b092      	sub	sp, #72	; 0x48
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800b96e:	f107 031c 	add.w	r3, r7, #28
 800b972:	2210      	movs	r2, #16
 800b974:	2100      	movs	r1, #0
 800b976:	4618      	mov	r0, r3
 800b978:	f00c f962 	bl	8017c40 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	f107 011c 	add.w	r1, r7, #28
 800b982:	f107 031c 	add.w	r3, r7, #28
 800b986:	4618      	mov	r0, r3
 800b988:	f000 fe60 	bl	800c64c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800b98c:	7f3b      	ldrb	r3, [r7, #28]
 800b98e:	b25b      	sxtb	r3, r3
 800b990:	2b00      	cmp	r3, #0
 800b992:	da30      	bge.n	800b9f6 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800b994:	2300      	movs	r3, #0
 800b996:	647b      	str	r3, [r7, #68]	; 0x44
 800b998:	e01b      	b.n	800b9d2 <AES_CMAC_Final+0x6e>
 800b99a:	f107 021c 	add.w	r2, r7, #28
 800b99e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9a0:	4413      	add	r3, r2
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	005b      	lsls	r3, r3, #1
 800b9a6:	b25a      	sxtb	r2, r3
 800b9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	3348      	adds	r3, #72	; 0x48
 800b9ae:	443b      	add	r3, r7
 800b9b0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800b9b4:	09db      	lsrs	r3, r3, #7
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	b25b      	sxtb	r3, r3
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	b25b      	sxtb	r3, r3
 800b9be:	b2d9      	uxtb	r1, r3
 800b9c0:	f107 021c 	add.w	r2, r7, #28
 800b9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9c6:	4413      	add	r3, r2
 800b9c8:	460a      	mov	r2, r1
 800b9ca:	701a      	strb	r2, [r3, #0]
 800b9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9d4:	2b0e      	cmp	r3, #14
 800b9d6:	dde0      	ble.n	800b99a <AES_CMAC_Final+0x36>
 800b9d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800b9e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b9e8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800b9ec:	43db      	mvns	r3, r3
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b9f4:	e027      	b.n	800ba46 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	643b      	str	r3, [r7, #64]	; 0x40
 800b9fa:	e01b      	b.n	800ba34 <AES_CMAC_Final+0xd0>
 800b9fc:	f107 021c 	add.w	r2, r7, #28
 800ba00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	b25a      	sxtb	r2, r3
 800ba0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	3348      	adds	r3, #72	; 0x48
 800ba10:	443b      	add	r3, r7
 800ba12:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800ba16:	09db      	lsrs	r3, r3, #7
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	b25b      	sxtb	r3, r3
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	b25b      	sxtb	r3, r3
 800ba20:	b2d9      	uxtb	r1, r3
 800ba22:	f107 021c 	add.w	r2, r7, #28
 800ba26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba28:	4413      	add	r3, r2
 800ba2a:	460a      	mov	r2, r1
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba30:	3301      	adds	r3, #1
 800ba32:	643b      	str	r3, [r7, #64]	; 0x40
 800ba34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba36:	2b0e      	cmp	r3, #14
 800ba38:	dde0      	ble.n	800b9fc <AES_CMAC_Final+0x98>
 800ba3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba3e:	005b      	lsls	r3, r3, #1
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ba4c:	2b10      	cmp	r3, #16
 800ba4e:	d11d      	bne.n	800ba8c <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800ba50:	2300      	movs	r3, #0
 800ba52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba54:	e016      	b.n	800ba84 <AES_CMAC_Final+0x120>
 800ba56:	683a      	ldr	r2, [r7, #0]
 800ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ba60:	781a      	ldrb	r2, [r3, #0]
 800ba62:	f107 011c 	add.w	r1, r7, #28
 800ba66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba68:	440b      	add	r3, r1
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	4053      	eors	r3, r2
 800ba6e:	b2d9      	uxtb	r1, r3
 800ba70:	683a      	ldr	r2, [r7, #0]
 800ba72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba74:	4413      	add	r3, r2
 800ba76:	f203 1301 	addw	r3, r3, #257	; 0x101
 800ba7a:	460a      	mov	r2, r1
 800ba7c:	701a      	strb	r2, [r3, #0]
 800ba7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba80:	3301      	adds	r3, #1
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba86:	2b0f      	cmp	r3, #15
 800ba88:	dde5      	ble.n	800ba56 <AES_CMAC_Final+0xf2>
 800ba8a:	e096      	b.n	800bbba <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800ba8c:	7f3b      	ldrb	r3, [r7, #28]
 800ba8e:	b25b      	sxtb	r3, r3
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	da30      	bge.n	800baf6 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800ba94:	2300      	movs	r3, #0
 800ba96:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba98:	e01b      	b.n	800bad2 <AES_CMAC_Final+0x16e>
 800ba9a:	f107 021c 	add.w	r2, r7, #28
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa0:	4413      	add	r3, r2
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	b25a      	sxtb	r2, r3
 800baa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baaa:	3301      	adds	r3, #1
 800baac:	3348      	adds	r3, #72	; 0x48
 800baae:	443b      	add	r3, r7
 800bab0:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bab4:	09db      	lsrs	r3, r3, #7
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	b25b      	sxtb	r3, r3
 800baba:	4313      	orrs	r3, r2
 800babc:	b25b      	sxtb	r3, r3
 800babe:	b2d9      	uxtb	r1, r3
 800bac0:	f107 021c 	add.w	r2, r7, #28
 800bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac6:	4413      	add	r3, r2
 800bac8:	460a      	mov	r2, r1
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bace:	3301      	adds	r3, #1
 800bad0:	63bb      	str	r3, [r7, #56]	; 0x38
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	2b0e      	cmp	r3, #14
 800bad6:	dde0      	ble.n	800ba9a <AES_CMAC_Final+0x136>
 800bad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800bae4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bae8:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800baec:	43db      	mvns	r3, r3
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf4:	e027      	b.n	800bb46 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800baf6:	2300      	movs	r3, #0
 800baf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bafa:	e01b      	b.n	800bb34 <AES_CMAC_Final+0x1d0>
 800bafc:	f107 021c 	add.w	r2, r7, #28
 800bb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb02:	4413      	add	r3, r2
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	005b      	lsls	r3, r3, #1
 800bb08:	b25a      	sxtb	r2, r3
 800bb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	3348      	adds	r3, #72	; 0x48
 800bb10:	443b      	add	r3, r7
 800bb12:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800bb16:	09db      	lsrs	r3, r3, #7
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	b25b      	sxtb	r3, r3
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	b25b      	sxtb	r3, r3
 800bb20:	b2d9      	uxtb	r1, r3
 800bb22:	f107 021c 	add.w	r2, r7, #28
 800bb26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb28:	4413      	add	r3, r2
 800bb2a:	460a      	mov	r2, r1
 800bb2c:	701a      	strb	r2, [r3, #0]
 800bb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb30:	3301      	adds	r3, #1
 800bb32:	637b      	str	r3, [r7, #52]	; 0x34
 800bb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb36:	2b0e      	cmp	r3, #14
 800bb38:	dde0      	ble.n	800bafc <AES_CMAC_Final+0x198>
 800bb3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb4c:	683a      	ldr	r2, [r7, #0]
 800bb4e:	4413      	add	r3, r2
 800bb50:	2280      	movs	r2, #128	; 0x80
 800bb52:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800bb56:	e007      	b.n	800bb68 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	4413      	add	r3, r2
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bb7c:	2b0f      	cmp	r3, #15
 800bb7e:	d9eb      	bls.n	800bb58 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800bb80:	2300      	movs	r3, #0
 800bb82:	633b      	str	r3, [r7, #48]	; 0x30
 800bb84:	e016      	b.n	800bbb4 <AES_CMAC_Final+0x250>
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bb90:	781a      	ldrb	r2, [r3, #0]
 800bb92:	f107 011c 	add.w	r1, r7, #28
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	440b      	add	r3, r1
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	4053      	eors	r3, r2
 800bb9e:	b2d9      	uxtb	r1, r3
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	4413      	add	r3, r2
 800bba6:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bbaa:	460a      	mov	r2, r1
 800bbac:	701a      	strb	r2, [r3, #0]
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	2b0f      	cmp	r3, #15
 800bbb8:	dde5      	ble.n	800bb86 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800bbba:	2300      	movs	r3, #0
 800bbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbbe:	e015      	b.n	800bbec <AES_CMAC_Final+0x288>
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc4:	4413      	add	r3, r2
 800bbc6:	33f1      	adds	r3, #241	; 0xf1
 800bbc8:	781a      	ldrb	r2, [r3, #0]
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbce:	440b      	add	r3, r1
 800bbd0:	f203 1301 	addw	r3, r3, #257	; 0x101
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	4053      	eors	r3, r2
 800bbd8:	b2d9      	uxtb	r1, r3
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbde:	4413      	add	r3, r2
 800bbe0:	33f1      	adds	r3, #241	; 0xf1
 800bbe2:	460a      	mov	r2, r1
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	3301      	adds	r3, #1
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	2b0f      	cmp	r3, #15
 800bbf0:	dde6      	ble.n	800bbc0 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800bbf8:	f107 030c 	add.w	r3, r7, #12
 800bbfc:	2210      	movs	r2, #16
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f00b ffe3 	bl	8017bca <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	f107 030c 	add.w	r3, r7, #12
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f000 fd1d 	bl	800c64c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800bc12:	f107 031c 	add.w	r3, r7, #28
 800bc16:	2210      	movs	r2, #16
 800bc18:	2100      	movs	r1, #0
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f00c f810 	bl	8017c40 <memset1>
}
 800bc20:	bf00      	nop
 800bc22:	3748      	adds	r7, #72	; 0x48
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b083      	sub	sp, #12
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781a      	ldrb	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	7852      	ldrb	r2, [r2, #1]
 800bc42:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	3302      	adds	r3, #2
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	7892      	ldrb	r2, [r2, #2]
 800bc4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	3303      	adds	r3, #3
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	78d2      	ldrb	r2, [r2, #3]
 800bc56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	683a      	ldr	r2, [r7, #0]
 800bc5e:	7912      	ldrb	r2, [r2, #4]
 800bc60:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3305      	adds	r3, #5
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	7952      	ldrb	r2, [r2, #5]
 800bc6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	3306      	adds	r3, #6
 800bc70:	683a      	ldr	r2, [r7, #0]
 800bc72:	7992      	ldrb	r2, [r2, #6]
 800bc74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	3307      	adds	r3, #7
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	79d2      	ldrb	r2, [r2, #7]
 800bc7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3308      	adds	r3, #8
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	7a12      	ldrb	r2, [r2, #8]
 800bc88:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	3309      	adds	r3, #9
 800bc8e:	683a      	ldr	r2, [r7, #0]
 800bc90:	7a52      	ldrb	r2, [r2, #9]
 800bc92:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	330a      	adds	r3, #10
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	7a92      	ldrb	r2, [r2, #10]
 800bc9c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	330b      	adds	r3, #11
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	7ad2      	ldrb	r2, [r2, #11]
 800bca6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	330c      	adds	r3, #12
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	7b12      	ldrb	r2, [r2, #12]
 800bcb0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	330d      	adds	r3, #13
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	7b52      	ldrb	r2, [r2, #13]
 800bcba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	330e      	adds	r3, #14
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	7b92      	ldrb	r2, [r2, #14]
 800bcc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	330f      	adds	r3, #15
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	7bd2      	ldrb	r2, [r2, #15]
 800bcce:	701a      	strb	r2, [r3, #0]
#endif
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bc80      	pop	{r7}
 800bcd8:	4770      	bx	lr

0800bcda <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b085      	sub	sp, #20
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	60f8      	str	r0, [r7, #12]
 800bce2:	60b9      	str	r1, [r7, #8]
 800bce4:	4613      	mov	r3, r2
 800bce6:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800bce8:	e007      	b.n	800bcfa <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bcea:	68ba      	ldr	r2, [r7, #8]
 800bcec:	1c53      	adds	r3, r2, #1
 800bcee:	60bb      	str	r3, [r7, #8]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	1c59      	adds	r1, r3, #1
 800bcf4:	60f9      	str	r1, [r7, #12]
 800bcf6:	7812      	ldrb	r2, [r2, #0]
 800bcf8:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bcfa:	79fb      	ldrb	r3, [r7, #7]
 800bcfc:	1e5a      	subs	r2, r3, #1
 800bcfe:	71fa      	strb	r2, [r7, #7]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1f2      	bne.n	800bcea <copy_block_nn+0x10>
}
 800bd04:	bf00      	nop
 800bd06:	bf00      	nop
 800bd08:	3714      	adds	r7, #20
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bc80      	pop	{r7}
 800bd0e:	4770      	bx	lr

0800bd10 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	781a      	ldrb	r2, [r3, #0]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	4053      	eors	r3, r2
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	7819      	ldrb	r1, [r3, #0]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	3301      	adds	r3, #1
 800bd34:	781a      	ldrb	r2, [r3, #0]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	404a      	eors	r2, r1
 800bd3c:	b2d2      	uxtb	r2, r2
 800bd3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	3302      	adds	r3, #2
 800bd44:	7819      	ldrb	r1, [r3, #0]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	3302      	adds	r3, #2
 800bd4a:	781a      	ldrb	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3302      	adds	r3, #2
 800bd50:	404a      	eors	r2, r1
 800bd52:	b2d2      	uxtb	r2, r2
 800bd54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3303      	adds	r3, #3
 800bd5a:	7819      	ldrb	r1, [r3, #0]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	3303      	adds	r3, #3
 800bd60:	781a      	ldrb	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	3303      	adds	r3, #3
 800bd66:	404a      	eors	r2, r1
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	7819      	ldrb	r1, [r3, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	3304      	adds	r3, #4
 800bd76:	781a      	ldrb	r2, [r3, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	404a      	eors	r2, r1
 800bd7e:	b2d2      	uxtb	r2, r2
 800bd80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	3305      	adds	r3, #5
 800bd86:	7819      	ldrb	r1, [r3, #0]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	3305      	adds	r3, #5
 800bd8c:	781a      	ldrb	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3305      	adds	r3, #5
 800bd92:	404a      	eors	r2, r1
 800bd94:	b2d2      	uxtb	r2, r2
 800bd96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3306      	adds	r3, #6
 800bd9c:	7819      	ldrb	r1, [r3, #0]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	3306      	adds	r3, #6
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	3306      	adds	r3, #6
 800bda8:	404a      	eors	r2, r1
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	3307      	adds	r3, #7
 800bdb2:	7819      	ldrb	r1, [r3, #0]
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	3307      	adds	r3, #7
 800bdb8:	781a      	ldrb	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	3307      	adds	r3, #7
 800bdbe:	404a      	eors	r2, r1
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	7819      	ldrb	r1, [r3, #0]
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	3308      	adds	r3, #8
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3308      	adds	r3, #8
 800bdd4:	404a      	eors	r2, r1
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3309      	adds	r3, #9
 800bdde:	7819      	ldrb	r1, [r3, #0]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	3309      	adds	r3, #9
 800bde4:	781a      	ldrb	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	3309      	adds	r3, #9
 800bdea:	404a      	eors	r2, r1
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	330a      	adds	r3, #10
 800bdf4:	7819      	ldrb	r1, [r3, #0]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	330a      	adds	r3, #10
 800bdfa:	781a      	ldrb	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	330a      	adds	r3, #10
 800be00:	404a      	eors	r2, r1
 800be02:	b2d2      	uxtb	r2, r2
 800be04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	330b      	adds	r3, #11
 800be0a:	7819      	ldrb	r1, [r3, #0]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	330b      	adds	r3, #11
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	330b      	adds	r3, #11
 800be16:	404a      	eors	r2, r1
 800be18:	b2d2      	uxtb	r2, r2
 800be1a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	330c      	adds	r3, #12
 800be20:	7819      	ldrb	r1, [r3, #0]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	330c      	adds	r3, #12
 800be26:	781a      	ldrb	r2, [r3, #0]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	330c      	adds	r3, #12
 800be2c:	404a      	eors	r2, r1
 800be2e:	b2d2      	uxtb	r2, r2
 800be30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	330d      	adds	r3, #13
 800be36:	7819      	ldrb	r1, [r3, #0]
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	330d      	adds	r3, #13
 800be3c:	781a      	ldrb	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	330d      	adds	r3, #13
 800be42:	404a      	eors	r2, r1
 800be44:	b2d2      	uxtb	r2, r2
 800be46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	330e      	adds	r3, #14
 800be4c:	7819      	ldrb	r1, [r3, #0]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	330e      	adds	r3, #14
 800be52:	781a      	ldrb	r2, [r3, #0]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	330e      	adds	r3, #14
 800be58:	404a      	eors	r2, r1
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	330f      	adds	r3, #15
 800be62:	7819      	ldrb	r1, [r3, #0]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	330f      	adds	r3, #15
 800be68:	781a      	ldrb	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	330f      	adds	r3, #15
 800be6e:	404a      	eors	r2, r1
 800be70:	b2d2      	uxtb	r2, r2
 800be72:	701a      	strb	r2, [r3, #0]
#endif
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	bc80      	pop	{r7}
 800be7c:	4770      	bx	lr

0800be7e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800be7e:	b480      	push	{r7}
 800be80:	b085      	sub	sp, #20
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	781b      	ldrb	r3, [r3, #0]
 800be92:	4053      	eors	r3, r2
 800be94:	b2da      	uxtb	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	3301      	adds	r3, #1
 800be9e:	7819      	ldrb	r1, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	3301      	adds	r3, #1
 800bea4:	781a      	ldrb	r2, [r3, #0]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3301      	adds	r3, #1
 800beaa:	404a      	eors	r2, r1
 800beac:	b2d2      	uxtb	r2, r2
 800beae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	3302      	adds	r3, #2
 800beb4:	7819      	ldrb	r1, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	3302      	adds	r3, #2
 800beba:	781a      	ldrb	r2, [r3, #0]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3302      	adds	r3, #2
 800bec0:	404a      	eors	r2, r1
 800bec2:	b2d2      	uxtb	r2, r2
 800bec4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	3303      	adds	r3, #3
 800beca:	7819      	ldrb	r1, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3303      	adds	r3, #3
 800bed0:	781a      	ldrb	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3303      	adds	r3, #3
 800bed6:	404a      	eors	r2, r1
 800bed8:	b2d2      	uxtb	r2, r2
 800beda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	3304      	adds	r3, #4
 800bee0:	7819      	ldrb	r1, [r3, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	3304      	adds	r3, #4
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	3304      	adds	r3, #4
 800beec:	404a      	eors	r2, r1
 800beee:	b2d2      	uxtb	r2, r2
 800bef0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	3305      	adds	r3, #5
 800bef6:	7819      	ldrb	r1, [r3, #0]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	3305      	adds	r3, #5
 800befc:	781a      	ldrb	r2, [r3, #0]
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	3305      	adds	r3, #5
 800bf02:	404a      	eors	r2, r1
 800bf04:	b2d2      	uxtb	r2, r2
 800bf06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	3306      	adds	r3, #6
 800bf0c:	7819      	ldrb	r1, [r3, #0]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3306      	adds	r3, #6
 800bf12:	781a      	ldrb	r2, [r3, #0]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3306      	adds	r3, #6
 800bf18:	404a      	eors	r2, r1
 800bf1a:	b2d2      	uxtb	r2, r2
 800bf1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	3307      	adds	r3, #7
 800bf22:	7819      	ldrb	r1, [r3, #0]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	3307      	adds	r3, #7
 800bf28:	781a      	ldrb	r2, [r3, #0]
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3307      	adds	r3, #7
 800bf2e:	404a      	eors	r2, r1
 800bf30:	b2d2      	uxtb	r2, r2
 800bf32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	3308      	adds	r3, #8
 800bf38:	7819      	ldrb	r1, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	781a      	ldrb	r2, [r3, #0]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3308      	adds	r3, #8
 800bf44:	404a      	eors	r2, r1
 800bf46:	b2d2      	uxtb	r2, r2
 800bf48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	3309      	adds	r3, #9
 800bf4e:	7819      	ldrb	r1, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3309      	adds	r3, #9
 800bf54:	781a      	ldrb	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	3309      	adds	r3, #9
 800bf5a:	404a      	eors	r2, r1
 800bf5c:	b2d2      	uxtb	r2, r2
 800bf5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	330a      	adds	r3, #10
 800bf64:	7819      	ldrb	r1, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	330a      	adds	r3, #10
 800bf6a:	781a      	ldrb	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	330a      	adds	r3, #10
 800bf70:	404a      	eors	r2, r1
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	330b      	adds	r3, #11
 800bf7a:	7819      	ldrb	r1, [r3, #0]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	330b      	adds	r3, #11
 800bf80:	781a      	ldrb	r2, [r3, #0]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	330b      	adds	r3, #11
 800bf86:	404a      	eors	r2, r1
 800bf88:	b2d2      	uxtb	r2, r2
 800bf8a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	330c      	adds	r3, #12
 800bf90:	7819      	ldrb	r1, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	330c      	adds	r3, #12
 800bf96:	781a      	ldrb	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	330c      	adds	r3, #12
 800bf9c:	404a      	eors	r2, r1
 800bf9e:	b2d2      	uxtb	r2, r2
 800bfa0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	330d      	adds	r3, #13
 800bfa6:	7819      	ldrb	r1, [r3, #0]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	330d      	adds	r3, #13
 800bfac:	781a      	ldrb	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	330d      	adds	r3, #13
 800bfb2:	404a      	eors	r2, r1
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	330e      	adds	r3, #14
 800bfbc:	7819      	ldrb	r1, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	330e      	adds	r3, #14
 800bfc2:	781a      	ldrb	r2, [r3, #0]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	330e      	adds	r3, #14
 800bfc8:	404a      	eors	r2, r1
 800bfca:	b2d2      	uxtb	r2, r2
 800bfcc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	330f      	adds	r3, #15
 800bfd2:	7819      	ldrb	r1, [r3, #0]
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	330f      	adds	r3, #15
 800bfd8:	781a      	ldrb	r2, [r3, #0]
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	330f      	adds	r3, #15
 800bfde:	404a      	eors	r2, r1
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800bfe4:	bf00      	nop
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bc80      	pop	{r7}
 800bfec:	4770      	bx	lr

0800bfee <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
 800bff6:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff fe88 	bl	800bd10 <xor_block>
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	4b48      	ldr	r3, [pc, #288]	; (800c138 <shift_sub_rows+0x130>)
 800c018:	5c9a      	ldrb	r2, [r3, r2]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	701a      	strb	r2, [r3, #0]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	3304      	adds	r3, #4
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	4619      	mov	r1, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3304      	adds	r3, #4
 800c02a:	4a43      	ldr	r2, [pc, #268]	; (800c138 <shift_sub_rows+0x130>)
 800c02c:	5c52      	ldrb	r2, [r2, r1]
 800c02e:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	3308      	adds	r3, #8
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	4619      	mov	r1, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3308      	adds	r3, #8
 800c03c:	4a3e      	ldr	r2, [pc, #248]	; (800c138 <shift_sub_rows+0x130>)
 800c03e:	5c52      	ldrb	r2, [r2, r1]
 800c040:	701a      	strb	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	330c      	adds	r3, #12
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	4619      	mov	r1, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	330c      	adds	r3, #12
 800c04e:	4a3a      	ldr	r2, [pc, #232]	; (800c138 <shift_sub_rows+0x130>)
 800c050:	5c52      	ldrb	r2, [r2, r1]
 800c052:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	785b      	ldrb	r3, [r3, #1]
 800c058:	73fb      	strb	r3, [r7, #15]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3305      	adds	r3, #5
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	4619      	mov	r1, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3301      	adds	r3, #1
 800c066:	4a34      	ldr	r2, [pc, #208]	; (800c138 <shift_sub_rows+0x130>)
 800c068:	5c52      	ldrb	r2, [r2, r1]
 800c06a:	701a      	strb	r2, [r3, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	3309      	adds	r3, #9
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	4619      	mov	r1, r3
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	3305      	adds	r3, #5
 800c078:	4a2f      	ldr	r2, [pc, #188]	; (800c138 <shift_sub_rows+0x130>)
 800c07a:	5c52      	ldrb	r2, [r2, r1]
 800c07c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	330d      	adds	r3, #13
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	4619      	mov	r1, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3309      	adds	r3, #9
 800c08a:	4a2b      	ldr	r2, [pc, #172]	; (800c138 <shift_sub_rows+0x130>)
 800c08c:	5c52      	ldrb	r2, [r2, r1]
 800c08e:	701a      	strb	r2, [r3, #0]
 800c090:	7bfa      	ldrb	r2, [r7, #15]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	330d      	adds	r3, #13
 800c096:	4928      	ldr	r1, [pc, #160]	; (800c138 <shift_sub_rows+0x130>)
 800c098:	5c8a      	ldrb	r2, [r1, r2]
 800c09a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	789b      	ldrb	r3, [r3, #2]
 800c0a0:	73fb      	strb	r3, [r7, #15]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	330a      	adds	r3, #10
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	3302      	adds	r3, #2
 800c0ae:	4a22      	ldr	r2, [pc, #136]	; (800c138 <shift_sub_rows+0x130>)
 800c0b0:	5c52      	ldrb	r2, [r2, r1]
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	7bfa      	ldrb	r2, [r7, #15]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	330a      	adds	r3, #10
 800c0ba:	491f      	ldr	r1, [pc, #124]	; (800c138 <shift_sub_rows+0x130>)
 800c0bc:	5c8a      	ldrb	r2, [r1, r2]
 800c0be:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	799b      	ldrb	r3, [r3, #6]
 800c0c4:	73fb      	strb	r3, [r7, #15]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	330e      	adds	r3, #14
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	3306      	adds	r3, #6
 800c0d2:	4a19      	ldr	r2, [pc, #100]	; (800c138 <shift_sub_rows+0x130>)
 800c0d4:	5c52      	ldrb	r2, [r2, r1]
 800c0d6:	701a      	strb	r2, [r3, #0]
 800c0d8:	7bfa      	ldrb	r2, [r7, #15]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	330e      	adds	r3, #14
 800c0de:	4916      	ldr	r1, [pc, #88]	; (800c138 <shift_sub_rows+0x130>)
 800c0e0:	5c8a      	ldrb	r2, [r1, r2]
 800c0e2:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	7bdb      	ldrb	r3, [r3, #15]
 800c0e8:	73fb      	strb	r3, [r7, #15]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	330b      	adds	r3, #11
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	330f      	adds	r3, #15
 800c0f6:	4a10      	ldr	r2, [pc, #64]	; (800c138 <shift_sub_rows+0x130>)
 800c0f8:	5c52      	ldrb	r2, [r2, r1]
 800c0fa:	701a      	strb	r2, [r3, #0]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	3307      	adds	r3, #7
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	4619      	mov	r1, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	330b      	adds	r3, #11
 800c108:	4a0b      	ldr	r2, [pc, #44]	; (800c138 <shift_sub_rows+0x130>)
 800c10a:	5c52      	ldrb	r2, [r2, r1]
 800c10c:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	3303      	adds	r3, #3
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	4619      	mov	r1, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	3307      	adds	r3, #7
 800c11a:	4a07      	ldr	r2, [pc, #28]	; (800c138 <shift_sub_rows+0x130>)
 800c11c:	5c52      	ldrb	r2, [r2, r1]
 800c11e:	701a      	strb	r2, [r3, #0]
 800c120:	7bfa      	ldrb	r2, [r7, #15]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	3303      	adds	r3, #3
 800c126:	4904      	ldr	r1, [pc, #16]	; (800c138 <shift_sub_rows+0x130>)
 800c128:	5c8a      	ldrb	r2, [r1, r2]
 800c12a:	701a      	strb	r2, [r3, #0]
}
 800c12c:	bf00      	nop
 800c12e:	3714      	adds	r7, #20
 800c130:	46bd      	mov	sp, r7
 800c132:	bc80      	pop	{r7}
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	0801d1f0 	.word	0x0801d1f0

0800c13c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b086      	sub	sp, #24
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c144:	f107 0308 	add.w	r3, r7, #8
 800c148:	6879      	ldr	r1, [r7, #4]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff fd6c 	bl	800bc28 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c150:	7a3b      	ldrb	r3, [r7, #8]
 800c152:	461a      	mov	r2, r3
 800c154:	4b9a      	ldr	r3, [pc, #616]	; (800c3c0 <mix_sub_columns+0x284>)
 800c156:	5c9a      	ldrb	r2, [r3, r2]
 800c158:	7b7b      	ldrb	r3, [r7, #13]
 800c15a:	4619      	mov	r1, r3
 800c15c:	4b99      	ldr	r3, [pc, #612]	; (800c3c4 <mix_sub_columns+0x288>)
 800c15e:	5c5b      	ldrb	r3, [r3, r1]
 800c160:	4053      	eors	r3, r2
 800c162:	b2da      	uxtb	r2, r3
 800c164:	7cbb      	ldrb	r3, [r7, #18]
 800c166:	4619      	mov	r1, r3
 800c168:	4b97      	ldr	r3, [pc, #604]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c16a:	5c5b      	ldrb	r3, [r3, r1]
 800c16c:	4053      	eors	r3, r2
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	7dfb      	ldrb	r3, [r7, #23]
 800c172:	4619      	mov	r1, r3
 800c174:	4b94      	ldr	r3, [pc, #592]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c176:	5c5b      	ldrb	r3, [r3, r1]
 800c178:	4053      	eors	r3, r2
 800c17a:	b2da      	uxtb	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c180:	7a3b      	ldrb	r3, [r7, #8]
 800c182:	461a      	mov	r2, r3
 800c184:	4b90      	ldr	r3, [pc, #576]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c186:	5c9a      	ldrb	r2, [r3, r2]
 800c188:	7b7b      	ldrb	r3, [r7, #13]
 800c18a:	4619      	mov	r1, r3
 800c18c:	4b8c      	ldr	r3, [pc, #560]	; (800c3c0 <mix_sub_columns+0x284>)
 800c18e:	5c5b      	ldrb	r3, [r3, r1]
 800c190:	4053      	eors	r3, r2
 800c192:	b2da      	uxtb	r2, r3
 800c194:	7cbb      	ldrb	r3, [r7, #18]
 800c196:	4619      	mov	r1, r3
 800c198:	4b8a      	ldr	r3, [pc, #552]	; (800c3c4 <mix_sub_columns+0x288>)
 800c19a:	5c5b      	ldrb	r3, [r3, r1]
 800c19c:	4053      	eors	r3, r2
 800c19e:	b2d9      	uxtb	r1, r3
 800c1a0:	7dfb      	ldrb	r3, [r7, #23]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	4b88      	ldr	r3, [pc, #544]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c1a6:	5c9a      	ldrb	r2, [r3, r2]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	404a      	eors	r2, r1
 800c1ae:	b2d2      	uxtb	r2, r2
 800c1b0:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c1b2:	7a3b      	ldrb	r3, [r7, #8]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	4b84      	ldr	r3, [pc, #528]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c1b8:	5c9a      	ldrb	r2, [r3, r2]
 800c1ba:	7b7b      	ldrb	r3, [r7, #13]
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4b82      	ldr	r3, [pc, #520]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c1c0:	5c5b      	ldrb	r3, [r3, r1]
 800c1c2:	4053      	eors	r3, r2
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	7cbb      	ldrb	r3, [r7, #18]
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	4b7d      	ldr	r3, [pc, #500]	; (800c3c0 <mix_sub_columns+0x284>)
 800c1cc:	5c5b      	ldrb	r3, [r3, r1]
 800c1ce:	4053      	eors	r3, r2
 800c1d0:	b2d9      	uxtb	r1, r3
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	4b7b      	ldr	r3, [pc, #492]	; (800c3c4 <mix_sub_columns+0x288>)
 800c1d8:	5c9a      	ldrb	r2, [r3, r2]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3302      	adds	r3, #2
 800c1de:	404a      	eors	r2, r1
 800c1e0:	b2d2      	uxtb	r2, r2
 800c1e2:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c1e4:	7a3b      	ldrb	r3, [r7, #8]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	4b76      	ldr	r3, [pc, #472]	; (800c3c4 <mix_sub_columns+0x288>)
 800c1ea:	5c9a      	ldrb	r2, [r3, r2]
 800c1ec:	7b7b      	ldrb	r3, [r7, #13]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4b75      	ldr	r3, [pc, #468]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c1f2:	5c5b      	ldrb	r3, [r3, r1]
 800c1f4:	4053      	eors	r3, r2
 800c1f6:	b2da      	uxtb	r2, r3
 800c1f8:	7cbb      	ldrb	r3, [r7, #18]
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	4b72      	ldr	r3, [pc, #456]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c1fe:	5c5b      	ldrb	r3, [r3, r1]
 800c200:	4053      	eors	r3, r2
 800c202:	b2d9      	uxtb	r1, r3
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	461a      	mov	r2, r3
 800c208:	4b6d      	ldr	r3, [pc, #436]	; (800c3c0 <mix_sub_columns+0x284>)
 800c20a:	5c9a      	ldrb	r2, [r3, r2]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	3303      	adds	r3, #3
 800c210:	404a      	eors	r2, r1
 800c212:	b2d2      	uxtb	r2, r2
 800c214:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c216:	7b3b      	ldrb	r3, [r7, #12]
 800c218:	461a      	mov	r2, r3
 800c21a:	4b69      	ldr	r3, [pc, #420]	; (800c3c0 <mix_sub_columns+0x284>)
 800c21c:	5c9a      	ldrb	r2, [r3, r2]
 800c21e:	7c7b      	ldrb	r3, [r7, #17]
 800c220:	4619      	mov	r1, r3
 800c222:	4b68      	ldr	r3, [pc, #416]	; (800c3c4 <mix_sub_columns+0x288>)
 800c224:	5c5b      	ldrb	r3, [r3, r1]
 800c226:	4053      	eors	r3, r2
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	7dbb      	ldrb	r3, [r7, #22]
 800c22c:	4619      	mov	r1, r3
 800c22e:	4b66      	ldr	r3, [pc, #408]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c230:	5c5b      	ldrb	r3, [r3, r1]
 800c232:	4053      	eors	r3, r2
 800c234:	b2d9      	uxtb	r1, r3
 800c236:	7afb      	ldrb	r3, [r7, #11]
 800c238:	461a      	mov	r2, r3
 800c23a:	4b63      	ldr	r3, [pc, #396]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c23c:	5c9a      	ldrb	r2, [r3, r2]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3304      	adds	r3, #4
 800c242:	404a      	eors	r2, r1
 800c244:	b2d2      	uxtb	r2, r2
 800c246:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c248:	7b3b      	ldrb	r3, [r7, #12]
 800c24a:	461a      	mov	r2, r3
 800c24c:	4b5e      	ldr	r3, [pc, #376]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c24e:	5c9a      	ldrb	r2, [r3, r2]
 800c250:	7c7b      	ldrb	r3, [r7, #17]
 800c252:	4619      	mov	r1, r3
 800c254:	4b5a      	ldr	r3, [pc, #360]	; (800c3c0 <mix_sub_columns+0x284>)
 800c256:	5c5b      	ldrb	r3, [r3, r1]
 800c258:	4053      	eors	r3, r2
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	7dbb      	ldrb	r3, [r7, #22]
 800c25e:	4619      	mov	r1, r3
 800c260:	4b58      	ldr	r3, [pc, #352]	; (800c3c4 <mix_sub_columns+0x288>)
 800c262:	5c5b      	ldrb	r3, [r3, r1]
 800c264:	4053      	eors	r3, r2
 800c266:	b2d9      	uxtb	r1, r3
 800c268:	7afb      	ldrb	r3, [r7, #11]
 800c26a:	461a      	mov	r2, r3
 800c26c:	4b56      	ldr	r3, [pc, #344]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c26e:	5c9a      	ldrb	r2, [r3, r2]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3305      	adds	r3, #5
 800c274:	404a      	eors	r2, r1
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c27a:	7b3b      	ldrb	r3, [r7, #12]
 800c27c:	461a      	mov	r2, r3
 800c27e:	4b52      	ldr	r3, [pc, #328]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c280:	5c9a      	ldrb	r2, [r3, r2]
 800c282:	7c7b      	ldrb	r3, [r7, #17]
 800c284:	4619      	mov	r1, r3
 800c286:	4b50      	ldr	r3, [pc, #320]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c288:	5c5b      	ldrb	r3, [r3, r1]
 800c28a:	4053      	eors	r3, r2
 800c28c:	b2da      	uxtb	r2, r3
 800c28e:	7dbb      	ldrb	r3, [r7, #22]
 800c290:	4619      	mov	r1, r3
 800c292:	4b4b      	ldr	r3, [pc, #300]	; (800c3c0 <mix_sub_columns+0x284>)
 800c294:	5c5b      	ldrb	r3, [r3, r1]
 800c296:	4053      	eors	r3, r2
 800c298:	b2d9      	uxtb	r1, r3
 800c29a:	7afb      	ldrb	r3, [r7, #11]
 800c29c:	461a      	mov	r2, r3
 800c29e:	4b49      	ldr	r3, [pc, #292]	; (800c3c4 <mix_sub_columns+0x288>)
 800c2a0:	5c9a      	ldrb	r2, [r3, r2]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	3306      	adds	r3, #6
 800c2a6:	404a      	eors	r2, r1
 800c2a8:	b2d2      	uxtb	r2, r2
 800c2aa:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c2ac:	7b3b      	ldrb	r3, [r7, #12]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	4b44      	ldr	r3, [pc, #272]	; (800c3c4 <mix_sub_columns+0x288>)
 800c2b2:	5c9a      	ldrb	r2, [r3, r2]
 800c2b4:	7c7b      	ldrb	r3, [r7, #17]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	4b43      	ldr	r3, [pc, #268]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c2ba:	5c5b      	ldrb	r3, [r3, r1]
 800c2bc:	4053      	eors	r3, r2
 800c2be:	b2da      	uxtb	r2, r3
 800c2c0:	7dbb      	ldrb	r3, [r7, #22]
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4b40      	ldr	r3, [pc, #256]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c2c6:	5c5b      	ldrb	r3, [r3, r1]
 800c2c8:	4053      	eors	r3, r2
 800c2ca:	b2d9      	uxtb	r1, r3
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	4b3b      	ldr	r3, [pc, #236]	; (800c3c0 <mix_sub_columns+0x284>)
 800c2d2:	5c9a      	ldrb	r2, [r3, r2]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3307      	adds	r3, #7
 800c2d8:	404a      	eors	r2, r1
 800c2da:	b2d2      	uxtb	r2, r2
 800c2dc:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c2de:	7c3b      	ldrb	r3, [r7, #16]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	4b37      	ldr	r3, [pc, #220]	; (800c3c0 <mix_sub_columns+0x284>)
 800c2e4:	5c9a      	ldrb	r2, [r3, r2]
 800c2e6:	7d7b      	ldrb	r3, [r7, #21]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	4b36      	ldr	r3, [pc, #216]	; (800c3c4 <mix_sub_columns+0x288>)
 800c2ec:	5c5b      	ldrb	r3, [r3, r1]
 800c2ee:	4053      	eors	r3, r2
 800c2f0:	b2da      	uxtb	r2, r3
 800c2f2:	7abb      	ldrb	r3, [r7, #10]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4b34      	ldr	r3, [pc, #208]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c2f8:	5c5b      	ldrb	r3, [r3, r1]
 800c2fa:	4053      	eors	r3, r2
 800c2fc:	b2d9      	uxtb	r1, r3
 800c2fe:	7bfb      	ldrb	r3, [r7, #15]
 800c300:	461a      	mov	r2, r3
 800c302:	4b31      	ldr	r3, [pc, #196]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c304:	5c9a      	ldrb	r2, [r3, r2]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3308      	adds	r3, #8
 800c30a:	404a      	eors	r2, r1
 800c30c:	b2d2      	uxtb	r2, r2
 800c30e:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c310:	7c3b      	ldrb	r3, [r7, #16]
 800c312:	461a      	mov	r2, r3
 800c314:	4b2c      	ldr	r3, [pc, #176]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c316:	5c9a      	ldrb	r2, [r3, r2]
 800c318:	7d7b      	ldrb	r3, [r7, #21]
 800c31a:	4619      	mov	r1, r3
 800c31c:	4b28      	ldr	r3, [pc, #160]	; (800c3c0 <mix_sub_columns+0x284>)
 800c31e:	5c5b      	ldrb	r3, [r3, r1]
 800c320:	4053      	eors	r3, r2
 800c322:	b2da      	uxtb	r2, r3
 800c324:	7abb      	ldrb	r3, [r7, #10]
 800c326:	4619      	mov	r1, r3
 800c328:	4b26      	ldr	r3, [pc, #152]	; (800c3c4 <mix_sub_columns+0x288>)
 800c32a:	5c5b      	ldrb	r3, [r3, r1]
 800c32c:	4053      	eors	r3, r2
 800c32e:	b2d9      	uxtb	r1, r3
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	461a      	mov	r2, r3
 800c334:	4b24      	ldr	r3, [pc, #144]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c336:	5c9a      	ldrb	r2, [r3, r2]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	3309      	adds	r3, #9
 800c33c:	404a      	eors	r2, r1
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c342:	7c3b      	ldrb	r3, [r7, #16]
 800c344:	461a      	mov	r2, r3
 800c346:	4b20      	ldr	r3, [pc, #128]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c348:	5c9a      	ldrb	r2, [r3, r2]
 800c34a:	7d7b      	ldrb	r3, [r7, #21]
 800c34c:	4619      	mov	r1, r3
 800c34e:	4b1e      	ldr	r3, [pc, #120]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c350:	5c5b      	ldrb	r3, [r3, r1]
 800c352:	4053      	eors	r3, r2
 800c354:	b2da      	uxtb	r2, r3
 800c356:	7abb      	ldrb	r3, [r7, #10]
 800c358:	4619      	mov	r1, r3
 800c35a:	4b19      	ldr	r3, [pc, #100]	; (800c3c0 <mix_sub_columns+0x284>)
 800c35c:	5c5b      	ldrb	r3, [r3, r1]
 800c35e:	4053      	eors	r3, r2
 800c360:	b2d9      	uxtb	r1, r3
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	461a      	mov	r2, r3
 800c366:	4b17      	ldr	r3, [pc, #92]	; (800c3c4 <mix_sub_columns+0x288>)
 800c368:	5c9a      	ldrb	r2, [r3, r2]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	330a      	adds	r3, #10
 800c36e:	404a      	eors	r2, r1
 800c370:	b2d2      	uxtb	r2, r2
 800c372:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c374:	7c3b      	ldrb	r3, [r7, #16]
 800c376:	461a      	mov	r2, r3
 800c378:	4b12      	ldr	r3, [pc, #72]	; (800c3c4 <mix_sub_columns+0x288>)
 800c37a:	5c9a      	ldrb	r2, [r3, r2]
 800c37c:	7d7b      	ldrb	r3, [r7, #21]
 800c37e:	4619      	mov	r1, r3
 800c380:	4b11      	ldr	r3, [pc, #68]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c382:	5c5b      	ldrb	r3, [r3, r1]
 800c384:	4053      	eors	r3, r2
 800c386:	b2da      	uxtb	r2, r3
 800c388:	7abb      	ldrb	r3, [r7, #10]
 800c38a:	4619      	mov	r1, r3
 800c38c:	4b0e      	ldr	r3, [pc, #56]	; (800c3c8 <mix_sub_columns+0x28c>)
 800c38e:	5c5b      	ldrb	r3, [r3, r1]
 800c390:	4053      	eors	r3, r2
 800c392:	b2d9      	uxtb	r1, r3
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	461a      	mov	r2, r3
 800c398:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <mix_sub_columns+0x284>)
 800c39a:	5c9a      	ldrb	r2, [r3, r2]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	330b      	adds	r3, #11
 800c3a0:	404a      	eors	r2, r1
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c3a6:	7d3b      	ldrb	r3, [r7, #20]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <mix_sub_columns+0x284>)
 800c3ac:	5c9a      	ldrb	r2, [r3, r2]
 800c3ae:	7a7b      	ldrb	r3, [r7, #9]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <mix_sub_columns+0x288>)
 800c3b4:	5c5b      	ldrb	r3, [r3, r1]
 800c3b6:	4053      	eors	r3, r2
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	7bbb      	ldrb	r3, [r7, #14]
 800c3bc:	4619      	mov	r1, r3
 800c3be:	e005      	b.n	800c3cc <mix_sub_columns+0x290>
 800c3c0:	0801d2f0 	.word	0x0801d2f0
 800c3c4:	0801d3f0 	.word	0x0801d3f0
 800c3c8:	0801d1f0 	.word	0x0801d1f0
 800c3cc:	4b2d      	ldr	r3, [pc, #180]	; (800c484 <mix_sub_columns+0x348>)
 800c3ce:	5c5b      	ldrb	r3, [r3, r1]
 800c3d0:	4053      	eors	r3, r2
 800c3d2:	b2d9      	uxtb	r1, r3
 800c3d4:	7cfb      	ldrb	r3, [r7, #19]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	4b2a      	ldr	r3, [pc, #168]	; (800c484 <mix_sub_columns+0x348>)
 800c3da:	5c9a      	ldrb	r2, [r3, r2]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	330c      	adds	r3, #12
 800c3e0:	404a      	eors	r2, r1
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c3e6:	7d3b      	ldrb	r3, [r7, #20]
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	4b26      	ldr	r3, [pc, #152]	; (800c484 <mix_sub_columns+0x348>)
 800c3ec:	5c9a      	ldrb	r2, [r3, r2]
 800c3ee:	7a7b      	ldrb	r3, [r7, #9]
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	4b25      	ldr	r3, [pc, #148]	; (800c488 <mix_sub_columns+0x34c>)
 800c3f4:	5c5b      	ldrb	r3, [r3, r1]
 800c3f6:	4053      	eors	r3, r2
 800c3f8:	b2da      	uxtb	r2, r3
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	4b23      	ldr	r3, [pc, #140]	; (800c48c <mix_sub_columns+0x350>)
 800c400:	5c5b      	ldrb	r3, [r3, r1]
 800c402:	4053      	eors	r3, r2
 800c404:	b2d9      	uxtb	r1, r3
 800c406:	7cfb      	ldrb	r3, [r7, #19]
 800c408:	461a      	mov	r2, r3
 800c40a:	4b1e      	ldr	r3, [pc, #120]	; (800c484 <mix_sub_columns+0x348>)
 800c40c:	5c9a      	ldrb	r2, [r3, r2]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	330d      	adds	r3, #13
 800c412:	404a      	eors	r2, r1
 800c414:	b2d2      	uxtb	r2, r2
 800c416:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c418:	7d3b      	ldrb	r3, [r7, #20]
 800c41a:	461a      	mov	r2, r3
 800c41c:	4b19      	ldr	r3, [pc, #100]	; (800c484 <mix_sub_columns+0x348>)
 800c41e:	5c9a      	ldrb	r2, [r3, r2]
 800c420:	7a7b      	ldrb	r3, [r7, #9]
 800c422:	4619      	mov	r1, r3
 800c424:	4b17      	ldr	r3, [pc, #92]	; (800c484 <mix_sub_columns+0x348>)
 800c426:	5c5b      	ldrb	r3, [r3, r1]
 800c428:	4053      	eors	r3, r2
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	7bbb      	ldrb	r3, [r7, #14]
 800c42e:	4619      	mov	r1, r3
 800c430:	4b15      	ldr	r3, [pc, #84]	; (800c488 <mix_sub_columns+0x34c>)
 800c432:	5c5b      	ldrb	r3, [r3, r1]
 800c434:	4053      	eors	r3, r2
 800c436:	b2d9      	uxtb	r1, r3
 800c438:	7cfb      	ldrb	r3, [r7, #19]
 800c43a:	461a      	mov	r2, r3
 800c43c:	4b13      	ldr	r3, [pc, #76]	; (800c48c <mix_sub_columns+0x350>)
 800c43e:	5c9a      	ldrb	r2, [r3, r2]
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	330e      	adds	r3, #14
 800c444:	404a      	eors	r2, r1
 800c446:	b2d2      	uxtb	r2, r2
 800c448:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c44a:	7d3b      	ldrb	r3, [r7, #20]
 800c44c:	461a      	mov	r2, r3
 800c44e:	4b0f      	ldr	r3, [pc, #60]	; (800c48c <mix_sub_columns+0x350>)
 800c450:	5c9a      	ldrb	r2, [r3, r2]
 800c452:	7a7b      	ldrb	r3, [r7, #9]
 800c454:	4619      	mov	r1, r3
 800c456:	4b0b      	ldr	r3, [pc, #44]	; (800c484 <mix_sub_columns+0x348>)
 800c458:	5c5b      	ldrb	r3, [r3, r1]
 800c45a:	4053      	eors	r3, r2
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
 800c460:	4619      	mov	r1, r3
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <mix_sub_columns+0x348>)
 800c464:	5c5b      	ldrb	r3, [r3, r1]
 800c466:	4053      	eors	r3, r2
 800c468:	b2d9      	uxtb	r1, r3
 800c46a:	7cfb      	ldrb	r3, [r7, #19]
 800c46c:	461a      	mov	r2, r3
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <mix_sub_columns+0x34c>)
 800c470:	5c9a      	ldrb	r2, [r3, r2]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	330f      	adds	r3, #15
 800c476:	404a      	eors	r2, r1
 800c478:	b2d2      	uxtb	r2, r2
 800c47a:	701a      	strb	r2, [r3, #0]
  }
 800c47c:	bf00      	nop
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}
 800c484:	0801d1f0 	.word	0x0801d1f0
 800c488:	0801d2f0 	.word	0x0801d2f0
 800c48c:	0801d3f0 	.word	0x0801d3f0

0800c490 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	460b      	mov	r3, r1
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c49e:	7afb      	ldrb	r3, [r7, #11]
 800c4a0:	3b10      	subs	r3, #16
 800c4a2:	2b10      	cmp	r3, #16
 800c4a4:	bf8c      	ite	hi
 800c4a6:	2201      	movhi	r2, #1
 800c4a8:	2200      	movls	r2, #0
 800c4aa:	b2d2      	uxtb	r2, r2
 800c4ac:	2a00      	cmp	r2, #0
 800c4ae:	d10d      	bne.n	800c4cc <lorawan_aes_set_key+0x3c>
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b6:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c4ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	bf14      	ite	ne
 800c4c2:	2301      	movne	r3, #1
 800c4c4:	2300      	moveq	r3, #0
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d105      	bne.n	800c4d8 <lorawan_aes_set_key+0x48>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800c4d4:	23ff      	movs	r3, #255	; 0xff
 800c4d6:	e0b2      	b.n	800c63e <lorawan_aes_set_key+0x1ae>
        break;
 800c4d8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7afa      	ldrb	r2, [r7, #11]
 800c4de:	68f9      	ldr	r1, [r7, #12]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7ff fbfa 	bl	800bcda <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c4e6:	7afb      	ldrb	r3, [r7, #11]
 800c4e8:	331c      	adds	r3, #28
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800c4f0:	7c7b      	ldrb	r3, [r7, #17]
 800c4f2:	091b      	lsrs	r3, r3, #4
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	b2da      	uxtb	r2, r3
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c500:	7afb      	ldrb	r3, [r7, #11]
 800c502:	75fb      	strb	r3, [r7, #23]
 800c504:	2301      	movs	r3, #1
 800c506:	75bb      	strb	r3, [r7, #22]
 800c508:	e093      	b.n	800c632 <lorawan_aes_set_key+0x1a2>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c50a:	7dfb      	ldrb	r3, [r7, #23]
 800c50c:	3b04      	subs	r3, #4
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	5cd3      	ldrb	r3, [r2, r3]
 800c512:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	3b03      	subs	r3, #3
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	5cd3      	ldrb	r3, [r2, r3]
 800c51c:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
 800c520:	3b02      	subs	r3, #2
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	5cd3      	ldrb	r3, [r2, r3]
 800c526:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	3b01      	subs	r3, #1
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	5cd3      	ldrb	r3, [r2, r3]
 800c530:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	7afa      	ldrb	r2, [r7, #11]
 800c536:	fbb3 f1f2 	udiv	r1, r3, r2
 800c53a:	fb01 f202 	mul.w	r2, r1, r2
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	d127      	bne.n	800c596 <lorawan_aes_set_key+0x106>
        {
            tt = t0;
 800c546:	7d7b      	ldrb	r3, [r7, #21]
 800c548:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800c54a:	7d3b      	ldrb	r3, [r7, #20]
 800c54c:	4a3e      	ldr	r2, [pc, #248]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c54e:	5cd2      	ldrb	r2, [r2, r3]
 800c550:	7dbb      	ldrb	r3, [r7, #22]
 800c552:	4053      	eors	r3, r2
 800c554:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800c556:	7cfb      	ldrb	r3, [r7, #19]
 800c558:	4a3b      	ldr	r2, [pc, #236]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c55a:	5cd3      	ldrb	r3, [r2, r3]
 800c55c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800c55e:	7cbb      	ldrb	r3, [r7, #18]
 800c560:	4a39      	ldr	r2, [pc, #228]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c562:	5cd3      	ldrb	r3, [r2, r3]
 800c564:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800c566:	7c3b      	ldrb	r3, [r7, #16]
 800c568:	4a37      	ldr	r2, [pc, #220]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c56a:	5cd3      	ldrb	r3, [r2, r3]
 800c56c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800c56e:	7dbb      	ldrb	r3, [r7, #22]
 800c570:	005b      	lsls	r3, r3, #1
 800c572:	b25a      	sxtb	r2, r3
 800c574:	7dbb      	ldrb	r3, [r7, #22]
 800c576:	09db      	lsrs	r3, r3, #7
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	4619      	mov	r1, r3
 800c57c:	0049      	lsls	r1, r1, #1
 800c57e:	440b      	add	r3, r1
 800c580:	4619      	mov	r1, r3
 800c582:	00c8      	lsls	r0, r1, #3
 800c584:	4619      	mov	r1, r3
 800c586:	4603      	mov	r3, r0
 800c588:	440b      	add	r3, r1
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	b25b      	sxtb	r3, r3
 800c58e:	4053      	eors	r3, r2
 800c590:	b25b      	sxtb	r3, r3
 800c592:	75bb      	strb	r3, [r7, #22]
 800c594:	e01c      	b.n	800c5d0 <lorawan_aes_set_key+0x140>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	2b18      	cmp	r3, #24
 800c59a:	d919      	bls.n	800c5d0 <lorawan_aes_set_key+0x140>
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	7afa      	ldrb	r2, [r7, #11]
 800c5a0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5a4:	fb01 f202 	mul.w	r2, r1, r2
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b10      	cmp	r3, #16
 800c5ae:	d10f      	bne.n	800c5d0 <lorawan_aes_set_key+0x140>
        {
            t0 = s_box(t0);
 800c5b0:	7d7b      	ldrb	r3, [r7, #21]
 800c5b2:	4a25      	ldr	r2, [pc, #148]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c5b4:	5cd3      	ldrb	r3, [r2, r3]
 800c5b6:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800c5b8:	7d3b      	ldrb	r3, [r7, #20]
 800c5ba:	4a23      	ldr	r2, [pc, #140]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c5bc:	5cd3      	ldrb	r3, [r2, r3]
 800c5be:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800c5c0:	7cfb      	ldrb	r3, [r7, #19]
 800c5c2:	4a21      	ldr	r2, [pc, #132]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c5c4:	5cd3      	ldrb	r3, [r2, r3]
 800c5c6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800c5c8:	7cbb      	ldrb	r3, [r7, #18]
 800c5ca:	4a1f      	ldr	r2, [pc, #124]	; (800c648 <lorawan_aes_set_key+0x1b8>)
 800c5cc:	5cd3      	ldrb	r3, [r2, r3]
 800c5ce:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800c5d0:	7dfa      	ldrb	r2, [r7, #23]
 800c5d2:	7afb      	ldrb	r3, [r7, #11]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c5d8:	7c3b      	ldrb	r3, [r7, #16]
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	5cd1      	ldrb	r1, [r2, r3]
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	7d7a      	ldrb	r2, [r7, #21]
 800c5e2:	404a      	eors	r2, r1
 800c5e4:	b2d1      	uxtb	r1, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c5ea:	7c3b      	ldrb	r3, [r7, #16]
 800c5ec:	3301      	adds	r3, #1
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	5cd1      	ldrb	r1, [r2, r3]
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	7d3a      	ldrb	r2, [r7, #20]
 800c5f8:	404a      	eors	r2, r1
 800c5fa:	b2d1      	uxtb	r1, r2
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c600:	7c3b      	ldrb	r3, [r7, #16]
 800c602:	3302      	adds	r3, #2
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	5cd1      	ldrb	r1, [r2, r3]
 800c608:	7dfb      	ldrb	r3, [r7, #23]
 800c60a:	3302      	adds	r3, #2
 800c60c:	7cfa      	ldrb	r2, [r7, #19]
 800c60e:	404a      	eors	r2, r1
 800c610:	b2d1      	uxtb	r1, r2
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c616:	7c3b      	ldrb	r3, [r7, #16]
 800c618:	3303      	adds	r3, #3
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	5cd1      	ldrb	r1, [r2, r3]
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	3303      	adds	r3, #3
 800c622:	7cba      	ldrb	r2, [r7, #18]
 800c624:	404a      	eors	r2, r1
 800c626:	b2d1      	uxtb	r1, r2
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
 800c62e:	3304      	adds	r3, #4
 800c630:	75fb      	strb	r3, [r7, #23]
 800c632:	7dfa      	ldrb	r2, [r7, #23]
 800c634:	7c7b      	ldrb	r3, [r7, #17]
 800c636:	429a      	cmp	r2, r3
 800c638:	f4ff af67 	bcc.w	800c50a <lorawan_aes_set_key+0x7a>
    }
    return 0;
 800c63c:	2300      	movs	r3, #0
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3718      	adds	r7, #24
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}
 800c646:	bf00      	nop
 800c648:	0801d1f0 	.word	0x0801d1f0

0800c64c <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b08a      	sub	sp, #40	; 0x28
 800c650:	af00      	add	r7, sp, #0
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d038      	beq.n	800c6d4 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	f107 0314 	add.w	r3, r7, #20
 800c668:	68f9      	ldr	r1, [r7, #12]
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff fc07 	bl	800be7e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c670:	2301      	movs	r3, #1
 800c672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c676:	e014      	b.n	800c6a2 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c678:	f107 0314 	add.w	r3, r7, #20
 800c67c:	4618      	mov	r0, r3
 800c67e:	f7ff fd5d 	bl	800c13c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c688:	0112      	lsls	r2, r2, #4
 800c68a:	441a      	add	r2, r3
 800c68c:	f107 0314 	add.w	r3, r7, #20
 800c690:	4611      	mov	r1, r2
 800c692:	4618      	mov	r0, r3
 800c694:	f7ff fcab 	bl	800bfee <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c69c:	3301      	adds	r3, #1
 800c69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800c6a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d3e3      	bcc.n	800c678 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c6b0:	f107 0314 	add.w	r3, r7, #20
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff fca7 	bl	800c008 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c6c0:	0112      	lsls	r2, r2, #4
 800c6c2:	441a      	add	r2, r3
 800c6c4:	f107 0314 	add.w	r3, r7, #20
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	68b8      	ldr	r0, [r7, #8]
 800c6cc:	f7ff fbd7 	bl	800be7e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e000      	b.n	800c6d6 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800c6d4:	23ff      	movs	r3, #255	; 0xff
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3728      	adds	r7, #40	; 0x28
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800c6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6e2:	b09d      	sub	sp, #116	; 0x74
 800c6e4:	af10      	add	r7, sp, #64	; 0x40
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800c6ec:	2306      	movs	r3, #6
 800c6ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800c6f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c6f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6fa:	4611      	mov	r1, r2
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 f9af 	bl	800ca60 <SecureElementGetKeyByID>
 800c702:	4603      	mov	r3, r0
 800c704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800c708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f040 80b0 	bne.w	800c872 <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800c712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c716:	2b00      	cmp	r3, #0
 800c718:	d106      	bne.n	800c728 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800c71a:	4b58      	ldr	r3, [pc, #352]	; (800c87c <PrintKey+0x19c>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	2100      	movs	r1, #0
 800c720:	2002      	movs	r0, #2
 800c722:	f00f fc69 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c726:	e056      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800c728:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d106      	bne.n	800c73e <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800c730:	4b53      	ldr	r3, [pc, #332]	; (800c880 <PrintKey+0x1a0>)
 800c732:	2200      	movs	r2, #0
 800c734:	2100      	movs	r1, #0
 800c736:	2002      	movs	r0, #2
 800c738:	f00f fc5e 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c73c:	e04b      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800c73e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c742:	2b03      	cmp	r3, #3
 800c744:	d106      	bne.n	800c754 <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800c746:	4b4f      	ldr	r3, [pc, #316]	; (800c884 <PrintKey+0x1a4>)
 800c748:	2200      	movs	r2, #0
 800c74a:	2100      	movs	r1, #0
 800c74c:	2002      	movs	r0, #2
 800c74e:	f00f fc53 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c752:	e040      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800c754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d106      	bne.n	800c76a <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800c75c:	4b4a      	ldr	r3, [pc, #296]	; (800c888 <PrintKey+0x1a8>)
 800c75e:	2200      	movs	r2, #0
 800c760:	2100      	movs	r1, #0
 800c762:	2002      	movs	r0, #2
 800c764:	f00f fc48 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c768:	e035      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800c76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c76e:	2b04      	cmp	r3, #4
 800c770:	d106      	bne.n	800c780 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800c772:	4b46      	ldr	r3, [pc, #280]	; (800c88c <PrintKey+0x1ac>)
 800c774:	2200      	movs	r2, #0
 800c776:	2100      	movs	r1, #0
 800c778:	2002      	movs	r0, #2
 800c77a:	f00f fc3d 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c77e:	e02a      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800c780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c784:	2b7f      	cmp	r3, #127	; 0x7f
 800c786:	d106      	bne.n	800c796 <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800c788:	4b41      	ldr	r3, [pc, #260]	; (800c890 <PrintKey+0x1b0>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	2100      	movs	r1, #0
 800c78e:	2002      	movs	r0, #2
 800c790:	f00f fc32 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c794:	e01f      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800c796:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c79a:	2b80      	cmp	r3, #128	; 0x80
 800c79c:	d106      	bne.n	800c7ac <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800c79e:	4b3d      	ldr	r3, [pc, #244]	; (800c894 <PrintKey+0x1b4>)
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	2002      	movs	r0, #2
 800c7a6:	f00f fc27 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c7aa:	e014      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800c7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b0:	2b81      	cmp	r3, #129	; 0x81
 800c7b2:	d106      	bne.n	800c7c2 <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800c7b4:	4b38      	ldr	r3, [pc, #224]	; (800c898 <PrintKey+0x1b8>)
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	2002      	movs	r0, #2
 800c7bc:	f00f fc1c 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 800c7c0:	e009      	b.n	800c7d6 <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800c7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c6:	2b82      	cmp	r3, #130	; 0x82
 800c7c8:	d105      	bne.n	800c7d6 <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800c7ca:	4b34      	ldr	r3, [pc, #208]	; (800c89c <PrintKey+0x1bc>)
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2100      	movs	r1, #0
 800c7d0:	2002      	movs	r0, #2
 800c7d2:	f00f fc11 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800c7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d8:	785b      	ldrb	r3, [r3, #1]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7de:	789b      	ldrb	r3, [r3, #2]
 800c7e0:	461c      	mov	r4, r3
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	78db      	ldrb	r3, [r3, #3]
 800c7e6:	461d      	mov	r5, r3
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	791b      	ldrb	r3, [r3, #4]
 800c7ec:	461e      	mov	r6, r3
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	795b      	ldrb	r3, [r3, #5]
 800c7f2:	623b      	str	r3, [r7, #32]
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	799b      	ldrb	r3, [r3, #6]
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	79db      	ldrb	r3, [r3, #7]
 800c7fe:	61bb      	str	r3, [r7, #24]
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	7a1b      	ldrb	r3, [r3, #8]
 800c804:	617b      	str	r3, [r7, #20]
 800c806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c808:	7a5b      	ldrb	r3, [r3, #9]
 800c80a:	613b      	str	r3, [r7, #16]
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	7a9b      	ldrb	r3, [r3, #10]
 800c810:	60fb      	str	r3, [r7, #12]
 800c812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c814:	7adb      	ldrb	r3, [r3, #11]
 800c816:	60bb      	str	r3, [r7, #8]
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	7b1b      	ldrb	r3, [r3, #12]
 800c81c:	607b      	str	r3, [r7, #4]
 800c81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c820:	7b5b      	ldrb	r3, [r3, #13]
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c826:	7b9b      	ldrb	r3, [r3, #14]
 800c828:	4619      	mov	r1, r3
 800c82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82c:	7bdb      	ldrb	r3, [r3, #15]
 800c82e:	461a      	mov	r2, r3
 800c830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c832:	7c1b      	ldrb	r3, [r3, #16]
 800c834:	930f      	str	r3, [sp, #60]	; 0x3c
 800c836:	920e      	str	r2, [sp, #56]	; 0x38
 800c838:	910d      	str	r1, [sp, #52]	; 0x34
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	920c      	str	r2, [sp, #48]	; 0x30
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	920b      	str	r2, [sp, #44]	; 0x2c
 800c842:	68ba      	ldr	r2, [r7, #8]
 800c844:	920a      	str	r2, [sp, #40]	; 0x28
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	9209      	str	r2, [sp, #36]	; 0x24
 800c84a:	693a      	ldr	r2, [r7, #16]
 800c84c:	9208      	str	r2, [sp, #32]
 800c84e:	697a      	ldr	r2, [r7, #20]
 800c850:	9207      	str	r2, [sp, #28]
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	9206      	str	r2, [sp, #24]
 800c856:	69fa      	ldr	r2, [r7, #28]
 800c858:	9205      	str	r2, [sp, #20]
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	9304      	str	r3, [sp, #16]
 800c85e:	9603      	str	r6, [sp, #12]
 800c860:	9502      	str	r5, [sp, #8]
 800c862:	9401      	str	r4, [sp, #4]
 800c864:	9000      	str	r0, [sp, #0]
 800c866:	4b0e      	ldr	r3, [pc, #56]	; (800c8a0 <PrintKey+0x1c0>)
 800c868:	2200      	movs	r2, #0
 800c86a:	2100      	movs	r1, #0
 800c86c:	2002      	movs	r0, #2
 800c86e:	f00f fbc3 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800c872:	bf00      	nop
 800c874:	3734      	adds	r7, #52	; 0x34
 800c876:	46bd      	mov	sp, r7
 800c878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c87a:	bf00      	nop
 800c87c:	0801cc44 	.word	0x0801cc44
 800c880:	0801cc5c 	.word	0x0801cc5c
 800c884:	0801cc74 	.word	0x0801cc74
 800c888:	0801cc8c 	.word	0x0801cc8c
 800c88c:	0801cca4 	.word	0x0801cca4
 800c890:	0801ccbc 	.word	0x0801ccbc
 800c894:	0801ccd4 	.word	0x0801ccd4
 800c898:	0801ccec 	.word	0x0801ccec
 800c89c:	0801cd04 	.word	0x0801cd04
 800c8a0:	0801cd1c 	.word	0x0801cd1c

0800c8a4 <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	6039      	str	r1, [r7, #0]
 800c8ae:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	73fb      	strb	r3, [r7, #15]
 800c8b4:	e01a      	b.n	800c8ec <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800c8b6:	4b12      	ldr	r3, [pc, #72]	; (800c900 <GetKeyByID+0x5c>)
 800c8b8:	6819      	ldr	r1, [r3, #0]
 800c8ba:	7bfa      	ldrb	r2, [r7, #15]
 800c8bc:	4613      	mov	r3, r2
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	4413      	add	r3, r2
 800c8c2:	440b      	add	r3, r1
 800c8c4:	3310      	adds	r3, #16
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	79fa      	ldrb	r2, [r7, #7]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d10b      	bne.n	800c8e6 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800c8ce:	4b0c      	ldr	r3, [pc, #48]	; (800c900 <GetKeyByID+0x5c>)
 800c8d0:	6819      	ldr	r1, [r3, #0]
 800c8d2:	7bfa      	ldrb	r2, [r7, #15]
 800c8d4:	4613      	mov	r3, r2
 800c8d6:	011b      	lsls	r3, r3, #4
 800c8d8:	4413      	add	r3, r2
 800c8da:	3310      	adds	r3, #16
 800c8dc:	18ca      	adds	r2, r1, r3
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e006      	b.n	800c8f4 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800c8e6:	7bfb      	ldrb	r3, [r7, #15]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	73fb      	strb	r3, [r7, #15]
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	2b09      	cmp	r3, #9
 800c8f0:	d9e1      	bls.n	800c8b6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800c8f2:	2303      	movs	r3, #3
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop
 800c900:	20000674 	.word	0x20000674

0800c904 <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800c904:	b590      	push	{r4, r7, lr}
 800c906:	b0d1      	sub	sp, #324	; 0x144
 800c908:	af00      	add	r7, sp, #0
 800c90a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800c90e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800c912:	6020      	str	r0, [r4, #0]
 800c914:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800c918:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c91c:	6001      	str	r1, [r0, #0]
 800c91e:	4619      	mov	r1, r3
 800c920:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c924:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800c928:	801a      	strh	r2, [r3, #0]
 800c92a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c92e:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800c932:	460a      	mov	r2, r1
 800c934:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800c936:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c93a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <ComputeCmac+0x48>
 800c944:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d101      	bne.n	800c950 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800c94c:	2302      	movs	r3, #2
 800c94e:	e05c      	b.n	800ca0a <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800c950:	f107 0314 	add.w	r3, r7, #20
 800c954:	4618      	mov	r0, r3
 800c956:	f7fe ff1b 	bl	800b790 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800c95a:	f107 0210 	add.w	r2, r7, #16
 800c95e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c962:	f2a3 133b 	subw	r3, r3, #315	; 0x13b
 800c966:	781b      	ldrb	r3, [r3, #0]
 800c968:	4611      	mov	r1, r2
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7ff ff9a 	bl	800c8a4 <GetKeyByID>
 800c970:	4603      	mov	r3, r0
 800c972:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800c976:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d143      	bne.n	800ca06 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800c97e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	f107 0314 	add.w	r3, r7, #20
 800c98e:	4611      	mov	r1, r2
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe ff16 	bl	800b7c2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800c996:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c99a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d009      	beq.n	800c9b8 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800c9a4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c9a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c9ac:	f107 0014 	add.w	r0, r7, #20
 800c9b0:	2210      	movs	r2, #16
 800c9b2:	6819      	ldr	r1, [r3, #0]
 800c9b4:	f7fe ff14 	bl	800b7e0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800c9b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c9bc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800c9c0:	881a      	ldrh	r2, [r3, #0]
 800c9c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c9c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c9ca:	f107 0014 	add.w	r0, r7, #20
 800c9ce:	6819      	ldr	r1, [r3, #0]
 800c9d0:	f7fe ff06 	bl	800b7e0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800c9d4:	f107 0214 	add.w	r2, r7, #20
 800c9d8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800c9dc:	4611      	mov	r1, r2
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7fe ffc0 	bl	800b964 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c9e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800c9e8:	061a      	lsls	r2, r3, #24
 800c9ea:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800c9ee:	041b      	lsls	r3, r3, #16
 800c9f0:	431a      	orrs	r2, r3
 800c9f2:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800c9f6:	021b      	lsls	r3, r3, #8
 800c9f8:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800c9fa:	f897 212c 	ldrb.w	r2, [r7, #300]	; 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ca04:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800ca06:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd90      	pop	{r4, r7, pc}

0800ca14 <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b082      	sub	sp, #8
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d101      	bne.n	800ca28 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ca24:	2302      	movs	r3, #2
 800ca26:	e013      	b.n	800ca50 <SecureElementInit+0x3c>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800ca28:	4a0b      	ldr	r2, [pc, #44]	; (800ca58 <SecureElementInit+0x44>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800ca2e:	4b0a      	ldr	r3, [pc, #40]	; (800ca58 <SecureElementInit+0x44>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	22c0      	movs	r2, #192	; 0xc0
 800ca34:	4909      	ldr	r1, [pc, #36]	; (800ca5c <SecureElementInit+0x48>)
 800ca36:	4618      	mov	r0, r3
 800ca38:	f00b f8c7 	bl	8017bca <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED */
#endif /* LORAWAN_KMS */

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if( STATIC_DEVICE_EUI == 0 )
    if (seGetUniqueId != NULL)
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d005      	beq.n	800ca4e <SecureElementInit+0x3a>
    {
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
 800ca42:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <SecureElementInit+0x44>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	4610      	mov	r0, r2
 800ca4c:	4798      	blx	r3
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	20000674 	.word	0x20000674
 800ca5c:	0801d680 	.word	0x0801d680

0800ca60 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	6039      	str	r1, [r7, #0]
 800ca6a:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]
 800ca70:	e01a      	b.n	800caa8 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800ca72:	4b12      	ldr	r3, [pc, #72]	; (800cabc <SecureElementGetKeyByID+0x5c>)
 800ca74:	6819      	ldr	r1, [r3, #0]
 800ca76:	7bfa      	ldrb	r2, [r7, #15]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	011b      	lsls	r3, r3, #4
 800ca7c:	4413      	add	r3, r2
 800ca7e:	440b      	add	r3, r1
 800ca80:	3310      	adds	r3, #16
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d10b      	bne.n	800caa2 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800ca8a:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <SecureElementGetKeyByID+0x5c>)
 800ca8c:	6819      	ldr	r1, [r3, #0]
 800ca8e:	7bfa      	ldrb	r2, [r7, #15]
 800ca90:	4613      	mov	r3, r2
 800ca92:	011b      	lsls	r3, r3, #4
 800ca94:	4413      	add	r3, r2
 800ca96:	3310      	adds	r3, #16
 800ca98:	18ca      	adds	r2, r1, r3
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e006      	b.n	800cab0 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	3301      	adds	r3, #1
 800caa6:	73fb      	strb	r3, [r7, #15]
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b09      	cmp	r3, #9
 800caac:	d9e1      	bls.n	800ca72 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800caae:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bc80      	pop	{r7}
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	20000674 	.word	0x20000674

0800cac0 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800cac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cac2:	b08b      	sub	sp, #44	; 0x2c
 800cac4:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800cac6:	4b3f      	ldr	r3, [pc, #252]	; (800cbc4 <SecureElementPrintKeys+0x104>)
 800cac8:	2200      	movs	r2, #0
 800caca:	2100      	movs	r1, #0
 800cacc:	2002      	movs	r0, #2
 800cace:	f00f fa93 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800cad2:	2000      	movs	r0, #0
 800cad4:	f7ff fe04 	bl	800c6e0 <PrintKey>
    PrintKey(NWK_KEY);
 800cad8:	2001      	movs	r0, #1
 800cada:	f7ff fe01 	bl	800c6e0 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800cade:	4b3a      	ldr	r3, [pc, #232]	; (800cbc8 <SecureElementPrintKeys+0x108>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	2100      	movs	r1, #0
 800cae4:	2002      	movs	r0, #2
 800cae6:	f00f fa87 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800caea:	2003      	movs	r0, #3
 800caec:	f7ff fdf8 	bl	800c6e0 <PrintKey>
    PrintKey(NWK_S_KEY);
 800caf0:	2002      	movs	r0, #2
 800caf2:	f7ff fdf5 	bl	800c6e0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800caf6:	4b35      	ldr	r3, [pc, #212]	; (800cbcc <SecureElementPrintKeys+0x10c>)
 800caf8:	2200      	movs	r2, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	2002      	movs	r0, #2
 800cafe:	f00f fa7b 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cb02:	4b33      	ldr	r3, [pc, #204]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	4b31      	ldr	r3, [pc, #196]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	785b      	ldrb	r3, [r3, #1]
 800cb10:	4619      	mov	r1, r3
 800cb12:	4b2f      	ldr	r3, [pc, #188]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	789b      	ldrb	r3, [r3, #2]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	4b2d      	ldr	r3, [pc, #180]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	78db      	ldrb	r3, [r3, #3]
 800cb20:	461c      	mov	r4, r3
 800cb22:	4b2b      	ldr	r3, [pc, #172]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	791b      	ldrb	r3, [r3, #4]
 800cb28:	461d      	mov	r5, r3
 800cb2a:	4b29      	ldr	r3, [pc, #164]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	795b      	ldrb	r3, [r3, #5]
 800cb30:	461e      	mov	r6, r3
 800cb32:	4b27      	ldr	r3, [pc, #156]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	799b      	ldrb	r3, [r3, #6]
 800cb38:	607b      	str	r3, [r7, #4]
 800cb3a:	4b25      	ldr	r3, [pc, #148]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	79db      	ldrb	r3, [r3, #7]
 800cb40:	9307      	str	r3, [sp, #28]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	9306      	str	r3, [sp, #24]
 800cb46:	9605      	str	r6, [sp, #20]
 800cb48:	9504      	str	r5, [sp, #16]
 800cb4a:	9403      	str	r4, [sp, #12]
 800cb4c:	9002      	str	r0, [sp, #8]
 800cb4e:	9101      	str	r1, [sp, #4]
 800cb50:	9200      	str	r2, [sp, #0]
 800cb52:	4b20      	ldr	r3, [pc, #128]	; (800cbd4 <SecureElementPrintKeys+0x114>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	2100      	movs	r1, #0
 800cb58:	2002      	movs	r0, #2
 800cb5a:	f00f fa4d 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800cb5e:	4b1c      	ldr	r3, [pc, #112]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	7a1b      	ldrb	r3, [r3, #8]
 800cb64:	461a      	mov	r2, r3
 800cb66:	4b1a      	ldr	r3, [pc, #104]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	7a5b      	ldrb	r3, [r3, #9]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	4b18      	ldr	r3, [pc, #96]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	7a9b      	ldrb	r3, [r3, #10]
 800cb74:	4618      	mov	r0, r3
 800cb76:	4b16      	ldr	r3, [pc, #88]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	7adb      	ldrb	r3, [r3, #11]
 800cb7c:	461c      	mov	r4, r3
 800cb7e:	4b14      	ldr	r3, [pc, #80]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	7b1b      	ldrb	r3, [r3, #12]
 800cb84:	461d      	mov	r5, r3
 800cb86:	4b12      	ldr	r3, [pc, #72]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	7b5b      	ldrb	r3, [r3, #13]
 800cb8c:	461e      	mov	r6, r3
 800cb8e:	4b10      	ldr	r3, [pc, #64]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	7b9b      	ldrb	r3, [r3, #14]
 800cb94:	607b      	str	r3, [r7, #4]
 800cb96:	4b0e      	ldr	r3, [pc, #56]	; (800cbd0 <SecureElementPrintKeys+0x110>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	7bdb      	ldrb	r3, [r3, #15]
 800cb9c:	9307      	str	r3, [sp, #28]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	9306      	str	r3, [sp, #24]
 800cba2:	9605      	str	r6, [sp, #20]
 800cba4:	9504      	str	r5, [sp, #16]
 800cba6:	9403      	str	r4, [sp, #12]
 800cba8:	9002      	str	r0, [sp, #8]
 800cbaa:	9101      	str	r1, [sp, #4]
 800cbac:	9200      	str	r2, [sp, #0]
 800cbae:	4b0a      	ldr	r3, [pc, #40]	; (800cbd8 <SecureElementPrintKeys+0x118>)
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	2100      	movs	r1, #0
 800cbb4:	2002      	movs	r0, #2
 800cbb6:	f00f fa1f 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	370c      	adds	r7, #12
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbc4:	0801cd70 	.word	0x0801cd70
 800cbc8:	0801cd88 	.word	0x0801cd88
 800cbcc:	0801cda0 	.word	0x0801cda0
 800cbd0:	20000674 	.word	0x20000674
 800cbd4:	0801cdb8 	.word	0x0801cdb8
 800cbd8:	0801cdf8 	.word	0x0801cdf8

0800cbdc <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800cbe0:	2004      	movs	r0, #4
 800cbe2:	f7ff fd7d 	bl	800c6e0 <PrintKey>
    PrintKey(MC_KE_KEY);
 800cbe6:	207f      	movs	r0, #127	; 0x7f
 800cbe8:	f7ff fd7a 	bl	800c6e0 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800cbec:	2002      	movs	r0, #2
 800cbee:	f7ff fd77 	bl	800c6e0 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800cbf2:	2003      	movs	r0, #3
 800cbf4:	f7ff fd74 	bl	800c6e0 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800cbf8:	2300      	movs	r3, #0
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	6039      	str	r1, [r7, #0]
 800cc0a:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d101      	bne.n	800cc16 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cc12:	2302      	movs	r3, #2
 800cc14:	e04c      	b.n	800ccb0 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cc16:	2300      	movs	r3, #0
 800cc18:	77fb      	strb	r3, [r7, #31]
 800cc1a:	e045      	b.n	800cca8 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800cc1c:	4b26      	ldr	r3, [pc, #152]	; (800ccb8 <SecureElementSetKey+0xb8>)
 800cc1e:	6819      	ldr	r1, [r3, #0]
 800cc20:	7ffa      	ldrb	r2, [r7, #31]
 800cc22:	4613      	mov	r3, r2
 800cc24:	011b      	lsls	r3, r3, #4
 800cc26:	4413      	add	r3, r2
 800cc28:	440b      	add	r3, r1
 800cc2a:	3310      	adds	r3, #16
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	79fa      	ldrb	r2, [r7, #7]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d136      	bne.n	800cca2 <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800cc34:	79fb      	ldrb	r3, [r7, #7]
 800cc36:	2b80      	cmp	r3, #128	; 0x80
 800cc38:	d123      	bne.n	800cc82 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800cc3a:	2306      	movs	r3, #6
 800cc3c:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800cc3e:	2300      	movs	r3, #0
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	f107 0310 	add.w	r3, r7, #16
 800cc46:	2200      	movs	r2, #0
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	605a      	str	r2, [r3, #4]
 800cc4c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800cc4e:	f107 030c 	add.w	r3, r7, #12
 800cc52:	227f      	movs	r2, #127	; 0x7f
 800cc54:	2110      	movs	r1, #16
 800cc56:	6838      	ldr	r0, [r7, #0]
 800cc58:	f000 f87d 	bl	800cd56 <SecureElementAesEncrypt>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800cc60:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <SecureElementSetKey+0xb8>)
 800cc62:	6819      	ldr	r1, [r3, #0]
 800cc64:	7ffa      	ldrb	r2, [r7, #31]
 800cc66:	4613      	mov	r3, r2
 800cc68:	011b      	lsls	r3, r3, #4
 800cc6a:	4413      	add	r3, r2
 800cc6c:	3310      	adds	r3, #16
 800cc6e:	440b      	add	r3, r1
 800cc70:	3301      	adds	r3, #1
 800cc72:	f107 010c 	add.w	r1, r7, #12
 800cc76:	2210      	movs	r2, #16
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f00a ffa6 	bl	8017bca <memcpy1>
                return retval;
 800cc7e:	7fbb      	ldrb	r3, [r7, #30]
 800cc80:	e016      	b.n	800ccb0 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800cc82:	4b0d      	ldr	r3, [pc, #52]	; (800ccb8 <SecureElementSetKey+0xb8>)
 800cc84:	6819      	ldr	r1, [r3, #0]
 800cc86:	7ffa      	ldrb	r2, [r7, #31]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	011b      	lsls	r3, r3, #4
 800cc8c:	4413      	add	r3, r2
 800cc8e:	3310      	adds	r3, #16
 800cc90:	440b      	add	r3, r1
 800cc92:	3301      	adds	r3, #1
 800cc94:	2210      	movs	r2, #16
 800cc96:	6839      	ldr	r1, [r7, #0]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f00a ff96 	bl	8017bca <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	e006      	b.n	800ccb0 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cca2:	7ffb      	ldrb	r3, [r7, #31]
 800cca4:	3301      	adds	r3, #1
 800cca6:	77fb      	strb	r3, [r7, #31]
 800cca8:	7ffb      	ldrb	r3, [r7, #31]
 800ccaa:	2b09      	cmp	r3, #9
 800ccac:	d9b6      	bls.n	800cc1c <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ccae:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3720      	adds	r7, #32
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20000674 	.word	0x20000674

0800ccbc <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b086      	sub	sp, #24
 800ccc0:	af02      	add	r7, sp, #8
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	461a      	mov	r2, r3
 800ccca:	460b      	mov	r3, r1
 800cccc:	80fb      	strh	r3, [r7, #6]
 800ccce:	4613      	mov	r3, r2
 800ccd0:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800ccd2:	797b      	ldrb	r3, [r7, #5]
 800ccd4:	2b7e      	cmp	r3, #126	; 0x7e
 800ccd6:	d901      	bls.n	800ccdc <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	e009      	b.n	800ccf0 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800ccdc:	7979      	ldrb	r1, [r7, #5]
 800ccde:	88fa      	ldrh	r2, [r7, #6]
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	9300      	str	r3, [sp, #0]
 800cce4:	460b      	mov	r3, r1
 800cce6:	68b9      	ldr	r1, [r7, #8]
 800cce8:	68f8      	ldr	r0, [r7, #12]
 800ccea:	f7ff fe0b 	bl	800c904 <ComputeCmac>
 800ccee:	4603      	mov	r3, r0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	607a      	str	r2, [r7, #4]
 800cd02:	461a      	mov	r2, r3
 800cd04:	460b      	mov	r3, r1
 800cd06:	817b      	strh	r3, [r7, #10]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d101      	bne.n	800cd16 <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd12:	2302      	movs	r3, #2
 800cd14:	e01b      	b.n	800cd4e <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800cd16:	2306      	movs	r3, #6
 800cd18:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800cd1e:	7a79      	ldrb	r1, [r7, #9]
 800cd20:	897a      	ldrh	r2, [r7, #10]
 800cd22:	f107 0310 	add.w	r3, r7, #16
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	68f9      	ldr	r1, [r7, #12]
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	f7ff fde9 	bl	800c904 <ComputeCmac>
 800cd32:	4603      	mov	r3, r0
 800cd34:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800cd36:	7dfb      	ldrb	r3, [r7, #23]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d001      	beq.n	800cd40 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
 800cd3e:	e006      	b.n	800cd4e <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d001      	beq.n	800cd4c <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800cd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b0c2      	sub	sp, #264	; 0x108
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	60f8      	str	r0, [r7, #12]
 800cd5e:	4608      	mov	r0, r1
 800cd60:	4611      	mov	r1, r2
 800cd62:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800cd66:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800cd6a:	6013      	str	r3, [r2, #0]
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	817b      	strh	r3, [r7, #10]
 800cd70:	460b      	mov	r3, r1
 800cd72:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d006      	beq.n	800cd88 <SecureElementAesEncrypt+0x32>
 800cd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cd88:	2302      	movs	r3, #2
 800cd8a:	e046      	b.n	800ce1a <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800cd8c:	897b      	ldrh	r3, [r7, #10]
 800cd8e:	f003 030f 	and.w	r3, r3, #15
 800cd92:	b29b      	uxth	r3, r3
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d001      	beq.n	800cd9c <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800cd98:	2305      	movs	r3, #5
 800cd9a:	e03e      	b.n	800ce1a <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800cd9c:	f107 0314 	add.w	r3, r7, #20
 800cda0:	22f0      	movs	r2, #240	; 0xf0
 800cda2:	2100      	movs	r1, #0
 800cda4:	4618      	mov	r0, r3
 800cda6:	f00a ff4b 	bl	8017c40 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800cdaa:	f107 0210 	add.w	r2, r7, #16
 800cdae:	7a7b      	ldrb	r3, [r7, #9]
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7ff fd76 	bl	800c8a4 <GetKeyByID>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cdbe:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d127      	bne.n	800ce16 <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3301      	adds	r3, #1
 800cdca:	f107 0214 	add.w	r2, r7, #20
 800cdce:	2110      	movs	r1, #16
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fb5d 	bl	800c490 <lorawan_aes_set_key>

        uint8_t block = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800cddc:	e018      	b.n	800ce10 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800cdde:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	18d0      	adds	r0, r2, r3
 800cde6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800cdea:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800cdee:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800cdf2:	6812      	ldr	r2, [r2, #0]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	f107 0214 	add.w	r2, r7, #20
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	f7ff fc26 	bl	800c64c <lorawan_aes_encrypt>
            block = block + 16;
 800ce00:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800ce04:	3310      	adds	r3, #16
 800ce06:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800ce0a:	897b      	ldrh	r3, [r7, #10]
 800ce0c:	3b10      	subs	r3, #16
 800ce0e:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800ce10:	897b      	ldrh	r3, [r7, #10]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1e3      	bne.n	800cdde <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800ce16:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b088      	sub	sp, #32
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
 800ce30:	4613      	mov	r3, r2
 800ce32:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d101      	bne.n	800ce3e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ce3a:	2302      	movs	r3, #2
 800ce3c:	e02e      	b.n	800ce9c <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800ce3e:	2306      	movs	r3, #6
 800ce40:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800ce42:	78bb      	ldrb	r3, [r7, #2]
 800ce44:	2b7f      	cmp	r3, #127	; 0x7f
 800ce46:	d104      	bne.n	800ce52 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	2b04      	cmp	r3, #4
 800ce4c:	d001      	beq.n	800ce52 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	e024      	b.n	800ce9c <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]
 800ce56:	f107 0310 	add.w	r3, r7, #16
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]
 800ce5e:	605a      	str	r2, [r3, #4]
 800ce60:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800ce62:	f107 030c 	add.w	r3, r7, #12
 800ce66:	78fa      	ldrb	r2, [r7, #3]
 800ce68:	2110      	movs	r1, #16
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7ff ff73 	bl	800cd56 <SecureElementAesEncrypt>
 800ce70:	4603      	mov	r3, r0
 800ce72:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ce74:	7ffb      	ldrb	r3, [r7, #31]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d001      	beq.n	800ce7e <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800ce7a:	7ffb      	ldrb	r3, [r7, #31]
 800ce7c:	e00e      	b.n	800ce9c <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800ce7e:	f107 020c 	add.w	r2, r7, #12
 800ce82:	78bb      	ldrb	r3, [r7, #2]
 800ce84:	4611      	mov	r1, r2
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff feba 	bl	800cc00 <SecureElementSetKey>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800ce90:	7ffb      	ldrb	r3, [r7, #31]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d001      	beq.n	800ce9a <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800ce96:	7ffb      	ldrb	r3, [r7, #31]
 800ce98:	e000      	b.n	800ce9c <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800ce9a:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3720      	adds	r7, #32
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b086      	sub	sp, #24
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60b9      	str	r1, [r7, #8]
 800ceac:	607b      	str	r3, [r7, #4]
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73fb      	strb	r3, [r7, #15]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d005      	beq.n	800cec8 <SecureElementProcessJoinAccept+0x24>
 800cebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <SecureElementProcessJoinAccept+0x24>
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d101      	bne.n	800cecc <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cec8:	2302      	movs	r3, #2
 800ceca:	e064      	b.n	800cf96 <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800cecc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ced0:	2b21      	cmp	r3, #33	; 0x21
 800ced2:	d901      	bls.n	800ced8 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800ced4:	2305      	movs	r3, #5
 800ced6:	e05e      	b.n	800cf96 <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800ced8:	2301      	movs	r3, #1
 800ceda:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800cedc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	461a      	mov	r2, r3
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cee8:	f00a fe6f 	bl	8017bca <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	1c58      	adds	r0, r3, #1
 800cef0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	3b01      	subs	r3, #1
 800cef8:	b299      	uxth	r1, r3
 800cefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefc:	3301      	adds	r3, #1
 800cefe:	7dfa      	ldrb	r2, [r7, #23]
 800cf00:	f7ff ff29 	bl	800cd56 <SecureElementAesEncrypt>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800cf0a:	2307      	movs	r3, #7
 800cf0c:	e043      	b.n	800cf96 <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800cf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf10:	330b      	adds	r3, #11
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	09db      	lsrs	r3, r3, #7
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800cf20:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf24:	3b04      	subs	r3, #4
 800cf26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf28:	4413      	add	r3, r2
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800cf2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf32:	3b03      	subs	r3, #3
 800cf34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf36:	4413      	add	r3, r2
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	021b      	lsls	r3, r3, #8
 800cf3c:	693a      	ldr	r2, [r7, #16]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800cf42:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf46:	3b02      	subs	r3, #2
 800cf48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf4a:	4413      	add	r3, r2
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	041b      	lsls	r3, r3, #16
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	4313      	orrs	r3, r2
 800cf54:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800cf56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf5e:	4413      	add	r3, r2
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	061b      	lsls	r3, r3, #24
 800cf64:	693a      	ldr	r2, [r7, #16]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800cf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d10e      	bne.n	800cf90 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800cf72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	3b04      	subs	r3, #4
 800cf7a:	b299      	uxth	r1, r3
 800cf7c:	2301      	movs	r3, #1
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf82:	f7ff feb9 	bl	800ccf8 <SecureElementVerifyAesCmac>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d003      	beq.n	800cf94 <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	e002      	b.n	800cf96 <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800cf90:	2304      	movs	r3, #4
 800cf92:	e000      	b.n	800cf96 <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
	...

0800cfa0 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e007      	b.n	800cfc2 <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800cfb2:	4b06      	ldr	r3, [pc, #24]	; (800cfcc <SecureElementSetDevEui+0x2c>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2208      	movs	r2, #8
 800cfb8:	6879      	ldr	r1, [r7, #4]
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f00a fe05 	bl	8017bca <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20000674 	.word	0x20000674

0800cfd0 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800cfd4:	4b02      	ldr	r3, [pc, #8]	; (800cfe0 <SecureElementGetDevEui+0x10>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bc80      	pop	{r7}
 800cfde:	4770      	bx	lr
 800cfe0:	20000674 	.word	0x20000674

0800cfe4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d101      	bne.n	800cff6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cff2:	2302      	movs	r3, #2
 800cff4:	e008      	b.n	800d008 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800cff6:	4b06      	ldr	r3, [pc, #24]	; (800d010 <SecureElementSetJoinEui+0x2c>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	3308      	adds	r3, #8
 800cffc:	2208      	movs	r2, #8
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	4618      	mov	r0, r3
 800d002:	f00a fde2 	bl	8017bca <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20000674 	.word	0x20000674

0800d014 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d014:	b480      	push	{r7}
 800d016:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800d018:	4b03      	ldr	r3, [pc, #12]	; (800d028 <SecureElementGetJoinEui+0x14>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3308      	adds	r3, #8
}
 800d01e:	4618      	mov	r0, r3
 800d020:	46bd      	mov	sp, r7
 800d022:	bc80      	pop	{r7}
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000674 	.word	0x20000674

0800d02c <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800d036:	4a23      	ldr	r2, [pc, #140]	; (800d0c4 <LmHandlerInit+0x98>)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d03c:	4b22      	ldr	r3, [pc, #136]	; (800d0c8 <LmHandlerInit+0x9c>)
 800d03e:	4a23      	ldr	r2, [pc, #140]	; (800d0cc <LmHandlerInit+0xa0>)
 800d040:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d042:	4b21      	ldr	r3, [pc, #132]	; (800d0c8 <LmHandlerInit+0x9c>)
 800d044:	4a22      	ldr	r2, [pc, #136]	; (800d0d0 <LmHandlerInit+0xa4>)
 800d046:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d048:	4b1f      	ldr	r3, [pc, #124]	; (800d0c8 <LmHandlerInit+0x9c>)
 800d04a:	4a22      	ldr	r2, [pc, #136]	; (800d0d4 <LmHandlerInit+0xa8>)
 800d04c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d04e:	4b1e      	ldr	r3, [pc, #120]	; (800d0c8 <LmHandlerInit+0x9c>)
 800d050:	4a21      	ldr	r2, [pc, #132]	; (800d0d8 <LmHandlerInit+0xac>)
 800d052:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d054:	4b1b      	ldr	r3, [pc, #108]	; (800d0c4 <LmHandlerInit+0x98>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a20      	ldr	r2, [pc, #128]	; (800d0dc <LmHandlerInit+0xb0>)
 800d05c:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d05e:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <LmHandlerInit+0x98>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	4a1d      	ldr	r2, [pc, #116]	; (800d0dc <LmHandlerInit+0xb0>)
 800d066:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d068:	4b16      	ldr	r3, [pc, #88]	; (800d0c4 <LmHandlerInit+0x98>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	4a1b      	ldr	r2, [pc, #108]	; (800d0dc <LmHandlerInit+0xb0>)
 800d070:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d072:	4b1a      	ldr	r3, [pc, #104]	; (800d0dc <LmHandlerInit+0xb0>)
 800d074:	4a1a      	ldr	r2, [pc, #104]	; (800d0e0 <LmHandlerInit+0xb4>)
 800d076:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d078:	4b12      	ldr	r3, [pc, #72]	; (800d0c4 <LmHandlerInit+0x98>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	4a17      	ldr	r2, [pc, #92]	; (800d0dc <LmHandlerInit+0xb0>)
 800d080:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d082:	4a18      	ldr	r2, [pc, #96]	; (800d0e4 <LmHandlerInit+0xb8>)
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d088:	4b0e      	ldr	r3, [pc, #56]	; (800d0c4 <LmHandlerInit+0x98>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08e:	4a15      	ldr	r2, [pc, #84]	; (800d0e4 <LmHandlerInit+0xb8>)
 800d090:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800d092:	4b0c      	ldr	r3, [pc, #48]	; (800d0c4 <LmHandlerInit+0x98>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d098:	4a12      	ldr	r2, [pc, #72]	; (800d0e4 <LmHandlerInit+0xb8>)
 800d09a:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <LmHandlerInit+0x98>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0a2:	4a10      	ldr	r2, [pc, #64]	; (800d0e4 <LmHandlerInit+0xb8>)
 800d0a4:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800d0a6:	490f      	ldr	r1, [pc, #60]	; (800d0e4 <LmHandlerInit+0xb8>)
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	f000 fd87 	bl	800dbbc <LmHandlerPackageRegister>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d0b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d0b8:	e000      	b.n	800d0bc <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	200006b0 	.word	0x200006b0
 800d0c8:	200006b4 	.word	0x200006b4
 800d0cc:	0800d8c9 	.word	0x0800d8c9
 800d0d0:	0800d931 	.word	0x0800d931
 800d0d4:	0800d9fd 	.word	0x0800d9fd
 800d0d8:	0800db15 	.word	0x0800db15
 800d0dc:	200006c4 	.word	0x200006c4
 800d0e0:	0800df91 	.word	0x0800df91
 800d0e4:	20000678 	.word	0x20000678

0800d0e8 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b094      	sub	sp, #80	; 0x50
 800d0ec:	af04      	add	r7, sp, #16
 800d0ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800d0f0:	2214      	movs	r2, #20
 800d0f2:	6879      	ldr	r1, [r7, #4]
 800d0f4:	4890      	ldr	r0, [pc, #576]	; (800d338 <LmHandlerConfigure+0x250>)
 800d0f6:	f00e f837 	bl	801b168 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800d0fa:	4b90      	ldr	r3, [pc, #576]	; (800d33c <LmHandlerConfigure+0x254>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800d100:	f7fe fb04 	bl	800b70c <LoraInfo_GetPtr>
 800d104:	63f8      	str	r0, [r7, #60]	; 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800d106:	4b8c      	ldr	r3, [pc, #560]	; (800d338 <LmHandlerConfigure+0x250>)
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	461a      	mov	r2, r3
 800d10c:	2301      	movs	r3, #1
 800d10e:	4093      	lsls	r3, r2
 800d110:	461a      	mov	r2, r3
 800d112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	4013      	ands	r3, r2
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d106      	bne.n	800d12a <LmHandlerConfigure+0x42>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800d11c:	4b88      	ldr	r3, [pc, #544]	; (800d340 <LmHandlerConfigure+0x258>)
 800d11e:	2201      	movs	r2, #1
 800d120:	2100      	movs	r1, #0
 800d122:	2000      	movs	r0, #0
 800d124:	f00e ff68 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800d128:	e7fe      	b.n	800d128 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800d12a:	4b83      	ldr	r3, [pc, #524]	; (800d338 <LmHandlerConfigure+0x250>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	461a      	mov	r2, r3
 800d130:	4984      	ldr	r1, [pc, #528]	; (800d344 <LmHandlerConfigure+0x25c>)
 800d132:	4885      	ldr	r0, [pc, #532]	; (800d348 <LmHandlerConfigure+0x260>)
 800d134:	f004 fe8c 	bl	8011e50 <LoRaMacInitialization>
 800d138:	4603      	mov	r3, r0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d002      	beq.n	800d144 <LmHandlerConfigure+0x5c>
    {
        return LORAMAC_HANDLER_ERROR;
 800d13e:	f04f 33ff 	mov.w	r3, #4294967295
 800d142:	e0f5      	b.n	800d330 <LmHandlerConfigure+0x248>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800d144:	2327      	movs	r3, #39	; 0x27
 800d146:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d148:	f107 0318 	add.w	r3, r7, #24
 800d14c:	4618      	mov	r0, r3
 800d14e:	f005 fbcf 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d103      	bne.n	800d160 <LmHandlerConfigure+0x78>
    {
        CtxRestoreDone = true;
 800d158:	4b7c      	ldr	r3, [pc, #496]	; (800d34c <LmHandlerConfigure+0x264>)
 800d15a:	2201      	movs	r2, #1
 800d15c:	701a      	strb	r2, [r3, #0]
 800d15e:	e02a      	b.n	800d1b6 <LmHandlerConfigure+0xce>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d160:	2328      	movs	r3, #40	; 0x28
 800d162:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800d164:	4b7a      	ldr	r3, [pc, #488]	; (800d350 <LmHandlerConfigure+0x268>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00c      	beq.n	800d188 <LmHandlerConfigure+0xa0>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d16e:	f107 0318 	add.w	r3, r7, #24
 800d172:	4618      	mov	r0, r3
 800d174:	f005 fa16 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800d178:	4b75      	ldr	r3, [pc, #468]	; (800d350 <LmHandlerConfigure+0x268>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	f240 517c 	movw	r1, #1404	; 0x57c
 800d184:	4610      	mov	r0, r2
 800d186:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800d188:	2327      	movs	r3, #39	; 0x27
 800d18a:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d18c:	f107 0318 	add.w	r3, r7, #24
 800d190:	4618      	mov	r0, r3
 800d192:	f005 fbad 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10c      	bne.n	800d1b6 <LmHandlerConfigure+0xce>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d19c:	2301      	movs	r3, #1
 800d19e:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d1a0:	f107 0318 	add.w	r3, r7, #24
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f005 f9fd 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800d1aa:	7f3b      	ldrb	r3, [r7, #28]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <LmHandlerConfigure+0xce>
            {
                CtxRestoreDone = true;
 800d1b0:	4b66      	ldr	r3, [pc, #408]	; (800d34c <LmHandlerConfigure+0x264>)
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800d1b6:	4b65      	ldr	r3, [pc, #404]	; (800d34c <LmHandlerConfigure+0x264>)
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d02a      	beq.n	800d214 <LmHandlerConfigure+0x12c>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800d1be:	4b64      	ldr	r3, [pc, #400]	; (800d350 <LmHandlerConfigure+0x268>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	69db      	ldr	r3, [r3, #28]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d004      	beq.n	800d1d2 <LmHandlerConfigure+0xea>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800d1c8:	4b61      	ldr	r3, [pc, #388]	; (800d350 <LmHandlerConfigure+0x268>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	69db      	ldr	r3, [r3, #28]
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800d1d2:	2306      	movs	r3, #6
 800d1d4:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d1d6:	f107 0318 	add.w	r3, r7, #24
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f005 f9e2 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	4a5c      	ldr	r2, [pc, #368]	; (800d354 <LmHandlerConfigure+0x26c>)
 800d1e4:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800d1e6:	2327      	movs	r3, #39	; 0x27
 800d1e8:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d1ea:	f107 0318 	add.w	r3, r7, #24
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f005 f9d8 	bl	80125a4 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800d1f4:	69fb      	ldr	r3, [r7, #28]
 800d1f6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d1fa:	4b4f      	ldr	r3, [pc, #316]	; (800d338 <LmHandlerConfigure+0x250>)
 800d1fc:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 800d204:	4b4c      	ldr	r3, [pc, #304]	; (800d338 <LmHandlerConfigure+0x250>)
 800d206:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 800d20e:	4b4a      	ldr	r3, [pc, #296]	; (800d338 <LmHandlerConfigure+0x250>)
 800d210:	709a      	strb	r2, [r3, #2]
 800d212:	e019      	b.n	800d248 <LmHandlerConfigure+0x160>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800d214:	2305      	movs	r3, #5
 800d216:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d218:	2300      	movs	r3, #0
 800d21a:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d21c:	f107 0318 	add.w	r3, r7, #24
 800d220:	4618      	mov	r0, r3
 800d222:	f005 fb65 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 800d226:	4b4a      	ldr	r3, [pc, #296]	; (800d350 <LmHandlerConfigure+0x268>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	4798      	blx	r3
 800d22e:	4603      	mov	r3, r0
 800d230:	4a48      	ldr	r2, [pc, #288]	; (800d354 <LmHandlerConfigure+0x26c>)
 800d232:	6153      	str	r3, [r2, #20]
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800d234:	2306      	movs	r3, #6
 800d236:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800d238:	4b46      	ldr	r3, [pc, #280]	; (800d354 <LmHandlerConfigure+0x26c>)
 800d23a:	695b      	ldr	r3, [r3, #20]
 800d23c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800d23e:	f107 0318 	add.w	r3, r7, #24
 800d242:	4618      	mov	r0, r3
 800d244:	f005 fb54 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800d248:	2302      	movs	r3, #2
 800d24a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d24c:	f107 0318 	add.w	r3, r7, #24
 800d250:	4618      	mov	r0, r3
 800d252:	f005 f9a7 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	2208      	movs	r2, #8
 800d25a:	4619      	mov	r1, r3
 800d25c:	483d      	ldr	r0, [pc, #244]	; (800d354 <LmHandlerConfigure+0x26c>)
 800d25e:	f00a fcb4 	bl	8017bca <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800d262:	2303      	movs	r3, #3
 800d264:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d266:	f107 0318 	add.w	r3, r7, #24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f005 f99a 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	2208      	movs	r2, #8
 800d274:	4619      	mov	r1, r3
 800d276:	4838      	ldr	r0, [pc, #224]	; (800d358 <LmHandlerConfigure+0x270>)
 800d278:	f00a fca7 	bl	8017bca <memcpy1>

    SecureElementPrintKeys();
 800d27c:	f7ff fc20 	bl	800cac0 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800d280:	4b36      	ldr	r3, [pc, #216]	; (800d35c <LmHandlerConfigure+0x274>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	461a      	mov	r2, r3
 800d286:	4b36      	ldr	r3, [pc, #216]	; (800d360 <LmHandlerConfigure+0x278>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	4619      	mov	r1, r3
 800d28c:	4b35      	ldr	r3, [pc, #212]	; (800d364 <LmHandlerConfigure+0x27c>)
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	4618      	mov	r0, r3
 800d292:	4b35      	ldr	r3, [pc, #212]	; (800d368 <LmHandlerConfigure+0x280>)
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	9303      	str	r3, [sp, #12]
 800d298:	9002      	str	r0, [sp, #8]
 800d29a:	9101      	str	r1, [sp, #4]
 800d29c:	9200      	str	r2, [sp, #0]
 800d29e:	4b33      	ldr	r3, [pc, #204]	; (800d36c <LmHandlerConfigure+0x284>)
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	2002      	movs	r0, #2
 800d2a6:	f00e fea7 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d2aa:	230f      	movs	r3, #15
 800d2ac:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800d2b2:	f107 0318 	add.w	r3, r7, #24
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f005 fb1a 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d2bc:	2310      	movs	r3, #16
 800d2be:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d2c4:	f107 0318 	add.w	r3, r7, #24
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f005 fb11 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800d2ce:	2304      	movs	r3, #4
 800d2d0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d2d2:	4b19      	ldr	r3, [pc, #100]	; (800d338 <LmHandlerConfigure+0x250>)
 800d2d4:	789b      	ldrb	r3, [r3, #2]
 800d2d6:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d2d8:	f107 0318 	add.w	r3, r7, #24
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f005 fb07 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d2e2:	2338      	movs	r3, #56	; 0x38
 800d2e4:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d2e6:	4b14      	ldr	r3, [pc, #80]	; (800d338 <LmHandlerConfigure+0x250>)
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d2ec:	f107 0318 	add.w	r3, r7, #24
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f005 fafd 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d2f6:	230f      	movs	r3, #15
 800d2f8:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d2fa:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <LmHandlerConfigure+0x250>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	f107 0210 	add.w	r2, r7, #16
 800d302:	4611      	mov	r1, r2
 800d304:	4618      	mov	r0, r3
 800d306:	f008 f9b3 	bl	8015670 <RegionGetPhyParam>
 800d30a:	4603      	mov	r3, r0
 800d30c:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	bf14      	ite	ne
 800d314:	2301      	movne	r3, #1
 800d316:	2300      	moveq	r3, #0
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	4b07      	ldr	r3, [pc, #28]	; (800d338 <LmHandlerConfigure+0x250>)
 800d31c:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800d31e:	2014      	movs	r0, #20
 800d320:	f000 faba 	bl	800d898 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d324:	4b04      	ldr	r3, [pc, #16]	; (800d338 <LmHandlerConfigure+0x250>)
 800d326:	799b      	ldrb	r3, [r3, #6]
 800d328:	4618      	mov	r0, r3
 800d32a:	f006 f90f 	bl	801354c <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3740      	adds	r7, #64	; 0x40
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	2000069c 	.word	0x2000069c
 800d33c:	200006dc 	.word	0x200006dc
 800d340:	0801ce38 	.word	0x0801ce38
 800d344:	200006c4 	.word	0x200006c4
 800d348:	200006b4 	.word	0x200006b4
 800d34c:	200007d2 	.word	0x200007d2
 800d350:	200006b0 	.word	0x200006b0
 800d354:	20000090 	.word	0x20000090
 800d358:	20000098 	.word	0x20000098
 800d35c:	200000a7 	.word	0x200000a7
 800d360:	200000a6 	.word	0x200000a6
 800d364:	200000a5 	.word	0x200000a5
 800d368:	200000a4 	.word	0x200000a4
 800d36c:	0801ce84 	.word	0x0801ce84

0800d370 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800d376:	f002 fd49 	bl	800fe0c <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800d37a:	f000 fd3f 	bl	800ddfc <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800d37e:	f000 fd13 	bl	800dda8 <LmHandlerPackageIsTxPending>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d117      	bne.n	800d3b8 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800d388:	4b0d      	ldr	r3, [pc, #52]	; (800d3c0 <LmHandlerProcess+0x50>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d014      	beq.n	800d3ba <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800d390:	2300      	movs	r3, #0
 800d392:	703b      	strb	r3, [r7, #0]
 800d394:	2300      	movs	r3, #0
 800d396:	707b      	strb	r3, [r7, #1]
 800d398:	2300      	movs	r3, #0
 800d39a:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800d39c:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <LmHandlerProcess+0x54>)
 800d39e:	78d9      	ldrb	r1, [r3, #3]
 800d3a0:	463b      	mov	r3, r7
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 f8b7 	bl	800d518 <LmHandlerSend>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d104      	bne.n	800d3ba <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800d3b0:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <LmHandlerProcess+0x50>)
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	e000      	b.n	800d3ba <LmHandlerProcess+0x4a>
        return;
 800d3b8:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	200006dc 	.word	0x200006dc
 800d3c4:	2000069c 	.word	0x2000069c

0800d3c8 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800d3cc:	4b02      	ldr	r3, [pc, #8]	; (800d3d8 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bc80      	pop	{r7}
 800d3d6:	4770      	bx	lr
 800d3d8:	200006d8 	.word	0x200006d8

0800d3dc <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b090      	sub	sp, #64	; 0x40
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	460a      	mov	r2, r1
 800d3e6:	71fb      	strb	r3, [r7, #7]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800d3f2:	4b36      	ldr	r3, [pc, #216]	; (800d4cc <LmHandlerJoin+0xf0>)
 800d3f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d3f8:	b2db      	uxtb	r3, r3
 800d3fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800d3fe:	79fb      	ldrb	r3, [r7, #7]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d10b      	bne.n	800d41c <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d404:	2302      	movs	r3, #2
 800d406:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800d40a:	4b31      	ldr	r3, [pc, #196]	; (800d4d0 <LmHandlerJoin+0xf4>)
 800d40c:	2202      	movs	r2, #2
 800d40e:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800d410:	4a2f      	ldr	r2, [pc, #188]	; (800d4d0 <LmHandlerJoin+0xf4>)
 800d412:	79bb      	ldrb	r3, [r7, #6]
 800d414:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800d416:	f004 ffd3 	bl	80123c0 <LoRaMacStart>
 800d41a:	e041      	b.n	800d4a0 <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d41c:	2301      	movs	r3, #1
 800d41e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800d422:	4b2b      	ldr	r3, [pc, #172]	; (800d4d0 <LmHandlerJoin+0xf4>)
 800d424:	2201      	movs	r2, #1
 800d426:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800d428:	4b28      	ldr	r3, [pc, #160]	; (800d4cc <LmHandlerJoin+0xf0>)
 800d42a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d42e:	4b28      	ldr	r3, [pc, #160]	; (800d4d0 <LmHandlerJoin+0xf4>)
 800d430:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d432:	4b27      	ldr	r3, [pc, #156]	; (800d4d0 <LmHandlerJoin+0xf4>)
 800d434:	2200      	movs	r2, #0
 800d436:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800d438:	4a25      	ldr	r2, [pc, #148]	; (800d4d0 <LmHandlerJoin+0xf4>)
 800d43a:	79bb      	ldrb	r3, [r7, #6]
 800d43c:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800d43e:	4b25      	ldr	r3, [pc, #148]	; (800d4d4 <LmHandlerJoin+0xf8>)
 800d440:	781b      	ldrb	r3, [r3, #0]
 800d442:	f083 0301 	eor.w	r3, r3, #1
 800d446:	b2db      	uxtb	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d01e      	beq.n	800d48a <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800d44c:	231f      	movs	r3, #31
 800d44e:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800d450:	4b1e      	ldr	r3, [pc, #120]	; (800d4cc <LmHandlerJoin+0xf0>)
 800d452:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d456:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d458:	f107 0308 	add.w	r3, r7, #8
 800d45c:	4618      	mov	r0, r3
 800d45e:	f005 fa47 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800d462:	2320      	movs	r3, #32
 800d464:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800d466:	4b19      	ldr	r3, [pc, #100]	; (800d4cc <LmHandlerJoin+0xf0>)
 800d468:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d46c:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800d46e:	f107 0308 	add.w	r3, r7, #8
 800d472:	4618      	mov	r0, r3
 800d474:	f005 fa3c 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800d478:	2329      	movs	r3, #41	; 0x29
 800d47a:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800d47c:	4b16      	ldr	r3, [pc, #88]	; (800d4d8 <LmHandlerJoin+0xfc>)
 800d47e:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800d480:	f107 0308 	add.w	r3, r7, #8
 800d484:	4618      	mov	r0, r3
 800d486:	f005 fa33 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800d48a:	f004 ff99 	bl	80123c0 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d48e:	2301      	movs	r3, #1
 800d490:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800d492:	2301      	movs	r3, #1
 800d494:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d496:	f107 0308 	add.w	r3, r7, #8
 800d49a:	4618      	mov	r0, r3
 800d49c:	f005 fa28 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800d4a0:	4b0c      	ldr	r3, [pc, #48]	; (800d4d4 <LmHandlerJoin+0xf8>)
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	f083 0301 	eor.w	r3, r3, #1
 800d4a8:	b2db      	uxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d102      	bne.n	800d4b4 <LmHandlerJoin+0xd8>
 800d4ae:	79bb      	ldrb	r3, [r7, #6]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d004      	beq.n	800d4be <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800d4b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f005 fd89 	bl	8012fd0 <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c0:	4a06      	ldr	r2, [pc, #24]	; (800d4dc <LmHandlerJoin+0x100>)
 800d4c2:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800d4c4:	bf00      	nop
 800d4c6:	3740      	adds	r7, #64	; 0x40
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	2000069c 	.word	0x2000069c
 800d4d0:	200000a8 	.word	0x200000a8
 800d4d4:	200007d2 	.word	0x200007d2
 800d4d8:	01000400 	.word	0x01000400
 800d4dc:	200006d8 	.word	0x200006d8

0800d4e0 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b08a      	sub	sp, #40	; 0x28
 800d4e4:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800d4ea:	463b      	mov	r3, r7
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f005 f859 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if( status == LORAMAC_STATUS_OK )
 800d4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d106      	bne.n	800d50e <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d500:	793b      	ldrb	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800d506:	2300      	movs	r3, #0
 800d508:	e002      	b.n	800d510 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800d50a:	2301      	movs	r3, #1
 800d50c:	e000      	b.n	800d510 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800d50e:	2300      	movs	r3, #0
    }
}
 800d510:	4618      	mov	r0, r3
 800d512:	3728      	adds	r7, #40	; 0x28
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08a      	sub	sp, #40	; 0x28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	460b      	mov	r3, r1
 800d522:	70fb      	strb	r3, [r7, #3]
 800d524:	4613      	mov	r3, r2
 800d526:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800d528:	23ff      	movs	r3, #255	; 0xff
 800d52a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800d52e:	f002 f9cd 	bl	800f8cc <LoRaMacIsBusy>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d538:	f06f 0301 	mvn.w	r3, #1
 800d53c:	e0a3      	b.n	800d686 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800d53e:	f7ff ffcf 	bl	800d4e0 <LmHandlerJoinStatus>
 800d542:	4603      	mov	r3, r0
 800d544:	2b01      	cmp	r3, #1
 800d546:	d00a      	beq.n	800d55e <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800d548:	4b51      	ldr	r3, [pc, #324]	; (800d690 <LmHandlerSend+0x178>)
 800d54a:	799b      	ldrb	r3, [r3, #6]
 800d54c:	4a50      	ldr	r2, [pc, #320]	; (800d690 <LmHandlerSend+0x178>)
 800d54e:	79d2      	ldrb	r2, [r2, #7]
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff ff42 	bl	800d3dc <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d558:	f06f 0302 	mvn.w	r3, #2
 800d55c:	e093      	b.n	800d686 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800d55e:	4a4d      	ldr	r2, [pc, #308]	; (800d694 <LmHandlerSend+0x17c>)
 800d560:	78fb      	ldrb	r3, [r7, #3]
 800d562:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800d564:	78fb      	ldrb	r3, [r7, #3]
 800d566:	2b00      	cmp	r3, #0
 800d568:	bf14      	ite	ne
 800d56a:	2301      	movne	r3, #1
 800d56c:	2300      	moveq	r3, #0
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800d572:	4b49      	ldr	r3, [pc, #292]	; (800d698 <LmHandlerSend+0x180>)
 800d574:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d578:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	785b      	ldrb	r3, [r3, #1]
 800d57e:	f107 020c 	add.w	r2, r7, #12
 800d582:	4611      	mov	r1, r2
 800d584:	4618      	mov	r0, r3
 800d586:	f004 ff7d 	bl	8012484 <LoRaMacQueryTxPossible>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d009      	beq.n	800d5a4 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800d590:	2300      	movs	r3, #0
 800d592:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800d594:	2300      	movs	r3, #0
 800d596:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800d598:	2300      	movs	r3, #0
 800d59a:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800d59c:	23f9      	movs	r3, #249	; 0xf9
 800d59e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5a2:	e009      	b.n	800d5b8 <LmHandlerSend+0xa0>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	785b      	ldrb	r3, [r3, #1]
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800d5b8:	4b36      	ldr	r3, [pc, #216]	; (800d694 <LmHandlerSend+0x17c>)
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	3310      	adds	r3, #16
 800d5be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5c2:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800d5c6:	4b34      	ldr	r3, [pc, #208]	; (800d698 <LmHandlerSend+0x180>)
 800d5c8:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800d5cc:	4b31      	ldr	r3, [pc, #196]	; (800d694 <LmHandlerSend+0x17c>)
 800d5ce:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800d5d0:	78ba      	ldrb	r2, [r7, #2]
 800d5d2:	f107 0310 	add.w	r3, r7, #16
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f005 fe7f 	bl	80132dc <LoRaMacMcpsRequest>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800d5e4:	6a3b      	ldr	r3, [r7, #32]
 800d5e6:	4a2d      	ldr	r2, [pc, #180]	; (800d69c <LmHandlerSend+0x184>)
 800d5e8:	6013      	str	r3, [r2, #0]

    switch (status)
 800d5ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5ee:	2b11      	cmp	r3, #17
 800d5f0:	d842      	bhi.n	800d678 <LmHandlerSend+0x160>
 800d5f2:	a201      	add	r2, pc, #4	; (adr r2, 800d5f8 <LmHandlerSend+0xe0>)
 800d5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f8:	0800d641 	.word	0x0800d641
 800d5fc:	0800d659 	.word	0x0800d659
 800d600:	0800d679 	.word	0x0800d679
 800d604:	0800d679 	.word	0x0800d679
 800d608:	0800d679 	.word	0x0800d679
 800d60c:	0800d679 	.word	0x0800d679
 800d610:	0800d679 	.word	0x0800d679
 800d614:	0800d661 	.word	0x0800d661
 800d618:	0800d679 	.word	0x0800d679
 800d61c:	0800d679 	.word	0x0800d679
 800d620:	0800d679 	.word	0x0800d679
 800d624:	0800d671 	.word	0x0800d671
 800d628:	0800d679 	.word	0x0800d679
 800d62c:	0800d679 	.word	0x0800d679
 800d630:	0800d659 	.word	0x0800d659
 800d634:	0800d659 	.word	0x0800d659
 800d638:	0800d659 	.word	0x0800d659
 800d63c:	0800d669 	.word	0x0800d669
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800d640:	4b17      	ldr	r3, [pc, #92]	; (800d6a0 <LmHandlerSend+0x188>)
 800d642:	2200      	movs	r2, #0
 800d644:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800d646:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d64a:	f113 0f07 	cmn.w	r3, #7
 800d64e:	d017      	beq.n	800d680 <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800d650:	2300      	movs	r3, #0
 800d652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800d656:	e013      	b.n	800d680 <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800d658:	23fe      	movs	r3, #254	; 0xfe
 800d65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d65e:	e010      	b.n	800d682 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d660:	23fd      	movs	r3, #253	; 0xfd
 800d662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d666:	e00c      	b.n	800d682 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800d668:	23fb      	movs	r3, #251	; 0xfb
 800d66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d66e:	e008      	b.n	800d682 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800d670:	23fa      	movs	r3, #250	; 0xfa
 800d672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d676:	e004      	b.n	800d682 <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d678:	23ff      	movs	r3, #255	; 0xff
 800d67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d67e:	e000      	b.n	800d682 <LmHandlerSend+0x16a>
            break;
 800d680:	bf00      	nop
    }

    return lmhStatus;
 800d682:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d686:	4618      	mov	r0, r3
 800d688:	3728      	adds	r7, #40	; 0x28
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	200000a8 	.word	0x200000a8
 800d694:	200000b0 	.word	0x200000b0
 800d698:	2000069c 	.word	0x2000069c
 800d69c:	200006d8 	.word	0x200006d8
 800d6a0:	200006dc 	.word	0x200006dc

0800d6a4 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800d6aa:	2309      	movs	r3, #9
 800d6ac:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800d6ae:	463b      	mov	r3, r7
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f005 fc8d 	bl	8012fd0 <LoRaMacMlmeRequest>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	4a06      	ldr	r2, [pc, #24]	; (800d6d8 <LmHandlerDeviceTimeReq+0x34>)
 800d6be:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d101      	bne.n	800d6ca <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	e001      	b.n	800d6ce <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800d6ca:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3718      	adds	r7, #24
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	200006d8 	.word	0x200006d8

0800d6dc <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800d6e6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bc80      	pop	{r7}
 800d6f2:	4770      	bx	lr

0800d6f4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08c      	sub	sp, #48	; 0x30
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800d6fe:	2300      	movs	r3, #0
 800d700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if (LoRaMacIsBusy() == true)
 800d704:	f002 f8e2 	bl	800f8cc <LoRaMacIsBusy>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d002      	beq.n	800d714 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d70e:	f06f 0301 	mvn.w	r3, #1
 800d712:	e073      	b.n	800d7fc <LmHandlerRequestClass+0x108>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800d714:	f7ff fee4 	bl	800d4e0 <LmHandlerJoinStatus>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d002      	beq.n	800d724 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800d71e:	f06f 0302 	mvn.w	r3, #2
 800d722:	e06b      	b.n	800d7fc <LmHandlerRequestClass+0x108>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d724:	2300      	movs	r3, #0
 800d726:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d728:	f107 0308 	add.w	r3, r7, #8
 800d72c:	4618      	mov	r0, r3
 800d72e:	f004 ff39 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800d738:	f04f 33ff 	mov.w	r3, #4294967295
 800d73c:	e05e      	b.n	800d7fc <LmHandlerRequestClass+0x108>
    }
    currentClass = mibReq.Param.Class;
 800d73e:	7b3b      	ldrb	r3, [r7, #12]
 800d740:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800d744:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800d748:	79fb      	ldrb	r3, [r7, #7]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d04d      	beq.n	800d7ea <LmHandlerRequestClass+0xf6>
    {
        switch( newClass )
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	2b02      	cmp	r3, #2
 800d752:	d028      	beq.n	800d7a6 <LmHandlerRequestClass+0xb2>
 800d754:	2b02      	cmp	r3, #2
 800d756:	dc4a      	bgt.n	800d7ee <LmHandlerRequestClass+0xfa>
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d002      	beq.n	800d762 <LmHandlerRequestClass+0x6e>
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d01e      	beq.n	800d79e <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800d760:	e045      	b.n	800d7ee <LmHandlerRequestClass+0xfa>
                if( currentClass != CLASS_A )
 800d762:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d766:	2b00      	cmp	r3, #0
 800d768:	d043      	beq.n	800d7f2 <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d76e:	f107 0308 	add.w	r3, r7, #8
 800d772:	4618      	mov	r0, r3
 800d774:	f005 f8bc 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10b      	bne.n	800d796 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d77e:	4b21      	ldr	r3, [pc, #132]	; (800d804 <LmHandlerRequestClass+0x110>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d784:	2b00      	cmp	r3, #0
 800d786:	d034      	beq.n	800d7f2 <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d788:	4b1e      	ldr	r3, [pc, #120]	; (800d804 <LmHandlerRequestClass+0x110>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78e:	79fa      	ldrb	r2, [r7, #7]
 800d790:	4610      	mov	r0, r2
 800d792:	4798      	blx	r3
            break;
 800d794:	e02d      	b.n	800d7f2 <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d796:	23ff      	movs	r3, #255	; 0xff
 800d798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d79c:	e029      	b.n	800d7f2 <LmHandlerRequestClass+0xfe>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800d79e:	23ff      	movs	r3, #255	; 0xff
 800d7a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d7a4:	e028      	b.n	800d7f8 <LmHandlerRequestClass+0x104>
                if( currentClass != CLASS_A )
 800d7a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d003      	beq.n	800d7b6 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800d7ae:	23ff      	movs	r3, #255	; 0xff
 800d7b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d7b4:	e01f      	b.n	800d7f6 <LmHandlerRequestClass+0x102>
                    mibReq.Param.Class = newClass;
 800d7b6:	79fb      	ldrb	r3, [r7, #7]
 800d7b8:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800d7ba:	f107 0308 	add.w	r3, r7, #8
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f005 f896 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d10b      	bne.n	800d7e2 <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800d7ca:	4b0e      	ldr	r3, [pc, #56]	; (800d804 <LmHandlerRequestClass+0x110>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d010      	beq.n	800d7f6 <LmHandlerRequestClass+0x102>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800d7d4:	4b0b      	ldr	r3, [pc, #44]	; (800d804 <LmHandlerRequestClass+0x110>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7da:	79fa      	ldrb	r2, [r7, #7]
 800d7dc:	4610      	mov	r0, r2
 800d7de:	4798      	blx	r3
            break;
 800d7e0:	e009      	b.n	800d7f6 <LmHandlerRequestClass+0x102>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800d7e2:	23ff      	movs	r3, #255	; 0xff
 800d7e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            break;
 800d7e8:	e005      	b.n	800d7f6 <LmHandlerRequestClass+0x102>
        }
    }
 800d7ea:	bf00      	nop
 800d7ec:	e004      	b.n	800d7f8 <LmHandlerRequestClass+0x104>
            break;
 800d7ee:	bf00      	nop
 800d7f0:	e002      	b.n	800d7f8 <LmHandlerRequestClass+0x104>
            break;
 800d7f2:	bf00      	nop
 800d7f4:	e000      	b.n	800d7f8 <LmHandlerRequestClass+0x104>
            break;
 800d7f6:	bf00      	nop
    return errorStatus;
 800d7f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3730      	adds	r7, #48	; 0x30
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}
 800d804:	200006b0 	.word	0x200006b0

0800d808 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b08c      	sub	sp, #48	; 0x30
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d816:	f04f 33ff 	mov.w	r3, #4294967295
 800d81a:	e010      	b.n	800d83e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800d81c:	2300      	movs	r3, #0
 800d81e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800d820:	f107 030c 	add.w	r3, r7, #12
 800d824:	4618      	mov	r0, r3
 800d826:	f004 febd 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d002      	beq.n	800d836 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d830:	f04f 33ff 	mov.w	r3, #4294967295
 800d834:	e003      	b.n	800d83e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800d836:	7c3a      	ldrb	r2, [r7, #16]
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d83c:	2300      	movs	r3, #0
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3730      	adds	r7, #48	; 0x30
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}
	...

0800d848 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08c      	sub	sp, #48	; 0x30
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d102      	bne.n	800d85c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	e016      	b.n	800d88a <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800d85c:	2320      	movs	r3, #32
 800d85e:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800d860:	f107 030c 	add.w	r3, r7, #12
 800d864:	4618      	mov	r0, r3
 800d866:	f004 fe9d 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800d870:	f04f 33ff 	mov.w	r3, #4294967295
 800d874:	e009      	b.n	800d88a <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800d876:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f993 2000 	ldrsb.w	r2, [r3]
 800d884:	4b03      	ldr	r3, [pc, #12]	; (800d894 <LmHandlerGetTxDatarate+0x4c>)
 800d886:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3730      	adds	r7, #48	; 0x30
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	2000069c 	.word	0x2000069c

0800d898 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08c      	sub	sp, #48	; 0x30
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800d8a0:	2323      	movs	r3, #35	; 0x23
 800d8a2:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d8a8:	f107 030c 	add.w	r3, r7, #12
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f005 f81f 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d002      	beq.n	800d8be <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800d8b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d8bc:	e000      	b.n	800d8c0 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800d8be:	2300      	movs	r3, #0
}
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	3730      	adds	r7, #48	; 0x30
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800d8d0:	4b15      	ldr	r3, [pc, #84]	; (800d928 <McpsConfirm+0x60>)
 800d8d2:	2201      	movs	r2, #1
 800d8d4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	785a      	ldrb	r2, [r3, #1]
 800d8da:	4b13      	ldr	r3, [pc, #76]	; (800d928 <McpsConfirm+0x60>)
 800d8dc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	789b      	ldrb	r3, [r3, #2]
 800d8e2:	b25a      	sxtb	r2, r3
 800d8e4:	4b10      	ldr	r3, [pc, #64]	; (800d928 <McpsConfirm+0x60>)
 800d8e6:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	4a0e      	ldr	r2, [pc, #56]	; (800d928 <McpsConfirm+0x60>)
 800d8ee:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <McpsConfirm+0x60>)
 800d8f8:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	691b      	ldr	r3, [r3, #16]
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	4b09      	ldr	r3, [pc, #36]	; (800d928 <McpsConfirm+0x60>)
 800d902:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	791b      	ldrb	r3, [r3, #4]
 800d908:	461a      	mov	r2, r3
 800d90a:	4b07      	ldr	r3, [pc, #28]	; (800d928 <McpsConfirm+0x60>)
 800d90c:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800d90e:	4b07      	ldr	r3, [pc, #28]	; (800d92c <McpsConfirm+0x64>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d914:	4804      	ldr	r0, [pc, #16]	; (800d928 <McpsConfirm+0x60>)
 800d916:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800d918:	6879      	ldr	r1, [r7, #4]
 800d91a:	2000      	movs	r0, #0
 800d91c:	f000 f9c6 	bl	800dcac <LmHandlerPackagesNotify>
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	200000b0 	.word	0x200000b0
 800d92c:	200006b0 	.word	0x200006b0

0800d930 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b086      	sub	sp, #24
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800d93e:	4b2c      	ldr	r3, [pc, #176]	; (800d9f0 <McpsIndication+0xc0>)
 800d940:	2201      	movs	r2, #1
 800d942:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	785a      	ldrb	r2, [r3, #1]
 800d948:	4b29      	ldr	r3, [pc, #164]	; (800d9f0 <McpsIndication+0xc0>)
 800d94a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800d94c:	4b28      	ldr	r3, [pc, #160]	; (800d9f0 <McpsIndication+0xc0>)
 800d94e:	785b      	ldrb	r3, [r3, #1]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d149      	bne.n	800d9e8 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	791b      	ldrb	r3, [r3, #4]
 800d958:	b25a      	sxtb	r2, r3
 800d95a:	4b25      	ldr	r3, [pc, #148]	; (800d9f0 <McpsIndication+0xc0>)
 800d95c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d964:	b25a      	sxtb	r2, r3
 800d966:	4b22      	ldr	r3, [pc, #136]	; (800d9f0 <McpsIndication+0xc0>)
 800d968:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d970:	4b1f      	ldr	r3, [pc, #124]	; (800d9f0 <McpsIndication+0xc0>)
 800d972:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	78da      	ldrb	r2, [r3, #3]
 800d978:	4b1d      	ldr	r3, [pc, #116]	; (800d9f0 <McpsIndication+0xc0>)
 800d97a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	691b      	ldr	r3, [r3, #16]
 800d980:	4a1b      	ldr	r2, [pc, #108]	; (800d9f0 <McpsIndication+0xc0>)
 800d982:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	78db      	ldrb	r3, [r3, #3]
 800d988:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7b1b      	ldrb	r3, [r3, #12]
 800d98e:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800d996:	4b17      	ldr	r3, [pc, #92]	; (800d9f4 <McpsIndication+0xc4>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99c:	f107 0210 	add.w	r2, r7, #16
 800d9a0:	4913      	ldr	r1, [pc, #76]	; (800d9f0 <McpsIndication+0xc0>)
 800d9a2:	4610      	mov	r0, r2
 800d9a4:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800d9a6:	4b13      	ldr	r3, [pc, #76]	; (800d9f4 <McpsIndication+0xc4>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <McpsIndication+0x90>
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	7e1b      	ldrb	r3, [r3, #24]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d003      	beq.n	800d9c0 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800d9b8:	4b0e      	ldr	r3, [pc, #56]	; (800d9f4 <McpsIndication+0xc4>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9be:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800d9c0:	6879      	ldr	r1, [r7, #4]
 800d9c2:	2001      	movs	r0, #1
 800d9c4:	f000 f972 	bl	800dcac <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800d9c8:	f107 030f 	add.w	r3, r7, #15
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7ff ff1b 	bl	800d808 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	795b      	ldrb	r3, [r3, #5]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d107      	bne.n	800d9ea <McpsIndication+0xba>
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d104      	bne.n	800d9ea <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800d9e0:	4b05      	ldr	r3, [pc, #20]	; (800d9f8 <McpsIndication+0xc8>)
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	e000      	b.n	800d9ea <McpsIndication+0xba>
        return;
 800d9e8:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800d9ea:	3718      	adds	r7, #24
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}
 800d9f0:	200000cc 	.word	0x200000cc
 800d9f4:	200006b0 	.word	0x200006b0
 800d9f8:	200006dc 	.word	0x200006dc

0800d9fc <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b08c      	sub	sp, #48	; 0x30
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800da04:	4b3c      	ldr	r3, [pc, #240]	; (800daf8 <MlmeConfirm+0xfc>)
 800da06:	2200      	movs	r2, #0
 800da08:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	785a      	ldrb	r2, [r3, #1]
 800da0e:	4b3a      	ldr	r3, [pc, #232]	; (800daf8 <MlmeConfirm+0xfc>)
 800da10:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800da12:	4b3a      	ldr	r3, [pc, #232]	; (800dafc <MlmeConfirm+0x100>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da18:	4837      	ldr	r0, [pc, #220]	; (800daf8 <MlmeConfirm+0xfc>)
 800da1a:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	2002      	movs	r0, #2
 800da20:	f000 f944 	bl	800dcac <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	3b01      	subs	r3, #1
 800da2a:	2b0b      	cmp	r3, #11
 800da2c:	d85c      	bhi.n	800dae8 <MlmeConfirm+0xec>
 800da2e:	a201      	add	r2, pc, #4	; (adr r2, 800da34 <MlmeConfirm+0x38>)
 800da30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da34:	0800da65 	.word	0x0800da65
 800da38:	0800dae9 	.word	0x0800dae9
 800da3c:	0800dae9 	.word	0x0800dae9
 800da40:	0800dab7 	.word	0x0800dab7
 800da44:	0800dae9 	.word	0x0800dae9
 800da48:	0800dae9 	.word	0x0800dae9
 800da4c:	0800dae9 	.word	0x0800dae9
 800da50:	0800dae9 	.word	0x0800dae9
 800da54:	0800dae9 	.word	0x0800dae9
 800da58:	0800dae9 	.word	0x0800dae9
 800da5c:	0800dacf 	.word	0x0800dacf
 800da60:	0800dae9 	.word	0x0800dae9
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800da64:	2306      	movs	r3, #6
 800da66:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800da68:	f107 030c 	add.w	r3, r7, #12
 800da6c:	4618      	mov	r0, r3
 800da6e:	f004 fd99 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	4a22      	ldr	r2, [pc, #136]	; (800db00 <MlmeConfirm+0x104>)
 800da76:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800da78:	4822      	ldr	r0, [pc, #136]	; (800db04 <MlmeConfirm+0x108>)
 800da7a:	f7ff fee5 	bl	800d848 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	785b      	ldrb	r3, [r3, #1]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d108      	bne.n	800da98 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800da86:	4b20      	ldr	r3, [pc, #128]	; (800db08 <MlmeConfirm+0x10c>)
 800da88:	2200      	movs	r2, #0
 800da8a:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800da8c:	4b1f      	ldr	r3, [pc, #124]	; (800db0c <MlmeConfirm+0x110>)
 800da8e:	785b      	ldrb	r3, [r3, #1]
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fe2f 	bl	800d6f4 <LmHandlerRequestClass>
 800da96:	e002      	b.n	800da9e <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800da98:	4b1b      	ldr	r3, [pc, #108]	; (800db08 <MlmeConfirm+0x10c>)
 800da9a:	22ff      	movs	r2, #255	; 0xff
 800da9c:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800da9e:	4b17      	ldr	r3, [pc, #92]	; (800dafc <MlmeConfirm+0x100>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa4:	4818      	ldr	r0, [pc, #96]	; (800db08 <MlmeConfirm+0x10c>)
 800daa6:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	785b      	ldrb	r3, [r3, #1]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d11d      	bne.n	800daec <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800dab0:	f7ff f894 	bl	800cbdc <SecureElementPrintSessionKeys>
            }
        }
        break;
 800dab4:	e01a      	b.n	800daec <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <MlmeConfirm+0x114>)
 800dab8:	2201      	movs	r2, #1
 800daba:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	7a1a      	ldrb	r2, [r3, #8]
 800dac0:	4b13      	ldr	r3, [pc, #76]	; (800db10 <MlmeConfirm+0x114>)
 800dac2:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	7a5a      	ldrb	r2, [r3, #9]
 800dac8:	4b11      	ldr	r3, [pc, #68]	; (800db10 <MlmeConfirm+0x114>)
 800daca:	74da      	strb	r2, [r3, #19]
        }
        break;
 800dacc:	e00f      	b.n	800daee <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	785b      	ldrb	r3, [r3, #1]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d105      	bne.n	800dae2 <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800dad6:	4b0d      	ldr	r3, [pc, #52]	; (800db0c <MlmeConfirm+0x110>)
 800dad8:	7b1b      	ldrb	r3, [r3, #12]
 800dada:	4618      	mov	r0, r3
 800dadc:	f7ff fdfe 	bl	800d6dc <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800dae0:	e005      	b.n	800daee <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800dae2:	f7ff fddf 	bl	800d6a4 <LmHandlerDeviceTimeReq>
        break;
 800dae6:	e002      	b.n	800daee <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800dae8:	bf00      	nop
 800daea:	e000      	b.n	800daee <MlmeConfirm+0xf2>
        break;
 800daec:	bf00      	nop
    }
}
 800daee:	bf00      	nop
 800daf0:	3730      	adds	r7, #48	; 0x30
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	200000b0 	.word	0x200000b0
 800dafc:	200006b0 	.word	0x200006b0
 800db00:	20000090 	.word	0x20000090
 800db04:	200000ac 	.word	0x200000ac
 800db08:	200000a8 	.word	0x200000a8
 800db0c:	2000069c 	.word	0x2000069c
 800db10:	200000cc 	.word	0x200000cc

0800db14 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800db1e:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <MlmeIndication+0x9c>)
 800db20:	2200      	movs	r2, #0
 800db22:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	785a      	ldrb	r2, [r3, #1]
 800db28:	4b21      	ldr	r3, [pc, #132]	; (800dbb0 <MlmeIndication+0x9c>)
 800db2a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	789b      	ldrb	r3, [r3, #2]
 800db30:	b25a      	sxtb	r2, r3
 800db32:	4b1f      	ldr	r3, [pc, #124]	; (800dbb0 <MlmeIndication+0x9c>)
 800db34:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800db3c:	b25a      	sxtb	r2, r3
 800db3e:	4b1c      	ldr	r3, [pc, #112]	; (800dbb0 <MlmeIndication+0x9c>)
 800db40:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800db48:	4b19      	ldr	r3, [pc, #100]	; (800dbb0 <MlmeIndication+0x9c>)
 800db4a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	78da      	ldrb	r2, [r3, #3]
 800db50:	4b17      	ldr	r3, [pc, #92]	; (800dbb0 <MlmeIndication+0x9c>)
 800db52:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4a15      	ldr	r2, [pc, #84]	; (800dbb0 <MlmeIndication+0x9c>)
 800db5a:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b0a      	cmp	r3, #10
 800db62:	d009      	beq.n	800db78 <MlmeIndication+0x64>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	2b0e      	cmp	r3, #14
 800db6a:	d005      	beq.n	800db78 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800db6c:	4b11      	ldr	r3, [pc, #68]	; (800dbb4 <MlmeIndication+0xa0>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db72:	490f      	ldr	r1, [pc, #60]	; (800dbb0 <MlmeIndication+0x9c>)
 800db74:	2000      	movs	r0, #0
 800db76:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	2003      	movs	r0, #3
 800db7c:	f000 f896 	bl	800dcac <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	2b0e      	cmp	r3, #14
 800db86:	d00a      	beq.n	800db9e <MlmeIndication+0x8a>
 800db88:	2b0e      	cmp	r3, #14
 800db8a:	dc0a      	bgt.n	800dba2 <MlmeIndication+0x8e>
 800db8c:	2b06      	cmp	r3, #6
 800db8e:	d002      	beq.n	800db96 <MlmeIndication+0x82>
 800db90:	2b0a      	cmp	r3, #10
 800db92:	d008      	beq.n	800dba6 <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800db94:	e005      	b.n	800dba2 <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800db96:	4b08      	ldr	r3, [pc, #32]	; (800dbb8 <MlmeIndication+0xa4>)
 800db98:	2201      	movs	r2, #1
 800db9a:	701a      	strb	r2, [r3, #0]
        break;
 800db9c:	e004      	b.n	800dba8 <MlmeIndication+0x94>
        break;
 800db9e:	bf00      	nop
 800dba0:	e002      	b.n	800dba8 <MlmeIndication+0x94>
        break;
 800dba2:	bf00      	nop
 800dba4:	e000      	b.n	800dba8 <MlmeIndication+0x94>
        break;
 800dba6:	bf00      	nop
    }
}
 800dba8:	bf00      	nop
 800dbaa:	3708      	adds	r7, #8
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	200000cc 	.word	0x200000cc
 800dbb4:	200006b0 	.word	0x200006b0
 800dbb8:	200006dc 	.word	0x200006dc

0800dbbc <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b084      	sub	sp, #16
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	6039      	str	r1, [r7, #0]
 800dbc6:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	60fb      	str	r3, [r7, #12]
    switch( id )
 800dbcc:	79fb      	ldrb	r3, [r7, #7]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d103      	bne.n	800dbda <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800dbd2:	f000 fa1f 	bl	800e014 <LmhpCompliancePackageFactory>
 800dbd6:	60f8      	str	r0, [r7, #12]
            break;
 800dbd8:	e000      	b.n	800dbdc <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800dbda:	bf00      	nop
        }
    }
    if( package != NULL )
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d035      	beq.n	800dc4e <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800dbe2:	79fb      	ldrb	r3, [r7, #7]
 800dbe4:	491d      	ldr	r1, [pc, #116]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800dbec:	79fb      	ldrb	r3, [r7, #7]
 800dbee:	4a1b      	ldr	r2, [pc, #108]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dbf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbf4:	4a1a      	ldr	r2, [pc, #104]	; (800dc60 <LmHandlerPackageRegister+0xa4>)
 800dbf6:	629a      	str	r2, [r3, #40]	; 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800dbf8:	4b1a      	ldr	r3, [pc, #104]	; (800dc64 <LmHandlerPackageRegister+0xa8>)
 800dbfa:	681a      	ldr	r2, [r3, #0]
 800dbfc:	79fb      	ldrb	r3, [r7, #7]
 800dbfe:	4917      	ldr	r1, [pc, #92]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dc00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dc04:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800dc06:	631a      	str	r2, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800dc08:	4b16      	ldr	r3, [pc, #88]	; (800dc64 <LmHandlerPackageRegister+0xa8>)
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	4913      	ldr	r1, [pc, #76]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dc10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dc14:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dc16:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800dc18:	79fb      	ldrb	r3, [r7, #7]
 800dc1a:	4a10      	ldr	r2, [pc, #64]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc20:	4a11      	ldr	r2, [pc, #68]	; (800dc68 <LmHandlerPackageRegister+0xac>)
 800dc22:	62da      	str	r2, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800dc24:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <LmHandlerPackageRegister+0xa8>)
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	79fb      	ldrb	r3, [r7, #7]
 800dc2a:	490c      	ldr	r1, [pc, #48]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dc2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800dc30:	6992      	ldr	r2, [r2, #24]
 800dc32:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800dc34:	79fb      	ldrb	r3, [r7, #7]
 800dc36:	4a09      	ldr	r2, [pc, #36]	; (800dc5c <LmHandlerPackageRegister+0xa0>)
 800dc38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	4a0b      	ldr	r2, [pc, #44]	; (800dc6c <LmHandlerPackageRegister+0xb0>)
 800dc40:	6851      	ldr	r1, [r2, #4]
 800dc42:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <LmHandlerPackageRegister+0xb0>)
 800dc44:	7852      	ldrb	r2, [r2, #1]
 800dc46:	6838      	ldr	r0, [r7, #0]
 800dc48:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	e001      	b.n	800dc52 <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800dc4e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	20000688 	.word	0x20000688
 800dc60:	0800d3dd 	.word	0x0800d3dd
 800dc64:	200006b0 	.word	0x200006b0
 800dc68:	0800d6a5 	.word	0x0800d6a5
 800dc6c:	200000e0 	.word	0x200000e0

0800dc70 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b082      	sub	sp, #8
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b04      	cmp	r3, #4
 800dc7e:	d80e      	bhi.n	800dc9e <LmHandlerPackageIsInitialized+0x2e>
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	4a09      	ldr	r2, [pc, #36]	; (800dca8 <LmHandlerPackageIsInitialized+0x38>)
 800dc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d007      	beq.n	800dc9e <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800dc8e:	79fb      	ldrb	r3, [r7, #7]
 800dc90:	4a05      	ldr	r2, [pc, #20]	; (800dca8 <LmHandlerPackageIsInitialized+0x38>)
 800dc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc96:	689b      	ldr	r3, [r3, #8]
 800dc98:	4798      	blx	r3
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	e000      	b.n	800dca0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800dc9e:	2300      	movs	r3, #0
    }
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20000688 	.word	0x20000688

0800dcac <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	6039      	str	r1, [r7, #0]
 800dcb6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dcb8:	2300      	movs	r3, #0
 800dcba:	73fb      	strb	r3, [r7, #15]
 800dcbc:	e069      	b.n	800dd92 <LmHandlerPackagesNotify+0xe6>
    {
        if( LmHandlerPackages[i] != NULL )
 800dcbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcc2:	4a38      	ldr	r2, [pc, #224]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dcc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d051      	beq.n	800dd70 <LmHandlerPackagesNotify+0xc4>
        {
            switch( notifyType )
 800dccc:	79fb      	ldrb	r3, [r7, #7]
 800dcce:	2b03      	cmp	r3, #3
 800dcd0:	d850      	bhi.n	800dd74 <LmHandlerPackagesNotify+0xc8>
 800dcd2:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <LmHandlerPackagesNotify+0x2c>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dce9 	.word	0x0800dce9
 800dcdc:	0800dd0b 	.word	0x0800dd0b
 800dce0:	0800dd2d 	.word	0x0800dd2d
 800dce4:	0800dd4f 	.word	0x0800dd4f
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800dce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcec:	4a2d      	ldr	r2, [pc, #180]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dcee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d03f      	beq.n	800dd78 <LmHandlerPackagesNotify+0xcc>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800dcf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcfc:	4a29      	ldr	r2, [pc, #164]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dcfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	6838      	ldr	r0, [r7, #0]
 800dd06:	4798      	blx	r3
                    }
                    break;
 800dd08:	e036      	b.n	800dd78 <LmHandlerPackagesNotify+0xcc>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800dd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd0e:	4a25      	ldr	r2, [pc, #148]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dd10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d030      	beq.n	800dd7c <LmHandlerPackagesNotify+0xd0>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800dd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd1e:	4a21      	ldr	r2, [pc, #132]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dd20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd24:	69db      	ldr	r3, [r3, #28]
 800dd26:	6838      	ldr	r0, [r7, #0]
 800dd28:	4798      	blx	r3
                    }
                    break;
 800dd2a:	e027      	b.n	800dd7c <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800dd2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd30:	4a1c      	ldr	r2, [pc, #112]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd36:	6a1b      	ldr	r3, [r3, #32]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d021      	beq.n	800dd80 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800dd3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd40:	4a18      	ldr	r2, [pc, #96]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	6838      	ldr	r0, [r7, #0]
 800dd4a:	4798      	blx	r3
                    }
                    break;
 800dd4c:	e018      	b.n	800dd80 <LmHandlerPackagesNotify+0xd4>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800dd4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd52:	4a14      	ldr	r2, [pc, #80]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dd54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d012      	beq.n	800dd84 <LmHandlerPackagesNotify+0xd8>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800dd5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd62:	4a10      	ldr	r2, [pc, #64]	; (800dda4 <LmHandlerPackagesNotify+0xf8>)
 800dd64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6a:	6838      	ldr	r0, [r7, #0]
 800dd6c:	4798      	blx	r3
                    }
                    break;
 800dd6e:	e009      	b.n	800dd84 <LmHandlerPackagesNotify+0xd8>
                default:
                {
                    break;
                }
            }
        }
 800dd70:	bf00      	nop
 800dd72:	e008      	b.n	800dd86 <LmHandlerPackagesNotify+0xda>
                    break;
 800dd74:	bf00      	nop
 800dd76:	e006      	b.n	800dd86 <LmHandlerPackagesNotify+0xda>
                    break;
 800dd78:	bf00      	nop
 800dd7a:	e004      	b.n	800dd86 <LmHandlerPackagesNotify+0xda>
                    break;
 800dd7c:	bf00      	nop
 800dd7e:	e002      	b.n	800dd86 <LmHandlerPackagesNotify+0xda>
                    break;
 800dd80:	bf00      	nop
 800dd82:	e000      	b.n	800dd86 <LmHandlerPackagesNotify+0xda>
                    break;
 800dd84:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800dd86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd8a:	b2db      	uxtb	r3, r3
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	73fb      	strb	r3, [r7, #15]
 800dd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd96:	2b04      	cmp	r3, #4
 800dd98:	dd91      	ble.n	800dcbe <LmHandlerPackagesNotify+0x12>
    }
}
 800dd9a:	bf00      	nop
 800dd9c:	bf00      	nop
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	20000688 	.word	0x20000688

0800dda8 <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b082      	sub	sp, #8
 800ddac:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ddae:	2300      	movs	r3, #0
 800ddb0:	71fb      	strb	r3, [r7, #7]
 800ddb2:	e018      	b.n	800dde6 <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800ddb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddb8:	4a0f      	ldr	r2, [pc, #60]	; (800ddf8 <LmHandlerPackageIsTxPending+0x50>)
 800ddba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00b      	beq.n	800ddda <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800ddc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddc6:	4a0c      	ldr	r2, [pc, #48]	; (800ddf8 <LmHandlerPackageIsTxPending+0x50>)
 800ddc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddcc:	68db      	ldr	r3, [r3, #12]
 800ddce:	4798      	blx	r3
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d001      	beq.n	800ddda <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e00a      	b.n	800ddf0 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ddda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	3301      	adds	r3, #1
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	71fb      	strb	r3, [r7, #7]
 800dde6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddea:	2b04      	cmp	r3, #4
 800ddec:	dde2      	ble.n	800ddb4 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	20000688 	.word	0x20000688

0800ddfc <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800de02:	2300      	movs	r3, #0
 800de04:	71fb      	strb	r3, [r7, #7]
 800de06:	e022      	b.n	800de4e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800de08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de0c:	4a14      	ldr	r2, [pc, #80]	; (800de60 <LmHandlerPackagesProcess+0x64>)
 800de0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d015      	beq.n	800de42 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800de16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de1a:	4a11      	ldr	r2, [pc, #68]	; (800de60 <LmHandlerPackagesProcess+0x64>)
 800de1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de20:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00d      	beq.n	800de42 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff ff21 	bl	800dc70 <LmHandlerPackageIsInitialized>
 800de2e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800de30:	2b00      	cmp	r3, #0
 800de32:	d006      	beq.n	800de42 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800de34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de38:	4a09      	ldr	r2, [pc, #36]	; (800de60 <LmHandlerPackagesProcess+0x64>)
 800de3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800de42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	3301      	adds	r3, #1
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	71fb      	strb	r3, [r7, #7]
 800de4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800de52:	2b04      	cmp	r3, #4
 800de54:	ddd8      	ble.n	800de08 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800de56:	bf00      	nop
 800de58:	bf00      	nop
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20000688 	.word	0x20000688

0800de64 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d102      	bne.n	800de7c <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800de76:	f04f 33ff 	mov.w	r3, #4294967295
 800de7a:	e00e      	b.n	800de9a <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800de7c:	79fb      	ldrb	r3, [r7, #7]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d002      	beq.n	800de88 <LmHandlerGetVersion+0x24>
 800de82:	2b01      	cmp	r3, #1
 800de84:	d004      	beq.n	800de90 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800de86:	e007      	b.n	800de98 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	4a06      	ldr	r2, [pc, #24]	; (800dea4 <LmHandlerGetVersion+0x40>)
 800de8c:	601a      	str	r2, [r3, #0]
            break;
 800de8e:	e003      	b.n	800de98 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	4a05      	ldr	r2, [pc, #20]	; (800dea8 <LmHandlerGetVersion+0x44>)
 800de94:	601a      	str	r2, [r3, #0]
            break;
 800de96:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	370c      	adds	r7, #12
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bc80      	pop	{r7}
 800dea2:	4770      	bx	lr
 800dea4:	01000400 	.word	0x01000400
 800dea8:	02010001 	.word	0x02010001

0800deac <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800deb0:	f005 fb6a 	bl	8013588 <LoRaMacDeInitialization>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800deba:	2300      	movs	r3, #0
 800debc:	e001      	b.n	800dec2 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800debe:	f06f 0301 	mvn.w	r3, #1
    }
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	bd80      	pop	{r7, pc}

0800dec6 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800dec6:	b580      	push	{r7, lr}
 800dec8:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800deca:	f004 faa3 	bl	8012414 <LoRaMacHalt>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d101      	bne.n	800ded8 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800ded4:	2300      	movs	r3, #0
 800ded6:	e001      	b.n	800dedc <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ded8:	f06f 0301 	mvn.w	r3, #1
    }
}
 800dedc:	4618      	mov	r0, r3
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08e      	sub	sp, #56	; 0x38
 800dee4:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800dee6:	2300      	movs	r3, #0
 800dee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    int32_t status = NVM_DATA_OK;
 800deec:	2300      	movs	r3, #0
 800deee:	633b      	str	r3, [r7, #48]	; 0x30

    lmhStatus = LmHandlerHalt();
 800def0:	f7ff ffe9 	bl	800dec6 <LmHandlerHalt>
 800def4:	4603      	mov	r3, r0
 800def6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800defa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800defe:	2b00      	cmp	r3, #0
 800df00:	d12f      	bne.n	800df62 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800df02:	f000 f859 	bl	800dfb8 <NvmDataMgmtStoreBegin>
 800df06:	6338      	str	r0, [r7, #48]	; 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800df08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0a:	f113 0f02 	cmn.w	r3, #2
 800df0e:	d103      	bne.n	800df18 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800df10:	23f8      	movs	r3, #248	; 0xf8
 800df12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df16:	e01c      	b.n	800df52 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800df18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d104      	bne.n	800df28 <LmHandlerNvmDataStore+0x48>
 800df1e:	4b1b      	ldr	r3, [pc, #108]	; (800df8c <LmHandlerNvmDataStore+0xac>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	695b      	ldr	r3, [r3, #20]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d103      	bne.n	800df30 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800df28:	23ff      	movs	r3, #255	; 0xff
 800df2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800df2e:	e010      	b.n	800df52 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800df30:	2327      	movs	r3, #39	; 0x27
 800df32:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800df34:	1d3b      	adds	r3, r7, #4
 800df36:	4618      	mov	r0, r3
 800df38:	f004 fb34 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	62fb      	str	r3, [r7, #44]	; 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800df40:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800df44:	62bb      	str	r3, [r7, #40]	; 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800df46:	4b11      	ldr	r3, [pc, #68]	; (800df8c <LmHandlerNvmDataStore+0xac>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	695b      	ldr	r3, [r3, #20]
 800df4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df50:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800df52:	f000 f847 	bl	800dfe4 <NvmDataMgmtStoreEnd>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800df5c:	23ff      	movs	r3, #255	; 0xff
 800df5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800df62:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800df66:	2b00      	cmp	r3, #0
 800df68:	d109      	bne.n	800df7e <LmHandlerNvmDataStore+0x9e>
 800df6a:	4b08      	ldr	r3, [pc, #32]	; (800df8c <LmHandlerNvmDataStore+0xac>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	69db      	ldr	r3, [r3, #28]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d004      	beq.n	800df7e <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800df74:	4b05      	ldr	r3, [pc, #20]	; (800df8c <LmHandlerNvmDataStore+0xac>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	69db      	ldr	r3, [r3, #28]
 800df7a:	2001      	movs	r0, #1
 800df7c:	4798      	blx	r3
    }

    return lmhStatus;
 800df7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800df82:	4618      	mov	r0, r3
 800df84:	3738      	adds	r7, #56	; 0x38
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	200006b0 	.word	0x200006b0

0800df90 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	4603      	mov	r3, r0
 800df98:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800df9a:	4b06      	ldr	r3, [pc, #24]	; (800dfb4 <NvmDataMgmtEvent+0x24>)
 800df9c:	881a      	ldrh	r2, [r3, #0]
 800df9e:	88fb      	ldrh	r3, [r7, #6]
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	4b03      	ldr	r3, [pc, #12]	; (800dfb4 <NvmDataMgmtEvent+0x24>)
 800dfa6:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bc80      	pop	{r7}
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	200007d4 	.word	0x200007d4

0800dfb8 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800dfbc:	4b08      	ldr	r3, [pc, #32]	; (800dfe0 <NvmDataMgmtStoreBegin+0x28>)
 800dfbe:	881b      	ldrh	r3, [r3, #0]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d102      	bne.n	800dfca <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800dfc4:	f06f 0301 	mvn.w	r3, #1
 800dfc8:	e008      	b.n	800dfdc <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800dfca:	f004 fa07 	bl	80123dc <LoRaMacStop>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d002      	beq.n	800dfda <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800dfd4:	f06f 0302 	mvn.w	r3, #2
 800dfd8:	e000      	b.n	800dfdc <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800dfda:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	200007d4 	.word	0x200007d4

0800dfe4 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800dfe8:	4b03      	ldr	r3, [pc, #12]	; (800dff8 <NvmDataMgmtStoreEnd+0x14>)
 800dfea:	2200      	movs	r2, #0
 800dfec:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800dfee:	f004 f9e7 	bl	80123c0 <LoRaMacStart>
    return NVM_DATA_OK;
 800dff2:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	bd80      	pop	{r7, pc}
 800dff8:	200007d4 	.word	0x200007d4

0800dffc <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800e000:	2220      	movs	r2, #32
 800e002:	2100      	movs	r1, #0
 800e004:	4802      	ldr	r0, [pc, #8]	; (800e010 <ClassBStatusReset+0x14>)
 800e006:	f009 fe1b 	bl	8017c40 <memset1>
}
 800e00a:	bf00      	nop
 800e00c:	bd80      	pop	{r7, pc}
 800e00e:	bf00      	nop
 800e010:	200007ec 	.word	0x200007ec

0800e014 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800e014:	b480      	push	{r7}
 800e016:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800e018:	4b02      	ldr	r3, [pc, #8]	; (800e024 <LmhpCompliancePackageFactory+0x10>)
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bc80      	pop	{r7}
 800e020:	4770      	bx	lr
 800e022:	bf00      	nop
 800e024:	200000e8 	.word	0x200000e8

0800e028 <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	4613      	mov	r3, r2
 800e034:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d018      	beq.n	800e06e <LmhpComplianceInit+0x46>
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d015      	beq.n	800e06e <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800e042:	4a19      	ldr	r2, [pc, #100]	; (800e0a8 <LmhpComplianceInit+0x80>)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800e048:	4a18      	ldr	r2, [pc, #96]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800e04e:	4a17      	ldr	r2, [pc, #92]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800e054:	4b15      	ldr	r3, [pc, #84]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e056:	2201      	movs	r2, #1
 800e058:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800e05a:	2300      	movs	r3, #0
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	4b14      	ldr	r3, [pc, #80]	; (800e0b0 <LmhpComplianceInit+0x88>)
 800e060:	2200      	movs	r2, #0
 800e062:	f04f 31ff 	mov.w	r1, #4294967295
 800e066:	4813      	ldr	r0, [pc, #76]	; (800e0b4 <LmhpComplianceInit+0x8c>)
 800e068:	f00d fd18 	bl	801ba9c <UTIL_TIMER_Create>
 800e06c:	e005      	b.n	800e07a <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800e06e:	4b0e      	ldr	r3, [pc, #56]	; (800e0a8 <LmhpComplianceInit+0x80>)
 800e070:	2200      	movs	r2, #0
 800e072:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800e074:	4b0d      	ldr	r3, [pc, #52]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e076:	2200      	movs	r2, #0
 800e078:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800e07a:	4b0c      	ldr	r3, [pc, #48]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800e080:	f7ff ffbc 	bl	800dffc <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800e084:	4b09      	ldr	r3, [pc, #36]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e086:	2200      	movs	r2, #0
 800e088:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800e08a:	4b08      	ldr	r3, [pc, #32]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800e090:	4b06      	ldr	r3, [pc, #24]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e092:	2200      	movs	r2, #0
 800e094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800e098:	4b04      	ldr	r3, [pc, #16]	; (800e0ac <LmhpComplianceInit+0x84>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 800e0a0:	bf00      	nop
 800e0a2:	3710      	adds	r7, #16
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	20000810 	.word	0x20000810
 800e0ac:	200007d8 	.word	0x200007d8
 800e0b0:	0800e99d 	.word	0x0800e99d
 800e0b4:	20000814 	.word	0x20000814

0800e0b8 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800e0bc:	4b02      	ldr	r3, [pc, #8]	; (800e0c8 <LmhpComplianceIsInitialized+0x10>)
 800e0be:	781b      	ldrb	r3, [r3, #0]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bc80      	pop	{r7}
 800e0c6:	4770      	bx	lr
 800e0c8:	200007d8 	.word	0x200007d8

0800e0cc <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800e0d0:	4b02      	ldr	r3, [pc, #8]	; (800e0dc <LmhpComplianceIsTxPending+0x10>)
 800e0d2:	785b      	ldrb	r3, [r3, #1]
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bc80      	pop	{r7}
 800e0da:	4770      	bx	lr
 800e0dc:	200007d8 	.word	0x200007d8

0800e0e0 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800e0e0:	b590      	push	{r4, r7, lr}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800e0e6:	4b33      	ldr	r3, [pc, #204]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e0e8:	785b      	ldrb	r3, [r3, #1]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d03f      	beq.n	800e16e <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800e0ee:	f00d fe93 	bl	801be18 <UTIL_TIMER_GetCurrentTime>
 800e0f2:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800e0f4:	4b2f      	ldr	r3, [pc, #188]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e0f6:	685c      	ldr	r4, [r3, #4]
 800e0f8:	f7ff f966 	bl	800d3c8 <LmHandlerGetDutyCycleWaitTime>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	4423      	add	r3, r4
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	429a      	cmp	r2, r3
 800e104:	d942      	bls.n	800e18c <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800e106:	4b2b      	ldr	r3, [pc, #172]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e108:	7a9b      	ldrb	r3, [r3, #10]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d03e      	beq.n	800e18c <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800e10e:	23e0      	movs	r3, #224	; 0xe0
 800e110:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800e112:	4b28      	ldr	r3, [pc, #160]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e114:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800e116:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800e118:	4b26      	ldr	r3, [pc, #152]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e11a:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800e11c:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800e11e:	23ff      	movs	r3, #255	; 0xff
 800e120:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800e122:	4b24      	ldr	r3, [pc, #144]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e124:	7a19      	ldrb	r1, [r3, #8]
 800e126:	463b      	mov	r3, r7
 800e128:	2201      	movs	r2, #1
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff f9f4 	bl	800d518 <LmHandlerSend>
 800e130:	4603      	mov	r3, r0
 800e132:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800e134:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e138:	f113 0f02 	cmn.w	r3, #2
 800e13c:	d004      	beq.n	800e148 <LmhpComplianceProcess+0x68>
 800e13e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e142:	f113 0f06 	cmn.w	r3, #6
 800e146:	d108      	bne.n	800e15a <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800e148:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e14c:	481a      	ldr	r0, [pc, #104]	; (800e1b8 <LmhpComplianceProcess+0xd8>)
 800e14e:	f00d fdb9 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800e152:	4819      	ldr	r0, [pc, #100]	; (800e1b8 <LmhpComplianceProcess+0xd8>)
 800e154:	f00d fcd8 	bl	801bb08 <UTIL_TIMER_Start>
 800e158:	e005      	b.n	800e166 <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800e15a:	4b16      	ldr	r3, [pc, #88]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e15c:	2200      	movs	r2, #0
 800e15e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800e160:	4b14      	ldr	r3, [pc, #80]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e162:	2200      	movs	r2, #0
 800e164:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800e166:	4a13      	ldr	r2, [pc, #76]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6053      	str	r3, [r2, #4]
 800e16c:	e00e      	b.n	800e18c <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800e16e:	4b11      	ldr	r3, [pc, #68]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e174:	2b00      	cmp	r3, #0
 800e176:	d009      	beq.n	800e18c <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800e178:	4b0e      	ldr	r3, [pc, #56]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800e180:	4b0c      	ldr	r3, [pc, #48]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e182:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e186:	4618      	mov	r0, r3
 800e188:	f7ff fab4 	bl	800d6f4 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800e18c:	4b09      	ldr	r3, [pc, #36]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e18e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00a      	beq.n	800e1ac <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800e196:	4b07      	ldr	r3, [pc, #28]	; (800e1b4 <LmhpComplianceProcess+0xd4>)
 800e198:	2200      	movs	r2, #0
 800e19a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800e19e:	4b07      	ldr	r3, [pc, #28]	; (800e1bc <LmhpComplianceProcess+0xdc>)
 800e1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800e1a6:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <LmhpComplianceProcess+0xdc>)
 800e1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1aa:	4798      	blx	r3
        }
    }
}
 800e1ac:	bf00      	nop
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd90      	pop	{r4, r7, pc}
 800e1b4:	200007d8 	.word	0x200007d8
 800e1b8:	20000814 	.word	0x20000814
 800e1bc:	200000e8 	.word	0x200000e8

0800e1c0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800e1c0:	b5b0      	push	{r4, r5, r7, lr}
 800e1c2:	b0a4      	sub	sp, #144	; 0x90
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800e1ce:	4bce      	ldr	r3, [pc, #824]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	f083 0301 	eor.w	r3, r3, #1
 800e1d6:	b2db      	uxtb	r3, r3
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	f040 83b5 	bne.w	800e948 <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	78db      	ldrb	r3, [r3, #3]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <LmhpComplianceOnMcpsIndication+0x2e>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	7b9b      	ldrb	r3, [r3, #14]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d005      	beq.n	800e1fa <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800e1ee:	4bc6      	ldr	r3, [pc, #792]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e1f0:	8a1b      	ldrh	r3, [r3, #16]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	4bc4      	ldr	r3, [pc, #784]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e1f8:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	7b5b      	ldrb	r3, [r3, #13]
 800e1fe:	f083 0301 	eor.w	r3, r3, #1
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	f040 83a1 	bne.w	800e94c <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	78db      	ldrb	r3, [r3, #3]
 800e20e:	2be0      	cmp	r3, #224	; 0xe0
 800e210:	f040 839e 	bne.w	800e950 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800e214:	4bbc      	ldr	r3, [pc, #752]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e216:	2200      	movs	r2, #0
 800e218:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	689a      	ldr	r2, [r3, #8]
 800e21e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e222:	1c59      	adds	r1, r3, #1
 800e224:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e228:	4413      	add	r3, r2
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b7f      	cmp	r3, #127	; 0x7f
 800e22e:	f200 836e 	bhi.w	800e90e <LmhpComplianceOnMcpsIndication+0x74e>
 800e232:	a201      	add	r2, pc, #4	; (adr r2, 800e238 <LmhpComplianceOnMcpsIndication+0x78>)
 800e234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e238:	0800e439 	.word	0x0800e439
 800e23c:	0800e47d 	.word	0x0800e47d
 800e240:	0800e487 	.word	0x0800e487
 800e244:	0800e493 	.word	0x0800e493
 800e248:	0800e4b5 	.word	0x0800e4b5
 800e24c:	0800e4e3 	.word	0x0800e4e3
 800e250:	0800e511 	.word	0x0800e511
 800e254:	0800e56f 	.word	0x0800e56f
 800e258:	0800e5c7 	.word	0x0800e5c7
 800e25c:	0800e633 	.word	0x0800e633
 800e260:	0800e683 	.word	0x0800e683
 800e264:	0800e90f 	.word	0x0800e90f
 800e268:	0800e90f 	.word	0x0800e90f
 800e26c:	0800e90f 	.word	0x0800e90f
 800e270:	0800e90f 	.word	0x0800e90f
 800e274:	0800e90f 	.word	0x0800e90f
 800e278:	0800e90f 	.word	0x0800e90f
 800e27c:	0800e90f 	.word	0x0800e90f
 800e280:	0800e90f 	.word	0x0800e90f
 800e284:	0800e90f 	.word	0x0800e90f
 800e288:	0800e90f 	.word	0x0800e90f
 800e28c:	0800e90f 	.word	0x0800e90f
 800e290:	0800e90f 	.word	0x0800e90f
 800e294:	0800e90f 	.word	0x0800e90f
 800e298:	0800e90f 	.word	0x0800e90f
 800e29c:	0800e90f 	.word	0x0800e90f
 800e2a0:	0800e90f 	.word	0x0800e90f
 800e2a4:	0800e90f 	.word	0x0800e90f
 800e2a8:	0800e90f 	.word	0x0800e90f
 800e2ac:	0800e90f 	.word	0x0800e90f
 800e2b0:	0800e90f 	.word	0x0800e90f
 800e2b4:	0800e90f 	.word	0x0800e90f
 800e2b8:	0800e68b 	.word	0x0800e68b
 800e2bc:	0800e69d 	.word	0x0800e69d
 800e2c0:	0800e6a5 	.word	0x0800e6a5
 800e2c4:	0800e90f 	.word	0x0800e90f
 800e2c8:	0800e90f 	.word	0x0800e90f
 800e2cc:	0800e90f 	.word	0x0800e90f
 800e2d0:	0800e90f 	.word	0x0800e90f
 800e2d4:	0800e90f 	.word	0x0800e90f
 800e2d8:	0800e90f 	.word	0x0800e90f
 800e2dc:	0800e90f 	.word	0x0800e90f
 800e2e0:	0800e90f 	.word	0x0800e90f
 800e2e4:	0800e90f 	.word	0x0800e90f
 800e2e8:	0800e90f 	.word	0x0800e90f
 800e2ec:	0800e90f 	.word	0x0800e90f
 800e2f0:	0800e90f 	.word	0x0800e90f
 800e2f4:	0800e90f 	.word	0x0800e90f
 800e2f8:	0800e90f 	.word	0x0800e90f
 800e2fc:	0800e90f 	.word	0x0800e90f
 800e300:	0800e90f 	.word	0x0800e90f
 800e304:	0800e90f 	.word	0x0800e90f
 800e308:	0800e90f 	.word	0x0800e90f
 800e30c:	0800e90f 	.word	0x0800e90f
 800e310:	0800e90f 	.word	0x0800e90f
 800e314:	0800e90f 	.word	0x0800e90f
 800e318:	0800e90f 	.word	0x0800e90f
 800e31c:	0800e90f 	.word	0x0800e90f
 800e320:	0800e90f 	.word	0x0800e90f
 800e324:	0800e90f 	.word	0x0800e90f
 800e328:	0800e90f 	.word	0x0800e90f
 800e32c:	0800e90f 	.word	0x0800e90f
 800e330:	0800e90f 	.word	0x0800e90f
 800e334:	0800e90f 	.word	0x0800e90f
 800e338:	0800e90f 	.word	0x0800e90f
 800e33c:	0800e90f 	.word	0x0800e90f
 800e340:	0800e90f 	.word	0x0800e90f
 800e344:	0800e90f 	.word	0x0800e90f
 800e348:	0800e90f 	.word	0x0800e90f
 800e34c:	0800e90f 	.word	0x0800e90f
 800e350:	0800e90f 	.word	0x0800e90f
 800e354:	0800e90f 	.word	0x0800e90f
 800e358:	0800e90f 	.word	0x0800e90f
 800e35c:	0800e90f 	.word	0x0800e90f
 800e360:	0800e90f 	.word	0x0800e90f
 800e364:	0800e90f 	.word	0x0800e90f
 800e368:	0800e90f 	.word	0x0800e90f
 800e36c:	0800e90f 	.word	0x0800e90f
 800e370:	0800e90f 	.word	0x0800e90f
 800e374:	0800e90f 	.word	0x0800e90f
 800e378:	0800e90f 	.word	0x0800e90f
 800e37c:	0800e90f 	.word	0x0800e90f
 800e380:	0800e90f 	.word	0x0800e90f
 800e384:	0800e90f 	.word	0x0800e90f
 800e388:	0800e90f 	.word	0x0800e90f
 800e38c:	0800e90f 	.word	0x0800e90f
 800e390:	0800e90f 	.word	0x0800e90f
 800e394:	0800e90f 	.word	0x0800e90f
 800e398:	0800e90f 	.word	0x0800e90f
 800e39c:	0800e90f 	.word	0x0800e90f
 800e3a0:	0800e90f 	.word	0x0800e90f
 800e3a4:	0800e90f 	.word	0x0800e90f
 800e3a8:	0800e90f 	.word	0x0800e90f
 800e3ac:	0800e90f 	.word	0x0800e90f
 800e3b0:	0800e90f 	.word	0x0800e90f
 800e3b4:	0800e90f 	.word	0x0800e90f
 800e3b8:	0800e90f 	.word	0x0800e90f
 800e3bc:	0800e90f 	.word	0x0800e90f
 800e3c0:	0800e90f 	.word	0x0800e90f
 800e3c4:	0800e90f 	.word	0x0800e90f
 800e3c8:	0800e90f 	.word	0x0800e90f
 800e3cc:	0800e90f 	.word	0x0800e90f
 800e3d0:	0800e90f 	.word	0x0800e90f
 800e3d4:	0800e90f 	.word	0x0800e90f
 800e3d8:	0800e90f 	.word	0x0800e90f
 800e3dc:	0800e90f 	.word	0x0800e90f
 800e3e0:	0800e90f 	.word	0x0800e90f
 800e3e4:	0800e90f 	.word	0x0800e90f
 800e3e8:	0800e90f 	.word	0x0800e90f
 800e3ec:	0800e90f 	.word	0x0800e90f
 800e3f0:	0800e90f 	.word	0x0800e90f
 800e3f4:	0800e90f 	.word	0x0800e90f
 800e3f8:	0800e90f 	.word	0x0800e90f
 800e3fc:	0800e90f 	.word	0x0800e90f
 800e400:	0800e90f 	.word	0x0800e90f
 800e404:	0800e90f 	.word	0x0800e90f
 800e408:	0800e90f 	.word	0x0800e90f
 800e40c:	0800e90f 	.word	0x0800e90f
 800e410:	0800e90f 	.word	0x0800e90f
 800e414:	0800e90f 	.word	0x0800e90f
 800e418:	0800e90f 	.word	0x0800e90f
 800e41c:	0800e90f 	.word	0x0800e90f
 800e420:	0800e90f 	.word	0x0800e90f
 800e424:	0800e90f 	.word	0x0800e90f
 800e428:	0800e90f 	.word	0x0800e90f
 800e42c:	0800e6d7 	.word	0x0800e6d7
 800e430:	0800e787 	.word	0x0800e787
 800e434:	0800e7b9 	.word	0x0800e7b9
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800e438:	4b33      	ldr	r3, [pc, #204]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e43a:	68da      	ldr	r2, [r3, #12]
 800e43c:	4b32      	ldr	r3, [pc, #200]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e43e:	7a9b      	ldrb	r3, [r3, #10]
 800e440:	1c59      	adds	r1, r3, #1
 800e442:	b2c8      	uxtb	r0, r1
 800e444:	4930      	ldr	r1, [pc, #192]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e446:	7288      	strb	r0, [r1, #10]
 800e448:	4413      	add	r3, r2
 800e44a:	2200      	movs	r2, #0
 800e44c:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800e44e:	4b2e      	ldr	r3, [pc, #184]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e450:	68da      	ldr	r2, [r3, #12]
 800e452:	4b2d      	ldr	r3, [pc, #180]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e454:	7a9b      	ldrb	r3, [r3, #10]
 800e456:	1c59      	adds	r1, r3, #1
 800e458:	b2c8      	uxtb	r0, r1
 800e45a:	492b      	ldr	r1, [pc, #172]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e45c:	7288      	strb	r0, [r1, #10]
 800e45e:	4413      	add	r3, r2
 800e460:	2206      	movs	r2, #6
 800e462:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800e464:	4b28      	ldr	r3, [pc, #160]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e466:	68da      	ldr	r2, [r3, #12]
 800e468:	4b27      	ldr	r3, [pc, #156]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e46a:	7a9b      	ldrb	r3, [r3, #10]
 800e46c:	1c59      	adds	r1, r3, #1
 800e46e:	b2c8      	uxtb	r0, r1
 800e470:	4925      	ldr	r1, [pc, #148]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e472:	7288      	strb	r0, [r1, #10]
 800e474:	4413      	add	r3, r2
 800e476:	2201      	movs	r2, #1
 800e478:	701a      	strb	r2, [r3, #0]
        break;
 800e47a:	e251      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800e47c:	4b22      	ldr	r3, [pc, #136]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800e484:	e24c      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800e486:	4b21      	ldr	r3, [pc, #132]	; (800e50c <LmhpComplianceOnMcpsIndication+0x34c>)
 800e488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e48a:	2101      	movs	r1, #1
 800e48c:	2002      	movs	r0, #2
 800e48e:	4798      	blx	r3
        break;
 800e490:	e246      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	689a      	ldr	r2, [r3, #8]
 800e496:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e49a:	1c59      	adds	r1, r3, #1
 800e49c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e4a0:	4413      	add	r3, r2
 800e4a2:	781a      	ldrb	r2, [r3, #0]
 800e4a4:	4b18      	ldr	r3, [pc, #96]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e4a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800e4aa:	4b17      	ldr	r3, [pc, #92]	; (800e508 <LmhpComplianceOnMcpsIndication+0x348>)
 800e4ac:	2201      	movs	r2, #1
 800e4ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        break;
 800e4b2:	e235      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800e4b4:	2304      	movs	r3, #4
 800e4b6:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	689a      	ldr	r2, [r3, #8]
 800e4bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e4c0:	1c59      	adds	r1, r3, #1
 800e4c2:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e4c6:	4413      	add	r3, r2
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	bf14      	ite	ne
 800e4ce:	2301      	movne	r3, #1
 800e4d0:	2300      	moveq	r3, #0
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800e4d6:	f107 030c 	add.w	r3, r7, #12
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f004 fa08 	bl	80128f0 <LoRaMacMibSetRequestConfirm>
        break;
 800e4e0:	e21e      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	689a      	ldr	r2, [r3, #8]
 800e4e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e4ea:	1c59      	adds	r1, r3, #1
 800e4ec:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e4f0:	4413      	add	r3, r2
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	bf14      	ite	ne
 800e4f8:	2301      	movne	r3, #1
 800e4fa:	2300      	moveq	r3, #0
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	4618      	mov	r0, r3
 800e500:	f005 f824 	bl	801354c <LoRaMacTestSetDutyCycleOn>
        break;
 800e504:	e20c      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
 800e506:	bf00      	nop
 800e508:	200007d8 	.word	0x200007d8
 800e50c:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800e510:	4ba5      	ldr	r3, [pc, #660]	; (800e7a8 <LmhpComplianceOnMcpsIndication+0x5e8>)
 800e512:	f107 040c 	add.w	r4, r7, #12
 800e516:	461d      	mov	r5, r3
 800e518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e51a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e51c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e51e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	689a      	ldr	r2, [r3, #8]
 800e52c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e530:	1c59      	adds	r1, r3, #1
 800e532:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e536:	4413      	add	r3, r2
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800e53e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e542:	2b0a      	cmp	r3, #10
 800e544:	f200 81e5 	bhi.w	800e912 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800e548:	4b98      	ldr	r3, [pc, #608]	; (800e7ac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 81df 	beq.w	800e912 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800e554:	4b95      	ldr	r3, [pc, #596]	; (800e7ac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800e55e:	009b      	lsls	r3, r3, #2
 800e560:	3390      	adds	r3, #144	; 0x90
 800e562:	443b      	add	r3, r7
 800e564:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800e568:	4618      	mov	r0, r3
 800e56a:	4790      	blx	r2
            }
        }
        break;
 800e56c:	e1d1      	b.n	800e912 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	689a      	ldr	r2, [r3, #8]
 800e572:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e576:	1c59      	adds	r1, r3, #1
 800e578:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e57c:	4413      	add	r3, r2
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800e584:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d004      	beq.n	800e596 <LmhpComplianceOnMcpsIndication+0x3d6>
 800e58c:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e590:	2b02      	cmp	r3, #2
 800e592:	f040 81c0 	bne.w	800e916 <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800e596:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	bf14      	ite	ne
 800e59e:	2301      	movne	r3, #1
 800e5a0:	2300      	moveq	r3, #0
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	4b82      	ldr	r3, [pc, #520]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5a8:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800e5aa:	4b80      	ldr	r3, [pc, #512]	; (800e7ac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	689b      	ldr	r3, [r3, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f000 81b0 	beq.w	800e916 <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800e5b6:	4b7d      	ldr	r3, [pc, #500]	; (800e7ac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	4a7c      	ldr	r2, [pc, #496]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5be:	7a12      	ldrb	r2, [r2, #8]
 800e5c0:	4610      	mov	r0, r2
 800e5c2:	4798      	blx	r3
            }
        }
        break;
 800e5c4:	e1a7      	b.n	800e916 <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800e5c6:	4b7a      	ldr	r3, [pc, #488]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5c8:	68da      	ldr	r2, [r3, #12]
 800e5ca:	4b79      	ldr	r3, [pc, #484]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5cc:	7a9b      	ldrb	r3, [r3, #10]
 800e5ce:	1c59      	adds	r1, r3, #1
 800e5d0:	b2c8      	uxtb	r0, r1
 800e5d2:	4977      	ldr	r1, [pc, #476]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5d4:	7288      	strb	r0, [r1, #10]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	2208      	movs	r2, #8
 800e5da:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e5dc:	2301      	movs	r3, #1
 800e5de:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 800e5e2:	e019      	b.n	800e618 <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	689a      	ldr	r2, [r3, #8]
 800e5e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e5ec:	1c59      	adds	r1, r3, #1
 800e5ee:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e5f2:	4413      	add	r3, r2
 800e5f4:	781a      	ldrb	r2, [r3, #0]
 800e5f6:	4b6e      	ldr	r3, [pc, #440]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5f8:	68d9      	ldr	r1, [r3, #12]
 800e5fa:	4b6d      	ldr	r3, [pc, #436]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e5fc:	7a9b      	ldrb	r3, [r3, #10]
 800e5fe:	1c58      	adds	r0, r3, #1
 800e600:	b2c4      	uxtb	r4, r0
 800e602:	486b      	ldr	r0, [pc, #428]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e604:	7284      	strb	r4, [r0, #10]
 800e606:	440b      	add	r3, r1
 800e608:	3201      	adds	r2, #1
 800e60a:	b2d2      	uxtb	r2, r2
 800e60c:	701a      	strb	r2, [r3, #0]
             i++ )
 800e60e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800e612:	3301      	adds	r3, #1
 800e614:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800e618:	4b65      	ldr	r3, [pc, #404]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e61a:	7a5a      	ldrb	r2, [r3, #9]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	7b1b      	ldrb	r3, [r3, #12]
 800e620:	4293      	cmp	r3, r2
 800e622:	bf28      	it	cs
 800e624:	4613      	movcs	r3, r2
 800e626:	b2db      	uxtb	r3, r3
 800e628:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d3d9      	bcc.n	800e5e4 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800e630:	e176      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800e632:	4b5f      	ldr	r3, [pc, #380]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e634:	68da      	ldr	r2, [r3, #12]
 800e636:	4b5e      	ldr	r3, [pc, #376]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e638:	7a9b      	ldrb	r3, [r3, #10]
 800e63a:	1c59      	adds	r1, r3, #1
 800e63c:	b2c8      	uxtb	r0, r1
 800e63e:	495c      	ldr	r1, [pc, #368]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e640:	7288      	strb	r0, [r1, #10]
 800e642:	4413      	add	r3, r2
 800e644:	2209      	movs	r2, #9
 800e646:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800e648:	4b59      	ldr	r3, [pc, #356]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e64a:	8a18      	ldrh	r0, [r3, #16]
 800e64c:	4b58      	ldr	r3, [pc, #352]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e64e:	68da      	ldr	r2, [r3, #12]
 800e650:	4b57      	ldr	r3, [pc, #348]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e652:	7a9b      	ldrb	r3, [r3, #10]
 800e654:	1c59      	adds	r1, r3, #1
 800e656:	b2cc      	uxtb	r4, r1
 800e658:	4955      	ldr	r1, [pc, #340]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e65a:	728c      	strb	r4, [r1, #10]
 800e65c:	4413      	add	r3, r2
 800e65e:	b2c2      	uxtb	r2, r0
 800e660:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800e662:	4b53      	ldr	r3, [pc, #332]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e664:	8a1b      	ldrh	r3, [r3, #16]
 800e666:	0a1b      	lsrs	r3, r3, #8
 800e668:	b298      	uxth	r0, r3
 800e66a:	4b51      	ldr	r3, [pc, #324]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e66c:	68da      	ldr	r2, [r3, #12]
 800e66e:	4b50      	ldr	r3, [pc, #320]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e670:	7a9b      	ldrb	r3, [r3, #10]
 800e672:	1c59      	adds	r1, r3, #1
 800e674:	b2cc      	uxtb	r4, r1
 800e676:	494e      	ldr	r1, [pc, #312]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e678:	728c      	strb	r4, [r1, #10]
 800e67a:	4413      	add	r3, r2
 800e67c:	b2c2      	uxtb	r2, r0
 800e67e:	701a      	strb	r2, [r3, #0]
        break;
 800e680:	e14e      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800e682:	4b4b      	ldr	r3, [pc, #300]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e684:	2200      	movs	r2, #0
 800e686:	821a      	strh	r2, [r3, #16]
        break;
 800e688:	e14a      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800e68a:	2304      	movs	r3, #4
 800e68c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800e690:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e694:	4618      	mov	r0, r3
 800e696:	f004 fc9b 	bl	8012fd0 <LoRaMacMlmeRequest>
        break;
 800e69a:	e141      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800e69c:	4b45      	ldr	r3, [pc, #276]	; (800e7b4 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800e69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6a0:	4798      	blx	r3
        break;
 800e6a2:	e13d      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	689a      	ldr	r2, [r3, #8]
 800e6a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e6ac:	1c59      	adds	r1, r3, #1
 800e6ae:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e6b2:	4413      	add	r3, r2
 800e6b4:	781a      	ldrb	r2, [r3, #0]
 800e6b6:	4b3e      	ldr	r3, [pc, #248]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e6b8:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800e6ba:	4b3c      	ldr	r3, [pc, #240]	; (800e7ac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	68db      	ldr	r3, [r3, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	f000 812a 	beq.w	800e91a <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800e6c6:	4b39      	ldr	r3, [pc, #228]	; (800e7ac <LmhpComplianceOnMcpsIndication+0x5ec>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	4a38      	ldr	r2, [pc, #224]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e6ce:	7d52      	ldrb	r2, [r2, #21]
 800e6d0:	4610      	mov	r0, r2
 800e6d2:	4798      	blx	r3
        }
        break;
 800e6d4:	e121      	b.n	800e91a <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	7b1b      	ldrb	r3, [r3, #12]
 800e6da:	2b07      	cmp	r3, #7
 800e6dc:	f040 811f 	bne.w	800e91e <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800e6e0:	2305      	movs	r3, #5
 800e6e2:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	689a      	ldr	r2, [r3, #8]
 800e6ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e6ee:	4413      	add	r3, r2
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	b21a      	sxth	r2, r3
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6899      	ldr	r1, [r3, #8]
 800e6f8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	440b      	add	r3, r1
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	021b      	lsls	r3, r3, #8
 800e704:	b21b      	sxth	r3, r3
 800e706:	4313      	orrs	r3, r2
 800e708:	b21b      	sxth	r3, r3
 800e70a:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800e70c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            cmdIndex += 2;
 800e710:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e714:	3302      	adds	r3, #2
 800e716:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e722:	4413      	add	r3, r2
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	4619      	mov	r1, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	689a      	ldr	r2, [r3, #8]
 800e72c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e730:	3301      	adds	r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	781b      	ldrb	r3, [r3, #0]
 800e736:	021b      	lsls	r3, r3, #8
 800e738:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6899      	ldr	r1, [r3, #8]
 800e740:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e744:	3302      	adds	r3, #2
 800e746:	440b      	add	r3, r1
 800e748:	781b      	ldrb	r3, [r3, #0]
 800e74a:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800e74c:	4313      	orrs	r3, r2
 800e74e:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800e750:	2364      	movs	r3, #100	; 0x64
 800e752:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800e756:	64bb      	str	r3, [r7, #72]	; 0x48
                100;
            cmdIndex += 3;
 800e758:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e75c:	3303      	adds	r3, #3
 800e75e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	689a      	ldr	r2, [r3, #8]
 800e766:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800e76a:	1c59      	adds	r1, r3, #1
 800e76c:	f887 108f 	strb.w	r1, [r7, #143]	; 0x8f
 800e770:	4413      	add	r3, r2
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	b25b      	sxtb	r3, r3
 800e776:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800e77a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e77e:	4618      	mov	r0, r3
 800e780:	f004 fc26 	bl	8012fd0 <LoRaMacMlmeRequest>
        }
        break;
 800e784:	e0cb      	b.n	800e91e <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800e786:	2339      	movs	r3, #57	; 0x39
 800e788:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
        mibReq.Param.IsCertPortOn = false;
 800e78c:	2300      	movs	r3, #0
 800e78e:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800e792:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e796:	4618      	mov	r0, r3
 800e798:	f004 f8aa 	bl	80128f0 <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800e79c:	4b04      	ldr	r3, [pc, #16]	; (800e7b0 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800e79e:	2201      	movs	r2, #1
 800e7a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        break;
 800e7a4:	e0bc      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
 800e7a6:	bf00      	nop
 800e7a8:	0801ceb0 	.word	0x0801ceb0
 800e7ac:	20000810 	.word	0x20000810
 800e7b0:	200007d8 	.word	0x200007d8
 800e7b4:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800e7b8:	232a      	movs	r3, #42	; 0x2a
 800e7ba:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800e7bc:	f107 030c 	add.w	r3, r7, #12
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f003 feef 	bl	80125a4 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	63bb      	str	r3, [r7, #56]	; 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800e7ce:	4b62      	ldr	r3, [pc, #392]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e7d0:	68da      	ldr	r2, [r3, #12]
 800e7d2:	4b61      	ldr	r3, [pc, #388]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e7d4:	7a9b      	ldrb	r3, [r3, #10]
 800e7d6:	1c59      	adds	r1, r3, #1
 800e7d8:	b2c8      	uxtb	r0, r1
 800e7da:	495f      	ldr	r1, [pc, #380]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e7dc:	7288      	strb	r0, [r1, #10]
 800e7de:	4413      	add	r3, r2
 800e7e0:	227f      	movs	r2, #127	; 0x7f
 800e7e2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800e7e4:	4b5d      	ldr	r3, [pc, #372]	; (800e95c <LmhpComplianceOnMcpsIndication+0x79c>)
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	4b5b      	ldr	r3, [pc, #364]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e7ea:	68d9      	ldr	r1, [r3, #12]
 800e7ec:	4b5a      	ldr	r3, [pc, #360]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e7ee:	7a9b      	ldrb	r3, [r3, #10]
 800e7f0:	1c58      	adds	r0, r3, #1
 800e7f2:	b2c4      	uxtb	r4, r0
 800e7f4:	4858      	ldr	r0, [pc, #352]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e7f6:	7284      	strb	r4, [r0, #10]
 800e7f8:	440b      	add	r3, r1
 800e7fa:	78d2      	ldrb	r2, [r2, #3]
 800e7fc:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800e7fe:	4b57      	ldr	r3, [pc, #348]	; (800e95c <LmhpComplianceOnMcpsIndication+0x79c>)
 800e800:	681a      	ldr	r2, [r3, #0]
 800e802:	4b55      	ldr	r3, [pc, #340]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e804:	68d9      	ldr	r1, [r3, #12]
 800e806:	4b54      	ldr	r3, [pc, #336]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e808:	7a9b      	ldrb	r3, [r3, #10]
 800e80a:	1c58      	adds	r0, r3, #1
 800e80c:	b2c4      	uxtb	r4, r0
 800e80e:	4852      	ldr	r0, [pc, #328]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e810:	7284      	strb	r4, [r0, #10]
 800e812:	440b      	add	r3, r1
 800e814:	7892      	ldrb	r2, [r2, #2]
 800e816:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800e818:	4b50      	ldr	r3, [pc, #320]	; (800e95c <LmhpComplianceOnMcpsIndication+0x79c>)
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	4b4e      	ldr	r3, [pc, #312]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e81e:	68d9      	ldr	r1, [r3, #12]
 800e820:	4b4d      	ldr	r3, [pc, #308]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e822:	7a9b      	ldrb	r3, [r3, #10]
 800e824:	1c58      	adds	r0, r3, #1
 800e826:	b2c4      	uxtb	r4, r0
 800e828:	484b      	ldr	r0, [pc, #300]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e82a:	7284      	strb	r4, [r0, #10]
 800e82c:	440b      	add	r3, r1
 800e82e:	7852      	ldrb	r2, [r2, #1]
 800e830:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800e832:	4b4a      	ldr	r3, [pc, #296]	; (800e95c <LmhpComplianceOnMcpsIndication+0x79c>)
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	4b48      	ldr	r3, [pc, #288]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e838:	68d9      	ldr	r1, [r3, #12]
 800e83a:	4b47      	ldr	r3, [pc, #284]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e83c:	7a9b      	ldrb	r3, [r3, #10]
 800e83e:	1c58      	adds	r0, r3, #1
 800e840:	b2c4      	uxtb	r4, r0
 800e842:	4845      	ldr	r0, [pc, #276]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e844:	7284      	strb	r4, [r0, #10]
 800e846:	440b      	add	r3, r1
 800e848:	7812      	ldrb	r2, [r2, #0]
 800e84a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800e84c:	4b42      	ldr	r3, [pc, #264]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e84e:	68da      	ldr	r2, [r3, #12]
 800e850:	4b41      	ldr	r3, [pc, #260]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e852:	7a9b      	ldrb	r3, [r3, #10]
 800e854:	1c59      	adds	r1, r3, #1
 800e856:	b2c8      	uxtb	r0, r1
 800e858:	493f      	ldr	r1, [pc, #252]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e85a:	7288      	strb	r0, [r1, #10]
 800e85c:	4413      	add	r3, r2
 800e85e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e862:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800e864:	4b3c      	ldr	r3, [pc, #240]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e866:	68da      	ldr	r2, [r3, #12]
 800e868:	4b3b      	ldr	r3, [pc, #236]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e86a:	7a9b      	ldrb	r3, [r3, #10]
 800e86c:	1c59      	adds	r1, r3, #1
 800e86e:	b2c8      	uxtb	r0, r1
 800e870:	4939      	ldr	r1, [pc, #228]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e872:	7288      	strb	r0, [r1, #10]
 800e874:	4413      	add	r3, r2
 800e876:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800e87a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800e87c:	4b36      	ldr	r3, [pc, #216]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e87e:	68da      	ldr	r2, [r3, #12]
 800e880:	4b35      	ldr	r3, [pc, #212]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e882:	7a9b      	ldrb	r3, [r3, #10]
 800e884:	1c59      	adds	r1, r3, #1
 800e886:	b2c8      	uxtb	r0, r1
 800e888:	4933      	ldr	r1, [pc, #204]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e88a:	7288      	strb	r0, [r1, #10]
 800e88c:	4413      	add	r3, r2
 800e88e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800e892:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800e894:	4b30      	ldr	r3, [pc, #192]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e896:	68da      	ldr	r2, [r3, #12]
 800e898:	4b2f      	ldr	r3, [pc, #188]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e89a:	7a9b      	ldrb	r3, [r3, #10]
 800e89c:	1c59      	adds	r1, r3, #1
 800e89e:	b2c8      	uxtb	r0, r1
 800e8a0:	492d      	ldr	r1, [pc, #180]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8a2:	7288      	strb	r0, [r1, #10]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800e8aa:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800e8ac:	4b2a      	ldr	r3, [pc, #168]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8ae:	68da      	ldr	r2, [r3, #12]
 800e8b0:	4b29      	ldr	r3, [pc, #164]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8b2:	7a9b      	ldrb	r3, [r3, #10]
 800e8b4:	1c59      	adds	r1, r3, #1
 800e8b6:	b2c8      	uxtb	r0, r1
 800e8b8:	4927      	ldr	r1, [pc, #156]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8ba:	7288      	strb	r0, [r1, #10]
 800e8bc:	4413      	add	r3, r2
 800e8be:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800e8c2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800e8c4:	4b24      	ldr	r3, [pc, #144]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8c6:	68da      	ldr	r2, [r3, #12]
 800e8c8:	4b23      	ldr	r3, [pc, #140]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8ca:	7a9b      	ldrb	r3, [r3, #10]
 800e8cc:	1c59      	adds	r1, r3, #1
 800e8ce:	b2c8      	uxtb	r0, r1
 800e8d0:	4921      	ldr	r1, [pc, #132]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8d2:	7288      	strb	r0, [r1, #10]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800e8da:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800e8dc:	4b1e      	ldr	r3, [pc, #120]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8de:	68da      	ldr	r2, [r3, #12]
 800e8e0:	4b1d      	ldr	r3, [pc, #116]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8e2:	7a9b      	ldrb	r3, [r3, #10]
 800e8e4:	1c59      	adds	r1, r3, #1
 800e8e6:	b2c8      	uxtb	r0, r1
 800e8e8:	491b      	ldr	r1, [pc, #108]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8ea:	7288      	strb	r0, [r1, #10]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	f897 2039 	ldrb.w	r2, [r7, #57]	; 0x39
 800e8f2:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800e8f4:	4b18      	ldr	r3, [pc, #96]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8f6:	68da      	ldr	r2, [r3, #12]
 800e8f8:	4b17      	ldr	r3, [pc, #92]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e8fa:	7a9b      	ldrb	r3, [r3, #10]
 800e8fc:	1c59      	adds	r1, r3, #1
 800e8fe:	b2c8      	uxtb	r0, r1
 800e900:	4915      	ldr	r1, [pc, #84]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e902:	7288      	strb	r0, [r1, #10]
 800e904:	4413      	add	r3, r2
 800e906:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e90a:	701a      	strb	r2, [r3, #0]
        break;
 800e90c:	e008      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800e90e:	bf00      	nop
 800e910:	e006      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e912:	bf00      	nop
 800e914:	e004      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e916:	bf00      	nop
 800e918:	e002      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e91a:	bf00      	nop
 800e91c:	e000      	b.n	800e920 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800e91e:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800e920:	4b0d      	ldr	r3, [pc, #52]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e922:	7a9b      	ldrb	r3, [r3, #10]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d008      	beq.n	800e93a <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800e928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e92c:	480c      	ldr	r0, [pc, #48]	; (800e960 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e92e:	f00d f9c9 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800e932:	480b      	ldr	r0, [pc, #44]	; (800e960 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e934:	f00d f8e8 	bl	801bb08 <UTIL_TIMER_Start>
 800e938:	e00b      	b.n	800e952 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800e93a:	4809      	ldr	r0, [pc, #36]	; (800e960 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800e93c:	f00d f952 	bl	801bbe4 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800e940:	4b05      	ldr	r3, [pc, #20]	; (800e958 <LmhpComplianceOnMcpsIndication+0x798>)
 800e942:	2200      	movs	r2, #0
 800e944:	705a      	strb	r2, [r3, #1]
 800e946:	e004      	b.n	800e952 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e948:	bf00      	nop
 800e94a:	e002      	b.n	800e952 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e94c:	bf00      	nop
 800e94e:	e000      	b.n	800e952 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800e950:	bf00      	nop
    }
}
 800e952:	3790      	adds	r7, #144	; 0x90
 800e954:	46bd      	mov	sp, r7
 800e956:	bdb0      	pop	{r4, r5, r7, pc}
 800e958:	200007d8 	.word	0x200007d8
 800e95c:	20000810 	.word	0x20000810
 800e960:	20000814 	.word	0x20000814

0800e964 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800e96c:	bf00      	nop
    }
}
 800e96e:	bf00      	nop
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	bc80      	pop	{r7}
 800e976:	4770      	bx	lr

0800e978 <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800e980:	4b05      	ldr	r3, [pc, #20]	; (800e998 <LmhpComplianceOnMlmeIndication+0x20>)
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	f083 0301 	eor.w	r3, r3, #1
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b00      	cmp	r3, #0
    {
        return;
 800e98c:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	bc80      	pop	{r7}
 800e994:	4770      	bx	lr
 800e996:	bf00      	nop
 800e998:	200007d8 	.word	0x200007d8

0800e99c <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b082      	sub	sp, #8
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800e9a4:	4b04      	ldr	r3, [pc, #16]	; (800e9b8 <OnProcessTimer+0x1c>)
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800e9aa:	4b04      	ldr	r3, [pc, #16]	; (800e9bc <OnProcessTimer+0x20>)
 800e9ac:	695b      	ldr	r3, [r3, #20]
 800e9ae:	4798      	blx	r3
}
 800e9b0:	bf00      	nop
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}
 800e9b8:	200007d8 	.word	0x200007d8
 800e9bc:	200000e8 	.word	0x200000e8

0800e9c0 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800e9c0:	b590      	push	{r4, r7, lr}
 800e9c2:	b083      	sub	sp, #12
 800e9c4:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800e9c6:	f00d fa27 	bl	801be18 <UTIL_TIMER_GetCurrentTime>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	4a16      	ldr	r2, [pc, #88]	; (800ea28 <OnRadioTxDone+0x68>)
 800e9ce:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800e9d0:	4c16      	ldr	r4, [pc, #88]	; (800ea2c <OnRadioTxDone+0x6c>)
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f00c fca1 	bl	801b31c <SysTimeGet>
 800e9da:	f504 734e 	add.w	r3, r4, #824	; 0x338
 800e9de:	463a      	mov	r2, r7
 800e9e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9e4:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800e9e8:	4a11      	ldr	r2, [pc, #68]	; (800ea30 <OnRadioTxDone+0x70>)
 800e9ea:	7813      	ldrb	r3, [r2, #0]
 800e9ec:	f043 0320 	orr.w	r3, r3, #32
 800e9f0:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800e9f2:	4b0e      	ldr	r3, [pc, #56]	; (800ea2c <OnRadioTxDone+0x6c>)
 800e9f4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00a      	beq.n	800ea12 <OnRadioTxDone+0x52>
 800e9fc:	4b0b      	ldr	r3, [pc, #44]	; (800ea2c <OnRadioTxDone+0x6c>)
 800e9fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d004      	beq.n	800ea12 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea08:	4b08      	ldr	r3, [pc, #32]	; (800ea2c <OnRadioTxDone+0x6c>)
 800ea0a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ea12:	4b08      	ldr	r3, [pc, #32]	; (800ea34 <OnRadioTxDone+0x74>)
 800ea14:	2201      	movs	r2, #1
 800ea16:	2100      	movs	r1, #0
 800ea18:	2002      	movs	r0, #2
 800ea1a:	f00d faed 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ea1e:	bf00      	nop
 800ea20:	370c      	adds	r7, #12
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd90      	pop	{r4, r7, pc}
 800ea26:	bf00      	nop
 800ea28:	200018d8 	.word	0x200018d8
 800ea2c:	2000082c 	.word	0x2000082c
 800ea30:	200018d4 	.word	0x200018d4
 800ea34:	0801cedc 	.word	0x0801cedc

0800ea38 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	60f8      	str	r0, [r7, #12]
 800ea40:	4608      	mov	r0, r1
 800ea42:	4611      	mov	r1, r2
 800ea44:	461a      	mov	r2, r3
 800ea46:	4603      	mov	r3, r0
 800ea48:	817b      	strh	r3, [r7, #10]
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	813b      	strh	r3, [r7, #8]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ea52:	f00d f9e1 	bl	801be18 <UTIL_TIMER_GetCurrentTime>
 800ea56:	4603      	mov	r3, r0
 800ea58:	4a18      	ldr	r2, [pc, #96]	; (800eabc <OnRadioRxDone+0x84>)
 800ea5a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800ea5c:	4a17      	ldr	r2, [pc, #92]	; (800eabc <OnRadioRxDone+0x84>)
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800ea62:	4a16      	ldr	r2, [pc, #88]	; (800eabc <OnRadioRxDone+0x84>)
 800ea64:	897b      	ldrh	r3, [r7, #10]
 800ea66:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800ea68:	4a14      	ldr	r2, [pc, #80]	; (800eabc <OnRadioRxDone+0x84>)
 800ea6a:	893b      	ldrh	r3, [r7, #8]
 800ea6c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800ea6e:	4a13      	ldr	r2, [pc, #76]	; (800eabc <OnRadioRxDone+0x84>)
 800ea70:	79fb      	ldrb	r3, [r7, #7]
 800ea72:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800ea74:	4a12      	ldr	r2, [pc, #72]	; (800eac0 <OnRadioRxDone+0x88>)
 800ea76:	7813      	ldrb	r3, [r2, #0]
 800ea78:	f043 0310 	orr.w	r3, r3, #16
 800ea7c:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800ea7e:	4a10      	ldr	r2, [pc, #64]	; (800eac0 <OnRadioRxDone+0x88>)
 800ea80:	7813      	ldrb	r3, [r2, #0]
 800ea82:	f043 0301 	orr.w	r3, r3, #1
 800ea86:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800ea88:	4b0e      	ldr	r3, [pc, #56]	; (800eac4 <OnRadioRxDone+0x8c>)
 800ea8a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00a      	beq.n	800eaa8 <OnRadioRxDone+0x70>
 800ea92:	4b0c      	ldr	r3, [pc, #48]	; (800eac4 <OnRadioRxDone+0x8c>)
 800ea94:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d004      	beq.n	800eaa8 <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ea9e:	4b09      	ldr	r3, [pc, #36]	; (800eac4 <OnRadioRxDone+0x8c>)
 800eaa0:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800eaa8:	4b07      	ldr	r3, [pc, #28]	; (800eac8 <OnRadioRxDone+0x90>)
 800eaaa:	2201      	movs	r2, #1
 800eaac:	2100      	movs	r1, #0
 800eaae:	2002      	movs	r0, #2
 800eab0:	f00d faa2 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800eab4:	bf00      	nop
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	200018dc 	.word	0x200018dc
 800eac0:	200018d4 	.word	0x200018d4
 800eac4:	2000082c 	.word	0x2000082c
 800eac8:	0801ceec 	.word	0x0801ceec

0800eacc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800ead0:	4a0e      	ldr	r2, [pc, #56]	; (800eb0c <OnRadioTxTimeout+0x40>)
 800ead2:	7813      	ldrb	r3, [r2, #0]
 800ead4:	f043 0308 	orr.w	r3, r3, #8
 800ead8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eada:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <OnRadioTxTimeout+0x44>)
 800eadc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00a      	beq.n	800eafa <OnRadioTxTimeout+0x2e>
 800eae4:	4b0a      	ldr	r3, [pc, #40]	; (800eb10 <OnRadioTxTimeout+0x44>)
 800eae6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d004      	beq.n	800eafa <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eaf0:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <OnRadioTxTimeout+0x44>)
 800eaf2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eaf6:	691b      	ldr	r3, [r3, #16]
 800eaf8:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800eafa:	4b06      	ldr	r3, [pc, #24]	; (800eb14 <OnRadioTxTimeout+0x48>)
 800eafc:	2201      	movs	r2, #1
 800eafe:	2100      	movs	r1, #0
 800eb00:	2002      	movs	r0, #2
 800eb02:	f00d fa79 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb06:	bf00      	nop
 800eb08:	bd80      	pop	{r7, pc}
 800eb0a:	bf00      	nop
 800eb0c:	200018d4 	.word	0x200018d4
 800eb10:	2000082c 	.word	0x2000082c
 800eb14:	0801cefc 	.word	0x0801cefc

0800eb18 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800eb1c:	4a0b      	ldr	r2, [pc, #44]	; (800eb4c <OnRadioRxError+0x34>)
 800eb1e:	7813      	ldrb	r3, [r2, #0]
 800eb20:	f043 0304 	orr.w	r3, r3, #4
 800eb24:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eb26:	4b0a      	ldr	r3, [pc, #40]	; (800eb50 <OnRadioRxError+0x38>)
 800eb28:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00a      	beq.n	800eb46 <OnRadioRxError+0x2e>
 800eb30:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <OnRadioRxError+0x38>)
 800eb32:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb36:	691b      	ldr	r3, [r3, #16]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d004      	beq.n	800eb46 <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eb3c:	4b04      	ldr	r3, [pc, #16]	; (800eb50 <OnRadioRxError+0x38>)
 800eb3e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	4798      	blx	r3
    }
}
 800eb46:	bf00      	nop
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	200018d4 	.word	0x200018d4
 800eb50:	2000082c 	.word	0x2000082c

0800eb54 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800eb58:	4a0e      	ldr	r2, [pc, #56]	; (800eb94 <OnRadioRxTimeout+0x40>)
 800eb5a:	7813      	ldrb	r3, [r2, #0]
 800eb5c:	f043 0302 	orr.w	r3, r3, #2
 800eb60:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eb62:	4b0d      	ldr	r3, [pc, #52]	; (800eb98 <OnRadioRxTimeout+0x44>)
 800eb64:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00a      	beq.n	800eb82 <OnRadioRxTimeout+0x2e>
 800eb6c:	4b0a      	ldr	r3, [pc, #40]	; (800eb98 <OnRadioRxTimeout+0x44>)
 800eb6e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb72:	691b      	ldr	r3, [r3, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d004      	beq.n	800eb82 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800eb78:	4b07      	ldr	r3, [pc, #28]	; (800eb98 <OnRadioRxTimeout+0x44>)
 800eb7a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800eb7e:	691b      	ldr	r3, [r3, #16]
 800eb80:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800eb82:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <OnRadioRxTimeout+0x48>)
 800eb84:	2201      	movs	r2, #1
 800eb86:	2100      	movs	r1, #0
 800eb88:	2002      	movs	r0, #2
 800eb8a:	f00d fa35 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 800eb8e:	bf00      	nop
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	200018d4 	.word	0x200018d4
 800eb98:	2000082c 	.word	0x2000082c
 800eb9c:	0801cf0c 	.word	0x0801cf0c

0800eba0 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800eba0:	b480      	push	{r7}
 800eba2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eba4:	4b08      	ldr	r3, [pc, #32]	; (800ebc8 <UpdateRxSlotIdleState+0x28>)
 800eba6:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ebaa:	2b02      	cmp	r3, #2
 800ebac:	d004      	beq.n	800ebb8 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ebae:	4b07      	ldr	r3, [pc, #28]	; (800ebcc <UpdateRxSlotIdleState+0x2c>)
 800ebb0:	2206      	movs	r2, #6
 800ebb2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800ebb6:	e003      	b.n	800ebc0 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ebb8:	4b04      	ldr	r3, [pc, #16]	; (800ebcc <UpdateRxSlotIdleState+0x2c>)
 800ebba:	2202      	movs	r2, #2
 800ebbc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
}
 800ebc0:	bf00      	nop
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bc80      	pop	{r7}
 800ebc6:	4770      	bx	lr
 800ebc8:	20000d4c 	.word	0x20000d4c
 800ebcc:	2000082c 	.word	0x2000082c

0800ebd0 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b08e      	sub	sp, #56	; 0x38
 800ebd4:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ebd6:	4b3e      	ldr	r3, [pc, #248]	; (800ecd0 <ProcessRadioTxDone+0x100>)
 800ebd8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d002      	beq.n	800ebe6 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800ebe0:	4b3c      	ldr	r3, [pc, #240]	; (800ecd4 <ProcessRadioTxDone+0x104>)
 800ebe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebe4:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800ebe6:	4b3c      	ldr	r3, [pc, #240]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ebe8:	f8d3 33b0 	ldr.w	r3, [r3, #944]	; 0x3b0
 800ebec:	4619      	mov	r1, r3
 800ebee:	483b      	ldr	r0, [pc, #236]	; (800ecdc <ProcessRadioTxDone+0x10c>)
 800ebf0:	f00d f868 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800ebf4:	4839      	ldr	r0, [pc, #228]	; (800ecdc <ProcessRadioTxDone+0x10c>)
 800ebf6:	f00c ff87 	bl	801bb08 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800ebfa:	4b37      	ldr	r3, [pc, #220]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ebfc:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800ec00:	4619      	mov	r1, r3
 800ec02:	4837      	ldr	r0, [pc, #220]	; (800ece0 <ProcessRadioTxDone+0x110>)
 800ec04:	f00d f85e 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800ec08:	4835      	ldr	r0, [pc, #212]	; (800ece0 <ProcessRadioTxDone+0x110>)
 800ec0a:	f00c ff7d 	bl	801bb08 <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800ec0e:	4b32      	ldr	r3, [pc, #200]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ec10:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d01a      	beq.n	800ec4e <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800ec18:	2315      	movs	r3, #21
 800ec1a:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ec1e:	4b2c      	ldr	r3, [pc, #176]	; (800ecd0 <ProcessRadioTxDone+0x100>)
 800ec20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec24:	f107 0220 	add.w	r2, r7, #32
 800ec28:	4611      	mov	r1, r2
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f006 fd20 	bl	8015670 <RegionGetPhyParam>
 800ec30:	4603      	mov	r3, r0
 800ec32:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ec34:	4b28      	ldr	r3, [pc, #160]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ec36:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800ec3a:	69fb      	ldr	r3, [r7, #28]
 800ec3c:	4413      	add	r3, r2
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4828      	ldr	r0, [pc, #160]	; (800ece4 <ProcessRadioTxDone+0x114>)
 800ec42:	f00d f83f 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800ec46:	4827      	ldr	r0, [pc, #156]	; (800ece4 <ProcessRadioTxDone+0x114>)
 800ec48:	f00c ff5e 	bl	801bb08 <UTIL_TIMER_Start>
 800ec4c:	e003      	b.n	800ec56 <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ec4e:	4b22      	ldr	r3, [pc, #136]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ec50:	2200      	movs	r2, #0
 800ec52:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ec56:	4b24      	ldr	r3, [pc, #144]	; (800ece8 <ProcessRadioTxDone+0x118>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	4a1d      	ldr	r2, [pc, #116]	; (800ecd0 <ProcessRadioTxDone+0x100>)
 800ec5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ec5e:	4b1e      	ldr	r3, [pc, #120]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ec60:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800ec64:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ec66:	4b20      	ldr	r3, [pc, #128]	; (800ece8 <ProcessRadioTxDone+0x118>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ec6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ec70:	4618      	mov	r0, r3
 800ec72:	f00c fb8b 	bl	801b38c <SysTimeGetMcuTime>
 800ec76:	4638      	mov	r0, r7
 800ec78:	4b15      	ldr	r3, [pc, #84]	; (800ecd0 <ProcessRadioTxDone+0x100>)
 800ec7a:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800ec7e:	9200      	str	r2, [sp, #0]
 800ec80:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800ec84:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ec88:	ca06      	ldmia	r2, {r1, r2}
 800ec8a:	f00c fae0 	bl	801b24e <SysTimeSub>
 800ec8e:	f107 0314 	add.w	r3, r7, #20
 800ec92:	463a      	mov	r2, r7
 800ec94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec98:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800ec9c:	4b0e      	ldr	r3, [pc, #56]	; (800ecd8 <ProcessRadioTxDone+0x108>)
 800ec9e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800eca2:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800eca4:	2301      	movs	r3, #1
 800eca6:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800eca8:	4b09      	ldr	r3, [pc, #36]	; (800ecd0 <ProcessRadioTxDone+0x100>)
 800ecaa:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800ecb6:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <ProcessRadioTxDone+0x100>)
 800ecb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ecbc:	f107 0208 	add.w	r2, r7, #8
 800ecc0:	4611      	mov	r1, r2
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f006 fcec 	bl	80156a0 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800ecc8:	bf00      	nop
 800ecca:	3730      	adds	r7, #48	; 0x30
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	20000d4c 	.word	0x20000d4c
 800ecd4:	0801d538 	.word	0x0801d538
 800ecd8:	2000082c 	.word	0x2000082c
 800ecdc:	20000bac 	.word	0x20000bac
 800ece0:	20000bc4 	.word	0x20000bc4
 800ece4:	20000c30 	.word	0x20000c30
 800ece8:	200018d8 	.word	0x200018d8

0800ecec <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ecf0:	4b10      	ldr	r3, [pc, #64]	; (800ed34 <PrepareRxDoneAbort+0x48>)
 800ecf2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ecf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecfa:	4a0e      	ldr	r2, [pc, #56]	; (800ed34 <PrepareRxDoneAbort+0x48>)
 800ecfc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 800ed00:	4b0c      	ldr	r3, [pc, #48]	; (800ed34 <PrepareRxDoneAbort+0x48>)
 800ed02:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d002      	beq.n	800ed10 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	f001 f99c 	bl	8010048 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ed10:	4a08      	ldr	r2, [pc, #32]	; (800ed34 <PrepareRxDoneAbort+0x48>)
 800ed12:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed16:	f043 0302 	orr.w	r3, r3, #2
 800ed1a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ed1e:	4a05      	ldr	r2, [pc, #20]	; (800ed34 <PrepareRxDoneAbort+0x48>)
 800ed20:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800ed24:	f043 0320 	orr.w	r3, r3, #32
 800ed28:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

    UpdateRxSlotIdleState( );
 800ed2c:	f7ff ff38 	bl	800eba0 <UpdateRxSlotIdleState>
}
 800ed30:	bf00      	nop
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	2000082c 	.word	0x2000082c

0800ed38 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ed38:	b590      	push	{r4, r7, lr}
 800ed3a:	b0a7      	sub	sp, #156	; 0x9c
 800ed3c:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ed3e:	2312      	movs	r3, #18
 800ed40:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ed44:	4bbd      	ldr	r3, [pc, #756]	; (800f03c <ProcessRadioRxDone+0x304>)
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    uint16_t size = RxDoneParams.Size;
 800ed4c:	4bbb      	ldr	r3, [pc, #748]	; (800f03c <ProcessRadioRxDone+0x304>)
 800ed4e:	891b      	ldrh	r3, [r3, #8]
 800ed50:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800ed54:	4bb9      	ldr	r3, [pc, #740]	; (800f03c <ProcessRadioRxDone+0x304>)
 800ed56:	895b      	ldrh	r3, [r3, #10]
 800ed58:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
    int8_t snr = RxDoneParams.Snr;
 800ed5c:	4bb7      	ldr	r3, [pc, #732]	; (800f03c <ProcessRadioRxDone+0x304>)
 800ed5e:	7b1b      	ldrb	r3, [r3, #12]
 800ed60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    uint8_t pktHeaderLen = 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

    uint32_t downLinkCounter = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ed6e:	4bb4      	ldr	r3, [pc, #720]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ed70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ed74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint8_t multicast = 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800ed84:	4aaf      	ldr	r2, [pc, #700]	; (800f044 <ProcessRadioRxDone+0x30c>)
 800ed86:	7813      	ldrb	r3, [r2, #0]
 800ed88:	f36f 0300 	bfc	r3, #0, #1
 800ed8c:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800ed8e:	4bae      	ldr	r3, [pc, #696]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800ed96:	4aac      	ldr	r2, [pc, #688]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ed98:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ed9c:	f8a2 3490 	strh.w	r3, [r2, #1168]	; 0x490
    MacCtx.RxStatus.Snr = snr;
 800eda0:	4aa9      	ldr	r2, [pc, #676]	; (800f048 <ProcessRadioRxDone+0x310>)
 800eda2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eda6:	f882 3492 	strb.w	r3, [r2, #1170]	; 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800edaa:	4ba7      	ldr	r3, [pc, #668]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edac:	f893 2494 	ldrb.w	r2, [r3, #1172]	; 0x494
 800edb0:	4ba5      	ldr	r3, [pc, #660]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edb2:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
    MacCtx.McpsIndication.Port = 0;
 800edb6:	4ba4      	ldr	r3, [pc, #656]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800edbe:	4ba2      	ldr	r3, [pc, #648]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edc0:	2200      	movs	r2, #0
 800edc2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800edc6:	4ba0      	ldr	r3, [pc, #640]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800edce:	4b9e      	ldr	r3, [pc, #632]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edd0:	2200      	movs	r2, #0
 800edd2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800edd6:	4b9c      	ldr	r3, [pc, #624]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edd8:	2200      	movs	r2, #0
 800edda:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
    MacCtx.McpsIndication.RxData = false;
 800edde:	4b9a      	ldr	r3, [pc, #616]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800ede6:	4b98      	ldr	r3, [pc, #608]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ede8:	2200      	movs	r2, #0
 800edea:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800edee:	4b96      	ldr	r3, [pc, #600]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edf0:	2200      	movs	r2, #0
 800edf2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800edf6:	4b94      	ldr	r3, [pc, #592]	; (800f048 <ProcessRadioRxDone+0x310>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800edfe:	4b92      	ldr	r3, [pc, #584]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ee06:	4b90      	ldr	r3, [pc, #576]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee08:	2200      	movs	r2, #0
 800ee0a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800ee0e:	4b8e      	ldr	r3, [pc, #568]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee10:	2200      	movs	r2, #0
 800ee12:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ee16:	4b8d      	ldr	r3, [pc, #564]	; (800f04c <ProcessRadioRxDone+0x314>)
 800ee18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee1a:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ee1c:	4b8a      	ldr	r3, [pc, #552]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee1e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d102      	bne.n	800ee2c <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ee26:	488a      	ldr	r0, [pc, #552]	; (800f050 <ProcessRadioRxDone+0x318>)
 800ee28:	f00c fedc 	bl	801bbe4 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ee2c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ee30:	4619      	mov	r1, r3
 800ee32:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ee36:	f004 fccf 	bl	80137d8 <LoRaMacClassBRxBeacon>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00b      	beq.n	800ee58 <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ee40:	4a81      	ldr	r2, [pc, #516]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee42:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800ee46:	f8a2 3482 	strh.w	r3, [r2, #1154]	; 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ee4a:	4a7f      	ldr	r2, [pc, #508]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee4c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ee50:	f882 3484 	strb.w	r3, [r2, #1156]	; 0x484
        return;
 800ee54:	f000 bc22 	b.w	800f69c <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ee58:	4b79      	ldr	r3, [pc, #484]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ee5a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ee5e:	2b01      	cmp	r3, #1
 800ee60:	d11e      	bne.n	800eea0 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ee62:	f004 fccc 	bl	80137fe <LoRaMacClassBIsPingExpected>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00a      	beq.n	800ee82 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	f004 fc7d 	bl	801376c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ee72:	2000      	movs	r0, #0
 800ee74:	f004 fc9e 	bl	80137b4 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ee78:	4b73      	ldr	r3, [pc, #460]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee7a:	2204      	movs	r2, #4
 800ee7c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
 800ee80:	e00e      	b.n	800eea0 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ee82:	f004 fcc3 	bl	801380c <LoRaMacClassBIsMulticastExpected>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d009      	beq.n	800eea0 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ee8c:	2000      	movs	r0, #0
 800ee8e:	f004 fc77 	bl	8013780 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ee92:	2000      	movs	r0, #0
 800ee94:	f004 fc97 	bl	80137c6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ee98:	4b6b      	ldr	r3, [pc, #428]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ee9a:	2205      	movs	r2, #5
 800ee9c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800eea0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800eea4:	1c5a      	adds	r2, r3, #1
 800eea6:	f887 207e 	strb.w	r2, [r7, #126]	; 0x7e
 800eeaa:	461a      	mov	r2, r3
 800eeac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800eeb0:	4413      	add	r3, r2
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c

    switch( macHdr.Bits.MType )
 800eeb8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800eebc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	3b01      	subs	r3, #1
 800eec4:	2b06      	cmp	r3, #6
 800eec6:	f200 83bd 	bhi.w	800f644 <ProcessRadioRxDone+0x90c>
 800eeca:	a201      	add	r2, pc, #4	; (adr r2, 800eed0 <ProcessRadioRxDone+0x198>)
 800eecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed0:	0800eeed 	.word	0x0800eeed
 800eed4:	0800f645 	.word	0x0800f645
 800eed8:	0800f081 	.word	0x0800f081
 800eedc:	0800f645 	.word	0x0800f645
 800eee0:	0800f079 	.word	0x0800f079
 800eee4:	0800f645 	.word	0x0800f645
 800eee8:	0800f5d7 	.word	0x0800f5d7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800eeec:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800eef0:	2b10      	cmp	r3, #16
 800eef2:	d806      	bhi.n	800ef02 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eef4:	4b54      	ldr	r3, [pc, #336]	; (800f048 <ProcessRadioRxDone+0x310>)
 800eef6:	2201      	movs	r2, #1
 800eef8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800eefc:	f7ff fef6 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800ef00:	e3cc      	b.n	800f69c <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800ef02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef06:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800ef08:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ef10:	4b4b      	ldr	r3, [pc, #300]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef12:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d006      	beq.n	800ef28 <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ef1a:	4b4b      	ldr	r3, [pc, #300]	; (800f048 <ProcessRadioRxDone+0x310>)
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800ef22:	f7ff fee3 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800ef26:	e3b9      	b.n	800f69c <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ef28:	f7fe f874 	bl	800d014 <SecureElementGetJoinEui>
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	f107 030c 	add.w	r3, r7, #12
 800ef32:	461a      	mov	r2, r3
 800ef34:	20ff      	movs	r0, #255	; 0xff
 800ef36:	f005 fe1f 	bl	8014b78 <LoRaMacCryptoHandleJoinAccept>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ef40:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f040 8085 	bne.w	800f054 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ef4a:	7d7b      	ldrb	r3, [r7, #21]
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	4b3c      	ldr	r3, [pc, #240]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef50:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ef54:	4b3a      	ldr	r3, [pc, #232]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef56:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ef5a:	7dbb      	ldrb	r3, [r7, #22]
 800ef5c:	021b      	lsls	r3, r3, #8
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	4a37      	ldr	r2, [pc, #220]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef62:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ef66:	4b36      	ldr	r3, [pc, #216]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef68:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800ef6c:	7dfb      	ldrb	r3, [r7, #23]
 800ef6e:	041b      	lsls	r3, r3, #16
 800ef70:	4313      	orrs	r3, r2
 800ef72:	4a33      	ldr	r2, [pc, #204]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef74:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	4a31      	ldr	r2, [pc, #196]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef7c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ef80:	7f3b      	ldrb	r3, [r7, #28]
 800ef82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	461a      	mov	r2, r3
 800ef8a:	4b2d      	ldr	r3, [pc, #180]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef8c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ef90:	7f3b      	ldrb	r3, [r7, #28]
 800ef92:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	461a      	mov	r2, r3
 800ef9a:	4b29      	ldr	r3, [pc, #164]	; (800f040 <ProcessRadioRxDone+0x308>)
 800ef9c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800efa0:	7f3b      	ldrb	r3, [r7, #28]
 800efa2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	461a      	mov	r2, r3
 800efaa:	4b25      	ldr	r3, [pc, #148]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800efb0:	7f7b      	ldrb	r3, [r7, #29]
 800efb2:	461a      	mov	r2, r3
 800efb4:	4b22      	ldr	r3, [pc, #136]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efb6:	651a      	str	r2, [r3, #80]	; 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800efb8:	4b21      	ldr	r3, [pc, #132]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d102      	bne.n	800efc6 <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800efc0:	4b1f      	ldr	r3, [pc, #124]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efc2:	2201      	movs	r2, #1
 800efc4:	651a      	str	r2, [r3, #80]	; 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800efc6:	4b1e      	ldr	r3, [pc, #120]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800efce:	fb02 f303 	mul.w	r3, r2, r3
 800efd2:	4a1b      	ldr	r2, [pc, #108]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efd4:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800efd6:	4b1a      	ldr	r3, [pc, #104]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efda:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800efde:	4a18      	ldr	r2, [pc, #96]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efe0:	6553      	str	r3, [r2, #84]	; 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800efe2:	4b17      	ldr	r3, [pc, #92]	; (800f040 <ProcessRadioRxDone+0x308>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800efea:	f107 030c 	add.w	r3, r7, #12
 800efee:	3312      	adds	r3, #18
 800eff0:	677b      	str	r3, [r7, #116]	; 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800eff2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800eff6:	b2db      	uxtb	r3, r3
 800eff8:	3b11      	subs	r3, #17
 800effa:	b2db      	uxtb	r3, r3
 800effc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800f000:	4b11      	ldr	r3, [pc, #68]	; (800f048 <ProcessRadioRxDone+0x310>)
 800f002:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 800f006:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800f00a:	4b0d      	ldr	r3, [pc, #52]	; (800f040 <ProcessRadioRxDone+0x308>)
 800f00c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f010:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800f014:	4611      	mov	r1, r2
 800f016:	4618      	mov	r0, r3
 800f018:	f006 fb7c 	bl	8015714 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f01c:	4b08      	ldr	r3, [pc, #32]	; (800f040 <ProcessRadioRxDone+0x308>)
 800f01e:	2202      	movs	r2, #2
 800f020:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f024:	2001      	movs	r0, #1
 800f026:	f005 f8cf 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 800f02a:	4603      	mov	r3, r0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d01b      	beq.n	800f068 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800f030:	2101      	movs	r1, #1
 800f032:	2000      	movs	r0, #0
 800f034:	f005 f83c 	bl	80140b0 <LoRaMacConfirmQueueSetStatus>
 800f038:	e016      	b.n	800f068 <ProcessRadioRxDone+0x330>
 800f03a:	bf00      	nop
 800f03c:	200018dc 	.word	0x200018dc
 800f040:	20000d4c 	.word	0x20000d4c
 800f044:	200018d4 	.word	0x200018d4
 800f048:	2000082c 	.word	0x2000082c
 800f04c:	0801d538 	.word	0x0801d538
 800f050:	20000bc4 	.word	0x20000bc4
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800f054:	2001      	movs	r0, #1
 800f056:	f005 f8b7 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 800f05a:	4603      	mov	r3, r0
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d003      	beq.n	800f068 <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800f060:	2101      	movs	r1, #1
 800f062:	2007      	movs	r0, #7
 800f064:	f005 f824 	bl	80140b0 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800f068:	4ab9      	ldr	r2, [pc, #740]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f06a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f06e:	f043 0308 	orr.w	r3, r3, #8
 800f072:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800f076:	e2ec      	b.n	800f652 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f078:	4bb5      	ldr	r3, [pc, #724]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f080:	4bb4      	ldr	r3, [pc, #720]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f082:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800f086:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800f08a:	4bb1      	ldr	r3, [pc, #708]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f08c:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 800f090:	b25b      	sxtb	r3, r3
 800f092:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f096:	230d      	movs	r3, #13
 800f098:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f09c:	4bad      	ldr	r3, [pc, #692]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f09e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f0a6:	230e      	movs	r3, #14
 800f0a8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f0ac:	4ba9      	ldr	r3, [pc, #676]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f0ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0b2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800f0b6:	4611      	mov	r1, r2
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f006 fad9 	bl	8015670 <RegionGetPhyParam>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	667b      	str	r3, [r7, #100]	; 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800f0c2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f0c6:	3b0d      	subs	r3, #13
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	b21b      	sxth	r3, r3
 800f0cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f0d0:	b21a      	sxth	r2, r3
 800f0d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0d4:	b21b      	sxth	r3, r3
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	dc03      	bgt.n	800f0e2 <ProcessRadioRxDone+0x3aa>
 800f0da:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f0de:	2b0b      	cmp	r3, #11
 800f0e0:	d806      	bhi.n	800f0f0 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f0e2:	4b9b      	ldr	r3, [pc, #620]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f0ea:	f7ff fdff 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800f0ee:	e2d5      	b.n	800f69c <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800f0f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f0f4:	637b      	str	r3, [r7, #52]	; 0x34
            macMsgData.BufSize = size;
 800f0f6:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800f100:	4b95      	ldr	r3, [pc, #596]	; (800f358 <ProcessRadioRxDone+0x620>)
 800f102:	65bb      	str	r3, [r7, #88]	; 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800f104:	23ff      	movs	r3, #255	; 0xff
 800f106:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800f10a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f10e:	4618      	mov	r0, r3
 800f110:	f006 f831 	bl	8015176 <LoRaMacParserData>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d006      	beq.n	800f128 <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f11a:	4b8d      	ldr	r3, [pc, #564]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f11c:	2201      	movs	r2, #1
 800f11e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f122:	f7ff fde3 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800f126:	e2b9      	b.n	800f69c <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f128:	4b8a      	ldr	r3, [pc, #552]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f12a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d132      	bne.n	800f198 <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800f132:	f004 fb64 	bl	80137fe <LoRaMacClassBIsPingExpected>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d014      	beq.n	800f166 <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f13c:	2000      	movs	r0, #0
 800f13e:	f004 fb15 	bl	801376c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800f142:	2000      	movs	r0, #0
 800f144:	f004 fb36 	bl	80137b4 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800f148:	4b81      	ldr	r3, [pc, #516]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f14a:	2204      	movs	r2, #4
 800f14c:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f152:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f156:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	4619      	mov	r1, r3
 800f15e:	4610      	mov	r0, r2
 800f160:	f004 fbd6 	bl	8013910 <LoRaMacClassBSetFPendingBit>
 800f164:	e018      	b.n	800f198 <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f166:	f004 fb51 	bl	801380c <LoRaMacClassBIsMulticastExpected>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d013      	beq.n	800f198 <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f170:	2000      	movs	r0, #0
 800f172:	f004 fb05 	bl	8013780 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f176:	2000      	movs	r0, #0
 800f178:	f004 fb25 	bl	80137c6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800f17c:	4b74      	ldr	r3, [pc, #464]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f17e:	2205      	movs	r2, #5
 800f180:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800f184:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f186:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f18a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f18e:	b2db      	uxtb	r3, r3
 800f190:	4619      	mov	r1, r3
 800f192:	4610      	mov	r0, r2
 800f194:	f004 fbbc 	bl	8013910 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800f198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f19a:	4a6d      	ldr	r2, [pc, #436]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f19c:	f8c2 3438 	str.w	r3, [r2, #1080]	; 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800f1a0:	1dba      	adds	r2, r7, #6
 800f1a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f002 fd13 	bl	8011bd4 <DetermineFrameType>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d006      	beq.n	800f1c2 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1b4:	4b66      	ldr	r3, [pc, #408]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f1b6:	2201      	movs	r2, #1
 800f1b8:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f1bc:	f7ff fd96 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800f1c0:	e26c      	b.n	800f69c <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
            downLinkCounter = 0;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800f1d2:	e049      	b.n	800f268 <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f1d4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f1d8:	4a5e      	ldr	r2, [pc, #376]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f1da:	212c      	movs	r1, #44	; 0x2c
 800f1dc:	fb01 f303 	mul.w	r3, r1, r3
 800f1e0:	4413      	add	r3, r2
 800f1e2:	33dc      	adds	r3, #220	; 0xdc
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d138      	bne.n	800f25e <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800f1ec:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f1f0:	4a58      	ldr	r2, [pc, #352]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f1f2:	212c      	movs	r1, #44	; 0x2c
 800f1f4:	fb01 f303 	mul.w	r3, r1, r3
 800f1f8:	4413      	add	r3, r2
 800f1fa:	33da      	adds	r3, #218	; 0xda
 800f1fc:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d02d      	beq.n	800f25e <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800f202:	2301      	movs	r3, #1
 800f204:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800f208:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f20c:	4a51      	ldr	r2, [pc, #324]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f20e:	212c      	movs	r1, #44	; 0x2c
 800f210:	fb01 f303 	mul.w	r3, r1, r3
 800f214:	4413      	add	r3, r2
 800f216:	33db      	adds	r3, #219	; 0xdb
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800f21e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f222:	4a4c      	ldr	r2, [pc, #304]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f224:	212c      	movs	r1, #44	; 0x2c
 800f226:	fb01 f303 	mul.w	r3, r1, r3
 800f22a:	4413      	add	r3, r2
 800f22c:	33f8      	adds	r3, #248	; 0xf8
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800f234:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f238:	4a46      	ldr	r2, [pc, #280]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f23a:	212c      	movs	r1, #44	; 0x2c
 800f23c:	fb01 f303 	mul.w	r3, r1, r3
 800f240:	4413      	add	r3, r2
 800f242:	33dc      	adds	r3, #220	; 0xdc
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800f24a:	4b42      	ldr	r3, [pc, #264]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f24c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f250:	2b02      	cmp	r3, #2
 800f252:	d10e      	bne.n	800f272 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f254:	4b3e      	ldr	r3, [pc, #248]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f256:	2203      	movs	r2, #3
 800f258:	f883 2493 	strb.w	r2, [r3, #1171]	; 0x493
                    }
                    break;
 800f25c:	e009      	b.n	800f272 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f25e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f262:	3301      	adds	r3, #1
 800f264:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
 800f268:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d0b1      	beq.n	800f1d4 <ProcessRadioRxDone+0x49c>
 800f270:	e000      	b.n	800f274 <ProcessRadioRxDone+0x53c>
                    break;
 800f272:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f274:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f278:	2b01      	cmp	r3, #1
 800f27a:	d117      	bne.n	800f2ac <ProcessRadioRxDone+0x574>
 800f27c:	79bb      	ldrb	r3, [r7, #6]
 800f27e:	2b03      	cmp	r3, #3
 800f280:	d10d      	bne.n	800f29e <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f282:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f286:	f003 0320 	and.w	r3, r3, #32
 800f28a:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d106      	bne.n	800f29e <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800f290:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f298:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d006      	beq.n	800f2ac <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f29e:	4b2c      	ldr	r3, [pc, #176]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                PrepareRxDoneAbort( );
 800f2a6:	f7ff fd21 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800f2aa:	e1f7      	b.n	800f69c <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800f2ac:	79b9      	ldrb	r1, [r7, #6]
 800f2ae:	4c29      	ldr	r4, [pc, #164]	; (800f354 <ProcessRadioRxDone+0x61c>)
 800f2b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f2b4:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800f2b8:	f107 0308 	add.w	r3, r7, #8
 800f2bc:	9301      	str	r3, [sp, #4]
 800f2be:	1dfb      	adds	r3, r7, #7
 800f2c0:	9300      	str	r3, [sp, #0]
 800f2c2:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800f2c6:	f000 fee7 	bl	8010098 <GetFCntDown>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f2d0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d017      	beq.n	800f308 <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800f2d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f2dc:	2b07      	cmp	r3, #7
 800f2de:	d104      	bne.n	800f2ea <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800f2e0:	4b1b      	ldr	r3, [pc, #108]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f2e2:	2208      	movs	r2, #8
 800f2e4:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800f2e8:	e003      	b.n	800f2f2 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f2ea:	4b19      	ldr	r3, [pc, #100]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f2f2:	68bb      	ldr	r3, [r7, #8]
 800f2f4:	4a16      	ldr	r2, [pc, #88]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f2f6:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	4a14      	ldr	r2, [pc, #80]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f2fe:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
                PrepareRxDoneAbort( );
 800f302:	f7ff fcf3 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800f306:	e1c9      	b.n	800f69c <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800f308:	79fa      	ldrb	r2, [r7, #7]
 800f30a:	68b9      	ldr	r1, [r7, #8]
 800f30c:	f897 008a 	ldrb.w	r0, [r7, #138]	; 0x8a
 800f310:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f314:	9300      	str	r3, [sp, #0]
 800f316:	460b      	mov	r3, r1
 800f318:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800f31c:	f005 fd78 	bl	8014e10 <LoRaMacCryptoUnsecureMessage>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800f326:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d016      	beq.n	800f35c <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800f32e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800f332:	2b02      	cmp	r3, #2
 800f334:	d104      	bne.n	800f340 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800f336:	4b06      	ldr	r3, [pc, #24]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f338:	220a      	movs	r2, #10
 800f33a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
 800f33e:	e003      	b.n	800f348 <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800f340:	4b03      	ldr	r3, [pc, #12]	; (800f350 <ProcessRadioRxDone+0x618>)
 800f342:	220b      	movs	r2, #11
 800f344:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                }
                PrepareRxDoneAbort( );
 800f348:	f7ff fcd0 	bl	800ecec <PrepareRxDoneAbort>
                return;
 800f34c:	e1a6      	b.n	800f69c <ProcessRadioRxDone+0x964>
 800f34e:	bf00      	nop
 800f350:	2000082c 	.word	0x2000082c
 800f354:	20000d4c 	.word	0x20000d4c
 800f358:	20000a64 	.word	0x20000a64
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f35c:	4bb5      	ldr	r3, [pc, #724]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800f364:	4ab3      	ldr	r2, [pc, #716]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f366:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f36a:	f882 3426 	strb.w	r3, [r2, #1062]	; 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800f36e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f372:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800f376:	b2db      	uxtb	r3, r3
 800f378:	461a      	mov	r2, r3
 800f37a:	4bae      	ldr	r3, [pc, #696]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f37c:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800f380:	4bac      	ldr	r3, [pc, #688]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f382:	2200      	movs	r2, #0
 800f384:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800f388:	4baa      	ldr	r3, [pc, #680]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	4aa8      	ldr	r2, [pc, #672]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f394:	f8c2 3434 	str.w	r3, [r2, #1076]	; 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	4aa6      	ldr	r2, [pc, #664]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f39c:	f8c2 3470 	str.w	r3, [r2, #1136]	; 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f3a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f3a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	bf14      	ite	ne
 800f3ae:	2301      	movne	r3, #1
 800f3b0:	2300      	moveq	r3, #0
 800f3b2:	b2da      	uxtb	r2, r3
 800f3b4:	4b9f      	ldr	r3, [pc, #636]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f3b6:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f3ba:	4b9e      	ldr	r3, [pc, #632]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800f3c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f3c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800f3ca:	b2db      	uxtb	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	bf14      	ite	ne
 800f3d0:	2301      	movne	r3, #1
 800f3d2:	2300      	moveq	r3, #0
 800f3d4:	b2da      	uxtb	r2, r3
 800f3d6:	4b97      	ldr	r3, [pc, #604]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f3d8:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f3dc:	4b95      	ldr	r3, [pc, #596]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f3de:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d004      	beq.n	800f3f0 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f3e6:	4b93      	ldr	r3, [pc, #588]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f3e8:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d106      	bne.n	800f3fe <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800f3f0:	4b91      	ldr	r3, [pc, #580]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	629a      	str	r2, [r3, #40]	; 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800f3f6:	4b90      	ldr	r3, [pc, #576]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800f3fe:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800f402:	2b01      	cmp	r3, #1
 800f404:	d104      	bne.n	800f410 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800f406:	4b8b      	ldr	r3, [pc, #556]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f408:	2202      	movs	r2, #2
 800f40a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
 800f40e:	e034      	b.n	800f47a <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800f410:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 800f414:	f023 031f 	bic.w	r3, r3, #31
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	2ba0      	cmp	r3, #160	; 0xa0
 800f41c:	d125      	bne.n	800f46a <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800f41e:	4b86      	ldr	r3, [pc, #536]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f420:	2201      	movs	r2, #1
 800f422:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800f426:	4b84      	ldr	r3, [pc, #528]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f428:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d102      	bne.n	800f436 <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800f430:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f432:	4a81      	ldr	r2, [pc, #516]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f434:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800f436:	4b7f      	ldr	r3, [pc, #508]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f438:	2201      	movs	r2, #1
 800f43a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f43e:	4b7d      	ldr	r3, [pc, #500]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f440:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f444:	2b00      	cmp	r3, #0
 800f446:	d018      	beq.n	800f47a <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800f448:	4b7a      	ldr	r3, [pc, #488]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f44a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d013      	beq.n	800f47a <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800f452:	4b79      	ldr	r3, [pc, #484]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f458:	4a76      	ldr	r2, [pc, #472]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f45a:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800f45e:	4b77      	ldr	r3, [pc, #476]	; (800f63c <ProcessRadioRxDone+0x904>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	4a74      	ldr	r2, [pc, #464]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f464:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
 800f468:	e007      	b.n	800f47a <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800f46a:	4b73      	ldr	r3, [pc, #460]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800f472:	4b70      	ldr	r3, [pc, #448]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800f47a:	4b6e      	ldr	r3, [pc, #440]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f47c:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f480:	4a6c      	ldr	r2, [pc, #432]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f482:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 800f486:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 800f48a:	4618      	mov	r0, r3
 800f48c:	f001 ff88 	bl	80113a0 <RemoveMacCommands>

            switch( fType )
 800f490:	79bb      	ldrb	r3, [r7, #6]
 800f492:	2b03      	cmp	r3, #3
 800f494:	d873      	bhi.n	800f57e <ProcessRadioRxDone+0x846>
 800f496:	a201      	add	r2, pc, #4	; (adr r2, 800f49c <ProcessRadioRxDone+0x764>)
 800f498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f49c:	0800f4ad 	.word	0x0800f4ad
 800f4a0:	0800f4fd 	.word	0x0800f4fd
 800f4a4:	0800f533 	.word	0x0800f533
 800f4a8:	0800f559 	.word	0x0800f559
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f4ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f4b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	461c      	mov	r4, r3
 800f4b8:	4b5e      	ldr	r3, [pc, #376]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f4ba:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f4be:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800f4c2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f4c6:	f102 0010 	add.w	r0, r2, #16
 800f4ca:	9300      	str	r3, [sp, #0]
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	4622      	mov	r2, r4
 800f4d0:	2100      	movs	r1, #0
 800f4d2:	f000 ff45 	bl	8010360 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f4d6:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f4da:	4b56      	ldr	r3, [pc, #344]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f4dc:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f4e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4e2:	4a54      	ldr	r2, [pc, #336]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f4e4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f4e8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f4ec:	4b51      	ldr	r3, [pc, #324]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f4ee:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f4f2:	4b50      	ldr	r3, [pc, #320]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800f4fa:	e047      	b.n	800f58c <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800f4fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800f500:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800f504:	b2db      	uxtb	r3, r3
 800f506:	461c      	mov	r4, r3
 800f508:	4b4a      	ldr	r3, [pc, #296]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f50a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f50e:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800f512:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f516:	f102 0010 	add.w	r0, r2, #16
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	460b      	mov	r3, r1
 800f51e:	4622      	mov	r2, r4
 800f520:	2100      	movs	r1, #0
 800f522:	f000 ff1d 	bl	8010360 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f526:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f52a:	4b42      	ldr	r3, [pc, #264]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f52c:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800f530:	e02c      	b.n	800f58c <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800f532:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f534:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f538:	4b3e      	ldr	r3, [pc, #248]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f53a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f53e:	f997 107f 	ldrsb.w	r1, [r7, #127]	; 0x7f
 800f542:	9300      	str	r3, [sp, #0]
 800f544:	460b      	mov	r3, r1
 800f546:	2100      	movs	r1, #0
 800f548:	f000 ff0a 	bl	8010360 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f54c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f550:	4b38      	ldr	r3, [pc, #224]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f552:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    break;
 800f556:	e019      	b.n	800f58c <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f558:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f55c:	4b35      	ldr	r3, [pc, #212]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f55e:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800f562:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f564:	4a33      	ldr	r2, [pc, #204]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f566:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800f56a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800f56e:	4b31      	ldr	r3, [pc, #196]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f570:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                    MacCtx.McpsIndication.RxData = true;
 800f574:	4b2f      	ldr	r3, [pc, #188]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f576:	2201      	movs	r2, #1
 800f578:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    break;
 800f57c:	e006      	b.n	800f58c <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f57e:	4b2d      	ldr	r3, [pc, #180]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f580:	2201      	movs	r2, #1
 800f582:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    PrepareRxDoneAbort( );
 800f586:	f7ff fbb1 	bl	800ecec <PrepareRxDoneAbort>
                    break;
 800f58a:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800f58c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800f590:	2be0      	cmp	r3, #224	; 0xe0
 800f592:	d118      	bne.n	800f5c6 <ProcessRadioRxDone+0x88e>
 800f594:	4b28      	ldr	r3, [pc, #160]	; (800f638 <ProcessRadioRxDone+0x900>)
 800f596:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 800f59a:	f083 0301 	eor.w	r3, r3, #1
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d010      	beq.n	800f5c6 <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800f5a4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800f5a8:	4b22      	ldr	r3, [pc, #136]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f5aa:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800f5ae:	4b21      	ldr	r3, [pc, #132]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800f5b6:	4b1f      	ldr	r3, [pc, #124]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
                MacCtx.McpsIndication.RxData = false;
 800f5be:	4b1d      	ldr	r3, [pc, #116]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f5c6:	4a1b      	ldr	r2, [pc, #108]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f5c8:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f5cc:	f043 0302 	orr.w	r3, r3, #2
 800f5d0:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495

            break;
 800f5d4:	e03d      	b.n	800f652 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800f5d6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f5da:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f5de:	18d1      	adds	r1, r2, r3
 800f5e0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 800f5ea:	1ad3      	subs	r3, r2, r3
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	4813      	ldr	r0, [pc, #76]	; (800f640 <ProcessRadioRxDone+0x908>)
 800f5f2:	f008 faea 	bl	8017bca <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800f5f6:	4b0f      	ldr	r3, [pc, #60]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f5f8:	2203      	movs	r2, #3
 800f5fa:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f5fe:	4b0d      	ldr	r3, [pc, #52]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f600:	2200      	movs	r2, #0
 800f602:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800f606:	4b0b      	ldr	r3, [pc, #44]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f608:	4a0d      	ldr	r2, [pc, #52]	; (800f640 <ProcessRadioRxDone+0x908>)
 800f60a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800f60e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 800f612:	b2da      	uxtb	r2, r3
 800f614:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	b2da      	uxtb	r2, r3
 800f61c:	4b05      	ldr	r3, [pc, #20]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f61e:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800f622:	4a04      	ldr	r2, [pc, #16]	; (800f634 <ProcessRadioRxDone+0x8fc>)
 800f624:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f628:	f043 0302 	orr.w	r3, r3, #2
 800f62c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            break;
 800f630:	e00f      	b.n	800f652 <ProcessRadioRxDone+0x91a>
 800f632:	bf00      	nop
 800f634:	2000082c 	.word	0x2000082c
 800f638:	20000d4c 	.word	0x20000d4c
 800f63c:	200018dc 	.word	0x200018dc
 800f640:	20000a64 	.word	0x20000a64
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f644:	4b17      	ldr	r3, [pc, #92]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f646:	2201      	movs	r2, #1
 800f648:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            PrepareRxDoneAbort( );
 800f64c:	f7ff fb4e 	bl	800ecec <PrepareRxDoneAbort>
            break;
 800f650:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f652:	4b14      	ldr	r3, [pc, #80]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f654:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d004      	beq.n	800f666 <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800f65c:	4b11      	ldr	r3, [pc, #68]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f65e:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800f662:	2b01      	cmp	r3, #1
 800f664:	d10c      	bne.n	800f680 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800f666:	4b0f      	ldr	r3, [pc, #60]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f668:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d007      	beq.n	800f680 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800f670:	4b0c      	ldr	r3, [pc, #48]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f672:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 800f676:	2b00      	cmp	r3, #0
 800f678:	d002      	beq.n	800f680 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800f67a:	2000      	movs	r0, #0
 800f67c:	f000 fce4 	bl	8010048 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800f680:	4b08      	ldr	r3, [pc, #32]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f682:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 800f686:	2b02      	cmp	r3, #2
 800f688:	d006      	beq.n	800f698 <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800f68a:	4a06      	ldr	r2, [pc, #24]	; (800f6a4 <ProcessRadioRxDone+0x96c>)
 800f68c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f690:	f043 0320 	orr.w	r3, r3, #32
 800f694:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800f698:	f7ff fa82 	bl	800eba0 <UpdateRxSlotIdleState>
}
 800f69c:	3794      	adds	r7, #148	; 0x94
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd90      	pop	{r4, r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	2000082c 	.word	0x2000082c

0800f6a8 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f6ac:	4b11      	ldr	r3, [pc, #68]	; (800f6f4 <ProcessRadioTxTimeout+0x4c>)
 800f6ae:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f6b2:	2b02      	cmp	r3, #2
 800f6b4:	d002      	beq.n	800f6bc <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800f6b6:	4b10      	ldr	r3, [pc, #64]	; (800f6f8 <ProcessRadioTxTimeout+0x50>)
 800f6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6ba:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800f6bc:	f7ff fa70 	bl	800eba0 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800f6c0:	4b0e      	ldr	r3, [pc, #56]	; (800f6fc <ProcessRadioTxTimeout+0x54>)
 800f6c2:	2202      	movs	r2, #2
 800f6c4:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800f6c8:	2002      	movs	r0, #2
 800f6ca:	f004 fd49 	bl	8014160 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800f6ce:	4b0b      	ldr	r3, [pc, #44]	; (800f6fc <ProcessRadioTxTimeout+0x54>)
 800f6d0:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d003      	beq.n	800f6e0 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800f6d8:	4b08      	ldr	r3, [pc, #32]	; (800f6fc <ProcessRadioTxTimeout+0x54>)
 800f6da:	2201      	movs	r2, #1
 800f6dc:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800f6e0:	4a06      	ldr	r2, [pc, #24]	; (800f6fc <ProcessRadioTxTimeout+0x54>)
 800f6e2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f6e6:	f043 0320 	orr.w	r3, r3, #32
 800f6ea:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
}
 800f6ee:	bf00      	nop
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20000d4c 	.word	0x20000d4c
 800f6f8:	0801d538 	.word	0x0801d538
 800f6fc:	2000082c 	.word	0x2000082c

0800f700 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	4603      	mov	r3, r0
 800f708:	460a      	mov	r2, r1
 800f70a:	71fb      	strb	r3, [r7, #7]
 800f70c:	4613      	mov	r3, r2
 800f70e:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800f710:	2300      	movs	r3, #0
 800f712:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800f714:	4b3d      	ldr	r3, [pc, #244]	; (800f80c <HandleRadioRxErrorTimeout+0x10c>)
 800f716:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f71a:	2b02      	cmp	r3, #2
 800f71c:	d002      	beq.n	800f724 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800f71e:	4b3c      	ldr	r3, [pc, #240]	; (800f810 <HandleRadioRxErrorTimeout+0x110>)
 800f720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f722:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f724:	f004 f864 	bl	80137f0 <LoRaMacClassBIsBeaconExpected>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d007      	beq.n	800f73e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800f72e:	2002      	movs	r0, #2
 800f730:	f004 f812 	bl	8013758 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800f734:	2000      	movs	r0, #0
 800f736:	f004 f834 	bl	80137a2 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800f73a:	2301      	movs	r3, #1
 800f73c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f73e:	4b33      	ldr	r3, [pc, #204]	; (800f80c <HandleRadioRxErrorTimeout+0x10c>)
 800f740:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800f744:	2b01      	cmp	r3, #1
 800f746:	d119      	bne.n	800f77c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f748:	f004 f859 	bl	80137fe <LoRaMacClassBIsPingExpected>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d007      	beq.n	800f762 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f752:	2000      	movs	r0, #0
 800f754:	f004 f80a 	bl	801376c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800f758:	2000      	movs	r0, #0
 800f75a:	f004 f82b 	bl	80137b4 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800f75e:	2301      	movs	r3, #1
 800f760:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f762:	f004 f853 	bl	801380c <LoRaMacClassBIsMulticastExpected>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d007      	beq.n	800f77c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800f76c:	2000      	movs	r0, #0
 800f76e:	f004 f807 	bl	8013780 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800f772:	2000      	movs	r0, #0
 800f774:	f004 f827 	bl	80137c6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800f778:	2301      	movs	r3, #1
 800f77a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
 800f77e:	f083 0301 	eor.w	r3, r3, #1
 800f782:	b2db      	uxtb	r3, r3
 800f784:	2b00      	cmp	r3, #0
 800f786:	d03b      	beq.n	800f800 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f788:	4b22      	ldr	r3, [pc, #136]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f78a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d122      	bne.n	800f7d8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800f792:	4b20      	ldr	r3, [pc, #128]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f794:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d003      	beq.n	800f7a4 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800f79c:	4a1d      	ldr	r2, [pc, #116]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f79e:	79fb      	ldrb	r3, [r7, #7]
 800f7a0:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800f7a4:	79fb      	ldrb	r3, [r7, #7]
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f004 fcda 	bl	8014160 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800f7ac:	4b17      	ldr	r3, [pc, #92]	; (800f80c <HandleRadioRxErrorTimeout+0x10c>)
 800f7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f00c fb43 	bl	801be3c <UTIL_TIMER_GetElapsedTime>
 800f7b6:	4602      	mov	r2, r0
 800f7b8:	4b16      	ldr	r3, [pc, #88]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f7ba:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d31e      	bcc.n	800f800 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800f7c2:	4815      	ldr	r0, [pc, #84]	; (800f818 <HandleRadioRxErrorTimeout+0x118>)
 800f7c4:	f00c fa0e 	bl	801bbe4 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f7c8:	4a12      	ldr	r2, [pc, #72]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f7ca:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f7ce:	f043 0320 	orr.w	r3, r3, #32
 800f7d2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 800f7d6:	e013      	b.n	800f800 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800f7d8:	4b0e      	ldr	r3, [pc, #56]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f7da:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d003      	beq.n	800f7ea <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800f7e2:	4a0c      	ldr	r2, [pc, #48]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f7e4:	79bb      	ldrb	r3, [r7, #6]
 800f7e6:	f882 3445 	strb.w	r3, [r2, #1093]	; 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800f7ea:	79bb      	ldrb	r3, [r7, #6]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f004 fcb7 	bl	8014160 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800f7f2:	4a08      	ldr	r2, [pc, #32]	; (800f814 <HandleRadioRxErrorTimeout+0x114>)
 800f7f4:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f7f8:	f043 0320 	orr.w	r3, r3, #32
 800f7fc:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800f800:	f7ff f9ce 	bl	800eba0 <UpdateRxSlotIdleState>
}
 800f804:	bf00      	nop
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	20000d4c 	.word	0x20000d4c
 800f810:	0801d538 	.word	0x0801d538
 800f814:	2000082c 	.word	0x2000082c
 800f818:	20000bc4 	.word	0x20000bc4

0800f81c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800f820:	2106      	movs	r1, #6
 800f822:	2005      	movs	r0, #5
 800f824:	f7ff ff6c 	bl	800f700 <HandleRadioRxErrorTimeout>
}
 800f828:	bf00      	nop
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800f830:	2104      	movs	r1, #4
 800f832:	2003      	movs	r0, #3
 800f834:	f7ff ff64 	bl	800f700 <HandleRadioRxErrorTimeout>
}
 800f838:	bf00      	nop
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f842:	f3ef 8310 	mrs	r3, PRIMASK
 800f846:	607b      	str	r3, [r7, #4]
  return(result);
 800f848:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800f84a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800f84c:	b672      	cpsid	i
}
 800f84e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800f850:	4b1d      	ldr	r3, [pc, #116]	; (800f8c8 <LoRaMacHandleIrqEvents+0x8c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800f856:	4b1c      	ldr	r3, [pc, #112]	; (800f8c8 <LoRaMacHandleIrqEvents+0x8c>)
 800f858:	2200      	movs	r2, #0
 800f85a:	601a      	str	r2, [r3, #0]
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	f383 8810 	msr	PRIMASK, r3
}
 800f866:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d027      	beq.n	800f8be <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800f86e:	783b      	ldrb	r3, [r7, #0]
 800f870:	f003 0320 	and.w	r3, r3, #32
 800f874:	b2db      	uxtb	r3, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800f87a:	f7ff f9a9 	bl	800ebd0 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800f87e:	783b      	ldrb	r3, [r7, #0]
 800f880:	f003 0310 	and.w	r3, r3, #16
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800f88a:	f7ff fa55 	bl	800ed38 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800f88e:	783b      	ldrb	r3, [r7, #0]
 800f890:	f003 0308 	and.w	r3, r3, #8
 800f894:	b2db      	uxtb	r3, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	d001      	beq.n	800f89e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800f89a:	f7ff ff05 	bl	800f6a8 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800f89e:	783b      	ldrb	r3, [r7, #0]
 800f8a0:	f003 0304 	and.w	r3, r3, #4
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800f8aa:	f7ff ffb7 	bl	800f81c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800f8ae:	783b      	ldrb	r3, [r7, #0]
 800f8b0:	f003 0302 	and.w	r3, r3, #2
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d001      	beq.n	800f8be <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800f8ba:	f7ff ffb7 	bl	800f82c <ProcessRadioRxTimeout>
        }
    }
}
 800f8be:	bf00      	nop
 800f8c0:	3710      	adds	r7, #16
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	bf00      	nop
 800f8c8:	200018d4 	.word	0x200018d4

0800f8cc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800f8d0:	4b0c      	ldr	r3, [pc, #48]	; (800f904 <LoRaMacIsBusy+0x38>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d001      	beq.n	800f8e2 <LoRaMacIsBusy+0x16>
    {
        return true;
 800f8de:	2301      	movs	r3, #1
 800f8e0:	e00c      	b.n	800f8fc <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f8e2:	4b09      	ldr	r3, [pc, #36]	; (800f908 <LoRaMacIsBusy+0x3c>)
 800f8e4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d106      	bne.n	800f8fa <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800f8ec:	4b06      	ldr	r3, [pc, #24]	; (800f908 <LoRaMacIsBusy+0x3c>)
 800f8ee:	f893 3496 	ldrb.w	r3, [r3, #1174]	; 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d101      	bne.n	800f8fa <LoRaMacIsBusy+0x2e>
    {
        return false;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	e000      	b.n	800f8fc <LoRaMacIsBusy+0x30>
    }
    return true;
 800f8fa:	2301      	movs	r3, #1
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	46bd      	mov	sp, r7
 800f900:	bc80      	pop	{r7}
 800f902:	4770      	bx	lr
 800f904:	200018d4 	.word	0x200018d4
 800f908:	2000082c 	.word	0x2000082c

0800f90c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800f916:	4a04      	ldr	r2, [pc, #16]	; (800f928 <LoRaMacEnableRequests+0x1c>)
 800f918:	79fb      	ldrb	r3, [r7, #7]
 800f91a:	f882 3496 	strb.w	r3, [r2, #1174]	; 0x496
}
 800f91e:	bf00      	nop
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	bc80      	pop	{r7}
 800f926:	4770      	bx	lr
 800f928:	2000082c 	.word	0x2000082c

0800f92c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800f932:	4b2c      	ldr	r3, [pc, #176]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f934:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f938:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800f93a:	4b2a      	ldr	r3, [pc, #168]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f93c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f940:	2b00      	cmp	r3, #0
 800f942:	d14a      	bne.n	800f9da <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f944:	4b27      	ldr	r3, [pc, #156]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f946:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f94a:	f003 0301 	and.w	r3, r3, #1
 800f94e:	b2db      	uxtb	r3, r3
 800f950:	2b00      	cmp	r3, #0
 800f952:	d006      	beq.n	800f962 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f954:	4a23      	ldr	r2, [pc, #140]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f956:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f95a:	f36f 0300 	bfc	r3, #0, #1
 800f95e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f962:	4b20      	ldr	r3, [pc, #128]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f964:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f972:	4a1c      	ldr	r2, [pc, #112]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f974:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f978:	f36f 0382 	bfc	r3, #2, #1
 800f97c:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f980:	2001      	movs	r0, #1
 800f982:	f7ff ffc3 	bl	800f90c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800f986:	793b      	ldrb	r3, [r7, #4]
 800f988:	f003 0301 	and.w	r3, r3, #1
 800f98c:	b2db      	uxtb	r3, r3
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d005      	beq.n	800f99e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f992:	4b14      	ldr	r3, [pc, #80]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f994:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	4813      	ldr	r0, [pc, #76]	; (800f9e8 <LoRaMacHandleRequestEvents+0xbc>)
 800f99c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800f99e:	793b      	ldrb	r3, [r7, #4]
 800f9a0:	f003 0304 	and.w	r3, r3, #4
 800f9a4:	b2db      	uxtb	r3, r3
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00e      	beq.n	800f9c8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f9aa:	4810      	ldr	r0, [pc, #64]	; (800f9ec <LoRaMacHandleRequestEvents+0xc0>)
 800f9ac:	f004 fc26 	bl	80141fc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f9b0:	f004 fc70 	bl	8014294 <LoRaMacConfirmQueueGetCnt>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d006      	beq.n	800f9c8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f9ba:	4a0a      	ldr	r2, [pc, #40]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f9bc:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f9c0:	f043 0304 	orr.w	r3, r3, #4
 800f9c4:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800f9c8:	f003 ff3e 	bl	8013848 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f9cc:	4a05      	ldr	r2, [pc, #20]	; (800f9e4 <LoRaMacHandleRequestEvents+0xb8>)
 800f9ce:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800f9d2:	f36f 1345 	bfc	r3, #5, #1
 800f9d6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
}
 800f9da:	bf00      	nop
 800f9dc:	3708      	adds	r7, #8
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}
 800f9e2:	bf00      	nop
 800f9e4:	2000082c 	.word	0x2000082c
 800f9e8:	20000c70 	.word	0x20000c70
 800f9ec:	20000c84 	.word	0x20000c84

0800f9f0 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f9f6:	4b07      	ldr	r3, [pc, #28]	; (800fa14 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800f9f8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d105      	bne.n	800fa0c <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800fa00:	2300      	movs	r3, #0
 800fa02:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800fa04:	1dfb      	adds	r3, r7, #7
 800fa06:	4618      	mov	r0, r3
 800fa08:	f004 f9de 	bl	8013dc8 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800fa0c:	bf00      	nop
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}
 800fa14:	2000082c 	.word	0x2000082c

0800fa18 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800fa1c:	4b16      	ldr	r3, [pc, #88]	; (800fa78 <LoRaMacHandleIndicationEvents+0x60>)
 800fa1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fa22:	f003 0308 	and.w	r3, r3, #8
 800fa26:	b2db      	uxtb	r3, r3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d00d      	beq.n	800fa48 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800fa2c:	4a12      	ldr	r2, [pc, #72]	; (800fa78 <LoRaMacHandleIndicationEvents+0x60>)
 800fa2e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fa32:	f36f 03c3 	bfc	r3, #3, #1
 800fa36:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800fa3a:	4b0f      	ldr	r3, [pc, #60]	; (800fa78 <LoRaMacHandleIndicationEvents+0x60>)
 800fa3c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	490e      	ldr	r1, [pc, #56]	; (800fa7c <LoRaMacHandleIndicationEvents+0x64>)
 800fa44:	480e      	ldr	r0, [pc, #56]	; (800fa80 <LoRaMacHandleIndicationEvents+0x68>)
 800fa46:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800fa48:	4b0b      	ldr	r3, [pc, #44]	; (800fa78 <LoRaMacHandleIndicationEvents+0x60>)
 800fa4a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fa4e:	f003 0302 	and.w	r3, r3, #2
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d00d      	beq.n	800fa74 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800fa58:	4a07      	ldr	r2, [pc, #28]	; (800fa78 <LoRaMacHandleIndicationEvents+0x60>)
 800fa5a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fa5e:	f36f 0341 	bfc	r3, #1, #1
 800fa62:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800fa66:	4b04      	ldr	r3, [pc, #16]	; (800fa78 <LoRaMacHandleIndicationEvents+0x60>)
 800fa68:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	4903      	ldr	r1, [pc, #12]	; (800fa7c <LoRaMacHandleIndicationEvents+0x64>)
 800fa70:	4804      	ldr	r0, [pc, #16]	; (800fa84 <LoRaMacHandleIndicationEvents+0x6c>)
 800fa72:	4798      	blx	r3
    }
}
 800fa74:	bf00      	nop
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	2000082c 	.word	0x2000082c
 800fa7c:	20000cbc 	.word	0x20000cbc
 800fa80:	20000c98 	.word	0x20000c98
 800fa84:	20000c50 	.word	0x20000c50

0800fa88 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800fa8e:	4b2a      	ldr	r3, [pc, #168]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fa90:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fa94:	f003 0301 	and.w	r3, r3, #1
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d048      	beq.n	800fb30 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800faa2:	2300      	movs	r3, #0
 800faa4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800faa6:	4b24      	ldr	r3, [pc, #144]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800faa8:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800faac:	2b00      	cmp	r3, #0
 800faae:	d004      	beq.n	800faba <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800fab0:	4b21      	ldr	r3, [pc, #132]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fab2:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800fab6:	2b03      	cmp	r3, #3
 800fab8:	d104      	bne.n	800fac4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800faba:	f002 f8ed 	bl	8011c98 <CheckRetransUnconfirmedUplink>
 800fabe:	4603      	mov	r3, r0
 800fac0:	71fb      	strb	r3, [r7, #7]
 800fac2:	e010      	b.n	800fae6 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800fac4:	4b1c      	ldr	r3, [pc, #112]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fac6:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800faca:	2b01      	cmp	r3, #1
 800facc:	d10b      	bne.n	800fae6 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800face:	4b1a      	ldr	r3, [pc, #104]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fad0:	f893 341d 	ldrb.w	r3, [r3, #1053]	; 0x41d
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d004      	beq.n	800fae2 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800fad8:	f002 f90a 	bl	8011cf0 <CheckRetransConfirmedUplink>
 800fadc:	4603      	mov	r3, r0
 800fade:	71fb      	strb	r3, [r7, #7]
 800fae0:	e001      	b.n	800fae6 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800fae2:	2301      	movs	r3, #1
 800fae4:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800fae6:	79fb      	ldrb	r3, [r7, #7]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00d      	beq.n	800fb08 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800faec:	4813      	ldr	r0, [pc, #76]	; (800fb3c <LoRaMacHandleMcpsRequest+0xb4>)
 800faee:	f00c f879 	bl	801bbe4 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800faf2:	4b11      	ldr	r3, [pc, #68]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800faf4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800faf8:	f023 0320 	bic.w	r3, r3, #32
 800fafc:	4a0e      	ldr	r2, [pc, #56]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fafe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 800fb02:	f002 f92f 	bl	8011d64 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800fb06:	e013      	b.n	800fb30 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800fb08:	79bb      	ldrb	r3, [r7, #6]
 800fb0a:	f083 0301 	eor.w	r3, r3, #1
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00d      	beq.n	800fb30 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800fb14:	4a08      	ldr	r2, [pc, #32]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fb16:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fb1a:	f36f 1345 	bfc	r3, #5, #1
 800fb1e:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800fb22:	4b05      	ldr	r3, [pc, #20]	; (800fb38 <LoRaMacHandleMcpsRequest+0xb0>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            OnTxDelayedTimerEvent( NULL );
 800fb2a:	2000      	movs	r0, #0
 800fb2c:	f000 f9c8 	bl	800fec0 <OnTxDelayedTimerEvent>
}
 800fb30:	bf00      	nop
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	2000082c 	.word	0x2000082c
 800fb3c:	20000b94 	.word	0x20000b94

0800fb40 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fb44:	4b18      	ldr	r3, [pc, #96]	; (800fba8 <LoRaMacHandleMlmeRequest+0x68>)
 800fb46:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fb4a:	f003 0304 	and.w	r3, r3, #4
 800fb4e:	b2db      	uxtb	r3, r3
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d026      	beq.n	800fba2 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800fb54:	2001      	movs	r0, #1
 800fb56:	f004 fb37 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d012      	beq.n	800fb86 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800fb60:	2001      	movs	r0, #1
 800fb62:	f004 fad3 	bl	801410c <LoRaMacConfirmQueueGetStatus>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d103      	bne.n	800fb74 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800fb6c:	4b0e      	ldr	r3, [pc, #56]	; (800fba8 <LoRaMacHandleMlmeRequest+0x68>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fb74:	4b0c      	ldr	r3, [pc, #48]	; (800fba8 <LoRaMacHandleMlmeRequest+0x68>)
 800fb76:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb7a:	f023 0302 	bic.w	r3, r3, #2
 800fb7e:	4a0a      	ldr	r2, [pc, #40]	; (800fba8 <LoRaMacHandleMlmeRequest+0x68>)
 800fb80:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800fb84:	e00d      	b.n	800fba2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800fb86:	2005      	movs	r0, #5
 800fb88:	f004 fb1e 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d007      	beq.n	800fba2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fb92:	4b05      	ldr	r3, [pc, #20]	; (800fba8 <LoRaMacHandleMlmeRequest+0x68>)
 800fb94:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fb98:	f023 0302 	bic.w	r3, r3, #2
 800fb9c:	4a02      	ldr	r2, [pc, #8]	; (800fba8 <LoRaMacHandleMlmeRequest+0x68>)
 800fb9e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800fba2:	bf00      	nop
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	2000082c 	.word	0x2000082c

0800fbac <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fbb0:	200b      	movs	r0, #11
 800fbb2:	f004 fb09 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d019      	beq.n	800fbf0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800fbbc:	4b0e      	ldr	r3, [pc, #56]	; (800fbf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fbbe:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fbc2:	f003 0301 	and.w	r3, r3, #1
 800fbc6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d111      	bne.n	800fbf0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800fbcc:	4b0a      	ldr	r3, [pc, #40]	; (800fbf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fbce:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fbd2:	f003 0304 	and.w	r3, r3, #4
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d009      	beq.n	800fbf0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fbdc:	4b06      	ldr	r3, [pc, #24]	; (800fbf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fbde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fbe2:	f023 0302 	bic.w	r3, r3, #2
 800fbe6:	4a04      	ldr	r2, [pc, #16]	; (800fbf8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800fbe8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800fbec:	2301      	movs	r3, #1
 800fbee:	e000      	b.n	800fbf2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800fbf0:	2300      	movs	r3, #0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	2000082c 	.word	0x2000082c

0800fbfc <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	4603      	mov	r3, r0
 800fc04:	71fb      	strb	r3, [r7, #7]
 800fc06:	460b      	mov	r3, r1
 800fc08:	71bb      	strb	r3, [r7, #6]
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00a      	beq.n	800fc2a <CheckForMinimumAbpDatarate+0x2e>
 800fc14:	79bb      	ldrb	r3, [r7, #6]
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d107      	bne.n	800fc2a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800fc1a:	797b      	ldrb	r3, [r7, #5]
 800fc1c:	f083 0301 	eor.w	r3, r3, #1
 800fc20:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800fc26:	2301      	movs	r3, #1
 800fc28:	e000      	b.n	800fc2c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800fc2a:	2300      	movs	r3, #0
}
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	bc80      	pop	{r7}
 800fc34:	4770      	bx	lr
	...

0800fc38 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800fc38:	b480      	push	{r7}
 800fc3a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800fc3c:	4b0d      	ldr	r3, [pc, #52]	; (800fc74 <LoRaMacCheckForRxAbort+0x3c>)
 800fc3e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00f      	beq.n	800fc6a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800fc4a:	4b0a      	ldr	r3, [pc, #40]	; (800fc74 <LoRaMacCheckForRxAbort+0x3c>)
 800fc4c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc54:	4a07      	ldr	r2, [pc, #28]	; (800fc74 <LoRaMacCheckForRxAbort+0x3c>)
 800fc56:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800fc5a:	4b06      	ldr	r3, [pc, #24]	; (800fc74 <LoRaMacCheckForRxAbort+0x3c>)
 800fc5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc60:	f023 0302 	bic.w	r3, r3, #2
 800fc64:	4a03      	ldr	r2, [pc, #12]	; (800fc74 <LoRaMacCheckForRxAbort+0x3c>)
 800fc66:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800fc6a:	bf00      	nop
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bc80      	pop	{r7}
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	2000082c 	.word	0x2000082c

0800fc78 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800fc84:	2300      	movs	r3, #0
 800fc86:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800fc88:	4b50      	ldr	r3, [pc, #320]	; (800fdcc <LoRaMacHandleNvm+0x154>)
 800fc8a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	f040 8098 	bne.w	800fdc4 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2124      	movs	r1, #36	; 0x24
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f007 ffeb 	bl	8017c74 <Crc32>
 800fc9e:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca4:	68ba      	ldr	r2, [r7, #8]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	d006      	beq.n	800fcb8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68ba      	ldr	r2, [r7, #8]
 800fcae:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800fcb0:	89fb      	ldrh	r3, [r7, #14]
 800fcb2:	f043 0301 	orr.w	r3, r3, #1
 800fcb6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	3328      	adds	r3, #40	; 0x28
 800fcbc:	2114      	movs	r1, #20
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f007 ffd8 	bl	8017c74 <Crc32>
 800fcc4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	d006      	beq.n	800fcde <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	68ba      	ldr	r2, [r7, #8]
 800fcd4:	63da      	str	r2, [r3, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800fcd6:	89fb      	ldrh	r3, [r7, #14]
 800fcd8:	f043 0302 	orr.w	r3, r3, #2
 800fcdc:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3340      	adds	r3, #64	; 0x40
 800fce2:	21e0      	movs	r1, #224	; 0xe0
 800fce4:	4618      	mov	r0, r3
 800fce6:	f007 ffc5 	bl	8017c74 <Crc32>
 800fcea:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fcf2:	68ba      	ldr	r2, [r7, #8]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d007      	beq.n	800fd08 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800fd00:	89fb      	ldrh	r3, [r7, #14]
 800fd02:	f043 0304 	orr.w	r3, r3, #4
 800fd06:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800fd0e:	21bc      	movs	r1, #188	; 0xbc
 800fd10:	4618      	mov	r0, r3
 800fd12:	f007 ffaf 	bl	8017c74 <Crc32>
 800fd16:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800fd1e:	68ba      	ldr	r2, [r7, #8]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d007      	beq.n	800fd34 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800fd2c:	89fb      	ldrh	r3, [r7, #14]
 800fd2e:	f043 0308 	orr.w	r3, r3, #8
 800fd32:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fd3a:	2100      	movs	r1, #0
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f007 ff99 	bl	8017c74 <Crc32>
 800fd42:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800fd4a:	68ba      	ldr	r2, [r7, #8]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d007      	beq.n	800fd60 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	68ba      	ldr	r2, [r7, #8]
 800fd54:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800fd58:	89fb      	ldrh	r3, [r7, #14]
 800fd5a:	f043 0310 	orr.w	r3, r3, #16
 800fd5e:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fd66:	f44f 715e 	mov.w	r1, #888	; 0x378
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f007 ff82 	bl	8017c74 <Crc32>
 800fd70:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3560 	ldr.w	r3, [r3, #1376]	; 0x560
 800fd78:	68ba      	ldr	r2, [r7, #8]
 800fd7a:	429a      	cmp	r2, r3
 800fd7c:	d007      	beq.n	800fd8e <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800fd86:	89fb      	ldrh	r3, [r7, #14]
 800fd88:	f043 0320 	orr.w	r3, r3, #32
 800fd8c:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f203 5364 	addw	r3, r3, #1380	; 0x564
 800fd94:	2114      	movs	r1, #20
 800fd96:	4618      	mov	r0, r3
 800fd98:	f007 ff6c 	bl	8017c74 <Crc32>
 800fd9c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d007      	beq.n	800fdba <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68ba      	ldr	r2, [r7, #8]
 800fdae:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800fdb2:	89fb      	ldrh	r3, [r7, #14]
 800fdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdb8:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800fdba:	89fb      	ldrh	r3, [r7, #14]
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f002 f80d 	bl	8011ddc <CallNvmDataChangeCallback>
 800fdc2:	e000      	b.n	800fdc6 <LoRaMacHandleNvm+0x14e>
        return;
 800fdc4:	bf00      	nop
}
 800fdc6:	3710      	adds	r7, #16
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	2000082c 	.word	0x2000082c

0800fdd0 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b084      	sub	sp, #16
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
 800fdd8:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d00d      	beq.n	800fdfc <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800fde0:	6838      	ldr	r0, [r7, #0]
 800fde2:	f00c f82b 	bl	801be3c <UTIL_TIMER_GetElapsedTime>
 800fde6:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d905      	bls.n	800fdfc <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800fdf0:	4b05      	ldr	r3, [pc, #20]	; (800fe08 <LoRaMacHandleResponseTimeout+0x38>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e000      	b.n	800fdfe <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
 800fe06:	bf00      	nop
 800fe08:	20000d4c 	.word	0x20000d4c

0800fe0c <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800fe12:	2300      	movs	r3, #0
 800fe14:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800fe16:	f7ff fd11 	bl	800f83c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fe1a:	f003 fd84 	bl	8013926 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fe1e:	4b26      	ldr	r3, [pc, #152]	; (800feb8 <LoRaMacProcess+0xac>)
 800fe20:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fe24:	f003 0320 	and.w	r3, r3, #32
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d025      	beq.n	800fe7a <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fe2e:	2000      	movs	r0, #0
 800fe30:	f7ff fd6c 	bl	800f90c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fe34:	f7ff ff00 	bl	800fc38 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800fe38:	f001 ffee 	bl	8011e18 <IsRequestPending>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d006      	beq.n	800fe50 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fe42:	f7ff feb3 	bl	800fbac <LoRaMacCheckForBeaconAcquisition>
 800fe46:	4603      	mov	r3, r0
 800fe48:	461a      	mov	r2, r3
 800fe4a:	79fb      	ldrb	r3, [r7, #7]
 800fe4c:	4313      	orrs	r3, r2
 800fe4e:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d103      	bne.n	800fe5e <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800fe56:	f7ff fe73 	bl	800fb40 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fe5a:	f7ff fe15 	bl	800fa88 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800fe5e:	f7ff fd65 	bl	800f92c <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800fe62:	f7ff fdc5 	bl	800f9f0 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fe66:	2001      	movs	r0, #1
 800fe68:	f7ff fd50 	bl	800f90c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fe6c:	4a12      	ldr	r2, [pc, #72]	; (800feb8 <LoRaMacProcess+0xac>)
 800fe6e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fe72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe76:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800fe7a:	f7ff fdcd 	bl	800fa18 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fe7e:	4b0e      	ldr	r3, [pc, #56]	; (800feb8 <LoRaMacProcess+0xac>)
 800fe80:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d101      	bne.n	800fe8c <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800fe88:	f001 fbe0 	bl	801164c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800fe8c:	4b0a      	ldr	r3, [pc, #40]	; (800feb8 <LoRaMacProcess+0xac>)
 800fe8e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 800fe92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d009      	beq.n	800feb0 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800fe9c:	4a06      	ldr	r2, [pc, #24]	; (800feb8 <LoRaMacProcess+0xac>)
 800fe9e:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 800fea2:	f36f 1386 	bfc	r3, #6, #1
 800fea6:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
        LoRaMacHandleNvm( &Nvm );
 800feaa:	4804      	ldr	r0, [pc, #16]	; (800febc <LoRaMacProcess+0xb0>)
 800feac:	f7ff fee4 	bl	800fc78 <LoRaMacHandleNvm>
    }
}
 800feb0:	bf00      	nop
 800feb2:	3708      	adds	r7, #8
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}
 800feb8:	2000082c 	.word	0x2000082c
 800febc:	20000d4c 	.word	0x20000d4c

0800fec0 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800fec8:	481e      	ldr	r0, [pc, #120]	; (800ff44 <OnTxDelayedTimerEvent+0x84>)
 800feca:	f00b fe8b 	bl	801bbe4 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800fece:	4b1e      	ldr	r3, [pc, #120]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800fed0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fed4:	f023 0320 	bic.w	r3, r3, #32
 800fed8:	4a1b      	ldr	r2, [pc, #108]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800feda:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800fede:	4b1b      	ldr	r3, [pc, #108]	; (800ff4c <OnTxDelayedTimerEvent+0x8c>)
 800fee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fee4:	4a18      	ldr	r2, [pc, #96]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800fee6:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 800feea:	4611      	mov	r1, r2
 800feec:	4618      	mov	r0, r3
 800feee:	f7ff ff6f 	bl	800fdd0 <LoRaMacHandleResponseTimeout>
 800fef2:	4603      	mov	r3, r0
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d11e      	bne.n	800ff36 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800fef8:	2001      	movs	r0, #1
 800fefa:	f001 f92d 	bl	8011158 <ScheduleTx>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d01a      	beq.n	800ff3a <OnTxDelayedTimerEvent+0x7a>
 800ff04:	2b0b      	cmp	r3, #11
 800ff06:	d018      	beq.n	800ff3a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ff08:	4b10      	ldr	r3, [pc, #64]	; (800ff4c <OnTxDelayedTimerEvent+0x8c>)
 800ff0a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800ff0e:	b2da      	uxtb	r2, r3
 800ff10:	4b0d      	ldr	r3, [pc, #52]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800ff12:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ff16:	4b0c      	ldr	r3, [pc, #48]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800ff18:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 800ff1c:	4b0a      	ldr	r3, [pc, #40]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800ff1e:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800ff22:	4b09      	ldr	r3, [pc, #36]	; (800ff48 <OnTxDelayedTimerEvent+0x88>)
 800ff24:	2209      	movs	r2, #9
 800ff26:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800ff2a:	2009      	movs	r0, #9
 800ff2c:	f004 f918 	bl	8014160 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800ff30:	f001 ff18 	bl	8011d64 <StopRetransmission>
            break;
 800ff34:	e002      	b.n	800ff3c <OnTxDelayedTimerEvent+0x7c>
        return;
 800ff36:	bf00      	nop
 800ff38:	e000      	b.n	800ff3c <OnTxDelayedTimerEvent+0x7c>
            break;
 800ff3a:	bf00      	nop
        }
    }
}
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	20000b94 	.word	0x20000b94
 800ff48:	2000082c 	.word	0x2000082c
 800ff4c:	20000d4c 	.word	0x20000d4c

0800ff50 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ff58:	4b17      	ldr	r3, [pc, #92]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff5a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800ff5e:	4b16      	ldr	r3, [pc, #88]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff60:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ff64:	4b15      	ldr	r3, [pc, #84]	; (800ffbc <OnRxWindow1TimerEvent+0x6c>)
 800ff66:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800ff6a:	b25a      	sxtb	r2, r3
 800ff6c:	4b12      	ldr	r3, [pc, #72]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff6e:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ff72:	4b12      	ldr	r3, [pc, #72]	; (800ffbc <OnRxWindow1TimerEvent+0x6c>)
 800ff74:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800ff78:	4b0f      	ldr	r3, [pc, #60]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff7a:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ff7e:	4b0f      	ldr	r3, [pc, #60]	; (800ffbc <OnRxWindow1TimerEvent+0x6c>)
 800ff80:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800ff84:	4b0c      	ldr	r3, [pc, #48]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff86:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ff8a:	4b0b      	ldr	r3, [pc, #44]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ff92:	4b09      	ldr	r3, [pc, #36]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ff9a:	4b08      	ldr	r3, [pc, #32]	; (800ffbc <OnRxWindow1TimerEvent+0x6c>)
 800ff9c:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <OnRxWindow1TimerEvent+0x68>)
 800ffa2:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ffa6:	4906      	ldr	r1, [pc, #24]	; (800ffc0 <OnRxWindow1TimerEvent+0x70>)
 800ffa8:	4806      	ldr	r0, [pc, #24]	; (800ffc4 <OnRxWindow1TimerEvent+0x74>)
 800ffaa:	f001 fb1b 	bl	80115e4 <RxWindowSetup>
}
 800ffae:	bf00      	nop
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	2000082c 	.word	0x2000082c
 800ffbc:	20000d4c 	.word	0x20000d4c
 800ffc0:	20000be4 	.word	0x20000be4
 800ffc4:	20000bac 	.word	0x20000bac

0800ffc8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ffd0:	4b19      	ldr	r3, [pc, #100]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 800ffd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d029      	beq.n	801002e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ffda:	4b17      	ldr	r3, [pc, #92]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 800ffdc:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 800ffe0:	4b15      	ldr	r3, [pc, #84]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 800ffe2:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ffe6:	4b15      	ldr	r3, [pc, #84]	; (801003c <OnRxWindow2TimerEvent+0x74>)
 800ffe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffea:	4a13      	ldr	r2, [pc, #76]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 800ffec:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fff0:	4b12      	ldr	r3, [pc, #72]	; (801003c <OnRxWindow2TimerEvent+0x74>)
 800fff2:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 800fff6:	4b10      	ldr	r3, [pc, #64]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 800fff8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800fffc:	4b0f      	ldr	r3, [pc, #60]	; (801003c <OnRxWindow2TimerEvent+0x74>)
 800fffe:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010002:	4b0d      	ldr	r3, [pc, #52]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 8010004:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010008:	4b0b      	ldr	r3, [pc, #44]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 801000a:	2200      	movs	r2, #0
 801000c:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8010010:	4b09      	ldr	r3, [pc, #36]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 8010012:	2201      	movs	r2, #1
 8010014:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010018:	4b08      	ldr	r3, [pc, #32]	; (801003c <OnRxWindow2TimerEvent+0x74>)
 801001a:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 801001e:	4b06      	ldr	r3, [pc, #24]	; (8010038 <OnRxWindow2TimerEvent+0x70>)
 8010020:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8010024:	4906      	ldr	r1, [pc, #24]	; (8010040 <OnRxWindow2TimerEvent+0x78>)
 8010026:	4807      	ldr	r0, [pc, #28]	; (8010044 <OnRxWindow2TimerEvent+0x7c>)
 8010028:	f001 fadc 	bl	80115e4 <RxWindowSetup>
 801002c:	e000      	b.n	8010030 <OnRxWindow2TimerEvent+0x68>
        return;
 801002e:	bf00      	nop
}
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	2000082c 	.word	0x2000082c
 801003c:	20000d4c 	.word	0x20000d4c
 8010040:	20000bfc 	.word	0x20000bfc
 8010044:	20000bc4 	.word	0x20000bc4

08010048 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b082      	sub	sp, #8
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010050:	480f      	ldr	r0, [pc, #60]	; (8010090 <OnRetransmitTimeoutTimerEvent+0x48>)
 8010052:	f00b fdc7 	bl	801bbe4 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 8010056:	4b0f      	ldr	r3, [pc, #60]	; (8010094 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010058:	f893 341e 	ldrb.w	r3, [r3, #1054]	; 0x41e
 801005c:	2b00      	cmp	r3, #0
 801005e:	d003      	beq.n	8010068 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 8010060:	4b0c      	ldr	r3, [pc, #48]	; (8010094 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010062:	2201      	movs	r2, #1
 8010064:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010068:	4b0a      	ldr	r3, [pc, #40]	; (8010094 <OnRetransmitTimeoutTimerEvent+0x4c>)
 801006a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00a      	beq.n	8010088 <OnRetransmitTimeoutTimerEvent+0x40>
 8010072:	4b08      	ldr	r3, [pc, #32]	; (8010094 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010074:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010078:	691b      	ldr	r3, [r3, #16]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d004      	beq.n	8010088 <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801007e:	4b05      	ldr	r3, [pc, #20]	; (8010094 <OnRetransmitTimeoutTimerEvent+0x4c>)
 8010080:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010084:	691b      	ldr	r3, [r3, #16]
 8010086:	4798      	blx	r3
    }
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	20000c30 	.word	0x20000c30
 8010094:	2000082c 	.word	0x2000082c

08010098 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	60ba      	str	r2, [r7, #8]
 80100a0:	607b      	str	r3, [r7, #4]
 80100a2:	4603      	mov	r3, r0
 80100a4:	73fb      	strb	r3, [r7, #15]
 80100a6:	460b      	mov	r3, r1
 80100a8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80100aa:	68bb      	ldr	r3, [r7, #8]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d005      	beq.n	80100bc <GetFCntDown+0x24>
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d002      	beq.n	80100bc <GetFCntDown+0x24>
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d101      	bne.n	80100c0 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80100bc:	2309      	movs	r3, #9
 80100be:	e028      	b.n	8010112 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d016      	beq.n	80100f4 <GetFCntDown+0x5c>
 80100c6:	2b01      	cmp	r3, #1
 80100c8:	d118      	bne.n	80100fc <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 80100ca:	79bb      	ldrb	r3, [r7, #6]
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d10d      	bne.n	80100ec <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 80100d0:	7bbb      	ldrb	r3, [r7, #14]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d002      	beq.n	80100dc <GetFCntDown+0x44>
 80100d6:	7bbb      	ldrb	r3, [r7, #14]
 80100d8:	2b03      	cmp	r3, #3
 80100da:	d103      	bne.n	80100e4 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 80100dc:	69bb      	ldr	r3, [r7, #24]
 80100de:	2202      	movs	r2, #2
 80100e0:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 80100e2:	e00d      	b.n	8010100 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	2201      	movs	r2, #1
 80100e8:	701a      	strb	r2, [r3, #0]
            break;
 80100ea:	e009      	b.n	8010100 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 80100ec:	69bb      	ldr	r3, [r7, #24]
 80100ee:	2203      	movs	r2, #3
 80100f0:	701a      	strb	r2, [r3, #0]
            break;
 80100f2:	e005      	b.n	8010100 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	2204      	movs	r2, #4
 80100f8:	701a      	strb	r2, [r3, #0]
            break;
 80100fa:	e001      	b.n	8010100 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80100fc:	2305      	movs	r3, #5
 80100fe:	e008      	b.n	8010112 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	7818      	ldrb	r0, [r3, #0]
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	89db      	ldrh	r3, [r3, #14]
 8010108:	69fa      	ldr	r2, [r7, #28]
 801010a:	4619      	mov	r1, r3
 801010c:	f004 fc52 	bl	80149b4 <LoRaMacCryptoGetFCntDown>
 8010110:	4603      	mov	r3, r0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
	...

0801011c <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801011c:	b5b0      	push	{r4, r5, r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	4603      	mov	r3, r0
 8010124:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010126:	2303      	movs	r3, #3
 8010128:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801012a:	4b62      	ldr	r3, [pc, #392]	; (80102b4 <SwitchClass+0x198>)
 801012c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010130:	2b02      	cmp	r3, #2
 8010132:	f000 80a7 	beq.w	8010284 <SwitchClass+0x168>
 8010136:	2b02      	cmp	r3, #2
 8010138:	f300 80b6 	bgt.w	80102a8 <SwitchClass+0x18c>
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <SwitchClass+0x2c>
 8010140:	2b01      	cmp	r3, #1
 8010142:	f000 8091 	beq.w	8010268 <SwitchClass+0x14c>
 8010146:	e0af      	b.n	80102a8 <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8010148:	79fb      	ldrb	r3, [r7, #7]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d107      	bne.n	801015e <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801014e:	4b59      	ldr	r3, [pc, #356]	; (80102b4 <SwitchClass+0x198>)
 8010150:	4a58      	ldr	r2, [pc, #352]	; (80102b4 <SwitchClass+0x198>)
 8010152:	336c      	adds	r3, #108	; 0x6c
 8010154:	3264      	adds	r2, #100	; 0x64
 8010156:	e892 0003 	ldmia.w	r2, {r0, r1}
 801015a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 801015e:	79fb      	ldrb	r3, [r7, #7]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d10c      	bne.n	801017e <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 8010164:	79fb      	ldrb	r3, [r7, #7]
 8010166:	4618      	mov	r0, r3
 8010168:	f003 fb74 	bl	8013854 <LoRaMacClassBSwitchClass>
 801016c:	4603      	mov	r3, r0
 801016e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 8010170:	7bfb      	ldrb	r3, [r7, #15]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d103      	bne.n	801017e <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 8010176:	4a4f      	ldr	r2, [pc, #316]	; (80102b4 <SwitchClass+0x198>)
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
                }
            }

            if( deviceClass == CLASS_C )
 801017e:	79fb      	ldrb	r3, [r7, #7]
 8010180:	2b02      	cmp	r3, #2
 8010182:	f040 808c 	bne.w	801029e <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8010186:	4a4b      	ldr	r2, [pc, #300]	; (80102b4 <SwitchClass+0x198>)
 8010188:	79fb      	ldrb	r3, [r7, #7]
 801018a:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801018e:	4a4a      	ldr	r2, [pc, #296]	; (80102b8 <SwitchClass+0x19c>)
 8010190:	4b49      	ldr	r3, [pc, #292]	; (80102b8 <SwitchClass+0x19c>)
 8010192:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8010196:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801019e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80101a2:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80101a6:	4b44      	ldr	r3, [pc, #272]	; (80102b8 <SwitchClass+0x19c>)
 80101a8:	2202      	movs	r2, #2
 80101aa:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80101ae:	2300      	movs	r3, #0
 80101b0:	73bb      	strb	r3, [r7, #14]
 80101b2:	e049      	b.n	8010248 <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 80101b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101b8:	4a3e      	ldr	r2, [pc, #248]	; (80102b4 <SwitchClass+0x198>)
 80101ba:	212c      	movs	r1, #44	; 0x2c
 80101bc:	fb01 f303 	mul.w	r3, r1, r3
 80101c0:	4413      	add	r3, r2
 80101c2:	33da      	adds	r3, #218	; 0xda
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d038      	beq.n	801023c <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 80101ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101ce:	4a39      	ldr	r2, [pc, #228]	; (80102b4 <SwitchClass+0x198>)
 80101d0:	212c      	movs	r1, #44	; 0x2c
 80101d2:	fb01 f303 	mul.w	r3, r1, r3
 80101d6:	4413      	add	r3, r2
 80101d8:	33f0      	adds	r3, #240	; 0xf0
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	4a35      	ldr	r2, [pc, #212]	; (80102b4 <SwitchClass+0x198>)
 80101de:	66d3      	str	r3, [r2, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 80101e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80101e4:	4a33      	ldr	r2, [pc, #204]	; (80102b4 <SwitchClass+0x198>)
 80101e6:	212c      	movs	r1, #44	; 0x2c
 80101e8:	fb01 f303 	mul.w	r3, r1, r3
 80101ec:	4413      	add	r3, r2
 80101ee:	33f4      	adds	r3, #244	; 0xf4
 80101f0:	f993 3000 	ldrsb.w	r3, [r3]
 80101f4:	b2da      	uxtb	r2, r3
 80101f6:	4b2f      	ldr	r3, [pc, #188]	; (80102b4 <SwitchClass+0x198>)
 80101f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 80101fc:	4b2e      	ldr	r3, [pc, #184]	; (80102b8 <SwitchClass+0x19c>)
 80101fe:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8010202:	4b2d      	ldr	r3, [pc, #180]	; (80102b8 <SwitchClass+0x19c>)
 8010204:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010208:	4b2a      	ldr	r3, [pc, #168]	; (80102b4 <SwitchClass+0x198>)
 801020a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801020c:	4a2a      	ldr	r2, [pc, #168]	; (80102b8 <SwitchClass+0x19c>)
 801020e:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010212:	4b28      	ldr	r3, [pc, #160]	; (80102b4 <SwitchClass+0x198>)
 8010214:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8010218:	4b27      	ldr	r3, [pc, #156]	; (80102b8 <SwitchClass+0x19c>)
 801021a:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 801021e:	4b25      	ldr	r3, [pc, #148]	; (80102b4 <SwitchClass+0x198>)
 8010220:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8010224:	4b24      	ldr	r3, [pc, #144]	; (80102b8 <SwitchClass+0x19c>)
 8010226:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801022a:	4b23      	ldr	r3, [pc, #140]	; (80102b8 <SwitchClass+0x19c>)
 801022c:	2203      	movs	r2, #3
 801022e:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8010232:	4b21      	ldr	r3, [pc, #132]	; (80102b8 <SwitchClass+0x19c>)
 8010234:	2201      	movs	r2, #1
 8010236:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 801023a:	e009      	b.n	8010250 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801023c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010240:	b2db      	uxtb	r3, r3
 8010242:	3301      	adds	r3, #1
 8010244:	b2db      	uxtb	r3, r3
 8010246:	73bb      	strb	r3, [r7, #14]
 8010248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801024c:	2b00      	cmp	r3, #0
 801024e:	ddb1      	ble.n	80101b4 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 8010250:	4b19      	ldr	r3, [pc, #100]	; (80102b8 <SwitchClass+0x19c>)
 8010252:	2200      	movs	r2, #0
 8010254:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 8010258:	4b18      	ldr	r3, [pc, #96]	; (80102bc <SwitchClass+0x1a0>)
 801025a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025c:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 801025e:	f001 f9f5 	bl	801164c <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 8010262:	2300      	movs	r3, #0
 8010264:	73fb      	strb	r3, [r7, #15]
            }
            break;
 8010266:	e01a      	b.n	801029e <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	4618      	mov	r0, r3
 801026c:	f003 faf2 	bl	8013854 <LoRaMacClassBSwitchClass>
 8010270:	4603      	mov	r3, r0
 8010272:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 8010274:	7bfb      	ldrb	r3, [r7, #15]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d113      	bne.n	80102a2 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801027a:	4a0e      	ldr	r2, [pc, #56]	; (80102b4 <SwitchClass+0x198>)
 801027c:	79fb      	ldrb	r3, [r7, #7]
 801027e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104
            }
            break;
 8010282:	e00e      	b.n	80102a2 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d10d      	bne.n	80102a6 <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 801028a:	4a0a      	ldr	r2, [pc, #40]	; (80102b4 <SwitchClass+0x198>)
 801028c:	79fb      	ldrb	r3, [r7, #7]
 801028e:	f882 3104 	strb.w	r3, [r2, #260]	; 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 8010292:	4b0a      	ldr	r3, [pc, #40]	; (80102bc <SwitchClass+0x1a0>)
 8010294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010296:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8010298:	2300      	movs	r3, #0
 801029a:	73fb      	strb	r3, [r7, #15]
            }
            break;
 801029c:	e003      	b.n	80102a6 <SwitchClass+0x18a>
            break;
 801029e:	bf00      	nop
 80102a0:	e002      	b.n	80102a8 <SwitchClass+0x18c>
            break;
 80102a2:	bf00      	nop
 80102a4:	e000      	b.n	80102a8 <SwitchClass+0x18c>
            break;
 80102a6:	bf00      	nop
        }
    }

    return status;
 80102a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3710      	adds	r7, #16
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bdb0      	pop	{r4, r5, r7, pc}
 80102b2:	bf00      	nop
 80102b4:	20000d4c 	.word	0x20000d4c
 80102b8:	2000082c 	.word	0x2000082c
 80102bc:	0801d538 	.word	0x0801d538

080102c0 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b086      	sub	sp, #24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	4603      	mov	r3, r0
 80102c8:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80102ca:	4b10      	ldr	r3, [pc, #64]	; (801030c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80102cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80102d0:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 80102d6:	230d      	movs	r3, #13
 80102d8:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80102da:	4b0c      	ldr	r3, [pc, #48]	; (801030c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80102dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80102e4:	230e      	movs	r3, #14
 80102e6:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102e8:	4b08      	ldr	r3, [pc, #32]	; (801030c <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 80102ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80102ee:	f107 0210 	add.w	r2, r7, #16
 80102f2:	4611      	mov	r1, r2
 80102f4:	4618      	mov	r0, r3
 80102f6:	f005 f9bb 	bl	8015670 <RegionGetPhyParam>
 80102fa:	4603      	mov	r3, r0
 80102fc:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	b2db      	uxtb	r3, r3
}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	20000d4c 	.word	0x20000d4c

08010310 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b084      	sub	sp, #16
 8010314:	af00      	add	r7, sp, #0
 8010316:	4603      	mov	r3, r0
 8010318:	71fb      	strb	r3, [r7, #7]
 801031a:	460b      	mov	r3, r1
 801031c:	71bb      	strb	r3, [r7, #6]
 801031e:	4613      	mov	r3, r2
 8010320:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8010322:	2300      	movs	r3, #0
 8010324:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 8010326:	2300      	movs	r3, #0
 8010328:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801032a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801032e:	4618      	mov	r0, r3
 8010330:	f7ff ffc6 	bl	80102c0 <GetMaxAppPayloadWithoutFOptsLength>
 8010334:	4603      	mov	r3, r0
 8010336:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 8010338:	79fb      	ldrb	r3, [r7, #7]
 801033a:	b29a      	uxth	r2, r3
 801033c:	797b      	ldrb	r3, [r7, #5]
 801033e:	b29b      	uxth	r3, r3
 8010340:	4413      	add	r3, r2
 8010342:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8010344:	89ba      	ldrh	r2, [r7, #12]
 8010346:	89fb      	ldrh	r3, [r7, #14]
 8010348:	429a      	cmp	r2, r3
 801034a:	d804      	bhi.n	8010356 <ValidatePayloadLength+0x46>
 801034c:	89bb      	ldrh	r3, [r7, #12]
 801034e:	2bff      	cmp	r3, #255	; 0xff
 8010350:	d801      	bhi.n	8010356 <ValidatePayloadLength+0x46>
    {
        return true;
 8010352:	2301      	movs	r3, #1
 8010354:	e000      	b.n	8010358 <ValidatePayloadLength+0x48>
    }
    return false;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3710      	adds	r7, #16
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 8010360:	b590      	push	{r4, r7, lr}
 8010362:	b0a5      	sub	sp, #148	; 0x94
 8010364:	af02      	add	r7, sp, #8
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	4608      	mov	r0, r1
 801036a:	4611      	mov	r1, r2
 801036c:	461a      	mov	r2, r3
 801036e:	4603      	mov	r3, r0
 8010370:	70fb      	strb	r3, [r7, #3]
 8010372:	460b      	mov	r3, r1
 8010374:	70bb      	strb	r3, [r7, #2]
 8010376:	4613      	mov	r3, r2
 8010378:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 801037a:	2300      	movs	r3, #0
 801037c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 8010380:	2300      	movs	r3, #0
 8010382:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010386:	2300      	movs	r3, #0
 8010388:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 801038c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 84ab 	beq.w	8010cec <ProcessMacCommands+0x98c>
 8010396:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 801039a:	2b01      	cmp	r3, #1
 801039c:	f040 84ac 	bne.w	8010cf8 <ProcessMacCommands+0x998>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80103a0:	f000 bca4 	b.w	8010cec <ProcessMacCommands+0x98c>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80103a4:	78fb      	ldrb	r3, [r7, #3]
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	4413      	add	r3, r2
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	4618      	mov	r0, r3
 80103ae:	f003 fd33 	bl	8013e18 <LoRaMacCommandsGetCmdSize>
 80103b2:	4603      	mov	r3, r0
 80103b4:	461a      	mov	r2, r3
 80103b6:	78fb      	ldrb	r3, [r7, #3]
 80103b8:	441a      	add	r2, r3
 80103ba:	78bb      	ldrb	r3, [r7, #2]
 80103bc:	429a      	cmp	r2, r3
 80103be:	f300 849d 	bgt.w	8010cfc <ProcessMacCommands+0x99c>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 80103c2:	78fb      	ldrb	r3, [r7, #3]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	70fa      	strb	r2, [r7, #3]
 80103c8:	461a      	mov	r2, r3
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	4413      	add	r3, r2
 80103ce:	781b      	ldrb	r3, [r3, #0]
 80103d0:	3b02      	subs	r3, #2
 80103d2:	2b11      	cmp	r3, #17
 80103d4:	f200 8494 	bhi.w	8010d00 <ProcessMacCommands+0x9a0>
 80103d8:	a201      	add	r2, pc, #4	; (adr r2, 80103e0 <ProcessMacCommands+0x80>)
 80103da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103de:	bf00      	nop
 80103e0:	08010429 	.word	0x08010429
 80103e4:	0801046b 	.word	0x0801046b
 80103e8:	080105e7 	.word	0x080105e7
 80103ec:	08010625 	.word	0x08010625
 80103f0:	0801071d 	.word	0x0801071d
 80103f4:	0801076d 	.word	0x0801076d
 80103f8:	08010829 	.word	0x08010829
 80103fc:	0801087f 	.word	0x0801087f
 8010400:	08010963 	.word	0x08010963
 8010404:	08010d01 	.word	0x08010d01
 8010408:	08010d01 	.word	0x08010d01
 801040c:	08010a0d 	.word	0x08010a0d
 8010410:	08010d01 	.word	0x08010d01
 8010414:	08010d01 	.word	0x08010d01
 8010418:	08010b2d 	.word	0x08010b2d
 801041c:	08010b61 	.word	0x08010b61
 8010420:	08010bf1 	.word	0x08010bf1
 8010424:	08010c67 	.word	0x08010c67
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8010428:	2004      	movs	r0, #4
 801042a:	f003 fecd 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 801042e:	4603      	mov	r3, r0
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 845b 	beq.w	8010cec <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8010436:	2104      	movs	r1, #4
 8010438:	2000      	movs	r0, #0
 801043a:	f003 fe39 	bl	80140b0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801043e:	78fb      	ldrb	r3, [r7, #3]
 8010440:	1c5a      	adds	r2, r3, #1
 8010442:	70fa      	strb	r2, [r7, #3]
 8010444:	461a      	mov	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	4413      	add	r3, r2
 801044a:	781a      	ldrb	r2, [r3, #0]
 801044c:	4bb0      	ldr	r3, [pc, #704]	; (8010710 <ProcessMacCommands+0x3b0>)
 801044e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8010452:	78fb      	ldrb	r3, [r7, #3]
 8010454:	1c5a      	adds	r2, r3, #1
 8010456:	70fa      	strb	r2, [r7, #3]
 8010458:	461a      	mov	r2, r3
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	4413      	add	r3, r2
 801045e:	781a      	ldrb	r2, [r3, #0]
 8010460:	4bab      	ldr	r3, [pc, #684]	; (8010710 <ProcessMacCommands+0x3b0>)
 8010462:	f883 2461 	strb.w	r2, [r3, #1121]	; 0x461
                }
                break;
 8010466:	f000 bc41 	b.w	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 801046a:	2300      	movs	r3, #0
 801046c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 8010470:	2300      	movs	r3, #0
 8010472:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 8010476:	2300      	movs	r3, #0
 8010478:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 801047c:	2300      	movs	r3, #0
 801047e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 8010482:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010486:	f083 0301 	eor.w	r3, r3, #1
 801048a:	b2db      	uxtb	r3, r3
 801048c:	2b00      	cmp	r3, #0
 801048e:	f000 80a5 	beq.w	80105dc <ProcessMacCommands+0x27c>
                {
                    adrBlockFound = true;
 8010492:	2301      	movs	r3, #1
 8010494:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	3b01      	subs	r3, #1
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	4413      	add	r3, r2
 80104a0:	65fb      	str	r3, [r7, #92]	; 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80104a2:	4b9c      	ldr	r3, [pc, #624]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104a4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80104a8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80104ac:	4b99      	ldr	r3, [pc, #612]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80104b2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80104b6:	4b97      	ldr	r3, [pc, #604]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104b8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80104bc:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80104c0:	4b94      	ldr	r3, [pc, #592]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104c2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80104c6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80104ca:	4b92      	ldr	r3, [pc, #584]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104cc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80104d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80104d4:	4b8f      	ldr	r3, [pc, #572]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104d6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80104da:	65bb      	str	r3, [r7, #88]	; 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80104dc:	4b8d      	ldr	r3, [pc, #564]	; (8010714 <ProcessMacCommands+0x3b4>)
 80104de:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d008      	beq.n	80104f8 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80104e6:	78ba      	ldrb	r2, [r7, #2]
 80104e8:	78fb      	ldrb	r3, [r7, #3]
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	3301      	adds	r3, #1
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80104f6:	e002      	b.n	80104fe <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 80104f8:	2305      	movs	r3, #5
 80104fa:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80104fe:	4b85      	ldr	r3, [pc, #532]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010500:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010504:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8010508:	f107 0257 	add.w	r2, r7, #87	; 0x57
 801050c:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010510:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010514:	9301      	str	r3, [sp, #4]
 8010516:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801051a:	9300      	str	r3, [sp, #0]
 801051c:	4623      	mov	r3, r4
 801051e:	f005 f964 	bl	80157ea <RegionLinkAdrReq>
 8010522:	4603      	mov	r3, r0
 8010524:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 8010528:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801052c:	f003 0307 	and.w	r3, r3, #7
 8010530:	2b07      	cmp	r3, #7
 8010532:	d119      	bne.n	8010568 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8010534:	4b77      	ldr	r3, [pc, #476]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010536:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801053a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801053e:	429a      	cmp	r2, r3
 8010540:	da03      	bge.n	801054a <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8010542:	4b74      	ldr	r3, [pc, #464]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010544:	2201      	movs	r2, #1
 8010546:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 801054a:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801054e:	4b71      	ldr	r3, [pc, #452]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8010554:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8010558:	4b6e      	ldr	r3, [pc, #440]	; (8010714 <ProcessMacCommands+0x3b4>)
 801055a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801055e:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8010562:	4b6c      	ldr	r3, [pc, #432]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010564:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8010568:	2300      	movs	r3, #0
 801056a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 801056e:	e00b      	b.n	8010588 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8010570:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8010574:	2201      	movs	r2, #1
 8010576:	4619      	mov	r1, r3
 8010578:	2003      	movs	r0, #3
 801057a:	f003 fafd 	bl	8013b78 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801057e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010582:	3301      	adds	r3, #1
 8010584:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010588:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801058c:	4a62      	ldr	r2, [pc, #392]	; (8010718 <ProcessMacCommands+0x3b8>)
 801058e:	fba2 2303 	umull	r2, r3, r2, r3
 8010592:	089b      	lsrs	r3, r3, #2
 8010594:	b2db      	uxtb	r3, r3
 8010596:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 801059a:	429a      	cmp	r2, r3
 801059c:	d3e8      	bcc.n	8010570 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 801059e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80105a2:	78fb      	ldrb	r3, [r7, #3]
 80105a4:	4413      	add	r3, r2
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	3b01      	subs	r3, #1
 80105aa:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 80105ac:	78fa      	ldrb	r2, [r7, #3]
 80105ae:	78bb      	ldrb	r3, [r7, #2]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d20a      	bcs.n	80105ca <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80105b4:	78fb      	ldrb	r3, [r7, #3]
 80105b6:	1c5a      	adds	r2, r3, #1
 80105b8:	70fa      	strb	r2, [r7, #3]
 80105ba:	461a      	mov	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4413      	add	r3, r2
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b03      	cmp	r3, #3
 80105c4:	f43f af68 	beq.w	8010498 <ProcessMacCommands+0x138>
 80105c8:	e000      	b.n	80105cc <ProcessMacCommands+0x26c>
                            break;
 80105ca:	bf00      	nop

                    if( macIndex < commandsSize )
 80105cc:	78fa      	ldrb	r2, [r7, #3]
 80105ce:	78bb      	ldrb	r3, [r7, #2]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d206      	bcs.n	80105e2 <ProcessMacCommands+0x282>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 80105d4:	78fb      	ldrb	r3, [r7, #3]
 80105d6:	3b01      	subs	r3, #1
 80105d8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80105da:	e002      	b.n	80105e2 <ProcessMacCommands+0x282>
                    macIndex += 4;
 80105dc:	78fb      	ldrb	r3, [r7, #3]
 80105de:	3304      	adds	r3, #4
 80105e0:	70fb      	strb	r3, [r7, #3]
                break;
 80105e2:	bf00      	nop
 80105e4:	e382      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80105e6:	78fb      	ldrb	r3, [r7, #3]
 80105e8:	1c5a      	adds	r2, r3, #1
 80105ea:	70fa      	strb	r2, [r7, #3]
 80105ec:	461a      	mov	r2, r3
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4413      	add	r3, r2
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	f003 030f 	and.w	r3, r3, #15
 80105f8:	b2da      	uxtb	r2, r3
 80105fa:	4b46      	ldr	r3, [pc, #280]	; (8010714 <ProcessMacCommands+0x3b4>)
 80105fc:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8010600:	4b44      	ldr	r3, [pc, #272]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010602:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010606:	461a      	mov	r2, r3
 8010608:	2301      	movs	r3, #1
 801060a:	4093      	lsls	r3, r2
 801060c:	b29a      	uxth	r2, r3
 801060e:	4b41      	ldr	r3, [pc, #260]	; (8010714 <ProcessMacCommands+0x3b4>)
 8010610:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8010614:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010618:	2200      	movs	r2, #0
 801061a:	4619      	mov	r1, r3
 801061c:	2004      	movs	r0, #4
 801061e:	f003 faab 	bl	8013b78 <LoRaMacCommandsAddCmd>
                break;
 8010622:	e363      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8010624:	2307      	movs	r3, #7
 8010626:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801062a:	78fb      	ldrb	r3, [r7, #3]
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	4413      	add	r3, r2
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	091b      	lsrs	r3, r3, #4
 8010634:	b2db      	uxtb	r3, r3
 8010636:	b25b      	sxtb	r3, r3
 8010638:	f003 0307 	and.w	r3, r3, #7
 801063c:	b25b      	sxtb	r3, r3
 801063e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8010642:	78fb      	ldrb	r3, [r7, #3]
 8010644:	687a      	ldr	r2, [r7, #4]
 8010646:	4413      	add	r3, r2
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	b25b      	sxtb	r3, r3
 801064c:	f003 030f 	and.w	r3, r3, #15
 8010650:	b25b      	sxtb	r3, r3
 8010652:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8010656:	78fb      	ldrb	r3, [r7, #3]
 8010658:	3301      	adds	r3, #1
 801065a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801065c:	78fb      	ldrb	r3, [r7, #3]
 801065e:	1c5a      	adds	r2, r3, #1
 8010660:	70fa      	strb	r2, [r7, #3]
 8010662:	461a      	mov	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4413      	add	r3, r2
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801066c:	78fb      	ldrb	r3, [r7, #3]
 801066e:	1c5a      	adds	r2, r3, #1
 8010670:	70fa      	strb	r2, [r7, #3]
 8010672:	461a      	mov	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	4413      	add	r3, r2
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	021a      	lsls	r2, r3, #8
 801067c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067e:	4313      	orrs	r3, r2
 8010680:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8010682:	78fb      	ldrb	r3, [r7, #3]
 8010684:	1c5a      	adds	r2, r3, #1
 8010686:	70fa      	strb	r2, [r7, #3]
 8010688:	461a      	mov	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4413      	add	r3, r2
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	041a      	lsls	r2, r3, #16
 8010692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010694:	4313      	orrs	r3, r2
 8010696:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8010698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801069a:	2264      	movs	r2, #100	; 0x64
 801069c:	fb02 f303 	mul.w	r3, r2, r3
 80106a0:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80106a2:	4b1c      	ldr	r3, [pc, #112]	; (8010714 <ProcessMacCommands+0x3b4>)
 80106a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106a8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80106ac:	4611      	mov	r1, r2
 80106ae:	4618      	mov	r0, r3
 80106b0:	f005 f8b5 	bl	801581e <RegionRxParamSetupReq>
 80106b4:	4603      	mov	r3, r0
 80106b6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80106ba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80106be:	f003 0307 	and.w	r3, r3, #7
 80106c2:	2b07      	cmp	r3, #7
 80106c4:	d117      	bne.n	80106f6 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80106c6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80106ca:	b2da      	uxtb	r2, r3
 80106cc:	4b11      	ldr	r3, [pc, #68]	; (8010714 <ProcessMacCommands+0x3b4>)
 80106ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80106d2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80106d6:	b2da      	uxtb	r2, r3
 80106d8:	4b0e      	ldr	r3, [pc, #56]	; (8010714 <ProcessMacCommands+0x3b4>)
 80106da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80106de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106e0:	4a0c      	ldr	r2, [pc, #48]	; (8010714 <ProcessMacCommands+0x3b4>)
 80106e2:	6653      	str	r3, [r2, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80106e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106e6:	4a0b      	ldr	r2, [pc, #44]	; (8010714 <ProcessMacCommands+0x3b4>)
 80106e8:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80106ea:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80106ee:	b2da      	uxtb	r2, r3
 80106f0:	4b08      	ldr	r3, [pc, #32]	; (8010714 <ProcessMacCommands+0x3b4>)
 80106f2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
                }
                macCmdPayload[0] = status;
 80106f6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80106fa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80106fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010702:	2201      	movs	r2, #1
 8010704:	4619      	mov	r1, r3
 8010706:	2005      	movs	r0, #5
 8010708:	f003 fa36 	bl	8013b78 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 801070c:	bf00      	nop
 801070e:	e2ed      	b.n	8010cec <ProcessMacCommands+0x98c>
 8010710:	2000082c 	.word	0x2000082c
 8010714:	20000d4c 	.word	0x20000d4c
 8010718:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 801071c:	23ff      	movs	r3, #255	; 0xff
 801071e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8010722:	4bb7      	ldr	r3, [pc, #732]	; (8010a00 <ProcessMacCommands+0x6a0>)
 8010724:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010728:	2b00      	cmp	r3, #0
 801072a:	d00d      	beq.n	8010748 <ProcessMacCommands+0x3e8>
 801072c:	4bb4      	ldr	r3, [pc, #720]	; (8010a00 <ProcessMacCommands+0x6a0>)
 801072e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d007      	beq.n	8010748 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8010738:	4bb1      	ldr	r3, [pc, #708]	; (8010a00 <ProcessMacCommands+0x6a0>)
 801073a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4798      	blx	r3
 8010742:	4603      	mov	r3, r0
 8010744:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8010748:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801074c:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8010750:	787b      	ldrb	r3, [r7, #1]
 8010752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010756:	b2db      	uxtb	r3, r3
 8010758:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 801075c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010760:	2202      	movs	r2, #2
 8010762:	4619      	mov	r1, r3
 8010764:	2006      	movs	r0, #6
 8010766:	f003 fa07 	bl	8013b78 <LoRaMacCommandsAddCmd>
                break;
 801076a:	e2bf      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801076c:	2303      	movs	r3, #3
 801076e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8010772:	78fb      	ldrb	r3, [r7, #3]
 8010774:	1c5a      	adds	r2, r3, #1
 8010776:	70fa      	strb	r2, [r7, #3]
 8010778:	461a      	mov	r2, r3
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4413      	add	r3, r2
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	b25b      	sxtb	r3, r3
 8010782:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8010786:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801078a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801078c:	78fb      	ldrb	r3, [r7, #3]
 801078e:	1c5a      	adds	r2, r3, #1
 8010790:	70fa      	strb	r2, [r7, #3]
 8010792:	461a      	mov	r2, r3
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4413      	add	r3, r2
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801079c:	78fb      	ldrb	r3, [r7, #3]
 801079e:	1c5a      	adds	r2, r3, #1
 80107a0:	70fa      	strb	r2, [r7, #3]
 80107a2:	461a      	mov	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4413      	add	r3, r2
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	021a      	lsls	r2, r3, #8
 80107ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ae:	4313      	orrs	r3, r2
 80107b0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80107b2:	78fb      	ldrb	r3, [r7, #3]
 80107b4:	1c5a      	adds	r2, r3, #1
 80107b6:	70fa      	strb	r2, [r7, #3]
 80107b8:	461a      	mov	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4413      	add	r3, r2
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	041a      	lsls	r2, r3, #16
 80107c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107c4:	4313      	orrs	r3, r2
 80107c6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80107c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ca:	2264      	movs	r2, #100	; 0x64
 80107cc:	fb02 f303 	mul.w	r3, r2, r3
 80107d0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80107d2:	2300      	movs	r3, #0
 80107d4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80107d6:	78fb      	ldrb	r3, [r7, #3]
 80107d8:	1c5a      	adds	r2, r3, #1
 80107da:	70fa      	strb	r2, [r7, #3]
 80107dc:	461a      	mov	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4413      	add	r3, r2
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	b25b      	sxtb	r3, r3
 80107e6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80107ea:	4b86      	ldr	r3, [pc, #536]	; (8010a04 <ProcessMacCommands+0x6a4>)
 80107ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107f0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80107f4:	4611      	mov	r1, r2
 80107f6:	4618      	mov	r0, r3
 80107f8:	f005 f824 	bl	8015844 <RegionNewChannelReq>
 80107fc:	4603      	mov	r3, r0
 80107fe:	b2db      	uxtb	r3, r3
 8010800:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8010804:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010808:	b25b      	sxtb	r3, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	db0a      	blt.n	8010824 <ProcessMacCommands+0x4c4>
                {
                    macCmdPayload[0] = status;
 801080e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010812:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8010816:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801081a:	2201      	movs	r2, #1
 801081c:	4619      	mov	r1, r3
 801081e:	2007      	movs	r0, #7
 8010820:	f003 f9aa 	bl	8013b78 <LoRaMacCommandsAddCmd>
                }
                break;
 8010824:	bf00      	nop
 8010826:	e261      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8010828:	78fb      	ldrb	r3, [r7, #3]
 801082a:	1c5a      	adds	r2, r3, #1
 801082c:	70fa      	strb	r2, [r7, #3]
 801082e:	461a      	mov	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4413      	add	r3, r2
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	f003 030f 	and.w	r3, r3, #15
 801083a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801083e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010842:	2b00      	cmp	r3, #0
 8010844:	d104      	bne.n	8010850 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 8010846:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801084a:	3301      	adds	r3, #1
 801084c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8010850:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8010854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010858:	fb02 f303 	mul.w	r3, r2, r3
 801085c:	461a      	mov	r2, r3
 801085e:	4b69      	ldr	r3, [pc, #420]	; (8010a04 <ProcessMacCommands+0x6a4>)
 8010860:	651a      	str	r2, [r3, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8010862:	4b68      	ldr	r3, [pc, #416]	; (8010a04 <ProcessMacCommands+0x6a4>)
 8010864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010866:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801086a:	4a66      	ldr	r2, [pc, #408]	; (8010a04 <ProcessMacCommands+0x6a4>)
 801086c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801086e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010872:	2200      	movs	r2, #0
 8010874:	4619      	mov	r1, r3
 8010876:	2008      	movs	r0, #8
 8010878:	f003 f97e 	bl	8013b78 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 801087c:	e236      	b.n	8010cec <ProcessMacCommands+0x98c>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801087e:	78fb      	ldrb	r3, [r7, #3]
 8010880:	1c5a      	adds	r2, r3, #1
 8010882:	70fa      	strb	r2, [r7, #3]
 8010884:	461a      	mov	r2, r3
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	4413      	add	r3, r2
 801088a:	781b      	ldrb	r3, [r3, #0]
 801088c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8010896:	2300      	movs	r3, #0
 8010898:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801089c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80108a0:	f003 0320 	and.w	r3, r3, #32
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d002      	beq.n	80108ae <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80108a8:	2301      	movs	r3, #1
 80108aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80108ae:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80108b2:	f003 0310 	and.w	r3, r3, #16
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d002      	beq.n	80108c0 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80108ba:	2301      	movs	r3, #1
 80108bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80108c0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80108c4:	f003 030f 	and.w	r3, r3, #15
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80108ce:	4b4d      	ldr	r3, [pc, #308]	; (8010a04 <ProcessMacCommands+0x6a4>)
 80108d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80108d4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80108d8:	4611      	mov	r1, r2
 80108da:	4618      	mov	r0, r3
 80108dc:	f004 ffc5 	bl	801586a <RegionTxParamSetupReq>
 80108e0:	4603      	mov	r3, r0
 80108e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e6:	d03a      	beq.n	801095e <ProcessMacCommands+0x5fe>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80108e8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80108ec:	4b45      	ldr	r3, [pc, #276]	; (8010a04 <ProcessMacCommands+0x6a4>)
 80108ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80108f2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80108f6:	4b43      	ldr	r3, [pc, #268]	; (8010a04 <ProcessMacCommands+0x6a4>)
 80108f8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80108fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010900:	461a      	mov	r2, r3
 8010902:	4b41      	ldr	r3, [pc, #260]	; (8010a08 <ProcessMacCommands+0x6a8>)
 8010904:	5c9b      	ldrb	r3, [r3, r2]
 8010906:	4618      	mov	r0, r3
 8010908:	f7ef ff6a 	bl	80007e0 <__aeabi_ui2f>
 801090c:	4603      	mov	r3, r0
 801090e:	4a3d      	ldr	r2, [pc, #244]	; (8010a04 <ProcessMacCommands+0x6a4>)
 8010910:	6793      	str	r3, [r2, #120]	; 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8010912:	2302      	movs	r3, #2
 8010914:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010918:	4b3a      	ldr	r3, [pc, #232]	; (8010a04 <ProcessMacCommands+0x6a4>)
 801091a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 801091e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010922:	4b38      	ldr	r3, [pc, #224]	; (8010a04 <ProcessMacCommands+0x6a4>)
 8010924:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010928:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801092c:	4611      	mov	r1, r2
 801092e:	4618      	mov	r0, r3
 8010930:	f004 fe9e 	bl	8015670 <RegionGetPhyParam>
 8010934:	4603      	mov	r3, r0
 8010936:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8010938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801093a:	b25a      	sxtb	r2, r3
 801093c:	4b31      	ldr	r3, [pc, #196]	; (8010a04 <ProcessMacCommands+0x6a4>)
 801093e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010942:	4293      	cmp	r3, r2
 8010944:	bfb8      	it	lt
 8010946:	4613      	movlt	r3, r2
 8010948:	b25a      	sxtb	r2, r3
 801094a:	4b2e      	ldr	r3, [pc, #184]	; (8010a04 <ProcessMacCommands+0x6a4>)
 801094c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8010950:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010954:	2200      	movs	r2, #0
 8010956:	4619      	mov	r1, r3
 8010958:	2009      	movs	r0, #9
 801095a:	f003 f90d 	bl	8013b78 <LoRaMacCommandsAddCmd>
                }
                break;
 801095e:	bf00      	nop
 8010960:	e1c4      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8010962:	2303      	movs	r3, #3
 8010964:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8010968:	78fb      	ldrb	r3, [r7, #3]
 801096a:	1c5a      	adds	r2, r3, #1
 801096c:	70fa      	strb	r2, [r7, #3]
 801096e:	461a      	mov	r2, r3
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	4413      	add	r3, r2
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 801097a:	78fb      	ldrb	r3, [r7, #3]
 801097c:	1c5a      	adds	r2, r3, #1
 801097e:	70fa      	strb	r2, [r7, #3]
 8010980:	461a      	mov	r2, r3
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	4413      	add	r3, r2
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801098a:	78fb      	ldrb	r3, [r7, #3]
 801098c:	1c5a      	adds	r2, r3, #1
 801098e:	70fa      	strb	r2, [r7, #3]
 8010990:	461a      	mov	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4413      	add	r3, r2
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	021a      	lsls	r2, r3, #8
 801099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099c:	4313      	orrs	r3, r2
 801099e:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80109a0:	78fb      	ldrb	r3, [r7, #3]
 80109a2:	1c5a      	adds	r2, r3, #1
 80109a4:	70fa      	strb	r2, [r7, #3]
 80109a6:	461a      	mov	r2, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4413      	add	r3, r2
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	041a      	lsls	r2, r3, #16
 80109b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b2:	4313      	orrs	r3, r2
 80109b4:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	2264      	movs	r2, #100	; 0x64
 80109ba:	fb02 f303 	mul.w	r3, r2, r3
 80109be:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80109c0:	4b10      	ldr	r3, [pc, #64]	; (8010a04 <ProcessMacCommands+0x6a4>)
 80109c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80109c6:	f107 0220 	add.w	r2, r7, #32
 80109ca:	4611      	mov	r1, r2
 80109cc:	4618      	mov	r0, r3
 80109ce:	f004 ff5f 	bl	8015890 <RegionDlChannelReq>
 80109d2:	4603      	mov	r3, r0
 80109d4:	b2db      	uxtb	r3, r3
 80109d6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80109da:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80109de:	b25b      	sxtb	r3, r3
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	db0a      	blt.n	80109fa <ProcessMacCommands+0x69a>
                {
                    macCmdPayload[0] = status;
 80109e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80109e8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80109ec:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80109f0:	2201      	movs	r2, #1
 80109f2:	4619      	mov	r1, r3
 80109f4:	200a      	movs	r0, #10
 80109f6:	f003 f8bf 	bl	8013b78 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 80109fa:	bf00      	nop
 80109fc:	e176      	b.n	8010cec <ProcessMacCommands+0x98c>
 80109fe:	bf00      	nop
 8010a00:	2000082c 	.word	0x2000082c
 8010a04:	20000d4c 	.word	0x20000d4c
 8010a08:	0801d4f0 	.word	0x0801d4f0
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8010a0c:	2009      	movs	r0, #9
 8010a0e:	f003 fbdb 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	f000 8084 	beq.w	8010b22 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8010a1a:	2109      	movs	r1, #9
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	f003 fb47 	bl	80140b0 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8010a22:	f107 0318 	add.w	r3, r7, #24
 8010a26:	2200      	movs	r2, #0
 8010a28:	601a      	str	r2, [r3, #0]
 8010a2a:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8010a2c:	f107 0310 	add.w	r3, r7, #16
 8010a30:	2200      	movs	r2, #0
 8010a32:	601a      	str	r2, [r3, #0]
 8010a34:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8010a36:	f107 0308 	add.w	r3, r7, #8
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	70fa      	strb	r2, [r7, #3]
 8010a46:	461a      	mov	r2, r3
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8010a50:	78fb      	ldrb	r3, [r7, #3]
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	70fa      	strb	r2, [r7, #3]
 8010a56:	461a      	mov	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	021a      	lsls	r2, r3, #8
 8010a60:	69bb      	ldr	r3, [r7, #24]
 8010a62:	4313      	orrs	r3, r2
 8010a64:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8010a66:	78fb      	ldrb	r3, [r7, #3]
 8010a68:	1c5a      	adds	r2, r3, #1
 8010a6a:	70fa      	strb	r2, [r7, #3]
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	4413      	add	r3, r2
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	041a      	lsls	r2, r3, #16
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	4313      	orrs	r3, r2
 8010a7a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8010a7c:	78fb      	ldrb	r3, [r7, #3]
 8010a7e:	1c5a      	adds	r2, r3, #1
 8010a80:	70fa      	strb	r2, [r7, #3]
 8010a82:	461a      	mov	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	4413      	add	r3, r2
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	061a      	lsls	r2, r3, #24
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8010a92:	78fb      	ldrb	r3, [r7, #3]
 8010a94:	1c5a      	adds	r2, r3, #1
 8010a96:	70fa      	strb	r2, [r7, #3]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	b21b      	sxth	r3, r3
 8010aa2:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8010aa4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010aae:	fb02 f303 	mul.w	r3, r2, r3
 8010ab2:	121b      	asrs	r3, r3, #8
 8010ab4:	b21b      	sxth	r3, r3
 8010ab6:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8010ab8:	f107 0310 	add.w	r3, r7, #16
 8010abc:	f107 0218 	add.w	r2, r7, #24
 8010ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ac4:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8010ac8:	693a      	ldr	r2, [r7, #16]
 8010aca:	4b8f      	ldr	r3, [pc, #572]	; (8010d08 <ProcessMacCommands+0x9a8>)
 8010acc:	4413      	add	r3, r2
 8010ace:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8010ad0:	f107 0308 	add.w	r3, r7, #8
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f00a fc21 	bl	801b31c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8010ada:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010ade:	4b8b      	ldr	r3, [pc, #556]	; (8010d0c <ProcessMacCommands+0x9ac>)
 8010ae0:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8010ae4:	9200      	str	r2, [sp, #0]
 8010ae6:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8010aea:	f107 0210 	add.w	r2, r7, #16
 8010aee:	ca06      	ldmia	r2, {r1, r2}
 8010af0:	f00a fbad 	bl	801b24e <SysTimeSub>
 8010af4:	f107 0010 	add.w	r0, r7, #16
 8010af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010afa:	9300      	str	r3, [sp, #0]
 8010afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010afe:	f107 0208 	add.w	r2, r7, #8
 8010b02:	ca06      	ldmia	r2, {r1, r2}
 8010b04:	f00a fb6a 	bl	801b1dc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8010b08:	f107 0310 	add.w	r3, r7, #16
 8010b0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010b10:	f00a fbd6 	bl	801b2c0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8010b14:	f002 fedc 	bl	80138d0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8010b18:	4b7c      	ldr	r3, [pc, #496]	; (8010d0c <ProcessMacCommands+0x9ac>)
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8010b20:	e0e4      	b.n	8010cec <ProcessMacCommands+0x98c>
                }
                else
                {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010b22:	4b7a      	ldr	r3, [pc, #488]	; (8010d0c <ProcessMacCommands+0x9ac>)
 8010b24:	2200      	movs	r2, #0
 8010b26:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
#endif /* LORAMAC_VERSION */
                }
                break;
 8010b2a:	e0df      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8010b2c:	200c      	movs	r0, #12
 8010b2e:	f003 fb4b 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f000 80d9 	beq.w	8010cec <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8010b3a:	210c      	movs	r1, #12
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	f003 fab7 	bl	80140b0 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8010b42:	4b72      	ldr	r3, [pc, #456]	; (8010d0c <ProcessMacCommands+0x9ac>)
 8010b44:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010b48:	2b04      	cmp	r3, #4
 8010b4a:	f000 80cf 	beq.w	8010cec <ProcessMacCommands+0x98c>
 8010b4e:	4b6f      	ldr	r3, [pc, #444]	; (8010d0c <ProcessMacCommands+0x9ac>)
 8010b50:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8010b54:	2b05      	cmp	r3, #5
 8010b56:	f000 80c9 	beq.w	8010cec <ProcessMacCommands+0x98c>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8010b5a:	f002 fe9a 	bl	8013892 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8010b5e:	e0c5      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8010b60:	2303      	movs	r3, #3
 8010b62:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8010b66:	2300      	movs	r3, #0
 8010b68:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8010b6a:	78fb      	ldrb	r3, [r7, #3]
 8010b6c:	1c5a      	adds	r2, r3, #1
 8010b6e:	70fa      	strb	r2, [r7, #3]
 8010b70:	461a      	mov	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	4413      	add	r3, r2
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010b7a:	78fb      	ldrb	r3, [r7, #3]
 8010b7c:	1c5a      	adds	r2, r3, #1
 8010b7e:	70fa      	strb	r2, [r7, #3]
 8010b80:	461a      	mov	r2, r3
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4413      	add	r3, r2
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	021b      	lsls	r3, r3, #8
 8010b8a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010b90:	78fb      	ldrb	r3, [r7, #3]
 8010b92:	1c5a      	adds	r2, r3, #1
 8010b94:	70fa      	strb	r2, [r7, #3]
 8010b96:	461a      	mov	r2, r3
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4413      	add	r3, r2
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	041b      	lsls	r3, r3, #16
 8010ba0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010ba2:	4313      	orrs	r3, r2
 8010ba4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8010ba6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ba8:	2264      	movs	r2, #100	; 0x64
 8010baa:	fb02 f303 	mul.w	r3, r2, r3
 8010bae:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8010bb0:	78fb      	ldrb	r3, [r7, #3]
 8010bb2:	1c5a      	adds	r2, r3, #1
 8010bb4:	70fa      	strb	r2, [r7, #3]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4413      	add	r3, r2
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	f003 030f 	and.w	r3, r3, #15
 8010bc2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8010bc6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010bca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f002 fe66 	bl	801389e <LoRaMacClassBPingSlotChannelReq>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8010bd8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8010bdc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8010be0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010be4:	2201      	movs	r2, #1
 8010be6:	4619      	mov	r1, r3
 8010be8:	2011      	movs	r0, #17
 8010bea:	f002 ffc5 	bl	8013b78 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 8010bee:	e07d      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8010bf0:	200d      	movs	r0, #13
 8010bf2:	f003 fae9 	bl	80141c8 <LoRaMacConfirmQueueIsCmdActive>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d077      	beq.n	8010cec <ProcessMacCommands+0x98c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8010bfc:	210d      	movs	r1, #13
 8010bfe:	2000      	movs	r0, #0
 8010c00:	f003 fa56 	bl	80140b0 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8010c04:	2300      	movs	r3, #0
 8010c06:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8010c10:	78fb      	ldrb	r3, [r7, #3]
 8010c12:	1c5a      	adds	r2, r3, #1
 8010c14:	70fa      	strb	r2, [r7, #3]
 8010c16:	461a      	mov	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8010c22:	78fb      	ldrb	r3, [r7, #3]
 8010c24:	1c5a      	adds	r2, r3, #1
 8010c26:	70fa      	strb	r2, [r7, #3]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	021b      	lsls	r3, r3, #8
 8010c32:	b21a      	sxth	r2, r3
 8010c34:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	b21b      	sxth	r3, r3
 8010c3c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8010c40:	78fb      	ldrb	r3, [r7, #3]
 8010c42:	1c5a      	adds	r2, r3, #1
 8010c44:	70fa      	strb	r2, [r7, #3]
 8010c46:	461a      	mov	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	4413      	add	r3, r2
 8010c4c:	781b      	ldrb	r3, [r3, #0]
 8010c4e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8010c52:	4b2f      	ldr	r3, [pc, #188]	; (8010d10 <ProcessMacCommands+0x9b0>)
 8010c54:	681a      	ldr	r2, [r3, #0]
 8010c56:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8010c5a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f002 fe29 	bl	80138b6 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8010c64:	e042      	b.n	8010cec <ProcessMacCommands+0x98c>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8010c66:	2300      	movs	r3, #0
 8010c68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8010c6c:	78fb      	ldrb	r3, [r7, #3]
 8010c6e:	1c5a      	adds	r2, r3, #1
 8010c70:	70fa      	strb	r2, [r7, #3]
 8010c72:	461a      	mov	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	4413      	add	r3, r2
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8010c7e:	78fb      	ldrb	r3, [r7, #3]
 8010c80:	1c5a      	adds	r2, r3, #1
 8010c82:	70fa      	strb	r2, [r7, #3]
 8010c84:	461a      	mov	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4413      	add	r3, r2
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	021b      	lsls	r3, r3, #8
 8010c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010c92:	4313      	orrs	r3, r2
 8010c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8010c98:	78fb      	ldrb	r3, [r7, #3]
 8010c9a:	1c5a      	adds	r2, r3, #1
 8010c9c:	70fa      	strb	r2, [r7, #3]
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	4413      	add	r3, r2
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	041b      	lsls	r3, r3, #16
 8010ca8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010cac:	4313      	orrs	r3, r2
 8010cae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8010cb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cb6:	2264      	movs	r2, #100	; 0x64
 8010cb8:	fb02 f303 	mul.w	r3, r2, r3
 8010cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8010cc0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010cc4:	f002 fe0a 	bl	80138dc <LoRaMacClassBBeaconFreqReq>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d003      	beq.n	8010cd6 <ProcessMacCommands+0x976>
                    {
                        macCmdPayload[0] = 1;
 8010cce:	2301      	movs	r3, #1
 8010cd0:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8010cd4:	e002      	b.n	8010cdc <ProcessMacCommands+0x97c>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8010cdc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	2013      	movs	r0, #19
 8010ce6:	f002 ff47 	bl	8013b78 <LoRaMacCommandsAddCmd>
                }
                break;
 8010cea:	bf00      	nop
    while( macIndex < commandsSize )
 8010cec:	78fa      	ldrb	r2, [r7, #3]
 8010cee:	78bb      	ldrb	r3, [r7, #2]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	f4ff ab57 	bcc.w	80103a4 <ProcessMacCommands+0x44>
 8010cf6:	e004      	b.n	8010d02 <ProcessMacCommands+0x9a2>
        return;
 8010cf8:	bf00      	nop
 8010cfa:	e002      	b.n	8010d02 <ProcessMacCommands+0x9a2>
            return;
 8010cfc:	bf00      	nop
 8010cfe:	e000      	b.n	8010d02 <ProcessMacCommands+0x9a2>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8010d00:	bf00      	nop
        }
    }
}
 8010d02:	378c      	adds	r7, #140	; 0x8c
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd90      	pop	{r4, r7, pc}
 8010d08:	12d53d80 	.word	0x12d53d80
 8010d0c:	2000082c 	.word	0x2000082c
 8010d10:	200018dc 	.word	0x200018dc

08010d14 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b08e      	sub	sp, #56	; 0x38
 8010d18:	af02      	add	r7, sp, #8
 8010d1a:	60f8      	str	r0, [r7, #12]
 8010d1c:	607a      	str	r2, [r7, #4]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	460b      	mov	r3, r1
 8010d22:	72fb      	strb	r3, [r7, #11]
 8010d24:	4613      	mov	r3, r2
 8010d26:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010d28:	2303      	movs	r3, #3
 8010d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010d2e:	4b66      	ldr	r3, [pc, #408]	; (8010ec8 <Send+0x1b4>)
 8010d30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010d34:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8010d38:	4b63      	ldr	r3, [pc, #396]	; (8010ec8 <Send+0x1b4>)
 8010d3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010d3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010d42:	4b61      	ldr	r3, [pc, #388]	; (8010ec8 <Send+0x1b4>)
 8010d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d46:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010d48:	4b5f      	ldr	r3, [pc, #380]	; (8010ec8 <Send+0x1b4>)
 8010d4a:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d101      	bne.n	8010d56 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8010d52:	2307      	movs	r3, #7
 8010d54:	e0b4      	b.n	8010ec0 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8010d56:	4b5c      	ldr	r3, [pc, #368]	; (8010ec8 <Send+0x1b4>)
 8010d58:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d102      	bne.n	8010d66 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010d60:	4b59      	ldr	r3, [pc, #356]	; (8010ec8 <Send+0x1b4>)
 8010d62:	2200      	movs	r2, #0
 8010d64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8010d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010d70:	f36f 0303 	bfc	r3, #0, #4
 8010d74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8010d78:	4b53      	ldr	r3, [pc, #332]	; (8010ec8 <Send+0x1b4>)
 8010d7a:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8010d7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010d82:	f362 13c7 	bfi	r3, r2, #7, #1
 8010d86:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010d8a:	4b4f      	ldr	r3, [pc, #316]	; (8010ec8 <Send+0x1b4>)
 8010d8c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d106      	bne.n	8010da2 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8010d94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010d98:	f043 0310 	orr.w	r3, r3, #16
 8010d9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8010da0:	e005      	b.n	8010dae <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8010da2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010da6:	f36f 1304 	bfc	r3, #4, #1
 8010daa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8010dae:	4b46      	ldr	r3, [pc, #280]	; (8010ec8 <Send+0x1b4>)
 8010db0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d005      	beq.n	8010dc4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8010db8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010dbc:	f043 0320 	orr.w	r3, r3, #32
 8010dc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8010dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010dcc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	bf14      	ite	ne
 8010dd6:	2301      	movne	r3, #1
 8010dd8:	2300      	moveq	r3, #0
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010dde:	4b3a      	ldr	r3, [pc, #232]	; (8010ec8 <Send+0x1b4>)
 8010de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de2:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8010de4:	4b39      	ldr	r3, [pc, #228]	; (8010ecc <Send+0x1b8>)
 8010de6:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 8010dea:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8010dec:	4b37      	ldr	r3, [pc, #220]	; (8010ecc <Send+0x1b8>)
 8010dee:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8010df2:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010df4:	4b34      	ldr	r3, [pc, #208]	; (8010ec8 <Send+0x1b4>)
 8010df6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010dfa:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010dfe:	4b32      	ldr	r3, [pc, #200]	; (8010ec8 <Send+0x1b4>)
 8010e00:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8010e04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010e08:	4b2f      	ldr	r3, [pc, #188]	; (8010ec8 <Send+0x1b4>)
 8010e0a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8010e0e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e12:	4b2d      	ldr	r3, [pc, #180]	; (8010ec8 <Send+0x1b4>)
 8010e14:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8010e1c:	4b2a      	ldr	r3, [pc, #168]	; (8010ec8 <Send+0x1b4>)
 8010e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8010e26:	f107 0014 	add.w	r0, r7, #20
 8010e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e2e:	9300      	str	r3, [sp, #0]
 8010e30:	4b27      	ldr	r3, [pc, #156]	; (8010ed0 <Send+0x1bc>)
 8010e32:	4a28      	ldr	r2, [pc, #160]	; (8010ed4 <Send+0x1c0>)
 8010e34:	4928      	ldr	r1, [pc, #160]	; (8010ed8 <Send+0x1c4>)
 8010e36:	f002 fbcb 	bl	80135d0 <LoRaMacAdrCalcNext>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010e42:	f362 1386 	bfi	r3, r2, #6, #1
 8010e46:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8010e4a:	7afa      	ldrb	r2, [r7, #11]
 8010e4c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010e50:	893b      	ldrh	r3, [r7, #8]
 8010e52:	9300      	str	r3, [sp, #0]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f000 fc42 	bl	80116e0 <PrepareFrame>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8010e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d003      	beq.n	8010e72 <Send+0x15e>
 8010e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e6e:	2b0a      	cmp	r3, #10
 8010e70:	d107      	bne.n	8010e82 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8010e72:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010e76:	4618      	mov	r0, r3
 8010e78:	f000 f96e 	bl	8011158 <ScheduleTx>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8010e82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00a      	beq.n	8010ea0 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8010e8a:	4a0f      	ldr	r2, [pc, #60]	; (8010ec8 <Send+0x1b4>)
 8010e8c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010e90:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8010e94:	4a0c      	ldr	r2, [pc, #48]	; (8010ec8 <Send+0x1b4>)
 8010e96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010e9a:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8010e9e:	e00d      	b.n	8010ebc <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8010ea0:	4b09      	ldr	r3, [pc, #36]	; (8010ec8 <Send+0x1b4>)
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8010ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eaa:	4a07      	ldr	r2, [pc, #28]	; (8010ec8 <Send+0x1b4>)
 8010eac:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010eae:	f002 fedb 	bl	8013c68 <LoRaMacCommandsRemoveNoneStickyCmds>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d001      	beq.n	8010ebc <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010eb8:	2313      	movs	r3, #19
 8010eba:	e001      	b.n	8010ec0 <Send+0x1ac>
        }
    }
    return status;
 8010ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3730      	adds	r7, #48	; 0x30
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	20000d4c 	.word	0x20000d4c
 8010ecc:	2000082c 	.word	0x2000082c
 8010ed0:	20000dac 	.word	0x20000dac
 8010ed4:	20000d84 	.word	0x20000d84
 8010ed8:	20000d85 	.word	0x20000d85

08010edc <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b084      	sub	sp, #16
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010eea:	2300      	movs	r3, #0
 8010eec:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8010eee:	2301      	movs	r3, #1
 8010ef0:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2bff      	cmp	r3, #255	; 0xff
 8010ef6:	d129      	bne.n	8010f4c <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010ef8:	2000      	movs	r0, #0
 8010efa:	f7ff f90f 	bl	801011c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8010efe:	4b1a      	ldr	r3, [pc, #104]	; (8010f68 <SendReJoinReq+0x8c>)
 8010f00:	2200      	movs	r2, #0
 8010f02:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010f06:	4b18      	ldr	r3, [pc, #96]	; (8010f68 <SendReJoinReq+0x8c>)
 8010f08:	4a18      	ldr	r2, [pc, #96]	; (8010f6c <SendReJoinReq+0x90>)
 8010f0a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010f0e:	4b16      	ldr	r3, [pc, #88]	; (8010f68 <SendReJoinReq+0x8c>)
 8010f10:	22ff      	movs	r2, #255	; 0xff
 8010f12:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8010f16:	7b3b      	ldrb	r3, [r7, #12]
 8010f18:	f36f 1347 	bfc	r3, #5, #3
 8010f1c:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010f1e:	7b3a      	ldrb	r2, [r7, #12]
 8010f20:	4b11      	ldr	r3, [pc, #68]	; (8010f68 <SendReJoinReq+0x8c>)
 8010f22:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010f26:	f7fc f875 	bl	800d014 <SecureElementGetJoinEui>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	2208      	movs	r2, #8
 8010f2e:	4619      	mov	r1, r3
 8010f30:	480f      	ldr	r0, [pc, #60]	; (8010f70 <SendReJoinReq+0x94>)
 8010f32:	f006 fe4a 	bl	8017bca <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8010f36:	f7fc f84b 	bl	800cfd0 <SecureElementGetDevEui>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2208      	movs	r2, #8
 8010f3e:	4619      	mov	r1, r3
 8010f40:	480c      	ldr	r0, [pc, #48]	; (8010f74 <SendReJoinReq+0x98>)
 8010f42:	f006 fe42 	bl	8017bca <memcpy1>

            allowDelayedTx = false;
 8010f46:	2300      	movs	r3, #0
 8010f48:	73fb      	strb	r3, [r7, #15]

            break;
 8010f4a:	e002      	b.n	8010f52 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010f4c:	2302      	movs	r3, #2
 8010f4e:	73bb      	strb	r3, [r7, #14]
            break;
 8010f50:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8010f52:	7bfb      	ldrb	r3, [r7, #15]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 f8ff 	bl	8011158 <ScheduleTx>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	73bb      	strb	r3, [r7, #14]
    return status;
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	2000082c 	.word	0x2000082c
 8010f6c:	2000082e 	.word	0x2000082e
 8010f70:	2000093a 	.word	0x2000093a
 8010f74:	20000942 	.word	0x20000942

08010f78 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010f7c:	f002 fc38 	bl	80137f0 <LoRaMacClassBIsBeaconExpected>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d001      	beq.n	8010f8a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010f86:	230e      	movs	r3, #14
 8010f88:	e013      	b.n	8010fb2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8010f8a:	4b0b      	ldr	r3, [pc, #44]	; (8010fb8 <CheckForClassBCollision+0x40>)
 8010f8c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d10d      	bne.n	8010fb0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010f94:	f002 fc33 	bl	80137fe <LoRaMacClassBIsPingExpected>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d001      	beq.n	8010fa2 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010f9e:	230f      	movs	r3, #15
 8010fa0:	e007      	b.n	8010fb2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010fa2:	f002 fc33 	bl	801380c <LoRaMacClassBIsMulticastExpected>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d001      	beq.n	8010fb0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010fac:	230f      	movs	r3, #15
 8010fae:	e000      	b.n	8010fb2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8010fb0:	2300      	movs	r3, #0
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	20000d4c 	.word	0x20000d4c

08010fbc <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8010fbc:	b590      	push	{r4, r7, lr}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010fc2:	4b2d      	ldr	r3, [pc, #180]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010fc4:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010fc8:	4b2b      	ldr	r3, [pc, #172]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010fca:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8010fce:	4b2a      	ldr	r3, [pc, #168]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010fd0:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
 8010fd4:	4b28      	ldr	r3, [pc, #160]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010fd6:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8010fda:	4b27      	ldr	r3, [pc, #156]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010fdc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8010fe0:	b25b      	sxtb	r3, r3
 8010fe2:	f004 fc9a 	bl	801591a <RegionApplyDrOffset>
 8010fe6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010fe8:	b259      	sxtb	r1, r3
 8010fea:	4b23      	ldr	r3, [pc, #140]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010fec:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010ff0:	4b21      	ldr	r3, [pc, #132]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8010ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ff4:	4821      	ldr	r0, [pc, #132]	; (801107c <ComputeRxWindowParameters+0xc0>)
 8010ff6:	9000      	str	r0, [sp, #0]
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f004 fbb0 	bl	801575e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8010ffe:	4b1e      	ldr	r3, [pc, #120]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011000:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 8011004:	4b1c      	ldr	r3, [pc, #112]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011006:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801100a:	b259      	sxtb	r1, r3
 801100c:	4b1a      	ldr	r3, [pc, #104]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 801100e:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011012:	4b19      	ldr	r3, [pc, #100]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011016:	4c1a      	ldr	r4, [pc, #104]	; (8011080 <ComputeRxWindowParameters+0xc4>)
 8011018:	9400      	str	r4, [sp, #0]
 801101a:	f004 fba0 	bl	801575e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801101e:	4b16      	ldr	r3, [pc, #88]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011022:	4a18      	ldr	r2, [pc, #96]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 8011024:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011028:	4413      	add	r3, r2
 801102a:	4a16      	ldr	r2, [pc, #88]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 801102c:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8011030:	4b11      	ldr	r3, [pc, #68]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011034:	4a13      	ldr	r2, [pc, #76]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 8011036:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 801103a:	4413      	add	r3, r2
 801103c:	4a11      	ldr	r2, [pc, #68]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 801103e:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8011042:	4b0d      	ldr	r3, [pc, #52]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011044:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011048:	2b00      	cmp	r3, #0
 801104a:	d111      	bne.n	8011070 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801104c:	4b0a      	ldr	r3, [pc, #40]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 801104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011050:	4a0c      	ldr	r2, [pc, #48]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 8011052:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8011056:	4413      	add	r3, r2
 8011058:	4a0a      	ldr	r2, [pc, #40]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 801105a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801105e:	4b06      	ldr	r3, [pc, #24]	; (8011078 <ComputeRxWindowParameters+0xbc>)
 8011060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011062:	4a08      	ldr	r2, [pc, #32]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 8011064:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 8011068:	4413      	add	r3, r2
 801106a:	4a06      	ldr	r2, [pc, #24]	; (8011084 <ComputeRxWindowParameters+0xc8>)
 801106c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8011070:	bf00      	nop
 8011072:	3704      	adds	r7, #4
 8011074:	46bd      	mov	sp, r7
 8011076:	bd90      	pop	{r4, r7, pc}
 8011078:	20000d4c 	.word	0x20000d4c
 801107c:	20000be4 	.word	0x20000be4
 8011080:	20000bfc 	.word	0x20000bfc
 8011084:	2000082c 	.word	0x2000082c

08011088 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801108e:	2300      	movs	r3, #0
 8011090:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8011092:	4b13      	ldr	r3, [pc, #76]	; (80110e0 <VerifyTxFrame+0x58>)
 8011094:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011098:	2b00      	cmp	r3, #0
 801109a:	d01b      	beq.n	80110d4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801109c:	1d3b      	adds	r3, r7, #4
 801109e:	4618      	mov	r0, r3
 80110a0:	f002 fe28 	bl	8013cf4 <LoRaMacCommandsGetSizeSerializedCmds>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80110aa:	2313      	movs	r3, #19
 80110ac:	e013      	b.n	80110d6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 80110ae:	4b0d      	ldr	r3, [pc, #52]	; (80110e4 <VerifyTxFrame+0x5c>)
 80110b0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80110b4:	4a0a      	ldr	r2, [pc, #40]	; (80110e0 <VerifyTxFrame+0x58>)
 80110b6:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	b2d2      	uxtb	r2, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f7ff f926 	bl	8010310 <ValidatePayloadLength>
 80110c4:	4603      	mov	r3, r0
 80110c6:	f083 0301 	eor.w	r3, r3, #1
 80110ca:	b2db      	uxtb	r3, r3
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d001      	beq.n	80110d4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80110d0:	2308      	movs	r3, #8
 80110d2:	e000      	b.n	80110d6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80110d4:	2300      	movs	r3, #0
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
 80110de:	bf00      	nop
 80110e0:	20000d4c 	.word	0x20000d4c
 80110e4:	2000082c 	.word	0x2000082c

080110e8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b082      	sub	sp, #8
 80110ec:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80110ee:	4b18      	ldr	r3, [pc, #96]	; (8011150 <SerializeTxFrame+0x68>)
 80110f0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d002      	beq.n	80110fe <SerializeTxFrame+0x16>
 80110f8:	2b04      	cmp	r3, #4
 80110fa:	d011      	beq.n	8011120 <SerializeTxFrame+0x38>
 80110fc:	e021      	b.n	8011142 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80110fe:	4815      	ldr	r0, [pc, #84]	; (8011154 <SerializeTxFrame+0x6c>)
 8011100:	f004 f92d 	bl	801535e <LoRaMacSerializerJoinRequest>
 8011104:	4603      	mov	r3, r0
 8011106:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8011108:	79fb      	ldrb	r3, [r7, #7]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801110e:	2311      	movs	r3, #17
 8011110:	e01a      	b.n	8011148 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8011112:	4b0f      	ldr	r3, [pc, #60]	; (8011150 <SerializeTxFrame+0x68>)
 8011114:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011118:	b29a      	uxth	r2, r3
 801111a:	4b0d      	ldr	r3, [pc, #52]	; (8011150 <SerializeTxFrame+0x68>)
 801111c:	801a      	strh	r2, [r3, #0]
            break;
 801111e:	e012      	b.n	8011146 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8011120:	480c      	ldr	r0, [pc, #48]	; (8011154 <SerializeTxFrame+0x6c>)
 8011122:	f004 f99e 	bl	8015462 <LoRaMacSerializerData>
 8011126:	4603      	mov	r3, r0
 8011128:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 801112a:	79fb      	ldrb	r3, [r7, #7]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011130:	2311      	movs	r3, #17
 8011132:	e009      	b.n	8011148 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011134:	4b06      	ldr	r3, [pc, #24]	; (8011150 <SerializeTxFrame+0x68>)
 8011136:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801113a:	b29a      	uxth	r2, r3
 801113c:	4b04      	ldr	r3, [pc, #16]	; (8011150 <SerializeTxFrame+0x68>)
 801113e:	801a      	strh	r2, [r3, #0]
            break;
 8011140:	e001      	b.n	8011146 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011142:	2303      	movs	r3, #3
 8011144:	e000      	b.n	8011148 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	2000082c 	.word	0x2000082c
 8011154:	20000934 	.word	0x20000934

08011158 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b090      	sub	sp, #64	; 0x40
 801115c:	af02      	add	r7, sp, #8
 801115e:	4603      	mov	r3, r0
 8011160:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011162:	2303      	movs	r3, #3
 8011164:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8011168:	f7ff ff06 	bl	8010f78 <CheckForClassBCollision>
 801116c:	4603      	mov	r3, r0
 801116e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011176:	2b00      	cmp	r3, #0
 8011178:	d002      	beq.n	8011180 <ScheduleTx+0x28>
    {
        return status;
 801117a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801117e:	e08f      	b.n	80112a0 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8011180:	f000 f8f4 	bl	801136c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8011184:	f7ff ffb0 	bl	80110e8 <SerializeTxFrame>
 8011188:	4603      	mov	r3, r0
 801118a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801118e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011192:	2b00      	cmp	r3, #0
 8011194:	d002      	beq.n	801119c <ScheduleTx+0x44>
    {
        return status;
 8011196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801119a:	e081      	b.n	80112a0 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801119c:	4b42      	ldr	r3, [pc, #264]	; (80112a8 <ScheduleTx+0x150>)
 801119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111a0:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80111a2:	4b41      	ldr	r3, [pc, #260]	; (80112a8 <ScheduleTx+0x150>)
 80111a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80111a8:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 80111aa:	4b3f      	ldr	r3, [pc, #252]	; (80112a8 <ScheduleTx+0x150>)
 80111ac:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 80111b0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80111b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80111b6:	4618      	mov	r0, r3
 80111b8:	f00a f8e8 	bl	801b38c <SysTimeGetMcuTime>
 80111bc:	4638      	mov	r0, r7
 80111be:	4b3a      	ldr	r3, [pc, #232]	; (80112a8 <ScheduleTx+0x150>)
 80111c0:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 80111c4:	9200      	str	r2, [sp, #0]
 80111c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80111ca:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80111ce:	ca06      	ldmia	r2, {r1, r2}
 80111d0:	f00a f83d 	bl	801b24e <SysTimeSub>
 80111d4:	f107 0320 	add.w	r3, r7, #32
 80111d8:	463a      	mov	r2, r7
 80111da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80111de:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80111e2:	4b31      	ldr	r3, [pc, #196]	; (80112a8 <ScheduleTx+0x150>)
 80111e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80111e8:	2300      	movs	r3, #0
 80111ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80111ee:	2301      	movs	r3, #1
 80111f0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80111f2:	4b2e      	ldr	r3, [pc, #184]	; (80112ac <ScheduleTx+0x154>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80111f8:	4b2b      	ldr	r3, [pc, #172]	; (80112a8 <ScheduleTx+0x150>)
 80111fa:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d104      	bne.n	801120c <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 8011202:	2301      	movs	r3, #1
 8011204:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 8011208:	2300      	movs	r3, #0
 801120a:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 801120c:	4b26      	ldr	r3, [pc, #152]	; (80112a8 <ScheduleTx+0x150>)
 801120e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011212:	f107 0114 	add.w	r1, r7, #20
 8011216:	4b26      	ldr	r3, [pc, #152]	; (80112b0 <ScheduleTx+0x158>)
 8011218:	9300      	str	r3, [sp, #0]
 801121a:	4b26      	ldr	r3, [pc, #152]	; (80112b4 <ScheduleTx+0x15c>)
 801121c:	4a26      	ldr	r2, [pc, #152]	; (80112b8 <ScheduleTx+0x160>)
 801121e:	f004 fb64 	bl	80158ea <RegionNextChannel>
 8011222:	4603      	mov	r3, r0
 8011224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8011228:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801122c:	2b00      	cmp	r3, #0
 801122e:	d022      	beq.n	8011276 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8011230:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011234:	2b0b      	cmp	r3, #11
 8011236:	d11b      	bne.n	8011270 <ScheduleTx+0x118>
 8011238:	7bfb      	ldrb	r3, [r7, #15]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d018      	beq.n	8011270 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 801123e:	4b1b      	ldr	r3, [pc, #108]	; (80112ac <ScheduleTx+0x154>)
 8011240:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8011244:	2b00      	cmp	r3, #0
 8011246:	d011      	beq.n	801126c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8011248:	4b18      	ldr	r3, [pc, #96]	; (80112ac <ScheduleTx+0x154>)
 801124a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801124e:	f043 0320 	orr.w	r3, r3, #32
 8011252:	4a16      	ldr	r2, [pc, #88]	; (80112ac <ScheduleTx+0x154>)
 8011254:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8011258:	4b14      	ldr	r3, [pc, #80]	; (80112ac <ScheduleTx+0x154>)
 801125a:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 801125e:	4619      	mov	r1, r3
 8011260:	4816      	ldr	r0, [pc, #88]	; (80112bc <ScheduleTx+0x164>)
 8011262:	f00a fd2f 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8011266:	4815      	ldr	r0, [pc, #84]	; (80112bc <ScheduleTx+0x164>)
 8011268:	f00a fc4e 	bl	801bb08 <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801126c:	2300      	movs	r3, #0
 801126e:	e017      	b.n	80112a0 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8011270:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011274:	e014      	b.n	80112a0 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8011276:	f7ff fea1 	bl	8010fbc <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801127a:	f7ff ff05 	bl	8011088 <VerifyTxFrame>
 801127e:	4603      	mov	r3, r0
 8011280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8011284:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <ScheduleTx+0x13a>
    {
        return status;
 801128c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011290:	e006      	b.n	80112a0 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8011292:	4b06      	ldr	r3, [pc, #24]	; (80112ac <ScheduleTx+0x154>)
 8011294:	f893 341f 	ldrb.w	r3, [r3, #1055]	; 0x41f
 8011298:	4618      	mov	r0, r3
 801129a:	f000 fb3d 	bl	8011918 <SendFrameOnChannel>
 801129e:	4603      	mov	r3, r0
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3738      	adds	r7, #56	; 0x38
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	20000d4c 	.word	0x20000d4c
 80112ac:	2000082c 	.word	0x2000082c
 80112b0:	20000d7c 	.word	0x20000d7c
 80112b4:	20000cc4 	.word	0x20000cc4
 80112b8:	20000c4b 	.word	0x20000c4b
 80112bc:	20000b94 	.word	0x20000b94

080112c0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	4603      	mov	r3, r0
 80112c8:	460a      	mov	r2, r1
 80112ca:	71fb      	strb	r3, [r7, #7]
 80112cc:	4613      	mov	r3, r2
 80112ce:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80112d0:	2312      	movs	r3, #18
 80112d2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80112d8:	4b22      	ldr	r3, [pc, #136]	; (8011364 <SecureFrame+0xa4>)
 80112da:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d002      	beq.n	80112e8 <SecureFrame+0x28>
 80112e2:	2b04      	cmp	r3, #4
 80112e4:	d011      	beq.n	801130a <SecureFrame+0x4a>
 80112e6:	e036      	b.n	8011356 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80112e8:	481f      	ldr	r0, [pc, #124]	; (8011368 <SecureFrame+0xa8>)
 80112ea:	f003 fc07 	bl	8014afc <LoRaMacCryptoPrepareJoinRequest>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d001      	beq.n	80112fc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80112f8:	2311      	movs	r3, #17
 80112fa:	e02f      	b.n	801135c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80112fc:	4b19      	ldr	r3, [pc, #100]	; (8011364 <SecureFrame+0xa4>)
 80112fe:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8011302:	b29a      	uxth	r2, r3
 8011304:	4b17      	ldr	r3, [pc, #92]	; (8011364 <SecureFrame+0xa4>)
 8011306:	801a      	strh	r2, [r3, #0]
            break;
 8011308:	e027      	b.n	801135a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801130a:	f107 0308 	add.w	r3, r7, #8
 801130e:	4618      	mov	r0, r3
 8011310:	f003 fb38 	bl	8014984 <LoRaMacCryptoGetFCntUp>
 8011314:	4603      	mov	r3, r0
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801131a:	2312      	movs	r3, #18
 801131c:	e01e      	b.n	801135c <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 801131e:	4b11      	ldr	r3, [pc, #68]	; (8011364 <SecureFrame+0xa4>)
 8011320:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	3b01      	subs	r3, #1
 801132c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801132e:	68b8      	ldr	r0, [r7, #8]
 8011330:	79ba      	ldrb	r2, [r7, #6]
 8011332:	79f9      	ldrb	r1, [r7, #7]
 8011334:	4b0c      	ldr	r3, [pc, #48]	; (8011368 <SecureFrame+0xa8>)
 8011336:	f003 fcf3 	bl	8014d20 <LoRaMacCryptoSecureMessage>
 801133a:	4603      	mov	r3, r0
 801133c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 801133e:	7bfb      	ldrb	r3, [r7, #15]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8011344:	2311      	movs	r3, #17
 8011346:	e009      	b.n	801135c <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8011348:	4b06      	ldr	r3, [pc, #24]	; (8011364 <SecureFrame+0xa4>)
 801134a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 801134e:	b29a      	uxth	r2, r3
 8011350:	4b04      	ldr	r3, [pc, #16]	; (8011364 <SecureFrame+0xa4>)
 8011352:	801a      	strh	r2, [r3, #0]
            break;
 8011354:	e001      	b.n	801135a <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011356:	2303      	movs	r3, #3
 8011358:	e000      	b.n	801135c <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 801135a:	2300      	movs	r3, #0
}
 801135c:	4618      	mov	r0, r3
 801135e:	3710      	adds	r7, #16
 8011360:	46bd      	mov	sp, r7
 8011362:	bd80      	pop	{r7, pc}
 8011364:	2000082c 	.word	0x2000082c
 8011368:	20000934 	.word	0x20000934

0801136c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801136c:	b480      	push	{r7}
 801136e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8011370:	4b09      	ldr	r3, [pc, #36]	; (8011398 <CalculateBackOff+0x2c>)
 8011372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011374:	2b00      	cmp	r3, #0
 8011376:	d10a      	bne.n	801138e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8011378:	4b07      	ldr	r3, [pc, #28]	; (8011398 <CalculateBackOff+0x2c>)
 801137a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 801137e:	3b01      	subs	r3, #1
 8011380:	4a06      	ldr	r2, [pc, #24]	; (801139c <CalculateBackOff+0x30>)
 8011382:	f8d2 2420 	ldr.w	r2, [r2, #1056]	; 0x420
 8011386:	fb02 f303 	mul.w	r3, r2, r3
 801138a:	4a03      	ldr	r2, [pc, #12]	; (8011398 <CalculateBackOff+0x2c>)
 801138c:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801138e:	bf00      	nop
 8011390:	46bd      	mov	sp, r7
 8011392:	bc80      	pop	{r7}
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	20000d4c 	.word	0x20000d4c
 801139c:	2000082c 	.word	0x2000082c

080113a0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	4603      	mov	r3, r0
 80113a8:	7139      	strb	r1, [r7, #4]
 80113aa:	71fb      	strb	r3, [r7, #7]
 80113ac:	4613      	mov	r3, r2
 80113ae:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80113b0:	79fb      	ldrb	r3, [r7, #7]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d002      	beq.n	80113bc <RemoveMacCommands+0x1c>
 80113b6:	79fb      	ldrb	r3, [r7, #7]
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	d10d      	bne.n	80113d8 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80113bc:	79bb      	ldrb	r3, [r7, #6]
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d108      	bne.n	80113d4 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80113c2:	793b      	ldrb	r3, [r7, #4]
 80113c4:	f003 0320 	and.w	r3, r3, #32
 80113c8:	b2db      	uxtb	r3, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d004      	beq.n	80113d8 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80113ce:	f002 fc6f 	bl	8013cb0 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80113d2:	e001      	b.n	80113d8 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80113d4:	f002 fc6c 	bl	8013cb0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80113d8:	bf00      	nop
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 80113e0:	b5b0      	push	{r4, r5, r7, lr}
 80113e2:	b090      	sub	sp, #64	; 0x40
 80113e4:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80113e6:	4b70      	ldr	r3, [pc, #448]	; (80115a8 <ResetMacParameters+0x1c8>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80113ee:	4b6e      	ldr	r3, [pc, #440]	; (80115a8 <ResetMacParameters+0x1c8>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80113f4:	4b6d      	ldr	r3, [pc, #436]	; (80115ac <ResetMacParameters+0x1cc>)
 80113f6:	2200      	movs	r2, #0
 80113f8:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 80113fc:	4b6b      	ldr	r3, [pc, #428]	; (80115ac <ResetMacParameters+0x1cc>)
 80113fe:	2200      	movs	r2, #0
 8011400:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 8011404:	4b69      	ldr	r3, [pc, #420]	; (80115ac <ResetMacParameters+0x1cc>)
 8011406:	2200      	movs	r2, #0
 8011408:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 801140c:	4b66      	ldr	r3, [pc, #408]	; (80115a8 <ResetMacParameters+0x1c8>)
 801140e:	2200      	movs	r2, #0
 8011410:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8011414:	4b64      	ldr	r3, [pc, #400]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011416:	2201      	movs	r2, #1
 8011418:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801141c:	4b62      	ldr	r3, [pc, #392]	; (80115a8 <ResetMacParameters+0x1c8>)
 801141e:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8011422:	4b61      	ldr	r3, [pc, #388]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011428:	4b5f      	ldr	r3, [pc, #380]	; (80115a8 <ResetMacParameters+0x1c8>)
 801142a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801142e:	4b5e      	ldr	r3, [pc, #376]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8011434:	4b5c      	ldr	r3, [pc, #368]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011436:	f893 20a5 	ldrb.w	r2, [r3, #165]	; 0xa5
 801143a:	4b5b      	ldr	r3, [pc, #364]	; (80115a8 <ResetMacParameters+0x1c8>)
 801143c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8011440:	4b59      	ldr	r3, [pc, #356]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011442:	4a59      	ldr	r2, [pc, #356]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011444:	3364      	adds	r3, #100	; 0x64
 8011446:	32a8      	adds	r2, #168	; 0xa8
 8011448:	e892 0003 	ldmia.w	r2, {r0, r1}
 801144c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011450:	4b55      	ldr	r3, [pc, #340]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011452:	4a55      	ldr	r2, [pc, #340]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011454:	336c      	adds	r3, #108	; 0x6c
 8011456:	32b0      	adds	r2, #176	; 0xb0
 8011458:	e892 0003 	ldmia.w	r2, {r0, r1}
 801145c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8011460:	4b51      	ldr	r3, [pc, #324]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011462:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
 8011466:	4b50      	ldr	r3, [pc, #320]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011468:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801146c:	4b4e      	ldr	r3, [pc, #312]	; (80115a8 <ResetMacParameters+0x1c8>)
 801146e:	f893 20b9 	ldrb.w	r2, [r3, #185]	; 0xb9
 8011472:	4b4d      	ldr	r3, [pc, #308]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011474:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8011478:	4b4b      	ldr	r3, [pc, #300]	; (80115a8 <ResetMacParameters+0x1c8>)
 801147a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801147e:	4a4a      	ldr	r2, [pc, #296]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011480:	6793      	str	r3, [r2, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011482:	4b49      	ldr	r3, [pc, #292]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011484:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011488:	4a47      	ldr	r2, [pc, #284]	; (80115a8 <ResetMacParameters+0x1c8>)
 801148a:	67d3      	str	r3, [r2, #124]	; 0x7c

    MacCtx.NodeAckRequested = false;
 801148c:	4b47      	ldr	r3, [pc, #284]	; (80115ac <ResetMacParameters+0x1cc>)
 801148e:	2200      	movs	r2, #0
 8011490:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8011494:	4b44      	ldr	r3, [pc, #272]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011496:	2200      	movs	r2, #0
 8011498:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801149c:	4b42      	ldr	r3, [pc, #264]	; (80115a8 <ResetMacParameters+0x1c8>)
 801149e:	2200      	movs	r2, #0
 80114a0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 80114a4:	4b40      	ldr	r3, [pc, #256]	; (80115a8 <ResetMacParameters+0x1c8>)
 80114a6:	2200      	movs	r2, #0
 80114a8:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80114ac:	2301      	movs	r3, #1
 80114ae:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80114b0:	4b3f      	ldr	r3, [pc, #252]	; (80115b0 <ResetMacParameters+0x1d0>)
 80114b2:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80114b4:	4b3f      	ldr	r3, [pc, #252]	; (80115b4 <ResetMacParameters+0x1d4>)
 80114b6:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 80114b8:	4b3f      	ldr	r3, [pc, #252]	; (80115b8 <ResetMacParameters+0x1d8>)
 80114ba:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80114bc:	4b3a      	ldr	r3, [pc, #232]	; (80115a8 <ResetMacParameters+0x1c8>)
 80114be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80114c2:	1d3a      	adds	r2, r7, #4
 80114c4:	4611      	mov	r1, r2
 80114c6:	4618      	mov	r0, r3
 80114c8:	f004 f8fb 	bl	80156c2 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 80114cc:	4b37      	ldr	r3, [pc, #220]	; (80115ac <ResetMacParameters+0x1cc>)
 80114ce:	2200      	movs	r2, #0
 80114d0:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80114d4:	4b35      	ldr	r3, [pc, #212]	; (80115ac <ResetMacParameters+0x1cc>)
 80114d6:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 80114da:	4b34      	ldr	r3, [pc, #208]	; (80115ac <ResetMacParameters+0x1cc>)
 80114dc:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 80114e0:	4b31      	ldr	r3, [pc, #196]	; (80115a8 <ResetMacParameters+0x1c8>)
 80114e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80114e4:	4a31      	ldr	r2, [pc, #196]	; (80115ac <ResetMacParameters+0x1cc>)
 80114e6:	f8c2 33d4 	str.w	r3, [r2, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80114ea:	4b2f      	ldr	r3, [pc, #188]	; (80115a8 <ResetMacParameters+0x1c8>)
 80114ec:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 80114f0:	4b2e      	ldr	r3, [pc, #184]	; (80115ac <ResetMacParameters+0x1cc>)
 80114f2:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 80114f6:	4b2c      	ldr	r3, [pc, #176]	; (80115a8 <ResetMacParameters+0x1c8>)
 80114f8:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 80114fc:	4b2b      	ldr	r3, [pc, #172]	; (80115ac <ResetMacParameters+0x1cc>)
 80114fe:	f883 23e1 	strb.w	r2, [r3, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 8011502:	4b2a      	ldr	r3, [pc, #168]	; (80115ac <ResetMacParameters+0x1cc>)
 8011504:	2200      	movs	r2, #0
 8011506:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801150a:	4b28      	ldr	r3, [pc, #160]	; (80115ac <ResetMacParameters+0x1cc>)
 801150c:	2201      	movs	r2, #1
 801150e:	f883 23e3 	strb.w	r2, [r3, #995]	; 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011512:	4b25      	ldr	r3, [pc, #148]	; (80115a8 <ResetMacParameters+0x1c8>)
 8011514:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8011518:	4b24      	ldr	r3, [pc, #144]	; (80115ac <ResetMacParameters+0x1cc>)
 801151a:	f883 23e4 	strb.w	r2, [r3, #996]	; 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 801151e:	4a23      	ldr	r2, [pc, #140]	; (80115ac <ResetMacParameters+0x1cc>)
 8011520:	4b22      	ldr	r3, [pc, #136]	; (80115ac <ResetMacParameters+0x1cc>)
 8011522:	f502 747a 	add.w	r4, r2, #1000	; 0x3e8
 8011526:	f503 7574 	add.w	r5, r3, #976	; 0x3d0
 801152a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801152c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801152e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8011532:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011536:	4b1d      	ldr	r3, [pc, #116]	; (80115ac <ResetMacParameters+0x1cc>)
 8011538:	2201      	movs	r2, #1
 801153a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801153e:	4b1b      	ldr	r3, [pc, #108]	; (80115ac <ResetMacParameters+0x1cc>)
 8011540:	2202      	movs	r2, #2
 8011542:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011546:	2300      	movs	r3, #0
 8011548:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 801154a:	2300      	movs	r3, #0
 801154c:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 801154e:	4b17      	ldr	r3, [pc, #92]	; (80115ac <ResetMacParameters+0x1cc>)
 8011550:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011554:	2b00      	cmp	r3, #0
 8011556:	d009      	beq.n	801156c <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8011558:	4b14      	ldr	r3, [pc, #80]	; (80115ac <ResetMacParameters+0x1cc>)
 801155a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8011562:	4b12      	ldr	r3, [pc, #72]	; (80115ac <ResetMacParameters+0x1cc>)
 8011564:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801156c:	4b13      	ldr	r3, [pc, #76]	; (80115bc <ResetMacParameters+0x1dc>)
 801156e:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011570:	4b13      	ldr	r3, [pc, #76]	; (80115c0 <ResetMacParameters+0x1e0>)
 8011572:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011574:	4b13      	ldr	r3, [pc, #76]	; (80115c4 <ResetMacParameters+0x1e4>)
 8011576:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011578:	4b13      	ldr	r3, [pc, #76]	; (80115c8 <ResetMacParameters+0x1e8>)
 801157a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801157c:	4b13      	ldr	r3, [pc, #76]	; (80115cc <ResetMacParameters+0x1ec>)
 801157e:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8011580:	4b13      	ldr	r3, [pc, #76]	; (80115d0 <ResetMacParameters+0x1f0>)
 8011582:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8011584:	4b13      	ldr	r3, [pc, #76]	; (80115d4 <ResetMacParameters+0x1f4>)
 8011586:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8011588:	4b13      	ldr	r3, [pc, #76]	; (80115d8 <ResetMacParameters+0x1f8>)
 801158a:	633b      	str	r3, [r7, #48]	; 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 801158c:	4b13      	ldr	r3, [pc, #76]	; (80115dc <ResetMacParameters+0x1fc>)
 801158e:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8011590:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8011594:	f107 0314 	add.w	r3, r7, #20
 8011598:	4a11      	ldr	r2, [pc, #68]	; (80115e0 <ResetMacParameters+0x200>)
 801159a:	4618      	mov	r0, r3
 801159c:	f002 f8d1 	bl	8013742 <LoRaMacClassBInit>
}
 80115a0:	bf00      	nop
 80115a2:	3740      	adds	r7, #64	; 0x40
 80115a4:	46bd      	mov	sp, r7
 80115a6:	bdb0      	pop	{r4, r5, r7, pc}
 80115a8:	20000d4c 	.word	0x20000d4c
 80115ac:	2000082c 	.word	0x2000082c
 80115b0:	20000f30 	.word	0x20000f30
 80115b4:	20000f34 	.word	0x20000f34
 80115b8:	20001844 	.word	0x20001844
 80115bc:	20000c98 	.word	0x20000c98
 80115c0:	20000c50 	.word	0x20000c50
 80115c4:	20000c84 	.word	0x20000c84
 80115c8:	20000cc1 	.word	0x20000cc1
 80115cc:	20000e20 	.word	0x20000e20
 80115d0:	20000d8c 	.word	0x20000d8c
 80115d4:	20000d90 	.word	0x20000d90
 80115d8:	20000e24 	.word	0x20000e24
 80115dc:	20000e68 	.word	0x20000e68
 80115e0:	200012b0 	.word	0x200012b0

080115e4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
 80115ec:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f00a faf8 	bl	801bbe4 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80115f4:	4b11      	ldr	r3, [pc, #68]	; (801163c <RxWindowSetup+0x58>)
 80115f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115f8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80115fa:	4b11      	ldr	r3, [pc, #68]	; (8011640 <RxWindowSetup+0x5c>)
 80115fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011600:	4a10      	ldr	r2, [pc, #64]	; (8011644 <RxWindowSetup+0x60>)
 8011602:	6839      	ldr	r1, [r7, #0]
 8011604:	4618      	mov	r0, r3
 8011606:	f004 f8c4 	bl	8015792 <RegionRxConfig>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d010      	beq.n	8011632 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8011610:	4b0d      	ldr	r3, [pc, #52]	; (8011648 <RxWindowSetup+0x64>)
 8011612:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 8011616:	4b0c      	ldr	r3, [pc, #48]	; (8011648 <RxWindowSetup+0x64>)
 8011618:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 801161c:	4b07      	ldr	r3, [pc, #28]	; (801163c <RxWindowSetup+0x58>)
 801161e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011620:	4a07      	ldr	r2, [pc, #28]	; (8011640 <RxWindowSetup+0x5c>)
 8011622:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8011624:	4610      	mov	r0, r2
 8011626:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	7cda      	ldrb	r2, [r3, #19]
 801162c:	4b06      	ldr	r3, [pc, #24]	; (8011648 <RxWindowSetup+0x64>)
 801162e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 8011632:	bf00      	nop
 8011634:	3708      	adds	r7, #8
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	0801d538 	.word	0x0801d538
 8011640:	20000d4c 	.word	0x20000d4c
 8011644:	20000c54 	.word	0x20000c54
 8011648:	2000082c 	.word	0x2000082c

0801164c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 801164c:	b590      	push	{r4, r7, lr}
 801164e:	b083      	sub	sp, #12
 8011650:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8011652:	4b1e      	ldr	r3, [pc, #120]	; (80116cc <OpenContinuousRxCWindow+0x80>)
 8011654:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8011658:	4b1c      	ldr	r3, [pc, #112]	; (80116cc <OpenContinuousRxCWindow+0x80>)
 801165a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801165e:	b259      	sxtb	r1, r3
 8011660:	4b1a      	ldr	r3, [pc, #104]	; (80116cc <OpenContinuousRxCWindow+0x80>)
 8011662:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8011666:	4b19      	ldr	r3, [pc, #100]	; (80116cc <OpenContinuousRxCWindow+0x80>)
 8011668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801166a:	4c19      	ldr	r4, [pc, #100]	; (80116d0 <OpenContinuousRxCWindow+0x84>)
 801166c:	9400      	str	r4, [sp, #0]
 801166e:	f004 f876 	bl	801575e <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011672:	4b18      	ldr	r3, [pc, #96]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 8011674:	2202      	movs	r2, #2
 8011676:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801167a:	4b14      	ldr	r3, [pc, #80]	; (80116cc <OpenContinuousRxCWindow+0x80>)
 801167c:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 8011680:	4b14      	ldr	r3, [pc, #80]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 8011682:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011686:	4b13      	ldr	r3, [pc, #76]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 8011688:	2201      	movs	r2, #1
 801168a:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801168e:	4b0f      	ldr	r3, [pc, #60]	; (80116cc <OpenContinuousRxCWindow+0x80>)
 8011690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011694:	4a10      	ldr	r2, [pc, #64]	; (80116d8 <OpenContinuousRxCWindow+0x8c>)
 8011696:	490e      	ldr	r1, [pc, #56]	; (80116d0 <OpenContinuousRxCWindow+0x84>)
 8011698:	4618      	mov	r0, r3
 801169a:	f004 f87a 	bl	8015792 <RegionRxConfig>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d00f      	beq.n	80116c4 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80116a4:	4b0b      	ldr	r3, [pc, #44]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 80116a6:	f893 2428 	ldrb.w	r2, [r3, #1064]	; 0x428
 80116aa:	4b0a      	ldr	r3, [pc, #40]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 80116ac:	f883 246e 	strb.w	r2, [r3, #1134]	; 0x46e
        Radio.Rx( 0 ); // Continuous mode
 80116b0:	4b0a      	ldr	r3, [pc, #40]	; (80116dc <OpenContinuousRxCWindow+0x90>)
 80116b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116b4:	2000      	movs	r0, #0
 80116b6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80116b8:	4b06      	ldr	r3, [pc, #24]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 80116ba:	f893 23fb 	ldrb.w	r2, [r3, #1019]	; 0x3fb
 80116be:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <OpenContinuousRxCWindow+0x88>)
 80116c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
    }
}
 80116c4:	bf00      	nop
 80116c6:	3704      	adds	r7, #4
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd90      	pop	{r4, r7, pc}
 80116cc:	20000d4c 	.word	0x20000d4c
 80116d0:	20000c14 	.word	0x20000c14
 80116d4:	2000082c 	.word	0x2000082c
 80116d8:	20000c54 	.word	0x20000c54
 80116dc:	0801d538 	.word	0x0801d538

080116e0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	603b      	str	r3, [r7, #0]
 80116ec:	4613      	mov	r3, r2
 80116ee:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 80116f0:	4b82      	ldr	r3, [pc, #520]	; (80118fc <PrepareFrame+0x21c>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 80116f6:	4b81      	ldr	r3, [pc, #516]	; (80118fc <PrepareFrame+0x21c>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
    uint32_t fCntUp = 0;
 80116fe:	2300      	movs	r3, #0
 8011700:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8011702:	2300      	movs	r3, #0
 8011704:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8011706:	2300      	movs	r3, #0
 8011708:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d101      	bne.n	8011714 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8011714:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011716:	461a      	mov	r2, r3
 8011718:	6839      	ldr	r1, [r7, #0]
 801171a:	4879      	ldr	r0, [pc, #484]	; (8011900 <PrepareFrame+0x220>)
 801171c:	f006 fa55 	bl	8017bca <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8011720:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011722:	b2da      	uxtb	r2, r3
 8011724:	4b75      	ldr	r3, [pc, #468]	; (80118fc <PrepareFrame+0x21c>)
 8011726:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	781a      	ldrb	r2, [r3, #0]
 801172e:	4b73      	ldr	r3, [pc, #460]	; (80118fc <PrepareFrame+0x21c>)
 8011730:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801173a:	b2db      	uxtb	r3, r3
 801173c:	2b07      	cmp	r3, #7
 801173e:	f000 80b9 	beq.w	80118b4 <PrepareFrame+0x1d4>
 8011742:	2b07      	cmp	r3, #7
 8011744:	f300 80d0 	bgt.w	80118e8 <PrepareFrame+0x208>
 8011748:	2b02      	cmp	r3, #2
 801174a:	d006      	beq.n	801175a <PrepareFrame+0x7a>
 801174c:	2b04      	cmp	r3, #4
 801174e:	f040 80cb 	bne.w	80118e8 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8011752:	4b6a      	ldr	r3, [pc, #424]	; (80118fc <PrepareFrame+0x21c>)
 8011754:	2201      	movs	r2, #1
 8011756:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801175a:	4b68      	ldr	r3, [pc, #416]	; (80118fc <PrepareFrame+0x21c>)
 801175c:	2204      	movs	r2, #4
 801175e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8011762:	4b66      	ldr	r3, [pc, #408]	; (80118fc <PrepareFrame+0x21c>)
 8011764:	4a67      	ldr	r2, [pc, #412]	; (8011904 <PrepareFrame+0x224>)
 8011766:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801176a:	4b64      	ldr	r3, [pc, #400]	; (80118fc <PrepareFrame+0x21c>)
 801176c:	22ff      	movs	r2, #255	; 0xff
 801176e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	781a      	ldrb	r2, [r3, #0]
 8011776:	4b61      	ldr	r3, [pc, #388]	; (80118fc <PrepareFrame+0x21c>)
 8011778:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801177c:	4a5f      	ldr	r2, [pc, #380]	; (80118fc <PrepareFrame+0x21c>)
 801177e:	79fb      	ldrb	r3, [r7, #7]
 8011780:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8011784:	4b60      	ldr	r3, [pc, #384]	; (8011908 <PrepareFrame+0x228>)
 8011786:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801178a:	4a5c      	ldr	r2, [pc, #368]	; (80118fc <PrepareFrame+0x21c>)
 801178c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	781a      	ldrb	r2, [r3, #0]
 8011794:	4b59      	ldr	r3, [pc, #356]	; (80118fc <PrepareFrame+0x21c>)
 8011796:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801179a:	4b58      	ldr	r3, [pc, #352]	; (80118fc <PrepareFrame+0x21c>)
 801179c:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80117a0:	4b56      	ldr	r3, [pc, #344]	; (80118fc <PrepareFrame+0x21c>)
 80117a2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80117a6:	4b55      	ldr	r3, [pc, #340]	; (80118fc <PrepareFrame+0x21c>)
 80117a8:	4a55      	ldr	r2, [pc, #340]	; (8011900 <PrepareFrame+0x220>)
 80117aa:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80117ae:	f107 0318 	add.w	r3, r7, #24
 80117b2:	4618      	mov	r0, r3
 80117b4:	f003 f8e6 	bl	8014984 <LoRaMacCryptoGetFCntUp>
 80117b8:	4603      	mov	r3, r0
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d001      	beq.n	80117c2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80117be:	2312      	movs	r3, #18
 80117c0:	e098      	b.n	80118f4 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	4b4d      	ldr	r3, [pc, #308]	; (80118fc <PrepareFrame+0x21c>)
 80117c8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 80117cc:	4b4b      	ldr	r3, [pc, #300]	; (80118fc <PrepareFrame+0x21c>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80117d4:	4b49      	ldr	r3, [pc, #292]	; (80118fc <PrepareFrame+0x21c>)
 80117d6:	2200      	movs	r2, #0
 80117d8:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80117dc:	69bb      	ldr	r3, [r7, #24]
 80117de:	4a47      	ldr	r2, [pc, #284]	; (80118fc <PrepareFrame+0x21c>)
 80117e0:	f8c2 3450 	str.w	r3, [r2, #1104]	; 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80117e4:	f107 0314 	add.w	r3, r7, #20
 80117e8:	4618      	mov	r0, r3
 80117ea:	f002 fa83 	bl	8013cf4 <LoRaMacCommandsGetSizeSerializedCmds>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80117f4:	2313      	movs	r3, #19
 80117f6:	e07d      	b.n	80118f4 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d076      	beq.n	80118ec <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 80117fe:	4b42      	ldr	r3, [pc, #264]	; (8011908 <PrepareFrame+0x228>)
 8011800:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011804:	4618      	mov	r0, r3
 8011806:	f7fe fd5b 	bl	80102c0 <GetMaxAppPayloadWithoutFOptsLength>
 801180a:	4603      	mov	r3, r0
 801180c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801180e:	4b3b      	ldr	r3, [pc, #236]	; (80118fc <PrepareFrame+0x21c>)
 8011810:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8011814:	2b00      	cmp	r3, #0
 8011816:	d01d      	beq.n	8011854 <PrepareFrame+0x174>
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	2b0f      	cmp	r3, #15
 801181c:	d81a      	bhi.n	8011854 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801181e:	f107 0314 	add.w	r3, r7, #20
 8011822:	4a3a      	ldr	r2, [pc, #232]	; (801190c <PrepareFrame+0x22c>)
 8011824:	4619      	mov	r1, r3
 8011826:	200f      	movs	r0, #15
 8011828:	f002 fa7a 	bl	8013d20 <LoRaMacCommandsSerializeCmds>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d001      	beq.n	8011836 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011832:	2313      	movs	r3, #19
 8011834:	e05e      	b.n	80118f4 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f003 030f 	and.w	r3, r3, #15
 801183c:	b2d9      	uxtb	r1, r3
 801183e:	68ba      	ldr	r2, [r7, #8]
 8011840:	7813      	ldrb	r3, [r2, #0]
 8011842:	f361 0303 	bfi	r3, r1, #0, #4
 8011846:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	781a      	ldrb	r2, [r3, #0]
 801184c:	4b2b      	ldr	r3, [pc, #172]	; (80118fc <PrepareFrame+0x21c>)
 801184e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8011852:	e04b      	b.n	80118ec <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8011854:	4b29      	ldr	r3, [pc, #164]	; (80118fc <PrepareFrame+0x21c>)
 8011856:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801185a:	2b00      	cmp	r3, #0
 801185c:	d010      	beq.n	8011880 <PrepareFrame+0x1a0>
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	2b0f      	cmp	r3, #15
 8011862:	d90d      	bls.n	8011880 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011864:	7ffb      	ldrb	r3, [r7, #31]
 8011866:	f107 0114 	add.w	r1, r7, #20
 801186a:	4a29      	ldr	r2, [pc, #164]	; (8011910 <PrepareFrame+0x230>)
 801186c:	4618      	mov	r0, r3
 801186e:	f002 fa57 	bl	8013d20 <LoRaMacCommandsSerializeCmds>
 8011872:	4603      	mov	r3, r0
 8011874:	2b00      	cmp	r3, #0
 8011876:	d001      	beq.n	801187c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011878:	2313      	movs	r3, #19
 801187a:	e03b      	b.n	80118f4 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801187c:	230a      	movs	r3, #10
 801187e:	e039      	b.n	80118f4 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8011880:	7ffb      	ldrb	r3, [r7, #31]
 8011882:	f107 0114 	add.w	r1, r7, #20
 8011886:	4a22      	ldr	r2, [pc, #136]	; (8011910 <PrepareFrame+0x230>)
 8011888:	4618      	mov	r0, r3
 801188a:	f002 fa49 	bl	8013d20 <LoRaMacCommandsSerializeCmds>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011894:	2313      	movs	r3, #19
 8011896:	e02d      	b.n	80118f4 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8011898:	4b18      	ldr	r3, [pc, #96]	; (80118fc <PrepareFrame+0x21c>)
 801189a:	2200      	movs	r2, #0
 801189c:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80118a0:	4b16      	ldr	r3, [pc, #88]	; (80118fc <PrepareFrame+0x21c>)
 80118a2:	4a1b      	ldr	r2, [pc, #108]	; (8011910 <PrepareFrame+0x230>)
 80118a4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	b2da      	uxtb	r2, r3
 80118ac:	4b13      	ldr	r3, [pc, #76]	; (80118fc <PrepareFrame+0x21c>)
 80118ae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80118b2:	e01b      	b.n	80118ec <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d01a      	beq.n	80118f0 <PrepareFrame+0x210>
 80118ba:	4b10      	ldr	r3, [pc, #64]	; (80118fc <PrepareFrame+0x21c>)
 80118bc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d015      	beq.n	80118f0 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80118c4:	4813      	ldr	r0, [pc, #76]	; (8011914 <PrepareFrame+0x234>)
 80118c6:	4b0d      	ldr	r3, [pc, #52]	; (80118fc <PrepareFrame+0x21c>)
 80118c8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	461a      	mov	r2, r3
 80118d0:	6839      	ldr	r1, [r7, #0]
 80118d2:	f006 f97a 	bl	8017bca <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80118d6:	4b09      	ldr	r3, [pc, #36]	; (80118fc <PrepareFrame+0x21c>)
 80118d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80118dc:	b29b      	uxth	r3, r3
 80118de:	3301      	adds	r3, #1
 80118e0:	b29a      	uxth	r2, r3
 80118e2:	4b06      	ldr	r3, [pc, #24]	; (80118fc <PrepareFrame+0x21c>)
 80118e4:	801a      	strh	r2, [r3, #0]
            }
            break;
 80118e6:	e003      	b.n	80118f0 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80118e8:	2302      	movs	r3, #2
 80118ea:	e003      	b.n	80118f4 <PrepareFrame+0x214>
            break;
 80118ec:	bf00      	nop
 80118ee:	e000      	b.n	80118f2 <PrepareFrame+0x212>
            break;
 80118f0:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 80118f2:	2300      	movs	r3, #0
}
 80118f4:	4618      	mov	r0, r3
 80118f6:	3720      	adds	r7, #32
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}
 80118fc:	2000082c 	.word	0x2000082c
 8011900:	20000964 	.word	0x20000964
 8011904:	2000082e 	.word	0x2000082e
 8011908:	20000d4c 	.word	0x20000d4c
 801190c:	20000944 	.word	0x20000944
 8011910:	20000ccc 	.word	0x20000ccc
 8011914:	2000082f 	.word	0x2000082f

08011918 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b08a      	sub	sp, #40	; 0x28
 801191c:	af00      	add	r7, sp, #0
 801191e:	4603      	mov	r3, r0
 8011920:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011922:	2303      	movs	r3, #3
 8011924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8011928:	2300      	movs	r3, #0
 801192a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 801192c:	79fb      	ldrb	r3, [r7, #7]
 801192e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011930:	4b4a      	ldr	r3, [pc, #296]	; (8011a5c <SendFrameOnChannel+0x144>)
 8011932:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8011936:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011938:	4b48      	ldr	r3, [pc, #288]	; (8011a5c <SendFrameOnChannel+0x144>)
 801193a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801193e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8011940:	4b46      	ldr	r3, [pc, #280]	; (8011a5c <SendFrameOnChannel+0x144>)
 8011942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011944:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8011946:	4b45      	ldr	r3, [pc, #276]	; (8011a5c <SendFrameOnChannel+0x144>)
 8011948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801194a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 801194c:	4b44      	ldr	r3, [pc, #272]	; (8011a60 <SendFrameOnChannel+0x148>)
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8011952:	4b42      	ldr	r3, [pc, #264]	; (8011a5c <SendFrameOnChannel+0x144>)
 8011954:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8011958:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 801195a:	4b40      	ldr	r3, [pc, #256]	; (8011a5c <SendFrameOnChannel+0x144>)
 801195c:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 8011960:	f107 020f 	add.w	r2, r7, #15
 8011964:	f107 0110 	add.w	r1, r7, #16
 8011968:	4b3e      	ldr	r3, [pc, #248]	; (8011a64 <SendFrameOnChannel+0x14c>)
 801196a:	f003 ff27 	bl	80157bc <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801196e:	4b3c      	ldr	r3, [pc, #240]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011970:	2201      	movs	r2, #1
 8011972:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8011976:	4b39      	ldr	r3, [pc, #228]	; (8011a5c <SendFrameOnChannel+0x144>)
 8011978:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801197c:	b2da      	uxtb	r2, r3
 801197e:	4b38      	ldr	r3, [pc, #224]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011980:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8011984:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8011988:	4b35      	ldr	r3, [pc, #212]	; (8011a60 <SendFrameOnChannel+0x148>)
 801198a:	f883 2447 	strb.w	r2, [r3, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 801198e:	79fb      	ldrb	r3, [r7, #7]
 8011990:	4a33      	ldr	r2, [pc, #204]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011992:	f8c2 3454 	str.w	r3, [r2, #1108]	; 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8011996:	4b32      	ldr	r3, [pc, #200]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011998:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 801199c:	4a30      	ldr	r2, [pc, #192]	; (8011a60 <SendFrameOnChannel+0x148>)
 801199e:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 80119a2:	4b2f      	ldr	r3, [pc, #188]	; (8011a60 <SendFrameOnChannel+0x148>)
 80119a4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80119a8:	4a2d      	ldr	r2, [pc, #180]	; (8011a60 <SendFrameOnChannel+0x148>)
 80119aa:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 80119ae:	f001 ff34 	bl	801381a <LoRaMacClassBIsBeaconModeActive>
 80119b2:	4603      	mov	r3, r0
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d00b      	beq.n	80119d0 <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 80119b8:	4b29      	ldr	r3, [pc, #164]	; (8011a60 <SendFrameOnChannel+0x148>)
 80119ba:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80119be:	4618      	mov	r0, r3
 80119c0:	f001 ff96 	bl	80138f0 <LoRaMacClassBIsUplinkCollision>
 80119c4:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 80119cc:	2310      	movs	r3, #16
 80119ce:	e040      	b.n	8011a52 <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80119d0:	4b22      	ldr	r3, [pc, #136]	; (8011a5c <SendFrameOnChannel+0x144>)
 80119d2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80119d6:	2b01      	cmp	r3, #1
 80119d8:	d101      	bne.n	80119de <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 80119da:	f001 ff93 	bl	8013904 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 80119de:	f001 ff2d 	bl	801383c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 80119e2:	4b1e      	ldr	r3, [pc, #120]	; (8011a5c <SendFrameOnChannel+0x144>)
 80119e4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80119e8:	b2db      	uxtb	r3, r3
 80119ea:	4a1d      	ldr	r2, [pc, #116]	; (8011a60 <SendFrameOnChannel+0x148>)
 80119ec:	f892 241f 	ldrb.w	r2, [r2, #1055]	; 0x41f
 80119f0:	4611      	mov	r1, r2
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7ff fc64 	bl	80112c0 <SecureFrame>
 80119f8:	4603      	mov	r3, r0
 80119fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 80119fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d002      	beq.n	8011a0c <SendFrameOnChannel+0xf4>
    {
        return status;
 8011a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a0a:	e022      	b.n	8011a52 <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011a0c:	4b14      	ldr	r3, [pc, #80]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a12:	f043 0302 	orr.w	r3, r3, #2
 8011a16:	4a12      	ldr	r2, [pc, #72]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a18:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 8011a1c:	4b10      	ldr	r3, [pc, #64]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a1e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011a22:	3301      	adds	r3, #1
 8011a24:	b2da      	uxtb	r2, r3
 8011a26:	4b0e      	ldr	r3, [pc, #56]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a28:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 8011a2c:	4b0c      	ldr	r3, [pc, #48]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a2e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8011a32:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a34:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 8011a38:	4b09      	ldr	r3, [pc, #36]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8011a40:	4b09      	ldr	r3, [pc, #36]	; (8011a68 <SendFrameOnChannel+0x150>)
 8011a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a44:	4a06      	ldr	r2, [pc, #24]	; (8011a60 <SendFrameOnChannel+0x148>)
 8011a46:	8812      	ldrh	r2, [r2, #0]
 8011a48:	b2d2      	uxtb	r2, r2
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	4807      	ldr	r0, [pc, #28]	; (8011a6c <SendFrameOnChannel+0x154>)
 8011a4e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8011a50:	2300      	movs	r3, #0
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3728      	adds	r7, #40	; 0x28
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	20000d4c 	.word	0x20000d4c
 8011a60:	2000082c 	.word	0x2000082c
 8011a64:	20000c4c 	.word	0x20000c4c
 8011a68:	0801d538 	.word	0x0801d538
 8011a6c:	2000082e 	.word	0x2000082e

08011a70 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b082      	sub	sp, #8
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	4603      	mov	r3, r0
 8011a78:	6039      	str	r1, [r7, #0]
 8011a7a:	80fb      	strh	r3, [r7, #6]
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8011a80:	4b09      	ldr	r3, [pc, #36]	; (8011aa8 <SetTxContinuousWave+0x38>)
 8011a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a84:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011a88:	88fa      	ldrh	r2, [r7, #6]
 8011a8a:	6838      	ldr	r0, [r7, #0]
 8011a8c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8011a8e:	4b07      	ldr	r3, [pc, #28]	; (8011aac <SetTxContinuousWave+0x3c>)
 8011a90:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a94:	f043 0302 	orr.w	r3, r3, #2
 8011a98:	4a04      	ldr	r2, [pc, #16]	; (8011aac <SetTxContinuousWave+0x3c>)
 8011a9a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3708      	adds	r7, #8
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}
 8011aa8:	0801d538 	.word	0x0801d538
 8011aac:	2000082c 	.word	0x2000082c

08011ab0 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011aba:	4b3e      	ldr	r3, [pc, #248]	; (8011bb4 <RestoreNvmData+0x104>)
 8011abc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ac0:	2b01      	cmp	r3, #1
 8011ac2:	d001      	beq.n	8011ac8 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	e071      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8011ac8:	2124      	movs	r1, #36	; 0x24
 8011aca:	483b      	ldr	r0, [pc, #236]	; (8011bb8 <RestoreNvmData+0x108>)
 8011acc:	f006 f8d2 	bl	8017c74 <Crc32>
 8011ad0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 8011ad2:	4b39      	ldr	r3, [pc, #228]	; (8011bb8 <RestoreNvmData+0x108>)
 8011ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad6:	687a      	ldr	r2, [r7, #4]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d001      	beq.n	8011ae0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011adc:	2317      	movs	r3, #23
 8011ade:	e065      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 8011ae0:	2114      	movs	r1, #20
 8011ae2:	4836      	ldr	r0, [pc, #216]	; (8011bbc <RestoreNvmData+0x10c>)
 8011ae4:	f006 f8c6 	bl	8017c74 <Crc32>
 8011ae8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8011aea:	4b33      	ldr	r3, [pc, #204]	; (8011bb8 <RestoreNvmData+0x108>)
 8011aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aee:	687a      	ldr	r2, [r7, #4]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d001      	beq.n	8011af8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011af4:	2317      	movs	r3, #23
 8011af6:	e059      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8011af8:	21e0      	movs	r1, #224	; 0xe0
 8011afa:	4831      	ldr	r0, [pc, #196]	; (8011bc0 <RestoreNvmData+0x110>)
 8011afc:	f006 f8ba 	bl	8017c74 <Crc32>
 8011b00:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 8011b02:	4b2d      	ldr	r3, [pc, #180]	; (8011bb8 <RestoreNvmData+0x108>)
 8011b04:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d001      	beq.n	8011b12 <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011b0e:	2317      	movs	r3, #23
 8011b10:	e04c      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 8011b12:	21bc      	movs	r1, #188	; 0xbc
 8011b14:	482b      	ldr	r0, [pc, #172]	; (8011bc4 <RestoreNvmData+0x114>)
 8011b16:	f006 f8ad 	bl	8017c74 <Crc32>
 8011b1a:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 8011b1c:	4b26      	ldr	r3, [pc, #152]	; (8011bb8 <RestoreNvmData+0x108>)
 8011b1e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8011b22:	687a      	ldr	r2, [r7, #4]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d001      	beq.n	8011b2c <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011b28:	2317      	movs	r3, #23
 8011b2a:	e03f      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 8011b2c:	2100      	movs	r1, #0
 8011b2e:	4826      	ldr	r0, [pc, #152]	; (8011bc8 <RestoreNvmData+0x118>)
 8011b30:	f006 f8a0 	bl	8017c74 <Crc32>
 8011b34:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 8011b36:	4b20      	ldr	r3, [pc, #128]	; (8011bb8 <RestoreNvmData+0x108>)
 8011b38:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8011b3c:	687a      	ldr	r2, [r7, #4]
 8011b3e:	429a      	cmp	r2, r3
 8011b40:	d001      	beq.n	8011b46 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011b42:	2317      	movs	r3, #23
 8011b44:	e032      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 8011b46:	2114      	movs	r1, #20
 8011b48:	4820      	ldr	r0, [pc, #128]	; (8011bcc <RestoreNvmData+0x11c>)
 8011b4a:	f006 f893 	bl	8017c74 <Crc32>
 8011b4e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 8011b50:	4b19      	ldr	r3, [pc, #100]	; (8011bb8 <RestoreNvmData+0x108>)
 8011b52:	f8d3 3578 	ldr.w	r3, [r3, #1400]	; 0x578
 8011b56:	687a      	ldr	r2, [r7, #4]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d001      	beq.n	8011b60 <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8011b5c:	2317      	movs	r3, #23
 8011b5e:	e025      	b.n	8011bac <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 8011b60:	f240 527c 	movw	r2, #1404	; 0x57c
 8011b64:	4914      	ldr	r1, [pc, #80]	; (8011bb8 <RestoreNvmData+0x108>)
 8011b66:	481a      	ldr	r0, [pc, #104]	; (8011bd0 <RestoreNvmData+0x120>)
 8011b68:	f006 f82f 	bl	8017bca <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8011b6c:	f240 527c 	movw	r2, #1404	; 0x57c
 8011b70:	2100      	movs	r1, #0
 8011b72:	4811      	ldr	r0, [pc, #68]	; (8011bb8 <RestoreNvmData+0x108>)
 8011b74:	f006 f864 	bl	8017c40 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8011b78:	4b0e      	ldr	r3, [pc, #56]	; (8011bb4 <RestoreNvmData+0x104>)
 8011b7a:	f893 241f 	ldrb.w	r2, [r3, #1055]	; 0x41f
 8011b7e:	4b0d      	ldr	r3, [pc, #52]	; (8011bb4 <RestoreNvmData+0x104>)
 8011b80:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8011b84:	4b12      	ldr	r3, [pc, #72]	; (8011bd0 <RestoreNvmData+0x120>)
 8011b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b88:	4a0a      	ldr	r2, [pc, #40]	; (8011bb4 <RestoreNvmData+0x104>)
 8011b8a:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b8e:	4b10      	ldr	r3, [pc, #64]	; (8011bd0 <RestoreNvmData+0x120>)
 8011b90:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
 8011b94:	4b07      	ldr	r3, [pc, #28]	; (8011bb4 <RestoreNvmData+0x104>)
 8011b96:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8011b9a:	4b06      	ldr	r3, [pc, #24]	; (8011bb4 <RestoreNvmData+0x104>)
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8011ba2:	4b04      	ldr	r3, [pc, #16]	; (8011bb4 <RestoreNvmData+0x104>)
 8011ba4:	2202      	movs	r2, #2
 8011ba6:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb

    return LORAMAC_STATUS_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	2000082c 	.word	0x2000082c
 8011bb8:	200012c8 	.word	0x200012c8
 8011bbc:	200012f0 	.word	0x200012f0
 8011bc0:	20001308 	.word	0x20001308
 8011bc4:	200013ec 	.word	0x200013ec
 8011bc8:	200014ac 	.word	0x200014ac
 8011bcc:	2000182c 	.word	0x2000182c
 8011bd0:	20000d4c 	.word	0x20000d4c

08011bd4 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
 8011bdc:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d002      	beq.n	8011bea <DetermineFrameType+0x16>
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d101      	bne.n	8011bee <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011bea:	2303      	movs	r3, #3
 8011bec:	e03b      	b.n	8011c66 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	7b1b      	ldrb	r3, [r3, #12]
 8011bf2:	f003 030f 	and.w	r3, r3, #15
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d008      	beq.n	8011c0e <DetermineFrameType+0x3a>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d003      	beq.n	8011c0e <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	701a      	strb	r2, [r3, #0]
 8011c0c:	e02a      	b.n	8011c64 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d103      	bne.n	8011c20 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8011c18:	683b      	ldr	r3, [r7, #0]
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	701a      	strb	r2, [r3, #0]
 8011c1e:	e021      	b.n	8011c64 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	7b1b      	ldrb	r3, [r3, #12]
 8011c24:	f003 030f 	and.w	r3, r3, #15
 8011c28:	b2db      	uxtb	r3, r3
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d108      	bne.n	8011c40 <DetermineFrameType+0x6c>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d103      	bne.n	8011c40 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	2202      	movs	r2, #2
 8011c3c:	701a      	strb	r2, [r3, #0]
 8011c3e:	e011      	b.n	8011c64 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	7b1b      	ldrb	r3, [r3, #12]
 8011c44:	f003 030f 	and.w	r3, r3, #15
 8011c48:	b2db      	uxtb	r3, r3
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d108      	bne.n	8011c60 <DetermineFrameType+0x8c>
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d003      	beq.n	8011c60 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	2203      	movs	r2, #3
 8011c5c:	701a      	strb	r2, [r3, #0]
 8011c5e:	e001      	b.n	8011c64 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8011c60:	2318      	movs	r3, #24
 8011c62:	e000      	b.n	8011c66 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8011c64:	2300      	movs	r3, #0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	370c      	adds	r7, #12
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bc80      	pop	{r7}
 8011c6e:	4770      	bx	lr

08011c70 <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	4603      	mov	r3, r0
 8011c78:	460a      	mov	r2, r1
 8011c7a:	71fb      	strb	r3, [r7, #7]
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8011c80:	79fa      	ldrb	r2, [r7, #7]
 8011c82:	79bb      	ldrb	r3, [r7, #6]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d301      	bcc.n	8011c8c <CheckRetrans+0x1c>
    {
        return true;
 8011c88:	2301      	movs	r3, #1
 8011c8a:	e000      	b.n	8011c8e <CheckRetrans+0x1e>
    }
    return false;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	370c      	adds	r7, #12
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bc80      	pop	{r7}
 8011c96:	4770      	bx	lr

08011c98 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011c9c:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8011c9e:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011ca2:	4a12      	ldr	r2, [pc, #72]	; (8011cec <CheckRetransUnconfirmedUplink+0x54>)
 8011ca4:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8011ca8:	4611      	mov	r1, r2
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7ff ffe0 	bl	8011c70 <CheckRetrans>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d001      	beq.n	8011cba <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e014      	b.n	8011ce4 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011cba:	4b0b      	ldr	r3, [pc, #44]	; (8011ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8011cbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011cc0:	f003 0302 	and.w	r3, r3, #2
 8011cc4:	b2db      	uxtb	r3, r3
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d00b      	beq.n	8011ce2 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011cca:	4b07      	ldr	r3, [pc, #28]	; (8011ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8011ccc:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d004      	beq.n	8011cde <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011cd4:	4b04      	ldr	r3, [pc, #16]	; (8011ce8 <CheckRetransUnconfirmedUplink+0x50>)
 8011cd6:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8011cda:	2b01      	cmp	r3, #1
 8011cdc:	d101      	bne.n	8011ce2 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8011cde:	2301      	movs	r3, #1
 8011ce0:	e000      	b.n	8011ce4 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8011ce2:	2300      	movs	r3, #0
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	2000082c 	.word	0x2000082c
 8011cec:	20000d4c 	.word	0x20000d4c

08011cf0 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8011cf4:	4b10      	ldr	r3, [pc, #64]	; (8011d38 <CheckRetransConfirmedUplink+0x48>)
 8011cf6:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 8011cfa:	4a10      	ldr	r2, [pc, #64]	; (8011d3c <CheckRetransConfirmedUplink+0x4c>)
 8011cfc:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8011d00:	4611      	mov	r1, r2
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7ff ffb4 	bl	8011c70 <CheckRetrans>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e00f      	b.n	8011d32 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011d12:	4b09      	ldr	r3, [pc, #36]	; (8011d38 <CheckRetransConfirmedUplink+0x48>)
 8011d14:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011d18:	f003 0302 	and.w	r3, r3, #2
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d006      	beq.n	8011d30 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011d22:	4b05      	ldr	r3, [pc, #20]	; (8011d38 <CheckRetransConfirmedUplink+0x48>)
 8011d24:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d001      	beq.n	8011d30 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e000      	b.n	8011d32 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	2000082c 	.word	0x2000082c
 8011d3c:	20000d4c 	.word	0x20000d4c

08011d40 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d4e:	d002      	beq.n	8011d56 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	3301      	adds	r3, #1
 8011d54:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8011d56:	687b      	ldr	r3, [r7, #4]
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bc80      	pop	{r7}
 8011d60:	4770      	bx	lr
	...

08011d64 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011d68:	4b1a      	ldr	r3, [pc, #104]	; (8011dd4 <StopRetransmission+0x70>)
 8011d6a:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011d6e:	f003 0302 	and.w	r3, r3, #2
 8011d72:	b2db      	uxtb	r3, r3
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d009      	beq.n	8011d8c <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011d78:	4b16      	ldr	r3, [pc, #88]	; (8011dd4 <StopRetransmission+0x70>)
 8011d7a:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d011      	beq.n	8011da6 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8011d82:	4b14      	ldr	r3, [pc, #80]	; (8011dd4 <StopRetransmission+0x70>)
 8011d84:	f893 3493 	ldrb.w	r3, [r3, #1171]	; 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8011d88:	2b01      	cmp	r3, #1
 8011d8a:	d00c      	beq.n	8011da6 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8011d8c:	4b12      	ldr	r3, [pc, #72]	; (8011dd8 <StopRetransmission+0x74>)
 8011d8e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d007      	beq.n	8011da6 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8011d96:	4b10      	ldr	r3, [pc, #64]	; (8011dd8 <StopRetransmission+0x74>)
 8011d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7ff ffd0 	bl	8011d40 <IncreaseAdrAckCounter>
 8011da0:	4603      	mov	r3, r0
 8011da2:	4a0d      	ldr	r2, [pc, #52]	; (8011dd8 <StopRetransmission+0x74>)
 8011da4:	6293      	str	r3, [r2, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011da6:	4b0b      	ldr	r3, [pc, #44]	; (8011dd4 <StopRetransmission+0x70>)
 8011da8:	2200      	movs	r2, #0
 8011daa:	f883 241c 	strb.w	r2, [r3, #1052]	; 0x41c
    MacCtx.NodeAckRequested = false;
 8011dae:	4b09      	ldr	r3, [pc, #36]	; (8011dd4 <StopRetransmission+0x70>)
 8011db0:	2200      	movs	r2, #0
 8011db2:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8011db6:	4b07      	ldr	r3, [pc, #28]	; (8011dd4 <StopRetransmission+0x70>)
 8011db8:	2200      	movs	r2, #0
 8011dba:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011dbe:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <StopRetransmission+0x70>)
 8011dc0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dc4:	f023 0302 	bic.w	r3, r3, #2
 8011dc8:	4a02      	ldr	r2, [pc, #8]	; (8011dd4 <StopRetransmission+0x70>)
 8011dca:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8011dce:	2301      	movs	r3, #1
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	bd80      	pop	{r7, pc}
 8011dd4:	2000082c 	.word	0x2000082c
 8011dd8:	20000d4c 	.word	0x20000d4c

08011ddc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	4603      	mov	r3, r0
 8011de4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011de6:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <CallNvmDataChangeCallback+0x38>)
 8011de8:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00c      	beq.n	8011e0a <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8011df0:	4b08      	ldr	r3, [pc, #32]	; (8011e14 <CallNvmDataChangeCallback+0x38>)
 8011df2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011df6:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d006      	beq.n	8011e0a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8011dfc:	4b05      	ldr	r3, [pc, #20]	; (8011e14 <CallNvmDataChangeCallback+0x38>)
 8011dfe:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	88fa      	ldrh	r2, [r7, #6]
 8011e06:	4610      	mov	r0, r2
 8011e08:	4798      	blx	r3
    }
}
 8011e0a:	bf00      	nop
 8011e0c:	3708      	adds	r7, #8
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	2000082c 	.word	0x2000082c

08011e18 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8011e18:	b480      	push	{r7}
 8011e1a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011e1c:	4b0b      	ldr	r3, [pc, #44]	; (8011e4c <IsRequestPending+0x34>)
 8011e1e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011e22:	f003 0304 	and.w	r3, r3, #4
 8011e26:	b2db      	uxtb	r3, r3
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d107      	bne.n	8011e3c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011e2c:	4b07      	ldr	r3, [pc, #28]	; (8011e4c <IsRequestPending+0x34>)
 8011e2e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8011e32:	f003 0301 	and.w	r3, r3, #1
 8011e36:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d001      	beq.n	8011e40 <IsRequestPending+0x28>
    {
        return 1;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	e000      	b.n	8011e42 <IsRequestPending+0x2a>
    }
    return 0;
 8011e40:	2300      	movs	r3, #0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bc80      	pop	{r7}
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop
 8011e4c:	2000082c 	.word	0x2000082c

08011e50 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011e50:	b590      	push	{r4, r7, lr}
 8011e52:	b091      	sub	sp, #68	; 0x44
 8011e54:	af02      	add	r7, sp, #8
 8011e56:	6178      	str	r0, [r7, #20]
 8011e58:	6139      	str	r1, [r7, #16]
 8011e5a:	4613      	mov	r3, r2
 8011e5c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d002      	beq.n	8011e6a <LoRaMacInitialization+0x1a>
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d101      	bne.n	8011e6e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	e27c      	b.n	8012368 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011e6e:	697b      	ldr	r3, [r7, #20]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d00b      	beq.n	8011e8e <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d007      	beq.n	8011e8e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d003      	beq.n	8011e8e <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e8e:	2303      	movs	r3, #3
 8011e90:	e26a      	b.n	8012368 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011e92:	7bfb      	ldrb	r3, [r7, #15]
 8011e94:	4618      	mov	r0, r3
 8011e96:	f003 fbdb 	bl	8015650 <RegionIsActive>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	f083 0301 	eor.w	r3, r3, #1
 8011ea0:	b2db      	uxtb	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d001      	beq.n	8011eaa <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011ea6:	2309      	movs	r3, #9
 8011ea8:	e25e      	b.n	8012368 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8011eaa:	6978      	ldr	r0, [r7, #20]
 8011eac:	f002 f882 	bl	8013fb4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8011eb0:	f240 527c 	movw	r2, #1404	; 0x57c
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	48c7      	ldr	r0, [pc, #796]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011eb8:	f005 fec2 	bl	8017c40 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8011ebc:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	48c5      	ldr	r0, [pc, #788]	; (80121d8 <LoRaMacInitialization+0x388>)
 8011ec4:	f005 febc 	bl	8017c40 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8011ec8:	4ac2      	ldr	r2, [pc, #776]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011eca:	7bfb      	ldrb	r3, [r7, #15]
 8011ecc:	f882 3040 	strb.w	r3, [r2, #64]	; 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8011ed0:	4bc0      	ldr	r3, [pc, #768]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8011ed8:	4bbe      	ldr	r3, [pc, #760]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8011ee0:	4bbc      	ldr	r3, [pc, #752]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011ee2:	4abe      	ldr	r2, [pc, #760]	; (80121dc <LoRaMacInitialization+0x38c>)
 8011ee4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8011eee:	4bbc      	ldr	r3, [pc, #752]	; (80121e0 <LoRaMacInitialization+0x390>)
 8011ef0:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8011ef2:	4bbc      	ldr	r3, [pc, #752]	; (80121e4 <LoRaMacInitialization+0x394>)
 8011ef4:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8011ef6:	4bbc      	ldr	r3, [pc, #752]	; (80121e8 <LoRaMacInitialization+0x398>)
 8011ef8:	627b      	str	r3, [r7, #36]	; 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011efa:	4bb6      	ldr	r3, [pc, #728]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011efc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f00:	f107 021c 	add.w	r2, r7, #28
 8011f04:	4611      	mov	r1, r2
 8011f06:	4618      	mov	r0, r3
 8011f08:	f003 fbdb 	bl	80156c2 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011f0c:	230f      	movs	r3, #15
 8011f0e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f12:	4bb0      	ldr	r3, [pc, #704]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f18:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f003 fba6 	bl	8015670 <RegionGetPhyParam>
 8011f24:	4603      	mov	r3, r0
 8011f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8011f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	bf14      	ite	ne
 8011f2e:	2301      	movne	r3, #1
 8011f30:	2300      	moveq	r3, #0
 8011f32:	b2da      	uxtb	r2, r3
 8011f34:	4ba7      	ldr	r3, [pc, #668]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f36:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8011f3a:	230a      	movs	r3, #10
 8011f3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f40:	4ba4      	ldr	r3, [pc, #656]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011f4a:	4611      	mov	r1, r2
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f003 fb8f 	bl	8015670 <RegionGetPhyParam>
 8011f52:	4603      	mov	r3, r0
 8011f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8011f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f58:	b25a      	sxtb	r2, r3
 8011f5a:	4b9e      	ldr	r3, [pc, #632]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f5c:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8011f60:	2306      	movs	r3, #6
 8011f62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f66:	4b9b      	ldr	r3, [pc, #620]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011f70:	4611      	mov	r1, r2
 8011f72:	4618      	mov	r0, r3
 8011f74:	f003 fb7c 	bl	8015670 <RegionGetPhyParam>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8011f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7e:	b25a      	sxtb	r2, r3
 8011f80:	4b94      	ldr	r3, [pc, #592]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f82:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8011f86:	2310      	movs	r3, #16
 8011f88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011f8c:	4b91      	ldr	r3, [pc, #580]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011f92:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011f96:	4611      	mov	r1, r2
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f003 fb69 	bl	8015670 <RegionGetPhyParam>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8011fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa4:	4a8b      	ldr	r2, [pc, #556]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011faa:	2311      	movs	r3, #17
 8011fac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fb0:	4b88      	ldr	r3, [pc, #544]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fb6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011fba:	4611      	mov	r1, r2
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f003 fb57 	bl	8015670 <RegionGetPhyParam>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc8:	4a82      	ldr	r2, [pc, #520]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011fca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8011fce:	2312      	movs	r3, #18
 8011fd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011fd4:	4b7f      	ldr	r3, [pc, #508]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011fda:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011fde:	4611      	mov	r1, r2
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f003 fb45 	bl	8015670 <RegionGetPhyParam>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	4a79      	ldr	r2, [pc, #484]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011fee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8011ff2:	2313      	movs	r3, #19
 8011ff4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011ff8:	4b76      	ldr	r3, [pc, #472]	; (80121d4 <LoRaMacInitialization+0x384>)
 8011ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011ffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012002:	4611      	mov	r1, r2
 8012004:	4618      	mov	r0, r3
 8012006:	f003 fb33 	bl	8015670 <RegionGetPhyParam>
 801200a:	4603      	mov	r3, r0
 801200c:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801200e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012010:	4a70      	ldr	r2, [pc, #448]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012012:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8012016:	2314      	movs	r3, #20
 8012018:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801201c:	4b6d      	ldr	r3, [pc, #436]	; (80121d4 <LoRaMacInitialization+0x384>)
 801201e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012022:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012026:	4611      	mov	r1, r2
 8012028:	4618      	mov	r0, r3
 801202a:	f003 fb21 	bl	8015670 <RegionGetPhyParam>
 801202e:	4603      	mov	r3, r0
 8012030:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8012032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012034:	4a67      	ldr	r2, [pc, #412]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012036:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801203a:	2316      	movs	r3, #22
 801203c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012040:	4b64      	ldr	r3, [pc, #400]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012046:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801204a:	4611      	mov	r1, r2
 801204c:	4618      	mov	r0, r3
 801204e:	f003 fb0f 	bl	8015670 <RegionGetPhyParam>
 8012052:	4603      	mov	r3, r0
 8012054:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8012056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012058:	b2da      	uxtb	r2, r3
 801205a:	4b5e      	ldr	r3, [pc, #376]	; (80121d4 <LoRaMacInitialization+0x384>)
 801205c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8012060:	2317      	movs	r3, #23
 8012062:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012066:	4b5b      	ldr	r3, [pc, #364]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801206c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012070:	4611      	mov	r1, r2
 8012072:	4618      	mov	r0, r3
 8012074:	f003 fafc 	bl	8015670 <RegionGetPhyParam>
 8012078:	4603      	mov	r3, r0
 801207a:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207e:	4a55      	ldr	r2, [pc, #340]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012080:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8012084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012086:	4a53      	ldr	r2, [pc, #332]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012088:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801208c:	2318      	movs	r3, #24
 801208e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012092:	4b50      	ldr	r3, [pc, #320]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012098:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801209c:	4611      	mov	r1, r2
 801209e:	4618      	mov	r0, r3
 80120a0:	f003 fae6 	bl	8015670 <RegionGetPhyParam>
 80120a4:	4603      	mov	r3, r0
 80120a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80120a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120aa:	b2da      	uxtb	r2, r3
 80120ac:	4b49      	ldr	r3, [pc, #292]	; (80121d4 <LoRaMacInitialization+0x384>)
 80120ae:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80120b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b4:	b2da      	uxtb	r2, r3
 80120b6:	4b47      	ldr	r3, [pc, #284]	; (80121d4 <LoRaMacInitialization+0x384>)
 80120b8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80120bc:	231d      	movs	r3, #29
 80120be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80120c2:	4b44      	ldr	r3, [pc, #272]	; (80121d4 <LoRaMacInitialization+0x384>)
 80120c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120c8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80120cc:	4611      	mov	r1, r2
 80120ce:	4618      	mov	r0, r3
 80120d0:	f003 face 	bl	8015670 <RegionGetPhyParam>
 80120d4:	4603      	mov	r3, r0
 80120d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80120d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120da:	b2da      	uxtb	r2, r3
 80120dc:	4b3d      	ldr	r3, [pc, #244]	; (80121d4 <LoRaMacInitialization+0x384>)
 80120de:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80120e2:	231e      	movs	r3, #30
 80120e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80120e8:	4b3a      	ldr	r3, [pc, #232]	; (80121d4 <LoRaMacInitialization+0x384>)
 80120ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80120ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80120f2:	4611      	mov	r1, r2
 80120f4:	4618      	mov	r0, r3
 80120f6:	f003 fabb 	bl	8015670 <RegionGetPhyParam>
 80120fa:	4603      	mov	r3, r0
 80120fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80120fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012100:	b2da      	uxtb	r2, r3
 8012102:	4b34      	ldr	r3, [pc, #208]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012104:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8012108:	231f      	movs	r3, #31
 801210a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801210e:	4b31      	ldr	r3, [pc, #196]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012114:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012118:	4611      	mov	r1, r2
 801211a:	4618      	mov	r0, r3
 801211c:	f003 faa8 	bl	8015670 <RegionGetPhyParam>
 8012120:	4603      	mov	r3, r0
 8012122:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8012124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012126:	4a2b      	ldr	r2, [pc, #172]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012128:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 801212c:	2320      	movs	r3, #32
 801212e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012132:	4b28      	ldr	r3, [pc, #160]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012138:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801213c:	4611      	mov	r1, r2
 801213e:	4618      	mov	r0, r3
 8012140:	f003 fa96 	bl	8015670 <RegionGetPhyParam>
 8012144:	4603      	mov	r3, r0
 8012146:	62fb      	str	r3, [r7, #44]	; 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8012148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214a:	4a22      	ldr	r2, [pc, #136]	; (80121d4 <LoRaMacInitialization+0x384>)
 801214c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8012150:	230b      	movs	r3, #11
 8012152:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012156:	4b1f      	ldr	r3, [pc, #124]	; (80121d4 <LoRaMacInitialization+0x384>)
 8012158:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801215c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012160:	4611      	mov	r1, r2
 8012162:	4618      	mov	r0, r3
 8012164:	f003 fa84 	bl	8015670 <RegionGetPhyParam>
 8012168:	4603      	mov	r3, r0
 801216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 801216c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801216e:	b29a      	uxth	r2, r3
 8012170:	4b19      	ldr	r3, [pc, #100]	; (80121d8 <LoRaMacInitialization+0x388>)
 8012172:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8012176:	230c      	movs	r3, #12
 8012178:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801217c:	4b15      	ldr	r3, [pc, #84]	; (80121d4 <LoRaMacInitialization+0x384>)
 801217e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012182:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8012186:	4611      	mov	r1, r2
 8012188:	4618      	mov	r0, r3
 801218a:	f003 fa71 	bl	8015670 <RegionGetPhyParam>
 801218e:	4603      	mov	r3, r0
 8012190:	62fb      	str	r3, [r7, #44]	; 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012194:	b29a      	uxth	r2, r3
 8012196:	4b10      	ldr	r3, [pc, #64]	; (80121d8 <LoRaMacInitialization+0x388>)
 8012198:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801219c:	4b0d      	ldr	r3, [pc, #52]	; (80121d4 <LoRaMacInitialization+0x384>)
 801219e:	2201      	movs	r2, #1
 80121a0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80121a4:	4b0b      	ldr	r3, [pc, #44]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121a6:	220a      	movs	r2, #10
 80121a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80121ac:	4b09      	ldr	r3, [pc, #36]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121ae:	2206      	movs	r2, #6
 80121b0:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80121b4:	4b07      	ldr	r3, [pc, #28]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121ba:	4a06      	ldr	r2, [pc, #24]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121bc:	6453      	str	r3, [r2, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80121be:	4b05      	ldr	r3, [pc, #20]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121c0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80121c4:	4b03      	ldr	r3, [pc, #12]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80121ca:	4b02      	ldr	r3, [pc, #8]	; (80121d4 <LoRaMacInitialization+0x384>)
 80121cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80121d0:	e00c      	b.n	80121ec <LoRaMacInitialization+0x39c>
 80121d2:	bf00      	nop
 80121d4:	20000d4c 	.word	0x20000d4c
 80121d8:	2000082c 	.word	0x2000082c
 80121dc:	01000400 	.word	0x01000400
 80121e0:	20000f30 	.word	0x20000f30
 80121e4:	20000f34 	.word	0x20000f34
 80121e8:	20001844 	.word	0x20001844
 80121ec:	4a60      	ldr	r2, [pc, #384]	; (8012370 <LoRaMacInitialization+0x520>)
 80121ee:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80121f0:	4b5f      	ldr	r3, [pc, #380]	; (8012370 <LoRaMacInitialization+0x520>)
 80121f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80121f6:	4a5e      	ldr	r2, [pc, #376]	; (8012370 <LoRaMacInitialization+0x520>)
 80121f8:	6513      	str	r3, [r2, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80121fa:	4b5d      	ldr	r3, [pc, #372]	; (8012370 <LoRaMacInitialization+0x520>)
 80121fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8012200:	4a5b      	ldr	r2, [pc, #364]	; (8012370 <LoRaMacInitialization+0x520>)
 8012202:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8012204:	4b5a      	ldr	r3, [pc, #360]	; (8012370 <LoRaMacInitialization+0x520>)
 8012206:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801220a:	4a59      	ldr	r2, [pc, #356]	; (8012370 <LoRaMacInitialization+0x520>)
 801220c:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801220e:	4b58      	ldr	r3, [pc, #352]	; (8012370 <LoRaMacInitialization+0x520>)
 8012210:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012214:	4a56      	ldr	r2, [pc, #344]	; (8012370 <LoRaMacInitialization+0x520>)
 8012216:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8012218:	4b55      	ldr	r3, [pc, #340]	; (8012370 <LoRaMacInitialization+0x520>)
 801221a:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 801221e:	4b54      	ldr	r3, [pc, #336]	; (8012370 <LoRaMacInitialization+0x520>)
 8012220:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8012224:	4b52      	ldr	r3, [pc, #328]	; (8012370 <LoRaMacInitialization+0x520>)
 8012226:	2201      	movs	r2, #1
 8012228:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801222c:	4a51      	ldr	r2, [pc, #324]	; (8012374 <LoRaMacInitialization+0x524>)
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( );
 8012234:	f7ff f8d4 	bl	80113e0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8012238:	4b4d      	ldr	r3, [pc, #308]	; (8012370 <LoRaMacInitialization+0x520>)
 801223a:	2201      	movs	r2, #1
 801223c:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105

    MacCtx.MacPrimitives = primitives;
 8012240:	4a4c      	ldr	r2, [pc, #304]	; (8012374 <LoRaMacInitialization+0x524>)
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8012248:	4b4a      	ldr	r3, [pc, #296]	; (8012374 <LoRaMacInitialization+0x524>)
 801224a:	2200      	movs	r2, #0
 801224c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 8012250:	4b48      	ldr	r3, [pc, #288]	; (8012374 <LoRaMacInitialization+0x524>)
 8012252:	2201      	movs	r2, #1
 8012254:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8012258:	4b45      	ldr	r3, [pc, #276]	; (8012370 <LoRaMacInitialization+0x520>)
 801225a:	2200      	movs	r2, #0
 801225c:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 801225e:	4b44      	ldr	r3, [pc, #272]	; (8012370 <LoRaMacInitialization+0x520>)
 8012260:	2200      	movs	r2, #0
 8012262:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8012264:	2300      	movs	r3, #0
 8012266:	9300      	str	r3, [sp, #0]
 8012268:	4b43      	ldr	r3, [pc, #268]	; (8012378 <LoRaMacInitialization+0x528>)
 801226a:	2200      	movs	r2, #0
 801226c:	f04f 31ff 	mov.w	r1, #4294967295
 8012270:	4842      	ldr	r0, [pc, #264]	; (801237c <LoRaMacInitialization+0x52c>)
 8012272:	f009 fc13 	bl	801ba9c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8012276:	2300      	movs	r3, #0
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	4b41      	ldr	r3, [pc, #260]	; (8012380 <LoRaMacInitialization+0x530>)
 801227c:	2200      	movs	r2, #0
 801227e:	f04f 31ff 	mov.w	r1, #4294967295
 8012282:	4840      	ldr	r0, [pc, #256]	; (8012384 <LoRaMacInitialization+0x534>)
 8012284:	f009 fc0a 	bl	801ba9c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8012288:	2300      	movs	r3, #0
 801228a:	9300      	str	r3, [sp, #0]
 801228c:	4b3e      	ldr	r3, [pc, #248]	; (8012388 <LoRaMacInitialization+0x538>)
 801228e:	2200      	movs	r2, #0
 8012290:	f04f 31ff 	mov.w	r1, #4294967295
 8012294:	483d      	ldr	r0, [pc, #244]	; (801238c <LoRaMacInitialization+0x53c>)
 8012296:	f009 fc01 	bl	801ba9c <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801229a:	2300      	movs	r3, #0
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	4b3c      	ldr	r3, [pc, #240]	; (8012390 <LoRaMacInitialization+0x540>)
 80122a0:	2200      	movs	r2, #0
 80122a2:	f04f 31ff 	mov.w	r1, #4294967295
 80122a6:	483b      	ldr	r0, [pc, #236]	; (8012394 <LoRaMacInitialization+0x544>)
 80122a8:	f009 fbf8 	bl	801ba9c <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80122ac:	4c30      	ldr	r4, [pc, #192]	; (8012370 <LoRaMacInitialization+0x520>)
 80122ae:	463b      	mov	r3, r7
 80122b0:	4618      	mov	r0, r3
 80122b2:	f009 f86b 	bl	801b38c <SysTimeGetMcuTime>
 80122b6:	f504 7388 	add.w	r3, r4, #272	; 0x110
 80122ba:	463a      	mov	r2, r7
 80122bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122c0:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80122c4:	4b34      	ldr	r3, [pc, #208]	; (8012398 <LoRaMacInitialization+0x548>)
 80122c6:	2200      	movs	r2, #0
 80122c8:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80122ca:	4b2a      	ldr	r3, [pc, #168]	; (8012374 <LoRaMacInitialization+0x524>)
 80122cc:	4a33      	ldr	r2, [pc, #204]	; (801239c <LoRaMacInitialization+0x54c>)
 80122ce:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80122d2:	4b28      	ldr	r3, [pc, #160]	; (8012374 <LoRaMacInitialization+0x524>)
 80122d4:	4a32      	ldr	r2, [pc, #200]	; (80123a0 <LoRaMacInitialization+0x550>)
 80122d6:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80122da:	4b26      	ldr	r3, [pc, #152]	; (8012374 <LoRaMacInitialization+0x524>)
 80122dc:	4a31      	ldr	r2, [pc, #196]	; (80123a4 <LoRaMacInitialization+0x554>)
 80122de:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80122e2:	4b24      	ldr	r3, [pc, #144]	; (8012374 <LoRaMacInitialization+0x524>)
 80122e4:	4a30      	ldr	r2, [pc, #192]	; (80123a8 <LoRaMacInitialization+0x558>)
 80122e6:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80122ea:	4b22      	ldr	r3, [pc, #136]	; (8012374 <LoRaMacInitialization+0x524>)
 80122ec:	4a2f      	ldr	r2, [pc, #188]	; (80123ac <LoRaMacInitialization+0x55c>)
 80122ee:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80122f2:	4b2f      	ldr	r3, [pc, #188]	; (80123b0 <LoRaMacInitialization+0x560>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	482f      	ldr	r0, [pc, #188]	; (80123b4 <LoRaMacInitialization+0x564>)
 80122f8:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	689b      	ldr	r3, [r3, #8]
 80122fe:	4619      	mov	r1, r3
 8012300:	482d      	ldr	r0, [pc, #180]	; (80123b8 <LoRaMacInitialization+0x568>)
 8012302:	f7fa fb87 	bl	800ca14 <SecureElementInit>
 8012306:	4603      	mov	r3, r0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d001      	beq.n	8012310 <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801230c:	2311      	movs	r3, #17
 801230e:	e02b      	b.n	8012368 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8012310:	4817      	ldr	r0, [pc, #92]	; (8012370 <LoRaMacInitialization+0x520>)
 8012312:	f002 fafb 	bl	801490c <LoRaMacCryptoInit>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	d001      	beq.n	8012320 <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801231c:	2311      	movs	r3, #17
 801231e:	e023      	b.n	8012368 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8012320:	f001 fc1a 	bl	8013b58 <LoRaMacCommandsInit>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d001      	beq.n	801232e <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801232a:	2313      	movs	r3, #19
 801232c:	e01c      	b.n	8012368 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801232e:	4823      	ldr	r0, [pc, #140]	; (80123bc <LoRaMacInitialization+0x56c>)
 8012330:	f002 fb8c 	bl	8014a4c <LoRaMacCryptoSetMulticastReference>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801233a:	2311      	movs	r3, #17
 801233c:	e014      	b.n	8012368 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801233e:	4b1c      	ldr	r3, [pc, #112]	; (80123b0 <LoRaMacInitialization+0x560>)
 8012340:	695b      	ldr	r3, [r3, #20]
 8012342:	4798      	blx	r3
 8012344:	4603      	mov	r3, r0
 8012346:	4618      	mov	r0, r3
 8012348:	f005 fc1a 	bl	8017b80 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801234c:	4b18      	ldr	r3, [pc, #96]	; (80123b0 <LoRaMacInitialization+0x560>)
 801234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012350:	4a07      	ldr	r2, [pc, #28]	; (8012370 <LoRaMacInitialization+0x520>)
 8012352:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012356:	4610      	mov	r0, r2
 8012358:	4798      	blx	r3
    Radio.Sleep( );
 801235a:	4b15      	ldr	r3, [pc, #84]	; (80123b0 <LoRaMacInitialization+0x560>)
 801235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801235e:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8012360:	2001      	movs	r0, #1
 8012362:	f7fd fad3 	bl	800f90c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8012366:	2300      	movs	r3, #0
}
 8012368:	4618      	mov	r0, r3
 801236a:	373c      	adds	r7, #60	; 0x3c
 801236c:	46bd      	mov	sp, r7
 801236e:	bd90      	pop	{r4, r7, pc}
 8012370:	20000d4c 	.word	0x20000d4c
 8012374:	2000082c 	.word	0x2000082c
 8012378:	0800fec1 	.word	0x0800fec1
 801237c:	20000b94 	.word	0x20000b94
 8012380:	0800ff51 	.word	0x0800ff51
 8012384:	20000bac 	.word	0x20000bac
 8012388:	0800ffc9 	.word	0x0800ffc9
 801238c:	20000bc4 	.word	0x20000bc4
 8012390:	08010049 	.word	0x08010049
 8012394:	20000c30 	.word	0x20000c30
 8012398:	200018d4 	.word	0x200018d4
 801239c:	0800e9c1 	.word	0x0800e9c1
 80123a0:	0800ea39 	.word	0x0800ea39
 80123a4:	0800eb19 	.word	0x0800eb19
 80123a8:	0800eacd 	.word	0x0800eacd
 80123ac:	0800eb55 	.word	0x0800eb55
 80123b0:	0801d538 	.word	0x0801d538
 80123b4:	20000b78 	.word	0x20000b78
 80123b8:	20000e70 	.word	0x20000e70
 80123bc:	20000e24 	.word	0x20000e24

080123c0 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80123c0:	b480      	push	{r7}
 80123c2:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80123c4:	4b04      	ldr	r3, [pc, #16]	; (80123d8 <LoRaMacStart+0x18>)
 80123c6:	2200      	movs	r2, #0
 80123c8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    return LORAMAC_STATUS_OK;
 80123cc:	2300      	movs	r3, #0
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bc80      	pop	{r7}
 80123d4:	4770      	bx	lr
 80123d6:	bf00      	nop
 80123d8:	2000082c 	.word	0x2000082c

080123dc <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80123e0:	f7fd fa74 	bl	800f8cc <LoRaMacIsBusy>
 80123e4:	4603      	mov	r3, r0
 80123e6:	f083 0301 	eor.w	r3, r3, #1
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d005      	beq.n	80123fc <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 80123f0:	4b07      	ldr	r3, [pc, #28]	; (8012410 <LoRaMacStop+0x34>)
 80123f2:	2201      	movs	r2, #1
 80123f4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80123f8:	2300      	movs	r3, #0
 80123fa:	e007      	b.n	801240c <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80123fc:	4b04      	ldr	r3, [pc, #16]	; (8012410 <LoRaMacStop+0x34>)
 80123fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012402:	2b01      	cmp	r3, #1
 8012404:	d101      	bne.n	801240a <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 8012406:	2300      	movs	r3, #0
 8012408:	e000      	b.n	801240c <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 801240a:	2301      	movs	r3, #1
}
 801240c:	4618      	mov	r0, r3
 801240e:	bd80      	pop	{r7, pc}
 8012410:	2000082c 	.word	0x2000082c

08012414 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8012418:	4812      	ldr	r0, [pc, #72]	; (8012464 <LoRaMacHalt+0x50>)
 801241a:	f009 fbe3 	bl	801bbe4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801241e:	4812      	ldr	r0, [pc, #72]	; (8012468 <LoRaMacHalt+0x54>)
 8012420:	f009 fbe0 	bl	801bbe4 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8012424:	4811      	ldr	r0, [pc, #68]	; (801246c <LoRaMacHalt+0x58>)
 8012426:	f009 fbdd 	bl	801bbe4 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 801242a:	4811      	ldr	r0, [pc, #68]	; (8012470 <LoRaMacHalt+0x5c>)
 801242c:	f009 fbda 	bl	801bbe4 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8012430:	f001 fa04 	bl	801383c <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8012434:	4b0f      	ldr	r3, [pc, #60]	; (8012474 <LoRaMacHalt+0x60>)
 8012436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012438:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801243a:	4b0f      	ldr	r3, [pc, #60]	; (8012478 <LoRaMacHalt+0x64>)
 801243c:	2200      	movs	r2, #0
 801243e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    LoRaMacHandleNvm( &Nvm );
 8012442:	480e      	ldr	r0, [pc, #56]	; (801247c <LoRaMacHalt+0x68>)
 8012444:	f7fd fc18 	bl	800fc78 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8012448:	f240 527c 	movw	r2, #1404	; 0x57c
 801244c:	490b      	ldr	r1, [pc, #44]	; (801247c <LoRaMacHalt+0x68>)
 801244e:	480c      	ldr	r0, [pc, #48]	; (8012480 <LoRaMacHalt+0x6c>)
 8012450:	f005 fbbb 	bl	8017bca <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 8012454:	4b08      	ldr	r3, [pc, #32]	; (8012478 <LoRaMacHalt+0x64>)
 8012456:	2201      	movs	r2, #1
 8012458:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801245c:	2300      	movs	r3, #0
}
 801245e:	4618      	mov	r0, r3
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	20000b94 	.word	0x20000b94
 8012468:	20000bac 	.word	0x20000bac
 801246c:	20000bc4 	.word	0x20000bc4
 8012470:	20000c30 	.word	0x20000c30
 8012474:	0801d538 	.word	0x0801d538
 8012478:	2000082c 	.word	0x2000082c
 801247c:	20000d4c 	.word	0x20000d4c
 8012480:	200012c8 	.word	0x200012c8

08012484 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8012484:	b590      	push	{r4, r7, lr}
 8012486:	b08d      	sub	sp, #52	; 0x34
 8012488:	af02      	add	r7, sp, #8
 801248a:	4603      	mov	r3, r0
 801248c:	6039      	str	r1, [r7, #0]
 801248e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012490:	4b42      	ldr	r3, [pc, #264]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 8012492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012494:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012496:	4b41      	ldr	r3, [pc, #260]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 8012498:	f993 30cd 	ldrsb.w	r3, [r3, #205]	; 0xcd
 801249c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801249e:	4b3f      	ldr	r3, [pc, #252]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 80124a0:	f993 30cc 	ldrsb.w	r3, [r3, #204]	; 0xcc
 80124a4:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80124a6:	4b3e      	ldr	r3, [pc, #248]	; (80125a0 <LoRaMacQueryTxPossible+0x11c>)
 80124a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80124ac:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80124ae:	2300      	movs	r3, #0
 80124b0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d101      	bne.n	80124bc <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80124b8:	2303      	movs	r3, #3
 80124ba:	e06b      	b.n	8012594 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80124bc:	2300      	movs	r3, #0
 80124be:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80124c0:	4b36      	ldr	r3, [pc, #216]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 80124c2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80124c6:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80124c8:	4b34      	ldr	r3, [pc, #208]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 80124ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124cc:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80124ce:	4b34      	ldr	r3, [pc, #208]	; (80125a0 <LoRaMacQueryTxPossible+0x11c>)
 80124d0:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
 80124d4:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80124d6:	4b32      	ldr	r3, [pc, #200]	; (80125a0 <LoRaMacQueryTxPossible+0x11c>)
 80124d8:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80124dc:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80124de:	4b2f      	ldr	r3, [pc, #188]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 80124e0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80124e4:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80124e8:	4b2c      	ldr	r3, [pc, #176]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 80124ea:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80124ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80124f2:	4b2b      	ldr	r3, [pc, #172]	; (80125a0 <LoRaMacQueryTxPossible+0x11c>)
 80124f4:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80124f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80124fc:	4b27      	ldr	r3, [pc, #156]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 80124fe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 8012506:	4b25      	ldr	r3, [pc, #148]	; (801259c <LoRaMacQueryTxPossible+0x118>)
 8012508:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801250c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8012510:	f107 040d 	add.w	r4, r7, #13
 8012514:	f107 020e 	add.w	r2, r7, #14
 8012518:	f107 010f 	add.w	r1, r7, #15
 801251c:	f107 0014 	add.w	r0, r7, #20
 8012520:	f107 0310 	add.w	r3, r7, #16
 8012524:	9300      	str	r3, [sp, #0]
 8012526:	4623      	mov	r3, r4
 8012528:	f001 f852 	bl	80135d0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012530:	4618      	mov	r0, r3
 8012532:	f7fd fec5 	bl	80102c0 <GetMaxAppPayloadWithoutFOptsLength>
 8012536:	4603      	mov	r3, r0
 8012538:	461a      	mov	r2, r3
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801253e:	f107 0308 	add.w	r3, r7, #8
 8012542:	4618      	mov	r0, r3
 8012544:	f001 fbd6 	bl	8013cf4 <LoRaMacCommandsGetSizeSerializedCmds>
 8012548:	4603      	mov	r3, r0
 801254a:	2b00      	cmp	r3, #0
 801254c:	d001      	beq.n	8012552 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801254e:	2313      	movs	r3, #19
 8012550:	e020      	b.n	8012594 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	2b0f      	cmp	r3, #15
 8012556:	d819      	bhi.n	801258c <LoRaMacQueryTxPossible+0x108>
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	785b      	ldrb	r3, [r3, #1]
 801255c:	461a      	mov	r2, r3
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	429a      	cmp	r2, r3
 8012562:	d313      	bcc.n	801258c <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	785a      	ldrb	r2, [r3, #1]
 8012568:	68bb      	ldr	r3, [r7, #8]
 801256a:	b2db      	uxtb	r3, r3
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	b2da      	uxtb	r2, r3
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	785b      	ldrb	r3, [r3, #1]
 8012578:	4619      	mov	r1, r3
 801257a:	79fa      	ldrb	r2, [r7, #7]
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	4413      	add	r3, r2
 8012580:	4299      	cmp	r1, r3
 8012582:	d301      	bcc.n	8012588 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8012584:	2300      	movs	r3, #0
 8012586:	e005      	b.n	8012594 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8012588:	2308      	movs	r3, #8
 801258a:	e003      	b.n	8012594 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	2200      	movs	r2, #0
 8012590:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8012592:	2308      	movs	r3, #8
    }
}
 8012594:	4618      	mov	r0, r3
 8012596:	372c      	adds	r7, #44	; 0x2c
 8012598:	46bd      	mov	sp, r7
 801259a:	bd90      	pop	{r4, r7, pc}
 801259c:	20000d4c 	.word	0x20000d4c
 80125a0:	2000082c 	.word	0x2000082c

080125a4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80125a4:	b590      	push	{r4, r7, lr}
 80125a6:	b087      	sub	sp, #28
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80125ac:	2300      	movs	r3, #0
 80125ae:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80125b6:	2303      	movs	r3, #3
 80125b8:	e191      	b.n	80128de <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	781b      	ldrb	r3, [r3, #0]
 80125be:	2b39      	cmp	r3, #57	; 0x39
 80125c0:	f200 8186 	bhi.w	80128d0 <LoRaMacMibGetRequestConfirm+0x32c>
 80125c4:	a201      	add	r2, pc, #4	; (adr r2, 80125cc <LoRaMacMibGetRequestConfirm+0x28>)
 80125c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ca:	bf00      	nop
 80125cc:	080126b5 	.word	0x080126b5
 80125d0:	080126c1 	.word	0x080126c1
 80125d4:	080126cd 	.word	0x080126cd
 80125d8:	080126d9 	.word	0x080126d9
 80125dc:	080126e5 	.word	0x080126e5
 80125e0:	080126f1 	.word	0x080126f1
 80125e4:	080126fd 	.word	0x080126fd
 80125e8:	080128d1 	.word	0x080128d1
 80125ec:	080128d1 	.word	0x080128d1
 80125f0:	080128d1 	.word	0x080128d1
 80125f4:	080128d1 	.word	0x080128d1
 80125f8:	080128d1 	.word	0x080128d1
 80125fc:	080128d1 	.word	0x080128d1
 8012600:	080128d1 	.word	0x080128d1
 8012604:	080128d1 	.word	0x080128d1
 8012608:	08012709 	.word	0x08012709
 801260c:	08012715 	.word	0x08012715
 8012610:	08012721 	.word	0x08012721
 8012614:	08012743 	.word	0x08012743
 8012618:	08012755 	.word	0x08012755
 801261c:	08012767 	.word	0x08012767
 8012620:	08012779 	.word	0x08012779
 8012624:	080127ad 	.word	0x080127ad
 8012628:	0801278b 	.word	0x0801278b
 801262c:	080127cf 	.word	0x080127cf
 8012630:	080127db 	.word	0x080127db
 8012634:	080127e5 	.word	0x080127e5
 8012638:	080127ef 	.word	0x080127ef
 801263c:	080127f9 	.word	0x080127f9
 8012640:	08012803 	.word	0x08012803
 8012644:	0801280d 	.word	0x0801280d
 8012648:	08012839 	.word	0x08012839
 801264c:	08012845 	.word	0x08012845
 8012650:	0801285d 	.word	0x0801285d
 8012654:	08012851 	.word	0x08012851
 8012658:	08012869 	.word	0x08012869
 801265c:	08012873 	.word	0x08012873
 8012660:	0801287f 	.word	0x0801287f
 8012664:	08012899 	.word	0x08012899
 8012668:	08012889 	.word	0x08012889
 801266c:	08012891 	.word	0x08012891
 8012670:	080128d1 	.word	0x080128d1
 8012674:	080128a5 	.word	0x080128a5
 8012678:	080128d1 	.word	0x080128d1
 801267c:	080128d1 	.word	0x080128d1
 8012680:	080128d1 	.word	0x080128d1
 8012684:	080128d1 	.word	0x080128d1
 8012688:	080128d1 	.word	0x080128d1
 801268c:	080128d1 	.word	0x080128d1
 8012690:	080128d1 	.word	0x080128d1
 8012694:	080128d1 	.word	0x080128d1
 8012698:	080128d1 	.word	0x080128d1
 801269c:	080128d1 	.word	0x080128d1
 80126a0:	080128d1 	.word	0x080128d1
 80126a4:	080128d1 	.word	0x080128d1
 80126a8:	080128d1 	.word	0x080128d1
 80126ac:	080128b9 	.word	0x080128b9
 80126b0:	080128c5 	.word	0x080128c5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80126b4:	4b8c      	ldr	r3, [pc, #560]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80126b6:	f893 2104 	ldrb.w	r2, [r3, #260]	; 0x104
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	711a      	strb	r2, [r3, #4]
            break;
 80126be:	e10d      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80126c0:	4b89      	ldr	r3, [pc, #548]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80126c2:	f893 211c 	ldrb.w	r2, [r3, #284]	; 0x11c
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	711a      	strb	r2, [r3, #4]
            break;
 80126ca:	e107      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 80126cc:	f7fa fc80 	bl	800cfd0 <SecureElementGetDevEui>
 80126d0:	4602      	mov	r2, r0
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	605a      	str	r2, [r3, #4]
            break;
 80126d6:	e101      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 80126d8:	f7fa fc9c 	bl	800d014 <SecureElementGetJoinEui>
 80126dc:	4602      	mov	r2, r0
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	605a      	str	r2, [r3, #4]
            break;
 80126e2:	e0fb      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80126e4:	4b80      	ldr	r3, [pc, #512]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80126e6:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	711a      	strb	r2, [r3, #4]
            break;
 80126ee:	e0f5      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80126f0:	4b7d      	ldr	r3, [pc, #500]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80126f2:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	605a      	str	r2, [r3, #4]
            break;
 80126fa:	e0ef      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80126fc:	4b7a      	ldr	r3, [pc, #488]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80126fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	605a      	str	r2, [r3, #4]
            break;
 8012706:	e0e9      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8012708:	4b77      	ldr	r3, [pc, #476]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801270a:	f893 2105 	ldrb.w	r2, [r3, #261]	; 0x105
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	711a      	strb	r2, [r3, #4]
            break;
 8012712:	e0e3      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012714:	4b74      	ldr	r3, [pc, #464]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012716:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	711a      	strb	r2, [r3, #4]
            break;
 801271e:	e0dd      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8012720:	231c      	movs	r3, #28
 8012722:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012724:	4b70      	ldr	r3, [pc, #448]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801272a:	f107 0210 	add.w	r2, r7, #16
 801272e:	4611      	mov	r1, r2
 8012730:	4618      	mov	r0, r3
 8012732:	f002 ff9d 	bl	8015670 <RegionGetPhyParam>
 8012736:	4603      	mov	r3, r0
 8012738:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801273a:	68fa      	ldr	r2, [r7, #12]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	605a      	str	r2, [r3, #4]
            break;
 8012740:	e0cc      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4a68      	ldr	r2, [pc, #416]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012746:	3304      	adds	r3, #4
 8012748:	3264      	adds	r2, #100	; 0x64
 801274a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801274e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012752:	e0c3      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	4a64      	ldr	r2, [pc, #400]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012758:	3304      	adds	r3, #4
 801275a:	32a8      	adds	r2, #168	; 0xa8
 801275c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012760:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012764:	e0ba      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	4a5f      	ldr	r2, [pc, #380]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801276a:	3304      	adds	r3, #4
 801276c:	326c      	adds	r2, #108	; 0x6c
 801276e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012772:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012776:	e0b1      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	4a5b      	ldr	r2, [pc, #364]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801277c:	3304      	adds	r3, #4
 801277e:	32b0      	adds	r2, #176	; 0xb0
 8012780:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012784:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012788:	e0a8      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801278a:	231a      	movs	r3, #26
 801278c:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801278e:	4b56      	ldr	r3, [pc, #344]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012794:	f107 0210 	add.w	r2, r7, #16
 8012798:	4611      	mov	r1, r2
 801279a:	4618      	mov	r0, r3
 801279c:	f002 ff68 	bl	8015670 <RegionGetPhyParam>
 80127a0:	4603      	mov	r3, r0
 80127a2:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80127a4:	68fa      	ldr	r2, [r7, #12]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	605a      	str	r2, [r3, #4]
            break;
 80127aa:	e097      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80127ac:	2319      	movs	r3, #25
 80127ae:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80127b0:	4b4d      	ldr	r3, [pc, #308]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80127b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80127b6:	f107 0210 	add.w	r2, r7, #16
 80127ba:	4611      	mov	r1, r2
 80127bc:	4618      	mov	r0, r3
 80127be:	f002 ff57 	bl	8015670 <RegionGetPhyParam>
 80127c2:	4603      	mov	r3, r0
 80127c4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80127c6:	68fa      	ldr	r2, [r7, #12]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	605a      	str	r2, [r3, #4]
            break;
 80127cc:	e086      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80127ce:	4b46      	ldr	r3, [pc, #280]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80127d0:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	711a      	strb	r2, [r3, #4]
            break;
 80127d8:	e080      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80127da:	4b43      	ldr	r3, [pc, #268]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80127dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	605a      	str	r2, [r3, #4]
            break;
 80127e2:	e07b      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80127e4:	4b40      	ldr	r3, [pc, #256]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80127e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	605a      	str	r2, [r3, #4]
            break;
 80127ec:	e076      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80127ee:	4b3e      	ldr	r3, [pc, #248]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80127f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	605a      	str	r2, [r3, #4]
            break;
 80127f6:	e071      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80127f8:	4b3b      	ldr	r3, [pc, #236]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80127fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	605a      	str	r2, [r3, #4]
            break;
 8012800:	e06c      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8012802:	4b39      	ldr	r3, [pc, #228]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012804:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	605a      	str	r2, [r3, #4]
            break;
 801280a:	e067      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 801280c:	2302      	movs	r3, #2
 801280e:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012810:	4b35      	ldr	r3, [pc, #212]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012812:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012816:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012818:	4b33      	ldr	r3, [pc, #204]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801281a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801281e:	f107 0210 	add.w	r2, r7, #16
 8012822:	4611      	mov	r1, r2
 8012824:	4618      	mov	r0, r3
 8012826:	f002 ff23 	bl	8015670 <RegionGetPhyParam>
 801282a:	4603      	mov	r3, r0
 801282c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	b25a      	sxtb	r2, r3
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	711a      	strb	r2, [r3, #4]
            break;
 8012836:	e051      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8012838:	4b2b      	ldr	r3, [pc, #172]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801283a:	f993 20cd 	ldrsb.w	r2, [r3, #205]	; 0xcd
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	711a      	strb	r2, [r3, #4]
            break;
 8012842:	e04b      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012844:	4b28      	ldr	r3, [pc, #160]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012846:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	711a      	strb	r2, [r3, #4]
            break;
 801284e:	e045      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8012850:	4b25      	ldr	r3, [pc, #148]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012852:	f993 20cc 	ldrsb.w	r2, [r3, #204]	; 0xcc
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	711a      	strb	r2, [r3, #4]
            break;
 801285a:	e03f      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801285c:	4b22      	ldr	r3, [pc, #136]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801285e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	711a      	strb	r2, [r3, #4]
            break;
 8012866:	e039      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8012868:	4b1f      	ldr	r3, [pc, #124]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801286a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	605a      	str	r2, [r3, #4]
            break;
 8012870:	e034      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8012872:	4b1d      	ldr	r3, [pc, #116]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012874:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	711a      	strb	r2, [r3, #4]
            break;
 801287c:	e02e      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801287e:	4b1a      	ldr	r3, [pc, #104]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 8012880:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	605a      	str	r2, [r3, #4]
            break;
 8012886:	e029      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	4a17      	ldr	r2, [pc, #92]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801288c:	605a      	str	r2, [r3, #4]
            break;
 801288e:	e025      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	4a16      	ldr	r2, [pc, #88]	; (80128ec <LoRaMacMibGetRequestConfirm+0x348>)
 8012894:	605a      	str	r2, [r3, #4]
            break;
 8012896:	e021      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8012898:	4b13      	ldr	r3, [pc, #76]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 801289a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	605a      	str	r2, [r3, #4]
            break;
 80128a2:	e01b      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	4a10      	ldr	r2, [pc, #64]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80128a8:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 80128ac:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80128ae:	687c      	ldr	r4, [r7, #4]
 80128b0:	f003 f854 	bl	801595c <RegionGetVersion>
 80128b4:	60a0      	str	r0, [r4, #8]
            break;
 80128b6:	e011      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80128b8:	4b0b      	ldr	r3, [pc, #44]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80128ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	605a      	str	r2, [r3, #4]
            break;
 80128c2:	e00b      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 80128c4:	4b08      	ldr	r3, [pc, #32]	; (80128e8 <LoRaMacMibGetRequestConfirm+0x344>)
 80128c6:	f893 210b 	ldrb.w	r2, [r3, #267]	; 0x10b
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	711a      	strb	r2, [r3, #4]
            break;
 80128ce:	e005      	b.n	80128dc <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 ffca 	bl	801386a <LoRaMacClassBMibGetRequestConfirm>
 80128d6:	4603      	mov	r3, r0
 80128d8:	75fb      	strb	r3, [r7, #23]
            break;
 80128da:	bf00      	nop
        }
    }
    return status;
 80128dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	371c      	adds	r7, #28
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd90      	pop	{r4, r7, pc}
 80128e6:	bf00      	nop
 80128e8:	20000d4c 	.word	0x20000d4c
 80128ec:	200012c8 	.word	0x200012c8

080128f0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b086      	sub	sp, #24
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80128f8:	2300      	movs	r3, #0
 80128fa:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d101      	bne.n	8012906 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012902:	2303      	movs	r3, #3
 8012904:	e35c      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8012906:	4bb9      	ldr	r3, [pc, #740]	; (8012bec <LoRaMacMibSetRequestConfirm+0x2fc>)
 8012908:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801290c:	f003 0302 	and.w	r3, r3, #2
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8012914:	2301      	movs	r3, #1
 8012916:	e353      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	2b39      	cmp	r3, #57	; 0x39
 801291e:	f200 8323 	bhi.w	8012f68 <LoRaMacMibSetRequestConfirm+0x678>
 8012922:	a201      	add	r2, pc, #4	; (adr r2, 8012928 <LoRaMacMibSetRequestConfirm+0x38>)
 8012924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012928:	08012a11 	.word	0x08012a11
 801292c:	08012a21 	.word	0x08012a21
 8012930:	08012a3b 	.word	0x08012a3b
 8012934:	08012a53 	.word	0x08012a53
 8012938:	08012a6b 	.word	0x08012a6b
 801293c:	08012a77 	.word	0x08012a77
 8012940:	08012a83 	.word	0x08012a83
 8012944:	08012a8f 	.word	0x08012a8f
 8012948:	08012ab5 	.word	0x08012ab5
 801294c:	08012adb 	.word	0x08012adb
 8012950:	08012b01 	.word	0x08012b01
 8012954:	08012b27 	.word	0x08012b27
 8012958:	08012b4d 	.word	0x08012b4d
 801295c:	08012b73 	.word	0x08012b73
 8012960:	08012b99 	.word	0x08012b99
 8012964:	08012bbf 	.word	0x08012bbf
 8012968:	08012bdf 	.word	0x08012bdf
 801296c:	08012f69 	.word	0x08012f69
 8012970:	08012bf9 	.word	0x08012bf9
 8012974:	08012c69 	.word	0x08012c69
 8012978:	08012ca9 	.word	0x08012ca9
 801297c:	08012d0b 	.word	0x08012d0b
 8012980:	08012d7b 	.word	0x08012d7b
 8012984:	08012d4b 	.word	0x08012d4b
 8012988:	08012dab 	.word	0x08012dab
 801298c:	08012dcd 	.word	0x08012dcd
 8012990:	08012dd7 	.word	0x08012dd7
 8012994:	08012de1 	.word	0x08012de1
 8012998:	08012deb 	.word	0x08012deb
 801299c:	08012df5 	.word	0x08012df5
 80129a0:	08012f69 	.word	0x08012f69
 80129a4:	08012dff 	.word	0x08012dff
 80129a8:	08012e31 	.word	0x08012e31
 80129ac:	08012e9d 	.word	0x08012e9d
 80129b0:	08012e6b 	.word	0x08012e6b
 80129b4:	08012ed9 	.word	0x08012ed9
 80129b8:	08012eef 	.word	0x08012eef
 80129bc:	08012f07 	.word	0x08012f07
 80129c0:	08012f11 	.word	0x08012f11
 80129c4:	08012f1d 	.word	0x08012f1d
 80129c8:	08012f69 	.word	0x08012f69
 80129cc:	08012f27 	.word	0x08012f27
 80129d0:	08012f69 	.word	0x08012f69
 80129d4:	08012f69 	.word	0x08012f69
 80129d8:	08012f69 	.word	0x08012f69
 80129dc:	08012f69 	.word	0x08012f69
 80129e0:	08012f69 	.word	0x08012f69
 80129e4:	08012f69 	.word	0x08012f69
 80129e8:	08012f69 	.word	0x08012f69
 80129ec:	08012f69 	.word	0x08012f69
 80129f0:	08012f69 	.word	0x08012f69
 80129f4:	08012f69 	.word	0x08012f69
 80129f8:	08012f69 	.word	0x08012f69
 80129fc:	08012f69 	.word	0x08012f69
 8012a00:	08012f69 	.word	0x08012f69
 8012a04:	08012f69 	.word	0x08012f69
 8012a08:	08012f51 	.word	0x08012f51
 8012a0c:	08012f5d 	.word	0x08012f5d
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	791b      	ldrb	r3, [r3, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fd fb81 	bl	801011c <SwitchClass>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	75fb      	strb	r3, [r7, #23]
            break;
 8012a1e:	e2c4      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	791b      	ldrb	r3, [r3, #4]
 8012a24:	2b02      	cmp	r3, #2
 8012a26:	d005      	beq.n	8012a34 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	791a      	ldrb	r2, [r3, #4]
 8012a2c:	4b70      	ldr	r3, [pc, #448]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012a2e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012a32:	e2ba      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a34:	2303      	movs	r3, #3
 8012a36:	75fb      	strb	r3, [r7, #23]
            break;
 8012a38:	e2b7      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7fa faae 	bl	800cfa0 <SecureElementSetDevEui>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	f000 8294 	beq.w	8012f74 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a4c:	2303      	movs	r3, #3
 8012a4e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012a50:	e290      	b.n	8012f74 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fa fac4 	bl	800cfe4 <SecureElementSetJoinEui>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f000 828a 	beq.w	8012f78 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a64:	2303      	movs	r3, #3
 8012a66:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012a68:	e286      	b.n	8012f78 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	791a      	ldrb	r2, [r3, #4]
 8012a6e:	4b60      	ldr	r3, [pc, #384]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012a70:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
            break;
 8012a74:	e299      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	4a5d      	ldr	r2, [pc, #372]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012a7c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            break;
 8012a80:	e293      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	4a5a      	ldr	r2, [pc, #360]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012a88:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
            break;
 8012a8c:	e28d      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d00b      	beq.n	8012aae <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	2000      	movs	r0, #0
 8012a9e:	f001 fffd 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f000 8269 	beq.w	8012f7c <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012aaa:	2311      	movs	r3, #17
 8012aac:	e288      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012aae:	2303      	movs	r3, #3
 8012ab0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012ab2:	e263      	b.n	8012f7c <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	685b      	ldr	r3, [r3, #4]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00b      	beq.n	8012ad4 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	4619      	mov	r1, r3
 8012ac2:	2001      	movs	r0, #1
 8012ac4:	f001 ffea 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f000 8258 	beq.w	8012f80 <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012ad0:	2311      	movs	r3, #17
 8012ad2:	e275      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ad4:	2303      	movs	r3, #3
 8012ad6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012ad8:	e252      	b.n	8012f80 <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d00b      	beq.n	8012afa <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	2002      	movs	r0, #2
 8012aea:	f001 ffd7 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012aee:	4603      	mov	r3, r0
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f000 8247 	beq.w	8012f84 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012af6:	2311      	movs	r3, #17
 8012af8:	e262      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012afa:	2303      	movs	r3, #3
 8012afc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012afe:	e241      	b.n	8012f84 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00b      	beq.n	8012b20 <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	2003      	movs	r0, #3
 8012b10:	f001 ffc4 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012b14:	4603      	mov	r3, r0
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	f000 8236 	beq.w	8012f88 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b1c:	2311      	movs	r3, #17
 8012b1e:	e24f      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b20:	2303      	movs	r3, #3
 8012b22:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b24:	e230      	b.n	8012f88 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00b      	beq.n	8012b46 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	4619      	mov	r1, r3
 8012b34:	207f      	movs	r0, #127	; 0x7f
 8012b36:	f001 ffb1 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012b3a:	4603      	mov	r3, r0
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 8225 	beq.w	8012f8c <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b42:	2311      	movs	r3, #17
 8012b44:	e23c      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b46:	2303      	movs	r3, #3
 8012b48:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b4a:	e21f      	b.n	8012f8c <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d00b      	beq.n	8012b6c <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	4619      	mov	r1, r3
 8012b5a:	2080      	movs	r0, #128	; 0x80
 8012b5c:	f001 ff9e 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 8214 	beq.w	8012f90 <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b68:	2311      	movs	r3, #17
 8012b6a:	e229      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b6c:	2303      	movs	r3, #3
 8012b6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b70:	e20e      	b.n	8012f90 <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	685b      	ldr	r3, [r3, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d00b      	beq.n	8012b92 <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	4619      	mov	r1, r3
 8012b80:	2081      	movs	r0, #129	; 0x81
 8012b82:	f001 ff8b 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 8203 	beq.w	8012f94 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012b8e:	2311      	movs	r3, #17
 8012b90:	e216      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012b92:	2303      	movs	r3, #3
 8012b94:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012b96:	e1fd      	b.n	8012f94 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d00b      	beq.n	8012bb8 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	2082      	movs	r0, #130	; 0x82
 8012ba8:	f001 ff78 	bl	8014a9c <LoRaMacCryptoSetKey>
 8012bac:	4603      	mov	r3, r0
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	f000 81f2 	beq.w	8012f98 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012bb4:	2311      	movs	r3, #17
 8012bb6:	e203      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012bb8:	2303      	movs	r3, #3
 8012bba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012bbc:	e1ec      	b.n	8012f98 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	791a      	ldrb	r2, [r3, #4]
 8012bc2:	4b0b      	ldr	r3, [pc, #44]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012bc4:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8012bc8:	4b0a      	ldr	r3, [pc, #40]	; (8012bf4 <LoRaMacMibSetRequestConfirm+0x304>)
 8012bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012bcc:	4a08      	ldr	r2, [pc, #32]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012bce:	f892 2105 	ldrb.w	r2, [r2, #261]	; 0x105
 8012bd2:	4610      	mov	r0, r2
 8012bd4:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8012bd6:	4b07      	ldr	r3, [pc, #28]	; (8012bf4 <LoRaMacMibSetRequestConfirm+0x304>)
 8012bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bda:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8012bdc:	e1e5      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	791a      	ldrb	r2, [r3, #4]
 8012be2:	4b03      	ldr	r3, [pc, #12]	; (8012bf0 <LoRaMacMibSetRequestConfirm+0x300>)
 8012be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            break;
 8012be8:	e1df      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
 8012bea:	bf00      	nop
 8012bec:	2000082c 	.word	0x2000082c
 8012bf0:	20000d4c 	.word	0x20000d4c
 8012bf4:	0801d538 	.word	0x0801d538
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	7a1b      	ldrb	r3, [r3, #8]
 8012bfc:	b25b      	sxtb	r3, r3
 8012bfe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012c00:	4bb3      	ldr	r3, [pc, #716]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c02:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012c06:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8012c08:	4bb1      	ldr	r3, [pc, #708]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c0e:	f107 0108 	add.w	r1, r7, #8
 8012c12:	2207      	movs	r2, #7
 8012c14:	4618      	mov	r0, r3
 8012c16:	f002 fd66 	bl	80156e6 <RegionVerify>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	f083 0301 	eor.w	r3, r3, #1
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c26:	2303      	movs	r3, #3
 8012c28:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8012c2a:	e1be      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	685b      	ldr	r3, [r3, #4]
 8012c30:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8012c32:	4ba7      	ldr	r3, [pc, #668]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c38:	f107 0108 	add.w	r1, r7, #8
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f002 fd51 	bl	80156e6 <RegionVerify>
 8012c44:	4603      	mov	r3, r0
 8012c46:	f083 0301 	eor.w	r3, r3, #1
 8012c4a:	b2db      	uxtb	r3, r3
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d002      	beq.n	8012c56 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012c50:	2303      	movs	r3, #3
 8012c52:	75fb      	strb	r3, [r7, #23]
            break;
 8012c54:	e1a9      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8012c56:	4b9e      	ldr	r3, [pc, #632]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c58:	687a      	ldr	r2, [r7, #4]
 8012c5a:	3364      	adds	r3, #100	; 0x64
 8012c5c:	3204      	adds	r2, #4
 8012c5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c62:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8012c66:	e1a0      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7a1b      	ldrb	r3, [r3, #8]
 8012c6c:	b25b      	sxtb	r3, r3
 8012c6e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012c70:	4b97      	ldr	r3, [pc, #604]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c72:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012c76:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012c78:	4b95      	ldr	r3, [pc, #596]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012c7e:	f107 0108 	add.w	r1, r7, #8
 8012c82:	2207      	movs	r2, #7
 8012c84:	4618      	mov	r0, r3
 8012c86:	f002 fd2e 	bl	80156e6 <RegionVerify>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d008      	beq.n	8012ca2 <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012c90:	4b8f      	ldr	r3, [pc, #572]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	33a8      	adds	r3, #168	; 0xa8
 8012c96:	3204      	adds	r2, #4
 8012c98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012c9c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ca0:	e183      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ca2:	2303      	movs	r3, #3
 8012ca4:	75fb      	strb	r3, [r7, #23]
            break;
 8012ca6:	e180      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	7a1b      	ldrb	r3, [r3, #8]
 8012cac:	b25b      	sxtb	r3, r3
 8012cae:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012cb0:	4b87      	ldr	r3, [pc, #540]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012cb2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012cb6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012cb8:	4b85      	ldr	r3, [pc, #532]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012cbe:	f107 0108 	add.w	r1, r7, #8
 8012cc2:	2207      	movs	r2, #7
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f002 fd0e 	bl	80156e6 <RegionVerify>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d019      	beq.n	8012d04 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8012cd0:	4b7f      	ldr	r3, [pc, #508]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012cd2:	687a      	ldr	r2, [r7, #4]
 8012cd4:	336c      	adds	r3, #108	; 0x6c
 8012cd6:	3204      	adds	r2, #4
 8012cd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012cdc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8012ce0:	4b7b      	ldr	r3, [pc, #492]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ce2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	f040 8158 	bne.w	8012f9c <LoRaMacMibSetRequestConfirm+0x6ac>
 8012cec:	4b78      	ldr	r3, [pc, #480]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012cee:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	f000 8152 	beq.w	8012f9c <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8012cf8:	4b76      	ldr	r3, [pc, #472]	; (8012ed4 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8012cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfc:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8012cfe:	f7fe fca5 	bl	801164c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012d02:	e14b      	b.n	8012f9c <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d04:	2303      	movs	r3, #3
 8012d06:	75fb      	strb	r3, [r7, #23]
            break;
 8012d08:	e148      	b.n	8012f9c <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	7a1b      	ldrb	r3, [r3, #8]
 8012d0e:	b25b      	sxtb	r3, r3
 8012d10:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012d12:	4b6f      	ldr	r3, [pc, #444]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012d14:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8012d18:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8012d1a:	4b6d      	ldr	r3, [pc, #436]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d20:	f107 0108 	add.w	r1, r7, #8
 8012d24:	2207      	movs	r2, #7
 8012d26:	4618      	mov	r0, r3
 8012d28:	f002 fcdd 	bl	80156e6 <RegionVerify>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d008      	beq.n	8012d44 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012d32:	4b67      	ldr	r3, [pc, #412]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012d34:	687a      	ldr	r2, [r7, #4]
 8012d36:	33b0      	adds	r3, #176	; 0xb0
 8012d38:	3204      	adds	r2, #4
 8012d3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d3e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012d42:	e132      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d44:	2303      	movs	r3, #3
 8012d46:	75fb      	strb	r3, [r7, #23]
            break;
 8012d48:	e12f      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8012d50:	2301      	movs	r3, #1
 8012d52:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012d54:	4b5e      	ldr	r3, [pc, #376]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d5a:	f107 020c 	add.w	r2, r7, #12
 8012d5e:	4611      	mov	r1, r2
 8012d60:	4618      	mov	r0, r3
 8012d62:	f002 fce9 	bl	8015738 <RegionChanMaskSet>
 8012d66:	4603      	mov	r3, r0
 8012d68:	f083 0301 	eor.w	r3, r3, #1
 8012d6c:	b2db      	uxtb	r3, r3
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	f000 8116 	beq.w	8012fa0 <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012d74:	2303      	movs	r3, #3
 8012d76:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012d78:	e112      	b.n	8012fa0 <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	685b      	ldr	r3, [r3, #4]
 8012d7e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8012d80:	2300      	movs	r3, #0
 8012d82:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8012d84:	4b52      	ldr	r3, [pc, #328]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012d8a:	f107 020c 	add.w	r2, r7, #12
 8012d8e:	4611      	mov	r1, r2
 8012d90:	4618      	mov	r0, r3
 8012d92:	f002 fcd1 	bl	8015738 <RegionChanMaskSet>
 8012d96:	4603      	mov	r3, r0
 8012d98:	f083 0301 	eor.w	r3, r3, #1
 8012d9c:	b2db      	uxtb	r3, r3
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	f000 8100 	beq.w	8012fa4 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012da4:	2303      	movs	r3, #3
 8012da6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012da8:	e0fc      	b.n	8012fa4 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	791b      	ldrb	r3, [r3, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d009      	beq.n	8012dc6 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8012db6:	2b0f      	cmp	r3, #15
 8012db8:	d805      	bhi.n	8012dc6 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	791a      	ldrb	r2, [r3, #4]
 8012dbe:	4b44      	ldr	r3, [pc, #272]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012dc0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012dc4:	e0f1      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012dc6:	2303      	movs	r3, #3
 8012dc8:	75fb      	strb	r3, [r7, #23]
            break;
 8012dca:	e0ee      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	4a3f      	ldr	r2, [pc, #252]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8012dd4:	e0e9      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	685b      	ldr	r3, [r3, #4]
 8012dda:	4a3d      	ldr	r2, [pc, #244]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ddc:	6513      	str	r3, [r2, #80]	; 0x50
            break;
 8012dde:	e0e4      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	4a3a      	ldr	r2, [pc, #232]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012de6:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8012de8:	e0df      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	4a38      	ldr	r2, [pc, #224]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012df0:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8012df2:	e0da      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	4a35      	ldr	r2, [pc, #212]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012dfa:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8012dfc:	e0d5      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012e04:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8012e06:	4b32      	ldr	r3, [pc, #200]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e0c:	f107 0108 	add.w	r1, r7, #8
 8012e10:	2206      	movs	r2, #6
 8012e12:	4618      	mov	r0, r3
 8012e14:	f002 fc67 	bl	80156e6 <RegionVerify>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d005      	beq.n	8012e2a <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8012e1e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012e22:	4b2b      	ldr	r3, [pc, #172]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e24:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012e28:	e0bf      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e2a:	2303      	movs	r3, #3
 8012e2c:	75fb      	strb	r3, [r7, #23]
            break;
 8012e2e:	e0bc      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012e36:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012e38:	4b25      	ldr	r3, [pc, #148]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e3a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8012e3e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012e40:	4b23      	ldr	r3, [pc, #140]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e46:	f107 0108 	add.w	r1, r7, #8
 8012e4a:	2205      	movs	r2, #5
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f002 fc4a 	bl	80156e6 <RegionVerify>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d005      	beq.n	8012e64 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012e58:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012e5c:	4b1c      	ldr	r3, [pc, #112]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012e62:	e0a2      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e64:	2303      	movs	r3, #3
 8012e66:	75fb      	strb	r3, [r7, #23]
            break;
 8012e68:	e09f      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012e70:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012e72:	4b17      	ldr	r3, [pc, #92]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012e78:	f107 0108 	add.w	r1, r7, #8
 8012e7c:	220a      	movs	r2, #10
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f002 fc31 	bl	80156e6 <RegionVerify>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d005      	beq.n	8012e96 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8012e8a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012e8e:	4b10      	ldr	r3, [pc, #64]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012e90:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012e94:	e089      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e96:	2303      	movs	r3, #3
 8012e98:	75fb      	strb	r3, [r7, #23]
            break;
 8012e9a:	e086      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012ea2:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8012ea4:	4b0a      	ldr	r3, [pc, #40]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012eaa:	f107 0108 	add.w	r1, r7, #8
 8012eae:	2209      	movs	r2, #9
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f002 fc18 	bl	80156e6 <RegionVerify>
 8012eb6:	4603      	mov	r3, r0
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d005      	beq.n	8012ec8 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8012ebc:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8012ec0:	4b03      	ldr	r3, [pc, #12]	; (8012ed0 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8012ec2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012ec6:	e070      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012ec8:	2303      	movs	r3, #3
 8012eca:	75fb      	strb	r3, [r7, #23]
            break;
 8012ecc:	e06d      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
 8012ece:	bf00      	nop
 8012ed0:	20000d4c 	.word	0x20000d4c
 8012ed4:	0801d538 	.word	0x0801d538
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	4a3a      	ldr	r2, [pc, #232]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012ede:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8012ee2:	4b39      	ldr	r3, [pc, #228]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ee8:	4a37      	ldr	r2, [pc, #220]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012eea:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 8012eec:	e05d      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	791a      	ldrb	r2, [r3, #4]
 8012ef2:	4b35      	ldr	r3, [pc, #212]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012ef4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8012ef8:	4b33      	ldr	r3, [pc, #204]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012efa:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012efe:	4b32      	ldr	r3, [pc, #200]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            break;
 8012f04:	e051      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	4a2f      	ldr	r2, [pc, #188]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012f0c:	67d3      	str	r3, [r2, #124]	; 0x7c
            break;
 8012f0e:	e04c      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	685b      	ldr	r3, [r3, #4]
 8012f14:	4a2c      	ldr	r2, [pc, #176]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012f16:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
            break;
 8012f1a:	e046      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8012f1c:	f7fe fdc8 	bl	8011ab0 <RestoreNvmData>
 8012f20:	4603      	mov	r3, r0
 8012f22:	75fb      	strb	r3, [r7, #23]
            break;
 8012f24:	e041      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	799b      	ldrb	r3, [r3, #6]
 8012f2a:	2b01      	cmp	r3, #1
 8012f2c:	d80d      	bhi.n	8012f4a <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8012f2e:	4a26      	ldr	r2, [pc, #152]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6858      	ldr	r0, [r3, #4]
 8012f3c:	f001 fd12 	bl	8014964 <LoRaMacCryptoSetLrWanVersion>
 8012f40:	4603      	mov	r3, r0
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d030      	beq.n	8012fa8 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012f46:	2311      	movs	r3, #17
 8012f48:	e03a      	b.n	8012fc0 <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012f4a:	2303      	movs	r3, #3
 8012f4c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8012f4e:	e02b      	b.n	8012fa8 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	4a1c      	ldr	r2, [pc, #112]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012f56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8012f5a:	e026      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	791a      	ldrb	r2, [r3, #4]
 8012f60:	4b19      	ldr	r3, [pc, #100]	; (8012fc8 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8012f62:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
            break;
 8012f66:	e020      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f000 fc88 	bl	801387e <LoRaMacMibClassBSetRequestConfirm>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	75fb      	strb	r3, [r7, #23]
            break;
 8012f72:	e01a      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f74:	bf00      	nop
 8012f76:	e018      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f78:	bf00      	nop
 8012f7a:	e016      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f7c:	bf00      	nop
 8012f7e:	e014      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f80:	bf00      	nop
 8012f82:	e012      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f84:	bf00      	nop
 8012f86:	e010      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f88:	bf00      	nop
 8012f8a:	e00e      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f8c:	bf00      	nop
 8012f8e:	e00c      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f90:	bf00      	nop
 8012f92:	e00a      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f94:	bf00      	nop
 8012f96:	e008      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f98:	bf00      	nop
 8012f9a:	e006      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012f9c:	bf00      	nop
 8012f9e:	e004      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012fa0:	bf00      	nop
 8012fa2:	e002      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012fa4:	bf00      	nop
 8012fa6:	e000      	b.n	8012faa <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8012fa8:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8012faa:	7dfb      	ldrb	r3, [r7, #23]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d106      	bne.n	8012fbe <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8012fb0:	4a06      	ldr	r2, [pc, #24]	; (8012fcc <LoRaMacMibSetRequestConfirm+0x6dc>)
 8012fb2:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8012fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fba:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8012fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3718      	adds	r7, #24
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	20000d4c 	.word	0x20000d4c
 8012fcc:	2000082c 	.word	0x2000082c

08012fd0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b08a      	sub	sp, #40	; 0x28
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012fd8:	2302      	movs	r3, #2
 8012fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012fde:	2300      	movs	r3, #0
 8012fe0:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d101      	bne.n	8012fec <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012fe8:	2303      	movs	r3, #3
 8012fea:	e16c      	b.n	80132c6 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2200      	movs	r2, #0
 8012ff0:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8012ff2:	f7fc fc6b 	bl	800f8cc <LoRaMacIsBusy>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d001      	beq.n	8013000 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	e162      	b.n	80132c6 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8013000:	f001 f954 	bl	80142ac <LoRaMacConfirmQueueIsFull>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d001      	beq.n	801300e <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 801300a:	2301      	movs	r3, #1
 801300c:	e15b      	b.n	80132c6 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801300e:	f001 f941 	bl	8014294 <LoRaMacConfirmQueueGetCnt>
 8013012:	4603      	mov	r3, r0
 8013014:	2b00      	cmp	r3, #0
 8013016:	d104      	bne.n	8013022 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8013018:	2214      	movs	r2, #20
 801301a:	2100      	movs	r1, #0
 801301c:	48ac      	ldr	r0, [pc, #688]	; (80132d0 <LoRaMacMlmeRequest+0x300>)
 801301e:	f004 fe0f 	bl	8017c40 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013022:	4bac      	ldr	r3, [pc, #688]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 8013024:	2201      	movs	r2, #1
 8013026:	f883 2459 	strb.w	r2, [r3, #1113]	; 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801302a:	4aaa      	ldr	r2, [pc, #680]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 801302c:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013030:	f043 0304 	orr.w	r3, r3, #4
 8013034:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
    queueElement.Request = mlmeRequest->Type;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	781b      	ldrb	r3, [r3, #0]
 801303c:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013040:	2301      	movs	r3, #1
 8013042:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8013046:	2300      	movs	r3, #0
 8013048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 801304c:	2300      	movs	r3, #0
 801304e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	3b01      	subs	r3, #1
 8013058:	2b0c      	cmp	r3, #12
 801305a:	f200 8108 	bhi.w	801326e <LoRaMacMlmeRequest+0x29e>
 801305e:	a201      	add	r2, pc, #4	; (adr r2, 8013064 <LoRaMacMlmeRequest+0x94>)
 8013060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013064:	08013099 	.word	0x08013099
 8013068:	0801326f 	.word	0x0801326f
 801306c:	0801326f 	.word	0x0801326f
 8013070:	0801316f 	.word	0x0801316f
 8013074:	08013191 	.word	0x08013191
 8013078:	0801326f 	.word	0x0801326f
 801307c:	0801326f 	.word	0x0801326f
 8013080:	0801326f 	.word	0x0801326f
 8013084:	080131af 	.word	0x080131af
 8013088:	0801326f 	.word	0x0801326f
 801308c:	0801323d 	.word	0x0801323d
 8013090:	080131d1 	.word	0x080131d1
 8013094:	0801321b 	.word	0x0801321b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8013098:	4b8e      	ldr	r3, [pc, #568]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 801309a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801309e:	f003 0320 	and.w	r3, r3, #32
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d001      	beq.n	80130aa <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 80130a6:	2301      	movs	r3, #1
 80130a8:	e10d      	b.n	80132c6 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	791b      	ldrb	r3, [r3, #4]
 80130ae:	2b02      	cmp	r3, #2
 80130b0:	d12e      	bne.n	8013110 <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 80130b2:	f7fe f995 	bl	80113e0 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80130b6:	4b88      	ldr	r3, [pc, #544]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 80130b8:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	795b      	ldrb	r3, [r3, #5]
 80130c0:	b25b      	sxtb	r3, r3
 80130c2:	2200      	movs	r2, #0
 80130c4:	4619      	mov	r1, r3
 80130c6:	f002 fbf6 	bl	80158b6 <RegionAlternateDr>
 80130ca:	4603      	mov	r3, r0
 80130cc:	461a      	mov	r2, r3
 80130ce:	4b82      	ldr	r3, [pc, #520]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 80130d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80130d4:	2307      	movs	r3, #7
 80130d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

                status = SendReJoinReq( JOIN_REQ );
 80130da:	20ff      	movs	r0, #255	; 0xff
 80130dc:	f7fd fefe 	bl	8010edc <SendReJoinReq>
 80130e0:	4603      	mov	r3, r0
 80130e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

                if( status != LORAMAC_STATUS_OK )
 80130e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	f000 80c1 	beq.w	8013272 <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80130f0:	4b79      	ldr	r3, [pc, #484]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 80130f2:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	795b      	ldrb	r3, [r3, #5]
 80130fa:	b25b      	sxtb	r3, r3
 80130fc:	2201      	movs	r2, #1
 80130fe:	4619      	mov	r1, r3
 8013100:	f002 fbd9 	bl	80158b6 <RegionAlternateDr>
 8013104:	4603      	mov	r3, r0
 8013106:	461a      	mov	r2, r3
 8013108:	4b73      	ldr	r3, [pc, #460]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 801310a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801310e:	e0b0      	b.n	8013272 <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	791b      	ldrb	r3, [r3, #4]
 8013114:	2b01      	cmp	r3, #1
 8013116:	f040 80ac 	bne.w	8013272 <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801311a:	4b6f      	ldr	r3, [pc, #444]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 801311c:	2200      	movs	r2, #0
 801311e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013122:	2302      	movs	r3, #2
 8013124:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013126:	4b6c      	ldr	r3, [pc, #432]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 8013128:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801312c:	f107 020c 	add.w	r2, r7, #12
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f002 fac5 	bl	80156c2 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	791a      	ldrb	r2, [r3, #4]
 801313c:	4b66      	ldr	r3, [pc, #408]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 801313e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8013142:	2300      	movs	r3, #0
 8013144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                queueElement.ReadyToHandle = true;
 8013148:	2301      	movs	r3, #1
 801314a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 801314e:	4b61      	ldr	r3, [pc, #388]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 8013150:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013154:	691b      	ldr	r3, [r3, #16]
 8013156:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8013158:	4a5e      	ldr	r2, [pc, #376]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 801315a:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 801315e:	f043 0320 	orr.w	r3, r3, #32
 8013162:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
                status = LORAMAC_STATUS_OK;
 8013166:	2300      	movs	r3, #0
 8013168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801316c:	e081      	b.n	8013272 <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801316e:	2300      	movs	r3, #0
 8013170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013174:	f107 031c 	add.w	r3, r7, #28
 8013178:	2200      	movs	r2, #0
 801317a:	4619      	mov	r1, r3
 801317c:	2002      	movs	r0, #2
 801317e:	f000 fcfb 	bl	8013b78 <LoRaMacCommandsAddCmd>
 8013182:	4603      	mov	r3, r0
 8013184:	2b00      	cmp	r3, #0
 8013186:	d076      	beq.n	8013276 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013188:	2313      	movs	r3, #19
 801318a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801318e:	e072      	b.n	8013276 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	8898      	ldrh	r0, [r3, #4]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6899      	ldr	r1, [r3, #8]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	461a      	mov	r2, r3
 80131a2:	f7fe fc65 	bl	8011a70 <SetTxContinuousWave>
 80131a6:	4603      	mov	r3, r0
 80131a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 80131ac:	e06a      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80131ae:	2300      	movs	r3, #0
 80131b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80131b4:	f107 031c 	add.w	r3, r7, #28
 80131b8:	2200      	movs	r2, #0
 80131ba:	4619      	mov	r1, r3
 80131bc:	200d      	movs	r0, #13
 80131be:	f000 fcdb 	bl	8013b78 <LoRaMacCommandsAddCmd>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d058      	beq.n	801327a <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80131c8:	2313      	movs	r3, #19
 80131ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 80131ce:	e054      	b.n	801327a <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80131d0:	4b41      	ldr	r3, [pc, #260]	; (80132d8 <LoRaMacMlmeRequest+0x308>)
 80131d2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d151      	bne.n	801327e <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	791b      	ldrb	r3, [r3, #4]
 80131de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	791b      	ldrb	r3, [r3, #4]
 80131e6:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	4618      	mov	r0, r3
 80131ee:	f000 fb1b 	bl	8013828 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80131f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80131f6:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 80131f8:	2300      	movs	r3, #0
 80131fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80131fe:	f107 031c 	add.w	r3, r7, #28
 8013202:	2201      	movs	r2, #1
 8013204:	4619      	mov	r1, r3
 8013206:	2010      	movs	r0, #16
 8013208:	f000 fcb6 	bl	8013b78 <LoRaMacCommandsAddCmd>
 801320c:	4603      	mov	r3, r0
 801320e:	2b00      	cmp	r3, #0
 8013210:	d035      	beq.n	801327e <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013212:	2313      	movs	r3, #19
 8013214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
            }
            break;
 8013218:	e031      	b.n	801327e <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801321a:	2300      	movs	r3, #0
 801321c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8013220:	f107 031c 	add.w	r3, r7, #28
 8013224:	2200      	movs	r2, #0
 8013226:	4619      	mov	r1, r3
 8013228:	2012      	movs	r0, #18
 801322a:	f000 fca5 	bl	8013b78 <LoRaMacCommandsAddCmd>
 801322e:	4603      	mov	r3, r0
 8013230:	2b00      	cmp	r3, #0
 8013232:	d026      	beq.n	8013282 <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013234:	2313      	movs	r3, #19
 8013236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 801323a:	e022      	b.n	8013282 <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801323c:	2301      	movs	r3, #1
 801323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8013242:	f000 faa7 	bl	8013794 <LoRaMacClassBIsAcquisitionInProgress>
 8013246:	4603      	mov	r3, r0
 8013248:	f083 0301 	eor.w	r3, r3, #1
 801324c:	b2db      	uxtb	r3, r3
 801324e:	2b00      	cmp	r3, #0
 8013250:	d009      	beq.n	8013266 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8013252:	2000      	movs	r0, #0
 8013254:	f000 fa80 	bl	8013758 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8013258:	2000      	movs	r0, #0
 801325a:	f000 faa2 	bl	80137a2 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801325e:	2300      	movs	r3, #0
 8013260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8013264:	e00e      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8013266:	2301      	movs	r3, #1
 8013268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 801326c:	e00a      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801326e:	bf00      	nop
 8013270:	e008      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013272:	bf00      	nop
 8013274:	e006      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013276:	bf00      	nop
 8013278:	e004      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
            break;
 801327a:	bf00      	nop
 801327c:	e002      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
            break;
 801327e:	bf00      	nop
 8013280:	e000      	b.n	8013284 <LoRaMacMlmeRequest+0x2b4>
            break;
 8013282:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013284:	4b13      	ldr	r3, [pc, #76]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 8013286:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801328e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013292:	2b00      	cmp	r3, #0
 8013294:	d010      	beq.n	80132b8 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8013296:	f000 fffd 	bl	8014294 <LoRaMacConfirmQueueGetCnt>
 801329a:	4603      	mov	r3, r0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d110      	bne.n	80132c2 <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 80132a0:	4b0c      	ldr	r3, [pc, #48]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 80132a2:	2200      	movs	r2, #0
 80132a4:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80132a8:	4a0a      	ldr	r2, [pc, #40]	; (80132d4 <LoRaMacMlmeRequest+0x304>)
 80132aa:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 80132ae:	f36f 0382 	bfc	r3, #2, #1
 80132b2:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 80132b6:	e004      	b.n	80132c2 <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80132b8:	f107 0320 	add.w	r3, r7, #32
 80132bc:	4618      	mov	r0, r3
 80132be:	f000 fe9b 	bl	8013ff8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80132c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3728      	adds	r7, #40	; 0x28
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}
 80132ce:	bf00      	nop
 80132d0:	20000c84 	.word	0x20000c84
 80132d4:	2000082c 	.word	0x2000082c
 80132d8:	20000d4c 	.word	0x20000d4c

080132dc <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80132dc:	b5b0      	push	{r4, r5, r7, lr}
 80132de:	b092      	sub	sp, #72	; 0x48
 80132e0:	af02      	add	r7, sp, #8
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	460b      	mov	r3, r1
 80132e6:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80132e8:	2302      	movs	r3, #2
 80132ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80132ee:	2300      	movs	r3, #0
 80132f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 80132f4:	2300      	movs	r3, #0
 80132f6:	63bb      	str	r3, [r7, #56]	; 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80132f8:	2300      	movs	r3, #0
 80132fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    bool readyToSend = false;
 80132fe:	2300      	movs	r3, #0
 8013300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    if( mcpsRequest == NULL )
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d101      	bne.n	801330e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801330a:	2303      	movs	r3, #3
 801330c:	e113      	b.n	8013536 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2200      	movs	r2, #0
 8013312:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 8013314:	f7fc fada 	bl	800f8cc <LoRaMacIsBusy>
 8013318:	4603      	mov	r3, r0
 801331a:	2b00      	cmp	r3, #0
 801331c:	d001      	beq.n	8013322 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 801331e:	2301      	movs	r3, #1
 8013320:	e109      	b.n	8013536 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	f107 040c 	add.w	r4, r7, #12
 8013328:	461d      	mov	r5, r3
 801332a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801332c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801332e:	682b      	ldr	r3, [r5, #0]
 8013330:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 8013332:	2300      	movs	r3, #0
 8013334:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8013338:	2214      	movs	r2, #20
 801333a:	2100      	movs	r1, #0
 801333c:	4880      	ldr	r0, [pc, #512]	; (8013540 <LoRaMacMcpsRequest+0x264>)
 801333e:	f004 fc7f 	bl	8017c40 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013342:	4b80      	ldr	r3, [pc, #512]	; (8013544 <LoRaMacMcpsRequest+0x268>)
 8013344:	2201      	movs	r2, #1
 8013346:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801334a:	4b7f      	ldr	r3, [pc, #508]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 801334c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013350:	2b02      	cmp	r3, #2
 8013352:	d111      	bne.n	8013378 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8013354:	4b7c      	ldr	r3, [pc, #496]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 8013356:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 801335a:	2b02      	cmp	r3, #2
 801335c:	d10c      	bne.n	8013378 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801335e:	4b7a      	ldr	r3, [pc, #488]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 8013360:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8013364:	f083 0301 	eor.w	r3, r3, #1
 8013368:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 801336a:	2b00      	cmp	r3, #0
 801336c:	d004      	beq.n	8013378 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801336e:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8013370:	2b00      	cmp	r3, #0
 8013372:	d101      	bne.n	8013378 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8013374:	2301      	movs	r3, #1
 8013376:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8013378:	7b3b      	ldrb	r3, [r7, #12]
 801337a:	2b03      	cmp	r3, #3
 801337c:	d030      	beq.n	80133e0 <LoRaMacMcpsRequest+0x104>
 801337e:	2b03      	cmp	r3, #3
 8013380:	dc3f      	bgt.n	8013402 <LoRaMacMcpsRequest+0x126>
 8013382:	2b00      	cmp	r3, #0
 8013384:	d002      	beq.n	801338c <LoRaMacMcpsRequest+0xb0>
 8013386:	2b01      	cmp	r3, #1
 8013388:	d015      	beq.n	80133b6 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801338a:	e03a      	b.n	8013402 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 801338c:	2301      	movs	r3, #1
 801338e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8013392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013396:	2202      	movs	r2, #2
 8013398:	f362 1347 	bfi	r3, r2, #5, #3
 801339c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Unconfirmed.fPort;
 80133a0:	7c3b      	ldrb	r3, [r7, #16]
 80133a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 80133aa:	8b3b      	ldrh	r3, [r7, #24]
 80133ac:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 80133ae:	7ebb      	ldrb	r3, [r7, #26]
 80133b0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80133b4:	e026      	b.n	8013404 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80133b6:	2301      	movs	r3, #1
 80133b8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80133bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133c0:	2204      	movs	r2, #4
 80133c2:	f362 1347 	bfi	r3, r2, #5, #3
 80133c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fPort = request.Req.Confirmed.fPort;
 80133ca:	7c3b      	ldrb	r3, [r7, #16]
 80133cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 80133d4:	8b3b      	ldrh	r3, [r7, #24]
 80133d6:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Confirmed.Datarate;
 80133d8:	7ebb      	ldrb	r3, [r7, #26]
 80133da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 80133de:	e011      	b.n	8013404 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 80133e0:	2301      	movs	r3, #1
 80133e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80133e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133ea:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80133ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	63bb      	str	r3, [r7, #56]	; 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 80133f6:	8abb      	ldrh	r3, [r7, #20]
 80133f8:	86fb      	strh	r3, [r7, #54]	; 0x36
            datarate = request.Req.Proprietary.Datarate;
 80133fa:	7dbb      	ldrb	r3, [r7, #22]
 80133fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            break;
 8013400:	e000      	b.n	8013404 <LoRaMacMcpsRequest+0x128>
            break;
 8013402:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013404:	2302      	movs	r3, #2
 8013406:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801340a:	4b4f      	ldr	r3, [pc, #316]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 801340c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013410:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013414:	4b4c      	ldr	r3, [pc, #304]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 8013416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801341a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801341e:	4611      	mov	r1, r2
 8013420:	4618      	mov	r0, r3
 8013422:	f002 f925 	bl	8015670 <RegionGetPhyParam>
 8013426:	4603      	mov	r3, r0
 8013428:	62bb      	str	r3, [r7, #40]	; 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 801342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342c:	b25b      	sxtb	r3, r3
 801342e:	f997 2035 	ldrsb.w	r2, [r7, #53]	; 0x35
 8013432:	4293      	cmp	r3, r2
 8013434:	bfb8      	it	lt
 8013436:	4613      	movlt	r3, r2
 8013438:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 801343c:	4b42      	ldr	r3, [pc, #264]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 801343e:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8013442:	4a41      	ldr	r2, [pc, #260]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 8013444:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8013448:	4a3f      	ldr	r2, [pc, #252]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 801344a:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 801344e:	4618      	mov	r0, r3
 8013450:	f7fc fbd4 	bl	800fbfc <CheckForMinimumAbpDatarate>
 8013454:	4603      	mov	r3, r0
 8013456:	2b00      	cmp	r3, #0
 8013458:	d002      	beq.n	8013460 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 801345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801345c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if( readyToSend == true )
 8013460:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8013464:	2b00      	cmp	r3, #0
 8013466:	d05f      	beq.n	8013528 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013468:	4b37      	ldr	r3, [pc, #220]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 801346a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801346e:	f083 0301 	eor.w	r3, r3, #1
 8013472:	b2db      	uxtb	r3, r3
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10e      	bne.n	8013496 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8013478:	4b33      	ldr	r3, [pc, #204]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 801347a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 801347e:	4a32      	ldr	r2, [pc, #200]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 8013480:	f892 111c 	ldrb.w	r1, [r2, #284]	; 0x11c
 8013484:	4a30      	ldr	r2, [pc, #192]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 8013486:	f892 2109 	ldrb.w	r2, [r2, #265]	; 0x109
 801348a:	4618      	mov	r0, r3
 801348c:	f7fc fbb6 	bl	800fbfc <CheckForMinimumAbpDatarate>
 8013490:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8013492:	2b00      	cmp	r3, #0
 8013494:	d01c      	beq.n	80134d0 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8013496:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801349a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801349e:	4b2a      	ldr	r3, [pc, #168]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 80134a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80134a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80134a8:	4b27      	ldr	r3, [pc, #156]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 80134aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80134ae:	f107 0120 	add.w	r1, r7, #32
 80134b2:	2205      	movs	r2, #5
 80134b4:	4618      	mov	r0, r3
 80134b6:	f002 f916 	bl	80156e6 <RegionVerify>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d005      	beq.n	80134cc <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80134c0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80134c4:	4b20      	ldr	r3, [pc, #128]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 80134c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80134ca:	e001      	b.n	80134d0 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80134cc:	2303      	movs	r3, #3
 80134ce:	e032      	b.n	8013536 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 80134d0:	4b1d      	ldr	r3, [pc, #116]	; (8013548 <LoRaMacMcpsRequest+0x26c>)
 80134d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80134d6:	4a1b      	ldr	r2, [pc, #108]	; (8013544 <LoRaMacMcpsRequest+0x268>)
 80134d8:	f8d2 249c 	ldr.w	r2, [r2, #1180]	; 0x49c
 80134dc:	4611      	mov	r1, r2
 80134de:	4618      	mov	r0, r3
 80134e0:	f7fc fc76 	bl	800fdd0 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 80134e4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80134e6:	f897 103e 	ldrb.w	r1, [r7, #62]	; 0x3e
 80134ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80134ee:	78fb      	ldrb	r3, [r7, #3]
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	4613      	mov	r3, r2
 80134f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134f6:	f7fd fc0d 	bl	8010d14 <Send>
 80134fa:	4603      	mov	r3, r0
 80134fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if( status == LORAMAC_STATUS_OK )
 8013500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013504:	2b00      	cmp	r3, #0
 8013506:	d10b      	bne.n	8013520 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8013508:	7b3a      	ldrb	r2, [r7, #12]
 801350a:	4b0e      	ldr	r3, [pc, #56]	; (8013544 <LoRaMacMcpsRequest+0x268>)
 801350c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8013510:	4a0c      	ldr	r2, [pc, #48]	; (8013544 <LoRaMacMcpsRequest+0x268>)
 8013512:	f892 3495 	ldrb.w	r3, [r2, #1173]	; 0x495
 8013516:	f043 0301 	orr.w	r3, r3, #1
 801351a:	f882 3495 	strb.w	r3, [r2, #1173]	; 0x495
 801351e:	e003      	b.n	8013528 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8013520:	4b08      	ldr	r3, [pc, #32]	; (8013544 <LoRaMacMcpsRequest+0x268>)
 8013522:	2200      	movs	r2, #0
 8013524:	f883 241e 	strb.w	r2, [r3, #1054]	; 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8013528:	4b06      	ldr	r3, [pc, #24]	; (8013544 <LoRaMacMcpsRequest+0x268>)
 801352a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	611a      	str	r2, [r3, #16]

    return status;
 8013532:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013536:	4618      	mov	r0, r3
 8013538:	3740      	adds	r7, #64	; 0x40
 801353a:	46bd      	mov	sp, r7
 801353c:	bdb0      	pop	{r4, r5, r7, pc}
 801353e:	bf00      	nop
 8013540:	20000c70 	.word	0x20000c70
 8013544:	2000082c 	.word	0x2000082c
 8013548:	20000d4c 	.word	0x20000d4c

0801354c <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	4603      	mov	r3, r0
 8013554:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8013556:	79fb      	ldrb	r3, [r7, #7]
 8013558:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 801355a:	4b0a      	ldr	r3, [pc, #40]	; (8013584 <LoRaMacTestSetDutyCycleOn+0x38>)
 801355c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013560:	f107 010c 	add.w	r1, r7, #12
 8013564:	220f      	movs	r2, #15
 8013566:	4618      	mov	r0, r3
 8013568:	f002 f8bd 	bl	80156e6 <RegionVerify>
 801356c:	4603      	mov	r3, r0
 801356e:	2b00      	cmp	r3, #0
 8013570:	d003      	beq.n	801357a <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8013572:	4a04      	ldr	r2, [pc, #16]	; (8013584 <LoRaMacTestSetDutyCycleOn+0x38>)
 8013574:	79fb      	ldrb	r3, [r7, #7]
 8013576:	f882 3108 	strb.w	r3, [r2, #264]	; 0x108
    }
}
 801357a:	bf00      	nop
 801357c:	3710      	adds	r7, #16
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	20000d4c 	.word	0x20000d4c

08013588 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8013588:	b580      	push	{r7, lr}
 801358a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801358c:	f7fe ff26 	bl	80123dc <LoRaMacStop>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d111      	bne.n	80135ba <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8013596:	480a      	ldr	r0, [pc, #40]	; (80135c0 <LoRaMacDeInitialization+0x38>)
 8013598:	f008 fb24 	bl	801bbe4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801359c:	4809      	ldr	r0, [pc, #36]	; (80135c4 <LoRaMacDeInitialization+0x3c>)
 801359e:	f008 fb21 	bl	801bbe4 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80135a2:	4809      	ldr	r0, [pc, #36]	; (80135c8 <LoRaMacDeInitialization+0x40>)
 80135a4:	f008 fb1e 	bl	801bbe4 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80135a8:	f000 f948 	bl	801383c <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 80135ac:	f7fd ff18 	bl	80113e0 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80135b0:	4b06      	ldr	r3, [pc, #24]	; (80135cc <LoRaMacDeInitialization+0x44>)
 80135b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b4:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80135b6:	2300      	movs	r3, #0
 80135b8:	e000      	b.n	80135bc <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80135ba:	2301      	movs	r3, #1
    }
}
 80135bc:	4618      	mov	r0, r3
 80135be:	bd80      	pop	{r7, pc}
 80135c0:	20000b94 	.word	0x20000b94
 80135c4:	20000bac 	.word	0x20000bac
 80135c8:	20000bc4 	.word	0x20000bc4
 80135cc:	0801d538 	.word	0x0801d538

080135d0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b08c      	sub	sp, #48	; 0x30
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
 80135dc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 80135de:	2300      	movs	r3, #0
 80135e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	7b1b      	ldrb	r3, [r3, #12]
 80135e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	7b5b      	ldrb	r3, [r3, #13]
 80135f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	7b9b      	ldrb	r3, [r3, #14]
 80135f8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	685a      	ldr	r2, [r3, #4]
 8013600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013602:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	785b      	ldrb	r3, [r3, #1]
 8013608:	2b00      	cmp	r3, #0
 801360a:	f000 8088 	beq.w	801371e <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801360e:	2302      	movs	r3, #2
 8013610:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	7bdb      	ldrb	r3, [r3, #15]
 8013618:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	7c1b      	ldrb	r3, [r3, #16]
 8013620:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013624:	4611      	mov	r1, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f002 f822 	bl	8015670 <RegionGetPhyParam>
 801362c:	4603      	mov	r3, r0
 801362e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8013630:	6a3b      	ldr	r3, [r7, #32]
 8013632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        datarate = MAX( datarate, minTxDatarate );
 8013636:	f997 202b 	ldrsb.w	r2, [r7, #43]	; 0x2b
 801363a:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 801363e:	4293      	cmp	r3, r2
 8013640:	bfb8      	it	lt
 8013642:	4613      	movlt	r3, r2
 8013644:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	68fa      	ldr	r2, [r7, #12]
 801364e:	8912      	ldrh	r2, [r2, #8]
 8013650:	4293      	cmp	r3, r2
 8013652:	d302      	bcc.n	801365a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 8013654:	2301      	movs	r3, #1
 8013656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	8912      	ldrh	r2, [r2, #8]
 8013662:	4611      	mov	r1, r2
 8013664:	68fa      	ldr	r2, [r7, #12]
 8013666:	8952      	ldrh	r2, [r2, #10]
 8013668:	440a      	add	r2, r1
 801366a:	4293      	cmp	r3, r2
 801366c:	d30f      	bcc.n	801368e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801366e:	230a      	movs	r3, #10
 8013670:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	7c1b      	ldrb	r3, [r3, #16]
 8013678:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801367c:	4611      	mov	r1, r2
 801367e:	4618      	mov	r0, r3
 8013680:	f001 fff6 	bl	8015670 <RegionGetPhyParam>
 8013684:	4603      	mov	r3, r0
 8013686:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8013688:	6a3b      	ldr	r3, [r7, #32]
 801368a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	8912      	ldrh	r2, [r2, #8]
 8013696:	4611      	mov	r1, r2
 8013698:	68fa      	ldr	r2, [r7, #12]
 801369a:	8952      	ldrh	r2, [r2, #10]
 801369c:	0052      	lsls	r2, r2, #1
 801369e:	440a      	add	r2, r1
 80136a0:	4293      	cmp	r3, r2
 80136a2:	d33c      	bcc.n	801371e <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	685b      	ldr	r3, [r3, #4]
 80136a8:	68fa      	ldr	r2, [r7, #12]
 80136aa:	8912      	ldrh	r2, [r2, #8]
 80136ac:	1a9b      	subs	r3, r3, r2
 80136ae:	68fa      	ldr	r2, [r7, #12]
 80136b0:	8952      	ldrh	r2, [r2, #10]
 80136b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80136b6:	fb01 f202 	mul.w	r2, r1, r2
 80136ba:	1a9b      	subs	r3, r3, r2
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d12e      	bne.n	801371e <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 80136c0:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80136c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80136c8:	429a      	cmp	r2, r3
 80136ca:	d110      	bne.n	80136ee <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	781b      	ldrb	r3, [r3, #0]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d009      	beq.n	80136e8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80136d4:	2302      	movs	r3, #2
 80136d6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	7c1b      	ldrb	r3, [r3, #16]
 80136dc:	f107 0210 	add.w	r2, r7, #16
 80136e0:	4611      	mov	r1, r2
 80136e2:	4618      	mov	r0, r3
 80136e4:	f001 ffed 	bl	80156c2 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 80136e8:	2301      	movs	r3, #1
 80136ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80136ee:	2321      	movs	r3, #33	; 0x21
 80136f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                getPhy.Datarate = datarate;
 80136f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80136f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	7bdb      	ldrb	r3, [r3, #15]
 8013700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	7c1b      	ldrb	r3, [r3, #16]
 8013708:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801370c:	4611      	mov	r1, r2
 801370e:	4618      	mov	r0, r3
 8013710:	f001 ffae 	bl	8015670 <RegionGetPhyParam>
 8013714:	4603      	mov	r3, r0
 8013716:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 8013718:	6a3b      	ldr	r3, [r7, #32]
 801371a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
        }
    }

    *drOut = datarate;
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8013724:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801372c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013734:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8013736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801373a:	4618      	mov	r0, r3
 801373c:	3730      	adds	r7, #48	; 0x30
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}

08013742 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8013742:	b480      	push	{r7}
 8013744:	b085      	sub	sp, #20
 8013746:	af00      	add	r7, sp, #0
 8013748:	60f8      	str	r0, [r7, #12]
 801374a:	60b9      	str	r1, [r7, #8]
 801374c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801374e:	bf00      	nop
 8013750:	3714      	adds	r7, #20
 8013752:	46bd      	mov	sp, r7
 8013754:	bc80      	pop	{r7}
 8013756:	4770      	bx	lr

08013758 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8013758:	b480      	push	{r7}
 801375a:	b083      	sub	sp, #12
 801375c:	af00      	add	r7, sp, #0
 801375e:	4603      	mov	r3, r0
 8013760:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013762:	bf00      	nop
 8013764:	370c      	adds	r7, #12
 8013766:	46bd      	mov	sp, r7
 8013768:	bc80      	pop	{r7}
 801376a:	4770      	bx	lr

0801376c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801376c:	b480      	push	{r7}
 801376e:	b083      	sub	sp, #12
 8013770:	af00      	add	r7, sp, #0
 8013772:	4603      	mov	r3, r0
 8013774:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013776:	bf00      	nop
 8013778:	370c      	adds	r7, #12
 801377a:	46bd      	mov	sp, r7
 801377c:	bc80      	pop	{r7}
 801377e:	4770      	bx	lr

08013780 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013780:	b480      	push	{r7}
 8013782:	b083      	sub	sp, #12
 8013784:	af00      	add	r7, sp, #0
 8013786:	4603      	mov	r3, r0
 8013788:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801378a:	bf00      	nop
 801378c:	370c      	adds	r7, #12
 801378e:	46bd      	mov	sp, r7
 8013790:	bc80      	pop	{r7}
 8013792:	4770      	bx	lr

08013794 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8013794:	b480      	push	{r7}
 8013796:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8013798:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801379a:	4618      	mov	r0, r3
 801379c:	46bd      	mov	sp, r7
 801379e:	bc80      	pop	{r7}
 80137a0:	4770      	bx	lr

080137a2 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 80137a2:	b480      	push	{r7}
 80137a4:	b083      	sub	sp, #12
 80137a6:	af00      	add	r7, sp, #0
 80137a8:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137aa:	bf00      	nop
 80137ac:	370c      	adds	r7, #12
 80137ae:	46bd      	mov	sp, r7
 80137b0:	bc80      	pop	{r7}
 80137b2:	4770      	bx	lr

080137b4 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 80137b4:	b480      	push	{r7}
 80137b6:	b083      	sub	sp, #12
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137bc:	bf00      	nop
 80137be:	370c      	adds	r7, #12
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bc80      	pop	{r7}
 80137c4:	4770      	bx	lr

080137c6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 80137c6:	b480      	push	{r7}
 80137c8:	b083      	sub	sp, #12
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137ce:	bf00      	nop
 80137d0:	370c      	adds	r7, #12
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bc80      	pop	{r7}
 80137d6:	4770      	bx	lr

080137d8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80137d8:	b480      	push	{r7}
 80137da:	b083      	sub	sp, #12
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	460b      	mov	r3, r1
 80137e2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80137e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	370c      	adds	r7, #12
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bc80      	pop	{r7}
 80137ee:	4770      	bx	lr

080137f0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80137f0:	b480      	push	{r7}
 80137f2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80137f4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80137f6:	4618      	mov	r0, r3
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bc80      	pop	{r7}
 80137fc:	4770      	bx	lr

080137fe <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80137fe:	b480      	push	{r7}
 8013800:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013802:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013804:	4618      	mov	r0, r3
 8013806:	46bd      	mov	sp, r7
 8013808:	bc80      	pop	{r7}
 801380a:	4770      	bx	lr

0801380c <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 801380c:	b480      	push	{r7}
 801380e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8013810:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013812:	4618      	mov	r0, r3
 8013814:	46bd      	mov	sp, r7
 8013816:	bc80      	pop	{r7}
 8013818:	4770      	bx	lr

0801381a <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 801381a:	b480      	push	{r7}
 801381c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801381e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013820:	4618      	mov	r0, r3
 8013822:	46bd      	mov	sp, r7
 8013824:	bc80      	pop	{r7}
 8013826:	4770      	bx	lr

08013828 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
 801382e:	4603      	mov	r3, r0
 8013830:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013832:	bf00      	nop
 8013834:	370c      	adds	r7, #12
 8013836:	46bd      	mov	sp, r7
 8013838:	bc80      	pop	{r7}
 801383a:	4770      	bx	lr

0801383c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 801383c:	b480      	push	{r7}
 801383e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013840:	bf00      	nop
 8013842:	46bd      	mov	sp, r7
 8013844:	bc80      	pop	{r7}
 8013846:	4770      	bx	lr

08013848 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8013848:	b480      	push	{r7}
 801384a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801384c:	bf00      	nop
 801384e:	46bd      	mov	sp, r7
 8013850:	bc80      	pop	{r7}
 8013852:	4770      	bx	lr

08013854 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	4603      	mov	r3, r0
 801385c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801385e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013860:	4618      	mov	r0, r3
 8013862:	370c      	adds	r7, #12
 8013864:	46bd      	mov	sp, r7
 8013866:	bc80      	pop	{r7}
 8013868:	4770      	bx	lr

0801386a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801386a:	b480      	push	{r7}
 801386c:	b083      	sub	sp, #12
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013872:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013874:	4618      	mov	r0, r3
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	bc80      	pop	{r7}
 801387c:	4770      	bx	lr

0801387e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801387e:	b480      	push	{r7}
 8013880:	b083      	sub	sp, #12
 8013882:	af00      	add	r7, sp, #0
 8013884:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013886:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013888:	4618      	mov	r0, r3
 801388a:	370c      	adds	r7, #12
 801388c:	46bd      	mov	sp, r7
 801388e:	bc80      	pop	{r7}
 8013890:	4770      	bx	lr

08013892 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013892:	b480      	push	{r7}
 8013894:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013896:	bf00      	nop
 8013898:	46bd      	mov	sp, r7
 801389a:	bc80      	pop	{r7}
 801389c:	4770      	bx	lr

0801389e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801389e:	b480      	push	{r7}
 80138a0:	b083      	sub	sp, #12
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	4603      	mov	r3, r0
 80138a6:	6039      	str	r1, [r7, #0]
 80138a8:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 80138aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80138ac:	4618      	mov	r0, r3
 80138ae:	370c      	adds	r7, #12
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bc80      	pop	{r7}
 80138b4:	4770      	bx	lr

080138b6 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 80138b6:	b480      	push	{r7}
 80138b8:	b083      	sub	sp, #12
 80138ba:	af00      	add	r7, sp, #0
 80138bc:	4603      	mov	r3, r0
 80138be:	603a      	str	r2, [r7, #0]
 80138c0:	80fb      	strh	r3, [r7, #6]
 80138c2:	460b      	mov	r3, r1
 80138c4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80138c6:	bf00      	nop
 80138c8:	370c      	adds	r7, #12
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bc80      	pop	{r7}
 80138ce:	4770      	bx	lr

080138d0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 80138d0:	b480      	push	{r7}
 80138d2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80138d4:	bf00      	nop
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bc80      	pop	{r7}
 80138da:	4770      	bx	lr

080138dc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80138e4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80138e6:	4618      	mov	r0, r3
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	bc80      	pop	{r7}
 80138ee:	4770      	bx	lr

080138f0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80138f0:	b480      	push	{r7}
 80138f2:	b083      	sub	sp, #12
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80138f8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	370c      	adds	r7, #12
 80138fe:	46bd      	mov	sp, r7
 8013900:	bc80      	pop	{r7}
 8013902:	4770      	bx	lr

08013904 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8013904:	b480      	push	{r7}
 8013906:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8013908:	bf00      	nop
 801390a:	46bd      	mov	sp, r7
 801390c:	bc80      	pop	{r7}
 801390e:	4770      	bx	lr

08013910 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 8013910:	b480      	push	{r7}
 8013912:	b083      	sub	sp, #12
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	460b      	mov	r3, r1
 801391a:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801391c:	bf00      	nop
 801391e:	370c      	adds	r7, #12
 8013920:	46bd      	mov	sp, r7
 8013922:	bc80      	pop	{r7}
 8013924:	4770      	bx	lr

08013926 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8013926:	b480      	push	{r7}
 8013928:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801392a:	bf00      	nop
 801392c:	46bd      	mov	sp, r7
 801392e:	bc80      	pop	{r7}
 8013930:	4770      	bx	lr

08013932 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8013932:	b480      	push	{r7}
 8013934:	b085      	sub	sp, #20
 8013936:	af00      	add	r7, sp, #0
 8013938:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801393e:	2300      	movs	r3, #0
 8013940:	81fb      	strh	r3, [r7, #14]
 8013942:	e00a      	b.n	801395a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8013944:	89fb      	ldrh	r3, [r7, #14]
 8013946:	68ba      	ldr	r2, [r7, #8]
 8013948:	4413      	add	r3, r2
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d001      	beq.n	8013954 <IsSlotFree+0x22>
        {
            return false;
 8013950:	2300      	movs	r3, #0
 8013952:	e006      	b.n	8013962 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8013954:	89fb      	ldrh	r3, [r7, #14]
 8013956:	3301      	adds	r3, #1
 8013958:	81fb      	strh	r3, [r7, #14]
 801395a:	89fb      	ldrh	r3, [r7, #14]
 801395c:	2b0f      	cmp	r3, #15
 801395e:	d9f1      	bls.n	8013944 <IsSlotFree+0x12>
        }
    }
    return true;
 8013960:	2301      	movs	r3, #1
}
 8013962:	4618      	mov	r0, r3
 8013964:	3714      	adds	r7, #20
 8013966:	46bd      	mov	sp, r7
 8013968:	bc80      	pop	{r7}
 801396a:	4770      	bx	lr

0801396c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013972:	2300      	movs	r3, #0
 8013974:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013976:	e007      	b.n	8013988 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8013978:	79fb      	ldrb	r3, [r7, #7]
 801397a:	3301      	adds	r3, #1
 801397c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801397e:	79fb      	ldrb	r3, [r7, #7]
 8013980:	2b20      	cmp	r3, #32
 8013982:	d101      	bne.n	8013988 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8013984:	2300      	movs	r3, #0
 8013986:	e012      	b.n	80139ae <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8013988:	79fb      	ldrb	r3, [r7, #7]
 801398a:	011b      	lsls	r3, r3, #4
 801398c:	3308      	adds	r3, #8
 801398e:	4a0a      	ldr	r2, [pc, #40]	; (80139b8 <MallocNewMacCommandSlot+0x4c>)
 8013990:	4413      	add	r3, r2
 8013992:	4618      	mov	r0, r3
 8013994:	f7ff ffcd 	bl	8013932 <IsSlotFree>
 8013998:	4603      	mov	r3, r0
 801399a:	f083 0301 	eor.w	r3, r3, #1
 801399e:	b2db      	uxtb	r3, r3
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d1e9      	bne.n	8013978 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 80139a4:	79fb      	ldrb	r3, [r7, #7]
 80139a6:	011b      	lsls	r3, r3, #4
 80139a8:	3308      	adds	r3, #8
 80139aa:	4a03      	ldr	r2, [pc, #12]	; (80139b8 <MallocNewMacCommandSlot+0x4c>)
 80139ac:	4413      	add	r3, r2
}
 80139ae:	4618      	mov	r0, r3
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
 80139b6:	bf00      	nop
 80139b8:	200018ec 	.word	0x200018ec

080139bc <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d101      	bne.n	80139ce <FreeMacCommandSlot+0x12>
    {
        return false;
 80139ca:	2300      	movs	r3, #0
 80139cc:	e005      	b.n	80139da <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80139ce:	2210      	movs	r2, #16
 80139d0:	2100      	movs	r1, #0
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f004 f934 	bl	8017c40 <memset1>

    return true;
 80139d8:	2301      	movs	r3, #1
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3708      	adds	r7, #8
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}

080139e2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 80139e2:	b480      	push	{r7}
 80139e4:	b083      	sub	sp, #12
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d101      	bne.n	80139f4 <LinkedListInit+0x12>
    {
        return false;
 80139f0:	2300      	movs	r3, #0
 80139f2:	e006      	b.n	8013a02 <LinkedListInit+0x20>
    }

    list->First = NULL;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2200      	movs	r2, #0
 80139f8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2200      	movs	r2, #0
 80139fe:	605a      	str	r2, [r3, #4]

    return true;
 8013a00:	2301      	movs	r3, #1
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	370c      	adds	r7, #12
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bc80      	pop	{r7}
 8013a0a:	4770      	bx	lr

08013a0c <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b083      	sub	sp, #12
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d002      	beq.n	8013a22 <LinkedListAdd+0x16>
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d101      	bne.n	8013a26 <LinkedListAdd+0x1a>
    {
        return false;
 8013a22:	2300      	movs	r3, #0
 8013a24:	e015      	b.n	8013a52 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d102      	bne.n	8013a34 <LinkedListAdd+0x28>
    {
        list->First = element;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	683a      	ldr	r2, [r7, #0]
 8013a32:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d003      	beq.n	8013a44 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	683a      	ldr	r2, [r7, #0]
 8013a42:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	2200      	movs	r2, #0
 8013a48:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	605a      	str	r2, [r3, #4]

    return true;
 8013a50:	2301      	movs	r3, #1
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	370c      	adds	r7, #12
 8013a56:	46bd      	mov	sp, r7
 8013a58:	bc80      	pop	{r7}
 8013a5a:	4770      	bx	lr

08013a5c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b085      	sub	sp, #20
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d002      	beq.n	8013a72 <LinkedListGetPrevious+0x16>
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013a72:	2300      	movs	r3, #0
 8013a74:	e016      	b.n	8013aa4 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8013a7c:	683a      	ldr	r2, [r7, #0]
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d00c      	beq.n	8013a9e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013a84:	e002      	b.n	8013a8c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d007      	beq.n	8013aa2 <LinkedListGetPrevious+0x46>
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	683a      	ldr	r2, [r7, #0]
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d1f4      	bne.n	8013a86 <LinkedListGetPrevious+0x2a>
 8013a9c:	e001      	b.n	8013aa2 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013aa2:	68fb      	ldr	r3, [r7, #12]
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3714      	adds	r7, #20
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bc80      	pop	{r7}
 8013aac:	4770      	bx	lr

08013aae <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8013aae:	b580      	push	{r7, lr}
 8013ab0:	b084      	sub	sp, #16
 8013ab2:	af00      	add	r7, sp, #0
 8013ab4:	6078      	str	r0, [r7, #4]
 8013ab6:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <LinkedListRemove+0x16>
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d101      	bne.n	8013ac8 <LinkedListRemove+0x1a>
    {
        return false;
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e020      	b.n	8013b0a <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013ac8:	6839      	ldr	r1, [r7, #0]
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f7ff ffc6 	bl	8013a5c <LinkedListGetPrevious>
 8013ad0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	683a      	ldr	r2, [r7, #0]
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	d103      	bne.n	8013ae4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	685b      	ldr	r3, [r3, #4]
 8013ae8:	683a      	ldr	r2, [r7, #0]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d102      	bne.n	8013af4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	68fa      	ldr	r2, [r7, #12]
 8013af2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d003      	beq.n	8013b02 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	2200      	movs	r2, #0
 8013b06:	601a      	str	r2, [r3, #0]

    return true;
 8013b08:	2301      	movs	r3, #1
}
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	3710      	adds	r7, #16
 8013b0e:	46bd      	mov	sp, r7
 8013b10:	bd80      	pop	{r7, pc}
	...

08013b14 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8013b14:	b480      	push	{r7}
 8013b16:	b083      	sub	sp, #12
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8013b1e:	79fb      	ldrb	r3, [r7, #7]
 8013b20:	2b11      	cmp	r3, #17
 8013b22:	bf8c      	ite	hi
 8013b24:	2201      	movhi	r2, #1
 8013b26:	2200      	movls	r2, #0
 8013b28:	b2d2      	uxtb	r2, r2
 8013b2a:	2a00      	cmp	r2, #0
 8013b2c:	d10c      	bne.n	8013b48 <IsSticky+0x34>
 8013b2e:	2201      	movs	r2, #1
 8013b30:	409a      	lsls	r2, r3
 8013b32:	4b08      	ldr	r3, [pc, #32]	; (8013b54 <IsSticky+0x40>)
 8013b34:	4013      	ands	r3, r2
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	bf14      	ite	ne
 8013b3a:	2301      	movne	r3, #1
 8013b3c:	2300      	moveq	r3, #0
 8013b3e:	b2db      	uxtb	r3, r3
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d001      	beq.n	8013b48 <IsSticky+0x34>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8013b44:	2301      	movs	r3, #1
 8013b46:	e000      	b.n	8013b4a <IsSticky+0x36>
        default:
            return false;
 8013b48:	2300      	movs	r3, #0
    }
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	370c      	adds	r7, #12
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bc80      	pop	{r7}
 8013b52:	4770      	bx	lr
 8013b54:	00020720 	.word	0x00020720

08013b58 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8013b5c:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8013b60:	2100      	movs	r1, #0
 8013b62:	4804      	ldr	r0, [pc, #16]	; (8013b74 <LoRaMacCommandsInit+0x1c>)
 8013b64:	f004 f86c 	bl	8017c40 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8013b68:	4802      	ldr	r0, [pc, #8]	; (8013b74 <LoRaMacCommandsInit+0x1c>)
 8013b6a:	f7ff ff3a 	bl	80139e2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8013b6e:	2300      	movs	r3, #0
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	200018ec 	.word	0x200018ec

08013b78 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b086      	sub	sp, #24
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	4603      	mov	r3, r0
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
 8013b84:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	e033      	b.n	8013bf8 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8013b90:	f7ff feec 	bl	801396c <MallocNewMacCommandSlot>
 8013b94:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d101      	bne.n	8013ba0 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8013b9c:	2302      	movs	r3, #2
 8013b9e:	e02b      	b.n	8013bf8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8013ba0:	6979      	ldr	r1, [r7, #20]
 8013ba2:	4817      	ldr	r0, [pc, #92]	; (8013c00 <LoRaMacCommandsAddCmd+0x88>)
 8013ba4:	f7ff ff32 	bl	8013a0c <LinkedListAdd>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	f083 0301 	eor.w	r3, r3, #1
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d001      	beq.n	8013bb8 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013bb4:	2305      	movs	r3, #5
 8013bb6:	e01f      	b.n	8013bf8 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8013bb8:	697b      	ldr	r3, [r7, #20]
 8013bba:	7bfa      	ldrb	r2, [r7, #15]
 8013bbc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	3305      	adds	r3, #5
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	b292      	uxth	r2, r2
 8013bcc:	68b9      	ldr	r1, [r7, #8]
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f003 fffb 	bl	8017bca <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8013bd4:	7bfb      	ldrb	r3, [r7, #15]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7ff ff9c 	bl	8013b14 <IsSticky>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	461a      	mov	r2, r3
 8013be0:	697b      	ldr	r3, [r7, #20]
 8013be2:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013be4:	4b06      	ldr	r3, [pc, #24]	; (8013c00 <LoRaMacCommandsAddCmd+0x88>)
 8013be6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4413      	add	r3, r2
 8013bee:	3301      	adds	r3, #1
 8013bf0:	4a03      	ldr	r2, [pc, #12]	; (8013c00 <LoRaMacCommandsAddCmd+0x88>)
 8013bf2:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8013bf6:	2300      	movs	r3, #0
}
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	3718      	adds	r7, #24
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	200018ec 	.word	0x200018ec

08013c04 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b082      	sub	sp, #8
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013c12:	2301      	movs	r3, #1
 8013c14:	e021      	b.n	8013c5a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8013c16:	6879      	ldr	r1, [r7, #4]
 8013c18:	4812      	ldr	r0, [pc, #72]	; (8013c64 <LoRaMacCommandsRemoveCmd+0x60>)
 8013c1a:	f7ff ff48 	bl	8013aae <LinkedListRemove>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	f083 0301 	eor.w	r3, r3, #1
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d001      	beq.n	8013c2e <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013c2a:	2303      	movs	r3, #3
 8013c2c:	e015      	b.n	8013c5a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8013c2e:	4b0d      	ldr	r3, [pc, #52]	; (8013c64 <LoRaMacCommandsRemoveCmd+0x60>)
 8013c30:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	1ad3      	subs	r3, r2, r3
 8013c3a:	3b01      	subs	r3, #1
 8013c3c:	4a09      	ldr	r2, [pc, #36]	; (8013c64 <LoRaMacCommandsRemoveCmd+0x60>)
 8013c3e:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f7ff feba 	bl	80139bc <FreeMacCommandSlot>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	f083 0301 	eor.w	r3, r3, #1
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d001      	beq.n	8013c58 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013c54:	2305      	movs	r3, #5
 8013c56:	e000      	b.n	8013c5a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013c58:	2300      	movs	r3, #0
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	200018ec 	.word	0x200018ec

08013c68 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013c6e:	4b0f      	ldr	r3, [pc, #60]	; (8013cac <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013c74:	e012      	b.n	8013c9c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	7b1b      	ldrb	r3, [r3, #12]
 8013c7a:	f083 0301 	eor.w	r3, r3, #1
 8013c7e:	b2db      	uxtb	r3, r3
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d008      	beq.n	8013c96 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7ff ffba 	bl	8013c04 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	607b      	str	r3, [r7, #4]
 8013c94:	e002      	b.n	8013c9c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d1e9      	bne.n	8013c76 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013ca2:	2300      	movs	r3, #0
}
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	200018ec 	.word	0x200018ec

08013cb0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8013cb6:	4b0e      	ldr	r3, [pc, #56]	; (8013cf0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8013cbc:	e00f      	b.n	8013cde <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	791b      	ldrb	r3, [r3, #4]
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7ff ff23 	bl	8013b14 <IsSticky>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d002      	beq.n	8013cda <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8013cd4:	6878      	ldr	r0, [r7, #4]
 8013cd6:	f7ff ff95 	bl	8013c04 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d1ec      	bne.n	8013cbe <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013ce4:	2300      	movs	r3, #0
}
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	3708      	adds	r7, #8
 8013cea:	46bd      	mov	sp, r7
 8013cec:	bd80      	pop	{r7, pc}
 8013cee:	bf00      	nop
 8013cf0:	200018ec 	.word	0x200018ec

08013cf4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b083      	sub	sp, #12
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013d02:	2301      	movs	r3, #1
 8013d04:	e005      	b.n	8013d12 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8013d06:	4b05      	ldr	r3, [pc, #20]	; (8013d1c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013d08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	370c      	adds	r7, #12
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bc80      	pop	{r7}
 8013d1a:	4770      	bx	lr
 8013d1c:	200018ec 	.word	0x200018ec

08013d20 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b088      	sub	sp, #32
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	60f8      	str	r0, [r7, #12]
 8013d28:	60b9      	str	r1, [r7, #8]
 8013d2a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8013d2c:	4b25      	ldr	r3, [pc, #148]	; (8013dc4 <LoRaMacCommandsSerializeCmds+0xa4>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8013d32:	2300      	movs	r3, #0
 8013d34:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d002      	beq.n	8013d42 <LoRaMacCommandsSerializeCmds+0x22>
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d126      	bne.n	8013d90 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013d42:	2301      	movs	r3, #1
 8013d44:	e039      	b.n	8013dba <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8013d46:	7efb      	ldrb	r3, [r7, #27]
 8013d48:	68fa      	ldr	r2, [r7, #12]
 8013d4a:	1ad2      	subs	r2, r2, r3
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	689b      	ldr	r3, [r3, #8]
 8013d50:	3301      	adds	r3, #1
 8013d52:	429a      	cmp	r2, r3
 8013d54:	d320      	bcc.n	8013d98 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8013d56:	7efb      	ldrb	r3, [r7, #27]
 8013d58:	1c5a      	adds	r2, r3, #1
 8013d5a:	76fa      	strb	r2, [r7, #27]
 8013d5c:	461a      	mov	r2, r3
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	4413      	add	r3, r2
 8013d62:	69fa      	ldr	r2, [r7, #28]
 8013d64:	7912      	ldrb	r2, [r2, #4]
 8013d66:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8013d68:	7efb      	ldrb	r3, [r7, #27]
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	18d0      	adds	r0, r2, r3
 8013d6e:	69fb      	ldr	r3, [r7, #28]
 8013d70:	1d59      	adds	r1, r3, #5
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	689b      	ldr	r3, [r3, #8]
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	461a      	mov	r2, r3
 8013d7a:	f003 ff26 	bl	8017bca <memcpy1>
            itr += curElement->PayloadSize;
 8013d7e:	69fb      	ldr	r3, [r7, #28]
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	b2da      	uxtb	r2, r3
 8013d84:	7efb      	ldrb	r3, [r7, #27]
 8013d86:	4413      	add	r3, r2
 8013d88:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d1d7      	bne.n	8013d46 <LoRaMacCommandsSerializeCmds+0x26>
 8013d96:	e009      	b.n	8013dac <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8013d98:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8013d9a:	e007      	b.n	8013dac <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8013da2:	69f8      	ldr	r0, [r7, #28]
 8013da4:	f7ff ff2e 	bl	8013c04 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8013da8:	697b      	ldr	r3, [r7, #20]
 8013daa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8013dac:	69fb      	ldr	r3, [r7, #28]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d1f4      	bne.n	8013d9c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8013db2:	68b8      	ldr	r0, [r7, #8]
 8013db4:	f7ff ff9e 	bl	8013cf4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8013db8:	2300      	movs	r3, #0
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3720      	adds	r7, #32
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	200018ec 	.word	0x200018ec

08013dc8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013dc8:	b480      	push	{r7}
 8013dca:	b085      	sub	sp, #20
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d101      	bne.n	8013dda <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	e016      	b.n	8013e08 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8013dda:	4b0e      	ldr	r3, [pc, #56]	; (8013e14 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2200      	movs	r2, #0
 8013de4:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8013de6:	e00b      	b.n	8013e00 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	7b1b      	ldrb	r3, [r3, #12]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d004      	beq.n	8013dfa <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2201      	movs	r2, #1
 8013df4:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8013df6:	2300      	movs	r3, #0
 8013df8:	e006      	b.n	8013e08 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d1f0      	bne.n	8013de8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8013e06:	2300      	movs	r3, #0
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bc80      	pop	{r7}
 8013e10:	4770      	bx	lr
 8013e12:	bf00      	nop
 8013e14:	200018ec 	.word	0x200018ec

08013e18 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8013e18:	b480      	push	{r7}
 8013e1a:	b085      	sub	sp, #20
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	4603      	mov	r3, r0
 8013e20:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8013e26:	79fb      	ldrb	r3, [r7, #7]
 8013e28:	3b02      	subs	r3, #2
 8013e2a:	2b11      	cmp	r3, #17
 8013e2c:	d850      	bhi.n	8013ed0 <LoRaMacCommandsGetCmdSize+0xb8>
 8013e2e:	a201      	add	r2, pc, #4	; (adr r2, 8013e34 <LoRaMacCommandsGetCmdSize+0x1c>)
 8013e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e34:	08013e7d 	.word	0x08013e7d
 8013e38:	08013e83 	.word	0x08013e83
 8013e3c:	08013e89 	.word	0x08013e89
 8013e40:	08013e8f 	.word	0x08013e8f
 8013e44:	08013e95 	.word	0x08013e95
 8013e48:	08013e9b 	.word	0x08013e9b
 8013e4c:	08013ea1 	.word	0x08013ea1
 8013e50:	08013ea7 	.word	0x08013ea7
 8013e54:	08013ead 	.word	0x08013ead
 8013e58:	08013ed1 	.word	0x08013ed1
 8013e5c:	08013ed1 	.word	0x08013ed1
 8013e60:	08013eb3 	.word	0x08013eb3
 8013e64:	08013ed1 	.word	0x08013ed1
 8013e68:	08013ed1 	.word	0x08013ed1
 8013e6c:	08013eb9 	.word	0x08013eb9
 8013e70:	08013ebf 	.word	0x08013ebf
 8013e74:	08013ec5 	.word	0x08013ec5
 8013e78:	08013ecb 	.word	0x08013ecb
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8013e7c:	2303      	movs	r3, #3
 8013e7e:	73fb      	strb	r3, [r7, #15]
            break;
 8013e80:	e027      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8013e82:	2305      	movs	r3, #5
 8013e84:	73fb      	strb	r3, [r7, #15]
            break;
 8013e86:	e024      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8013e88:	2302      	movs	r3, #2
 8013e8a:	73fb      	strb	r3, [r7, #15]
            break;
 8013e8c:	e021      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8013e8e:	2305      	movs	r3, #5
 8013e90:	73fb      	strb	r3, [r7, #15]
            break;
 8013e92:	e01e      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8013e94:	2301      	movs	r3, #1
 8013e96:	73fb      	strb	r3, [r7, #15]
            break;
 8013e98:	e01b      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8013e9a:	2306      	movs	r3, #6
 8013e9c:	73fb      	strb	r3, [r7, #15]
            break;
 8013e9e:	e018      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8013ea0:	2302      	movs	r3, #2
 8013ea2:	73fb      	strb	r3, [r7, #15]
            break;
 8013ea4:	e015      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8013ea6:	2302      	movs	r3, #2
 8013ea8:	73fb      	strb	r3, [r7, #15]
            break;
 8013eaa:	e012      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8013eac:	2305      	movs	r3, #5
 8013eae:	73fb      	strb	r3, [r7, #15]
            break;
 8013eb0:	e00f      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8013eb2:	2306      	movs	r3, #6
 8013eb4:	73fb      	strb	r3, [r7, #15]
            break;
 8013eb6:	e00c      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8013eb8:	2301      	movs	r3, #1
 8013eba:	73fb      	strb	r3, [r7, #15]
            break;
 8013ebc:	e009      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8013ebe:	2305      	movs	r3, #5
 8013ec0:	73fb      	strb	r3, [r7, #15]
            break;
 8013ec2:	e006      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8013ec4:	2304      	movs	r3, #4
 8013ec6:	73fb      	strb	r3, [r7, #15]
            break;
 8013ec8:	e003      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8013eca:	2304      	movs	r3, #4
 8013ecc:	73fb      	strb	r3, [r7, #15]
            break;
 8013ece:	e000      	b.n	8013ed2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8013ed0:	bf00      	nop
        }
    }
    return cidSize;
 8013ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3714      	adds	r7, #20
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bc80      	pop	{r7}
 8013edc:	4770      	bx	lr
 8013ede:	bf00      	nop

08013ee0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8013ee0:	b480      	push	{r7}
 8013ee2:	b083      	sub	sp, #12
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	4a07      	ldr	r2, [pc, #28]	; (8013f08 <IncreaseBufferPointer+0x28>)
 8013eec:	4293      	cmp	r3, r2
 8013eee:	d102      	bne.n	8013ef6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013ef0:	4b06      	ldr	r3, [pc, #24]	; (8013f0c <IncreaseBufferPointer+0x2c>)
 8013ef2:	607b      	str	r3, [r7, #4]
 8013ef4:	e002      	b.n	8013efc <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	3304      	adds	r3, #4
 8013efa:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8013efc:	687b      	ldr	r3, [r7, #4]
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	370c      	adds	r7, #12
 8013f02:	46bd      	mov	sp, r7
 8013f04:	bc80      	pop	{r7}
 8013f06:	4770      	bx	lr
 8013f08:	20001b14 	.word	0x20001b14
 8013f0c:	20001b04 	.word	0x20001b04

08013f10 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8013f10:	b480      	push	{r7}
 8013f12:	b083      	sub	sp, #12
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	4603      	mov	r3, r0
 8013f18:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8013f1a:	79fb      	ldrb	r3, [r7, #7]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d101      	bne.n	8013f24 <IsListEmpty+0x14>
    {
        return true;
 8013f20:	2301      	movs	r3, #1
 8013f22:	e000      	b.n	8013f26 <IsListEmpty+0x16>
    }
    return false;
 8013f24:	2300      	movs	r3, #0
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	370c      	adds	r7, #12
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bc80      	pop	{r7}
 8013f2e:	4770      	bx	lr

08013f30 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8013f30:	b480      	push	{r7}
 8013f32:	b083      	sub	sp, #12
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	4603      	mov	r3, r0
 8013f38:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013f3a:	79fb      	ldrb	r3, [r7, #7]
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	d901      	bls.n	8013f44 <IsListFull+0x14>
    {
        return true;
 8013f40:	2301      	movs	r3, #1
 8013f42:	e000      	b.n	8013f46 <IsListFull+0x16>
    }
    return false;
 8013f44:	2300      	movs	r3, #0
}
 8013f46:	4618      	mov	r0, r3
 8013f48:	370c      	adds	r7, #12
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bc80      	pop	{r7}
 8013f4e:	4770      	bx	lr

08013f50 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	4603      	mov	r3, r0
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
 8013f5c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013f62:	4b13      	ldr	r3, [pc, #76]	; (8013fb0 <GetElement+0x60>)
 8013f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7ff ffd1 	bl	8013f10 <IsListEmpty>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d001      	beq.n	8013f78 <GetElement+0x28>
    {
        return NULL;
 8013f74:	2300      	movs	r3, #0
 8013f76:	e017      	b.n	8013fa8 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013f78:	2300      	movs	r3, #0
 8013f7a:	74fb      	strb	r3, [r7, #19]
 8013f7c:	e00d      	b.n	8013f9a <GetElement+0x4a>
    {
        if( element->Request == request )
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	781b      	ldrb	r3, [r3, #0]
 8013f82:	7bfa      	ldrb	r2, [r7, #15]
 8013f84:	429a      	cmp	r2, r3
 8013f86:	d101      	bne.n	8013f8c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	e00d      	b.n	8013fa8 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8013f8c:	6978      	ldr	r0, [r7, #20]
 8013f8e:	f7ff ffa7 	bl	8013ee0 <IncreaseBufferPointer>
 8013f92:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8013f94:	7cfb      	ldrb	r3, [r7, #19]
 8013f96:	3301      	adds	r3, #1
 8013f98:	74fb      	strb	r3, [r7, #19]
 8013f9a:	4b05      	ldr	r3, [pc, #20]	; (8013fb0 <GetElement+0x60>)
 8013f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013fa0:	7cfa      	ldrb	r2, [r7, #19]
 8013fa2:	429a      	cmp	r2, r3
 8013fa4:	d3eb      	bcc.n	8013f7e <GetElement+0x2e>
    }

    return NULL;
 8013fa6:	2300      	movs	r3, #0
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3718      	adds	r7, #24
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	20001af8 	.word	0x20001af8

08013fb4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b082      	sub	sp, #8
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8013fbc:	4a0c      	ldr	r2, [pc, #48]	; (8013ff0 <LoRaMacConfirmQueueInit+0x3c>)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8013fc2:	4b0b      	ldr	r3, [pc, #44]	; (8013ff0 <LoRaMacConfirmQueueInit+0x3c>)
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013fca:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <LoRaMacConfirmQueueInit+0x3c>)
 8013fcc:	4a09      	ldr	r2, [pc, #36]	; (8013ff4 <LoRaMacConfirmQueueInit+0x40>)
 8013fce:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8013fd0:	4b07      	ldr	r3, [pc, #28]	; (8013ff0 <LoRaMacConfirmQueueInit+0x3c>)
 8013fd2:	4a08      	ldr	r2, [pc, #32]	; (8013ff4 <LoRaMacConfirmQueueInit+0x40>)
 8013fd4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8013fd6:	2214      	movs	r2, #20
 8013fd8:	21ff      	movs	r1, #255	; 0xff
 8013fda:	4806      	ldr	r0, [pc, #24]	; (8013ff4 <LoRaMacConfirmQueueInit+0x40>)
 8013fdc:	f003 fe30 	bl	8017c40 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013fe0:	4b03      	ldr	r3, [pc, #12]	; (8013ff0 <LoRaMacConfirmQueueInit+0x3c>)
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8013fe8:	bf00      	nop
 8013fea:	3708      	adds	r7, #8
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	20001af8 	.word	0x20001af8
 8013ff4:	20001b04 	.word	0x20001b04

08013ff8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014000:	4b19      	ldr	r3, [pc, #100]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 8014002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014006:	4618      	mov	r0, r3
 8014008:	f7ff ff92 	bl	8013f30 <IsListFull>
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d001      	beq.n	8014016 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8014012:	2300      	movs	r3, #0
 8014014:	e024      	b.n	8014060 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8014016:	4b14      	ldr	r3, [pc, #80]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 8014018:	689b      	ldr	r3, [r3, #8]
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	7812      	ldrb	r2, [r2, #0]
 801401e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8014020:	4b11      	ldr	r3, [pc, #68]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	7852      	ldrb	r2, [r2, #1]
 8014028:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801402a:	4b0f      	ldr	r3, [pc, #60]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 801402c:	689b      	ldr	r3, [r3, #8]
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	78d2      	ldrb	r2, [r2, #3]
 8014032:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8014034:	4b0c      	ldr	r3, [pc, #48]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 8014036:	689b      	ldr	r3, [r3, #8]
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	7892      	ldrb	r2, [r2, #2]
 801403c:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801403e:	4b0a      	ldr	r3, [pc, #40]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 8014040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014044:	3301      	adds	r3, #1
 8014046:	b2da      	uxtb	r2, r3
 8014048:	4b07      	ldr	r3, [pc, #28]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 801404a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801404e:	4b06      	ldr	r3, [pc, #24]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 8014050:	689b      	ldr	r3, [r3, #8]
 8014052:	4618      	mov	r0, r3
 8014054:	f7ff ff44 	bl	8013ee0 <IncreaseBufferPointer>
 8014058:	4603      	mov	r3, r0
 801405a:	4a03      	ldr	r2, [pc, #12]	; (8014068 <LoRaMacConfirmQueueAdd+0x70>)
 801405c:	6093      	str	r3, [r2, #8]

    return true;
 801405e:	2301      	movs	r3, #1
}
 8014060:	4618      	mov	r0, r3
 8014062:	3708      	adds	r7, #8
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}
 8014068:	20001af8 	.word	0x20001af8

0801406c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801406c:	b580      	push	{r7, lr}
 801406e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8014070:	4b0e      	ldr	r3, [pc, #56]	; (80140ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff ff4a 	bl	8013f10 <IsListEmpty>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8014082:	2300      	movs	r3, #0
 8014084:	e010      	b.n	80140a8 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8014086:	4b09      	ldr	r3, [pc, #36]	; (80140ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014088:	f893 3020 	ldrb.w	r3, [r3, #32]
 801408c:	3b01      	subs	r3, #1
 801408e:	b2da      	uxtb	r2, r3
 8014090:	4b06      	ldr	r3, [pc, #24]	; (80140ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014092:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8014096:	4b05      	ldr	r3, [pc, #20]	; (80140ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8014098:	685b      	ldr	r3, [r3, #4]
 801409a:	4618      	mov	r0, r3
 801409c:	f7ff ff20 	bl	8013ee0 <IncreaseBufferPointer>
 80140a0:	4603      	mov	r3, r0
 80140a2:	4a02      	ldr	r2, [pc, #8]	; (80140ac <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80140a4:	6053      	str	r3, [r2, #4]

    return true;
 80140a6:	2301      	movs	r3, #1
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	20001af8 	.word	0x20001af8

080140b0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b084      	sub	sp, #16
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	4603      	mov	r3, r0
 80140b8:	460a      	mov	r2, r1
 80140ba:	71fb      	strb	r3, [r7, #7]
 80140bc:	4613      	mov	r3, r2
 80140be:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80140c0:	2300      	movs	r3, #0
 80140c2:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80140c4:	4b10      	ldr	r3, [pc, #64]	; (8014108 <LoRaMacConfirmQueueSetStatus+0x58>)
 80140c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7ff ff20 	bl	8013f10 <IsListEmpty>
 80140d0:	4603      	mov	r3, r0
 80140d2:	f083 0301 	eor.w	r3, r3, #1
 80140d6:	b2db      	uxtb	r3, r3
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d011      	beq.n	8014100 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80140dc:	4b0a      	ldr	r3, [pc, #40]	; (8014108 <LoRaMacConfirmQueueSetStatus+0x58>)
 80140de:	6859      	ldr	r1, [r3, #4]
 80140e0:	4b09      	ldr	r3, [pc, #36]	; (8014108 <LoRaMacConfirmQueueSetStatus+0x58>)
 80140e2:	689a      	ldr	r2, [r3, #8]
 80140e4:	79bb      	ldrb	r3, [r7, #6]
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7ff ff32 	bl	8013f50 <GetElement>
 80140ec:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d005      	beq.n	8014100 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	79fa      	ldrb	r2, [r7, #7]
 80140f8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	2201      	movs	r2, #1
 80140fe:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8014100:	bf00      	nop
 8014102:	3710      	adds	r7, #16
 8014104:	46bd      	mov	sp, r7
 8014106:	bd80      	pop	{r7, pc}
 8014108:	20001af8 	.word	0x20001af8

0801410c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b084      	sub	sp, #16
 8014110:	af00      	add	r7, sp, #0
 8014112:	4603      	mov	r3, r0
 8014114:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8014116:	2300      	movs	r3, #0
 8014118:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801411a:	4b10      	ldr	r3, [pc, #64]	; (801415c <LoRaMacConfirmQueueGetStatus+0x50>)
 801411c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014120:	4618      	mov	r0, r3
 8014122:	f7ff fef5 	bl	8013f10 <IsListEmpty>
 8014126:	4603      	mov	r3, r0
 8014128:	f083 0301 	eor.w	r3, r3, #1
 801412c:	b2db      	uxtb	r3, r3
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00e      	beq.n	8014150 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8014132:	4b0a      	ldr	r3, [pc, #40]	; (801415c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014134:	6859      	ldr	r1, [r3, #4]
 8014136:	4b09      	ldr	r3, [pc, #36]	; (801415c <LoRaMacConfirmQueueGetStatus+0x50>)
 8014138:	689a      	ldr	r2, [r3, #8]
 801413a:	79fb      	ldrb	r3, [r7, #7]
 801413c:	4618      	mov	r0, r3
 801413e:	f7ff ff07 	bl	8013f50 <GetElement>
 8014142:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d002      	beq.n	8014150 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801414a:	68fb      	ldr	r3, [r7, #12]
 801414c:	785b      	ldrb	r3, [r3, #1]
 801414e:	e000      	b.n	8014152 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8014150:	2301      	movs	r3, #1
}
 8014152:	4618      	mov	r0, r3
 8014154:	3710      	adds	r7, #16
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	20001af8 	.word	0x20001af8

08014160 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	4603      	mov	r3, r0
 8014168:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801416a:	4b16      	ldr	r3, [pc, #88]	; (80141c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8014170:	4a14      	ldr	r2, [pc, #80]	; (80141c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8014172:	79fb      	ldrb	r3, [r7, #7]
 8014174:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8014178:	4b12      	ldr	r3, [pc, #72]	; (80141c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801417a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801417e:	4618      	mov	r0, r3
 8014180:	f7ff fec6 	bl	8013f10 <IsListEmpty>
 8014184:	4603      	mov	r3, r0
 8014186:	f083 0301 	eor.w	r3, r3, #1
 801418a:	b2db      	uxtb	r3, r3
 801418c:	2b00      	cmp	r3, #0
 801418e:	d015      	beq.n	80141bc <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	79fa      	ldrb	r2, [r7, #7]
 8014194:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	78db      	ldrb	r3, [r3, #3]
 801419a:	f083 0301 	eor.w	r3, r3, #1
 801419e:	b2db      	uxtb	r3, r3
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d002      	beq.n	80141aa <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	2201      	movs	r2, #1
 80141a8:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80141aa:	68f8      	ldr	r0, [r7, #12]
 80141ac:	f7ff fe98 	bl	8013ee0 <IncreaseBufferPointer>
 80141b0:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80141b2:	4b04      	ldr	r3, [pc, #16]	; (80141c4 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80141b4:	689b      	ldr	r3, [r3, #8]
 80141b6:	68fa      	ldr	r2, [r7, #12]
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d1e9      	bne.n	8014190 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80141bc:	bf00      	nop
 80141be:	3710      	adds	r7, #16
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	20001af8 	.word	0x20001af8

080141c8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	4603      	mov	r3, r0
 80141d0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80141d2:	4b09      	ldr	r3, [pc, #36]	; (80141f8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80141d4:	6859      	ldr	r1, [r3, #4]
 80141d6:	4b08      	ldr	r3, [pc, #32]	; (80141f8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80141d8:	689a      	ldr	r2, [r3, #8]
 80141da:	79fb      	ldrb	r3, [r7, #7]
 80141dc:	4618      	mov	r0, r3
 80141de:	f7ff feb7 	bl	8013f50 <GetElement>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d001      	beq.n	80141ec <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80141e8:	2301      	movs	r3, #1
 80141ea:	e000      	b.n	80141ee <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80141ec:	2300      	movs	r3, #0
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3708      	adds	r7, #8
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	20001af8 	.word	0x20001af8

080141fc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b084      	sub	sp, #16
 8014200:	af00      	add	r7, sp, #0
 8014202:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014204:	4b22      	ldr	r3, [pc, #136]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014206:	f893 3020 	ldrb.w	r3, [r3, #32]
 801420a:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 801420c:	2300      	movs	r3, #0
 801420e:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8014210:	2300      	movs	r3, #0
 8014212:	73fb      	strb	r3, [r7, #15]
 8014214:	e032      	b.n	801427c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8014216:	4b1e      	ldr	r3, [pc, #120]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	781a      	ldrb	r2, [r3, #0]
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8014220:	4b1b      	ldr	r3, [pc, #108]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	785a      	ldrb	r2, [r3, #1]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801422a:	4b19      	ldr	r3, [pc, #100]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	789b      	ldrb	r3, [r3, #2]
 8014230:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8014232:	7b7b      	ldrb	r3, [r7, #13]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d005      	beq.n	8014244 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8014238:	4b15      	ldr	r3, [pc, #84]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	689b      	ldr	r3, [r3, #8]
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	4798      	blx	r3
 8014242:	e00b      	b.n	801425c <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8014244:	4b12      	ldr	r3, [pc, #72]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801424c:	4b10      	ldr	r3, [pc, #64]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 801424e:	685b      	ldr	r3, [r3, #4]
 8014250:	785b      	ldrb	r3, [r3, #1]
 8014252:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8014254:	4b0e      	ldr	r3, [pc, #56]	; (8014290 <LoRaMacConfirmQueueHandleCb+0x94>)
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	78db      	ldrb	r3, [r3, #3]
 801425a:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801425c:	f7ff ff06 	bl	801406c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8014260:	7b7b      	ldrb	r3, [r7, #13]
 8014262:	f083 0301 	eor.w	r3, r3, #1
 8014266:	b2db      	uxtb	r3, r3
 8014268:	2b00      	cmp	r3, #0
 801426a:	d004      	beq.n	8014276 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801426c:	f107 0308 	add.w	r3, r7, #8
 8014270:	4618      	mov	r0, r3
 8014272:	f7ff fec1 	bl	8013ff8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8014276:	7bfb      	ldrb	r3, [r7, #15]
 8014278:	3301      	adds	r3, #1
 801427a:	73fb      	strb	r3, [r7, #15]
 801427c:	7bfa      	ldrb	r2, [r7, #15]
 801427e:	7bbb      	ldrb	r3, [r7, #14]
 8014280:	429a      	cmp	r2, r3
 8014282:	d3c8      	bcc.n	8014216 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8014284:	bf00      	nop
 8014286:	bf00      	nop
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
 801428e:	bf00      	nop
 8014290:	20001af8 	.word	0x20001af8

08014294 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8014294:	b480      	push	{r7}
 8014296:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8014298:	4b03      	ldr	r3, [pc, #12]	; (80142a8 <LoRaMacConfirmQueueGetCnt+0x14>)
 801429a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801429e:	4618      	mov	r0, r3
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bc80      	pop	{r7}
 80142a4:	4770      	bx	lr
 80142a6:	bf00      	nop
 80142a8:	20001af8 	.word	0x20001af8

080142ac <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80142b0:	4b06      	ldr	r3, [pc, #24]	; (80142cc <LoRaMacConfirmQueueIsFull+0x20>)
 80142b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7ff fe3a 	bl	8013f30 <IsListFull>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d001      	beq.n	80142c6 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80142c2:	2301      	movs	r3, #1
 80142c4:	e000      	b.n	80142c8 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80142c6:	2300      	movs	r3, #0
    }
}
 80142c8:	4618      	mov	r0, r3
 80142ca:	bd80      	pop	{r7, pc}
 80142cc:	20001af8 	.word	0x20001af8

080142d0 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80142d0:	b580      	push	{r7, lr}
 80142d2:	b08e      	sub	sp, #56	; 0x38
 80142d4:	af00      	add	r7, sp, #0
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	607b      	str	r3, [r7, #4]
 80142da:	460b      	mov	r3, r1
 80142dc:	817b      	strh	r3, [r7, #10]
 80142de:	4613      	mov	r3, r2
 80142e0:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d101      	bne.n	80142ec <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80142e8:	2309      	movs	r3, #9
 80142ea:	e086      	b.n	80143fa <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80142ec:	2300      	movs	r3, #0
 80142ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80142f2:	2301      	movs	r3, #1
 80142f4:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80142f6:	2300      	movs	r3, #0
 80142f8:	623b      	str	r3, [r7, #32]
 80142fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142fe:	2200      	movs	r2, #0
 8014300:	601a      	str	r2, [r3, #0]
 8014302:	605a      	str	r2, [r3, #4]
 8014304:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 8014306:	2300      	movs	r3, #0
 8014308:	613b      	str	r3, [r7, #16]
 801430a:	f107 0314 	add.w	r3, r7, #20
 801430e:	2200      	movs	r2, #0
 8014310:	601a      	str	r2, [r3, #0]
 8014312:	605a      	str	r2, [r3, #4]
 8014314:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 8014316:	2301      	movs	r3, #1
 8014318:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801431a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801431e:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	b2db      	uxtb	r3, r3
 8014324:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	0a1b      	lsrs	r3, r3, #8
 801432a:	b2db      	uxtb	r3, r3
 801432c:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	0c1b      	lsrs	r3, r3, #16
 8014332:	b2db      	uxtb	r3, r3
 8014334:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	0e1b      	lsrs	r3, r3, #24
 801433a:	b2db      	uxtb	r3, r3
 801433c:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801433e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014340:	b2db      	uxtb	r3, r3
 8014342:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8014344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014346:	0a1b      	lsrs	r3, r3, #8
 8014348:	b2db      	uxtb	r3, r3
 801434a:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 801434c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801434e:	0c1b      	lsrs	r3, r3, #16
 8014350:	b2db      	uxtb	r3, r3
 8014352:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8014354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014356:	0e1b      	lsrs	r3, r3, #24
 8014358:	b2db      	uxtb	r3, r3
 801435a:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 801435c:	e048      	b.n	80143f0 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801435e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014360:	b2db      	uxtb	r3, r3
 8014362:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8014364:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014366:	3301      	adds	r3, #1
 8014368:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801436a:	f107 0320 	add.w	r3, r7, #32
 801436e:	7a7a      	ldrb	r2, [r7, #9]
 8014370:	f107 0010 	add.w	r0, r7, #16
 8014374:	2110      	movs	r1, #16
 8014376:	f7f8 fcee 	bl	800cd56 <SecureElementAesEncrypt>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d001      	beq.n	8014384 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014380:	230e      	movs	r3, #14
 8014382:	e03a      	b.n	80143fa <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8014384:	2300      	movs	r3, #0
 8014386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801438a:	e01e      	b.n	80143ca <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801438c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014390:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014394:	4413      	add	r3, r2
 8014396:	461a      	mov	r2, r3
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	4413      	add	r3, r2
 801439c:	7819      	ldrb	r1, [r3, #0]
 801439e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80143a2:	3338      	adds	r3, #56	; 0x38
 80143a4:	443b      	add	r3, r7
 80143a6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80143aa:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 80143ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80143b2:	4403      	add	r3, r0
 80143b4:	4618      	mov	r0, r3
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	4403      	add	r3, r0
 80143ba:	404a      	eors	r2, r1
 80143bc:	b2d2      	uxtb	r2, r2
 80143be:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80143c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80143c4:	3301      	adds	r3, #1
 80143c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80143ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80143ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80143d2:	2a10      	cmp	r2, #16
 80143d4:	bfa8      	it	ge
 80143d6:	2210      	movge	r2, #16
 80143d8:	b212      	sxth	r2, r2
 80143da:	4293      	cmp	r3, r2
 80143dc:	dbd6      	blt.n	801438c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80143de:	897b      	ldrh	r3, [r7, #10]
 80143e0:	3b10      	subs	r3, #16
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80143e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80143ea:	3310      	adds	r3, #16
 80143ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80143f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	dcb2      	bgt.n	801435e <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80143f8:	2300      	movs	r3, #0
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3738      	adds	r7, #56	; 0x38
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8014402:	b490      	push	{r4, r7}
 8014404:	b082      	sub	sp, #8
 8014406:	af00      	add	r7, sp, #0
 8014408:	4604      	mov	r4, r0
 801440a:	4608      	mov	r0, r1
 801440c:	4611      	mov	r1, r2
 801440e:	461a      	mov	r2, r3
 8014410:	4623      	mov	r3, r4
 8014412:	80fb      	strh	r3, [r7, #6]
 8014414:	4603      	mov	r3, r0
 8014416:	717b      	strb	r3, [r7, #5]
 8014418:	460b      	mov	r3, r1
 801441a:	713b      	strb	r3, [r7, #4]
 801441c:	4613      	mov	r3, r2
 801441e:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8014420:	69bb      	ldr	r3, [r7, #24]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d101      	bne.n	801442a <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014426:	2309      	movs	r3, #9
 8014428:	e04e      	b.n	80144c8 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	2249      	movs	r2, #73	; 0x49
 801442e:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 8014430:	69bb      	ldr	r3, [r7, #24]
 8014432:	3301      	adds	r3, #1
 8014434:	2200      	movs	r2, #0
 8014436:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8014438:	69bb      	ldr	r3, [r7, #24]
 801443a:	3302      	adds	r3, #2
 801443c:	2200      	movs	r2, #0
 801443e:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	3303      	adds	r3, #3
 8014444:	2200      	movs	r2, #0
 8014446:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8014448:	69bb      	ldr	r3, [r7, #24]
 801444a:	3304      	adds	r3, #4
 801444c:	2200      	movs	r2, #0
 801444e:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	3305      	adds	r3, #5
 8014454:	78fa      	ldrb	r2, [r7, #3]
 8014456:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	3306      	adds	r3, #6
 801445c:	693a      	ldr	r2, [r7, #16]
 801445e:	b2d2      	uxtb	r2, r2
 8014460:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8014462:	693b      	ldr	r3, [r7, #16]
 8014464:	0a1a      	lsrs	r2, r3, #8
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	3307      	adds	r3, #7
 801446a:	b2d2      	uxtb	r2, r2
 801446c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	0c1a      	lsrs	r2, r3, #16
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	3308      	adds	r3, #8
 8014476:	b2d2      	uxtb	r2, r2
 8014478:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	0e1a      	lsrs	r2, r3, #24
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	3309      	adds	r3, #9
 8014482:	b2d2      	uxtb	r2, r2
 8014484:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	330a      	adds	r3, #10
 801448a:	697a      	ldr	r2, [r7, #20]
 801448c:	b2d2      	uxtb	r2, r2
 801448e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	0a1a      	lsrs	r2, r3, #8
 8014494:	69bb      	ldr	r3, [r7, #24]
 8014496:	330b      	adds	r3, #11
 8014498:	b2d2      	uxtb	r2, r2
 801449a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	0c1a      	lsrs	r2, r3, #16
 80144a0:	69bb      	ldr	r3, [r7, #24]
 80144a2:	330c      	adds	r3, #12
 80144a4:	b2d2      	uxtb	r2, r2
 80144a6:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	0e1a      	lsrs	r2, r3, #24
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	330d      	adds	r3, #13
 80144b0:	b2d2      	uxtb	r2, r2
 80144b2:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80144b4:	69bb      	ldr	r3, [r7, #24]
 80144b6:	330e      	adds	r3, #14
 80144b8:	2200      	movs	r2, #0
 80144ba:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	330f      	adds	r3, #15
 80144c0:	88fa      	ldrh	r2, [r7, #6]
 80144c2:	b2d2      	uxtb	r2, r2
 80144c4:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80144c6:	2300      	movs	r3, #0
}
 80144c8:	4618      	mov	r0, r3
 80144ca:	3708      	adds	r7, #8
 80144cc:	46bd      	mov	sp, r7
 80144ce:	bc90      	pop	{r4, r7}
 80144d0:	4770      	bx	lr

080144d2 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80144d2:	b590      	push	{r4, r7, lr}
 80144d4:	b08b      	sub	sp, #44	; 0x2c
 80144d6:	af04      	add	r7, sp, #16
 80144d8:	6078      	str	r0, [r7, #4]
 80144da:	4608      	mov	r0, r1
 80144dc:	4611      	mov	r1, r2
 80144de:	461a      	mov	r2, r3
 80144e0:	4603      	mov	r3, r0
 80144e2:	807b      	strh	r3, [r7, #2]
 80144e4:	460b      	mov	r3, r1
 80144e6:	707b      	strb	r3, [r7, #1]
 80144e8:	4613      	mov	r3, r2
 80144ea:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d002      	beq.n	80144f8 <ComputeCmacB0+0x26>
 80144f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d101      	bne.n	80144fc <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80144f8:	2309      	movs	r3, #9
 80144fa:	e024      	b.n	8014546 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80144fc:	887b      	ldrh	r3, [r7, #2]
 80144fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014502:	d901      	bls.n	8014508 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014504:	230d      	movs	r3, #13
 8014506:	e01e      	b.n	8014546 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8014508:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 801450c:	783a      	ldrb	r2, [r7, #0]
 801450e:	7879      	ldrb	r1, [r7, #1]
 8014510:	8878      	ldrh	r0, [r7, #2]
 8014512:	f107 0308 	add.w	r3, r7, #8
 8014516:	9302      	str	r3, [sp, #8]
 8014518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451a:	9301      	str	r3, [sp, #4]
 801451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	4623      	mov	r3, r4
 8014522:	f7ff ff6e 	bl	8014402 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014526:	7879      	ldrb	r1, [r7, #1]
 8014528:	887a      	ldrh	r2, [r7, #2]
 801452a:	f107 0008 	add.w	r0, r7, #8
 801452e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	460b      	mov	r3, r1
 8014534:	6879      	ldr	r1, [r7, #4]
 8014536:	f7f8 fbc1 	bl	800ccbc <SecureElementComputeAesCmac>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d001      	beq.n	8014544 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014540:	230e      	movs	r3, #14
 8014542:	e000      	b.n	8014546 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014544:	2300      	movs	r3, #0
}
 8014546:	4618      	mov	r0, r3
 8014548:	371c      	adds	r7, #28
 801454a:	46bd      	mov	sp, r7
 801454c:	bd90      	pop	{r4, r7, pc}

0801454e <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801454e:	b590      	push	{r4, r7, lr}
 8014550:	b0cd      	sub	sp, #308	; 0x134
 8014552:	af04      	add	r7, sp, #16
 8014554:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8014558:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 801455c:	6020      	str	r0, [r4, #0]
 801455e:	460c      	mov	r4, r1
 8014560:	4610      	mov	r0, r2
 8014562:	4619      	mov	r1, r3
 8014564:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014568:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801456c:	4622      	mov	r2, r4
 801456e:	801a      	strh	r2, [r3, #0]
 8014570:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014574:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014578:	4602      	mov	r2, r0
 801457a:	701a      	strb	r2, [r3, #0]
 801457c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014580:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8014584:	460a      	mov	r2, r1
 8014586:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8014588:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801458c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d101      	bne.n	801459a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014596:	2309      	movs	r3, #9
 8014598:	e063      	b.n	8014662 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801459a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801459e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80145a2:	881b      	ldrh	r3, [r3, #0]
 80145a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145a8:	d901      	bls.n	80145ae <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80145aa:	230d      	movs	r3, #13
 80145ac:	e059      	b.n	8014662 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80145ae:	f107 030c 	add.w	r3, r7, #12
 80145b2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80145b6:	2100      	movs	r1, #0
 80145b8:	4618      	mov	r0, r3
 80145ba:	f003 fb41 	bl	8017c40 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80145be:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 80145c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80145c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80145ca:	781a      	ldrb	r2, [r3, #0]
 80145cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80145d0:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80145d4:	7819      	ldrb	r1, [r3, #0]
 80145d6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80145da:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80145de:	8818      	ldrh	r0, [r3, #0]
 80145e0:	f107 030c 	add.w	r3, r7, #12
 80145e4:	9302      	str	r3, [sp, #8]
 80145e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80145ea:	9301      	str	r3, [sp, #4]
 80145ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80145f0:	9300      	str	r3, [sp, #0]
 80145f2:	4623      	mov	r3, r4
 80145f4:	f7ff ff05 	bl	8014402 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80145f8:	f107 030c 	add.w	r3, r7, #12
 80145fc:	3310      	adds	r3, #16
 80145fe:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8014602:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 8014606:	8812      	ldrh	r2, [r2, #0]
 8014608:	f507 7190 	add.w	r1, r7, #288	; 0x120
 801460c:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 8014610:	6809      	ldr	r1, [r1, #0]
 8014612:	4618      	mov	r0, r3
 8014614:	f003 fad9 	bl	8017bca <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8014618:	2306      	movs	r3, #6
 801461a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801461e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014622:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8014626:	881b      	ldrh	r3, [r3, #0]
 8014628:	3310      	adds	r3, #16
 801462a:	b299      	uxth	r1, r3
 801462c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8014630:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	f107 000c 	add.w	r0, r7, #12
 801463a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801463e:	f7f8 fb5b 	bl	800ccf8 <SecureElementVerifyAesCmac>
 8014642:	4603      	mov	r3, r0
 8014644:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8014648:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801464c:	2b00      	cmp	r3, #0
 801464e:	d101      	bne.n	8014654 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8014650:	2300      	movs	r3, #0
 8014652:	e006      	b.n	8014662 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8014654:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8014658:	2b01      	cmp	r3, #1
 801465a:	d101      	bne.n	8014660 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 801465c:	2301      	movs	r3, #1
 801465e:	e000      	b.n	8014662 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014660:	230e      	movs	r3, #14
}
 8014662:	4618      	mov	r0, r3
 8014664:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8014668:	46bd      	mov	sp, r7
 801466a:	bd90      	pop	{r4, r7, pc}

0801466c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801466c:	b480      	push	{r7}
 801466e:	b085      	sub	sp, #20
 8014670:	af00      	add	r7, sp, #0
 8014672:	4603      	mov	r3, r0
 8014674:	6039      	str	r1, [r7, #0]
 8014676:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014678:	2300      	movs	r3, #0
 801467a:	73fb      	strb	r3, [r7, #15]
 801467c:	e011      	b.n	80146a2 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801467e:	7bfb      	ldrb	r3, [r7, #15]
 8014680:	4a0c      	ldr	r2, [pc, #48]	; (80146b4 <GetKeyAddrItem+0x48>)
 8014682:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014686:	79fa      	ldrb	r2, [r7, #7]
 8014688:	429a      	cmp	r2, r3
 801468a:	d107      	bne.n	801469c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801468c:	7bfb      	ldrb	r3, [r7, #15]
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	4a08      	ldr	r2, [pc, #32]	; (80146b4 <GetKeyAddrItem+0x48>)
 8014692:	441a      	add	r2, r3
 8014694:	683b      	ldr	r3, [r7, #0]
 8014696:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8014698:	2300      	movs	r3, #0
 801469a:	e006      	b.n	80146aa <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801469c:	7bfb      	ldrb	r3, [r7, #15]
 801469e:	3301      	adds	r3, #1
 80146a0:	73fb      	strb	r3, [r7, #15]
 80146a2:	7bfb      	ldrb	r3, [r7, #15]
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d9ea      	bls.n	801467e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80146a8:	230b      	movs	r3, #11
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3714      	adds	r7, #20
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bc80      	pop	{r7}
 80146b2:	4770      	bx	lr
 80146b4:	20000120 	.word	0x20000120

080146b8 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80146b8:	b580      	push	{r7, lr}
 80146ba:	b088      	sub	sp, #32
 80146bc:	af00      	add	r7, sp, #0
 80146be:	60b9      	str	r1, [r7, #8]
 80146c0:	607a      	str	r2, [r7, #4]
 80146c2:	461a      	mov	r2, r3
 80146c4:	4603      	mov	r3, r0
 80146c6:	73fb      	strb	r3, [r7, #15]
 80146c8:	4613      	mov	r3, r2
 80146ca:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80146cc:	2300      	movs	r3, #0
 80146ce:	613b      	str	r3, [r7, #16]
 80146d0:	f107 0314 	add.w	r3, r7, #20
 80146d4:	2200      	movs	r2, #0
 80146d6:	601a      	str	r2, [r3, #0]
 80146d8:	605a      	str	r2, [r3, #4]
 80146da:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 80146dc:	7bfb      	ldrb	r3, [r7, #15]
 80146de:	2b02      	cmp	r3, #2
 80146e0:	d002      	beq.n	80146e8 <DeriveSessionKey10x+0x30>
 80146e2:	2b03      	cmp	r3, #3
 80146e4:	d003      	beq.n	80146ee <DeriveSessionKey10x+0x36>
 80146e6:	e005      	b.n	80146f4 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 80146e8:	2301      	movs	r3, #1
 80146ea:	743b      	strb	r3, [r7, #16]
            break;
 80146ec:	e004      	b.n	80146f8 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80146ee:	2302      	movs	r3, #2
 80146f0:	743b      	strb	r3, [r7, #16]
            break;
 80146f2:	e001      	b.n	80146f8 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80146f4:	230a      	movs	r3, #10
 80146f6:	e02a      	b.n	801474e <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	0a1b      	lsrs	r3, r3, #8
 8014702:	b2db      	uxtb	r3, r3
 8014704:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8014706:	68bb      	ldr	r3, [r7, #8]
 8014708:	0c1b      	lsrs	r3, r3, #16
 801470a:	b2db      	uxtb	r3, r3
 801470c:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	b2db      	uxtb	r3, r3
 8014712:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	0a1b      	lsrs	r3, r3, #8
 8014718:	b2db      	uxtb	r3, r3
 801471a:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	0c1b      	lsrs	r3, r3, #16
 8014720:	b2db      	uxtb	r3, r3
 8014722:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8014724:	89bb      	ldrh	r3, [r7, #12]
 8014726:	b2db      	uxtb	r3, r3
 8014728:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801472a:	89bb      	ldrh	r3, [r7, #12]
 801472c:	0a1b      	lsrs	r3, r3, #8
 801472e:	b29b      	uxth	r3, r3
 8014730:	b2db      	uxtb	r3, r3
 8014732:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8014734:	7bfa      	ldrb	r2, [r7, #15]
 8014736:	f107 0310 	add.w	r3, r7, #16
 801473a:	2101      	movs	r1, #1
 801473c:	4618      	mov	r0, r3
 801473e:	f7f8 fb71 	bl	800ce24 <SecureElementDeriveAndStoreKey>
 8014742:	4603      	mov	r3, r0
 8014744:	2b00      	cmp	r3, #0
 8014746:	d001      	beq.n	801474c <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014748:	230e      	movs	r3, #14
 801474a:	e000      	b.n	801474e <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801474c:	2300      	movs	r3, #0
}
 801474e:	4618      	mov	r0, r3
 8014750:	3720      	adds	r7, #32
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
	...

08014758 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	4603      	mov	r3, r0
 8014760:	6039      	str	r1, [r7, #0]
 8014762:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d101      	bne.n	801476e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801476a:	2309      	movs	r3, #9
 801476c:	e03b      	b.n	80147e6 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801476e:	79fb      	ldrb	r3, [r7, #7]
 8014770:	3b01      	subs	r3, #1
 8014772:	2b03      	cmp	r3, #3
 8014774:	d834      	bhi.n	80147e0 <GetLastFcntDown+0x88>
 8014776:	a201      	add	r2, pc, #4	; (adr r2, 801477c <GetLastFcntDown+0x24>)
 8014778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801477c:	0801478d 	.word	0x0801478d
 8014780:	080147a5 	.word	0x080147a5
 8014784:	080147bd 	.word	0x080147bd
 8014788:	080147d5 	.word	0x080147d5
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801478c:	4b18      	ldr	r3, [pc, #96]	; (80147f0 <GetLastFcntDown+0x98>)
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	691a      	ldr	r2, [r3, #16]
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8014796:	4b16      	ldr	r3, [pc, #88]	; (80147f0 <GetLastFcntDown+0x98>)
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	4b15      	ldr	r3, [pc, #84]	; (80147f0 <GetLastFcntDown+0x98>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	6912      	ldr	r2, [r2, #16]
 80147a0:	621a      	str	r2, [r3, #32]
            break;
 80147a2:	e01f      	b.n	80147e4 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80147a4:	4b12      	ldr	r3, [pc, #72]	; (80147f0 <GetLastFcntDown+0x98>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	695a      	ldr	r2, [r3, #20]
 80147aa:	683b      	ldr	r3, [r7, #0]
 80147ac:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 80147ae:	4b10      	ldr	r3, [pc, #64]	; (80147f0 <GetLastFcntDown+0x98>)
 80147b0:	681a      	ldr	r2, [r3, #0]
 80147b2:	4b0f      	ldr	r3, [pc, #60]	; (80147f0 <GetLastFcntDown+0x98>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	6952      	ldr	r2, [r2, #20]
 80147b8:	621a      	str	r2, [r3, #32]
            break;
 80147ba:	e013      	b.n	80147e4 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80147bc:	4b0c      	ldr	r3, [pc, #48]	; (80147f0 <GetLastFcntDown+0x98>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	699a      	ldr	r2, [r3, #24]
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80147c6:	4b0a      	ldr	r3, [pc, #40]	; (80147f0 <GetLastFcntDown+0x98>)
 80147c8:	681a      	ldr	r2, [r3, #0]
 80147ca:	4b09      	ldr	r3, [pc, #36]	; (80147f0 <GetLastFcntDown+0x98>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	6992      	ldr	r2, [r2, #24]
 80147d0:	621a      	str	r2, [r3, #32]
            break;
 80147d2:	e007      	b.n	80147e4 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80147d4:	4b06      	ldr	r3, [pc, #24]	; (80147f0 <GetLastFcntDown+0x98>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	69da      	ldr	r2, [r3, #28]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	601a      	str	r2, [r3, #0]
            break;
 80147de:	e001      	b.n	80147e4 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80147e0:	2305      	movs	r3, #5
 80147e2:	e000      	b.n	80147e6 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	370c      	adds	r7, #12
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bc80      	pop	{r7}
 80147ee:	4770      	bx	lr
 80147f0:	20001b1c 	.word	0x20001b1c

080147f4 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b084      	sub	sp, #16
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	4603      	mov	r3, r0
 80147fc:	6039      	str	r1, [r7, #0]
 80147fe:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8014800:	2300      	movs	r3, #0
 8014802:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8014804:	f107 020c 	add.w	r2, r7, #12
 8014808:	79fb      	ldrb	r3, [r7, #7]
 801480a:	4611      	mov	r1, r2
 801480c:	4618      	mov	r0, r3
 801480e:	f7ff ffa3 	bl	8014758 <GetLastFcntDown>
 8014812:	4603      	mov	r3, r0
 8014814:	2b00      	cmp	r3, #0
 8014816:	d001      	beq.n	801481c <CheckFCntDown+0x28>
    {
        return false;
 8014818:	2300      	movs	r3, #0
 801481a:	e00a      	b.n	8014832 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	683a      	ldr	r2, [r7, #0]
 8014820:	429a      	cmp	r2, r3
 8014822:	d803      	bhi.n	801482c <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 8014824:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8014826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801482a:	d101      	bne.n	8014830 <CheckFCntDown+0x3c>
    {
        return true;
 801482c:	2301      	movs	r3, #1
 801482e:	e000      	b.n	8014832 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8014830:	2300      	movs	r3, #0
    }
}
 8014832:	4618      	mov	r0, r3
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
	...

0801483c <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	4603      	mov	r3, r0
 8014844:	6039      	str	r1, [r7, #0]
 8014846:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8014848:	79fb      	ldrb	r3, [r7, #7]
 801484a:	3b01      	subs	r3, #1
 801484c:	2b03      	cmp	r3, #3
 801484e:	d81f      	bhi.n	8014890 <UpdateFCntDown+0x54>
 8014850:	a201      	add	r2, pc, #4	; (adr r2, 8014858 <UpdateFCntDown+0x1c>)
 8014852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014856:	bf00      	nop
 8014858:	08014869 	.word	0x08014869
 801485c:	08014873 	.word	0x08014873
 8014860:	0801487d 	.word	0x0801487d
 8014864:	08014887 	.word	0x08014887
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8014868:	4b0c      	ldr	r3, [pc, #48]	; (801489c <UpdateFCntDown+0x60>)
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	683a      	ldr	r2, [r7, #0]
 801486e:	611a      	str	r2, [r3, #16]
            break;
 8014870:	e00f      	b.n	8014892 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8014872:	4b0a      	ldr	r3, [pc, #40]	; (801489c <UpdateFCntDown+0x60>)
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	615a      	str	r2, [r3, #20]
            break;
 801487a:	e00a      	b.n	8014892 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801487c:	4b07      	ldr	r3, [pc, #28]	; (801489c <UpdateFCntDown+0x60>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	683a      	ldr	r2, [r7, #0]
 8014882:	619a      	str	r2, [r3, #24]
            break;
 8014884:	e005      	b.n	8014892 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8014886:	4b05      	ldr	r3, [pc, #20]	; (801489c <UpdateFCntDown+0x60>)
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	683a      	ldr	r2, [r7, #0]
 801488c:	61da      	str	r2, [r3, #28]
            break;
 801488e:	e000      	b.n	8014892 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8014890:	bf00      	nop
    }
}
 8014892:	bf00      	nop
 8014894:	370c      	adds	r7, #12
 8014896:	46bd      	mov	sp, r7
 8014898:	bc80      	pop	{r7}
 801489a:	4770      	bx	lr
 801489c:	20001b1c 	.word	0x20001b1c

080148a0 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 80148a0:	b480      	push	{r7}
 80148a2:	b083      	sub	sp, #12
 80148a4:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 80148a6:	4b18      	ldr	r3, [pc, #96]	; (8014908 <ResetFCnts+0x68>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	2200      	movs	r2, #0
 80148ac:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80148ae:	4b16      	ldr	r3, [pc, #88]	; (8014908 <ResetFCnts+0x68>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f04f 32ff 	mov.w	r2, #4294967295
 80148b6:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80148b8:	4b13      	ldr	r3, [pc, #76]	; (8014908 <ResetFCnts+0x68>)
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	f04f 32ff 	mov.w	r2, #4294967295
 80148c0:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80148c2:	4b11      	ldr	r3, [pc, #68]	; (8014908 <ResetFCnts+0x68>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f04f 32ff 	mov.w	r2, #4294967295
 80148ca:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 80148cc:	4b0e      	ldr	r3, [pc, #56]	; (8014908 <ResetFCnts+0x68>)
 80148ce:	681a      	ldr	r2, [r3, #0]
 80148d0:	4b0d      	ldr	r3, [pc, #52]	; (8014908 <ResetFCnts+0x68>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	6992      	ldr	r2, [r2, #24]
 80148d6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80148d8:	2300      	movs	r3, #0
 80148da:	607b      	str	r3, [r7, #4]
 80148dc:	e00b      	b.n	80148f6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 80148de:	4b0a      	ldr	r3, [pc, #40]	; (8014908 <ResetFCnts+0x68>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	3306      	adds	r3, #6
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4413      	add	r3, r2
 80148ea:	f04f 32ff 	mov.w	r2, #4294967295
 80148ee:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	3301      	adds	r3, #1
 80148f4:	607b      	str	r3, [r7, #4]
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	ddf0      	ble.n	80148de <ResetFCnts+0x3e>
    }
}
 80148fc:	bf00      	nop
 80148fe:	bf00      	nop
 8014900:	370c      	adds	r7, #12
 8014902:	46bd      	mov	sp, r7
 8014904:	bc80      	pop	{r7}
 8014906:	4770      	bx	lr
 8014908:	20001b1c 	.word	0x20001b1c

0801490c <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d101      	bne.n	801491e <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 801491a:	2308      	movs	r3, #8
 801491c:	e01c      	b.n	8014958 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 801491e:	4a10      	ldr	r2, [pc, #64]	; (8014960 <LoRaMacCryptoInit+0x54>)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8014924:	4b0e      	ldr	r3, [pc, #56]	; (8014960 <LoRaMacCryptoInit+0x54>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	2228      	movs	r2, #40	; 0x28
 801492a:	2100      	movs	r1, #0
 801492c:	4618      	mov	r0, r3
 801492e:	f003 f987 	bl	8017c40 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8014932:	4b0b      	ldr	r3, [pc, #44]	; (8014960 <LoRaMacCryptoInit+0x54>)
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	2201      	movs	r2, #1
 8014938:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 801493a:	4b09      	ldr	r3, [pc, #36]	; (8014960 <LoRaMacCryptoInit+0x54>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2201      	movs	r2, #1
 8014940:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8014942:	4b07      	ldr	r3, [pc, #28]	; (8014960 <LoRaMacCryptoInit+0x54>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	2201      	movs	r2, #1
 8014948:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 801494a:	4b05      	ldr	r3, [pc, #20]	; (8014960 <LoRaMacCryptoInit+0x54>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	2200      	movs	r2, #0
 8014950:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014952:	f7ff ffa5 	bl	80148a0 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014956:	2300      	movs	r3, #0
}
 8014958:	4618      	mov	r0, r3
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	20001b1c 	.word	0x20001b1c

08014964 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8014964:	b480      	push	{r7}
 8014966:	b083      	sub	sp, #12
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801496c:	4b04      	ldr	r3, [pc, #16]	; (8014980 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	687a      	ldr	r2, [r7, #4]
 8014972:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	370c      	adds	r7, #12
 801497a:	46bd      	mov	sp, r7
 801497c:	bc80      	pop	{r7}
 801497e:	4770      	bx	lr
 8014980:	20001b1c 	.word	0x20001b1c

08014984 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8014984:	b480      	push	{r7}
 8014986:	b083      	sub	sp, #12
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d101      	bne.n	8014996 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014992:	2309      	movs	r3, #9
 8014994:	e006      	b.n	80149a4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8014996:	4b06      	ldr	r3, [pc, #24]	; (80149b0 <LoRaMacCryptoGetFCntUp+0x2c>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	1c5a      	adds	r2, r3, #1
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80149a2:	2300      	movs	r3, #0
}
 80149a4:	4618      	mov	r0, r3
 80149a6:	370c      	adds	r7, #12
 80149a8:	46bd      	mov	sp, r7
 80149aa:	bc80      	pop	{r7}
 80149ac:	4770      	bx	lr
 80149ae:	bf00      	nop
 80149b0:	20001b1c 	.word	0x20001b1c

080149b4 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b088      	sub	sp, #32
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	4603      	mov	r3, r0
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	607a      	str	r2, [r7, #4]
 80149c0:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 80149c2:	2300      	movs	r3, #0
 80149c4:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 80149c6:	2300      	movs	r3, #0
 80149c8:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 80149ca:	2312      	movs	r3, #18
 80149cc:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d101      	bne.n	80149d8 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80149d4:	2309      	movs	r3, #9
 80149d6:	e035      	b.n	8014a44 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 80149d8:	f107 0214 	add.w	r2, r7, #20
 80149dc:	7bfb      	ldrb	r3, [r7, #15]
 80149de:	4611      	mov	r1, r2
 80149e0:	4618      	mov	r0, r3
 80149e2:	f7ff feb9 	bl	8014758 <GetLastFcntDown>
 80149e6:	4603      	mov	r3, r0
 80149e8:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80149ea:	7efb      	ldrb	r3, [r7, #27]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d001      	beq.n	80149f4 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 80149f0:	7efb      	ldrb	r3, [r7, #27]
 80149f2:	e027      	b.n	8014a44 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149fa:	d103      	bne.n	8014a04 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	68ba      	ldr	r2, [r7, #8]
 8014a00:	601a      	str	r2, [r3, #0]
 8014a02:	e01e      	b.n	8014a42 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	b29b      	uxth	r3, r3
 8014a08:	68ba      	ldr	r2, [r7, #8]
 8014a0a:	1ad3      	subs	r3, r2, r3
 8014a0c:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8014a0e:	69fb      	ldr	r3, [r7, #28]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	dd05      	ble.n	8014a20 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8014a14:	697a      	ldr	r2, [r7, #20]
 8014a16:	69fb      	ldr	r3, [r7, #28]
 8014a18:	441a      	add	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	601a      	str	r2, [r3, #0]
 8014a1e:	e010      	b.n	8014a42 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8014a20:	69fb      	ldr	r3, [r7, #28]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d104      	bne.n	8014a30 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8014a26:	697a      	ldr	r2, [r7, #20]
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8014a2c:	2307      	movs	r3, #7
 8014a2e:	e009      	b.n	8014a44 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8014a30:	697b      	ldr	r3, [r7, #20]
 8014a32:	0c1b      	lsrs	r3, r3, #16
 8014a34:	041b      	lsls	r3, r3, #16
 8014a36:	68ba      	ldr	r2, [r7, #8]
 8014a38:	4413      	add	r3, r2
 8014a3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a42:	2300      	movs	r3, #0
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3720      	adds	r7, #32
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014a4c:	b480      	push	{r7}
 8014a4e:	b085      	sub	sp, #20
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d101      	bne.n	8014a5e <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014a5a:	2309      	movs	r3, #9
 8014a5c:	e017      	b.n	8014a8e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014a5e:	2300      	movs	r3, #0
 8014a60:	60fb      	str	r3, [r7, #12]
 8014a62:	e010      	b.n	8014a86 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8014a64:	4b0c      	ldr	r3, [pc, #48]	; (8014a98 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014a66:	6819      	ldr	r1, [r3, #0]
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	222c      	movs	r2, #44	; 0x2c
 8014a6c:	fb02 f303 	mul.w	r3, r2, r3
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	4413      	add	r3, r2
 8014a74:	68fa      	ldr	r2, [r7, #12]
 8014a76:	3206      	adds	r2, #6
 8014a78:	0092      	lsls	r2, r2, #2
 8014a7a:	440a      	add	r2, r1
 8014a7c:	3204      	adds	r2, #4
 8014a7e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	3301      	adds	r3, #1
 8014a84:	60fb      	str	r3, [r7, #12]
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	ddeb      	ble.n	8014a64 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3714      	adds	r7, #20
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bc80      	pop	{r7}
 8014a96:	4770      	bx	lr
 8014a98:	20001b1c 	.word	0x20001b1c

08014a9c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014a9c:	b580      	push	{r7, lr}
 8014a9e:	b082      	sub	sp, #8
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	6039      	str	r1, [r7, #0]
 8014aa6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014aa8:	79fb      	ldrb	r3, [r7, #7]
 8014aaa:	6839      	ldr	r1, [r7, #0]
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f8 f8a7 	bl	800cc00 <SecureElementSetKey>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d001      	beq.n	8014abc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ab8:	230e      	movs	r3, #14
 8014aba:	e018      	b.n	8014aee <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 8014abc:	79fb      	ldrb	r3, [r7, #7]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d114      	bne.n	8014aec <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8014ac2:	4b0d      	ldr	r3, [pc, #52]	; (8014af8 <LoRaMacCryptoSetKey+0x5c>)
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	789b      	ldrb	r3, [r3, #2]
 8014ac8:	79fa      	ldrb	r2, [r7, #7]
 8014aca:	4611      	mov	r1, r2
 8014acc:	4618      	mov	r0, r3
 8014ace:	f000 fa39 	bl	8014f44 <LoRaMacCryptoDeriveMcRootKey>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d001      	beq.n	8014adc <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ad8:	230e      	movs	r3, #14
 8014ada:	e008      	b.n	8014aee <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8014adc:	2004      	movs	r0, #4
 8014ade:	f000 fa5c 	bl	8014f9a <LoRaMacCryptoDeriveMcKEKey>
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d001      	beq.n	8014aec <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014ae8:	230e      	movs	r3, #14
 8014aea:	e000      	b.n	8014aee <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014aec:	2300      	movs	r3, #0
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3708      	adds	r7, #8
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	20001b1c 	.word	0x20001b1c

08014afc <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b086      	sub	sp, #24
 8014b00:	af02      	add	r7, sp, #8
 8014b02:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d101      	bne.n	8014b0e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b0a:	2309      	movs	r3, #9
 8014b0c:	e02d      	b.n	8014b6a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8014b0e:	2301      	movs	r3, #1
 8014b10:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8014b12:	4b18      	ldr	r3, [pc, #96]	; (8014b74 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	889a      	ldrh	r2, [r3, #4]
 8014b18:	3201      	adds	r2, #1
 8014b1a:	b292      	uxth	r2, r2
 8014b1c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8014b1e:	4b15      	ldr	r3, [pc, #84]	; (8014b74 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	889a      	ldrh	r2, [r3, #4]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014b28:	6878      	ldr	r0, [r7, #4]
 8014b2a:	f000 fc18 	bl	801535e <LoRaMacSerializerJoinRequest>
 8014b2e:	4603      	mov	r3, r0
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d001      	beq.n	8014b38 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014b34:	2310      	movs	r3, #16
 8014b36:	e018      	b.n	8014b6a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6819      	ldr	r1, [r3, #0]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	3318      	adds	r3, #24
 8014b40:	7bfa      	ldrb	r2, [r7, #15]
 8014b42:	9300      	str	r3, [sp, #0]
 8014b44:	4613      	mov	r3, r2
 8014b46:	2213      	movs	r2, #19
 8014b48:	2000      	movs	r0, #0
 8014b4a:	f7f8 f8b7 	bl	800ccbc <SecureElementComputeAesCmac>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d001      	beq.n	8014b58 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014b54:	230e      	movs	r3, #14
 8014b56:	e008      	b.n	8014b6a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f000 fc00 	bl	801535e <LoRaMacSerializerJoinRequest>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d001      	beq.n	8014b68 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014b64:	2310      	movs	r3, #16
 8014b66:	e000      	b.n	8014b6a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014b68:	2300      	movs	r3, #0
}
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}
 8014b72:	bf00      	nop
 8014b74:	20001b1c 	.word	0x20001b1c

08014b78 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014b78:	b590      	push	{r4, r7, lr}
 8014b7a:	b097      	sub	sp, #92	; 0x5c
 8014b7c:	af04      	add	r7, sp, #16
 8014b7e:	4603      	mov	r3, r0
 8014b80:	60b9      	str	r1, [r7, #8]
 8014b82:	607a      	str	r2, [r7, #4]
 8014b84:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d002      	beq.n	8014b92 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8014b8c:	68bb      	ldr	r3, [r7, #8]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d101      	bne.n	8014b96 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014b92:	2309      	movs	r3, #9
 8014b94:	e0bd      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014b96:	2312      	movs	r3, #18
 8014b98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	61bb      	str	r3, [r7, #24]
 8014ba0:	f107 031c 	add.w	r3, r7, #28
 8014ba4:	221d      	movs	r2, #29
 8014ba6:	2100      	movs	r1, #0
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f007 fcc1 	bl	801c530 <memset>
    uint8_t versionMinor         = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8014bb2:	4b5a      	ldr	r3, [pc, #360]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	889b      	ldrh	r3, [r3, #4]
 8014bb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681c      	ldr	r4, [r3, #0]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	791b      	ldrb	r3, [r3, #4]
 8014bc4:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8014bc8:	7bf8      	ldrb	r0, [r7, #15]
 8014bca:	f107 0217 	add.w	r2, r7, #23
 8014bce:	9202      	str	r2, [sp, #8]
 8014bd0:	f107 0218 	add.w	r2, r7, #24
 8014bd4:	9201      	str	r2, [sp, #4]
 8014bd6:	9300      	str	r3, [sp, #0]
 8014bd8:	4623      	mov	r3, r4
 8014bda:	460a      	mov	r2, r1
 8014bdc:	68b9      	ldr	r1, [r7, #8]
 8014bde:	f7f8 f961 	bl	800cea4 <SecureElementProcessJoinAccept>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d001      	beq.n	8014bec <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014be8:	230e      	movs	r3, #14
 8014bea:	e092      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6818      	ldr	r0, [r3, #0]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	791b      	ldrb	r3, [r3, #4]
 8014bf4:	b29a      	uxth	r2, r3
 8014bf6:	f107 0318 	add.w	r3, r7, #24
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	f002 ffe5 	bl	8017bca <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014c00:	6878      	ldr	r0, [r7, #4]
 8014c02:	f000 f9ed 	bl	8014fe0 <LoRaMacParserJoinAccept>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d001      	beq.n	8014c10 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014c0c:	230f      	movs	r3, #15
 8014c0e:	e080      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	799b      	ldrb	r3, [r3, #6]
 8014c14:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	79db      	ldrb	r3, [r3, #7]
 8014c1a:	021b      	lsls	r3, r3, #8
 8014c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c1e:	4313      	orrs	r3, r2
 8014c20:	643b      	str	r3, [r7, #64]	; 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	7a1b      	ldrb	r3, [r3, #8]
 8014c26:	041b      	lsls	r3, r3, #16
 8014c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c2a:	4313      	orrs	r3, r2
 8014c2c:	643b      	str	r3, [r7, #64]	; 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8014c2e:	4b3b      	ldr	r3, [pc, #236]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	689b      	ldr	r3, [r3, #8]
 8014c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d010      	beq.n	8014c5c <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8014c3a:	4b38      	ldr	r3, [pc, #224]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c40:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8014c42:	7dfb      	ldrb	r3, [r7, #23]
 8014c44:	2100      	movs	r1, #0
 8014c46:	4618      	mov	r0, r3
 8014c48:	f000 f97c 	bl	8014f44 <LoRaMacCryptoDeriveMcRootKey>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d005      	beq.n	8014c66 <LoRaMacCryptoHandleJoinAccept+0xee>
 8014c5a:	e001      	b.n	8014c60 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014c5c:	2303      	movs	r3, #3
 8014c5e:	e058      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8014c60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014c64:	e055      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014c66:	2004      	movs	r0, #4
 8014c68:	f000 f997 	bl	8014f9a <LoRaMacCryptoDeriveMcKEKey>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d002      	beq.n	8014c80 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8014c7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014c7e:	e048      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	7a5b      	ldrb	r3, [r3, #9]
 8014c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	7a9b      	ldrb	r3, [r3, #10]
 8014c8a:	021b      	lsls	r3, r3, #8
 8014c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c8e:	4313      	orrs	r3, r2
 8014c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	7adb      	ldrb	r3, [r3, #11]
 8014c96:	041b      	lsls	r3, r3, #16
 8014c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014c9a:	4313      	orrs	r3, r2
 8014c9c:	63fb      	str	r3, [r7, #60]	; 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8014c9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014ca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ca4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014ca6:	2003      	movs	r0, #3
 8014ca8:	f7ff fd06 	bl	80146b8 <DeriveSessionKey10x>
 8014cac:	4603      	mov	r3, r0
 8014cae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014cb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d002      	beq.n	8014cc0 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8014cba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014cbe:	e028      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8014cc0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014cc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014cc8:	2002      	movs	r0, #2
 8014cca:	f7ff fcf5 	bl	80146b8 <DeriveSessionKey10x>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014cd4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d002      	beq.n	8014ce2 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8014cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014ce0:	e017      	b.n	8014d12 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8014ce2:	4b0e      	ldr	r3, [pc, #56]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	7dfa      	ldrb	r2, [r7, #23]
 8014ce8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8014cea:	4b0c      	ldr	r3, [pc, #48]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014cec:	681b      	ldr	r3, [r3, #0]
 8014cee:	2200      	movs	r2, #0
 8014cf0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014cf2:	4b0a      	ldr	r3, [pc, #40]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8014cfa:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014cfc:	4b07      	ldr	r3, [pc, #28]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f04f 32ff 	mov.w	r2, #4294967295
 8014d04:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014d06:	4b05      	ldr	r3, [pc, #20]	; (8014d1c <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014d0e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8014d10:	2300      	movs	r3, #0
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	374c      	adds	r7, #76	; 0x4c
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd90      	pop	{r4, r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	20001b1c 	.word	0x20001b1c

08014d20 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014d20:	b590      	push	{r4, r7, lr}
 8014d22:	b08b      	sub	sp, #44	; 0x2c
 8014d24:	af04      	add	r7, sp, #16
 8014d26:	60f8      	str	r0, [r7, #12]
 8014d28:	607b      	str	r3, [r7, #4]
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	72fb      	strb	r3, [r7, #11]
 8014d2e:	4613      	mov	r3, r2
 8014d30:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014d32:	2312      	movs	r3, #18
 8014d34:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014d36:	2303      	movs	r3, #3
 8014d38:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d101      	bne.n	8014d44 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014d40:	2309      	movs	r3, #9
 8014d42:	e05f      	b.n	8014e04 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8014d44:	4b31      	ldr	r3, [pc, #196]	; (8014e0c <LoRaMacCryptoSecureMessage+0xec>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	68db      	ldr	r3, [r3, #12]
 8014d4a:	68fa      	ldr	r2, [r7, #12]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d201      	bcs.n	8014d54 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014d50:	2306      	movs	r3, #6
 8014d52:	e057      	b.n	8014e04 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d101      	bne.n	8014d62 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014d5e:	2302      	movs	r3, #2
 8014d60:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8014d62:	4b2a      	ldr	r3, [pc, #168]	; (8014e0c <LoRaMacCryptoSecureMessage+0xec>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	68fa      	ldr	r2, [r7, #12]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d916      	bls.n	8014d9c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d78:	b219      	sxth	r1, r3
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	689c      	ldr	r4, [r3, #8]
 8014d7e:	7dfa      	ldrb	r2, [r7, #23]
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	9301      	str	r3, [sp, #4]
 8014d84:	2300      	movs	r3, #0
 8014d86:	9300      	str	r3, [sp, #0]
 8014d88:	4623      	mov	r3, r4
 8014d8a:	f7ff faa1 	bl	80142d0 <PayloadEncrypt>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014d92:	7dbb      	ldrb	r3, [r7, #22]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d001      	beq.n	8014d9c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8014d98:	7dbb      	ldrb	r3, [r7, #22]
 8014d9a:	e033      	b.n	8014e04 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f000 fb60 	bl	8015462 <LoRaMacSerializerData>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d001      	beq.n	8014dac <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014da8:	2310      	movs	r3, #16
 8014daa:	e02b      	b.n	8014e04 <LoRaMacCryptoSecureMessage+0xe4>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014dac:	2302      	movs	r3, #2
 8014dae:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6818      	ldr	r0, [r3, #0]
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	791b      	ldrb	r3, [r3, #4]
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	3b04      	subs	r3, #4
 8014dbc:	b299      	uxth	r1, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	689b      	ldr	r3, [r3, #8]
 8014dc2:	687a      	ldr	r2, [r7, #4]
 8014dc4:	322c      	adds	r2, #44	; 0x2c
 8014dc6:	7dfc      	ldrb	r4, [r7, #23]
 8014dc8:	9203      	str	r2, [sp, #12]
 8014dca:	68fa      	ldr	r2, [r7, #12]
 8014dcc:	9202      	str	r2, [sp, #8]
 8014dce:	9301      	str	r3, [sp, #4]
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	9300      	str	r3, [sp, #0]
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	4622      	mov	r2, r4
 8014dd8:	f7ff fb7b 	bl	80144d2 <ComputeCmacB0>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014de0:	7dbb      	ldrb	r3, [r7, #22]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d001      	beq.n	8014dea <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8014de6:	7dbb      	ldrb	r3, [r7, #22]
 8014de8:	e00c      	b.n	8014e04 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 fb39 	bl	8015462 <LoRaMacSerializerData>
 8014df0:	4603      	mov	r3, r0
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d001      	beq.n	8014dfa <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014df6:	2310      	movs	r3, #16
 8014df8:	e004      	b.n	8014e04 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8014dfa:	4b04      	ldr	r3, [pc, #16]	; (8014e0c <LoRaMacCryptoSecureMessage+0xec>)
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	68fa      	ldr	r2, [r7, #12]
 8014e00:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8014e02:	2300      	movs	r3, #0
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	371c      	adds	r7, #28
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd90      	pop	{r4, r7, pc}
 8014e0c:	20001b1c 	.word	0x20001b1c

08014e10 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014e10:	b590      	push	{r4, r7, lr}
 8014e12:	b08b      	sub	sp, #44	; 0x2c
 8014e14:	af04      	add	r7, sp, #16
 8014e16:	60b9      	str	r1, [r7, #8]
 8014e18:	607b      	str	r3, [r7, #4]
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	73fb      	strb	r3, [r7, #15]
 8014e1e:	4613      	mov	r3, r2
 8014e20:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8014e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d101      	bne.n	8014e2c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014e28:	2309      	movs	r3, #9
 8014e2a:	e084      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014e2c:	7bbb      	ldrb	r3, [r7, #14]
 8014e2e:	6879      	ldr	r1, [r7, #4]
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7ff fcdf 	bl	80147f4 <CheckFCntDown>
 8014e36:	4603      	mov	r3, r0
 8014e38:	f083 0301 	eor.w	r3, r3, #1
 8014e3c:	b2db      	uxtb	r3, r3
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d001      	beq.n	8014e46 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014e42:	2306      	movs	r3, #6
 8014e44:	e077      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014e46:	2312      	movs	r3, #18
 8014e48:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014e4a:	2303      	movs	r3, #3
 8014e4c:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8014e4e:	2302      	movs	r3, #2
 8014e50:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014e54:	f000 f98f 	bl	8015176 <LoRaMacParserData>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d001      	beq.n	8014e62 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014e5e:	230f      	movs	r3, #15
 8014e60:	e069      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014e62:	f107 0210 	add.w	r2, r7, #16
 8014e66:	7bfb      	ldrb	r3, [r7, #15]
 8014e68:	4611      	mov	r1, r2
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f7ff fbfe 	bl	801466c <GetKeyAddrItem>
 8014e70:	4603      	mov	r3, r0
 8014e72:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014e74:	7d7b      	ldrb	r3, [r7, #21]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d001      	beq.n	8014e7e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8014e7a:	7d7b      	ldrb	r3, [r7, #21]
 8014e7c:	e05b      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014e7e:	693b      	ldr	r3, [r7, #16]
 8014e80:	785b      	ldrb	r3, [r3, #1]
 8014e82:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8014e84:	693b      	ldr	r3, [r7, #16]
 8014e86:	789b      	ldrb	r3, [r3, #2]
 8014e88:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e8c:	689b      	ldr	r3, [r3, #8]
 8014e8e:	68ba      	ldr	r2, [r7, #8]
 8014e90:	429a      	cmp	r2, r3
 8014e92:	d001      	beq.n	8014e98 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014e94:	2302      	movs	r3, #2
 8014e96:	e04e      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e9a:	7b1b      	ldrb	r3, [r3, #12]
 8014e9c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8014ea0:	b2db      	uxtb	r3, r3
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	bf14      	ite	ne
 8014ea6:	2301      	movne	r3, #1
 8014ea8:	2300      	moveq	r3, #0
 8014eaa:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8014eac:	4b24      	ldr	r3, [pc, #144]	; (8014f40 <LoRaMacCryptoUnsecureMessage+0x130>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	789b      	ldrb	r3, [r3, #2]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d101      	bne.n	8014eba <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ebc:	6818      	ldr	r0, [r3, #0]
 8014ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec0:	791b      	ldrb	r3, [r3, #4]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	3b04      	subs	r3, #4
 8014ec6:	b299      	uxth	r1, r3
 8014ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ecc:	7dbc      	ldrb	r4, [r7, #22]
 8014ece:	7d3a      	ldrb	r2, [r7, #20]
 8014ed0:	9303      	str	r3, [sp, #12]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	9302      	str	r3, [sp, #8]
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	9301      	str	r3, [sp, #4]
 8014eda:	2301      	movs	r3, #1
 8014edc:	9300      	str	r3, [sp, #0]
 8014ede:	4623      	mov	r3, r4
 8014ee0:	f7ff fb35 	bl	801454e <VerifyCmacB0>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014ee8:	7d7b      	ldrb	r3, [r7, #21]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d001      	beq.n	8014ef2 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8014eee:	7d7b      	ldrb	r3, [r7, #21]
 8014ef0:	e021      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d101      	bne.n	8014f00 <LoRaMacCryptoUnsecureMessage+0xf0>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8014efc:	2302      	movs	r3, #2
 8014efe:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f0a:	b219      	sxth	r1, r3
 8014f0c:	7dfa      	ldrb	r2, [r7, #23]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	9301      	str	r3, [sp, #4]
 8014f12:	2301      	movs	r3, #1
 8014f14:	9300      	str	r3, [sp, #0]
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	f7ff f9da 	bl	80142d0 <PayloadEncrypt>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014f20:	7d7b      	ldrb	r3, [r7, #21]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d001      	beq.n	8014f2a <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 8014f26:	7d7b      	ldrb	r3, [r7, #21]
 8014f28:	e005      	b.n	8014f36 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014f2a:	7bbb      	ldrb	r3, [r7, #14]
 8014f2c:	6879      	ldr	r1, [r7, #4]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f7ff fc84 	bl	801483c <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014f34:	2300      	movs	r3, #0
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	371c      	adds	r7, #28
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd90      	pop	{r4, r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	20001b1c 	.word	0x20001b1c

08014f44 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b086      	sub	sp, #24
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	460a      	mov	r2, r1
 8014f4e:	71fb      	strb	r3, [r7, #7]
 8014f50:	4613      	mov	r3, r2
 8014f52:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8014f54:	79bb      	ldrb	r3, [r7, #6]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d001      	beq.n	8014f5e <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014f5a:	230a      	movs	r3, #10
 8014f5c:	e019      	b.n	8014f92 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8014f5e:	2300      	movs	r3, #0
 8014f60:	60bb      	str	r3, [r7, #8]
 8014f62:	f107 030c 	add.w	r3, r7, #12
 8014f66:	2200      	movs	r2, #0
 8014f68:	601a      	str	r2, [r3, #0]
 8014f6a:	605a      	str	r2, [r3, #4]
 8014f6c:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8014f6e:	79fb      	ldrb	r3, [r7, #7]
 8014f70:	2b01      	cmp	r3, #1
 8014f72:	d101      	bne.n	8014f78 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8014f74:	2320      	movs	r3, #32
 8014f76:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014f78:	79b9      	ldrb	r1, [r7, #6]
 8014f7a:	f107 0308 	add.w	r3, r7, #8
 8014f7e:	2204      	movs	r2, #4
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7f7 ff4f 	bl	800ce24 <SecureElementDeriveAndStoreKey>
 8014f86:	4603      	mov	r3, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014f8c:	230e      	movs	r3, #14
 8014f8e:	e000      	b.n	8014f92 <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f90:	2300      	movs	r3, #0
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}

08014f9a <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014f9a:	b580      	push	{r7, lr}
 8014f9c:	b086      	sub	sp, #24
 8014f9e:	af00      	add	r7, sp, #0
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014fa4:	79fb      	ldrb	r3, [r7, #7]
 8014fa6:	2b04      	cmp	r3, #4
 8014fa8:	d001      	beq.n	8014fae <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014faa:	230a      	movs	r3, #10
 8014fac:	e014      	b.n	8014fd8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8014fae:	2300      	movs	r3, #0
 8014fb0:	60bb      	str	r3, [r7, #8]
 8014fb2:	f107 030c 	add.w	r3, r7, #12
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	601a      	str	r2, [r3, #0]
 8014fba:	605a      	str	r2, [r3, #4]
 8014fbc:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014fbe:	79f9      	ldrb	r1, [r7, #7]
 8014fc0:	f107 0308 	add.w	r3, r7, #8
 8014fc4:	227f      	movs	r2, #127	; 0x7f
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f7f7 ff2c 	bl	800ce24 <SecureElementDeriveAndStoreKey>
 8014fcc:	4603      	mov	r3, r0
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d001      	beq.n	8014fd6 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fd2:	230e      	movs	r3, #14
 8014fd4:	e000      	b.n	8014fd8 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014fd6:	2300      	movs	r3, #0
}
 8014fd8:	4618      	mov	r0, r3
 8014fda:	3718      	adds	r7, #24
 8014fdc:	46bd      	mov	sp, r7
 8014fde:	bd80      	pop	{r7, pc}

08014fe0 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d003      	beq.n	8014ff6 <LoRaMacParserJoinAccept+0x16>
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	681b      	ldr	r3, [r3, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d101      	bne.n	8014ffa <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014ff6:	2302      	movs	r3, #2
 8014ff8:	e0b9      	b.n	801516e <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	89fb      	ldrh	r3, [r7, #14]
 8015004:	1c59      	adds	r1, r3, #1
 8015006:	81f9      	strh	r1, [r7, #14]
 8015008:	4413      	add	r3, r2
 801500a:	781a      	ldrb	r2, [r3, #0]
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	1d98      	adds	r0, r3, #6
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681a      	ldr	r2, [r3, #0]
 8015018:	89fb      	ldrh	r3, [r7, #14]
 801501a:	4413      	add	r3, r2
 801501c:	2203      	movs	r2, #3
 801501e:	4619      	mov	r1, r3
 8015020:	f002 fdd3 	bl	8017bca <memcpy1>
    bufItr = bufItr + 3;
 8015024:	89fb      	ldrh	r3, [r7, #14]
 8015026:	3303      	adds	r3, #3
 8015028:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f103 0009 	add.w	r0, r3, #9
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	89fb      	ldrh	r3, [r7, #14]
 8015036:	4413      	add	r3, r2
 8015038:	2203      	movs	r2, #3
 801503a:	4619      	mov	r1, r3
 801503c:	f002 fdc5 	bl	8017bca <memcpy1>
    bufItr = bufItr + 3;
 8015040:	89fb      	ldrh	r3, [r7, #14]
 8015042:	3303      	adds	r3, #3
 8015044:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	681a      	ldr	r2, [r3, #0]
 801504a:	89fb      	ldrh	r3, [r7, #14]
 801504c:	1c59      	adds	r1, r3, #1
 801504e:	81f9      	strh	r1, [r7, #14]
 8015050:	4413      	add	r3, r2
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	461a      	mov	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681a      	ldr	r2, [r3, #0]
 801505e:	89fb      	ldrh	r3, [r7, #14]
 8015060:	1c59      	adds	r1, r3, #1
 8015062:	81f9      	strh	r1, [r7, #14]
 8015064:	4413      	add	r3, r2
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	021a      	lsls	r2, r3, #8
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	68db      	ldr	r3, [r3, #12]
 801506e:	431a      	orrs	r2, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681a      	ldr	r2, [r3, #0]
 8015078:	89fb      	ldrh	r3, [r7, #14]
 801507a:	1c59      	adds	r1, r3, #1
 801507c:	81f9      	strh	r1, [r7, #14]
 801507e:	4413      	add	r3, r2
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	041a      	lsls	r2, r3, #16
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	68db      	ldr	r3, [r3, #12]
 8015088:	431a      	orrs	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	89fb      	ldrh	r3, [r7, #14]
 8015094:	1c59      	adds	r1, r3, #1
 8015096:	81f9      	strh	r1, [r7, #14]
 8015098:	4413      	add	r3, r2
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	061a      	lsls	r2, r3, #24
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	431a      	orrs	r2, r3
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	89fb      	ldrh	r3, [r7, #14]
 80150ae:	1c59      	adds	r1, r3, #1
 80150b0:	81f9      	strh	r1, [r7, #14]
 80150b2:	4413      	add	r3, r2
 80150b4:	781a      	ldrb	r2, [r3, #0]
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	89fb      	ldrh	r3, [r7, #14]
 80150c0:	1c59      	adds	r1, r3, #1
 80150c2:	81f9      	strh	r1, [r7, #14]
 80150c4:	4413      	add	r3, r2
 80150c6:	781a      	ldrb	r2, [r3, #0]
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	791b      	ldrb	r3, [r3, #4]
 80150d0:	1f1a      	subs	r2, r3, #4
 80150d2:	89fb      	ldrh	r3, [r7, #14]
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	2b10      	cmp	r3, #16
 80150d8:	d10e      	bne.n	80150f8 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f103 0012 	add.w	r0, r3, #18
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681a      	ldr	r2, [r3, #0]
 80150e4:	89fb      	ldrh	r3, [r7, #14]
 80150e6:	4413      	add	r3, r2
 80150e8:	2210      	movs	r2, #16
 80150ea:	4619      	mov	r1, r3
 80150ec:	f002 fd6d 	bl	8017bca <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80150f0:	89fb      	ldrh	r3, [r7, #14]
 80150f2:	3310      	adds	r3, #16
 80150f4:	81fb      	strh	r3, [r7, #14]
 80150f6:	e008      	b.n	801510a <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	791b      	ldrb	r3, [r3, #4]
 80150fc:	1f1a      	subs	r2, r3, #4
 80150fe:	89fb      	ldrh	r3, [r7, #14]
 8015100:	1ad3      	subs	r3, r2, r3
 8015102:	2b00      	cmp	r3, #0
 8015104:	dd01      	ble.n	801510a <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8015106:	2301      	movs	r3, #1
 8015108:	e031      	b.n	801516e <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	681a      	ldr	r2, [r3, #0]
 801510e:	89fb      	ldrh	r3, [r7, #14]
 8015110:	1c59      	adds	r1, r3, #1
 8015112:	81f9      	strh	r1, [r7, #14]
 8015114:	4413      	add	r3, r2
 8015116:	781b      	ldrb	r3, [r3, #0]
 8015118:	461a      	mov	r2, r3
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	681a      	ldr	r2, [r3, #0]
 8015122:	89fb      	ldrh	r3, [r7, #14]
 8015124:	1c59      	adds	r1, r3, #1
 8015126:	81f9      	strh	r1, [r7, #14]
 8015128:	4413      	add	r3, r2
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	021a      	lsls	r2, r3, #8
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015132:	431a      	orrs	r2, r3
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681a      	ldr	r2, [r3, #0]
 801513c:	89fb      	ldrh	r3, [r7, #14]
 801513e:	1c59      	adds	r1, r3, #1
 8015140:	81f9      	strh	r1, [r7, #14]
 8015142:	4413      	add	r3, r2
 8015144:	781b      	ldrb	r3, [r3, #0]
 8015146:	041a      	lsls	r2, r3, #16
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514c:	431a      	orrs	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	681a      	ldr	r2, [r3, #0]
 8015156:	89fb      	ldrh	r3, [r7, #14]
 8015158:	1c59      	adds	r1, r3, #1
 801515a:	81f9      	strh	r1, [r7, #14]
 801515c:	4413      	add	r3, r2
 801515e:	781b      	ldrb	r3, [r3, #0]
 8015160:	061a      	lsls	r2, r3, #24
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015166:	431a      	orrs	r2, r3
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 801516c:	2300      	movs	r3, #0
}
 801516e:	4618      	mov	r0, r3
 8015170:	3710      	adds	r7, #16
 8015172:	46bd      	mov	sp, r7
 8015174:	bd80      	pop	{r7, pc}

08015176 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8015176:	b580      	push	{r7, lr}
 8015178:	b084      	sub	sp, #16
 801517a:	af00      	add	r7, sp, #0
 801517c:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d003      	beq.n	801518c <LoRaMacParserData+0x16>
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d101      	bne.n	8015190 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801518c:	2302      	movs	r3, #2
 801518e:	e0e2      	b.n	8015356 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8015190:	2300      	movs	r3, #0
 8015192:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	89fb      	ldrh	r3, [r7, #14]
 801519a:	1c59      	adds	r1, r3, #1
 801519c:	81f9      	strh	r1, [r7, #14]
 801519e:	4413      	add	r3, r2
 80151a0:	781a      	ldrb	r2, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	681a      	ldr	r2, [r3, #0]
 80151aa:	89fb      	ldrh	r3, [r7, #14]
 80151ac:	1c59      	adds	r1, r3, #1
 80151ae:	81f9      	strh	r1, [r7, #14]
 80151b0:	4413      	add	r3, r2
 80151b2:	781b      	ldrb	r3, [r3, #0]
 80151b4:	461a      	mov	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681a      	ldr	r2, [r3, #0]
 80151be:	89fb      	ldrh	r3, [r7, #14]
 80151c0:	1c59      	adds	r1, r3, #1
 80151c2:	81f9      	strh	r1, [r7, #14]
 80151c4:	4413      	add	r3, r2
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	021a      	lsls	r2, r3, #8
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	689b      	ldr	r3, [r3, #8]
 80151ce:	431a      	orrs	r2, r3
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	681a      	ldr	r2, [r3, #0]
 80151d8:	89fb      	ldrh	r3, [r7, #14]
 80151da:	1c59      	adds	r1, r3, #1
 80151dc:	81f9      	strh	r1, [r7, #14]
 80151de:	4413      	add	r3, r2
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	041a      	lsls	r2, r3, #16
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	689b      	ldr	r3, [r3, #8]
 80151e8:	431a      	orrs	r2, r3
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	89fb      	ldrh	r3, [r7, #14]
 80151f4:	1c59      	adds	r1, r3, #1
 80151f6:	81f9      	strh	r1, [r7, #14]
 80151f8:	4413      	add	r3, r2
 80151fa:	781b      	ldrb	r3, [r3, #0]
 80151fc:	061a      	lsls	r2, r3, #24
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	689b      	ldr	r3, [r3, #8]
 8015202:	431a      	orrs	r2, r3
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681a      	ldr	r2, [r3, #0]
 801520c:	89fb      	ldrh	r3, [r7, #14]
 801520e:	1c59      	adds	r1, r3, #1
 8015210:	81f9      	strh	r1, [r7, #14]
 8015212:	4413      	add	r3, r2
 8015214:	781a      	ldrb	r2, [r3, #0]
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	681a      	ldr	r2, [r3, #0]
 801521e:	89fb      	ldrh	r3, [r7, #14]
 8015220:	1c59      	adds	r1, r3, #1
 8015222:	81f9      	strh	r1, [r7, #14]
 8015224:	4413      	add	r3, r2
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	b29a      	uxth	r2, r3
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	89fb      	ldrh	r3, [r7, #14]
 8015234:	1c59      	adds	r1, r3, #1
 8015236:	81f9      	strh	r1, [r7, #14]
 8015238:	4413      	add	r3, r2
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	0219      	lsls	r1, r3, #8
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	89db      	ldrh	r3, [r3, #14]
 8015242:	b21a      	sxth	r2, r3
 8015244:	b20b      	sxth	r3, r1
 8015246:	4313      	orrs	r3, r2
 8015248:	b21b      	sxth	r3, r3
 801524a:	b29a      	uxth	r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f103 0010 	add.w	r0, r3, #16
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681a      	ldr	r2, [r3, #0]
 801525a:	89fb      	ldrh	r3, [r7, #14]
 801525c:	18d1      	adds	r1, r2, r3
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	7b1b      	ldrb	r3, [r3, #12]
 8015262:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015266:	b2db      	uxtb	r3, r3
 8015268:	b29b      	uxth	r3, r3
 801526a:	461a      	mov	r2, r3
 801526c:	f002 fcad 	bl	8017bca <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	7b1b      	ldrb	r3, [r3, #12]
 8015274:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015278:	b2db      	uxtb	r3, r3
 801527a:	b29a      	uxth	r2, r3
 801527c:	89fb      	ldrh	r3, [r7, #14]
 801527e:	4413      	add	r3, r2
 8015280:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2200      	movs	r2, #0
 8015286:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	2200      	movs	r2, #0
 801528e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	791b      	ldrb	r3, [r3, #4]
 8015296:	461a      	mov	r2, r3
 8015298:	89fb      	ldrh	r3, [r7, #14]
 801529a:	1ad3      	subs	r3, r2, r3
 801529c:	2b04      	cmp	r3, #4
 801529e:	dd28      	ble.n	80152f2 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	681a      	ldr	r2, [r3, #0]
 80152a4:	89fb      	ldrh	r3, [r7, #14]
 80152a6:	1c59      	adds	r1, r3, #1
 80152a8:	81f9      	strh	r1, [r7, #14]
 80152aa:	4413      	add	r3, r2
 80152ac:	781a      	ldrb	r2, [r3, #0]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	791a      	ldrb	r2, [r3, #4]
 80152b8:	89fb      	ldrh	r3, [r7, #14]
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	b2db      	uxtb	r3, r3
 80152c0:	3b04      	subs	r3, #4
 80152c2:	b2da      	uxtb	r2, r3
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	681a      	ldr	r2, [r3, #0]
 80152d2:	89fb      	ldrh	r3, [r7, #14]
 80152d4:	18d1      	adds	r1, r2, r3
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152dc:	b29b      	uxth	r3, r3
 80152de:	461a      	mov	r2, r3
 80152e0:	f002 fc73 	bl	8017bca <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	89fb      	ldrh	r3, [r7, #14]
 80152ee:	4413      	add	r3, r2
 80152f0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	681a      	ldr	r2, [r3, #0]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	791b      	ldrb	r3, [r3, #4]
 80152fa:	3b04      	subs	r3, #4
 80152fc:	4413      	add	r3, r2
 80152fe:	781b      	ldrb	r3, [r3, #0]
 8015300:	461a      	mov	r2, r3
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	6819      	ldr	r1, [r3, #0]
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	791b      	ldrb	r3, [r3, #4]
 8015312:	3b03      	subs	r3, #3
 8015314:	440b      	add	r3, r1
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	021b      	lsls	r3, r3, #8
 801531a:	431a      	orrs	r2, r3
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	6819      	ldr	r1, [r3, #0]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	791b      	ldrb	r3, [r3, #4]
 801532c:	3b02      	subs	r3, #2
 801532e:	440b      	add	r3, r1
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	041b      	lsls	r3, r3, #16
 8015334:	431a      	orrs	r2, r3
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6819      	ldr	r1, [r3, #0]
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	791b      	ldrb	r3, [r3, #4]
 8015346:	3b01      	subs	r3, #1
 8015348:	440b      	add	r3, r1
 801534a:	781b      	ldrb	r3, [r3, #0]
 801534c:	061b      	lsls	r3, r3, #24
 801534e:	431a      	orrs	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8015354:	2300      	movs	r3, #0
}
 8015356:	4618      	mov	r0, r3
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}

0801535e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b084      	sub	sp, #16
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d003      	beq.n	8015374 <LoRaMacSerializerJoinRequest+0x16>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d101      	bne.n	8015378 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015374:	2301      	movs	r3, #1
 8015376:	e070      	b.n	801545a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8015378:	2300      	movs	r3, #0
 801537a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	791b      	ldrb	r3, [r3, #4]
 8015380:	2b16      	cmp	r3, #22
 8015382:	d801      	bhi.n	8015388 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015384:	2302      	movs	r3, #2
 8015386:	e068      	b.n	801545a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681a      	ldr	r2, [r3, #0]
 801538c:	89fb      	ldrh	r3, [r7, #14]
 801538e:	1c59      	adds	r1, r3, #1
 8015390:	81f9      	strh	r1, [r7, #14]
 8015392:	4413      	add	r3, r2
 8015394:	687a      	ldr	r2, [r7, #4]
 8015396:	7952      	ldrb	r2, [r2, #5]
 8015398:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	89fb      	ldrh	r3, [r7, #14]
 80153a0:	18d0      	adds	r0, r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	3306      	adds	r3, #6
 80153a6:	2208      	movs	r2, #8
 80153a8:	4619      	mov	r1, r3
 80153aa:	f002 fc29 	bl	8017c00 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80153ae:	89fb      	ldrh	r3, [r7, #14]
 80153b0:	3308      	adds	r3, #8
 80153b2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	681a      	ldr	r2, [r3, #0]
 80153b8:	89fb      	ldrh	r3, [r7, #14]
 80153ba:	18d0      	adds	r0, r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	330e      	adds	r3, #14
 80153c0:	2208      	movs	r2, #8
 80153c2:	4619      	mov	r1, r3
 80153c4:	f002 fc1c 	bl	8017c00 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80153c8:	89fb      	ldrh	r3, [r7, #14]
 80153ca:	3308      	adds	r3, #8
 80153cc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	8ad9      	ldrh	r1, [r3, #22]
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681a      	ldr	r2, [r3, #0]
 80153d6:	89fb      	ldrh	r3, [r7, #14]
 80153d8:	1c58      	adds	r0, r3, #1
 80153da:	81f8      	strh	r0, [r7, #14]
 80153dc:	4413      	add	r3, r2
 80153de:	b2ca      	uxtb	r2, r1
 80153e0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	8adb      	ldrh	r3, [r3, #22]
 80153e6:	0a1b      	lsrs	r3, r3, #8
 80153e8:	b299      	uxth	r1, r3
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681a      	ldr	r2, [r3, #0]
 80153ee:	89fb      	ldrh	r3, [r7, #14]
 80153f0:	1c58      	adds	r0, r3, #1
 80153f2:	81f8      	strh	r0, [r7, #14]
 80153f4:	4413      	add	r3, r2
 80153f6:	b2ca      	uxtb	r2, r1
 80153f8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	6999      	ldr	r1, [r3, #24]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	89fb      	ldrh	r3, [r7, #14]
 8015404:	1c58      	adds	r0, r3, #1
 8015406:	81f8      	strh	r0, [r7, #14]
 8015408:	4413      	add	r3, r2
 801540a:	b2ca      	uxtb	r2, r1
 801540c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	699b      	ldr	r3, [r3, #24]
 8015412:	0a19      	lsrs	r1, r3, #8
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681a      	ldr	r2, [r3, #0]
 8015418:	89fb      	ldrh	r3, [r7, #14]
 801541a:	1c58      	adds	r0, r3, #1
 801541c:	81f8      	strh	r0, [r7, #14]
 801541e:	4413      	add	r3, r2
 8015420:	b2ca      	uxtb	r2, r1
 8015422:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	699b      	ldr	r3, [r3, #24]
 8015428:	0c19      	lsrs	r1, r3, #16
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681a      	ldr	r2, [r3, #0]
 801542e:	89fb      	ldrh	r3, [r7, #14]
 8015430:	1c58      	adds	r0, r3, #1
 8015432:	81f8      	strh	r0, [r7, #14]
 8015434:	4413      	add	r3, r2
 8015436:	b2ca      	uxtb	r2, r1
 8015438:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	699b      	ldr	r3, [r3, #24]
 801543e:	0e19      	lsrs	r1, r3, #24
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681a      	ldr	r2, [r3, #0]
 8015444:	89fb      	ldrh	r3, [r7, #14]
 8015446:	1c58      	adds	r0, r3, #1
 8015448:	81f8      	strh	r0, [r7, #14]
 801544a:	4413      	add	r3, r2
 801544c:	b2ca      	uxtb	r2, r1
 801544e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015450:	89fb      	ldrh	r3, [r7, #14]
 8015452:	b2da      	uxtb	r2, r3
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b084      	sub	sp, #16
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d003      	beq.n	8015478 <LoRaMacSerializerData+0x16>
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d101      	bne.n	801547c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015478:	2301      	movs	r3, #1
 801547a:	e0e5      	b.n	8015648 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 801547c:	2300      	movs	r3, #0
 801547e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015480:	2308      	movs	r3, #8
 8015482:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	7b1b      	ldrb	r3, [r3, #12]
 8015488:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801548c:	b2db      	uxtb	r3, r3
 801548e:	b29a      	uxth	r2, r3
 8015490:	89bb      	ldrh	r3, [r7, #12]
 8015492:	4413      	add	r3, r2
 8015494:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801549c:	2b00      	cmp	r3, #0
 801549e:	d002      	beq.n	80154a6 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80154a0:	89bb      	ldrh	r3, [r7, #12]
 80154a2:	3301      	adds	r3, #1
 80154a4:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154ac:	b29a      	uxth	r2, r3
 80154ae:	89bb      	ldrh	r3, [r7, #12]
 80154b0:	4413      	add	r3, r2
 80154b2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80154b4:	89bb      	ldrh	r3, [r7, #12]
 80154b6:	3304      	adds	r3, #4
 80154b8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	791b      	ldrb	r3, [r3, #4]
 80154be:	b29b      	uxth	r3, r3
 80154c0:	89ba      	ldrh	r2, [r7, #12]
 80154c2:	429a      	cmp	r2, r3
 80154c4:	d901      	bls.n	80154ca <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80154c6:	2302      	movs	r3, #2
 80154c8:	e0be      	b.n	8015648 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	89fb      	ldrh	r3, [r7, #14]
 80154d0:	1c59      	adds	r1, r3, #1
 80154d2:	81f9      	strh	r1, [r7, #14]
 80154d4:	4413      	add	r3, r2
 80154d6:	687a      	ldr	r2, [r7, #4]
 80154d8:	7952      	ldrb	r2, [r2, #5]
 80154da:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6899      	ldr	r1, [r3, #8]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	89fb      	ldrh	r3, [r7, #14]
 80154e6:	1c58      	adds	r0, r3, #1
 80154e8:	81f8      	strh	r0, [r7, #14]
 80154ea:	4413      	add	r3, r2
 80154ec:	b2ca      	uxtb	r2, r1
 80154ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	689b      	ldr	r3, [r3, #8]
 80154f4:	0a19      	lsrs	r1, r3, #8
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	89fb      	ldrh	r3, [r7, #14]
 80154fc:	1c58      	adds	r0, r3, #1
 80154fe:	81f8      	strh	r0, [r7, #14]
 8015500:	4413      	add	r3, r2
 8015502:	b2ca      	uxtb	r2, r1
 8015504:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	689b      	ldr	r3, [r3, #8]
 801550a:	0c19      	lsrs	r1, r3, #16
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	89fb      	ldrh	r3, [r7, #14]
 8015512:	1c58      	adds	r0, r3, #1
 8015514:	81f8      	strh	r0, [r7, #14]
 8015516:	4413      	add	r3, r2
 8015518:	b2ca      	uxtb	r2, r1
 801551a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	689b      	ldr	r3, [r3, #8]
 8015520:	0e19      	lsrs	r1, r3, #24
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681a      	ldr	r2, [r3, #0]
 8015526:	89fb      	ldrh	r3, [r7, #14]
 8015528:	1c58      	adds	r0, r3, #1
 801552a:	81f8      	strh	r0, [r7, #14]
 801552c:	4413      	add	r3, r2
 801552e:	b2ca      	uxtb	r2, r1
 8015530:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	89fb      	ldrh	r3, [r7, #14]
 8015538:	1c59      	adds	r1, r3, #1
 801553a:	81f9      	strh	r1, [r7, #14]
 801553c:	4413      	add	r3, r2
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	7b12      	ldrb	r2, [r2, #12]
 8015542:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	89d9      	ldrh	r1, [r3, #14]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	89fb      	ldrh	r3, [r7, #14]
 801554e:	1c58      	adds	r0, r3, #1
 8015550:	81f8      	strh	r0, [r7, #14]
 8015552:	4413      	add	r3, r2
 8015554:	b2ca      	uxtb	r2, r1
 8015556:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	89db      	ldrh	r3, [r3, #14]
 801555c:	0a1b      	lsrs	r3, r3, #8
 801555e:	b299      	uxth	r1, r3
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	89fb      	ldrh	r3, [r7, #14]
 8015566:	1c58      	adds	r0, r3, #1
 8015568:	81f8      	strh	r0, [r7, #14]
 801556a:	4413      	add	r3, r2
 801556c:	b2ca      	uxtb	r2, r1
 801556e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681a      	ldr	r2, [r3, #0]
 8015574:	89fb      	ldrh	r3, [r7, #14]
 8015576:	18d0      	adds	r0, r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f103 0110 	add.w	r1, r3, #16
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	7b1b      	ldrb	r3, [r3, #12]
 8015582:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015586:	b2db      	uxtb	r3, r3
 8015588:	b29b      	uxth	r3, r3
 801558a:	461a      	mov	r2, r3
 801558c:	f002 fb1d 	bl	8017bca <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	7b1b      	ldrb	r3, [r3, #12]
 8015594:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8015598:	b2db      	uxtb	r3, r3
 801559a:	b29a      	uxth	r2, r3
 801559c:	89fb      	ldrh	r3, [r7, #14]
 801559e:	4413      	add	r3, r2
 80155a0:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d009      	beq.n	80155c0 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	89fb      	ldrh	r3, [r7, #14]
 80155b2:	1c59      	adds	r1, r3, #1
 80155b4:	81f9      	strh	r1, [r7, #14]
 80155b6:	4413      	add	r3, r2
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80155be:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681a      	ldr	r2, [r3, #0]
 80155c4:	89fb      	ldrh	r3, [r7, #14]
 80155c6:	18d0      	adds	r0, r2, r3
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155d2:	b29b      	uxth	r3, r3
 80155d4:	461a      	mov	r2, r3
 80155d6:	f002 faf8 	bl	8017bca <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155e0:	b29a      	uxth	r2, r3
 80155e2:	89fb      	ldrh	r3, [r7, #14]
 80155e4:	4413      	add	r3, r2
 80155e6:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681a      	ldr	r2, [r3, #0]
 80155f0:	89fb      	ldrh	r3, [r7, #14]
 80155f2:	1c58      	adds	r0, r3, #1
 80155f4:	81f8      	strh	r0, [r7, #14]
 80155f6:	4413      	add	r3, r2
 80155f8:	b2ca      	uxtb	r2, r1
 80155fa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015600:	0a19      	lsrs	r1, r3, #8
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	681a      	ldr	r2, [r3, #0]
 8015606:	89fb      	ldrh	r3, [r7, #14]
 8015608:	1c58      	adds	r0, r3, #1
 801560a:	81f8      	strh	r0, [r7, #14]
 801560c:	4413      	add	r3, r2
 801560e:	b2ca      	uxtb	r2, r1
 8015610:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015616:	0c19      	lsrs	r1, r3, #16
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681a      	ldr	r2, [r3, #0]
 801561c:	89fb      	ldrh	r3, [r7, #14]
 801561e:	1c58      	adds	r0, r3, #1
 8015620:	81f8      	strh	r0, [r7, #14]
 8015622:	4413      	add	r3, r2
 8015624:	b2ca      	uxtb	r2, r1
 8015626:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801562c:	0e19      	lsrs	r1, r3, #24
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	89fb      	ldrh	r3, [r7, #14]
 8015634:	1c58      	adds	r0, r3, #1
 8015636:	81f8      	strh	r0, [r7, #14]
 8015638:	4413      	add	r3, r2
 801563a:	b2ca      	uxtb	r2, r1
 801563c:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801563e:	89fb      	ldrh	r3, [r7, #14]
 8015640:	b2da      	uxtb	r2, r3
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015646:	2300      	movs	r3, #0
}
 8015648:	4618      	mov	r0, r3
 801564a:	3710      	adds	r7, #16
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}

08015650 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8015650:	b480      	push	{r7}
 8015652:	b083      	sub	sp, #12
 8015654:	af00      	add	r7, sp, #0
 8015656:	4603      	mov	r3, r0
 8015658:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801565a:	79fb      	ldrb	r3, [r7, #7]
 801565c:	2b05      	cmp	r3, #5
 801565e:	d101      	bne.n	8015664 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8015660:	2301      	movs	r3, #1
 8015662:	e000      	b.n	8015666 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8015664:	2300      	movs	r3, #0
        }
    }
}
 8015666:	4618      	mov	r0, r3
 8015668:	370c      	adds	r7, #12
 801566a:	46bd      	mov	sp, r7
 801566c:	bc80      	pop	{r7}
 801566e:	4770      	bx	lr

08015670 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	6039      	str	r1, [r7, #0]
 801567a:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 801567c:	2300      	movs	r3, #0
 801567e:	60bb      	str	r3, [r7, #8]
    switch( region )
 8015680:	79fb      	ldrb	r3, [r7, #7]
 8015682:	2b05      	cmp	r3, #5
 8015684:	d105      	bne.n	8015692 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8015686:	6838      	ldr	r0, [r7, #0]
 8015688:	f001 f982 	bl	8016990 <RegionEU868GetPhyParam>
 801568c:	4603      	mov	r3, r0
 801568e:	60fb      	str	r3, [r7, #12]
 8015690:	e001      	b.n	8015696 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	4618      	mov	r0, r3
 801569a:	3710      	adds	r7, #16
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b082      	sub	sp, #8
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	4603      	mov	r3, r0
 80156a8:	6039      	str	r1, [r7, #0]
 80156aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80156ac:	79fb      	ldrb	r3, [r7, #7]
 80156ae:	2b05      	cmp	r3, #5
 80156b0:	d103      	bne.n	80156ba <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 80156b2:	6838      	ldr	r0, [r7, #0]
 80156b4:	f001 fab2 	bl	8016c1c <RegionEU868SetBandTxDone>
 80156b8:	e000      	b.n	80156bc <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 80156ba:	bf00      	nop
        }
    }
}
 80156bc:	3708      	adds	r7, #8
 80156be:	46bd      	mov	sp, r7
 80156c0:	bd80      	pop	{r7, pc}

080156c2 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b082      	sub	sp, #8
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	4603      	mov	r3, r0
 80156ca:	6039      	str	r1, [r7, #0]
 80156cc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80156ce:	79fb      	ldrb	r3, [r7, #7]
 80156d0:	2b05      	cmp	r3, #5
 80156d2:	d103      	bne.n	80156dc <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 80156d4:	6838      	ldr	r0, [r7, #0]
 80156d6:	f001 facd 	bl	8016c74 <RegionEU868InitDefaults>
 80156da:	e000      	b.n	80156de <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 80156dc:	bf00      	nop
        }
    }
}
 80156de:	bf00      	nop
 80156e0:	3708      	adds	r7, #8
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}

080156e6 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b082      	sub	sp, #8
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	4603      	mov	r3, r0
 80156ee:	6039      	str	r1, [r7, #0]
 80156f0:	71fb      	strb	r3, [r7, #7]
 80156f2:	4613      	mov	r3, r2
 80156f4:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80156f6:	79fb      	ldrb	r3, [r7, #7]
 80156f8:	2b05      	cmp	r3, #5
 80156fa:	d106      	bne.n	801570a <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80156fc:	79bb      	ldrb	r3, [r7, #6]
 80156fe:	4619      	mov	r1, r3
 8015700:	6838      	ldr	r0, [r7, #0]
 8015702:	f001 fb55 	bl	8016db0 <RegionEU868Verify>
 8015706:	4603      	mov	r3, r0
 8015708:	e000      	b.n	801570c <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801570a:	2300      	movs	r3, #0
        }
    }
}
 801570c:	4618      	mov	r0, r3
 801570e:	3708      	adds	r7, #8
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b082      	sub	sp, #8
 8015718:	af00      	add	r7, sp, #0
 801571a:	4603      	mov	r3, r0
 801571c:	6039      	str	r1, [r7, #0]
 801571e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015720:	79fb      	ldrb	r3, [r7, #7]
 8015722:	2b05      	cmp	r3, #5
 8015724:	d103      	bne.n	801572e <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8015726:	6838      	ldr	r0, [r7, #0]
 8015728:	f001 fbbe 	bl	8016ea8 <RegionEU868ApplyCFList>
 801572c:	e000      	b.n	8015730 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801572e:	bf00      	nop
        }
    }
}
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	4603      	mov	r3, r0
 8015740:	6039      	str	r1, [r7, #0]
 8015742:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015744:	79fb      	ldrb	r3, [r7, #7]
 8015746:	2b05      	cmp	r3, #5
 8015748:	d104      	bne.n	8015754 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801574a:	6838      	ldr	r0, [r7, #0]
 801574c:	f001 fc20 	bl	8016f90 <RegionEU868ChanMaskSet>
 8015750:	4603      	mov	r3, r0
 8015752:	e000      	b.n	8015756 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015754:	2300      	movs	r3, #0
        }
    }
}
 8015756:	4618      	mov	r0, r3
 8015758:	3708      	adds	r7, #8
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}

0801575e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801575e:	b580      	push	{r7, lr}
 8015760:	b082      	sub	sp, #8
 8015762:	af00      	add	r7, sp, #0
 8015764:	603b      	str	r3, [r7, #0]
 8015766:	4603      	mov	r3, r0
 8015768:	71fb      	strb	r3, [r7, #7]
 801576a:	460b      	mov	r3, r1
 801576c:	71bb      	strb	r3, [r7, #6]
 801576e:	4613      	mov	r3, r2
 8015770:	717b      	strb	r3, [r7, #5]
    switch( region )
 8015772:	79fb      	ldrb	r3, [r7, #7]
 8015774:	2b05      	cmp	r3, #5
 8015776:	d107      	bne.n	8015788 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015778:	7979      	ldrb	r1, [r7, #5]
 801577a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	683a      	ldr	r2, [r7, #0]
 8015782:	f001 fc2f 	bl	8016fe4 <RegionEU868ComputeRxWindowParameters>
 8015786:	e000      	b.n	801578a <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015788:	bf00      	nop
        }
    }
}
 801578a:	bf00      	nop
 801578c:	3708      	adds	r7, #8
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015792:	b580      	push	{r7, lr}
 8015794:	b084      	sub	sp, #16
 8015796:	af00      	add	r7, sp, #0
 8015798:	4603      	mov	r3, r0
 801579a:	60b9      	str	r1, [r7, #8]
 801579c:	607a      	str	r2, [r7, #4]
 801579e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80157a0:	7bfb      	ldrb	r3, [r7, #15]
 80157a2:	2b05      	cmp	r3, #5
 80157a4:	d105      	bne.n	80157b2 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80157a6:	6879      	ldr	r1, [r7, #4]
 80157a8:	68b8      	ldr	r0, [r7, #8]
 80157aa:	f001 fc75 	bl	8017098 <RegionEU868RxConfig>
 80157ae:	4603      	mov	r3, r0
 80157b0:	e000      	b.n	80157b4 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80157b2:	2300      	movs	r3, #0
        }
    }
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3710      	adds	r7, #16
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b084      	sub	sp, #16
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60b9      	str	r1, [r7, #8]
 80157c4:	607a      	str	r2, [r7, #4]
 80157c6:	603b      	str	r3, [r7, #0]
 80157c8:	4603      	mov	r3, r0
 80157ca:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80157cc:	7bfb      	ldrb	r3, [r7, #15]
 80157ce:	2b05      	cmp	r3, #5
 80157d0:	d106      	bne.n	80157e0 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80157d2:	683a      	ldr	r2, [r7, #0]
 80157d4:	6879      	ldr	r1, [r7, #4]
 80157d6:	68b8      	ldr	r0, [r7, #8]
 80157d8:	f001 fd2e 	bl	8017238 <RegionEU868TxConfig>
 80157dc:	4603      	mov	r3, r0
 80157de:	e000      	b.n	80157e2 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80157e0:	2300      	movs	r3, #0
        }
    }
}
 80157e2:	4618      	mov	r0, r3
 80157e4:	3710      	adds	r7, #16
 80157e6:	46bd      	mov	sp, r7
 80157e8:	bd80      	pop	{r7, pc}

080157ea <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80157ea:	b580      	push	{r7, lr}
 80157ec:	b086      	sub	sp, #24
 80157ee:	af02      	add	r7, sp, #8
 80157f0:	60b9      	str	r1, [r7, #8]
 80157f2:	607a      	str	r2, [r7, #4]
 80157f4:	603b      	str	r3, [r7, #0]
 80157f6:	4603      	mov	r3, r0
 80157f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80157fa:	7bfb      	ldrb	r3, [r7, #15]
 80157fc:	2b05      	cmp	r3, #5
 80157fe:	d109      	bne.n	8015814 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8015800:	69fb      	ldr	r3, [r7, #28]
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	69bb      	ldr	r3, [r7, #24]
 8015806:	683a      	ldr	r2, [r7, #0]
 8015808:	6879      	ldr	r1, [r7, #4]
 801580a:	68b8      	ldr	r0, [r7, #8]
 801580c:	f001 fde4 	bl	80173d8 <RegionEU868LinkAdrReq>
 8015810:	4603      	mov	r3, r0
 8015812:	e000      	b.n	8015816 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8015814:	2300      	movs	r3, #0
        }
    }
}
 8015816:	4618      	mov	r0, r3
 8015818:	3710      	adds	r7, #16
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801581e:	b580      	push	{r7, lr}
 8015820:	b082      	sub	sp, #8
 8015822:	af00      	add	r7, sp, #0
 8015824:	4603      	mov	r3, r0
 8015826:	6039      	str	r1, [r7, #0]
 8015828:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801582a:	79fb      	ldrb	r3, [r7, #7]
 801582c:	2b05      	cmp	r3, #5
 801582e:	d104      	bne.n	801583a <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8015830:	6838      	ldr	r0, [r7, #0]
 8015832:	f001 fef3 	bl	801761c <RegionEU868RxParamSetupReq>
 8015836:	4603      	mov	r3, r0
 8015838:	e000      	b.n	801583c <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801583a:	2300      	movs	r3, #0
        }
    }
}
 801583c:	4618      	mov	r0, r3
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b082      	sub	sp, #8
 8015848:	af00      	add	r7, sp, #0
 801584a:	4603      	mov	r3, r0
 801584c:	6039      	str	r1, [r7, #0]
 801584e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015850:	79fb      	ldrb	r3, [r7, #7]
 8015852:	2b05      	cmp	r3, #5
 8015854:	d104      	bne.n	8015860 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8015856:	6838      	ldr	r0, [r7, #0]
 8015858:	f001 ff1e 	bl	8017698 <RegionEU868NewChannelReq>
 801585c:	4603      	mov	r3, r0
 801585e:	e000      	b.n	8015862 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015860:	2300      	movs	r3, #0
        }
    }
}
 8015862:	4618      	mov	r0, r3
 8015864:	3708      	adds	r7, #8
 8015866:	46bd      	mov	sp, r7
 8015868:	bd80      	pop	{r7, pc}

0801586a <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 801586a:	b580      	push	{r7, lr}
 801586c:	b082      	sub	sp, #8
 801586e:	af00      	add	r7, sp, #0
 8015870:	4603      	mov	r3, r0
 8015872:	6039      	str	r1, [r7, #0]
 8015874:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8015876:	79fb      	ldrb	r3, [r7, #7]
 8015878:	2b05      	cmp	r3, #5
 801587a:	d104      	bne.n	8015886 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 801587c:	6838      	ldr	r0, [r7, #0]
 801587e:	f001 ff69 	bl	8017754 <RegionEU868TxParamSetupReq>
 8015882:	4603      	mov	r3, r0
 8015884:	e000      	b.n	8015888 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015886:	2300      	movs	r3, #0
        }
    }
}
 8015888:	4618      	mov	r0, r3
 801588a:	3708      	adds	r7, #8
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}

08015890 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	4603      	mov	r3, r0
 8015898:	6039      	str	r1, [r7, #0]
 801589a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801589c:	79fb      	ldrb	r3, [r7, #7]
 801589e:	2b05      	cmp	r3, #5
 80158a0:	d104      	bne.n	80158ac <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80158a2:	6838      	ldr	r0, [r7, #0]
 80158a4:	f001 ff62 	bl	801776c <RegionEU868DlChannelReq>
 80158a8:	4603      	mov	r3, r0
 80158aa:	e000      	b.n	80158ae <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 80158ac:	2300      	movs	r3, #0
        }
    }
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3708      	adds	r7, #8
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 80158b6:	b580      	push	{r7, lr}
 80158b8:	b082      	sub	sp, #8
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	4603      	mov	r3, r0
 80158be:	71fb      	strb	r3, [r7, #7]
 80158c0:	460b      	mov	r3, r1
 80158c2:	71bb      	strb	r3, [r7, #6]
 80158c4:	4613      	mov	r3, r2
 80158c6:	717b      	strb	r3, [r7, #5]
    switch( region )
 80158c8:	79fb      	ldrb	r3, [r7, #7]
 80158ca:	2b05      	cmp	r3, #5
 80158cc:	d108      	bne.n	80158e0 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 80158ce:	797a      	ldrb	r2, [r7, #5]
 80158d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80158d4:	4611      	mov	r1, r2
 80158d6:	4618      	mov	r0, r3
 80158d8:	f001 ff8c 	bl	80177f4 <RegionEU868AlternateDr>
 80158dc:	4603      	mov	r3, r0
 80158de:	e000      	b.n	80158e2 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 80158e0:	2300      	movs	r3, #0
        }
    }
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3708      	adds	r7, #8
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}

080158ea <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80158ea:	b580      	push	{r7, lr}
 80158ec:	b084      	sub	sp, #16
 80158ee:	af00      	add	r7, sp, #0
 80158f0:	60b9      	str	r1, [r7, #8]
 80158f2:	607a      	str	r2, [r7, #4]
 80158f4:	603b      	str	r3, [r7, #0]
 80158f6:	4603      	mov	r3, r0
 80158f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80158fa:	7bfb      	ldrb	r3, [r7, #15]
 80158fc:	2b05      	cmp	r3, #5
 80158fe:	d107      	bne.n	8015910 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8015900:	69bb      	ldr	r3, [r7, #24]
 8015902:	683a      	ldr	r2, [r7, #0]
 8015904:	6879      	ldr	r1, [r7, #4]
 8015906:	68b8      	ldr	r0, [r7, #8]
 8015908:	f001 ff84 	bl	8017814 <RegionEU868NextChannel>
 801590c:	4603      	mov	r3, r0
 801590e:	e000      	b.n	8015912 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015910:	2309      	movs	r3, #9
        }
    }
}
 8015912:	4618      	mov	r0, r3
 8015914:	3710      	adds	r7, #16
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}

0801591a <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801591a:	b590      	push	{r4, r7, lr}
 801591c:	b083      	sub	sp, #12
 801591e:	af00      	add	r7, sp, #0
 8015920:	4604      	mov	r4, r0
 8015922:	4608      	mov	r0, r1
 8015924:	4611      	mov	r1, r2
 8015926:	461a      	mov	r2, r3
 8015928:	4623      	mov	r3, r4
 801592a:	71fb      	strb	r3, [r7, #7]
 801592c:	4603      	mov	r3, r0
 801592e:	71bb      	strb	r3, [r7, #6]
 8015930:	460b      	mov	r3, r1
 8015932:	717b      	strb	r3, [r7, #5]
 8015934:	4613      	mov	r3, r2
 8015936:	713b      	strb	r3, [r7, #4]
    switch( region )
 8015938:	79fb      	ldrb	r3, [r7, #7]
 801593a:	2b05      	cmp	r3, #5
 801593c:	d109      	bne.n	8015952 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 801593e:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8015942:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015946:	79bb      	ldrb	r3, [r7, #6]
 8015948:	4618      	mov	r0, r3
 801594a:	f002 f8dd 	bl	8017b08 <RegionEU868ApplyDrOffset>
 801594e:	4603      	mov	r3, r0
 8015950:	e000      	b.n	8015954 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015952:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8015954:	4618      	mov	r0, r3
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	bd90      	pop	{r4, r7, pc}

0801595c <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 801595c:	b480      	push	{r7}
 801595e:	b083      	sub	sp, #12
 8015960:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8015962:	4b04      	ldr	r3, [pc, #16]	; (8015974 <RegionGetVersion+0x18>)
 8015964:	607b      	str	r3, [r7, #4]

    return version;
 8015966:	687b      	ldr	r3, [r7, #4]
}
 8015968:	4618      	mov	r0, r3
 801596a:	370c      	adds	r7, #12
 801596c:	46bd      	mov	sp, r7
 801596e:	bc80      	pop	{r7}
 8015970:	4770      	bx	lr
 8015972:	bf00      	nop
 8015974:	02010001 	.word	0x02010001

08015978 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015978:	b480      	push	{r7}
 801597a:	b087      	sub	sp, #28
 801597c:	af00      	add	r7, sp, #0
 801597e:	60f8      	str	r0, [r7, #12]
 8015980:	4608      	mov	r0, r1
 8015982:	4639      	mov	r1, r7
 8015984:	e881 000c 	stmia.w	r1, {r2, r3}
 8015988:	4603      	mov	r3, r0
 801598a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	881b      	ldrh	r3, [r3, #0]
 8015990:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8015992:	7afb      	ldrb	r3, [r7, #11]
 8015994:	f083 0301 	eor.w	r3, r3, #1
 8015998:	b2db      	uxtb	r3, r3
 801599a:	2b00      	cmp	r3, #0
 801599c:	d01b      	beq.n	80159d6 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 801599e:	f242 7310 	movw	r3, #10000	; 0x2710
 80159a2:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 80159a4:	683b      	ldr	r3, [r7, #0]
 80159a6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80159aa:	d202      	bcs.n	80159b2 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 80159ac:	2364      	movs	r3, #100	; 0x64
 80159ae:	82bb      	strh	r3, [r7, #20]
 80159b0:	e00b      	b.n	80159ca <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	f649 22af 	movw	r2, #39599	; 0x9aaf
 80159b8:	4293      	cmp	r3, r2
 80159ba:	d803      	bhi.n	80159c4 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 80159bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80159c0:	82bb      	strh	r3, [r7, #20]
 80159c2:	e002      	b.n	80159ca <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 80159c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80159c8:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80159ca:	8aba      	ldrh	r2, [r7, #20]
 80159cc:	8afb      	ldrh	r3, [r7, #22]
 80159ce:	4293      	cmp	r3, r2
 80159d0:	bf38      	it	cc
 80159d2:	4613      	movcc	r3, r2
 80159d4:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 80159d6:	8afb      	ldrh	r3, [r7, #22]
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d101      	bne.n	80159e0 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80159dc:	2301      	movs	r3, #1
 80159de:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80159e0:	8afb      	ldrh	r3, [r7, #22]
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	371c      	adds	r7, #28
 80159e6:	46bd      	mov	sp, r7
 80159e8:	bc80      	pop	{r7}
 80159ea:	4770      	bx	lr

080159ec <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b08e      	sub	sp, #56	; 0x38
 80159f0:	af02      	add	r7, sp, #8
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	4608      	mov	r0, r1
 80159f6:	4639      	mov	r1, r7
 80159f8:	e881 000c 	stmia.w	r1, {r2, r3}
 80159fc:	4603      	mov	r3, r0
 80159fe:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	881b      	ldrh	r3, [r3, #0]
 8015a04:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015a06:	4b4b      	ldr	r3, [pc, #300]	; (8015b34 <SetMaxTimeCredits+0x148>)
 8015a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8015a0a:	463b      	mov	r3, r7
 8015a0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015a10:	f005 fcdc 	bl	801b3cc <SysTimeToMs>
 8015a14:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8015a16:	f107 0314 	add.w	r3, r7, #20
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	601a      	str	r2, [r3, #0]
 8015a1e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015a20:	7af9      	ldrb	r1, [r7, #11]
 8015a22:	463b      	mov	r3, r7
 8015a24:	cb0c      	ldmia	r3, {r2, r3}
 8015a26:	68f8      	ldr	r0, [r7, #12]
 8015a28:	f7ff ffa6 	bl	8015978 <GetDutyCycle>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8015a30:	7afb      	ldrb	r3, [r7, #11]
 8015a32:	f083 0301 	eor.w	r3, r3, #1
 8015a36:	b2db      	uxtb	r3, r3
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d062      	beq.n	8015b02 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015a3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a3e:	2b64      	cmp	r3, #100	; 0x64
 8015a40:	d105      	bne.n	8015a4e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8015a42:	4b3c      	ldr	r3, [pc, #240]	; (8015b34 <SetMaxTimeCredits+0x148>)
 8015a44:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a4a:	609a      	str	r2, [r3, #8]
 8015a4c:	e00b      	b.n	8015a66 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015a4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015a54:	d105      	bne.n	8015a62 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8015a56:	4b38      	ldr	r3, [pc, #224]	; (8015b38 <SetMaxTimeCredits+0x14c>)
 8015a58:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a5e:	609a      	str	r2, [r3, #8]
 8015a60:	e001      	b.n	8015a66 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8015a62:	4b36      	ldr	r3, [pc, #216]	; (8015b3c <SetMaxTimeCredits+0x150>)
 8015a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	689a      	ldr	r2, [r3, #8]
 8015a6a:	f107 031c 	add.w	r3, r7, #28
 8015a6e:	4611      	mov	r1, r2
 8015a70:	4618      	mov	r0, r3
 8015a72:	f005 fcd3 	bl	801b41c <SysTimeFromMs>
 8015a76:	f107 0014 	add.w	r0, r7, #20
 8015a7a:	6a3b      	ldr	r3, [r7, #32]
 8015a7c:	9300      	str	r3, [sp, #0]
 8015a7e:	69fb      	ldr	r3, [r7, #28]
 8015a80:	463a      	mov	r2, r7
 8015a82:	ca06      	ldmia	r2, {r1, r2}
 8015a84:	f005 fbe3 	bl	801b24e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015a88:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015a8c:	f083 0301 	eor.w	r3, r3, #1
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d006      	beq.n	8015aa4 <SetMaxTimeCredits+0xb8>
 8015a96:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8015a9a:	f083 0301 	eor.w	r3, r3, #1
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d108      	bne.n	8015ab6 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8015aa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015aaa:	429a      	cmp	r2, r3
 8015aac:	d103      	bne.n	8015ab6 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8015aae:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8015ab0:	4a23      	ldr	r2, [pc, #140]	; (8015b40 <SetMaxTimeCredits+0x154>)
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	d92f      	bls.n	8015b16 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015aba:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	4a21      	ldr	r2, [pc, #132]	; (8015b44 <SetMaxTimeCredits+0x158>)
 8015ac0:	4293      	cmp	r3, r2
 8015ac2:	d928      	bls.n	8015b16 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8015ac4:	683b      	ldr	r3, [r7, #0]
 8015ac6:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8015aca:	3b30      	subs	r3, #48	; 0x30
 8015acc:	4a1e      	ldr	r2, [pc, #120]	; (8015b48 <SetMaxTimeCredits+0x15c>)
 8015ace:	fba2 2303 	umull	r2, r3, r2, r3
 8015ad2:	0c1b      	lsrs	r3, r3, #16
 8015ad4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8015ad6:	697b      	ldr	r3, [r7, #20]
 8015ad8:	4a1c      	ldr	r2, [pc, #112]	; (8015b4c <SetMaxTimeCredits+0x160>)
 8015ada:	fb02 f303 	mul.w	r3, r2, r3
 8015ade:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8015ae6:	3330      	adds	r3, #48	; 0x30
 8015ae8:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8015aee:	f107 0314 	add.w	r3, r7, #20
 8015af2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015af6:	f005 fc69 	bl	801b3cc <SysTimeToMs>
 8015afa:	4602      	mov	r2, r0
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	609a      	str	r2, [r3, #8]
 8015b00:	e009      	b.n	8015b16 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8015b02:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8015b06:	f083 0301 	eor.w	r3, r3, #1
 8015b0a:	b2db      	uxtb	r3, r3
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d002      	beq.n	8015b16 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b14:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8015b16:	68fb      	ldr	r3, [r7, #12]
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d102      	bne.n	8015b24 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b22:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b28:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8015b2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3730      	adds	r7, #48	; 0x30
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}
 8015b34:	001b7740 	.word	0x001b7740
 8015b38:	0112a880 	.word	0x0112a880
 8015b3c:	02932e00 	.word	0x02932e00
 8015b40:	0001517f 	.word	0x0001517f
 8015b44:	0001ec2f 	.word	0x0001ec2f
 8015b48:	c22e4507 	.word	0xc22e4507
 8015b4c:	00015180 	.word	0x00015180

08015b50 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b086      	sub	sp, #24
 8015b54:	af02      	add	r7, sp, #8
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	4608      	mov	r0, r1
 8015b5a:	4611      	mov	r1, r2
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	4603      	mov	r3, r0
 8015b60:	70fb      	strb	r3, [r7, #3]
 8015b62:	460b      	mov	r3, r1
 8015b64:	70bb      	strb	r3, [r7, #2]
 8015b66:	4613      	mov	r3, r2
 8015b68:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8015b6a:	78f9      	ldrb	r1, [r7, #3]
 8015b6c:	787b      	ldrb	r3, [r7, #1]
 8015b6e:	9301      	str	r3, [sp, #4]
 8015b70:	78bb      	ldrb	r3, [r7, #2]
 8015b72:	9300      	str	r3, [sp, #0]
 8015b74:	f107 0318 	add.w	r3, r7, #24
 8015b78:	cb0c      	ldmia	r3, {r2, r3}
 8015b7a:	6878      	ldr	r0, [r7, #4]
 8015b7c:	f7ff ff36 	bl	80159ec <SetMaxTimeCredits>
 8015b80:	4603      	mov	r3, r0
 8015b82:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8015b84:	78fb      	ldrb	r3, [r7, #3]
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d00a      	beq.n	8015ba0 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	685b      	ldr	r3, [r3, #4]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f006 f954 	bl	801be3c <UTIL_TIMER_GetElapsedTime>
 8015b94:	4602      	mov	r2, r0
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	68db      	ldr	r3, [r3, #12]
 8015b9a:	441a      	add	r2, r3
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	68da      	ldr	r2, [r3, #12]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	691b      	ldr	r3, [r3, #16]
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d903      	bls.n	8015bb4 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	691a      	ldr	r2, [r3, #16]
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6a3a      	ldr	r2, [r7, #32]
 8015bb8:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8015bba:	89fb      	ldrh	r3, [r7, #14]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	3710      	adds	r7, #16
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	bd80      	pop	{r7, pc}

08015bc4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b085      	sub	sp, #20
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	4603      	mov	r3, r0
 8015bcc:	460a      	mov	r2, r1
 8015bce:	80fb      	strh	r3, [r7, #6]
 8015bd0:	4613      	mov	r3, r2
 8015bd2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015bd8:	2300      	movs	r3, #0
 8015bda:	73bb      	strb	r3, [r7, #14]
 8015bdc:	e011      	b.n	8015c02 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015bde:	88fa      	ldrh	r2, [r7, #6]
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
 8015be2:	2101      	movs	r1, #1
 8015be4:	fa01 f303 	lsl.w	r3, r1, r3
 8015be8:	401a      	ands	r2, r3
 8015bea:	7bbb      	ldrb	r3, [r7, #14]
 8015bec:	2101      	movs	r1, #1
 8015bee:	fa01 f303 	lsl.w	r3, r1, r3
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	d102      	bne.n	8015bfc <CountChannels+0x38>
        {
            nbActiveBits++;
 8015bf6:	7bfb      	ldrb	r3, [r7, #15]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015bfc:	7bbb      	ldrb	r3, [r7, #14]
 8015bfe:	3301      	adds	r3, #1
 8015c00:	73bb      	strb	r3, [r7, #14]
 8015c02:	7bba      	ldrb	r2, [r7, #14]
 8015c04:	797b      	ldrb	r3, [r7, #5]
 8015c06:	429a      	cmp	r2, r3
 8015c08:	d3e9      	bcc.n	8015bde <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8015c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	3714      	adds	r7, #20
 8015c10:	46bd      	mov	sp, r7
 8015c12:	bc80      	pop	{r7}
 8015c14:	4770      	bx	lr

08015c16 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015c16:	b580      	push	{r7, lr}
 8015c18:	b084      	sub	sp, #16
 8015c1a:	af00      	add	r7, sp, #0
 8015c1c:	6039      	str	r1, [r7, #0]
 8015c1e:	4611      	mov	r1, r2
 8015c20:	461a      	mov	r2, r3
 8015c22:	4603      	mov	r3, r0
 8015c24:	71fb      	strb	r3, [r7, #7]
 8015c26:	460b      	mov	r3, r1
 8015c28:	71bb      	strb	r3, [r7, #6]
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015c2e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8015c32:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8015c36:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f000 f85d 	bl	8015cfa <RegionCommonValueInRange>
 8015c40:	4603      	mov	r3, r0
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d101      	bne.n	8015c4a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8015c46:	2300      	movs	r3, #0
 8015c48:	e053      	b.n	8015cf2 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	73fb      	strb	r3, [r7, #15]
 8015c4e:	2300      	movs	r3, #0
 8015c50:	73bb      	strb	r3, [r7, #14]
 8015c52:	e049      	b.n	8015ce8 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015c54:	2300      	movs	r3, #0
 8015c56:	737b      	strb	r3, [r7, #13]
 8015c58:	e03d      	b.n	8015cd6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015c5a:	7bbb      	ldrb	r3, [r7, #14]
 8015c5c:	005b      	lsls	r3, r3, #1
 8015c5e:	683a      	ldr	r2, [r7, #0]
 8015c60:	4413      	add	r3, r2
 8015c62:	881b      	ldrh	r3, [r3, #0]
 8015c64:	461a      	mov	r2, r3
 8015c66:	7b7b      	ldrb	r3, [r7, #13]
 8015c68:	fa42 f303 	asr.w	r3, r2, r3
 8015c6c:	f003 0301 	and.w	r3, r3, #1
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d02d      	beq.n	8015cd0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015c74:	7bfa      	ldrb	r2, [r7, #15]
 8015c76:	7b7b      	ldrb	r3, [r7, #13]
 8015c78:	4413      	add	r3, r2
 8015c7a:	461a      	mov	r2, r3
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	005b      	lsls	r3, r3, #1
 8015c80:	4413      	add	r3, r2
 8015c82:	009b      	lsls	r3, r3, #2
 8015c84:	461a      	mov	r2, r3
 8015c86:	69fb      	ldr	r3, [r7, #28]
 8015c88:	4413      	add	r3, r2
 8015c8a:	7a1b      	ldrb	r3, [r3, #8]
 8015c8c:	f343 0303 	sbfx	r3, r3, #0, #4
 8015c90:	b25b      	sxtb	r3, r3
 8015c92:	f003 030f 	and.w	r3, r3, #15
 8015c96:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015c98:	7bfa      	ldrb	r2, [r7, #15]
 8015c9a:	7b7b      	ldrb	r3, [r7, #13]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	4613      	mov	r3, r2
 8015ca2:	005b      	lsls	r3, r3, #1
 8015ca4:	4413      	add	r3, r2
 8015ca6:	009b      	lsls	r3, r3, #2
 8015ca8:	461a      	mov	r2, r3
 8015caa:	69fb      	ldr	r3, [r7, #28]
 8015cac:	4413      	add	r3, r2
 8015cae:	7a1b      	ldrb	r3, [r3, #8]
 8015cb0:	f343 1303 	sbfx	r3, r3, #4, #4
 8015cb4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015cb6:	f003 030f 	and.w	r3, r3, #15
 8015cba:	b25a      	sxtb	r2, r3
 8015cbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f000 f81a 	bl	8015cfa <RegionCommonValueInRange>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	2b01      	cmp	r3, #1
 8015cca:	d101      	bne.n	8015cd0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015ccc:	2301      	movs	r3, #1
 8015cce:	e010      	b.n	8015cf2 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8015cd0:	7b7b      	ldrb	r3, [r7, #13]
 8015cd2:	3301      	adds	r3, #1
 8015cd4:	737b      	strb	r3, [r7, #13]
 8015cd6:	7b7b      	ldrb	r3, [r7, #13]
 8015cd8:	2b0f      	cmp	r3, #15
 8015cda:	d9be      	bls.n	8015c5a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015cdc:	7bfb      	ldrb	r3, [r7, #15]
 8015cde:	3310      	adds	r3, #16
 8015ce0:	73fb      	strb	r3, [r7, #15]
 8015ce2:	7bbb      	ldrb	r3, [r7, #14]
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	73bb      	strb	r3, [r7, #14]
 8015ce8:	7bfa      	ldrb	r2, [r7, #15]
 8015cea:	79fb      	ldrb	r3, [r7, #7]
 8015cec:	429a      	cmp	r2, r3
 8015cee:	d3b1      	bcc.n	8015c54 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8015cf0:	2300      	movs	r3, #0
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3710      	adds	r7, #16
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015cfa:	b480      	push	{r7}
 8015cfc:	b083      	sub	sp, #12
 8015cfe:	af00      	add	r7, sp, #0
 8015d00:	4603      	mov	r3, r0
 8015d02:	71fb      	strb	r3, [r7, #7]
 8015d04:	460b      	mov	r3, r1
 8015d06:	71bb      	strb	r3, [r7, #6]
 8015d08:	4613      	mov	r3, r2
 8015d0a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8015d0c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015d10:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015d14:	429a      	cmp	r2, r3
 8015d16:	db07      	blt.n	8015d28 <RegionCommonValueInRange+0x2e>
 8015d18:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8015d1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	dc01      	bgt.n	8015d28 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8015d24:	2301      	movs	r3, #1
 8015d26:	e000      	b.n	8015d2a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8015d28:	2300      	movs	r3, #0
}
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	370c      	adds	r7, #12
 8015d2e:	46bd      	mov	sp, r7
 8015d30:	bc80      	pop	{r7}
 8015d32:	4770      	bx	lr

08015d34 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015d34:	b480      	push	{r7}
 8015d36:	b085      	sub	sp, #20
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	460b      	mov	r3, r1
 8015d3e:	70fb      	strb	r3, [r7, #3]
 8015d40:	4613      	mov	r3, r2
 8015d42:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8015d44:	78fb      	ldrb	r3, [r7, #3]
 8015d46:	091b      	lsrs	r3, r3, #4
 8015d48:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015d4a:	78bb      	ldrb	r3, [r7, #2]
 8015d4c:	091b      	lsrs	r3, r3, #4
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	7bfa      	ldrb	r2, [r7, #15]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d803      	bhi.n	8015d5e <RegionCommonChanDisable+0x2a>
 8015d56:	78fa      	ldrb	r2, [r7, #3]
 8015d58:	78bb      	ldrb	r3, [r7, #2]
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	d301      	bcc.n	8015d62 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	e017      	b.n	8015d92 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015d62:	7bfb      	ldrb	r3, [r7, #15]
 8015d64:	005b      	lsls	r3, r3, #1
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	4413      	add	r3, r2
 8015d6a:	881b      	ldrh	r3, [r3, #0]
 8015d6c:	b21a      	sxth	r2, r3
 8015d6e:	78fb      	ldrb	r3, [r7, #3]
 8015d70:	f003 030f 	and.w	r3, r3, #15
 8015d74:	2101      	movs	r1, #1
 8015d76:	fa01 f303 	lsl.w	r3, r1, r3
 8015d7a:	b21b      	sxth	r3, r3
 8015d7c:	43db      	mvns	r3, r3
 8015d7e:	b21b      	sxth	r3, r3
 8015d80:	4013      	ands	r3, r2
 8015d82:	b219      	sxth	r1, r3
 8015d84:	7bfb      	ldrb	r3, [r7, #15]
 8015d86:	005b      	lsls	r3, r3, #1
 8015d88:	687a      	ldr	r2, [r7, #4]
 8015d8a:	4413      	add	r3, r2
 8015d8c:	b28a      	uxth	r2, r1
 8015d8e:	801a      	strh	r2, [r3, #0]

    return true;
 8015d90:	2301      	movs	r3, #1
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3714      	adds	r7, #20
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bc80      	pop	{r7}
 8015d9a:	4770      	bx	lr

08015d9c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015d9c:	b580      	push	{r7, lr}
 8015d9e:	b084      	sub	sp, #16
 8015da0:	af00      	add	r7, sp, #0
 8015da2:	6078      	str	r0, [r7, #4]
 8015da4:	460b      	mov	r3, r1
 8015da6:	70fb      	strb	r3, [r7, #3]
 8015da8:	4613      	mov	r3, r2
 8015daa:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8015dac:	2300      	movs	r3, #0
 8015dae:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d101      	bne.n	8015dba <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8015db6:	2300      	movs	r3, #0
 8015db8:	e018      	b.n	8015dec <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015dba:	78fb      	ldrb	r3, [r7, #3]
 8015dbc:	73bb      	strb	r3, [r7, #14]
 8015dbe:	e010      	b.n	8015de2 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015dc0:	7bbb      	ldrb	r3, [r7, #14]
 8015dc2:	005b      	lsls	r3, r3, #1
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	881b      	ldrh	r3, [r3, #0]
 8015dca:	2110      	movs	r1, #16
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ff fef9 	bl	8015bc4 <CountChannels>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	461a      	mov	r2, r3
 8015dd6:	7bfb      	ldrb	r3, [r7, #15]
 8015dd8:	4413      	add	r3, r2
 8015dda:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ddc:	7bbb      	ldrb	r3, [r7, #14]
 8015dde:	3301      	adds	r3, #1
 8015de0:	73bb      	strb	r3, [r7, #14]
 8015de2:	7bba      	ldrb	r2, [r7, #14]
 8015de4:	78bb      	ldrb	r3, [r7, #2]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d3ea      	bcc.n	8015dc0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8015dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	3710      	adds	r7, #16
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015df4:	b480      	push	{r7}
 8015df6:	b087      	sub	sp, #28
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	60f8      	str	r0, [r7, #12]
 8015dfc:	60b9      	str	r1, [r7, #8]
 8015dfe:	4613      	mov	r3, r2
 8015e00:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d016      	beq.n	8015e36 <RegionCommonChanMaskCopy+0x42>
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d013      	beq.n	8015e36 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015e0e:	2300      	movs	r3, #0
 8015e10:	75fb      	strb	r3, [r7, #23]
 8015e12:	e00c      	b.n	8015e2e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015e14:	7dfb      	ldrb	r3, [r7, #23]
 8015e16:	005b      	lsls	r3, r3, #1
 8015e18:	68ba      	ldr	r2, [r7, #8]
 8015e1a:	441a      	add	r2, r3
 8015e1c:	7dfb      	ldrb	r3, [r7, #23]
 8015e1e:	005b      	lsls	r3, r3, #1
 8015e20:	68f9      	ldr	r1, [r7, #12]
 8015e22:	440b      	add	r3, r1
 8015e24:	8812      	ldrh	r2, [r2, #0]
 8015e26:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015e28:	7dfb      	ldrb	r3, [r7, #23]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	75fb      	strb	r3, [r7, #23]
 8015e2e:	7dfa      	ldrb	r2, [r7, #23]
 8015e30:	79fb      	ldrb	r3, [r7, #7]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d3ee      	bcc.n	8015e14 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8015e36:	bf00      	nop
 8015e38:	371c      	adds	r7, #28
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bc80      	pop	{r7}
 8015e3e:	4770      	bx	lr

08015e40 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8015e40:	b082      	sub	sp, #8
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b086      	sub	sp, #24
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	60f8      	str	r0, [r7, #12]
 8015e4a:	60b9      	str	r1, [r7, #8]
 8015e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8015e4e:	4613      	mov	r3, r2
 8015e50:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8015e52:	79f9      	ldrb	r1, [r7, #7]
 8015e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015e58:	cb0c      	ldmia	r3, {r2, r3}
 8015e5a:	68f8      	ldr	r0, [r7, #12]
 8015e5c:	f7ff fd8c 	bl	8015978 <GetDutyCycle>
 8015e60:	4603      	mov	r3, r0
 8015e62:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	68da      	ldr	r2, [r3, #12]
 8015e68:	8afb      	ldrh	r3, [r7, #22]
 8015e6a:	68b9      	ldr	r1, [r7, #8]
 8015e6c:	fb01 f303 	mul.w	r3, r1, r3
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d909      	bls.n	8015e88 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	68da      	ldr	r2, [r3, #12]
 8015e78:	8afb      	ldrh	r3, [r7, #22]
 8015e7a:	68b9      	ldr	r1, [r7, #8]
 8015e7c:	fb01 f303 	mul.w	r3, r1, r3
 8015e80:	1ad2      	subs	r2, r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8015e86:	e002      	b.n	8015e8e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	60da      	str	r2, [r3, #12]
}
 8015e8e:	bf00      	nop
 8015e90:	3718      	adds	r7, #24
 8015e92:	46bd      	mov	sp, r7
 8015e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015e98:	b002      	add	sp, #8
 8015e9a:	4770      	bx	lr

08015e9c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8015e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e9e:	b08f      	sub	sp, #60	; 0x3c
 8015ea0:	af04      	add	r7, sp, #16
 8015ea2:	6039      	str	r1, [r7, #0]
 8015ea4:	4611      	mov	r1, r2
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	71fb      	strb	r3, [r7, #7]
 8015eac:	460b      	mov	r3, r1
 8015eae:	71bb      	strb	r3, [r7, #6]
 8015eb0:	4613      	mov	r3, r2
 8015eb2:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8015eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8015eb8:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8015eba:	f005 ffad 	bl	801be18 <UTIL_TIMER_GetCurrentTime>
 8015ebe:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8015ec4:	2301      	movs	r3, #1
 8015ec6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8015ece:	2300      	movs	r3, #0
 8015ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015ed4:	e0ba      	b.n	801604c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8015ed6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015eda:	4613      	mov	r3, r2
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	4413      	add	r3, r2
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	189c      	adds	r4, r3, r2
 8015ee8:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8015eec:	797a      	ldrb	r2, [r7, #5]
 8015eee:	79fd      	ldrb	r5, [r7, #7]
 8015ef0:	69fb      	ldr	r3, [r7, #28]
 8015ef2:	9302      	str	r3, [sp, #8]
 8015ef4:	46ec      	mov	ip, sp
 8015ef6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8015efa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015efe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f02:	4633      	mov	r3, r6
 8015f04:	4629      	mov	r1, r5
 8015f06:	4620      	mov	r0, r4
 8015f08:	f7ff fe22 	bl	8015b50 <UpdateTimeCredits>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8015f10:	8afa      	ldrh	r2, [r7, #22]
 8015f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f14:	fb02 f303 	mul.w	r3, r2, r3
 8015f18:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015f1a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f1e:	4613      	mov	r3, r2
 8015f20:	005b      	lsls	r3, r3, #1
 8015f22:	4413      	add	r3, r2
 8015f24:	00db      	lsls	r3, r3, #3
 8015f26:	461a      	mov	r2, r3
 8015f28:	683b      	ldr	r3, [r7, #0]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	68db      	ldr	r3, [r3, #12]
 8015f2e:	69ba      	ldr	r2, [r7, #24]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d308      	bcc.n	8015f46 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015f34:	797b      	ldrb	r3, [r7, #5]
 8015f36:	f083 0301 	eor.w	r3, r3, #1
 8015f3a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d013      	beq.n	8015f68 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8015f40:	79fb      	ldrb	r3, [r7, #7]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d010      	beq.n	8015f68 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8015f46:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f4a:	4613      	mov	r3, r2
 8015f4c:	005b      	lsls	r3, r3, #1
 8015f4e:	4413      	add	r3, r2
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	461a      	mov	r2, r3
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	4413      	add	r3, r2
 8015f58:	2201      	movs	r2, #1
 8015f5a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8015f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015f60:	3301      	adds	r3, #1
 8015f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015f66:	e06c      	b.n	8016042 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8015f68:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f6c:	4613      	mov	r3, r2
 8015f6e:	005b      	lsls	r3, r3, #1
 8015f70:	4413      	add	r3, r2
 8015f72:	00db      	lsls	r3, r3, #3
 8015f74:	461a      	mov	r2, r3
 8015f76:	683b      	ldr	r3, [r7, #0]
 8015f78:	4413      	add	r3, r2
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8015f7e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f82:	4613      	mov	r3, r2
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	4413      	add	r3, r2
 8015f88:	00db      	lsls	r3, r3, #3
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	683b      	ldr	r3, [r7, #0]
 8015f8e:	4413      	add	r3, r2
 8015f90:	691b      	ldr	r3, [r3, #16]
 8015f92:	69ba      	ldr	r2, [r7, #24]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d215      	bcs.n	8015fc4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8015f98:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8015f9c:	4613      	mov	r3, r2
 8015f9e:	005b      	lsls	r3, r3, #1
 8015fa0:	4413      	add	r3, r2
 8015fa2:	00db      	lsls	r3, r3, #3
 8015fa4:	461a      	mov	r2, r3
 8015fa6:	683b      	ldr	r3, [r7, #0]
 8015fa8:	4413      	add	r3, r2
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	69ba      	ldr	r2, [r7, #24]
 8015fae:	1ad3      	subs	r3, r2, r3
 8015fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fb2:	4293      	cmp	r3, r2
 8015fb4:	bf28      	it	cs
 8015fb6:	4613      	movcs	r3, r2
 8015fb8:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8015fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8015fc4:	79fb      	ldrb	r3, [r7, #7]
 8015fc6:	f083 0301 	eor.w	r3, r3, #1
 8015fca:	b2db      	uxtb	r3, r3
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d038      	beq.n	8016042 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	60fb      	str	r3, [r7, #12]
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8015fd8:	8afb      	ldrh	r3, [r7, #22]
 8015fda:	2b64      	cmp	r3, #100	; 0x64
 8015fdc:	d103      	bne.n	8015fe6 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8015fde:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8015fe2:	60fb      	str	r3, [r7, #12]
 8015fe4:	e009      	b.n	8015ffa <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8015fe6:	8afb      	ldrh	r3, [r7, #22]
 8015fe8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015fec:	d103      	bne.n	8015ff6 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8015fee:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8015ff2:	60fb      	str	r3, [r7, #12]
 8015ff4:	e001      	b.n	8015ffa <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8015ff6:	4b1e      	ldr	r3, [pc, #120]	; (8016070 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015ff8:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8015ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015ffc:	4a1c      	ldr	r2, [pc, #112]	; (8016070 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d90e      	bls.n	8016020 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8016002:	68fa      	ldr	r2, [r7, #12]
 8016004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016006:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801600a:	3b30      	subs	r3, #48	; 0x30
 801600c:	4919      	ldr	r1, [pc, #100]	; (8016074 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801600e:	fba1 1303 	umull	r1, r3, r1, r3
 8016012:	0c1b      	lsrs	r3, r3, #16
 8016014:	3301      	adds	r3, #1
 8016016:	4918      	ldr	r1, [pc, #96]	; (8016078 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8016018:	fb01 f303 	mul.w	r3, r1, r3
 801601c:	4413      	add	r3, r2
 801601e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8016020:	f107 000c 	add.w	r0, r7, #12
 8016024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016026:	9300      	str	r3, [sp, #0]
 8016028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801602a:	f107 020c 	add.w	r2, r7, #12
 801602e:	ca06      	ldmia	r2, {r1, r2}
 8016030:	f005 f90d 	bl	801b24e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8016034:	f107 030c 	add.w	r3, r7, #12
 8016038:	e893 0003 	ldmia.w	r3, {r0, r1}
 801603c:	f005 f9c6 	bl	801b3cc <SysTimeToMs>
 8016040:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8016042:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016046:	3301      	adds	r3, #1
 8016048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801604c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8016050:	79bb      	ldrb	r3, [r7, #6]
 8016052:	429a      	cmp	r2, r3
 8016054:	f4ff af3f 	bcc.w	8015ed6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8016058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801605c:	2b00      	cmp	r3, #0
 801605e:	d102      	bne.n	8016066 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8016060:	f04f 33ff 	mov.w	r3, #4294967295
 8016064:	e000      	b.n	8016068 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8016066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016068:	4618      	mov	r0, r3
 801606a:	372c      	adds	r7, #44	; 0x2c
 801606c:	46bd      	mov	sp, r7
 801606e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016070:	0001ec30 	.word	0x0001ec30
 8016074:	c22e4507 	.word	0xc22e4507
 8016078:	00015180 	.word	0x00015180

0801607c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801607c:	b480      	push	{r7}
 801607e:	b085      	sub	sp, #20
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	781b      	ldrb	r3, [r3, #0]
 801608e:	2b03      	cmp	r3, #3
 8016090:	d13f      	bne.n	8016112 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	3301      	adds	r3, #1
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	b25a      	sxtb	r2, r3
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160a4:	f003 030f 	and.w	r3, r3, #15
 80160a8:	b25a      	sxtb	r2, r3
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160b4:	b2db      	uxtb	r3, r3
 80160b6:	091b      	lsrs	r3, r3, #4
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	b25a      	sxtb	r2, r3
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	3302      	adds	r3, #2
 80160c4:	781b      	ldrb	r3, [r3, #0]
 80160c6:	b29a      	uxth	r2, r3
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	889b      	ldrh	r3, [r3, #4]
 80160d0:	b21a      	sxth	r2, r3
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	3303      	adds	r3, #3
 80160d6:	781b      	ldrb	r3, [r3, #0]
 80160d8:	021b      	lsls	r3, r3, #8
 80160da:	b21b      	sxth	r3, r3
 80160dc:	4313      	orrs	r3, r2
 80160de:	b21b      	sxth	r3, r3
 80160e0:	b29a      	uxth	r2, r3
 80160e2:	683b      	ldr	r3, [r7, #0]
 80160e4:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	791a      	ldrb	r2, [r3, #4]
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	781b      	ldrb	r3, [r3, #0]
 80160f2:	091b      	lsrs	r3, r3, #4
 80160f4:	b2db      	uxtb	r3, r3
 80160f6:	f003 0307 	and.w	r3, r3, #7
 80160fa:	b2da      	uxtb	r2, r3
 80160fc:	683b      	ldr	r3, [r7, #0]
 80160fe:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	781b      	ldrb	r3, [r3, #0]
 8016104:	f003 030f 	and.w	r3, r3, #15
 8016108:	b2da      	uxtb	r2, r3
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801610e:	2305      	movs	r3, #5
 8016110:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8016112:	7bfb      	ldrb	r3, [r7, #15]
}
 8016114:	4618      	mov	r0, r3
 8016116:	3714      	adds	r7, #20
 8016118:	46bd      	mov	sp, r7
 801611a:	bc80      	pop	{r7}
 801611c:	4770      	bx	lr

0801611e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801611e:	b5b0      	push	{r4, r5, r7, lr}
 8016120:	b088      	sub	sp, #32
 8016122:	af02      	add	r7, sp, #8
 8016124:	60f8      	str	r0, [r7, #12]
 8016126:	60b9      	str	r1, [r7, #8]
 8016128:	607a      	str	r2, [r7, #4]
 801612a:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	791b      	ldrb	r3, [r3, #4]
 8016130:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	799b      	ldrb	r3, [r3, #6]
 8016136:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	79db      	ldrb	r3, [r3, #7]
 801613c:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	7a1b      	ldrb	r3, [r3, #8]
 8016142:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	795b      	ldrb	r3, [r3, #5]
 8016148:	f083 0301 	eor.w	r3, r3, #1
 801614c:	b2db      	uxtb	r3, r3
 801614e:	2b00      	cmp	r3, #0
 8016150:	d008      	beq.n	8016164 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	7adb      	ldrb	r3, [r3, #11]
 8016156:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	7a5b      	ldrb	r3, [r3, #9]
 801615c:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	7a9b      	ldrb	r3, [r3, #10]
 8016162:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8016164:	7dfb      	ldrb	r3, [r7, #23]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d04a      	beq.n	8016200 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801616a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801616e:	2b0f      	cmp	r3, #15
 8016170:	d103      	bne.n	801617a <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	7a5b      	ldrb	r3, [r3, #9]
 8016176:	75bb      	strb	r3, [r7, #22]
 8016178:	e01d      	b.n	80161b6 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	7b18      	ldrb	r0, [r3, #12]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	6919      	ldr	r1, [r3, #16]
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801618e:	68fa      	ldr	r2, [r7, #12]
 8016190:	6992      	ldr	r2, [r2, #24]
 8016192:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8016196:	9201      	str	r2, [sp, #4]
 8016198:	9300      	str	r3, [sp, #0]
 801619a:	462b      	mov	r3, r5
 801619c:	4622      	mov	r2, r4
 801619e:	f7ff fd3a 	bl	8015c16 <RegionCommonChanVerifyDr>
 80161a2:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80161a4:	f083 0301 	eor.w	r3, r3, #1
 80161a8:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d003      	beq.n	80161b6 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80161ae:	7dfb      	ldrb	r3, [r7, #23]
 80161b0:	f023 0302 	bic.w	r3, r3, #2
 80161b4:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80161b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80161ba:	2b0f      	cmp	r3, #15
 80161bc:	d103      	bne.n	80161c6 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	7a9b      	ldrb	r3, [r3, #10]
 80161c2:	757b      	strb	r3, [r7, #21]
 80161c4:	e01c      	b.n	8016200 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80161d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ff fd8f 	bl	8015cfa <RegionCommonValueInRange>
 80161dc:	4603      	mov	r3, r0
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d10e      	bne.n	8016200 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80161e8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	da03      	bge.n	80161f8 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	7f5b      	ldrb	r3, [r3, #29]
 80161f4:	757b      	strb	r3, [r7, #21]
 80161f6:	e003      	b.n	8016200 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80161f8:	7dfb      	ldrb	r3, [r7, #23]
 80161fa:	f023 0304 	bic.w	r3, r3, #4
 80161fe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8016200:	7dfb      	ldrb	r3, [r7, #23]
 8016202:	2b07      	cmp	r3, #7
 8016204:	d105      	bne.n	8016212 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8016206:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d101      	bne.n	8016212 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801620e:	2301      	movs	r3, #1
 8016210:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	7dba      	ldrb	r2, [r7, #22]
 8016216:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	7d7a      	ldrb	r2, [r7, #21]
 801621c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801621e:	7d3a      	ldrb	r2, [r7, #20]
 8016220:	683b      	ldr	r3, [r7, #0]
 8016222:	701a      	strb	r2, [r3, #0]

    return status;
 8016224:	7dfb      	ldrb	r3, [r7, #23]
}
 8016226:	4618      	mov	r0, r3
 8016228:	3718      	adds	r7, #24
 801622a:	46bd      	mov	sp, r7
 801622c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016230 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8016230:	b480      	push	{r7}
 8016232:	b083      	sub	sp, #12
 8016234:	af00      	add	r7, sp, #0
 8016236:	4603      	mov	r3, r0
 8016238:	6039      	str	r1, [r7, #0]
 801623a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801623c:	79fb      	ldrb	r3, [r7, #7]
 801623e:	4a06      	ldr	r2, [pc, #24]	; (8016258 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8016240:	fa02 f303 	lsl.w	r3, r2, r3
 8016244:	461a      	mov	r2, r3
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801624c:	4618      	mov	r0, r3
 801624e:	370c      	adds	r7, #12
 8016250:	46bd      	mov	sp, r7
 8016252:	bc80      	pop	{r7}
 8016254:	4770      	bx	lr
 8016256:	bf00      	nop
 8016258:	000f4240 	.word	0x000f4240

0801625c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801625c:	b480      	push	{r7}
 801625e:	b083      	sub	sp, #12
 8016260:	af00      	add	r7, sp, #0
 8016262:	4603      	mov	r3, r0
 8016264:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8016266:	79fb      	ldrb	r3, [r7, #7]
 8016268:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801626c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016270:	4618      	mov	r0, r3
 8016272:	370c      	adds	r7, #12
 8016274:	46bd      	mov	sp, r7
 8016276:	bc80      	pop	{r7}
 8016278:	4770      	bx	lr
	...

0801627c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801627c:	b480      	push	{r7}
 801627e:	b085      	sub	sp, #20
 8016280:	af00      	add	r7, sp, #0
 8016282:	60f8      	str	r0, [r7, #12]
 8016284:	607a      	str	r2, [r7, #4]
 8016286:	603b      	str	r3, [r7, #0]
 8016288:	460b      	mov	r3, r1
 801628a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801628c:	7afa      	ldrb	r2, [r7, #11]
 801628e:	7afb      	ldrb	r3, [r7, #11]
 8016290:	3b04      	subs	r3, #4
 8016292:	4619      	mov	r1, r3
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	fb03 f101 	mul.w	r1, r3, r1
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162a0:	fb00 f303 	mul.w	r3, r0, r3
 80162a4:	440b      	add	r3, r1
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d013      	beq.n	80162d4 <RegionCommonComputeRxWindowParameters+0x58>
 80162ac:	7afb      	ldrb	r3, [r7, #11]
 80162ae:	3b04      	subs	r3, #4
 80162b0:	4619      	mov	r1, r3
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	fb03 f101 	mul.w	r1, r3, r1
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162be:	fb00 f303 	mul.w	r3, r0, r3
 80162c2:	440b      	add	r3, r1
 80162c4:	0059      	lsls	r1, r3, #1
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	440b      	add	r3, r1
 80162ca:	1e59      	subs	r1, r3, #1
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80162d2:	e00f      	b.n	80162f4 <RegionCommonComputeRxWindowParameters+0x78>
 80162d4:	7afb      	ldrb	r3, [r7, #11]
 80162d6:	3b04      	subs	r3, #4
 80162d8:	4619      	mov	r1, r3
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	fb03 f101 	mul.w	r1, r3, r1
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80162e6:	fb00 f303 	mul.w	r3, r0, r3
 80162ea:	440b      	add	r3, r1
 80162ec:	0059      	lsls	r1, r3, #1
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80162f4:	429a      	cmp	r2, r3
 80162f6:	bf38      	it	cc
 80162f8:	461a      	movcc	r2, r3
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80162fe:	68fb      	ldr	r3, [r7, #12]
 8016300:	009b      	lsls	r3, r3, #2
 8016302:	4619      	mov	r1, r3
 8016304:	69bb      	ldr	r3, [r7, #24]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	68fa      	ldr	r2, [r7, #12]
 801630a:	fb02 f303 	mul.w	r3, r2, r3
 801630e:	2b00      	cmp	r3, #0
 8016310:	d007      	beq.n	8016322 <RegionCommonComputeRxWindowParameters+0xa6>
 8016312:	69bb      	ldr	r3, [r7, #24]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	68fa      	ldr	r2, [r7, #12]
 8016318:	fb02 f303 	mul.w	r3, r2, r3
 801631c:	3301      	adds	r3, #1
 801631e:	085b      	lsrs	r3, r3, #1
 8016320:	e005      	b.n	801632e <RegionCommonComputeRxWindowParameters+0xb2>
 8016322:	69bb      	ldr	r3, [r7, #24]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	68fa      	ldr	r2, [r7, #12]
 8016328:	fb02 f303 	mul.w	r3, r2, r3
 801632c:	085b      	lsrs	r3, r3, #1
 801632e:	1acb      	subs	r3, r1, r3
 8016330:	683a      	ldr	r2, [r7, #0]
 8016332:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016336:	fb01 f202 	mul.w	r2, r1, r2
 801633a:	1a9b      	subs	r3, r3, r2
 801633c:	2b00      	cmp	r3, #0
 801633e:	dd27      	ble.n	8016390 <RegionCommonComputeRxWindowParameters+0x114>
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	4619      	mov	r1, r3
 8016346:	69bb      	ldr	r3, [r7, #24]
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	68fa      	ldr	r2, [r7, #12]
 801634c:	fb02 f303 	mul.w	r3, r2, r3
 8016350:	2b00      	cmp	r3, #0
 8016352:	d007      	beq.n	8016364 <RegionCommonComputeRxWindowParameters+0xe8>
 8016354:	69bb      	ldr	r3, [r7, #24]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	68fa      	ldr	r2, [r7, #12]
 801635a:	fb02 f303 	mul.w	r3, r2, r3
 801635e:	3301      	adds	r3, #1
 8016360:	085b      	lsrs	r3, r3, #1
 8016362:	e005      	b.n	8016370 <RegionCommonComputeRxWindowParameters+0xf4>
 8016364:	69bb      	ldr	r3, [r7, #24]
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	68fa      	ldr	r2, [r7, #12]
 801636a:	fb02 f303 	mul.w	r3, r2, r3
 801636e:	085b      	lsrs	r3, r3, #1
 8016370:	1acb      	subs	r3, r1, r3
 8016372:	683a      	ldr	r2, [r7, #0]
 8016374:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016378:	fb01 f202 	mul.w	r2, r1, r2
 801637c:	1a9b      	subs	r3, r3, r2
 801637e:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8016382:	4a19      	ldr	r2, [pc, #100]	; (80163e8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8016384:	fb82 1203 	smull	r1, r2, r2, r3
 8016388:	1192      	asrs	r2, r2, #6
 801638a:	17db      	asrs	r3, r3, #31
 801638c:	1ad3      	subs	r3, r2, r3
 801638e:	e024      	b.n	80163da <RegionCommonComputeRxWindowParameters+0x15e>
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	009b      	lsls	r3, r3, #2
 8016394:	4619      	mov	r1, r3
 8016396:	69bb      	ldr	r3, [r7, #24]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	68fa      	ldr	r2, [r7, #12]
 801639c:	fb02 f303 	mul.w	r3, r2, r3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d007      	beq.n	80163b4 <RegionCommonComputeRxWindowParameters+0x138>
 80163a4:	69bb      	ldr	r3, [r7, #24]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	68fa      	ldr	r2, [r7, #12]
 80163aa:	fb02 f303 	mul.w	r3, r2, r3
 80163ae:	3301      	adds	r3, #1
 80163b0:	085b      	lsrs	r3, r3, #1
 80163b2:	e005      	b.n	80163c0 <RegionCommonComputeRxWindowParameters+0x144>
 80163b4:	69bb      	ldr	r3, [r7, #24]
 80163b6:	681b      	ldr	r3, [r3, #0]
 80163b8:	68fa      	ldr	r2, [r7, #12]
 80163ba:	fb02 f303 	mul.w	r3, r2, r3
 80163be:	085b      	lsrs	r3, r3, #1
 80163c0:	1acb      	subs	r3, r1, r3
 80163c2:	683a      	ldr	r2, [r7, #0]
 80163c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80163c8:	fb01 f202 	mul.w	r2, r1, r2
 80163cc:	1a9b      	subs	r3, r3, r2
 80163ce:	4a06      	ldr	r2, [pc, #24]	; (80163e8 <RegionCommonComputeRxWindowParameters+0x16c>)
 80163d0:	fb82 1203 	smull	r1, r2, r2, r3
 80163d4:	1192      	asrs	r2, r2, #6
 80163d6:	17db      	asrs	r3, r3, #31
 80163d8:	1ad3      	subs	r3, r2, r3
 80163da:	69fa      	ldr	r2, [r7, #28]
 80163dc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80163de:	bf00      	nop
 80163e0:	3714      	adds	r7, #20
 80163e2:	46bd      	mov	sp, r7
 80163e4:	bc80      	pop	{r7}
 80163e6:	4770      	bx	lr
 80163e8:	10624dd3 	.word	0x10624dd3

080163ec <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b086      	sub	sp, #24
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	4603      	mov	r3, r0
 80163f4:	60b9      	str	r1, [r7, #8]
 80163f6:	607a      	str	r2, [r7, #4]
 80163f8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80163fa:	2300      	movs	r3, #0
 80163fc:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80163fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4618      	mov	r0, r3
 8016406:	f7ea f9eb 	bl	80007e0 <__aeabi_ui2f>
 801640a:	4603      	mov	r3, r0
 801640c:	4619      	mov	r1, r3
 801640e:	68b8      	ldr	r0, [r7, #8]
 8016410:	f7ea f934 	bl	800067c <__aeabi_fsub>
 8016414:	4603      	mov	r3, r0
 8016416:	6879      	ldr	r1, [r7, #4]
 8016418:	4618      	mov	r0, r3
 801641a:	f7ea f92f 	bl	800067c <__aeabi_fsub>
 801641e:	4603      	mov	r3, r0
 8016420:	4618      	mov	r0, r3
 8016422:	f7ea f81f 	bl	8000464 <__aeabi_f2d>
 8016426:	4602      	mov	r2, r0
 8016428:	460b      	mov	r3, r1
 801642a:	4610      	mov	r0, r2
 801642c:	4619      	mov	r1, r3
 801642e:	f006 f8c7 	bl	801c5c0 <floor>
 8016432:	4602      	mov	r2, r0
 8016434:	460b      	mov	r3, r1
 8016436:	4610      	mov	r0, r2
 8016438:	4619      	mov	r1, r3
 801643a:	f7ea f8f3 	bl	8000624 <__aeabi_d2iz>
 801643e:	4603      	mov	r3, r0
 8016440:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8016442:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016446:	4618      	mov	r0, r3
 8016448:	3718      	adds	r7, #24
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}

0801644e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801644e:	b590      	push	{r4, r7, lr}
 8016450:	b087      	sub	sp, #28
 8016452:	af00      	add	r7, sp, #0
 8016454:	60f8      	str	r0, [r7, #12]
 8016456:	60b9      	str	r1, [r7, #8]
 8016458:	607a      	str	r2, [r7, #4]
 801645a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801645c:	2300      	movs	r3, #0
 801645e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8016460:	2300      	movs	r3, #0
 8016462:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8016464:	2300      	movs	r3, #0
 8016466:	757b      	strb	r3, [r7, #21]
 8016468:	2300      	movs	r3, #0
 801646a:	753b      	strb	r3, [r7, #20]
 801646c:	e09c      	b.n	80165a8 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801646e:	2300      	movs	r3, #0
 8016470:	74fb      	strb	r3, [r7, #19]
 8016472:	e08f      	b.n	8016594 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	685a      	ldr	r2, [r3, #4]
 8016478:	7d3b      	ldrb	r3, [r7, #20]
 801647a:	005b      	lsls	r3, r3, #1
 801647c:	4413      	add	r3, r2
 801647e:	881b      	ldrh	r3, [r3, #0]
 8016480:	461a      	mov	r2, r3
 8016482:	7cfb      	ldrb	r3, [r7, #19]
 8016484:	fa42 f303 	asr.w	r3, r2, r3
 8016488:	f003 0301 	and.w	r3, r3, #1
 801648c:	2b00      	cmp	r3, #0
 801648e:	d07e      	beq.n	801658e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	689a      	ldr	r2, [r3, #8]
 8016494:	7d79      	ldrb	r1, [r7, #21]
 8016496:	7cfb      	ldrb	r3, [r7, #19]
 8016498:	440b      	add	r3, r1
 801649a:	4619      	mov	r1, r3
 801649c:	460b      	mov	r3, r1
 801649e:	005b      	lsls	r3, r3, #1
 80164a0:	440b      	add	r3, r1
 80164a2:	009b      	lsls	r3, r3, #2
 80164a4:	4413      	add	r3, r2
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d06b      	beq.n	8016584 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	781b      	ldrb	r3, [r3, #0]
 80164b0:	f083 0301 	eor.w	r3, r3, #1
 80164b4:	b2db      	uxtb	r3, r3
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d011      	beq.n	80164de <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d00d      	beq.n	80164de <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	695a      	ldr	r2, [r3, #20]
 80164c6:	7d3b      	ldrb	r3, [r7, #20]
 80164c8:	005b      	lsls	r3, r3, #1
 80164ca:	4413      	add	r3, r2
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	461a      	mov	r2, r3
 80164d0:	7cfb      	ldrb	r3, [r7, #19]
 80164d2:	fa42 f303 	asr.w	r3, r2, r3
 80164d6:	f003 0301 	and.w	r3, r3, #1
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d054      	beq.n	8016588 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	785b      	ldrb	r3, [r3, #1]
 80164e2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	689a      	ldr	r2, [r3, #8]
 80164e8:	7d79      	ldrb	r1, [r7, #21]
 80164ea:	7cfb      	ldrb	r3, [r7, #19]
 80164ec:	440b      	add	r3, r1
 80164ee:	4619      	mov	r1, r3
 80164f0:	460b      	mov	r3, r1
 80164f2:	005b      	lsls	r3, r3, #1
 80164f4:	440b      	add	r3, r1
 80164f6:	009b      	lsls	r3, r3, #2
 80164f8:	4413      	add	r3, r2
 80164fa:	7a1b      	ldrb	r3, [r3, #8]
 80164fc:	f343 0303 	sbfx	r3, r3, #0, #4
 8016500:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016502:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	689a      	ldr	r2, [r3, #8]
 8016508:	7d79      	ldrb	r1, [r7, #21]
 801650a:	7cfb      	ldrb	r3, [r7, #19]
 801650c:	440b      	add	r3, r1
 801650e:	4619      	mov	r1, r3
 8016510:	460b      	mov	r3, r1
 8016512:	005b      	lsls	r3, r3, #1
 8016514:	440b      	add	r3, r1
 8016516:	009b      	lsls	r3, r3, #2
 8016518:	4413      	add	r3, r2
 801651a:	7a1b      	ldrb	r3, [r3, #8]
 801651c:	f343 1303 	sbfx	r3, r3, #4, #4
 8016520:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8016522:	461a      	mov	r2, r3
 8016524:	4621      	mov	r1, r4
 8016526:	f7ff fbe8 	bl	8015cfa <RegionCommonValueInRange>
 801652a:	4603      	mov	r3, r0
 801652c:	2b00      	cmp	r3, #0
 801652e:	d02d      	beq.n	801658c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	68da      	ldr	r2, [r3, #12]
 8016534:	68fb      	ldr	r3, [r7, #12]
 8016536:	6899      	ldr	r1, [r3, #8]
 8016538:	7d78      	ldrb	r0, [r7, #21]
 801653a:	7cfb      	ldrb	r3, [r7, #19]
 801653c:	4403      	add	r3, r0
 801653e:	4618      	mov	r0, r3
 8016540:	4603      	mov	r3, r0
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	4403      	add	r3, r0
 8016546:	009b      	lsls	r3, r3, #2
 8016548:	440b      	add	r3, r1
 801654a:	7a5b      	ldrb	r3, [r3, #9]
 801654c:	4619      	mov	r1, r3
 801654e:	460b      	mov	r3, r1
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	440b      	add	r3, r1
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	4413      	add	r3, r2
 8016558:	7d1b      	ldrb	r3, [r3, #20]
 801655a:	f083 0301 	eor.w	r3, r3, #1
 801655e:	b2db      	uxtb	r3, r3
 8016560:	2b00      	cmp	r3, #0
 8016562:	d003      	beq.n	801656c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8016564:	7dbb      	ldrb	r3, [r7, #22]
 8016566:	3301      	adds	r3, #1
 8016568:	75bb      	strb	r3, [r7, #22]
                    continue;
 801656a:	e010      	b.n	801658e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 801656c:	7dfb      	ldrb	r3, [r7, #23]
 801656e:	1c5a      	adds	r2, r3, #1
 8016570:	75fa      	strb	r2, [r7, #23]
 8016572:	461a      	mov	r2, r3
 8016574:	68bb      	ldr	r3, [r7, #8]
 8016576:	4413      	add	r3, r2
 8016578:	7d79      	ldrb	r1, [r7, #21]
 801657a:	7cfa      	ldrb	r2, [r7, #19]
 801657c:	440a      	add	r2, r1
 801657e:	b2d2      	uxtb	r2, r2
 8016580:	701a      	strb	r2, [r3, #0]
 8016582:	e004      	b.n	801658e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8016584:	bf00      	nop
 8016586:	e002      	b.n	801658e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8016588:	bf00      	nop
 801658a:	e000      	b.n	801658e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801658c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801658e:	7cfb      	ldrb	r3, [r7, #19]
 8016590:	3301      	adds	r3, #1
 8016592:	74fb      	strb	r3, [r7, #19]
 8016594:	7cfb      	ldrb	r3, [r7, #19]
 8016596:	2b0f      	cmp	r3, #15
 8016598:	f67f af6c 	bls.w	8016474 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801659c:	7d7b      	ldrb	r3, [r7, #21]
 801659e:	3310      	adds	r3, #16
 80165a0:	757b      	strb	r3, [r7, #21]
 80165a2:	7d3b      	ldrb	r3, [r7, #20]
 80165a4:	3301      	adds	r3, #1
 80165a6:	753b      	strb	r3, [r7, #20]
 80165a8:	7d7b      	ldrb	r3, [r7, #21]
 80165aa:	b29a      	uxth	r2, r3
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	8a1b      	ldrh	r3, [r3, #16]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	f4ff af5c 	bcc.w	801646e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	7dfa      	ldrb	r2, [r7, #23]
 80165ba:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	7dba      	ldrb	r2, [r7, #22]
 80165c0:	701a      	strb	r2, [r3, #0]
}
 80165c2:	bf00      	nop
 80165c4:	371c      	adds	r7, #28
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd90      	pop	{r4, r7, pc}

080165ca <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 80165ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165cc:	b08b      	sub	sp, #44	; 0x2c
 80165ce:	af04      	add	r7, sp, #16
 80165d0:	60f8      	str	r0, [r7, #12]
 80165d2:	60b9      	str	r1, [r7, #8]
 80165d4:	607a      	str	r2, [r7, #4]
 80165d6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	685b      	ldr	r3, [r3, #4]
 80165dc:	4618      	mov	r0, r3
 80165de:	f005 fc2d 	bl	801be3c <UTIL_TIMER_GetElapsedTime>
 80165e2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	681a      	ldr	r2, [r3, #0]
 80165e8:	697b      	ldr	r3, [r7, #20]
 80165ea:	1ad2      	subs	r2, r2, r3
 80165ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ee:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 80165f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f2:	2201      	movs	r2, #1
 80165f4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	2200      	movs	r2, #0
 80165fa:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d004      	beq.n	801660e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8016608:	697a      	ldr	r2, [r7, #20]
 801660a:	429a      	cmp	r2, r3
 801660c:	d32b      	bcc.n	8016666 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801660e:	68bb      	ldr	r3, [r7, #8]
 8016610:	2200      	movs	r2, #0
 8016612:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	69db      	ldr	r3, [r3, #28]
 8016618:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801661e:	68dd      	ldr	r5, [r3, #12]
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	7a5e      	ldrb	r6, [r3, #9]
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f893 c008 	ldrb.w	ip, [r3, #8]
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	7d1b      	ldrb	r3, [r3, #20]
 801662e:	68fa      	ldr	r2, [r7, #12]
 8016630:	6992      	ldr	r2, [r2, #24]
 8016632:	9203      	str	r2, [sp, #12]
 8016634:	68fa      	ldr	r2, [r7, #12]
 8016636:	f10d 0e04 	add.w	lr, sp, #4
 801663a:	320c      	adds	r2, #12
 801663c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016640:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016644:	9300      	str	r3, [sp, #0]
 8016646:	4663      	mov	r3, ip
 8016648:	4632      	mov	r2, r6
 801664a:	4629      	mov	r1, r5
 801664c:	4620      	mov	r0, r4
 801664e:	f7ff fc25 	bl	8015e9c <RegionCommonUpdateBandTimeOff>
 8016652:	4602      	mov	r2, r0
 8016654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016656:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	69d8      	ldr	r0, [r3, #28]
 801665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665e:	683a      	ldr	r2, [r7, #0]
 8016660:	6879      	ldr	r1, [r7, #4]
 8016662:	f7ff fef4 	bl	801644e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	781b      	ldrb	r3, [r3, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d004      	beq.n	8016678 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 801666e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016670:	2200      	movs	r2, #0
 8016672:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8016674:	2300      	movs	r3, #0
 8016676:	e006      	b.n	8016686 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8016678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	2b00      	cmp	r3, #0
 801667e:	d001      	beq.n	8016684 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8016680:	230b      	movs	r3, #11
 8016682:	e000      	b.n	8016686 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8016684:	230c      	movs	r3, #12
    }
}
 8016686:	4618      	mov	r0, r3
 8016688:	371c      	adds	r7, #28
 801668a:	46bd      	mov	sp, r7
 801668c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801668e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801668e:	b5b0      	push	{r4, r5, r7, lr}
 8016690:	b086      	sub	sp, #24
 8016692:	af02      	add	r7, sp, #8
 8016694:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	781b      	ldrb	r3, [r3, #0]
 801669a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	f993 2000 	ldrsb.w	r2, [r3]
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d103      	bne.n	80166b4 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80166b2:	e026      	b.n	8016702 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80166b4:	7bfb      	ldrb	r3, [r7, #15]
 80166b6:	3b01      	subs	r3, #1
 80166b8:	b2db      	uxtb	r3, r3
 80166ba:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f993 3002 	ldrsb.w	r3, [r3, #2]
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80166c2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80166c6:	429a      	cmp	r2, r3
 80166c8:	d019      	beq.n	80166fe <RegionCommonGetNextLowerTxDr+0x70>
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	78d8      	ldrb	r0, [r3, #3]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	6859      	ldr	r1, [r3, #4]
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80166de:	687a      	ldr	r2, [r7, #4]
 80166e0:	6892      	ldr	r2, [r2, #8]
 80166e2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 80166e6:	9201      	str	r2, [sp, #4]
 80166e8:	9300      	str	r3, [sp, #0]
 80166ea:	462b      	mov	r3, r5
 80166ec:	4622      	mov	r2, r4
 80166ee:	f7ff fa92 	bl	8015c16 <RegionCommonChanVerifyDr>
 80166f2:	4603      	mov	r3, r0
 80166f4:	f083 0301 	eor.w	r3, r3, #1
 80166f8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d1da      	bne.n	80166b4 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 80166fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8016702:	4618      	mov	r0, r3
 8016704:	3710      	adds	r7, #16
 8016706:	46bd      	mov	sp, r7
 8016708:	bdb0      	pop	{r4, r5, r7, pc}

0801670a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801670a:	b480      	push	{r7}
 801670c:	b083      	sub	sp, #12
 801670e:	af00      	add	r7, sp, #0
 8016710:	4603      	mov	r3, r0
 8016712:	460a      	mov	r2, r1
 8016714:	71fb      	strb	r3, [r7, #7]
 8016716:	4613      	mov	r3, r2
 8016718:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801671a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801671e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016722:	4293      	cmp	r3, r2
 8016724:	bfb8      	it	lt
 8016726:	4613      	movlt	r3, r2
 8016728:	b25b      	sxtb	r3, r3
}
 801672a:	4618      	mov	r0, r3
 801672c:	370c      	adds	r7, #12
 801672e:	46bd      	mov	sp, r7
 8016730:	bc80      	pop	{r7}
 8016732:	4770      	bx	lr

08016734 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8016734:	b480      	push	{r7}
 8016736:	b083      	sub	sp, #12
 8016738:	af00      	add	r7, sp, #0
 801673a:	6078      	str	r0, [r7, #4]
 801673c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	009b      	lsls	r3, r3, #2
 8016742:	683a      	ldr	r2, [r7, #0]
 8016744:	4413      	add	r3, r2
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	4a07      	ldr	r2, [pc, #28]	; (8016768 <RegionCommonGetBandwidth+0x34>)
 801674a:	4293      	cmp	r3, r2
 801674c:	d004      	beq.n	8016758 <RegionCommonGetBandwidth+0x24>
 801674e:	4a07      	ldr	r2, [pc, #28]	; (801676c <RegionCommonGetBandwidth+0x38>)
 8016750:	4293      	cmp	r3, r2
 8016752:	d003      	beq.n	801675c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8016754:	2300      	movs	r3, #0
 8016756:	e002      	b.n	801675e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8016758:	2301      	movs	r3, #1
 801675a:	e000      	b.n	801675e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 801675c:	2302      	movs	r3, #2
    }
}
 801675e:	4618      	mov	r0, r3
 8016760:	370c      	adds	r7, #12
 8016762:	46bd      	mov	sp, r7
 8016764:	bc80      	pop	{r7}
 8016766:	4770      	bx	lr
 8016768:	0003d090 	.word	0x0003d090
 801676c:	0007a120 	.word	0x0007a120

08016770 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b086      	sub	sp, #24
 8016774:	af04      	add	r7, sp, #16
 8016776:	4603      	mov	r3, r0
 8016778:	6039      	str	r1, [r7, #0]
 801677a:	71fb      	strb	r3, [r7, #7]
 801677c:	4613      	mov	r3, r2
 801677e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8016780:	79fb      	ldrb	r3, [r7, #7]
 8016782:	2b05      	cmp	r3, #5
 8016784:	d810      	bhi.n	80167a8 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8016786:	79fb      	ldrb	r3, [r7, #7]
 8016788:	4a0f      	ldr	r2, [pc, #60]	; (80167c8 <RegionCommonRxConfigPrint+0x58>)
 801678a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801678e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8016792:	9202      	str	r2, [sp, #8]
 8016794:	683a      	ldr	r2, [r7, #0]
 8016796:	9201      	str	r2, [sp, #4]
 8016798:	9300      	str	r3, [sp, #0]
 801679a:	4b0c      	ldr	r3, [pc, #48]	; (80167cc <RegionCommonRxConfigPrint+0x5c>)
 801679c:	2201      	movs	r2, #1
 801679e:	2100      	movs	r1, #0
 80167a0:	2002      	movs	r0, #2
 80167a2:	f005 fc29 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80167a6:	e00a      	b.n	80167be <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80167a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80167ac:	9301      	str	r3, [sp, #4]
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	9300      	str	r3, [sp, #0]
 80167b2:	4b07      	ldr	r3, [pc, #28]	; (80167d0 <RegionCommonRxConfigPrint+0x60>)
 80167b4:	2201      	movs	r2, #1
 80167b6:	2100      	movs	r1, #0
 80167b8:	2002      	movs	r0, #2
 80167ba:	f005 fc1d 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 80167be:	bf00      	nop
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}
 80167c6:	bf00      	nop
 80167c8:	20000128 	.word	0x20000128
 80167cc:	0801cf5c 	.word	0x0801cf5c
 80167d0:	0801cf7c 	.word	0x0801cf7c

080167d4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af02      	add	r7, sp, #8
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	460b      	mov	r3, r1
 80167de:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 80167e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80167e4:	9301      	str	r3, [sp, #4]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	9300      	str	r3, [sp, #0]
 80167ea:	4b05      	ldr	r3, [pc, #20]	; (8016800 <RegionCommonTxConfigPrint+0x2c>)
 80167ec:	2201      	movs	r2, #1
 80167ee:	2100      	movs	r1, #0
 80167f0:	2002      	movs	r0, #2
 80167f2:	f005 fc01 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
}
 80167f6:	bf00      	nop
 80167f8:	3708      	adds	r7, #8
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	0801cf98 	.word	0x0801cf98

08016804 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801680e:	4b2d      	ldr	r3, [pc, #180]	; (80168c4 <VerifyRfFreq+0xc0>)
 8016810:	6a1b      	ldr	r3, [r3, #32]
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	4798      	blx	r3
 8016816:	4603      	mov	r3, r0
 8016818:	f083 0301 	eor.w	r3, r3, #1
 801681c:	b2db      	uxtb	r3, r3
 801681e:	2b00      	cmp	r3, #0
 8016820:	d001      	beq.n	8016826 <VerifyRfFreq+0x22>
    {
        return false;
 8016822:	2300      	movs	r3, #0
 8016824:	e04a      	b.n	80168bc <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	4a27      	ldr	r2, [pc, #156]	; (80168c8 <VerifyRfFreq+0xc4>)
 801682a:	4293      	cmp	r3, r2
 801682c:	d307      	bcc.n	801683e <VerifyRfFreq+0x3a>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	4a26      	ldr	r2, [pc, #152]	; (80168cc <VerifyRfFreq+0xc8>)
 8016832:	4293      	cmp	r3, r2
 8016834:	d803      	bhi.n	801683e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	2202      	movs	r2, #2
 801683a:	701a      	strb	r2, [r3, #0]
 801683c:	e03d      	b.n	80168ba <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	4a22      	ldr	r2, [pc, #136]	; (80168cc <VerifyRfFreq+0xc8>)
 8016842:	4293      	cmp	r3, r2
 8016844:	d907      	bls.n	8016856 <VerifyRfFreq+0x52>
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	4a21      	ldr	r2, [pc, #132]	; (80168d0 <VerifyRfFreq+0xcc>)
 801684a:	4293      	cmp	r3, r2
 801684c:	d803      	bhi.n	8016856 <VerifyRfFreq+0x52>
    {
        *band = 0;
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	2200      	movs	r2, #0
 8016852:	701a      	strb	r2, [r3, #0]
 8016854:	e031      	b.n	80168ba <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	4a1d      	ldr	r2, [pc, #116]	; (80168d0 <VerifyRfFreq+0xcc>)
 801685a:	4293      	cmp	r3, r2
 801685c:	d907      	bls.n	801686e <VerifyRfFreq+0x6a>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	4a1c      	ldr	r2, [pc, #112]	; (80168d4 <VerifyRfFreq+0xd0>)
 8016862:	4293      	cmp	r3, r2
 8016864:	d803      	bhi.n	801686e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8016866:	683b      	ldr	r3, [r7, #0]
 8016868:	2201      	movs	r2, #1
 801686a:	701a      	strb	r2, [r3, #0]
 801686c:	e025      	b.n	80168ba <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	4a19      	ldr	r2, [pc, #100]	; (80168d8 <VerifyRfFreq+0xd4>)
 8016872:	4293      	cmp	r3, r2
 8016874:	d907      	bls.n	8016886 <VerifyRfFreq+0x82>
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	4a18      	ldr	r2, [pc, #96]	; (80168dc <VerifyRfFreq+0xd8>)
 801687a:	4293      	cmp	r3, r2
 801687c:	d803      	bhi.n	8016886 <VerifyRfFreq+0x82>
    {
        *band = 5;
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	2205      	movs	r2, #5
 8016882:	701a      	strb	r2, [r3, #0]
 8016884:	e019      	b.n	80168ba <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	4a15      	ldr	r2, [pc, #84]	; (80168e0 <VerifyRfFreq+0xdc>)
 801688a:	4293      	cmp	r3, r2
 801688c:	d907      	bls.n	801689e <VerifyRfFreq+0x9a>
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	4a14      	ldr	r2, [pc, #80]	; (80168e4 <VerifyRfFreq+0xe0>)
 8016892:	4293      	cmp	r3, r2
 8016894:	d803      	bhi.n	801689e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	2203      	movs	r2, #3
 801689a:	701a      	strb	r2, [r3, #0]
 801689c:	e00d      	b.n	80168ba <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	4a11      	ldr	r2, [pc, #68]	; (80168e8 <VerifyRfFreq+0xe4>)
 80168a2:	4293      	cmp	r3, r2
 80168a4:	d307      	bcc.n	80168b6 <VerifyRfFreq+0xb2>
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	4a10      	ldr	r2, [pc, #64]	; (80168ec <VerifyRfFreq+0xe8>)
 80168aa:	4293      	cmp	r3, r2
 80168ac:	d803      	bhi.n	80168b6 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	2204      	movs	r2, #4
 80168b2:	701a      	strb	r2, [r3, #0]
 80168b4:	e001      	b.n	80168ba <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80168b6:	2300      	movs	r3, #0
 80168b8:	e000      	b.n	80168bc <VerifyRfFreq+0xb8>
    }
    return true;
 80168ba:	2301      	movs	r3, #1
}
 80168bc:	4618      	mov	r0, r3
 80168be:	3708      	adds	r7, #8
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}
 80168c4:	0801d538 	.word	0x0801d538
 80168c8:	337055c0 	.word	0x337055c0
 80168cc:	338eda3f 	.word	0x338eda3f
 80168d0:	33bca100 	.word	0x33bca100
 80168d4:	33c5c8c0 	.word	0x33c5c8c0
 80168d8:	33c74f5f 	.word	0x33c74f5f
 80168dc:	33cef080 	.word	0x33cef080
 80168e0:	33d1fdbf 	.word	0x33d1fdbf
 80168e4:	33d5ce50 	.word	0x33d5ce50
 80168e8:	33d691a0 	.word	0x33d691a0
 80168ec:	33db2580 	.word	0x33db2580

080168f0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80168f0:	b590      	push	{r4, r7, lr}
 80168f2:	b08b      	sub	sp, #44	; 0x2c
 80168f4:	af04      	add	r7, sp, #16
 80168f6:	4603      	mov	r3, r0
 80168f8:	460a      	mov	r2, r1
 80168fa:	71fb      	strb	r3, [r7, #7]
 80168fc:	4613      	mov	r3, r2
 80168fe:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8016900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016904:	4a1f      	ldr	r2, [pc, #124]	; (8016984 <GetTimeOnAir+0x94>)
 8016906:	5cd3      	ldrb	r3, [r2, r3]
 8016908:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801690a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801690e:	491e      	ldr	r1, [pc, #120]	; (8016988 <GetTimeOnAir+0x98>)
 8016910:	4618      	mov	r0, r3
 8016912:	f7ff ff0f 	bl	8016734 <RegionCommonGetBandwidth>
 8016916:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8016918:	2300      	movs	r3, #0
 801691a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 801691c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016920:	2b07      	cmp	r3, #7
 8016922:	d118      	bne.n	8016956 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8016924:	4b19      	ldr	r3, [pc, #100]	; (801698c <GetTimeOnAir+0x9c>)
 8016926:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8016928:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801692c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016930:	fb02 f303 	mul.w	r3, r2, r3
 8016934:	4619      	mov	r1, r3
 8016936:	88bb      	ldrh	r3, [r7, #4]
 8016938:	b2db      	uxtb	r3, r3
 801693a:	2201      	movs	r2, #1
 801693c:	9203      	str	r2, [sp, #12]
 801693e:	9302      	str	r3, [sp, #8]
 8016940:	2300      	movs	r3, #0
 8016942:	9301      	str	r3, [sp, #4]
 8016944:	2305      	movs	r3, #5
 8016946:	9300      	str	r3, [sp, #0]
 8016948:	2300      	movs	r3, #0
 801694a:	460a      	mov	r2, r1
 801694c:	68f9      	ldr	r1, [r7, #12]
 801694e:	2000      	movs	r0, #0
 8016950:	47a0      	blx	r4
 8016952:	6178      	str	r0, [r7, #20]
 8016954:	e011      	b.n	801697a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8016956:	4b0d      	ldr	r3, [pc, #52]	; (801698c <GetTimeOnAir+0x9c>)
 8016958:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801695a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801695e:	88bb      	ldrh	r3, [r7, #4]
 8016960:	b2db      	uxtb	r3, r3
 8016962:	2101      	movs	r1, #1
 8016964:	9103      	str	r1, [sp, #12]
 8016966:	9302      	str	r3, [sp, #8]
 8016968:	2300      	movs	r3, #0
 801696a:	9301      	str	r3, [sp, #4]
 801696c:	2308      	movs	r3, #8
 801696e:	9300      	str	r3, [sp, #0]
 8016970:	2301      	movs	r3, #1
 8016972:	68f9      	ldr	r1, [r7, #12]
 8016974:	2001      	movs	r0, #1
 8016976:	47a0      	blx	r4
 8016978:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801697a:	697b      	ldr	r3, [r7, #20]
}
 801697c:	4618      	mov	r0, r3
 801697e:	371c      	adds	r7, #28
 8016980:	46bd      	mov	sp, r7
 8016982:	bd90      	pop	{r4, r7, pc}
 8016984:	0801d500 	.word	0x0801d500
 8016988:	0801d508 	.word	0x0801d508
 801698c:	0801d538 	.word	0x0801d538

08016990 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b088      	sub	sp, #32
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016998:	2300      	movs	r3, #0
 801699a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	3b01      	subs	r3, #1
 80169a2:	2b37      	cmp	r3, #55	; 0x37
 80169a4:	f200 8122 	bhi.w	8016bec <RegionEU868GetPhyParam+0x25c>
 80169a8:	a201      	add	r2, pc, #4	; (adr r2, 80169b0 <RegionEU868GetPhyParam+0x20>)
 80169aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169ae:	bf00      	nop
 80169b0:	08016a91 	.word	0x08016a91
 80169b4:	08016a97 	.word	0x08016a97
 80169b8:	08016bed 	.word	0x08016bed
 80169bc:	08016bed 	.word	0x08016bed
 80169c0:	08016bed 	.word	0x08016bed
 80169c4:	08016a9d 	.word	0x08016a9d
 80169c8:	08016bed 	.word	0x08016bed
 80169cc:	08016ad7 	.word	0x08016ad7
 80169d0:	08016bed 	.word	0x08016bed
 80169d4:	08016add 	.word	0x08016add
 80169d8:	08016ae3 	.word	0x08016ae3
 80169dc:	08016ae9 	.word	0x08016ae9
 80169e0:	08016aef 	.word	0x08016aef
 80169e4:	08016aff 	.word	0x08016aff
 80169e8:	08016b0f 	.word	0x08016b0f
 80169ec:	08016b15 	.word	0x08016b15
 80169f0:	08016b1d 	.word	0x08016b1d
 80169f4:	08016b25 	.word	0x08016b25
 80169f8:	08016b2d 	.word	0x08016b2d
 80169fc:	08016b35 	.word	0x08016b35
 8016a00:	08016b3d 	.word	0x08016b3d
 8016a04:	08016b51 	.word	0x08016b51
 8016a08:	08016b57 	.word	0x08016b57
 8016a0c:	08016b5d 	.word	0x08016b5d
 8016a10:	08016b63 	.word	0x08016b63
 8016a14:	08016b6f 	.word	0x08016b6f
 8016a18:	08016b7b 	.word	0x08016b7b
 8016a1c:	08016b81 	.word	0x08016b81
 8016a20:	08016b89 	.word	0x08016b89
 8016a24:	08016b8f 	.word	0x08016b8f
 8016a28:	08016b95 	.word	0x08016b95
 8016a2c:	08016b9d 	.word	0x08016b9d
 8016a30:	08016aa3 	.word	0x08016aa3
 8016a34:	08016bed 	.word	0x08016bed
 8016a38:	08016bed 	.word	0x08016bed
 8016a3c:	08016bed 	.word	0x08016bed
 8016a40:	08016bed 	.word	0x08016bed
 8016a44:	08016bed 	.word	0x08016bed
 8016a48:	08016bed 	.word	0x08016bed
 8016a4c:	08016bed 	.word	0x08016bed
 8016a50:	08016bed 	.word	0x08016bed
 8016a54:	08016bed 	.word	0x08016bed
 8016a58:	08016bed 	.word	0x08016bed
 8016a5c:	08016bed 	.word	0x08016bed
 8016a60:	08016bed 	.word	0x08016bed
 8016a64:	08016bed 	.word	0x08016bed
 8016a68:	08016ba3 	.word	0x08016ba3
 8016a6c:	08016ba9 	.word	0x08016ba9
 8016a70:	08016bb7 	.word	0x08016bb7
 8016a74:	08016bed 	.word	0x08016bed
 8016a78:	08016bed 	.word	0x08016bed
 8016a7c:	08016bbd 	.word	0x08016bbd
 8016a80:	08016bc3 	.word	0x08016bc3
 8016a84:	08016bed 	.word	0x08016bed
 8016a88:	08016bc9 	.word	0x08016bc9
 8016a8c:	08016bd9 	.word	0x08016bd9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8016a90:	2300      	movs	r3, #0
 8016a92:	61bb      	str	r3, [r7, #24]
            break;
 8016a94:	e0ab      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8016a96:	2300      	movs	r3, #0
 8016a98:	61bb      	str	r3, [r7, #24]
            break;
 8016a9a:	e0a8      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	61bb      	str	r3, [r7, #24]
            break;
 8016aa0:	e0a5      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016aa8:	733b      	strb	r3, [r7, #12]
 8016aaa:	2307      	movs	r3, #7
 8016aac:	737b      	strb	r3, [r7, #13]
 8016aae:	2300      	movs	r3, #0
 8016ab0:	73bb      	strb	r3, [r7, #14]
 8016ab2:	2310      	movs	r3, #16
 8016ab4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016ab6:	4b51      	ldr	r3, [pc, #324]	; (8016bfc <RegionEU868GetPhyParam+0x26c>)
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	f503 7358 	add.w	r3, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016abe:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016ac0:	4b4e      	ldr	r3, [pc, #312]	; (8016bfc <RegionEU868GetPhyParam+0x26c>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016ac4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016ac6:	f107 030c 	add.w	r3, r7, #12
 8016aca:	4618      	mov	r0, r3
 8016acc:	f7ff fddf 	bl	801668e <RegionCommonGetNextLowerTxDr>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	61bb      	str	r3, [r7, #24]
            break;
 8016ad4:	e08b      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	61bb      	str	r3, [r7, #24]
            break;
 8016ada:	e088      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8016adc:	2300      	movs	r3, #0
 8016ade:	61bb      	str	r3, [r7, #24]
            break;
 8016ae0:	e085      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016ae2:	2340      	movs	r3, #64	; 0x40
 8016ae4:	61bb      	str	r3, [r7, #24]
            break;
 8016ae6:	e082      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016ae8:	2320      	movs	r3, #32
 8016aea:	61bb      	str	r3, [r7, #24]
            break;
 8016aec:	e07f      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016af4:	461a      	mov	r2, r3
 8016af6:	4b42      	ldr	r3, [pc, #264]	; (8016c00 <RegionEU868GetPhyParam+0x270>)
 8016af8:	5c9b      	ldrb	r3, [r3, r2]
 8016afa:	61bb      	str	r3, [r7, #24]
            break;
 8016afc:	e077      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016b04:	461a      	mov	r2, r3
 8016b06:	4b3f      	ldr	r3, [pc, #252]	; (8016c04 <RegionEU868GetPhyParam+0x274>)
 8016b08:	5c9b      	ldrb	r3, [r3, r2]
 8016b0a:	61bb      	str	r3, [r7, #24]
            break;
 8016b0c:	e06f      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8016b0e:	2301      	movs	r3, #1
 8016b10:	61bb      	str	r3, [r7, #24]
            break;
 8016b12:	e06c      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8016b14:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8016b18:	61bb      	str	r3, [r7, #24]
            break;
 8016b1a:	e068      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8016b1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016b20:	61bb      	str	r3, [r7, #24]
            break;
 8016b22:	e064      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8016b24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8016b28:	61bb      	str	r3, [r7, #24]
            break;
 8016b2a:	e060      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8016b2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8016b30:	61bb      	str	r3, [r7, #24]
            break;
 8016b32:	e05c      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8016b34:	f241 7370 	movw	r3, #6000	; 0x1770
 8016b38:	61bb      	str	r3, [r7, #24]
            break;
 8016b3a:	e058      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8016b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8016b40:	4831      	ldr	r0, [pc, #196]	; (8016c08 <RegionEU868GetPhyParam+0x278>)
 8016b42:	f001 f82b 	bl	8017b9c <randr>
 8016b46:	4603      	mov	r3, r0
 8016b48:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8016b4c:	61bb      	str	r3, [r7, #24]
            break;
 8016b4e:	e04e      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8016b50:	2300      	movs	r3, #0
 8016b52:	61bb      	str	r3, [r7, #24]
            break;
 8016b54:	e04b      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8016b56:	4b2d      	ldr	r3, [pc, #180]	; (8016c0c <RegionEU868GetPhyParam+0x27c>)
 8016b58:	61bb      	str	r3, [r7, #24]
            break;
 8016b5a:	e048      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	61bb      	str	r3, [r7, #24]
            break;
 8016b60:	e045      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8016b62:	4b26      	ldr	r3, [pc, #152]	; (8016bfc <RegionEU868GetPhyParam+0x26c>)
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016b6a:	61bb      	str	r3, [r7, #24]
            break;
 8016b6c:	e03f      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8016b6e:	4b23      	ldr	r3, [pc, #140]	; (8016bfc <RegionEU868GetPhyParam+0x26c>)
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016b76:	61bb      	str	r3, [r7, #24]
            break;
 8016b78:	e039      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8016b7a:	2310      	movs	r3, #16
 8016b7c:	61bb      	str	r3, [r7, #24]
            break;
 8016b7e:	e036      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016b80:	4b1e      	ldr	r3, [pc, #120]	; (8016bfc <RegionEU868GetPhyParam+0x26c>)
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	61bb      	str	r3, [r7, #24]
            break;
 8016b86:	e032      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	61bb      	str	r3, [r7, #24]
            break;
 8016b8c:	e02f      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	61bb      	str	r3, [r7, #24]
            break;
 8016b92:	e02c      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8016b94:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8016b98:	61bb      	str	r3, [r7, #24]
            break;
 8016b9a:	e028      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8016b9c:	4b1c      	ldr	r3, [pc, #112]	; (8016c10 <RegionEU868GetPhyParam+0x280>)
 8016b9e:	61bb      	str	r3, [r7, #24]
            break;
 8016ba0:	e025      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8016ba2:	4b1a      	ldr	r3, [pc, #104]	; (8016c0c <RegionEU868GetPhyParam+0x27c>)
 8016ba4:	61bb      	str	r3, [r7, #24]
            break;
 8016ba6:	e022      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8016ba8:	2311      	movs	r3, #17
 8016baa:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8016bac:	2301      	movs	r3, #1
 8016bae:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	76bb      	strb	r3, [r7, #26]
            break;
 8016bb4:	e01b      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8016bb6:	2303      	movs	r3, #3
 8016bb8:	61bb      	str	r3, [r7, #24]
            break;
 8016bba:	e018      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8016bbc:	4b13      	ldr	r3, [pc, #76]	; (8016c0c <RegionEU868GetPhyParam+0x27c>)
 8016bbe:	61bb      	str	r3, [r7, #24]
            break;
 8016bc0:	e015      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8016bc2:	2303      	movs	r3, #3
 8016bc4:	61bb      	str	r3, [r7, #24]
            break;
 8016bc6:	e012      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	4b10      	ldr	r3, [pc, #64]	; (8016c14 <RegionEU868GetPhyParam+0x284>)
 8016bd2:	5c9b      	ldrb	r3, [r3, r2]
 8016bd4:	61bb      	str	r3, [r7, #24]
            break;
 8016bd6:	e00a      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016bde:	490e      	ldr	r1, [pc, #56]	; (8016c18 <RegionEU868GetPhyParam+0x288>)
 8016be0:	4618      	mov	r0, r3
 8016be2:	f7ff fda7 	bl	8016734 <RegionCommonGetBandwidth>
 8016be6:	4603      	mov	r3, r0
 8016be8:	61bb      	str	r3, [r7, #24]
            break;
 8016bea:	e000      	b.n	8016bee <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8016bec:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8016bee:	69bb      	ldr	r3, [r7, #24]
 8016bf0:	61fb      	str	r3, [r7, #28]
 8016bf2:	69fb      	ldr	r3, [r7, #28]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3720      	adds	r7, #32
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	20001b20 	.word	0x20001b20
 8016c00:	0801d528 	.word	0x0801d528
 8016c04:	0801d530 	.word	0x0801d530
 8016c08:	fffffc18 	.word	0xfffffc18
 8016c0c:	33d3e608 	.word	0x33d3e608
 8016c10:	4009999a 	.word	0x4009999a
 8016c14:	0801d500 	.word	0x0801d500
 8016c18:	0801d508 	.word	0x0801d508

08016c1c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016c1c:	b590      	push	{r4, r7, lr}
 8016c1e:	b085      	sub	sp, #20
 8016c20:	af02      	add	r7, sp, #8
 8016c22:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8016c24:	4b11      	ldr	r3, [pc, #68]	; (8016c6c <RegionEU868SetBandTxDone+0x50>)
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	4b11      	ldr	r3, [pc, #68]	; (8016c70 <RegionEU868SetBandTxDone+0x54>)
 8016c2a:	6819      	ldr	r1, [r3, #0]
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	4618      	mov	r0, r3
 8016c32:	4603      	mov	r3, r0
 8016c34:	005b      	lsls	r3, r3, #1
 8016c36:	4403      	add	r3, r0
 8016c38:	009b      	lsls	r3, r3, #2
 8016c3a:	440b      	add	r3, r1
 8016c3c:	3309      	adds	r3, #9
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	4619      	mov	r1, r3
 8016c42:	460b      	mov	r3, r1
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	440b      	add	r3, r1
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	18d0      	adds	r0, r2, r3
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6899      	ldr	r1, [r3, #8]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	785c      	ldrb	r4, [r3, #1]
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	691a      	ldr	r2, [r3, #16]
 8016c58:	9200      	str	r2, [sp, #0]
 8016c5a:	68db      	ldr	r3, [r3, #12]
 8016c5c:	4622      	mov	r2, r4
 8016c5e:	f7ff f8ef 	bl	8015e40 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8016c62:	bf00      	nop
 8016c64:	370c      	adds	r7, #12
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd90      	pop	{r4, r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	20001b24 	.word	0x20001b24
 8016c70:	20001b20 	.word	0x20001b20

08016c74 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b0b0      	sub	sp, #192	; 0xc0
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8016c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c80:	2290      	movs	r2, #144	; 0x90
 8016c82:	2100      	movs	r1, #0
 8016c84:	4618      	mov	r0, r3
 8016c86:	f005 fc53 	bl	801c530 <memset>
 8016c8a:	2364      	movs	r3, #100	; 0x64
 8016c8c:	863b      	strh	r3, [r7, #48]	; 0x30
 8016c8e:	2364      	movs	r3, #100	; 0x64
 8016c90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8016c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016c98:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8016c9c:	230a      	movs	r3, #10
 8016c9e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8016ca2:	2364      	movs	r3, #100	; 0x64
 8016ca4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8016ca8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016cac:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	7b1b      	ldrb	r3, [r3, #12]
 8016cb4:	2b02      	cmp	r3, #2
 8016cb6:	d05d      	beq.n	8016d74 <RegionEU868InitDefaults+0x100>
 8016cb8:	2b02      	cmp	r3, #2
 8016cba:	dc6a      	bgt.n	8016d92 <RegionEU868InitDefaults+0x11e>
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d002      	beq.n	8016cc6 <RegionEU868InitDefaults+0x52>
 8016cc0:	2b01      	cmp	r3, #1
 8016cc2:	d03e      	beq.n	8016d42 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8016cc4:	e065      	b.n	8016d92 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	681b      	ldr	r3, [r3, #0]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d062      	beq.n	8016d94 <RegionEU868InitDefaults+0x120>
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d05e      	beq.n	8016d94 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	685b      	ldr	r3, [r3, #4]
 8016cda:	4a30      	ldr	r2, [pc, #192]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016cdc:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	689b      	ldr	r3, [r3, #8]
 8016ce2:	4a2f      	ldr	r2, [pc, #188]	; (8016da0 <RegionEU868InitDefaults+0x12c>)
 8016ce4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8016ce6:	4b2e      	ldr	r3, [pc, #184]	; (8016da0 <RegionEU868InitDefaults+0x12c>)
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8016cee:	2290      	movs	r2, #144	; 0x90
 8016cf0:	4618      	mov	r0, r3
 8016cf2:	f000 ff6a 	bl	8017bca <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8016cf6:	4b29      	ldr	r3, [pc, #164]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	4a2a      	ldr	r2, [pc, #168]	; (8016da4 <RegionEU868InitDefaults+0x130>)
 8016cfc:	ca07      	ldmia	r2, {r0, r1, r2}
 8016cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8016d02:	4b26      	ldr	r3, [pc, #152]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d04:	681b      	ldr	r3, [r3, #0]
 8016d06:	4a28      	ldr	r2, [pc, #160]	; (8016da8 <RegionEU868InitDefaults+0x134>)
 8016d08:	330c      	adds	r3, #12
 8016d0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8016d10:	4b22      	ldr	r3, [pc, #136]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	4a25      	ldr	r2, [pc, #148]	; (8016dac <RegionEU868InitDefaults+0x138>)
 8016d16:	3318      	adds	r3, #24
 8016d18:	ca07      	ldmia	r2, {r0, r1, r2}
 8016d1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016d1e:	4b1f      	ldr	r3, [pc, #124]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	2207      	movs	r2, #7
 8016d24:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016d28:	4b1c      	ldr	r3, [pc, #112]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016d30:	4b1a      	ldr	r3, [pc, #104]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016d38:	2201      	movs	r2, #1
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	f7ff f85a 	bl	8015df4 <RegionCommonChanMaskCopy>
 8016d40:	e028      	b.n	8016d94 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8016d42:	4b16      	ldr	r3, [pc, #88]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	2200      	movs	r2, #0
 8016d48:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8016d4a:	4b14      	ldr	r3, [pc, #80]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8016d52:	4b12      	ldr	r3, [pc, #72]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	2200      	movs	r2, #0
 8016d58:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016d5a:	4b10      	ldr	r3, [pc, #64]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016d62:	4b0e      	ldr	r3, [pc, #56]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8016d6a:	2201      	movs	r2, #1
 8016d6c:	4619      	mov	r1, r3
 8016d6e:	f7ff f841 	bl	8015df4 <RegionCommonChanMaskCopy>
            break;
 8016d72:	e00f      	b.n	8016d94 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8016d74:	4b09      	ldr	r3, [pc, #36]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 8016d7c:	4b07      	ldr	r3, [pc, #28]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8016d84:	4b05      	ldr	r3, [pc, #20]	; (8016d9c <RegionEU868InitDefaults+0x128>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	430a      	orrs	r2, r1
 8016d8a:	b292      	uxth	r2, r2
 8016d8c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8016d90:	e000      	b.n	8016d94 <RegionEU868InitDefaults+0x120>
            break;
 8016d92:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016d94:	37c0      	adds	r7, #192	; 0xc0
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}
 8016d9a:	bf00      	nop
 8016d9c:	20001b20 	.word	0x20001b20
 8016da0:	20001b24 	.word	0x20001b24
 8016da4:	0801cfb4 	.word	0x0801cfb4
 8016da8:	0801cfc0 	.word	0x0801cfc0
 8016dac:	0801cfcc 	.word	0x0801cfcc

08016db0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016db0:	b580      	push	{r7, lr}
 8016db2:	b084      	sub	sp, #16
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
 8016db8:	460b      	mov	r3, r1
 8016dba:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8016dbc:	78fb      	ldrb	r3, [r7, #3]
 8016dbe:	2b0f      	cmp	r3, #15
 8016dc0:	d86c      	bhi.n	8016e9c <RegionEU868Verify+0xec>
 8016dc2:	a201      	add	r2, pc, #4	; (adr r2, 8016dc8 <RegionEU868Verify+0x18>)
 8016dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dc8:	08016e09 	.word	0x08016e09
 8016dcc:	08016e9d 	.word	0x08016e9d
 8016dd0:	08016e9d 	.word	0x08016e9d
 8016dd4:	08016e9d 	.word	0x08016e9d
 8016dd8:	08016e9d 	.word	0x08016e9d
 8016ddc:	08016e21 	.word	0x08016e21
 8016de0:	08016e3f 	.word	0x08016e3f
 8016de4:	08016e5d 	.word	0x08016e5d
 8016de8:	08016e9d 	.word	0x08016e9d
 8016dec:	08016e7b 	.word	0x08016e7b
 8016df0:	08016e7b 	.word	0x08016e7b
 8016df4:	08016e9d 	.word	0x08016e9d
 8016df8:	08016e9d 	.word	0x08016e9d
 8016dfc:	08016e9d 	.word	0x08016e9d
 8016e00:	08016e9d 	.word	0x08016e9d
 8016e04:	08016e99 	.word	0x08016e99
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8016e08:	2300      	movs	r3, #0
 8016e0a:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f107 020f 	add.w	r2, r7, #15
 8016e14:	4611      	mov	r1, r2
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7ff fcf4 	bl	8016804 <VerifyRfFreq>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	e03e      	b.n	8016e9e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f993 3000 	ldrsb.w	r3, [r3]
 8016e26:	2207      	movs	r2, #7
 8016e28:	2100      	movs	r1, #0
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f7fe ff65 	bl	8015cfa <RegionCommonValueInRange>
 8016e30:	4603      	mov	r3, r0
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	bf14      	ite	ne
 8016e36:	2301      	movne	r3, #1
 8016e38:	2300      	moveq	r3, #0
 8016e3a:	b2db      	uxtb	r3, r3
 8016e3c:	e02f      	b.n	8016e9e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f993 3000 	ldrsb.w	r3, [r3]
 8016e44:	2205      	movs	r2, #5
 8016e46:	2100      	movs	r1, #0
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7fe ff56 	bl	8015cfa <RegionCommonValueInRange>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	bf14      	ite	ne
 8016e54:	2301      	movne	r3, #1
 8016e56:	2300      	moveq	r3, #0
 8016e58:	b2db      	uxtb	r3, r3
 8016e5a:	e020      	b.n	8016e9e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8016e62:	2207      	movs	r2, #7
 8016e64:	2100      	movs	r1, #0
 8016e66:	4618      	mov	r0, r3
 8016e68:	f7fe ff47 	bl	8015cfa <RegionCommonValueInRange>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	bf14      	ite	ne
 8016e72:	2301      	movne	r3, #1
 8016e74:	2300      	moveq	r3, #0
 8016e76:	b2db      	uxtb	r3, r3
 8016e78:	e011      	b.n	8016e9e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8016e80:	2207      	movs	r2, #7
 8016e82:	2100      	movs	r1, #0
 8016e84:	4618      	mov	r0, r3
 8016e86:	f7fe ff38 	bl	8015cfa <RegionCommonValueInRange>
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	bf14      	ite	ne
 8016e90:	2301      	movne	r3, #1
 8016e92:	2300      	moveq	r3, #0
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	e002      	b.n	8016e9e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8016e98:	2301      	movs	r3, #1
 8016e9a:	e000      	b.n	8016e9e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8016e9c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3710      	adds	r7, #16
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}
 8016ea6:	bf00      	nop

08016ea8 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b08a      	sub	sp, #40	; 0x28
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016eb0:	2350      	movs	r3, #80	; 0x50
 8016eb2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	7a1b      	ldrb	r3, [r3, #8]
 8016eba:	2b10      	cmp	r3, #16
 8016ebc:	d162      	bne.n	8016f84 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	330f      	adds	r3, #15
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d15e      	bne.n	8016f88 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016eca:	2300      	movs	r3, #0
 8016ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016ed0:	2303      	movs	r3, #3
 8016ed2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016ed6:	e050      	b.n	8016f7a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8016ed8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016edc:	2b07      	cmp	r3, #7
 8016ede:	d824      	bhi.n	8016f2a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	685a      	ldr	r2, [r3, #4]
 8016ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ee8:	4413      	add	r3, r2
 8016eea:	781b      	ldrb	r3, [r3, #0]
 8016eec:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016eee:	69ba      	ldr	r2, [r7, #24]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	6859      	ldr	r1, [r3, #4]
 8016ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ef8:	3301      	adds	r3, #1
 8016efa:	440b      	add	r3, r1
 8016efc:	781b      	ldrb	r3, [r3, #0]
 8016efe:	021b      	lsls	r3, r3, #8
 8016f00:	4313      	orrs	r3, r2
 8016f02:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016f04:	69ba      	ldr	r2, [r7, #24]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	6859      	ldr	r1, [r3, #4]
 8016f0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f0e:	3302      	adds	r3, #2
 8016f10:	440b      	add	r3, r1
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	041b      	lsls	r3, r3, #16
 8016f16:	4313      	orrs	r3, r2
 8016f18:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8016f1a:	69bb      	ldr	r3, [r7, #24]
 8016f1c:	2264      	movs	r2, #100	; 0x64
 8016f1e:	fb02 f303 	mul.w	r3, r2, r3
 8016f22:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016f24:	2300      	movs	r3, #0
 8016f26:	61fb      	str	r3, [r7, #28]
 8016f28:	e006      	b.n	8016f38 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8016f34:	2300      	movs	r3, #0
 8016f36:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8016f38:	69bb      	ldr	r3, [r7, #24]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00b      	beq.n	8016f56 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8016f3e:	f107 0318 	add.w	r3, r7, #24
 8016f42:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8016f44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f48:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8016f4a:	f107 0310 	add.w	r3, r7, #16
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f000 fd0e 	bl	8017970 <RegionEU868ChannelAdd>
 8016f54:	e007      	b.n	8016f66 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016f56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f5a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8016f5c:	f107 030c 	add.w	r3, r7, #12
 8016f60:	4618      	mov	r0, r3
 8016f62:	f000 fda7 	bl	8017ab4 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f6a:	3303      	adds	r3, #3
 8016f6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f74:	3301      	adds	r3, #1
 8016f76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f7e:	2b0f      	cmp	r3, #15
 8016f80:	d9aa      	bls.n	8016ed8 <RegionEU868ApplyCFList+0x30>
 8016f82:	e002      	b.n	8016f8a <RegionEU868ApplyCFList+0xe2>
        return;
 8016f84:	bf00      	nop
 8016f86:	e000      	b.n	8016f8a <RegionEU868ApplyCFList+0xe2>
        return;
 8016f88:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8016f8a:	3728      	adds	r7, #40	; 0x28
 8016f8c:	46bd      	mov	sp, r7
 8016f8e:	bd80      	pop	{r7, pc}

08016f90 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016f90:	b580      	push	{r7, lr}
 8016f92:	b082      	sub	sp, #8
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	791b      	ldrb	r3, [r3, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d002      	beq.n	8016fa6 <RegionEU868ChanMaskSet+0x16>
 8016fa0:	2b01      	cmp	r3, #1
 8016fa2:	d00b      	beq.n	8016fbc <RegionEU868ChanMaskSet+0x2c>
 8016fa4:	e015      	b.n	8016fd2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016fa6:	4b0e      	ldr	r3, [pc, #56]	; (8016fe0 <RegionEU868ChanMaskSet+0x50>)
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	f503 7058 	add.w	r0, r3, #864	; 0x360
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	2201      	movs	r2, #1
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	f7fe ff1d 	bl	8015df4 <RegionCommonChanMaskCopy>
            break;
 8016fba:	e00c      	b.n	8016fd6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016fbc:	4b08      	ldr	r3, [pc, #32]	; (8016fe0 <RegionEU868ChanMaskSet+0x50>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	2201      	movs	r2, #1
 8016fca:	4619      	mov	r1, r3
 8016fcc:	f7fe ff12 	bl	8015df4 <RegionCommonChanMaskCopy>
            break;
 8016fd0:	e001      	b.n	8016fd6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	e000      	b.n	8016fd8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8016fd6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8016fd8:	4618      	mov	r0, r3
 8016fda:	3708      	adds	r7, #8
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	20001b20 	.word	0x20001b20

08016fe4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b088      	sub	sp, #32
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	60ba      	str	r2, [r7, #8]
 8016fec:	607b      	str	r3, [r7, #4]
 8016fee:	4603      	mov	r3, r0
 8016ff0:	73fb      	strb	r3, [r7, #15]
 8016ff2:	460b      	mov	r3, r1
 8016ff4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8016ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ffe:	2b07      	cmp	r3, #7
 8017000:	bfa8      	it	ge
 8017002:	2307      	movge	r3, #7
 8017004:	b25a      	sxtb	r2, r3
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017010:	491e      	ldr	r1, [pc, #120]	; (801708c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017012:	4618      	mov	r0, r3
 8017014:	f7ff fb8e 	bl	8016734 <RegionCommonGetBandwidth>
 8017018:	4603      	mov	r3, r0
 801701a:	b2da      	uxtb	r2, r3
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017026:	2b07      	cmp	r3, #7
 8017028:	d10a      	bne.n	8017040 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017030:	461a      	mov	r2, r3
 8017032:	4b17      	ldr	r3, [pc, #92]	; (8017090 <RegionEU868ComputeRxWindowParameters+0xac>)
 8017034:	5c9b      	ldrb	r3, [r3, r2]
 8017036:	4618      	mov	r0, r3
 8017038:	f7ff f910 	bl	801625c <RegionCommonComputeSymbolTimeFsk>
 801703c:	6178      	str	r0, [r7, #20]
 801703e:	e011      	b.n	8017064 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017046:	461a      	mov	r2, r3
 8017048:	4b11      	ldr	r3, [pc, #68]	; (8017090 <RegionEU868ComputeRxWindowParameters+0xac>)
 801704a:	5c9a      	ldrb	r2, [r3, r2]
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017052:	4619      	mov	r1, r3
 8017054:	4b0d      	ldr	r3, [pc, #52]	; (801708c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8017056:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801705a:	4619      	mov	r1, r3
 801705c:	4610      	mov	r0, r2
 801705e:	f7ff f8e7 	bl	8016230 <RegionCommonComputeSymbolTimeLoRa>
 8017062:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8017064:	4b0b      	ldr	r3, [pc, #44]	; (8017094 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8017066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017068:	4798      	blx	r3
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	3308      	adds	r3, #8
 801706e:	687a      	ldr	r2, [r7, #4]
 8017070:	320c      	adds	r2, #12
 8017072:	7bb9      	ldrb	r1, [r7, #14]
 8017074:	9201      	str	r2, [sp, #4]
 8017076:	9300      	str	r3, [sp, #0]
 8017078:	4603      	mov	r3, r0
 801707a:	68ba      	ldr	r2, [r7, #8]
 801707c:	6978      	ldr	r0, [r7, #20]
 801707e:	f7ff f8fd 	bl	801627c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8017082:	bf00      	nop
 8017084:	3718      	adds	r7, #24
 8017086:	46bd      	mov	sp, r7
 8017088:	bd80      	pop	{r7, pc}
 801708a:	bf00      	nop
 801708c:	0801d508 	.word	0x0801d508
 8017090:	0801d500 	.word	0x0801d500
 8017094:	0801d538 	.word	0x0801d538

08017098 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017098:	b5b0      	push	{r4, r5, r7, lr}
 801709a:	b090      	sub	sp, #64	; 0x40
 801709c:	af0a      	add	r7, sp, #40	; 0x28
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	785b      	ldrb	r3, [r3, #1]
 80170a6:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80170a8:	2300      	movs	r3, #0
 80170aa:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80170ac:	2300      	movs	r3, #0
 80170ae:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	685b      	ldr	r3, [r3, #4]
 80170b4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80170b6:	4b5a      	ldr	r3, [pc, #360]	; (8017220 <RegionEU868RxConfig+0x188>)
 80170b8:	685b      	ldr	r3, [r3, #4]
 80170ba:	4798      	blx	r3
 80170bc:	4603      	mov	r3, r0
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d001      	beq.n	80170c6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80170c2:	2300      	movs	r3, #0
 80170c4:	e0a8      	b.n	8017218 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	7cdb      	ldrb	r3, [r3, #19]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d126      	bne.n	801711c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80170ce:	4b55      	ldr	r3, [pc, #340]	; (8017224 <RegionEU868RxConfig+0x18c>)
 80170d0:	681a      	ldr	r2, [r3, #0]
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	4619      	mov	r1, r3
 80170d8:	460b      	mov	r3, r1
 80170da:	005b      	lsls	r3, r3, #1
 80170dc:	440b      	add	r3, r1
 80170de:	009b      	lsls	r3, r3, #2
 80170e0:	4413      	add	r3, r2
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80170e6:	4b4f      	ldr	r3, [pc, #316]	; (8017224 <RegionEU868RxConfig+0x18c>)
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	781b      	ldrb	r3, [r3, #0]
 80170ee:	4619      	mov	r1, r3
 80170f0:	460b      	mov	r3, r1
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	440b      	add	r3, r1
 80170f6:	009b      	lsls	r3, r3, #2
 80170f8:	4413      	add	r3, r2
 80170fa:	3304      	adds	r3, #4
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d00c      	beq.n	801711c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8017102:	4b48      	ldr	r3, [pc, #288]	; (8017224 <RegionEU868RxConfig+0x18c>)
 8017104:	681a      	ldr	r2, [r3, #0]
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	4619      	mov	r1, r3
 801710c:	460b      	mov	r3, r1
 801710e:	005b      	lsls	r3, r3, #1
 8017110:	440b      	add	r3, r1
 8017112:	009b      	lsls	r3, r3, #2
 8017114:	4413      	add	r3, r2
 8017116:	3304      	adds	r3, #4
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801711c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017120:	4a41      	ldr	r2, [pc, #260]	; (8017228 <RegionEU868RxConfig+0x190>)
 8017122:	5cd3      	ldrb	r3, [r2, r3]
 8017124:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8017126:	4b3e      	ldr	r3, [pc, #248]	; (8017220 <RegionEU868RxConfig+0x188>)
 8017128:	68db      	ldr	r3, [r3, #12]
 801712a:	6938      	ldr	r0, [r7, #16]
 801712c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801712e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017132:	2b07      	cmp	r3, #7
 8017134:	d128      	bne.n	8017188 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8017136:	2300      	movs	r3, #0
 8017138:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801713a:	4b39      	ldr	r3, [pc, #228]	; (8017220 <RegionEU868RxConfig+0x188>)
 801713c:	699c      	ldr	r4, [r3, #24]
 801713e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017146:	fb02 f303 	mul.w	r3, r2, r3
 801714a:	4619      	mov	r1, r3
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	689b      	ldr	r3, [r3, #8]
 8017150:	b29b      	uxth	r3, r3
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	7c92      	ldrb	r2, [r2, #18]
 8017156:	7df8      	ldrb	r0, [r7, #23]
 8017158:	9209      	str	r2, [sp, #36]	; 0x24
 801715a:	2200      	movs	r2, #0
 801715c:	9208      	str	r2, [sp, #32]
 801715e:	2200      	movs	r2, #0
 8017160:	9207      	str	r2, [sp, #28]
 8017162:	2200      	movs	r2, #0
 8017164:	9206      	str	r2, [sp, #24]
 8017166:	2201      	movs	r2, #1
 8017168:	9205      	str	r2, [sp, #20]
 801716a:	2200      	movs	r2, #0
 801716c:	9204      	str	r2, [sp, #16]
 801716e:	2200      	movs	r2, #0
 8017170:	9203      	str	r2, [sp, #12]
 8017172:	9302      	str	r3, [sp, #8]
 8017174:	2305      	movs	r3, #5
 8017176:	9301      	str	r3, [sp, #4]
 8017178:	4b2c      	ldr	r3, [pc, #176]	; (801722c <RegionEU868RxConfig+0x194>)
 801717a:	9300      	str	r3, [sp, #0]
 801717c:	2300      	movs	r3, #0
 801717e:	460a      	mov	r2, r1
 8017180:	f24c 3150 	movw	r1, #50000	; 0xc350
 8017184:	47a0      	blx	r4
 8017186:	e024      	b.n	80171d2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8017188:	2301      	movs	r3, #1
 801718a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801718c:	4b24      	ldr	r3, [pc, #144]	; (8017220 <RegionEU868RxConfig+0x188>)
 801718e:	699c      	ldr	r4, [r3, #24]
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	789b      	ldrb	r3, [r3, #2]
 8017194:	461d      	mov	r5, r3
 8017196:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	689b      	ldr	r3, [r3, #8]
 801719e:	b29b      	uxth	r3, r3
 80171a0:	687a      	ldr	r2, [r7, #4]
 80171a2:	7c92      	ldrb	r2, [r2, #18]
 80171a4:	7df8      	ldrb	r0, [r7, #23]
 80171a6:	9209      	str	r2, [sp, #36]	; 0x24
 80171a8:	2201      	movs	r2, #1
 80171aa:	9208      	str	r2, [sp, #32]
 80171ac:	2200      	movs	r2, #0
 80171ae:	9207      	str	r2, [sp, #28]
 80171b0:	2200      	movs	r2, #0
 80171b2:	9206      	str	r2, [sp, #24]
 80171b4:	2200      	movs	r2, #0
 80171b6:	9205      	str	r2, [sp, #20]
 80171b8:	2200      	movs	r2, #0
 80171ba:	9204      	str	r2, [sp, #16]
 80171bc:	2200      	movs	r2, #0
 80171be:	9203      	str	r2, [sp, #12]
 80171c0:	9302      	str	r3, [sp, #8]
 80171c2:	2308      	movs	r3, #8
 80171c4:	9301      	str	r3, [sp, #4]
 80171c6:	2300      	movs	r3, #0
 80171c8:	9300      	str	r3, [sp, #0]
 80171ca:	2301      	movs	r3, #1
 80171cc:	460a      	mov	r2, r1
 80171ce:	4629      	mov	r1, r5
 80171d0:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	7c5b      	ldrb	r3, [r3, #17]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d005      	beq.n	80171e6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80171da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171de:	4a14      	ldr	r2, [pc, #80]	; (8017230 <RegionEU868RxConfig+0x198>)
 80171e0:	5cd3      	ldrb	r3, [r2, r3]
 80171e2:	75bb      	strb	r3, [r7, #22]
 80171e4:	e004      	b.n	80171f0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80171e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80171ea:	4a12      	ldr	r2, [pc, #72]	; (8017234 <RegionEU868RxConfig+0x19c>)
 80171ec:	5cd3      	ldrb	r3, [r2, r3]
 80171ee:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80171f0:	4b0b      	ldr	r3, [pc, #44]	; (8017220 <RegionEU868RxConfig+0x188>)
 80171f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171f4:	7dba      	ldrb	r2, [r7, #22]
 80171f6:	320d      	adds	r2, #13
 80171f8:	b2d1      	uxtb	r1, r2
 80171fa:	7dfa      	ldrb	r2, [r7, #23]
 80171fc:	4610      	mov	r0, r2
 80171fe:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	7cdb      	ldrb	r3, [r3, #19]
 8017204:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8017208:	6939      	ldr	r1, [r7, #16]
 801720a:	4618      	mov	r0, r3
 801720c:	f7ff fab0 	bl	8016770 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 8017210:	683b      	ldr	r3, [r7, #0]
 8017212:	7bfa      	ldrb	r2, [r7, #15]
 8017214:	701a      	strb	r2, [r3, #0]
    return true;
 8017216:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8017218:	4618      	mov	r0, r3
 801721a:	3718      	adds	r7, #24
 801721c:	46bd      	mov	sp, r7
 801721e:	bdb0      	pop	{r4, r5, r7, pc}
 8017220:	0801d538 	.word	0x0801d538
 8017224:	20001b20 	.word	0x20001b20
 8017228:	0801d500 	.word	0x0801d500
 801722c:	00014585 	.word	0x00014585
 8017230:	0801d530 	.word	0x0801d530
 8017234:	0801d528 	.word	0x0801d528

08017238 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017238:	b590      	push	{r4, r7, lr}
 801723a:	b093      	sub	sp, #76	; 0x4c
 801723c:	af0a      	add	r7, sp, #40	; 0x28
 801723e:	60f8      	str	r0, [r7, #12]
 8017240:	60b9      	str	r1, [r7, #8]
 8017242:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801724a:	461a      	mov	r2, r3
 801724c:	4b5d      	ldr	r3, [pc, #372]	; (80173c4 <RegionEU868TxConfig+0x18c>)
 801724e:	5c9b      	ldrb	r3, [r3, r2]
 8017250:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8017258:	4b5b      	ldr	r3, [pc, #364]	; (80173c8 <RegionEU868TxConfig+0x190>)
 801725a:	681a      	ldr	r2, [r3, #0]
 801725c:	4b5b      	ldr	r3, [pc, #364]	; (80173cc <RegionEU868TxConfig+0x194>)
 801725e:	6819      	ldr	r1, [r3, #0]
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	781b      	ldrb	r3, [r3, #0]
 8017264:	461c      	mov	r4, r3
 8017266:	4623      	mov	r3, r4
 8017268:	005b      	lsls	r3, r3, #1
 801726a:	4423      	add	r3, r4
 801726c:	009b      	lsls	r3, r3, #2
 801726e:	440b      	add	r3, r1
 8017270:	3309      	adds	r3, #9
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	4619      	mov	r1, r3
 8017276:	460b      	mov	r3, r1
 8017278:	005b      	lsls	r3, r3, #1
 801727a:	440b      	add	r3, r1
 801727c:	00db      	lsls	r3, r3, #3
 801727e:	4413      	add	r3, r2
 8017280:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8017284:	4619      	mov	r1, r3
 8017286:	f7ff fa40 	bl	801670a <RegionCommonLimitTxPower>
 801728a:	4603      	mov	r3, r0
 801728c:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017294:	494e      	ldr	r1, [pc, #312]	; (80173d0 <RegionEU868TxConfig+0x198>)
 8017296:	4618      	mov	r0, r3
 8017298:	f7ff fa4c 	bl	8016734 <RegionCommonGetBandwidth>
 801729c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801729e:	2300      	movs	r3, #0
 80172a0:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	6859      	ldr	r1, [r3, #4]
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	689a      	ldr	r2, [r3, #8]
 80172aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7ff f89c 	bl	80163ec <RegionCommonComputeTxPower>
 80172b4:	4603      	mov	r3, r0
 80172b6:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80172b8:	4b46      	ldr	r3, [pc, #280]	; (80173d4 <RegionEU868TxConfig+0x19c>)
 80172ba:	68da      	ldr	r2, [r3, #12]
 80172bc:	4b43      	ldr	r3, [pc, #268]	; (80173cc <RegionEU868TxConfig+0x194>)
 80172be:	6819      	ldr	r1, [r3, #0]
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	781b      	ldrb	r3, [r3, #0]
 80172c4:	4618      	mov	r0, r3
 80172c6:	4603      	mov	r3, r0
 80172c8:	005b      	lsls	r3, r3, #1
 80172ca:	4403      	add	r3, r0
 80172cc:	009b      	lsls	r3, r3, #2
 80172ce:	440b      	add	r3, r1
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	4618      	mov	r0, r3
 80172d4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80172dc:	2b07      	cmp	r3, #7
 80172de:	d124      	bne.n	801732a <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80172e0:	2300      	movs	r3, #0
 80172e2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80172e4:	4b3b      	ldr	r3, [pc, #236]	; (80173d4 <RegionEU868TxConfig+0x19c>)
 80172e6:	69dc      	ldr	r4, [r3, #28]
 80172e8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80172ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80172f0:	fb02 f303 	mul.w	r3, r2, r3
 80172f4:	461a      	mov	r2, r3
 80172f6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80172fa:	7ff8      	ldrb	r0, [r7, #31]
 80172fc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8017300:	9308      	str	r3, [sp, #32]
 8017302:	2300      	movs	r3, #0
 8017304:	9307      	str	r3, [sp, #28]
 8017306:	2300      	movs	r3, #0
 8017308:	9306      	str	r3, [sp, #24]
 801730a:	2300      	movs	r3, #0
 801730c:	9305      	str	r3, [sp, #20]
 801730e:	2301      	movs	r3, #1
 8017310:	9304      	str	r3, [sp, #16]
 8017312:	2300      	movs	r3, #0
 8017314:	9303      	str	r3, [sp, #12]
 8017316:	2305      	movs	r3, #5
 8017318:	9302      	str	r3, [sp, #8]
 801731a:	2300      	movs	r3, #0
 801731c:	9301      	str	r3, [sp, #4]
 801731e:	9200      	str	r2, [sp, #0]
 8017320:	69bb      	ldr	r3, [r7, #24]
 8017322:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8017326:	47a0      	blx	r4
 8017328:	e01d      	b.n	8017366 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801732a:	2301      	movs	r3, #1
 801732c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801732e:	4b29      	ldr	r3, [pc, #164]	; (80173d4 <RegionEU868TxConfig+0x19c>)
 8017330:	69dc      	ldr	r4, [r3, #28]
 8017332:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017336:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801733a:	7ff8      	ldrb	r0, [r7, #31]
 801733c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8017340:	9208      	str	r2, [sp, #32]
 8017342:	2200      	movs	r2, #0
 8017344:	9207      	str	r2, [sp, #28]
 8017346:	2200      	movs	r2, #0
 8017348:	9206      	str	r2, [sp, #24]
 801734a:	2200      	movs	r2, #0
 801734c:	9205      	str	r2, [sp, #20]
 801734e:	2201      	movs	r2, #1
 8017350:	9204      	str	r2, [sp, #16]
 8017352:	2200      	movs	r2, #0
 8017354:	9203      	str	r2, [sp, #12]
 8017356:	2208      	movs	r2, #8
 8017358:	9202      	str	r2, [sp, #8]
 801735a:	2201      	movs	r2, #1
 801735c:	9201      	str	r2, [sp, #4]
 801735e:	9300      	str	r3, [sp, #0]
 8017360:	69bb      	ldr	r3, [r7, #24]
 8017362:	2200      	movs	r2, #0
 8017364:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8017366:	4b19      	ldr	r3, [pc, #100]	; (80173cc <RegionEU868TxConfig+0x194>)
 8017368:	681a      	ldr	r2, [r3, #0]
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	4619      	mov	r1, r3
 8017370:	460b      	mov	r3, r1
 8017372:	005b      	lsls	r3, r3, #1
 8017374:	440b      	add	r3, r1
 8017376:	009b      	lsls	r3, r3, #2
 8017378:	4413      	add	r3, r2
 801737a:	681a      	ldr	r2, [r3, #0]
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017382:	4619      	mov	r1, r3
 8017384:	4610      	mov	r0, r2
 8017386:	f7ff fa25 	bl	80167d4 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	899b      	ldrh	r3, [r3, #12]
 8017394:	4619      	mov	r1, r3
 8017396:	4610      	mov	r0, r2
 8017398:	f7ff faaa 	bl	80168f0 <GetTimeOnAir>
 801739c:	4602      	mov	r2, r0
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80173a2:	4b0c      	ldr	r3, [pc, #48]	; (80173d4 <RegionEU868TxConfig+0x19c>)
 80173a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173a6:	68fa      	ldr	r2, [r7, #12]
 80173a8:	8992      	ldrh	r2, [r2, #12]
 80173aa:	b2d1      	uxtb	r1, r2
 80173ac:	7ffa      	ldrb	r2, [r7, #31]
 80173ae:	4610      	mov	r0, r2
 80173b0:	4798      	blx	r3

    *txPower = txPowerLimited;
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	7f7a      	ldrb	r2, [r7, #29]
 80173b6:	701a      	strb	r2, [r3, #0]
    return true;
 80173b8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3724      	adds	r7, #36	; 0x24
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd90      	pop	{r4, r7, pc}
 80173c2:	bf00      	nop
 80173c4:	0801d500 	.word	0x0801d500
 80173c8:	20001b24 	.word	0x20001b24
 80173cc:	20001b20 	.word	0x20001b20
 80173d0:	0801d508 	.word	0x0801d508
 80173d4:	0801d538 	.word	0x0801d538

080173d8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80173d8:	b590      	push	{r4, r7, lr}
 80173da:	b093      	sub	sp, #76	; 0x4c
 80173dc:	af00      	add	r7, sp, #0
 80173de:	60f8      	str	r0, [r7, #12]
 80173e0:	60b9      	str	r1, [r7, #8]
 80173e2:	607a      	str	r2, [r7, #4]
 80173e4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80173e6:	2307      	movs	r3, #7
 80173e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80173ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80173f0:	2200      	movs	r2, #0
 80173f2:	601a      	str	r2, [r3, #0]
 80173f4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80173f6:	2300      	movs	r3, #0
 80173f8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80173fc:	2300      	movs	r3, #0
 80173fe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 8017402:	2300      	movs	r3, #0
 8017404:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017406:	e085      	b.n	8017514 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	685a      	ldr	r2, [r3, #4]
 801740c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8017410:	4413      	add	r3, r2
 8017412:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8017416:	4611      	mov	r1, r2
 8017418:	4618      	mov	r0, r3
 801741a:	f7fe fe2f 	bl	801607c <RegionCommonParseLinkAdrReq>
 801741e:	4603      	mov	r3, r0
 8017420:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 8017424:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017428:	2b00      	cmp	r3, #0
 801742a:	d07b      	beq.n	8017524 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801742c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8017430:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8017434:	4413      	add	r3, r2
 8017436:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801743a:	2307      	movs	r3, #7
 801743c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8017440:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017444:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8017446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801744a:	2b00      	cmp	r3, #0
 801744c:	d109      	bne.n	8017462 <RegionEU868LinkAdrReq+0x8a>
 801744e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017450:	2b00      	cmp	r3, #0
 8017452:	d106      	bne.n	8017462 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8017454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017458:	f023 0301 	bic.w	r3, r3, #1
 801745c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017460:	e058      	b.n	8017514 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017466:	2b00      	cmp	r3, #0
 8017468:	d003      	beq.n	8017472 <RegionEU868LinkAdrReq+0x9a>
 801746a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801746e:	2b05      	cmp	r3, #5
 8017470:	d903      	bls.n	801747a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017472:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8017476:	2b06      	cmp	r3, #6
 8017478:	d906      	bls.n	8017488 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801747a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801747e:	f023 0301 	bic.w	r3, r3, #1
 8017482:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8017486:	e045      	b.n	8017514 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017488:	2300      	movs	r3, #0
 801748a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801748e:	e03d      	b.n	801750c <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8017490:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017494:	2b06      	cmp	r3, #6
 8017496:	d118      	bne.n	80174ca <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8017498:	4b5f      	ldr	r3, [pc, #380]	; (8017618 <RegionEU868LinkAdrReq+0x240>)
 801749a:	6819      	ldr	r1, [r3, #0]
 801749c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80174a0:	4613      	mov	r3, r2
 80174a2:	005b      	lsls	r3, r3, #1
 80174a4:	4413      	add	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	440b      	add	r3, r1
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d028      	beq.n	8017502 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80174b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80174b4:	2201      	movs	r2, #1
 80174b6:	fa02 f303 	lsl.w	r3, r2, r3
 80174ba:	b21a      	sxth	r2, r3
 80174bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174be:	b21b      	sxth	r3, r3
 80174c0:	4313      	orrs	r3, r2
 80174c2:	b21b      	sxth	r3, r3
 80174c4:	b29b      	uxth	r3, r3
 80174c6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80174c8:	e01b      	b.n	8017502 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80174ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174cc:	461a      	mov	r2, r3
 80174ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80174d2:	fa42 f303 	asr.w	r3, r2, r3
 80174d6:	f003 0301 	and.w	r3, r3, #1
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d011      	beq.n	8017502 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80174de:	4b4e      	ldr	r3, [pc, #312]	; (8017618 <RegionEU868LinkAdrReq+0x240>)
 80174e0:	6819      	ldr	r1, [r3, #0]
 80174e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80174e6:	4613      	mov	r3, r2
 80174e8:	005b      	lsls	r3, r3, #1
 80174ea:	4413      	add	r3, r2
 80174ec:	009b      	lsls	r3, r3, #2
 80174ee:	440b      	add	r3, r1
 80174f0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d105      	bne.n	8017502 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80174f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80174fa:	f023 0301 	bic.w	r3, r3, #1
 80174fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8017502:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017506:	3301      	adds	r3, #1
 8017508:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801750c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8017510:	2b0f      	cmp	r3, #15
 8017512:	d9bd      	bls.n	8017490 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	7a1b      	ldrb	r3, [r3, #8]
 8017518:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801751c:	429a      	cmp	r2, r3
 801751e:	f4ff af73 	bcc.w	8017408 <RegionEU868LinkAdrReq+0x30>
 8017522:	e000      	b.n	8017526 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8017524:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8017526:	2302      	movs	r3, #2
 8017528:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	7a5b      	ldrb	r3, [r3, #9]
 8017530:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8017534:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017538:	4618      	mov	r0, r3
 801753a:	f7ff fa29 	bl	8016990 <RegionEU868GetPhyParam>
 801753e:	4603      	mov	r3, r0
 8017540:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 8017542:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8017546:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	7a9b      	ldrb	r3, [r3, #10]
 801754c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 801754e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8017552:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017554:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8017558:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801755a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801755e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8017566:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801756e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	7b5b      	ldrb	r3, [r3, #13]
 8017574:	b25b      	sxtb	r3, r3
 8017576:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8017578:	2310      	movs	r3, #16
 801757a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 801757c:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8017580:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8017582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017584:	b25b      	sxtb	r3, r3
 8017586:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801758a:	2307      	movs	r3, #7
 801758c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8017590:	4b21      	ldr	r3, [pc, #132]	; (8017618 <RegionEU868LinkAdrReq+0x240>)
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8017596:	2307      	movs	r3, #7
 8017598:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 801759c:	2300      	movs	r3, #0
 801759e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80175a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80175ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80175b0:	1c9a      	adds	r2, r3, #2
 80175b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80175b6:	1c59      	adds	r1, r3, #1
 80175b8:	f107 0010 	add.w	r0, r7, #16
 80175bc:	4623      	mov	r3, r4
 80175be:	f7fe fdae 	bl	801611e <RegionCommonLinkAdrReqVerifyParams>
 80175c2:	4603      	mov	r3, r0
 80175c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80175c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80175cc:	2b07      	cmp	r3, #7
 80175ce:	d10d      	bne.n	80175ec <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 80175d0:	4b11      	ldr	r3, [pc, #68]	; (8017618 <RegionEU868LinkAdrReq+0x240>)
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80175d8:	220c      	movs	r2, #12
 80175da:	2100      	movs	r1, #0
 80175dc:	4618      	mov	r0, r3
 80175de:	f000 fb2f 	bl	8017c40 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80175e2:	4b0d      	ldr	r3, [pc, #52]	; (8017618 <RegionEU868LinkAdrReq+0x240>)
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80175e8:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80175ec:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80175f4:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80175fc:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017606:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 801760a:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 801760c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8017610:	4618      	mov	r0, r3
 8017612:	374c      	adds	r7, #76	; 0x4c
 8017614:	46bd      	mov	sp, r7
 8017616:	bd90      	pop	{r4, r7, pc}
 8017618:	20001b20 	.word	0x20001b20

0801761c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8017624:	2307      	movs	r3, #7
 8017626:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017628:	2300      	movs	r3, #0
 801762a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	685b      	ldr	r3, [r3, #4]
 8017630:	f107 020e 	add.w	r2, r7, #14
 8017634:	4611      	mov	r1, r2
 8017636:	4618      	mov	r0, r3
 8017638:	f7ff f8e4 	bl	8016804 <VerifyRfFreq>
 801763c:	4603      	mov	r3, r0
 801763e:	f083 0301 	eor.w	r3, r3, #1
 8017642:	b2db      	uxtb	r3, r3
 8017644:	2b00      	cmp	r3, #0
 8017646:	d003      	beq.n	8017650 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8017648:	7bfb      	ldrb	r3, [r7, #15]
 801764a:	f023 0301 	bic.w	r3, r3, #1
 801764e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	f993 3000 	ldrsb.w	r3, [r3]
 8017656:	2207      	movs	r2, #7
 8017658:	2100      	movs	r1, #0
 801765a:	4618      	mov	r0, r3
 801765c:	f7fe fb4d 	bl	8015cfa <RegionCommonValueInRange>
 8017660:	4603      	mov	r3, r0
 8017662:	2b00      	cmp	r3, #0
 8017664:	d103      	bne.n	801766e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8017666:	7bfb      	ldrb	r3, [r7, #15]
 8017668:	f023 0302 	bic.w	r3, r3, #2
 801766c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8017674:	2205      	movs	r2, #5
 8017676:	2100      	movs	r1, #0
 8017678:	4618      	mov	r0, r3
 801767a:	f7fe fb3e 	bl	8015cfa <RegionCommonValueInRange>
 801767e:	4603      	mov	r3, r0
 8017680:	2b00      	cmp	r3, #0
 8017682:	d103      	bne.n	801768c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017684:	7bfb      	ldrb	r3, [r7, #15]
 8017686:	f023 0304 	bic.w	r3, r3, #4
 801768a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 801768c:	7bfb      	ldrb	r3, [r7, #15]
}
 801768e:	4618      	mov	r0, r3
 8017690:	3710      	adds	r7, #16
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
	...

08017698 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b086      	sub	sp, #24
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80176a0:	2303      	movs	r3, #3
 80176a2:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d114      	bne.n	80176d8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 80176b8:	f107 0308 	add.w	r3, r7, #8
 80176bc:	4618      	mov	r0, r3
 80176be:	f000 f9f9 	bl	8017ab4 <RegionEU868ChannelsRemove>
 80176c2:	4603      	mov	r3, r0
 80176c4:	f083 0301 	eor.w	r3, r3, #1
 80176c8:	b2db      	uxtb	r3, r3
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d03b      	beq.n	8017746 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 80176ce:	7dfb      	ldrb	r3, [r7, #23]
 80176d0:	f023 0303 	bic.w	r3, r3, #3
 80176d4:	75fb      	strb	r3, [r7, #23]
 80176d6:	e036      	b.n	8017746 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80176e4:	b2db      	uxtb	r3, r3
 80176e6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 80176e8:	f107 030c 	add.w	r3, r7, #12
 80176ec:	4618      	mov	r0, r3
 80176ee:	f000 f93f 	bl	8017970 <RegionEU868ChannelAdd>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b06      	cmp	r3, #6
 80176f6:	d820      	bhi.n	801773a <RegionEU868NewChannelReq+0xa2>
 80176f8:	a201      	add	r2, pc, #4	; (adr r2, 8017700 <RegionEU868NewChannelReq+0x68>)
 80176fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176fe:	bf00      	nop
 8017700:	08017745 	.word	0x08017745
 8017704:	0801773b 	.word	0x0801773b
 8017708:	0801773b 	.word	0x0801773b
 801770c:	0801773b 	.word	0x0801773b
 8017710:	0801771d 	.word	0x0801771d
 8017714:	08017727 	.word	0x08017727
 8017718:	08017731 	.word	0x08017731
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 801771c:	7dfb      	ldrb	r3, [r7, #23]
 801771e:	f023 0301 	bic.w	r3, r3, #1
 8017722:	75fb      	strb	r3, [r7, #23]
                break;
 8017724:	e00f      	b.n	8017746 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017726:	7dfb      	ldrb	r3, [r7, #23]
 8017728:	f023 0302 	bic.w	r3, r3, #2
 801772c:	75fb      	strb	r3, [r7, #23]
                break;
 801772e:	e00a      	b.n	8017746 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017730:	7dfb      	ldrb	r3, [r7, #23]
 8017732:	f023 0303 	bic.w	r3, r3, #3
 8017736:	75fb      	strb	r3, [r7, #23]
                break;
 8017738:	e005      	b.n	8017746 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 801773a:	7dfb      	ldrb	r3, [r7, #23]
 801773c:	f023 0303 	bic.w	r3, r3, #3
 8017740:	75fb      	strb	r3, [r7, #23]
                break;
 8017742:	e000      	b.n	8017746 <RegionEU868NewChannelReq+0xae>
                break;
 8017744:	bf00      	nop
            }
        }
    }

    return status;
 8017746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801774a:	4618      	mov	r0, r3
 801774c:	3718      	adds	r7, #24
 801774e:	46bd      	mov	sp, r7
 8017750:	bd80      	pop	{r7, pc}
 8017752:	bf00      	nop

08017754 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017754:	b480      	push	{r7}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801775c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017760:	4618      	mov	r0, r3
 8017762:	370c      	adds	r7, #12
 8017764:	46bd      	mov	sp, r7
 8017766:	bc80      	pop	{r7}
 8017768:	4770      	bx	lr
	...

0801776c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 801776c:	b580      	push	{r7, lr}
 801776e:	b084      	sub	sp, #16
 8017770:	af00      	add	r7, sp, #0
 8017772:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8017774:	2303      	movs	r3, #3
 8017776:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017778:	2300      	movs	r3, #0
 801777a:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	f107 020e 	add.w	r2, r7, #14
 8017784:	4611      	mov	r1, r2
 8017786:	4618      	mov	r0, r3
 8017788:	f7ff f83c 	bl	8016804 <VerifyRfFreq>
 801778c:	4603      	mov	r3, r0
 801778e:	f083 0301 	eor.w	r3, r3, #1
 8017792:	b2db      	uxtb	r3, r3
 8017794:	2b00      	cmp	r3, #0
 8017796:	d003      	beq.n	80177a0 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 8017798:	7bfb      	ldrb	r3, [r7, #15]
 801779a:	f023 0301 	bic.w	r3, r3, #1
 801779e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80177a0:	4b13      	ldr	r3, [pc, #76]	; (80177f0 <RegionEU868DlChannelReq+0x84>)
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	4619      	mov	r1, r3
 80177aa:	460b      	mov	r3, r1
 80177ac:	005b      	lsls	r3, r3, #1
 80177ae:	440b      	add	r3, r1
 80177b0:	009b      	lsls	r3, r3, #2
 80177b2:	4413      	add	r3, r2
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d103      	bne.n	80177c2 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 80177ba:	7bfb      	ldrb	r3, [r7, #15]
 80177bc:	f023 0302 	bic.w	r3, r3, #2
 80177c0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80177c2:	7bfb      	ldrb	r3, [r7, #15]
 80177c4:	2b03      	cmp	r3, #3
 80177c6:	d10d      	bne.n	80177e4 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80177c8:	4b09      	ldr	r3, [pc, #36]	; (80177f0 <RegionEU868DlChannelReq+0x84>)
 80177ca:	6819      	ldr	r1, [r3, #0]
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	4618      	mov	r0, r3
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	685a      	ldr	r2, [r3, #4]
 80177d6:	4603      	mov	r3, r0
 80177d8:	005b      	lsls	r3, r3, #1
 80177da:	4403      	add	r3, r0
 80177dc:	009b      	lsls	r3, r3, #2
 80177de:	440b      	add	r3, r1
 80177e0:	3304      	adds	r3, #4
 80177e2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 80177e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80177e8:	4618      	mov	r0, r3
 80177ea:	3710      	adds	r7, #16
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	20001b20 	.word	0x20001b20

080177f4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80177f4:	b480      	push	{r7}
 80177f6:	b083      	sub	sp, #12
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	4603      	mov	r3, r0
 80177fc:	460a      	mov	r2, r1
 80177fe:	71fb      	strb	r3, [r7, #7]
 8017800:	4613      	mov	r3, r2
 8017802:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8017804:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8017808:	4618      	mov	r0, r3
 801780a:	370c      	adds	r7, #12
 801780c:	46bd      	mov	sp, r7
 801780e:	bc80      	pop	{r7}
 8017810:	4770      	bx	lr
	...

08017814 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b09a      	sub	sp, #104	; 0x68
 8017818:	af02      	add	r7, sp, #8
 801781a:	60f8      	str	r0, [r7, #12]
 801781c:	60b9      	str	r1, [r7, #8]
 801781e:	607a      	str	r2, [r7, #4]
 8017820:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8017822:	2300      	movs	r3, #0
 8017824:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 8017828:	2300      	movs	r3, #0
 801782a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 801782e:	2300      	movs	r3, #0
 8017830:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017832:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8017836:	2200      	movs	r2, #0
 8017838:	601a      	str	r2, [r3, #0]
 801783a:	605a      	str	r2, [r3, #4]
 801783c:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801783e:	230c      	movs	r3, #12
 8017840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8017844:	2307      	movs	r3, #7
 8017846:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8017848:	4b47      	ldr	r3, [pc, #284]	; (8017968 <RegionEU868NextChannel+0x154>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017850:	2201      	movs	r2, #1
 8017852:	2100      	movs	r1, #0
 8017854:	4618      	mov	r0, r3
 8017856:	f7fe faa1 	bl	8015d9c <RegionCommonCountChannels>
 801785a:	4603      	mov	r3, r0
 801785c:	2b00      	cmp	r3, #0
 801785e:	d10a      	bne.n	8017876 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017860:	4b41      	ldr	r3, [pc, #260]	; (8017968 <RegionEU868NextChannel+0x154>)
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 8017868:	4b3f      	ldr	r3, [pc, #252]	; (8017968 <RegionEU868NextChannel+0x154>)
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	f042 0207 	orr.w	r2, r2, #7
 8017870:	b292      	uxth	r2, r2
 8017872:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	7a5b      	ldrb	r3, [r3, #9]
 801787a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801787c:	68fb      	ldr	r3, [r7, #12]
 801787e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017882:	b2db      	uxtb	r3, r3
 8017884:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8017886:	4b38      	ldr	r3, [pc, #224]	; (8017968 <RegionEU868NextChannel+0x154>)
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801788e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8017890:	4b35      	ldr	r3, [pc, #212]	; (8017968 <RegionEU868NextChannel+0x154>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8017896:	4b35      	ldr	r3, [pc, #212]	; (801796c <RegionEU868NextChannel+0x158>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 801789c:	2310      	movs	r3, #16
 801789e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80178a0:	f107 0312 	add.w	r3, r7, #18
 80178a4:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	7a9b      	ldrb	r3, [r3, #10]
 80178b6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 80178ba:	2306      	movs	r3, #6
 80178bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80178c0:	68fa      	ldr	r2, [r7, #12]
 80178c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80178c6:	320c      	adds	r2, #12
 80178c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80178cc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	7d1b      	ldrb	r3, [r3, #20]
 80178d4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	8adb      	ldrh	r3, [r3, #22]
 80178e2:	4619      	mov	r1, r3
 80178e4:	4610      	mov	r0, r2
 80178e6:	f7ff f803 	bl	80168f0 <GetTimeOnAir>
 80178ea:	4603      	mov	r3, r0
 80178ec:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80178ee:	f107 0314 	add.w	r3, r7, #20
 80178f2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80178f4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 80178f8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80178fc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	9301      	str	r3, [sp, #4]
 8017904:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8017908:	9300      	str	r3, [sp, #0]
 801790a:	460b      	mov	r3, r1
 801790c:	6839      	ldr	r1, [r7, #0]
 801790e:	f7fe fe5c 	bl	80165ca <RegionCommonIdentifyChannels>
 8017912:	4603      	mov	r3, r0
 8017914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8017918:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801791c:	2b00      	cmp	r3, #0
 801791e:	d10e      	bne.n	801793e <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017920:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8017924:	3b01      	subs	r3, #1
 8017926:	4619      	mov	r1, r3
 8017928:	2000      	movs	r0, #0
 801792a:	f000 f937 	bl	8017b9c <randr>
 801792e:	4603      	mov	r3, r0
 8017930:	3360      	adds	r3, #96	; 0x60
 8017932:	443b      	add	r3, r7
 8017934:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8017938:	68bb      	ldr	r3, [r7, #8]
 801793a:	701a      	strb	r2, [r3, #0]
 801793c:	e00e      	b.n	801795c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801793e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017942:	2b0c      	cmp	r3, #12
 8017944:	d10a      	bne.n	801795c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8017946:	4b08      	ldr	r3, [pc, #32]	; (8017968 <RegionEU868NextChannel+0x154>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	f8b3 2360 	ldrh.w	r2, [r3, #864]	; 0x360
 801794e:	4b06      	ldr	r3, [pc, #24]	; (8017968 <RegionEU868NextChannel+0x154>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	f042 0207 	orr.w	r2, r2, #7
 8017956:	b292      	uxth	r2, r2
 8017958:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    }
    return status;
 801795c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017960:	4618      	mov	r0, r3
 8017962:	3760      	adds	r7, #96	; 0x60
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	20001b20 	.word	0x20001b20
 801796c:	20001b24 	.word	0x20001b24

08017970 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b084      	sub	sp, #16
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8017978:	2300      	movs	r3, #0
 801797a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801797c:	2300      	movs	r3, #0
 801797e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8017980:	2300      	movs	r3, #0
 8017982:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	791b      	ldrb	r3, [r3, #4]
 8017988:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801798a:	7b7b      	ldrb	r3, [r7, #13]
 801798c:	2b02      	cmp	r3, #2
 801798e:	d801      	bhi.n	8017994 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017990:	2306      	movs	r3, #6
 8017992:	e089      	b.n	8017aa8 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8017994:	7b7b      	ldrb	r3, [r7, #13]
 8017996:	2b0f      	cmp	r3, #15
 8017998:	d901      	bls.n	801799e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801799a:	2303      	movs	r3, #3
 801799c:	e084      	b.n	8017aa8 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	7a1b      	ldrb	r3, [r3, #8]
 80179a4:	f343 0303 	sbfx	r3, r3, #0, #4
 80179a8:	b25b      	sxtb	r3, r3
 80179aa:	2207      	movs	r2, #7
 80179ac:	2100      	movs	r1, #0
 80179ae:	4618      	mov	r0, r3
 80179b0:	f7fe f9a3 	bl	8015cfa <RegionCommonValueInRange>
 80179b4:	4603      	mov	r3, r0
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d101      	bne.n	80179be <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 80179ba:	2301      	movs	r3, #1
 80179bc:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	7a1b      	ldrb	r3, [r3, #8]
 80179c4:	f343 1303 	sbfx	r3, r3, #4, #4
 80179c8:	b25b      	sxtb	r3, r3
 80179ca:	2207      	movs	r2, #7
 80179cc:	2100      	movs	r1, #0
 80179ce:	4618      	mov	r0, r3
 80179d0:	f7fe f993 	bl	8015cfa <RegionCommonValueInRange>
 80179d4:	4603      	mov	r3, r0
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d101      	bne.n	80179de <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80179da:	2301      	movs	r3, #1
 80179dc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	7a1b      	ldrb	r3, [r3, #8]
 80179e4:	f343 0303 	sbfx	r3, r3, #0, #4
 80179e8:	b25a      	sxtb	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	7a1b      	ldrb	r3, [r3, #8]
 80179f0:	f343 1303 	sbfx	r3, r3, #4, #4
 80179f4:	b25b      	sxtb	r3, r3
 80179f6:	429a      	cmp	r2, r3
 80179f8:	dd01      	ble.n	80179fe <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80179fa:	2301      	movs	r3, #1
 80179fc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80179fe:	7bbb      	ldrb	r3, [r7, #14]
 8017a00:	f083 0301 	eor.w	r3, r3, #1
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d010      	beq.n	8017a2c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f107 020c 	add.w	r2, r7, #12
 8017a14:	4611      	mov	r1, r2
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fe fef4 	bl	8016804 <VerifyRfFreq>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	f083 0301 	eor.w	r3, r3, #1
 8017a22:	b2db      	uxtb	r3, r3
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d001      	beq.n	8017a2c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8017a28:	2301      	movs	r3, #1
 8017a2a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017a2c:	7bfb      	ldrb	r3, [r7, #15]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d004      	beq.n	8017a3c <RegionEU868ChannelAdd+0xcc>
 8017a32:	7bbb      	ldrb	r3, [r7, #14]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d001      	beq.n	8017a3c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017a38:	2306      	movs	r3, #6
 8017a3a:	e035      	b.n	8017aa8 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8017a3c:	7bfb      	ldrb	r3, [r7, #15]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d001      	beq.n	8017a46 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017a42:	2305      	movs	r3, #5
 8017a44:	e030      	b.n	8017aa8 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8017a46:	7bbb      	ldrb	r3, [r7, #14]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d001      	beq.n	8017a50 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017a4c:	2304      	movs	r3, #4
 8017a4e:	e02b      	b.n	8017aa8 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8017a50:	4b17      	ldr	r3, [pc, #92]	; (8017ab0 <RegionEU868ChannelAdd+0x140>)
 8017a52:	6819      	ldr	r1, [r3, #0]
 8017a54:	7b7a      	ldrb	r2, [r7, #13]
 8017a56:	4613      	mov	r3, r2
 8017a58:	005b      	lsls	r3, r3, #1
 8017a5a:	4413      	add	r3, r2
 8017a5c:	009b      	lsls	r3, r3, #2
 8017a5e:	18c8      	adds	r0, r1, r3
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	220c      	movs	r2, #12
 8017a66:	4619      	mov	r1, r3
 8017a68:	f000 f8af 	bl	8017bca <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8017a6c:	4b10      	ldr	r3, [pc, #64]	; (8017ab0 <RegionEU868ChannelAdd+0x140>)
 8017a6e:	6819      	ldr	r1, [r3, #0]
 8017a70:	7b7a      	ldrb	r2, [r7, #13]
 8017a72:	7b38      	ldrb	r0, [r7, #12]
 8017a74:	4613      	mov	r3, r2
 8017a76:	005b      	lsls	r3, r3, #1
 8017a78:	4413      	add	r3, r2
 8017a7a:	009b      	lsls	r3, r3, #2
 8017a7c:	440b      	add	r3, r1
 8017a7e:	3309      	adds	r3, #9
 8017a80:	4602      	mov	r2, r0
 8017a82:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8017a84:	4b0a      	ldr	r3, [pc, #40]	; (8017ab0 <RegionEU868ChannelAdd+0x140>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f8b3 3360 	ldrh.w	r3, [r3, #864]	; 0x360
 8017a8c:	b21a      	sxth	r2, r3
 8017a8e:	7b7b      	ldrb	r3, [r7, #13]
 8017a90:	2101      	movs	r1, #1
 8017a92:	fa01 f303 	lsl.w	r3, r1, r3
 8017a96:	b21b      	sxth	r3, r3
 8017a98:	4313      	orrs	r3, r2
 8017a9a:	b21a      	sxth	r2, r3
 8017a9c:	4b04      	ldr	r3, [pc, #16]	; (8017ab0 <RegionEU868ChannelAdd+0x140>)
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	b292      	uxth	r2, r2
 8017aa2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8017aa6:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3710      	adds	r7, #16
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}
 8017ab0:	20001b20 	.word	0x20001b20

08017ab4 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	b086      	sub	sp, #24
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	781b      	ldrb	r3, [r3, #0]
 8017ac0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8017ac2:	7dfb      	ldrb	r3, [r7, #23]
 8017ac4:	2b02      	cmp	r3, #2
 8017ac6:	d801      	bhi.n	8017acc <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	e016      	b.n	8017afa <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017acc:	4b0d      	ldr	r3, [pc, #52]	; (8017b04 <RegionEU868ChannelsRemove+0x50>)
 8017ace:	6819      	ldr	r1, [r3, #0]
 8017ad0:	7dfa      	ldrb	r2, [r7, #23]
 8017ad2:	4613      	mov	r3, r2
 8017ad4:	005b      	lsls	r3, r3, #1
 8017ad6:	4413      	add	r3, r2
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	440b      	add	r3, r1
 8017adc:	461a      	mov	r2, r3
 8017ade:	2300      	movs	r3, #0
 8017ae0:	6013      	str	r3, [r2, #0]
 8017ae2:	6053      	str	r3, [r2, #4]
 8017ae4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8017ae6:	4b07      	ldr	r3, [pc, #28]	; (8017b04 <RegionEU868ChannelsRemove+0x50>)
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8017aee:	7df9      	ldrb	r1, [r7, #23]
 8017af0:	2210      	movs	r2, #16
 8017af2:	4618      	mov	r0, r3
 8017af4:	f7fe f91e 	bl	8015d34 <RegionCommonChanDisable>
 8017af8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8017afa:	4618      	mov	r0, r3
 8017afc:	3718      	adds	r7, #24
 8017afe:	46bd      	mov	sp, r7
 8017b00:	bd80      	pop	{r7, pc}
 8017b02:	bf00      	nop
 8017b04:	20001b20 	.word	0x20001b20

08017b08 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b085      	sub	sp, #20
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	4603      	mov	r3, r0
 8017b10:	71fb      	strb	r3, [r7, #7]
 8017b12:	460b      	mov	r3, r1
 8017b14:	71bb      	strb	r3, [r7, #6]
 8017b16:	4613      	mov	r3, r2
 8017b18:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8017b1a:	79ba      	ldrb	r2, [r7, #6]
 8017b1c:	797b      	ldrb	r3, [r7, #5]
 8017b1e:	1ad3      	subs	r3, r2, r3
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8017b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	da01      	bge.n	8017b30 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8017b30:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8017b32:	4618      	mov	r0, r3
 8017b34:	3714      	adds	r7, #20
 8017b36:	46bd      	mov	sp, r7
 8017b38:	bc80      	pop	{r7}
 8017b3a:	4770      	bx	lr

08017b3c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8017b3c:	b480      	push	{r7}
 8017b3e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017b40:	4b0d      	ldr	r3, [pc, #52]	; (8017b78 <rand1+0x3c>)
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	4a0d      	ldr	r2, [pc, #52]	; (8017b7c <rand1+0x40>)
 8017b46:	fb02 f303 	mul.w	r3, r2, r3
 8017b4a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017b4e:	3339      	adds	r3, #57	; 0x39
 8017b50:	4a09      	ldr	r2, [pc, #36]	; (8017b78 <rand1+0x3c>)
 8017b52:	6013      	str	r3, [r2, #0]
 8017b54:	4b08      	ldr	r3, [pc, #32]	; (8017b78 <rand1+0x3c>)
 8017b56:	681a      	ldr	r2, [r3, #0]
 8017b58:	2303      	movs	r3, #3
 8017b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8017b5e:	1ad1      	subs	r1, r2, r3
 8017b60:	0849      	lsrs	r1, r1, #1
 8017b62:	440b      	add	r3, r1
 8017b64:	0f99      	lsrs	r1, r3, #30
 8017b66:	460b      	mov	r3, r1
 8017b68:	07db      	lsls	r3, r3, #31
 8017b6a:	1a5b      	subs	r3, r3, r1
 8017b6c:	1ad1      	subs	r1, r2, r3
 8017b6e:	460b      	mov	r3, r1
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	46bd      	mov	sp, r7
 8017b74:	bc80      	pop	{r7}
 8017b76:	4770      	bx	lr
 8017b78:	20000140 	.word	0x20000140
 8017b7c:	41c64e6d 	.word	0x41c64e6d

08017b80 <srand1>:

void srand1( uint32_t seed )
{
 8017b80:	b480      	push	{r7}
 8017b82:	b083      	sub	sp, #12
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	6078      	str	r0, [r7, #4]
    next = seed;
 8017b88:	4a03      	ldr	r2, [pc, #12]	; (8017b98 <srand1+0x18>)
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	6013      	str	r3, [r2, #0]
}
 8017b8e:	bf00      	nop
 8017b90:	370c      	adds	r7, #12
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bc80      	pop	{r7}
 8017b96:	4770      	bx	lr
 8017b98:	20000140 	.word	0x20000140

08017b9c <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8017ba6:	f7ff ffc9 	bl	8017b3c <rand1>
 8017baa:	4602      	mov	r2, r0
 8017bac:	6839      	ldr	r1, [r7, #0]
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	1acb      	subs	r3, r1, r3
 8017bb2:	3301      	adds	r3, #1
 8017bb4:	fb92 f1f3 	sdiv	r1, r2, r3
 8017bb8:	fb01 f303 	mul.w	r3, r1, r3
 8017bbc:	1ad2      	subs	r2, r2, r3
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	4413      	add	r3, r2
}
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	3708      	adds	r7, #8
 8017bc6:	46bd      	mov	sp, r7
 8017bc8:	bd80      	pop	{r7, pc}

08017bca <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017bca:	b480      	push	{r7}
 8017bcc:	b085      	sub	sp, #20
 8017bce:	af00      	add	r7, sp, #0
 8017bd0:	60f8      	str	r0, [r7, #12]
 8017bd2:	60b9      	str	r1, [r7, #8]
 8017bd4:	4613      	mov	r3, r2
 8017bd6:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017bd8:	e007      	b.n	8017bea <memcpy1+0x20>
    {
        *dst++ = *src++;
 8017bda:	68ba      	ldr	r2, [r7, #8]
 8017bdc:	1c53      	adds	r3, r2, #1
 8017bde:	60bb      	str	r3, [r7, #8]
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	1c59      	adds	r1, r3, #1
 8017be4:	60f9      	str	r1, [r7, #12]
 8017be6:	7812      	ldrb	r2, [r2, #0]
 8017be8:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017bea:	88fb      	ldrh	r3, [r7, #6]
 8017bec:	1e5a      	subs	r2, r3, #1
 8017bee:	80fa      	strh	r2, [r7, #6]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d1f2      	bne.n	8017bda <memcpy1+0x10>
    }
}
 8017bf4:	bf00      	nop
 8017bf6:	bf00      	nop
 8017bf8:	3714      	adds	r7, #20
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bc80      	pop	{r7}
 8017bfe:	4770      	bx	lr

08017c00 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017c00:	b480      	push	{r7}
 8017c02:	b085      	sub	sp, #20
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	60b9      	str	r1, [r7, #8]
 8017c0a:	4613      	mov	r3, r2
 8017c0c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8017c0e:	88fb      	ldrh	r3, [r7, #6]
 8017c10:	3b01      	subs	r3, #1
 8017c12:	68fa      	ldr	r2, [r7, #12]
 8017c14:	4413      	add	r3, r2
 8017c16:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8017c18:	e007      	b.n	8017c2a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8017c1a:	68ba      	ldr	r2, [r7, #8]
 8017c1c:	1c53      	adds	r3, r2, #1
 8017c1e:	60bb      	str	r3, [r7, #8]
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	1e59      	subs	r1, r3, #1
 8017c24:	60f9      	str	r1, [r7, #12]
 8017c26:	7812      	ldrb	r2, [r2, #0]
 8017c28:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017c2a:	88fb      	ldrh	r3, [r7, #6]
 8017c2c:	1e5a      	subs	r2, r3, #1
 8017c2e:	80fa      	strh	r2, [r7, #6]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d1f2      	bne.n	8017c1a <memcpyr+0x1a>
    }
}
 8017c34:	bf00      	nop
 8017c36:	bf00      	nop
 8017c38:	3714      	adds	r7, #20
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bc80      	pop	{r7}
 8017c3e:	4770      	bx	lr

08017c40 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017c40:	b480      	push	{r7}
 8017c42:	b083      	sub	sp, #12
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	460b      	mov	r3, r1
 8017c4a:	70fb      	strb	r3, [r7, #3]
 8017c4c:	4613      	mov	r3, r2
 8017c4e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017c50:	e004      	b.n	8017c5c <memset1+0x1c>
    {
        *dst++ = value;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	1c5a      	adds	r2, r3, #1
 8017c56:	607a      	str	r2, [r7, #4]
 8017c58:	78fa      	ldrb	r2, [r7, #3]
 8017c5a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8017c5c:	883b      	ldrh	r3, [r7, #0]
 8017c5e:	1e5a      	subs	r2, r3, #1
 8017c60:	803a      	strh	r2, [r7, #0]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d1f5      	bne.n	8017c52 <memset1+0x12>
    }
}
 8017c66:	bf00      	nop
 8017c68:	bf00      	nop
 8017c6a:	370c      	adds	r7, #12
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bc80      	pop	{r7}
 8017c70:	4770      	bx	lr
	...

08017c74 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8017c74:	b480      	push	{r7}
 8017c76:	b085      	sub	sp, #20
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
 8017c7c:	460b      	mov	r3, r1
 8017c7e:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8017c80:	f04f 33ff 	mov.w	r3, #4294967295
 8017c84:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d101      	bne.n	8017c90 <Crc32+0x1c>
    {
        return 0;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	e026      	b.n	8017cde <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8017c90:	2300      	movs	r3, #0
 8017c92:	817b      	strh	r3, [r7, #10]
 8017c94:	e01d      	b.n	8017cd2 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8017c96:	897b      	ldrh	r3, [r7, #10]
 8017c98:	687a      	ldr	r2, [r7, #4]
 8017c9a:	4413      	add	r3, r2
 8017c9c:	781b      	ldrb	r3, [r3, #0]
 8017c9e:	461a      	mov	r2, r3
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	4053      	eors	r3, r2
 8017ca4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	813b      	strh	r3, [r7, #8]
 8017caa:	e00c      	b.n	8017cc6 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8017cac:	68fb      	ldr	r3, [r7, #12]
 8017cae:	085a      	lsrs	r2, r3, #1
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f003 0301 	and.w	r3, r3, #1
 8017cb6:	425b      	negs	r3, r3
 8017cb8:	490b      	ldr	r1, [pc, #44]	; (8017ce8 <Crc32+0x74>)
 8017cba:	400b      	ands	r3, r1
 8017cbc:	4053      	eors	r3, r2
 8017cbe:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017cc0:	893b      	ldrh	r3, [r7, #8]
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	813b      	strh	r3, [r7, #8]
 8017cc6:	893b      	ldrh	r3, [r7, #8]
 8017cc8:	2b07      	cmp	r3, #7
 8017cca:	d9ef      	bls.n	8017cac <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8017ccc:	897b      	ldrh	r3, [r7, #10]
 8017cce:	3301      	adds	r3, #1
 8017cd0:	817b      	strh	r3, [r7, #10]
 8017cd2:	897a      	ldrh	r2, [r7, #10]
 8017cd4:	887b      	ldrh	r3, [r7, #2]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d3dd      	bcc.n	8017c96 <Crc32+0x22>
        }
    }

    return ~crc;
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	43db      	mvns	r3, r3
}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	3714      	adds	r7, #20
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bc80      	pop	{r7}
 8017ce6:	4770      	bx	lr
 8017ce8:	edb88320 	.word	0xedb88320

08017cec <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af02      	add	r7, sp, #8
 8017cf2:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017cf4:	4a24      	ldr	r2, [pc, #144]	; (8017d88 <RadioInit+0x9c>)
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8017cfa:	4b24      	ldr	r3, [pc, #144]	; (8017d8c <RadioInit+0xa0>)
 8017cfc:	2200      	movs	r2, #0
 8017cfe:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017d00:	4b22      	ldr	r3, [pc, #136]	; (8017d8c <RadioInit+0xa0>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017d06:	4b21      	ldr	r3, [pc, #132]	; (8017d8c <RadioInit+0xa0>)
 8017d08:	2200      	movs	r2, #0
 8017d0a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017d0c:	4b1f      	ldr	r3, [pc, #124]	; (8017d8c <RadioInit+0xa0>)
 8017d0e:	2200      	movs	r2, #0
 8017d10:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8017d12:	481f      	ldr	r0, [pc, #124]	; (8017d90 <RadioInit+0xa4>)
 8017d14:	f001 ff88 	bl	8019c28 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017d18:	4b1c      	ldr	r3, [pc, #112]	; (8017d8c <RadioInit+0xa0>)
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8017d1e:	4b1b      	ldr	r3, [pc, #108]	; (8017d8c <RadioInit+0xa0>)
 8017d20:	2200      	movs	r2, #0
 8017d22:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017d24:	f002 fa16 	bl	801a154 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017d28:	2100      	movs	r1, #0
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	f002 fdde 	bl	801a8ec <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017d30:	2204      	movs	r2, #4
 8017d32:	2100      	movs	r1, #0
 8017d34:	2001      	movs	r0, #1
 8017d36:	f002 fb9b 	bl	801a470 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017d42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017d46:	f002 facb 	bl	801a2e0 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8017d4a:	f000 fe83 	bl	8018a54 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8017d4e:	2300      	movs	r3, #0
 8017d50:	9300      	str	r3, [sp, #0]
 8017d52:	4b10      	ldr	r3, [pc, #64]	; (8017d94 <RadioInit+0xa8>)
 8017d54:	2200      	movs	r2, #0
 8017d56:	f04f 31ff 	mov.w	r1, #4294967295
 8017d5a:	480f      	ldr	r0, [pc, #60]	; (8017d98 <RadioInit+0xac>)
 8017d5c:	f003 fe9e 	bl	801ba9c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8017d60:	2300      	movs	r3, #0
 8017d62:	9300      	str	r3, [sp, #0]
 8017d64:	4b0d      	ldr	r3, [pc, #52]	; (8017d9c <RadioInit+0xb0>)
 8017d66:	2200      	movs	r2, #0
 8017d68:	f04f 31ff 	mov.w	r1, #4294967295
 8017d6c:	480c      	ldr	r0, [pc, #48]	; (8017da0 <RadioInit+0xb4>)
 8017d6e:	f003 fe95 	bl	801ba9c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8017d72:	4809      	ldr	r0, [pc, #36]	; (8017d98 <RadioInit+0xac>)
 8017d74:	f003 ff36 	bl	801bbe4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8017d78:	4809      	ldr	r0, [pc, #36]	; (8017da0 <RadioInit+0xb4>)
 8017d7a:	f003 ff33 	bl	801bbe4 <UTIL_TIMER_Stop>
}
 8017d7e:	bf00      	nop
 8017d80:	3708      	adds	r7, #8
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
 8017d86:	bf00      	nop
 8017d88:	20001c28 	.word	0x20001c28
 8017d8c:	20001c2c 	.word	0x20001c2c
 8017d90:	08018e41 	.word	0x08018e41
 8017d94:	08018dc9 	.word	0x08018dc9
 8017d98:	20001c88 	.word	0x20001c88
 8017d9c:	08018ddd 	.word	0x08018ddd
 8017da0:	20001ca0 	.word	0x20001ca0

08017da4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8017da8:	f001 ff80 	bl	8019cac <SUBGRF_GetOperatingMode>
 8017dac:	4603      	mov	r3, r0
 8017dae:	2b07      	cmp	r3, #7
 8017db0:	d00a      	beq.n	8017dc8 <RadioGetStatus+0x24>
 8017db2:	2b07      	cmp	r3, #7
 8017db4:	dc0a      	bgt.n	8017dcc <RadioGetStatus+0x28>
 8017db6:	2b04      	cmp	r3, #4
 8017db8:	d002      	beq.n	8017dc0 <RadioGetStatus+0x1c>
 8017dba:	2b05      	cmp	r3, #5
 8017dbc:	d002      	beq.n	8017dc4 <RadioGetStatus+0x20>
 8017dbe:	e005      	b.n	8017dcc <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017dc0:	2302      	movs	r3, #2
 8017dc2:	e004      	b.n	8017dce <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017dc4:	2301      	movs	r3, #1
 8017dc6:	e002      	b.n	8017dce <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017dc8:	2303      	movs	r3, #3
 8017dca:	e000      	b.n	8017dce <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017dcc:	2300      	movs	r3, #0
    }
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	bd80      	pop	{r7, pc}
	...

08017dd4 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b082      	sub	sp, #8
 8017dd8:	af00      	add	r7, sp, #0
 8017dda:	4603      	mov	r3, r0
 8017ddc:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017dde:	4a2a      	ldr	r2, [pc, #168]	; (8017e88 <RadioSetModem+0xb4>)
 8017de0:	79fb      	ldrb	r3, [r7, #7]
 8017de2:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017de4:	79fb      	ldrb	r3, [r7, #7]
 8017de6:	4618      	mov	r0, r3
 8017de8:	f003 f943 	bl	801b072 <RFW_SetRadioModem>
    switch( modem )
 8017dec:	79fb      	ldrb	r3, [r7, #7]
 8017dee:	2b05      	cmp	r3, #5
 8017df0:	d80e      	bhi.n	8017e10 <RadioSetModem+0x3c>
 8017df2:	a201      	add	r2, pc, #4	; (adr r2, 8017df8 <RadioSetModem+0x24>)
 8017df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017df8:	08017e1f 	.word	0x08017e1f
 8017dfc:	08017e2d 	.word	0x08017e2d
 8017e00:	08017e11 	.word	0x08017e11
 8017e04:	08017e53 	.word	0x08017e53
 8017e08:	08017e61 	.word	0x08017e61
 8017e0c:	08017e6f 	.word	0x08017e6f
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017e10:	2003      	movs	r0, #3
 8017e12:	f002 fb07 	bl	801a424 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017e16:	4b1c      	ldr	r3, [pc, #112]	; (8017e88 <RadioSetModem+0xb4>)
 8017e18:	2200      	movs	r2, #0
 8017e1a:	735a      	strb	r2, [r3, #13]
        break;
 8017e1c:	e02f      	b.n	8017e7e <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017e1e:	2000      	movs	r0, #0
 8017e20:	f002 fb00 	bl	801a424 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017e24:	4b18      	ldr	r3, [pc, #96]	; (8017e88 <RadioSetModem+0xb4>)
 8017e26:	2200      	movs	r2, #0
 8017e28:	735a      	strb	r2, [r3, #13]
        break;
 8017e2a:	e028      	b.n	8017e7e <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017e2c:	2001      	movs	r0, #1
 8017e2e:	f002 faf9 	bl	801a424 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017e32:	4b15      	ldr	r3, [pc, #84]	; (8017e88 <RadioSetModem+0xb4>)
 8017e34:	7b5a      	ldrb	r2, [r3, #13]
 8017e36:	4b14      	ldr	r3, [pc, #80]	; (8017e88 <RadioSetModem+0xb4>)
 8017e38:	7b1b      	ldrb	r3, [r3, #12]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d01e      	beq.n	8017e7c <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017e3e:	4b12      	ldr	r3, [pc, #72]	; (8017e88 <RadioSetModem+0xb4>)
 8017e40:	7b1a      	ldrb	r2, [r3, #12]
 8017e42:	4b11      	ldr	r3, [pc, #68]	; (8017e88 <RadioSetModem+0xb4>)
 8017e44:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017e46:	4b10      	ldr	r3, [pc, #64]	; (8017e88 <RadioSetModem+0xb4>)
 8017e48:	7b5b      	ldrb	r3, [r3, #13]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f000 ff86 	bl	8018d5c <RadioSetPublicNetwork>
        }
        break;
 8017e50:	e014      	b.n	8017e7c <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017e52:	2002      	movs	r0, #2
 8017e54:	f002 fae6 	bl	801a424 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017e58:	4b0b      	ldr	r3, [pc, #44]	; (8017e88 <RadioSetModem+0xb4>)
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	735a      	strb	r2, [r3, #13]
        break;
 8017e5e:	e00e      	b.n	8017e7e <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017e60:	2002      	movs	r0, #2
 8017e62:	f002 fadf 	bl	801a424 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017e66:	4b08      	ldr	r3, [pc, #32]	; (8017e88 <RadioSetModem+0xb4>)
 8017e68:	2200      	movs	r2, #0
 8017e6a:	735a      	strb	r2, [r3, #13]
        break;
 8017e6c:	e007      	b.n	8017e7e <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017e6e:	2000      	movs	r0, #0
 8017e70:	f002 fad8 	bl	801a424 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017e74:	4b04      	ldr	r3, [pc, #16]	; (8017e88 <RadioSetModem+0xb4>)
 8017e76:	2200      	movs	r2, #0
 8017e78:	735a      	strb	r2, [r3, #13]
        break;
 8017e7a:	e000      	b.n	8017e7e <RadioSetModem+0xaa>
        break;
 8017e7c:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017e7e:	bf00      	nop
 8017e80:	3708      	adds	r7, #8
 8017e82:	46bd      	mov	sp, r7
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	bf00      	nop
 8017e88:	20001c2c 	.word	0x20001c2c

08017e8c <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b082      	sub	sp, #8
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017e94:	6878      	ldr	r0, [r7, #4]
 8017e96:	f002 fa7f 	bl	801a398 <SUBGRF_SetRfFrequency>
}
 8017e9a:	bf00      	nop
 8017e9c:	3708      	adds	r7, #8
 8017e9e:	46bd      	mov	sp, r7
 8017ea0:	bd80      	pop	{r7, pc}

08017ea2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017ea2:	b580      	push	{r7, lr}
 8017ea4:	b090      	sub	sp, #64	; 0x40
 8017ea6:	af0a      	add	r7, sp, #40	; 0x28
 8017ea8:	60f8      	str	r0, [r7, #12]
 8017eaa:	60b9      	str	r1, [r7, #8]
 8017eac:	603b      	str	r3, [r7, #0]
 8017eae:	4613      	mov	r3, r2
 8017eb0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017eb2:	2301      	movs	r3, #1
 8017eb4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017ebe:	f000 fddc 	bl	8018a7a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017ec2:	2000      	movs	r0, #0
 8017ec4:	f7ff ff86 	bl	8017dd4 <RadioSetModem>

    RadioSetChannel( freq );
 8017ec8:	68f8      	ldr	r0, [r7, #12]
 8017eca:	f7ff ffdf 	bl	8017e8c <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017ece:	2301      	movs	r3, #1
 8017ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ed2:	2300      	movs	r3, #0
 8017ed4:	9308      	str	r3, [sp, #32]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	9307      	str	r3, [sp, #28]
 8017eda:	2300      	movs	r3, #0
 8017edc:	9306      	str	r3, [sp, #24]
 8017ede:	2300      	movs	r3, #0
 8017ee0:	9305      	str	r3, [sp, #20]
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	9304      	str	r3, [sp, #16]
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	9303      	str	r3, [sp, #12]
 8017eea:	2300      	movs	r3, #0
 8017eec:	9302      	str	r3, [sp, #8]
 8017eee:	2303      	movs	r3, #3
 8017ef0:	9301      	str	r3, [sp, #4]
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	9300      	str	r3, [sp, #0]
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	f44f 7216 	mov.w	r2, #600	; 0x258
 8017efc:	68b9      	ldr	r1, [r7, #8]
 8017efe:	2000      	movs	r0, #0
 8017f00:	f000 f83c 	bl	8017f7c <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017f04:	2000      	movs	r0, #0
 8017f06:	f000 fdbf 	bl	8018a88 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017f0a:	f000 ff55 	bl	8018db8 <RadioGetWakeupTime>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	4618      	mov	r0, r3
 8017f12:	f7ea f94d 	bl	80021b0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017f16:	f003 ff7f 	bl	801be18 <UTIL_TIMER_GetCurrentTime>
 8017f1a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017f1c:	e00d      	b.n	8017f3a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017f1e:	2000      	movs	r0, #0
 8017f20:	f000 fe9a 	bl	8018c58 <RadioRssi>
 8017f24:	4603      	mov	r3, r0
 8017f26:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017f28:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017f2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	dd02      	ble.n	8017f3a <RadioIsChannelFree+0x98>
        {
            status = false;
 8017f34:	2300      	movs	r3, #0
 8017f36:	75fb      	strb	r3, [r7, #23]
            break;
 8017f38:	e006      	b.n	8017f48 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017f3a:	6938      	ldr	r0, [r7, #16]
 8017f3c:	f003 ff7e 	bl	801be3c <UTIL_TIMER_GetElapsedTime>
 8017f40:	4602      	mov	r2, r0
 8017f42:	683b      	ldr	r3, [r7, #0]
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d8ea      	bhi.n	8017f1e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8017f48:	f000 fd97 	bl	8018a7a <RadioStandby>

    return status;
 8017f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f4e:	4618      	mov	r0, r3
 8017f50:	3718      	adds	r7, #24
 8017f52:	46bd      	mov	sp, r7
 8017f54:	bd80      	pop	{r7, pc}

08017f56 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017f56:	b580      	push	{r7, lr}
 8017f58:	b082      	sub	sp, #8
 8017f5a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017f5c:	2300      	movs	r3, #0
 8017f5e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017f60:	2300      	movs	r3, #0
 8017f62:	2200      	movs	r2, #0
 8017f64:	2100      	movs	r1, #0
 8017f66:	2000      	movs	r0, #0
 8017f68:	f002 f9ba 	bl	801a2e0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017f6c:	f001 ff6f 	bl	8019e4e <SUBGRF_GetRandom>
 8017f70:	6078      	str	r0, [r7, #4]

    return rnd;
 8017f72:	687b      	ldr	r3, [r7, #4]
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3708      	adds	r7, #8
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}

08017f7c <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b08a      	sub	sp, #40	; 0x28
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	60b9      	str	r1, [r7, #8]
 8017f84:	607a      	str	r2, [r7, #4]
 8017f86:	461a      	mov	r2, r3
 8017f88:	4603      	mov	r3, r0
 8017f8a:	73fb      	strb	r3, [r7, #15]
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017f90:	4ab9      	ldr	r2, [pc, #740]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8017f92:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017f96:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017f98:	f003 f829 	bl	801afee <RFW_DeInit>
    if( rxContinuous == true )
 8017f9c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d001      	beq.n	8017fa8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8017fa8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d004      	beq.n	8017fba <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017fb0:	4ab2      	ldr	r2, [pc, #712]	; (801827c <RadioSetRxConfig+0x300>)
 8017fb2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8017fb6:	7013      	strb	r3, [r2, #0]
 8017fb8:	e002      	b.n	8017fc0 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017fba:	4bb0      	ldr	r3, [pc, #704]	; (801827c <RadioSetRxConfig+0x300>)
 8017fbc:	22ff      	movs	r2, #255	; 0xff
 8017fbe:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017fc0:	7bfb      	ldrb	r3, [r7, #15]
 8017fc2:	2b05      	cmp	r3, #5
 8017fc4:	d009      	beq.n	8017fda <RadioSetRxConfig+0x5e>
 8017fc6:	2b05      	cmp	r3, #5
 8017fc8:	f300 81ca 	bgt.w	8018360 <RadioSetRxConfig+0x3e4>
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	f000 80bf 	beq.w	8018150 <RadioSetRxConfig+0x1d4>
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	f000 8124 	beq.w	8018220 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017fd8:	e1c2      	b.n	8018360 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017fda:	2001      	movs	r0, #1
 8017fdc:	f002 f87c 	bl	801a0d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017fe0:	4ba5      	ldr	r3, [pc, #660]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017fe8:	4aa3      	ldr	r2, [pc, #652]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017fee:	4ba2      	ldr	r3, [pc, #648]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8017ff0:	2209      	movs	r2, #9
 8017ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017ff6:	4ba0      	ldr	r3, [pc, #640]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8017ff8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017ffc:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017ffe:	68b8      	ldr	r0, [r7, #8]
 8018000:	f002 ff28 	bl	801ae54 <SUBGRF_GetFskBandwidthRegValue>
 8018004:	4603      	mov	r3, r0
 8018006:	461a      	mov	r2, r3
 8018008:	4b9b      	ldr	r3, [pc, #620]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801800a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801800e:	4b9a      	ldr	r3, [pc, #616]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018010:	2200      	movs	r2, #0
 8018012:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018014:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018016:	00db      	lsls	r3, r3, #3
 8018018:	b29a      	uxth	r2, r3
 801801a:	4b97      	ldr	r3, [pc, #604]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801801c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801801e:	4b96      	ldr	r3, [pc, #600]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018020:	2200      	movs	r2, #0
 8018022:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8018024:	4b94      	ldr	r3, [pc, #592]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018026:	2210      	movs	r2, #16
 8018028:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801802a:	4b93      	ldr	r3, [pc, #588]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801802c:	2200      	movs	r2, #0
 801802e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8018030:	4b91      	ldr	r3, [pc, #580]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018032:	2200      	movs	r2, #0
 8018034:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8018036:	4b91      	ldr	r3, [pc, #580]	; (801827c <RadioSetRxConfig+0x300>)
 8018038:	781a      	ldrb	r2, [r3, #0]
 801803a:	4b8f      	ldr	r3, [pc, #572]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801803c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801803e:	4b8e      	ldr	r3, [pc, #568]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018040:	2201      	movs	r2, #1
 8018042:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8018044:	4b8c      	ldr	r3, [pc, #560]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018046:	2200      	movs	r2, #0
 8018048:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801804a:	2005      	movs	r0, #5
 801804c:	f7ff fec2 	bl	8017dd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018050:	488b      	ldr	r0, [pc, #556]	; (8018280 <RadioSetRxConfig+0x304>)
 8018052:	f002 fadb 	bl	801a60c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018056:	488b      	ldr	r0, [pc, #556]	; (8018284 <RadioSetRxConfig+0x308>)
 8018058:	f002 fbaa 	bl	801a7b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801805c:	4a8a      	ldr	r2, [pc, #552]	; (8018288 <RadioSetRxConfig+0x30c>)
 801805e:	f107 031c 	add.w	r3, r7, #28
 8018062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018066:	e883 0003 	stmia.w	r3, {r0, r1}
 801806a:	f107 031c 	add.w	r3, r7, #28
 801806e:	4618      	mov	r0, r3
 8018070:	f001 fe6b 	bl	8019d4a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018074:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018078:	f001 feb6 	bl	8019de8 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801807c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8018080:	f000 fe09 	bl	8018c96 <RadioRead>
 8018084:	4603      	mov	r3, r0
 8018086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801808a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801808e:	f023 0310 	bic.w	r3, r3, #16
 8018092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8018096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801809a:	4619      	mov	r1, r3
 801809c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 80180a0:	f000 fde7 	bl	8018c72 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 80180a4:	2104      	movs	r1, #4
 80180a6:	f640 00b9 	movw	r0, #2233	; 0x8b9
 80180aa:	f000 fde2 	bl	8018c72 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 80180ae:	f640 009b 	movw	r0, #2203	; 0x89b
 80180b2:	f000 fdf0 	bl	8018c96 <RadioRead>
 80180b6:	4603      	mov	r3, r0
 80180b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80180bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180c0:	f023 031c 	bic.w	r3, r3, #28
 80180c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 80180c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180cc:	f043 0308 	orr.w	r3, r3, #8
 80180d0:	b2db      	uxtb	r3, r3
 80180d2:	4619      	mov	r1, r3
 80180d4:	f640 009b 	movw	r0, #2203	; 0x89b
 80180d8:	f000 fdcb 	bl	8018c72 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 80180dc:	f240 60d1 	movw	r0, #1745	; 0x6d1
 80180e0:	f000 fdd9 	bl	8018c96 <RadioRead>
 80180e4:	4603      	mov	r3, r0
 80180e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 80180ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180ee:	f023 0318 	bic.w	r3, r3, #24
 80180f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 80180f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180fa:	f043 0318 	orr.w	r3, r3, #24
 80180fe:	b2db      	uxtb	r3, r3
 8018100:	4619      	mov	r1, r3
 8018102:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8018106:	f000 fdb4 	bl	8018c72 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801810a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801810e:	f000 fdc2 	bl	8018c96 <RadioRead>
 8018112:	4603      	mov	r3, r0
 8018114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8018118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801811c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8018120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8018124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018128:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801812c:	b2db      	uxtb	r3, r3
 801812e:	4619      	mov	r1, r3
 8018130:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8018134:	f000 fd9d 	bl	8018c72 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801813a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801813e:	fb02 f303 	mul.w	r3, r2, r3
 8018142:	461a      	mov	r2, r3
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	fbb2 f3f3 	udiv	r3, r2, r3
 801814a:	4a4b      	ldr	r2, [pc, #300]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801814c:	6093      	str	r3, [r2, #8]
            break;
 801814e:	e108      	b.n	8018362 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018150:	2000      	movs	r0, #0
 8018152:	f001 ffc1 	bl	801a0d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018156:	4b48      	ldr	r3, [pc, #288]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018158:	2200      	movs	r2, #0
 801815a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801815e:	4a46      	ldr	r2, [pc, #280]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018164:	4b44      	ldr	r3, [pc, #272]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018166:	220b      	movs	r2, #11
 8018168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801816c:	68b8      	ldr	r0, [r7, #8]
 801816e:	f002 fe71 	bl	801ae54 <SUBGRF_GetFskBandwidthRegValue>
 8018172:	4603      	mov	r3, r0
 8018174:	461a      	mov	r2, r3
 8018176:	4b40      	ldr	r3, [pc, #256]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801817c:	4b3e      	ldr	r3, [pc, #248]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801817e:	2200      	movs	r2, #0
 8018180:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018182:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018184:	00db      	lsls	r3, r3, #3
 8018186:	b29a      	uxth	r2, r3
 8018188:	4b3b      	ldr	r3, [pc, #236]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801818a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801818c:	4b3a      	ldr	r3, [pc, #232]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801818e:	2204      	movs	r2, #4
 8018190:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8018192:	4b39      	ldr	r3, [pc, #228]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018194:	2218      	movs	r2, #24
 8018196:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8018198:	4b37      	ldr	r3, [pc, #220]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801819a:	2200      	movs	r2, #0
 801819c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801819e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80181a2:	f083 0301 	eor.w	r3, r3, #1
 80181a6:	b2db      	uxtb	r3, r3
 80181a8:	461a      	mov	r2, r3
 80181aa:	4b33      	ldr	r3, [pc, #204]	; (8018278 <RadioSetRxConfig+0x2fc>)
 80181ac:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80181ae:	4b33      	ldr	r3, [pc, #204]	; (801827c <RadioSetRxConfig+0x300>)
 80181b0:	781a      	ldrb	r2, [r3, #0]
 80181b2:	4b31      	ldr	r3, [pc, #196]	; (8018278 <RadioSetRxConfig+0x2fc>)
 80181b4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 80181b6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d003      	beq.n	80181c6 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80181be:	4b2e      	ldr	r3, [pc, #184]	; (8018278 <RadioSetRxConfig+0x2fc>)
 80181c0:	22f2      	movs	r2, #242	; 0xf2
 80181c2:	75da      	strb	r2, [r3, #23]
 80181c4:	e002      	b.n	80181cc <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80181c6:	4b2c      	ldr	r3, [pc, #176]	; (8018278 <RadioSetRxConfig+0x2fc>)
 80181c8:	2201      	movs	r2, #1
 80181ca:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80181cc:	4b2a      	ldr	r3, [pc, #168]	; (8018278 <RadioSetRxConfig+0x2fc>)
 80181ce:	2201      	movs	r2, #1
 80181d0:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80181d2:	f000 fc52 	bl	8018a7a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80181d6:	2000      	movs	r0, #0
 80181d8:	f7ff fdfc 	bl	8017dd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80181dc:	4828      	ldr	r0, [pc, #160]	; (8018280 <RadioSetRxConfig+0x304>)
 80181de:	f002 fa15 	bl	801a60c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80181e2:	4828      	ldr	r0, [pc, #160]	; (8018284 <RadioSetRxConfig+0x308>)
 80181e4:	f002 fae4 	bl	801a7b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80181e8:	4a28      	ldr	r2, [pc, #160]	; (801828c <RadioSetRxConfig+0x310>)
 80181ea:	f107 0314 	add.w	r3, r7, #20
 80181ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80181f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80181f6:	f107 0314 	add.w	r3, r7, #20
 80181fa:	4618      	mov	r0, r3
 80181fc:	f001 fda5 	bl	8019d4a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018200:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018204:	f001 fdf0 	bl	8019de8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8018208:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801820a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801820e:	fb02 f303 	mul.w	r3, r2, r3
 8018212:	461a      	mov	r2, r3
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	fbb2 f3f3 	udiv	r3, r2, r3
 801821a:	4a17      	ldr	r2, [pc, #92]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801821c:	6093      	str	r3, [r2, #8]
            break;
 801821e:	e0a0      	b.n	8018362 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8018220:	2000      	movs	r0, #0
 8018222:	f001 ff59 	bl	801a0d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018226:	4b14      	ldr	r3, [pc, #80]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018228:	2201      	movs	r2, #1
 801822a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	b2da      	uxtb	r2, r3
 8018232:	4b11      	ldr	r3, [pc, #68]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8018238:	4a15      	ldr	r2, [pc, #84]	; (8018290 <RadioSetRxConfig+0x314>)
 801823a:	68bb      	ldr	r3, [r7, #8]
 801823c:	4413      	add	r3, r2
 801823e:	781a      	ldrb	r2, [r3, #0]
 8018240:	4b0d      	ldr	r3, [pc, #52]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8018246:	4a0c      	ldr	r2, [pc, #48]	; (8018278 <RadioSetRxConfig+0x2fc>)
 8018248:	7bbb      	ldrb	r3, [r7, #14]
 801824a:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d105      	bne.n	8018260 <RadioSetRxConfig+0x2e4>
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2b0b      	cmp	r3, #11
 8018258:	d008      	beq.n	801826c <RadioSetRxConfig+0x2f0>
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2b0c      	cmp	r3, #12
 801825e:	d005      	beq.n	801826c <RadioSetRxConfig+0x2f0>
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	2b01      	cmp	r3, #1
 8018264:	d116      	bne.n	8018294 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	2b0c      	cmp	r3, #12
 801826a:	d113      	bne.n	8018294 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801826c:	4b02      	ldr	r3, [pc, #8]	; (8018278 <RadioSetRxConfig+0x2fc>)
 801826e:	2201      	movs	r2, #1
 8018270:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8018274:	e012      	b.n	801829c <RadioSetRxConfig+0x320>
 8018276:	bf00      	nop
 8018278:	20001c2c 	.word	0x20001c2c
 801827c:	20000144 	.word	0x20000144
 8018280:	20001c64 	.word	0x20001c64
 8018284:	20001c3a 	.word	0x20001c3a
 8018288:	0801cfd8 	.word	0x0801cfd8
 801828c:	0801cfe0 	.word	0x0801cfe0
 8018290:	0801d5bc 	.word	0x0801d5bc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018294:	4b35      	ldr	r3, [pc, #212]	; (801836c <RadioSetRxConfig+0x3f0>)
 8018296:	2200      	movs	r2, #0
 8018298:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801829c:	4b33      	ldr	r3, [pc, #204]	; (801836c <RadioSetRxConfig+0x3f0>)
 801829e:	2201      	movs	r2, #1
 80182a0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80182a2:	4b32      	ldr	r3, [pc, #200]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80182a8:	2b05      	cmp	r3, #5
 80182aa:	d004      	beq.n	80182b6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80182ac:	4b2f      	ldr	r3, [pc, #188]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80182b2:	2b06      	cmp	r3, #6
 80182b4:	d10a      	bne.n	80182cc <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 80182b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80182b8:	2b0b      	cmp	r3, #11
 80182ba:	d803      	bhi.n	80182c4 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80182bc:	4b2b      	ldr	r3, [pc, #172]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182be:	220c      	movs	r2, #12
 80182c0:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80182c2:	e006      	b.n	80182d2 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80182c4:	4a29      	ldr	r2, [pc, #164]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182c6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80182c8:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80182ca:	e002      	b.n	80182d2 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80182cc:	4a27      	ldr	r2, [pc, #156]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80182d0:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80182d2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80182d6:	4b25      	ldr	r3, [pc, #148]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182d8:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80182da:	4b25      	ldr	r3, [pc, #148]	; (8018370 <RadioSetRxConfig+0x3f4>)
 80182dc:	781a      	ldrb	r2, [r3, #0]
 80182de:	4b23      	ldr	r3, [pc, #140]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182e0:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80182e2:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80182e6:	4b21      	ldr	r3, [pc, #132]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182e8:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80182ec:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80182f0:	4b1e      	ldr	r3, [pc, #120]	; (801836c <RadioSetRxConfig+0x3f0>)
 80182f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80182f6:	f000 fbc0 	bl	8018a7a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80182fa:	2001      	movs	r0, #1
 80182fc:	f7ff fd6a 	bl	8017dd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018300:	481c      	ldr	r0, [pc, #112]	; (8018374 <RadioSetRxConfig+0x3f8>)
 8018302:	f002 f983 	bl	801a60c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018306:	481c      	ldr	r0, [pc, #112]	; (8018378 <RadioSetRxConfig+0x3fc>)
 8018308:	f002 fa52 	bl	801a7b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801830c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801830e:	b2db      	uxtb	r3, r3
 8018310:	4618      	mov	r0, r3
 8018312:	f001 fef0 	bl	801a0f6 <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8018316:	4b15      	ldr	r3, [pc, #84]	; (801836c <RadioSetRxConfig+0x3f0>)
 8018318:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801831c:	2b01      	cmp	r3, #1
 801831e:	d10d      	bne.n	801833c <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8018320:	f240 7036 	movw	r0, #1846	; 0x736
 8018324:	f002 fba0 	bl	801aa68 <SUBGRF_ReadRegister>
 8018328:	4603      	mov	r3, r0
 801832a:	f023 0304 	bic.w	r3, r3, #4
 801832e:	b2db      	uxtb	r3, r3
 8018330:	4619      	mov	r1, r3
 8018332:	f240 7036 	movw	r0, #1846	; 0x736
 8018336:	f002 fb83 	bl	801aa40 <SUBGRF_WriteRegister>
 801833a:	e00c      	b.n	8018356 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801833c:	f240 7036 	movw	r0, #1846	; 0x736
 8018340:	f002 fb92 	bl	801aa68 <SUBGRF_ReadRegister>
 8018344:	4603      	mov	r3, r0
 8018346:	f043 0304 	orr.w	r3, r3, #4
 801834a:	b2db      	uxtb	r3, r3
 801834c:	4619      	mov	r1, r3
 801834e:	f240 7036 	movw	r0, #1846	; 0x736
 8018352:	f002 fb75 	bl	801aa40 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8018356:	4b05      	ldr	r3, [pc, #20]	; (801836c <RadioSetRxConfig+0x3f0>)
 8018358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801835c:	609a      	str	r2, [r3, #8]
            break;
 801835e:	e000      	b.n	8018362 <RadioSetRxConfig+0x3e6>
            break;
 8018360:	bf00      	nop
    }
}
 8018362:	bf00      	nop
 8018364:	3728      	adds	r7, #40	; 0x28
 8018366:	46bd      	mov	sp, r7
 8018368:	bd80      	pop	{r7, pc}
 801836a:	bf00      	nop
 801836c:	20001c2c 	.word	0x20001c2c
 8018370:	20000144 	.word	0x20000144
 8018374:	20001c64 	.word	0x20001c64
 8018378:	20001c3a 	.word	0x20001c3a

0801837c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b086      	sub	sp, #24
 8018380:	af00      	add	r7, sp, #0
 8018382:	60ba      	str	r2, [r7, #8]
 8018384:	607b      	str	r3, [r7, #4]
 8018386:	4603      	mov	r3, r0
 8018388:	73fb      	strb	r3, [r7, #15]
 801838a:	460b      	mov	r3, r1
 801838c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 801838e:	f002 fe2e 	bl	801afee <RFW_DeInit>
    switch( modem )
 8018392:	7bfb      	ldrb	r3, [r7, #15]
 8018394:	2b04      	cmp	r3, #4
 8018396:	f000 80c7 	beq.w	8018528 <RadioSetTxConfig+0x1ac>
 801839a:	2b04      	cmp	r3, #4
 801839c:	f300 80d6 	bgt.w	801854c <RadioSetTxConfig+0x1d0>
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d002      	beq.n	80183aa <RadioSetTxConfig+0x2e>
 80183a4:	2b01      	cmp	r3, #1
 80183a6:	d059      	beq.n	801845c <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80183a8:	e0d0      	b.n	801854c <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80183aa:	4b74      	ldr	r3, [pc, #464]	; (801857c <RadioSetTxConfig+0x200>)
 80183ac:	2200      	movs	r2, #0
 80183ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80183b2:	4a72      	ldr	r2, [pc, #456]	; (801857c <RadioSetTxConfig+0x200>)
 80183b4:	6a3b      	ldr	r3, [r7, #32]
 80183b6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80183b8:	4b70      	ldr	r3, [pc, #448]	; (801857c <RadioSetTxConfig+0x200>)
 80183ba:	220b      	movs	r2, #11
 80183bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80183c0:	6878      	ldr	r0, [r7, #4]
 80183c2:	f002 fd47 	bl	801ae54 <SUBGRF_GetFskBandwidthRegValue>
 80183c6:	4603      	mov	r3, r0
 80183c8:	461a      	mov	r2, r3
 80183ca:	4b6c      	ldr	r3, [pc, #432]	; (801857c <RadioSetTxConfig+0x200>)
 80183cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80183d0:	4a6a      	ldr	r2, [pc, #424]	; (801857c <RadioSetTxConfig+0x200>)
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80183d6:	4b69      	ldr	r3, [pc, #420]	; (801857c <RadioSetTxConfig+0x200>)
 80183d8:	2200      	movs	r2, #0
 80183da:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80183dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80183de:	00db      	lsls	r3, r3, #3
 80183e0:	b29a      	uxth	r2, r3
 80183e2:	4b66      	ldr	r3, [pc, #408]	; (801857c <RadioSetTxConfig+0x200>)
 80183e4:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80183e6:	4b65      	ldr	r3, [pc, #404]	; (801857c <RadioSetTxConfig+0x200>)
 80183e8:	2204      	movs	r2, #4
 80183ea:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80183ec:	4b63      	ldr	r3, [pc, #396]	; (801857c <RadioSetTxConfig+0x200>)
 80183ee:	2218      	movs	r2, #24
 80183f0:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80183f2:	4b62      	ldr	r3, [pc, #392]	; (801857c <RadioSetTxConfig+0x200>)
 80183f4:	2200      	movs	r2, #0
 80183f6:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80183f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80183fc:	f083 0301 	eor.w	r3, r3, #1
 8018400:	b2db      	uxtb	r3, r3
 8018402:	461a      	mov	r2, r3
 8018404:	4b5d      	ldr	r3, [pc, #372]	; (801857c <RadioSetTxConfig+0x200>)
 8018406:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018408:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801840c:	2b00      	cmp	r3, #0
 801840e:	d003      	beq.n	8018418 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018410:	4b5a      	ldr	r3, [pc, #360]	; (801857c <RadioSetTxConfig+0x200>)
 8018412:	22f2      	movs	r2, #242	; 0xf2
 8018414:	75da      	strb	r2, [r3, #23]
 8018416:	e002      	b.n	801841e <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018418:	4b58      	ldr	r3, [pc, #352]	; (801857c <RadioSetTxConfig+0x200>)
 801841a:	2201      	movs	r2, #1
 801841c:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801841e:	4b57      	ldr	r3, [pc, #348]	; (801857c <RadioSetTxConfig+0x200>)
 8018420:	2201      	movs	r2, #1
 8018422:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8018424:	f000 fb29 	bl	8018a7a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018428:	2000      	movs	r0, #0
 801842a:	f7ff fcd3 	bl	8017dd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801842e:	4854      	ldr	r0, [pc, #336]	; (8018580 <RadioSetTxConfig+0x204>)
 8018430:	f002 f8ec 	bl	801a60c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018434:	4853      	ldr	r0, [pc, #332]	; (8018584 <RadioSetTxConfig+0x208>)
 8018436:	f002 f9bb 	bl	801a7b0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801843a:	4a53      	ldr	r2, [pc, #332]	; (8018588 <RadioSetTxConfig+0x20c>)
 801843c:	f107 0310 	add.w	r3, r7, #16
 8018440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018444:	e883 0003 	stmia.w	r3, {r0, r1}
 8018448:	f107 0310 	add.w	r3, r7, #16
 801844c:	4618      	mov	r0, r3
 801844e:	f001 fc7c 	bl	8019d4a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8018452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8018456:	f001 fcc7 	bl	8019de8 <SUBGRF_SetWhiteningSeed>
            break;
 801845a:	e078      	b.n	801854e <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801845c:	4b47      	ldr	r3, [pc, #284]	; (801857c <RadioSetTxConfig+0x200>)
 801845e:	2201      	movs	r2, #1
 8018460:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8018464:	6a3b      	ldr	r3, [r7, #32]
 8018466:	b2da      	uxtb	r2, r3
 8018468:	4b44      	ldr	r3, [pc, #272]	; (801857c <RadioSetTxConfig+0x200>)
 801846a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801846e:	4a47      	ldr	r2, [pc, #284]	; (801858c <RadioSetTxConfig+0x210>)
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	4413      	add	r3, r2
 8018474:	781a      	ldrb	r2, [r3, #0]
 8018476:	4b41      	ldr	r3, [pc, #260]	; (801857c <RadioSetTxConfig+0x200>)
 8018478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801847c:	4a3f      	ldr	r2, [pc, #252]	; (801857c <RadioSetTxConfig+0x200>)
 801847e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018482:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d105      	bne.n	8018498 <RadioSetTxConfig+0x11c>
 801848c:	6a3b      	ldr	r3, [r7, #32]
 801848e:	2b0b      	cmp	r3, #11
 8018490:	d008      	beq.n	80184a4 <RadioSetTxConfig+0x128>
 8018492:	6a3b      	ldr	r3, [r7, #32]
 8018494:	2b0c      	cmp	r3, #12
 8018496:	d005      	beq.n	80184a4 <RadioSetTxConfig+0x128>
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2b01      	cmp	r3, #1
 801849c:	d107      	bne.n	80184ae <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801849e:	6a3b      	ldr	r3, [r7, #32]
 80184a0:	2b0c      	cmp	r3, #12
 80184a2:	d104      	bne.n	80184ae <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80184a4:	4b35      	ldr	r3, [pc, #212]	; (801857c <RadioSetTxConfig+0x200>)
 80184a6:	2201      	movs	r2, #1
 80184a8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80184ac:	e003      	b.n	80184b6 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80184ae:	4b33      	ldr	r3, [pc, #204]	; (801857c <RadioSetTxConfig+0x200>)
 80184b0:	2200      	movs	r2, #0
 80184b2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80184b6:	4b31      	ldr	r3, [pc, #196]	; (801857c <RadioSetTxConfig+0x200>)
 80184b8:	2201      	movs	r2, #1
 80184ba:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80184bc:	4b2f      	ldr	r3, [pc, #188]	; (801857c <RadioSetTxConfig+0x200>)
 80184be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80184c2:	2b05      	cmp	r3, #5
 80184c4:	d004      	beq.n	80184d0 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80184c6:	4b2d      	ldr	r3, [pc, #180]	; (801857c <RadioSetTxConfig+0x200>)
 80184c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80184cc:	2b06      	cmp	r3, #6
 80184ce:	d10a      	bne.n	80184e6 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 80184d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80184d2:	2b0b      	cmp	r3, #11
 80184d4:	d803      	bhi.n	80184de <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80184d6:	4b29      	ldr	r3, [pc, #164]	; (801857c <RadioSetTxConfig+0x200>)
 80184d8:	220c      	movs	r2, #12
 80184da:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80184dc:	e006      	b.n	80184ec <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80184de:	4a27      	ldr	r2, [pc, #156]	; (801857c <RadioSetTxConfig+0x200>)
 80184e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80184e2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80184e4:	e002      	b.n	80184ec <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80184e6:	4a25      	ldr	r2, [pc, #148]	; (801857c <RadioSetTxConfig+0x200>)
 80184e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80184ea:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80184ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80184f0:	4b22      	ldr	r3, [pc, #136]	; (801857c <RadioSetTxConfig+0x200>)
 80184f2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80184f4:	4b26      	ldr	r3, [pc, #152]	; (8018590 <RadioSetTxConfig+0x214>)
 80184f6:	781a      	ldrb	r2, [r3, #0]
 80184f8:	4b20      	ldr	r3, [pc, #128]	; (801857c <RadioSetTxConfig+0x200>)
 80184fa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80184fc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018500:	4b1e      	ldr	r3, [pc, #120]	; (801857c <RadioSetTxConfig+0x200>)
 8018502:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8018506:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801850a:	4b1c      	ldr	r3, [pc, #112]	; (801857c <RadioSetTxConfig+0x200>)
 801850c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8018510:	f000 fab3 	bl	8018a7a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8018514:	2001      	movs	r0, #1
 8018516:	f7ff fc5d 	bl	8017dd4 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801851a:	4819      	ldr	r0, [pc, #100]	; (8018580 <RadioSetTxConfig+0x204>)
 801851c:	f002 f876 	bl	801a60c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018520:	4818      	ldr	r0, [pc, #96]	; (8018584 <RadioSetTxConfig+0x208>)
 8018522:	f002 f945 	bl	801a7b0 <SUBGRF_SetPacketParams>
            break;
 8018526:	e012      	b.n	801854e <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018528:	2004      	movs	r0, #4
 801852a:	f7ff fc53 	bl	8017dd4 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801852e:	4b13      	ldr	r3, [pc, #76]	; (801857c <RadioSetTxConfig+0x200>)
 8018530:	2202      	movs	r2, #2
 8018532:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8018536:	4a11      	ldr	r2, [pc, #68]	; (801857c <RadioSetTxConfig+0x200>)
 8018538:	6a3b      	ldr	r3, [r7, #32]
 801853a:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801853c:	4b0f      	ldr	r3, [pc, #60]	; (801857c <RadioSetTxConfig+0x200>)
 801853e:	2216      	movs	r2, #22
 8018540:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018544:	480e      	ldr	r0, [pc, #56]	; (8018580 <RadioSetTxConfig+0x204>)
 8018546:	f002 f861 	bl	801a60c <SUBGRF_SetModulationParams>
            break;
 801854a:	e000      	b.n	801854e <RadioSetTxConfig+0x1d2>
            break;
 801854c:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801854e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018552:	4618      	mov	r0, r3
 8018554:	f002 fb90 	bl	801ac78 <SUBGRF_SetRfTxPower>
 8018558:	4603      	mov	r3, r0
 801855a:	461a      	mov	r2, r3
 801855c:	4b07      	ldr	r3, [pc, #28]	; (801857c <RadioSetTxConfig+0x200>)
 801855e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8018562:	4b06      	ldr	r3, [pc, #24]	; (801857c <RadioSetTxConfig+0x200>)
 8018564:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018568:	4618      	mov	r0, r3
 801856a:	f002 fd54 	bl	801b016 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801856e:	4a03      	ldr	r2, [pc, #12]	; (801857c <RadioSetTxConfig+0x200>)
 8018570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018572:	6053      	str	r3, [r2, #4]
}
 8018574:	bf00      	nop
 8018576:	3718      	adds	r7, #24
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}
 801857c:	20001c2c 	.word	0x20001c2c
 8018580:	20001c64 	.word	0x20001c64
 8018584:	20001c3a 	.word	0x20001c3a
 8018588:	0801cfe0 	.word	0x0801cfe0
 801858c:	0801d5bc 	.word	0x0801d5bc
 8018590:	20000144 	.word	0x20000144

08018594 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
    return true;
 801859c:	2301      	movs	r3, #1
}
 801859e:	4618      	mov	r0, r3
 80185a0:	370c      	adds	r7, #12
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bc80      	pop	{r7}
 80185a6:	4770      	bx	lr

080185a8 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 80185a8:	b480      	push	{r7}
 80185aa:	b085      	sub	sp, #20
 80185ac:	af00      	add	r7, sp, #0
 80185ae:	4603      	mov	r3, r0
 80185b0:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80185b2:	2300      	movs	r3, #0
 80185b4:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80185b6:	79fb      	ldrb	r3, [r7, #7]
 80185b8:	2b0a      	cmp	r3, #10
 80185ba:	d83e      	bhi.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
 80185bc:	a201      	add	r2, pc, #4	; (adr r2, 80185c4 <RadioGetLoRaBandwidthInHz+0x1c>)
 80185be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185c2:	bf00      	nop
 80185c4:	080185f1 	.word	0x080185f1
 80185c8:	08018601 	.word	0x08018601
 80185cc:	08018611 	.word	0x08018611
 80185d0:	08018621 	.word	0x08018621
 80185d4:	08018629 	.word	0x08018629
 80185d8:	0801862f 	.word	0x0801862f
 80185dc:	08018635 	.word	0x08018635
 80185e0:	0801863b 	.word	0x0801863b
 80185e4:	080185f9 	.word	0x080185f9
 80185e8:	08018609 	.word	0x08018609
 80185ec:	08018619 	.word	0x08018619
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80185f0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80185f4:	60fb      	str	r3, [r7, #12]
        break;
 80185f6:	e020      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80185f8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80185fc:	60fb      	str	r3, [r7, #12]
        break;
 80185fe:	e01c      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018600:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018604:	60fb      	str	r3, [r7, #12]
        break;
 8018606:	e018      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8018608:	f245 1361 	movw	r3, #20833	; 0x5161
 801860c:	60fb      	str	r3, [r7, #12]
        break;
 801860e:	e014      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018610:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018614:	60fb      	str	r3, [r7, #12]
        break;
 8018616:	e010      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8018618:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801861c:	60fb      	str	r3, [r7, #12]
        break;
 801861e:	e00c      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018620:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018624:	60fb      	str	r3, [r7, #12]
        break;
 8018626:	e008      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8018628:	4b07      	ldr	r3, [pc, #28]	; (8018648 <RadioGetLoRaBandwidthInHz+0xa0>)
 801862a:	60fb      	str	r3, [r7, #12]
        break;
 801862c:	e005      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801862e:	4b07      	ldr	r3, [pc, #28]	; (801864c <RadioGetLoRaBandwidthInHz+0xa4>)
 8018630:	60fb      	str	r3, [r7, #12]
        break;
 8018632:	e002      	b.n	801863a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018634:	4b06      	ldr	r3, [pc, #24]	; (8018650 <RadioGetLoRaBandwidthInHz+0xa8>)
 8018636:	60fb      	str	r3, [r7, #12]
        break;
 8018638:	bf00      	nop
    }

    return bandwidthInHz;
 801863a:	68fb      	ldr	r3, [r7, #12]
}
 801863c:	4618      	mov	r0, r3
 801863e:	3714      	adds	r7, #20
 8018640:	46bd      	mov	sp, r7
 8018642:	bc80      	pop	{r7}
 8018644:	4770      	bx	lr
 8018646:	bf00      	nop
 8018648:	0001e848 	.word	0x0001e848
 801864c:	0003d090 	.word	0x0003d090
 8018650:	0007a120 	.word	0x0007a120

08018654 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
 801865c:	4608      	mov	r0, r1
 801865e:	4611      	mov	r1, r2
 8018660:	461a      	mov	r2, r3
 8018662:	4603      	mov	r3, r0
 8018664:	70fb      	strb	r3, [r7, #3]
 8018666:	460b      	mov	r3, r1
 8018668:	803b      	strh	r3, [r7, #0]
 801866a:	4613      	mov	r3, r2
 801866c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 801866e:	883b      	ldrh	r3, [r7, #0]
 8018670:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018672:	78ba      	ldrb	r2, [r7, #2]
 8018674:	f082 0201 	eor.w	r2, r2, #1
 8018678:	b2d2      	uxtb	r2, r2
 801867a:	2a00      	cmp	r2, #0
 801867c:	d001      	beq.n	8018682 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801867e:	2208      	movs	r2, #8
 8018680:	e000      	b.n	8018684 <RadioGetGfskTimeOnAirNumerator+0x30>
 8018682:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8018684:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018686:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801868a:	7c3b      	ldrb	r3, [r7, #16]
 801868c:	7d39      	ldrb	r1, [r7, #20]
 801868e:	2900      	cmp	r1, #0
 8018690:	d001      	beq.n	8018696 <RadioGetGfskTimeOnAirNumerator+0x42>
 8018692:	2102      	movs	r1, #2
 8018694:	e000      	b.n	8018698 <RadioGetGfskTimeOnAirNumerator+0x44>
 8018696:	2100      	movs	r1, #0
 8018698:	440b      	add	r3, r1
 801869a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801869c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 801869e:	4618      	mov	r0, r3
 80186a0:	370c      	adds	r7, #12
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bc80      	pop	{r7}
 80186a6:	4770      	bx	lr

080186a8 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80186a8:	b480      	push	{r7}
 80186aa:	b08b      	sub	sp, #44	; 0x2c
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	60f8      	str	r0, [r7, #12]
 80186b0:	60b9      	str	r1, [r7, #8]
 80186b2:	4611      	mov	r1, r2
 80186b4:	461a      	mov	r2, r3
 80186b6:	460b      	mov	r3, r1
 80186b8:	71fb      	strb	r3, [r7, #7]
 80186ba:	4613      	mov	r3, r2
 80186bc:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80186be:	79fb      	ldrb	r3, [r7, #7]
 80186c0:	3304      	adds	r3, #4
 80186c2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80186c4:	2300      	movs	r3, #0
 80186c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	2b05      	cmp	r3, #5
 80186ce:	d002      	beq.n	80186d6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80186d0:	68bb      	ldr	r3, [r7, #8]
 80186d2:	2b06      	cmp	r3, #6
 80186d4:	d104      	bne.n	80186e0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80186d6:	88bb      	ldrh	r3, [r7, #4]
 80186d8:	2b0b      	cmp	r3, #11
 80186da:	d801      	bhi.n	80186e0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80186dc:	230c      	movs	r3, #12
 80186de:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d105      	bne.n	80186f2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	2b0b      	cmp	r3, #11
 80186ea:	d008      	beq.n	80186fe <RadioGetLoRaTimeOnAirNumerator+0x56>
 80186ec:	68bb      	ldr	r3, [r7, #8]
 80186ee:	2b0c      	cmp	r3, #12
 80186f0:	d005      	beq.n	80186fe <RadioGetLoRaTimeOnAirNumerator+0x56>
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2b01      	cmp	r3, #1
 80186f6:	d105      	bne.n	8018704 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	2b0c      	cmp	r3, #12
 80186fc:	d102      	bne.n	8018704 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80186fe:	2301      	movs	r3, #1
 8018700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018704:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8018708:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801870a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801870e:	2a00      	cmp	r2, #0
 8018710:	d001      	beq.n	8018716 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018712:	2210      	movs	r2, #16
 8018714:	e000      	b.n	8018718 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8018716:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018718:	4413      	add	r3, r2
 801871a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801871c:	68bb      	ldr	r3, [r7, #8]
 801871e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018720:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018722:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8018726:	2a00      	cmp	r2, #0
 8018728:	d001      	beq.n	801872e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801872a:	2200      	movs	r2, #0
 801872c:	e000      	b.n	8018730 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801872e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018730:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018732:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	2b06      	cmp	r3, #6
 8018738:	d803      	bhi.n	8018742 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	009b      	lsls	r3, r3, #2
 801873e:	623b      	str	r3, [r7, #32]
 8018740:	e00e      	b.n	8018760 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8018742:	69fb      	ldr	r3, [r7, #28]
 8018744:	3308      	adds	r3, #8
 8018746:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8018748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801874c:	2b00      	cmp	r3, #0
 801874e:	d004      	beq.n	801875a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	3b02      	subs	r3, #2
 8018754:	009b      	lsls	r3, r3, #2
 8018756:	623b      	str	r3, [r7, #32]
 8018758:	e002      	b.n	8018760 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801875a:	68bb      	ldr	r3, [r7, #8]
 801875c:	009b      	lsls	r3, r3, #2
 801875e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8018760:	69fb      	ldr	r3, [r7, #28]
 8018762:	2b00      	cmp	r3, #0
 8018764:	da01      	bge.n	801876a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8018766:	2300      	movs	r3, #0
 8018768:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801876a:	69fa      	ldr	r2, [r7, #28]
 801876c:	6a3b      	ldr	r3, [r7, #32]
 801876e:	4413      	add	r3, r2
 8018770:	1e5a      	subs	r2, r3, #1
 8018772:	6a3b      	ldr	r3, [r7, #32]
 8018774:	fb92 f3f3 	sdiv	r3, r2, r3
 8018778:	697a      	ldr	r2, [r7, #20]
 801877a:	fb03 f202 	mul.w	r2, r3, r2
 801877e:	88bb      	ldrh	r3, [r7, #4]
 8018780:	4413      	add	r3, r2
    int32_t intermediate =
 8018782:	330c      	adds	r3, #12
 8018784:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8018786:	68bb      	ldr	r3, [r7, #8]
 8018788:	2b06      	cmp	r3, #6
 801878a:	d802      	bhi.n	8018792 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801878c:	69bb      	ldr	r3, [r7, #24]
 801878e:	3302      	adds	r3, #2
 8018790:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8018792:	69bb      	ldr	r3, [r7, #24]
 8018794:	009b      	lsls	r3, r3, #2
 8018796:	1c5a      	adds	r2, r3, #1
 8018798:	68bb      	ldr	r3, [r7, #8]
 801879a:	3b02      	subs	r3, #2
 801879c:	fa02 f303 	lsl.w	r3, r2, r3
}
 80187a0:	4618      	mov	r0, r3
 80187a2:	372c      	adds	r7, #44	; 0x2c
 80187a4:	46bd      	mov	sp, r7
 80187a6:	bc80      	pop	{r7}
 80187a8:	4770      	bx	lr
	...

080187ac <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b08a      	sub	sp, #40	; 0x28
 80187b0:	af04      	add	r7, sp, #16
 80187b2:	60b9      	str	r1, [r7, #8]
 80187b4:	607a      	str	r2, [r7, #4]
 80187b6:	461a      	mov	r2, r3
 80187b8:	4603      	mov	r3, r0
 80187ba:	73fb      	strb	r3, [r7, #15]
 80187bc:	4613      	mov	r3, r2
 80187be:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80187c0:	2300      	movs	r3, #0
 80187c2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80187c4:	2301      	movs	r3, #1
 80187c6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80187c8:	7bfb      	ldrb	r3, [r7, #15]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d002      	beq.n	80187d4 <RadioTimeOnAir+0x28>
 80187ce:	2b01      	cmp	r3, #1
 80187d0:	d017      	beq.n	8018802 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80187d2:	e035      	b.n	8018840 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80187d4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80187d8:	8c3a      	ldrh	r2, [r7, #32]
 80187da:	7bb9      	ldrb	r1, [r7, #14]
 80187dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80187e0:	9301      	str	r3, [sp, #4]
 80187e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80187e6:	9300      	str	r3, [sp, #0]
 80187e8:	4603      	mov	r3, r0
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	f7ff ff32 	bl	8018654 <RadioGetGfskTimeOnAirNumerator>
 80187f0:	4603      	mov	r3, r0
 80187f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80187f6:	fb02 f303 	mul.w	r3, r2, r3
 80187fa:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	613b      	str	r3, [r7, #16]
        break;
 8018800:	e01e      	b.n	8018840 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018802:	8c39      	ldrh	r1, [r7, #32]
 8018804:	7bba      	ldrb	r2, [r7, #14]
 8018806:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801880a:	9302      	str	r3, [sp, #8]
 801880c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018810:	9301      	str	r3, [sp, #4]
 8018812:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018816:	9300      	str	r3, [sp, #0]
 8018818:	460b      	mov	r3, r1
 801881a:	6879      	ldr	r1, [r7, #4]
 801881c:	68b8      	ldr	r0, [r7, #8]
 801881e:	f7ff ff43 	bl	80186a8 <RadioGetLoRaTimeOnAirNumerator>
 8018822:	4603      	mov	r3, r0
 8018824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018828:	fb02 f303 	mul.w	r3, r2, r3
 801882c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801882e:	4a0a      	ldr	r2, [pc, #40]	; (8018858 <RadioTimeOnAir+0xac>)
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	4413      	add	r3, r2
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	4618      	mov	r0, r3
 8018838:	f7ff feb6 	bl	80185a8 <RadioGetLoRaBandwidthInHz>
 801883c:	6138      	str	r0, [r7, #16]
        break;
 801883e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 8018840:	697a      	ldr	r2, [r7, #20]
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	4413      	add	r3, r2
 8018846:	1e5a      	subs	r2, r3, #1
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801884e:	4618      	mov	r0, r3
 8018850:	3718      	adds	r7, #24
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	0801d5bc 	.word	0x0801d5bc

0801885c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b084      	sub	sp, #16
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
 8018864:	460b      	mov	r3, r1
 8018866:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8018868:	2300      	movs	r3, #0
 801886a:	2200      	movs	r2, #0
 801886c:	f240 2101 	movw	r1, #513	; 0x201
 8018870:	f240 2001 	movw	r0, #513	; 0x201
 8018874:	f001 fd34 	bl	801a2e0 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018878:	4b71      	ldr	r3, [pc, #452]	; (8018a40 <RadioSend+0x1e4>)
 801887a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801887e:	2101      	movs	r1, #1
 8018880:	4618      	mov	r0, r3
 8018882:	f002 f9d1 	bl	801ac28 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8018886:	4b6e      	ldr	r3, [pc, #440]	; (8018a40 <RadioSend+0x1e4>)
 8018888:	781b      	ldrb	r3, [r3, #0]
 801888a:	2b01      	cmp	r3, #1
 801888c:	d112      	bne.n	80188b4 <RadioSend+0x58>
 801888e:	4b6c      	ldr	r3, [pc, #432]	; (8018a40 <RadioSend+0x1e4>)
 8018890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8018894:	2b06      	cmp	r3, #6
 8018896:	d10d      	bne.n	80188b4 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018898:	f640 0089 	movw	r0, #2185	; 0x889
 801889c:	f002 f8e4 	bl	801aa68 <SUBGRF_ReadRegister>
 80188a0:	4603      	mov	r3, r0
 80188a2:	f023 0304 	bic.w	r3, r3, #4
 80188a6:	b2db      	uxtb	r3, r3
 80188a8:	4619      	mov	r1, r3
 80188aa:	f640 0089 	movw	r0, #2185	; 0x889
 80188ae:	f002 f8c7 	bl	801aa40 <SUBGRF_WriteRegister>
 80188b2:	e00c      	b.n	80188ce <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80188b4:	f640 0089 	movw	r0, #2185	; 0x889
 80188b8:	f002 f8d6 	bl	801aa68 <SUBGRF_ReadRegister>
 80188bc:	4603      	mov	r3, r0
 80188be:	f043 0304 	orr.w	r3, r3, #4
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	4619      	mov	r1, r3
 80188c6:	f640 0089 	movw	r0, #2185	; 0x889
 80188ca:	f002 f8b9 	bl	801aa40 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 80188ce:	4b5c      	ldr	r3, [pc, #368]	; (8018a40 <RadioSend+0x1e4>)
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	2b04      	cmp	r3, #4
 80188d4:	f200 80a7 	bhi.w	8018a26 <RadioSend+0x1ca>
 80188d8:	a201      	add	r2, pc, #4	; (adr r2, 80188e0 <RadioSend+0x84>)
 80188da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188de:	bf00      	nop
 80188e0:	0801890f 	.word	0x0801890f
 80188e4:	080188f5 	.word	0x080188f5
 80188e8:	0801890f 	.word	0x0801890f
 80188ec:	0801896f 	.word	0x0801896f
 80188f0:	0801898f 	.word	0x0801898f
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80188f4:	4a52      	ldr	r2, [pc, #328]	; (8018a40 <RadioSend+0x1e4>)
 80188f6:	78fb      	ldrb	r3, [r7, #3]
 80188f8:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80188fa:	4852      	ldr	r0, [pc, #328]	; (8018a44 <RadioSend+0x1e8>)
 80188fc:	f001 ff58 	bl	801a7b0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018900:	78fb      	ldrb	r3, [r7, #3]
 8018902:	2200      	movs	r2, #0
 8018904:	4619      	mov	r1, r3
 8018906:	6878      	ldr	r0, [r7, #4]
 8018908:	f001 fa0c 	bl	8019d24 <SUBGRF_SendPayload>
            break;
 801890c:	e08c      	b.n	8018a28 <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801890e:	f002 fb74 	bl	801affa <RFW_Is_Init>
 8018912:	4603      	mov	r3, r0
 8018914:	2b01      	cmp	r3, #1
 8018916:	d11d      	bne.n	8018954 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8018918:	f107 020d 	add.w	r2, r7, #13
 801891c:	78fb      	ldrb	r3, [r7, #3]
 801891e:	4619      	mov	r1, r3
 8018920:	6878      	ldr	r0, [r7, #4]
 8018922:	f002 fb82 	bl	801b02a <RFW_TransmitInit>
 8018926:	4603      	mov	r3, r0
 8018928:	2b00      	cmp	r3, #0
 801892a:	d10c      	bne.n	8018946 <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801892c:	7b7a      	ldrb	r2, [r7, #13]
 801892e:	4b44      	ldr	r3, [pc, #272]	; (8018a40 <RadioSend+0x1e4>)
 8018930:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018932:	4844      	ldr	r0, [pc, #272]	; (8018a44 <RadioSend+0x1e8>)
 8018934:	f001 ff3c 	bl	801a7b0 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8018938:	7b7b      	ldrb	r3, [r7, #13]
 801893a:	2200      	movs	r2, #0
 801893c:	4619      	mov	r1, r3
 801893e:	6878      	ldr	r0, [r7, #4]
 8018940:	f001 f9f0 	bl	8019d24 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8018944:	e070      	b.n	8018a28 <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8018946:	4b40      	ldr	r3, [pc, #256]	; (8018a48 <RadioSend+0x1ec>)
 8018948:	2201      	movs	r2, #1
 801894a:	2100      	movs	r1, #0
 801894c:	2002      	movs	r0, #2
 801894e:	f003 fb53 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
 8018952:	e072      	b.n	8018a3a <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8018954:	4a3a      	ldr	r2, [pc, #232]	; (8018a40 <RadioSend+0x1e4>)
 8018956:	78fb      	ldrb	r3, [r7, #3]
 8018958:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801895a:	483a      	ldr	r0, [pc, #232]	; (8018a44 <RadioSend+0x1e8>)
 801895c:	f001 ff28 	bl	801a7b0 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8018960:	78fb      	ldrb	r3, [r7, #3]
 8018962:	2200      	movs	r2, #0
 8018964:	4619      	mov	r1, r3
 8018966:	6878      	ldr	r0, [r7, #4]
 8018968:	f001 f9dc 	bl	8019d24 <SUBGRF_SendPayload>
            break;
 801896c:	e05c      	b.n	8018a28 <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801896e:	4b34      	ldr	r3, [pc, #208]	; (8018a40 <RadioSend+0x1e4>)
 8018970:	2202      	movs	r2, #2
 8018972:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8018974:	4a32      	ldr	r2, [pc, #200]	; (8018a40 <RadioSend+0x1e4>)
 8018976:	78fb      	ldrb	r3, [r7, #3]
 8018978:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801897a:	4832      	ldr	r0, [pc, #200]	; (8018a44 <RadioSend+0x1e8>)
 801897c:	f001 ff18 	bl	801a7b0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018980:	78fb      	ldrb	r3, [r7, #3]
 8018982:	2200      	movs	r2, #0
 8018984:	4619      	mov	r1, r3
 8018986:	6878      	ldr	r0, [r7, #4]
 8018988:	f001 f9cc 	bl	8019d24 <SUBGRF_SendPayload>
            break;
 801898c:	e04c      	b.n	8018a28 <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801898e:	78fb      	ldrb	r3, [r7, #3]
 8018990:	461a      	mov	r2, r3
 8018992:	6879      	ldr	r1, [r7, #4]
 8018994:	482d      	ldr	r0, [pc, #180]	; (8018a4c <RadioSend+0x1f0>)
 8018996:	f000 fcbc 	bl	8019312 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801899a:	4b29      	ldr	r3, [pc, #164]	; (8018a40 <RadioSend+0x1e4>)
 801899c:	2202      	movs	r2, #2
 801899e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80189a0:	78fb      	ldrb	r3, [r7, #3]
 80189a2:	3301      	adds	r3, #1
 80189a4:	b2da      	uxtb	r2, r3
 80189a6:	4b26      	ldr	r3, [pc, #152]	; (8018a40 <RadioSend+0x1e4>)
 80189a8:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189aa:	4826      	ldr	r0, [pc, #152]	; (8018a44 <RadioSend+0x1e8>)
 80189ac:	f001 ff00 	bl	801a7b0 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80189b0:	2100      	movs	r1, #0
 80189b2:	20f1      	movs	r0, #241	; 0xf1
 80189b4:	f000 f95d 	bl	8018c72 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80189b8:	2100      	movs	r1, #0
 80189ba:	20f0      	movs	r0, #240	; 0xf0
 80189bc:	f000 f959 	bl	8018c72 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 80189c0:	4b1f      	ldr	r3, [pc, #124]	; (8018a40 <RadioSend+0x1e4>)
 80189c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80189c4:	2b64      	cmp	r3, #100	; 0x64
 80189c6:	d108      	bne.n	80189da <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 80189c8:	2170      	movs	r1, #112	; 0x70
 80189ca:	20f3      	movs	r0, #243	; 0xf3
 80189cc:	f000 f951 	bl	8018c72 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 80189d0:	211d      	movs	r1, #29
 80189d2:	20f2      	movs	r0, #242	; 0xf2
 80189d4:	f000 f94d 	bl	8018c72 <RadioWrite>
 80189d8:	e007      	b.n	80189ea <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 80189da:	21e1      	movs	r1, #225	; 0xe1
 80189dc:	20f3      	movs	r0, #243	; 0xf3
 80189de:	f000 f948 	bl	8018c72 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 80189e2:	2104      	movs	r1, #4
 80189e4:	20f2      	movs	r0, #242	; 0xf2
 80189e6:	f000 f944 	bl	8018c72 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 80189ea:	78fb      	ldrb	r3, [r7, #3]
 80189ec:	b29b      	uxth	r3, r3
 80189ee:	00db      	lsls	r3, r3, #3
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	3302      	adds	r3, #2
 80189f4:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 80189f6:	89fb      	ldrh	r3, [r7, #14]
 80189f8:	0a1b      	lsrs	r3, r3, #8
 80189fa:	b29b      	uxth	r3, r3
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	4619      	mov	r1, r3
 8018a00:	20f4      	movs	r0, #244	; 0xf4
 8018a02:	f000 f936 	bl	8018c72 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8018a06:	89fb      	ldrh	r3, [r7, #14]
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	4619      	mov	r1, r3
 8018a0c:	20f5      	movs	r0, #245	; 0xf5
 8018a0e:	f000 f930 	bl	8018c72 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8018a12:	78fb      	ldrb	r3, [r7, #3]
 8018a14:	3301      	adds	r3, #1
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	480b      	ldr	r0, [pc, #44]	; (8018a4c <RadioSend+0x1f0>)
 8018a20:	f001 f980 	bl	8019d24 <SUBGRF_SendPayload>
            break;
 8018a24:	e000      	b.n	8018a28 <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018a26:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8018a28:	4b05      	ldr	r3, [pc, #20]	; (8018a40 <RadioSend+0x1e4>)
 8018a2a:	685b      	ldr	r3, [r3, #4]
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	4808      	ldr	r0, [pc, #32]	; (8018a50 <RadioSend+0x1f4>)
 8018a30:	f003 f948 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018a34:	4806      	ldr	r0, [pc, #24]	; (8018a50 <RadioSend+0x1f4>)
 8018a36:	f003 f867 	bl	801bb08 <UTIL_TIMER_Start>
}
 8018a3a:	3710      	adds	r7, #16
 8018a3c:	46bd      	mov	sp, r7
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	20001c2c 	.word	0x20001c2c
 8018a44:	20001c3a 	.word	0x20001c3a
 8018a48:	0801cfe8 	.word	0x0801cfe8
 8018a4c:	20001b28 	.word	0x20001b28
 8018a50:	20001c88 	.word	0x20001c88

08018a54 <RadioSleep>:

static void RadioSleep( void )
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b082      	sub	sp, #8
 8018a58:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8018a5a:	2300      	movs	r3, #0
 8018a5c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8018a5e:	793b      	ldrb	r3, [r7, #4]
 8018a60:	f043 0304 	orr.w	r3, r3, #4
 8018a64:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8018a66:	7938      	ldrb	r0, [r7, #4]
 8018a68:	f001 fa38 	bl	8019edc <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8018a6c:	2002      	movs	r0, #2
 8018a6e:	f7e9 fb9f 	bl	80021b0 <HAL_Delay>
}
 8018a72:	bf00      	nop
 8018a74:	3708      	adds	r7, #8
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}

08018a7a <RadioStandby>:

static void RadioStandby( void )
{
 8018a7a:	b580      	push	{r7, lr}
 8018a7c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8018a7e:	2000      	movs	r0, #0
 8018a80:	f001 fa5e 	bl	8019f40 <SUBGRF_SetStandby>
}
 8018a84:	bf00      	nop
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8018a90:	f002 fab3 	bl	801affa <RFW_Is_Init>
 8018a94:	4603      	mov	r3, r0
 8018a96:	2b01      	cmp	r3, #1
 8018a98:	d102      	bne.n	8018aa0 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8018a9a:	f002 fad6 	bl	801b04a <RFW_ReceiveInit>
 8018a9e:	e007      	b.n	8018ab0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	2200      	movs	r2, #0
 8018aa4:	f240 2162 	movw	r1, #610	; 0x262
 8018aa8:	f240 2062 	movw	r0, #610	; 0x262
 8018aac:	f001 fc18 	bl	801a2e0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d006      	beq.n	8018ac4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018ab6:	6879      	ldr	r1, [r7, #4]
 8018ab8:	4811      	ldr	r0, [pc, #68]	; (8018b00 <RadioRx+0x78>)
 8018aba:	f003 f903 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018abe:	4810      	ldr	r0, [pc, #64]	; (8018b00 <RadioRx+0x78>)
 8018ac0:	f003 f822 	bl	801bb08 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018ac4:	4b0f      	ldr	r3, [pc, #60]	; (8018b04 <RadioRx+0x7c>)
 8018ac6:	2200      	movs	r2, #0
 8018ac8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018aca:	4b0e      	ldr	r3, [pc, #56]	; (8018b04 <RadioRx+0x7c>)
 8018acc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018ad0:	2100      	movs	r1, #0
 8018ad2:	4618      	mov	r0, r3
 8018ad4:	f002 f8a8 	bl	801ac28 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018ad8:	4b0a      	ldr	r3, [pc, #40]	; (8018b04 <RadioRx+0x7c>)
 8018ada:	785b      	ldrb	r3, [r3, #1]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d004      	beq.n	8018aea <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018ae0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018ae4:	f001 fa68 	bl	8019fb8 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018ae8:	e005      	b.n	8018af6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018aea:	4b06      	ldr	r3, [pc, #24]	; (8018b04 <RadioRx+0x7c>)
 8018aec:	689b      	ldr	r3, [r3, #8]
 8018aee:	019b      	lsls	r3, r3, #6
 8018af0:	4618      	mov	r0, r3
 8018af2:	f001 fa61 	bl	8019fb8 <SUBGRF_SetRx>
}
 8018af6:	bf00      	nop
 8018af8:	3708      	adds	r7, #8
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	bf00      	nop
 8018b00:	20001ca0 	.word	0x20001ca0
 8018b04:	20001c2c 	.word	0x20001c2c

08018b08 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 8018b10:	f002 fa73 	bl	801affa <RFW_Is_Init>
 8018b14:	4603      	mov	r3, r0
 8018b16:	2b01      	cmp	r3, #1
 8018b18:	d102      	bne.n	8018b20 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8018b1a:	f002 fa96 	bl	801b04a <RFW_ReceiveInit>
 8018b1e:	e007      	b.n	8018b30 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018b20:	2300      	movs	r3, #0
 8018b22:	2200      	movs	r2, #0
 8018b24:	f240 2162 	movw	r1, #610	; 0x262
 8018b28:	f240 2062 	movw	r0, #610	; 0x262
 8018b2c:	f001 fbd8 	bl	801a2e0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d006      	beq.n	8018b44 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018b36:	6879      	ldr	r1, [r7, #4]
 8018b38:	4811      	ldr	r0, [pc, #68]	; (8018b80 <RadioRxBoosted+0x78>)
 8018b3a:	f003 f8c3 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8018b3e:	4810      	ldr	r0, [pc, #64]	; (8018b80 <RadioRxBoosted+0x78>)
 8018b40:	f002 ffe2 	bl	801bb08 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018b44:	4b0f      	ldr	r3, [pc, #60]	; (8018b84 <RadioRxBoosted+0x7c>)
 8018b46:	2200      	movs	r2, #0
 8018b48:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018b4a:	4b0e      	ldr	r3, [pc, #56]	; (8018b84 <RadioRxBoosted+0x7c>)
 8018b4c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018b50:	2100      	movs	r1, #0
 8018b52:	4618      	mov	r0, r3
 8018b54:	f002 f868 	bl	801ac28 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8018b58:	4b0a      	ldr	r3, [pc, #40]	; (8018b84 <RadioRxBoosted+0x7c>)
 8018b5a:	785b      	ldrb	r3, [r3, #1]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d004      	beq.n	8018b6a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8018b60:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8018b64:	f001 fa48 	bl	8019ff8 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8018b68:	e005      	b.n	8018b76 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8018b6a:	4b06      	ldr	r3, [pc, #24]	; (8018b84 <RadioRxBoosted+0x7c>)
 8018b6c:	689b      	ldr	r3, [r3, #8]
 8018b6e:	019b      	lsls	r3, r3, #6
 8018b70:	4618      	mov	r0, r3
 8018b72:	f001 fa41 	bl	8019ff8 <SUBGRF_SetRxBoosted>
}
 8018b76:	bf00      	nop
 8018b78:	3708      	adds	r7, #8
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}
 8018b7e:	bf00      	nop
 8018b80:	20001ca0 	.word	0x20001ca0
 8018b84:	20001c2c 	.word	0x20001c2c

08018b88 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
 8018b90:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	005a      	lsls	r2, r3, #1
 8018b96:	683b      	ldr	r3, [r7, #0]
 8018b98:	4413      	add	r3, r2
 8018b9a:	4a0c      	ldr	r2, [pc, #48]	; (8018bcc <RadioSetRxDutyCycle+0x44>)
 8018b9c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	2200      	movs	r2, #0
 8018ba2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018ba6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018baa:	f001 fb99 	bl	801a2e0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018bae:	4b07      	ldr	r3, [pc, #28]	; (8018bcc <RadioSetRxDutyCycle+0x44>)
 8018bb0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018bb4:	2100      	movs	r1, #0
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	f002 f836 	bl	801ac28 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018bbc:	6839      	ldr	r1, [r7, #0]
 8018bbe:	6878      	ldr	r0, [r7, #4]
 8018bc0:	f001 fa3e 	bl	801a040 <SUBGRF_SetRxDutyCycle>
}
 8018bc4:	bf00      	nop
 8018bc6:	3708      	adds	r7, #8
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	bd80      	pop	{r7, pc}
 8018bcc:	20001c2c 	.word	0x20001c2c

08018bd0 <RadioStartCad>:

static void RadioStartCad( void )
{
 8018bd0:	b580      	push	{r7, lr}
 8018bd2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018bd4:	4b09      	ldr	r3, [pc, #36]	; (8018bfc <RadioStartCad+0x2c>)
 8018bd6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8018bda:	2100      	movs	r1, #0
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f002 f823 	bl	801ac28 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8018be2:	2300      	movs	r3, #0
 8018be4:	2200      	movs	r2, #0
 8018be6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8018bea:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8018bee:	f001 fb77 	bl	801a2e0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8018bf2:	f001 fa51 	bl	801a098 <SUBGRF_SetCad>
}
 8018bf6:	bf00      	nop
 8018bf8:	bd80      	pop	{r7, pc}
 8018bfa:	bf00      	nop
 8018bfc:	20001c2c 	.word	0x20001c2c

08018c00 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
 8018c08:	460b      	mov	r3, r1
 8018c0a:	70fb      	strb	r3, [r7, #3]
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8018c10:	883b      	ldrh	r3, [r7, #0]
 8018c12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018c16:	fb02 f303 	mul.w	r3, r2, r3
 8018c1a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f001 fbbb 	bl	801a398 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8018c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c26:	4618      	mov	r0, r3
 8018c28:	f002 f826 	bl	801ac78 <SUBGRF_SetRfTxPower>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8018c30:	7afb      	ldrb	r3, [r7, #11]
 8018c32:	2101      	movs	r1, #1
 8018c34:	4618      	mov	r0, r3
 8018c36:	f001 fff7 	bl	801ac28 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8018c3a:	f001 fa3b 	bl	801a0b4 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8018c3e:	68f9      	ldr	r1, [r7, #12]
 8018c40:	4804      	ldr	r0, [pc, #16]	; (8018c54 <RadioSetTxContinuousWave+0x54>)
 8018c42:	f003 f83f 	bl	801bcc4 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8018c46:	4803      	ldr	r0, [pc, #12]	; (8018c54 <RadioSetTxContinuousWave+0x54>)
 8018c48:	f002 ff5e 	bl	801bb08 <UTIL_TIMER_Start>
}
 8018c4c:	bf00      	nop
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	20001c88 	.word	0x20001c88

08018c58 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b082      	sub	sp, #8
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8018c62:	f001 fe5a 	bl	801a91a <SUBGRF_GetRssiInst>
 8018c66:	4603      	mov	r3, r0
 8018c68:	b21b      	sxth	r3, r3
}
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	3708      	adds	r7, #8
 8018c6e:	46bd      	mov	sp, r7
 8018c70:	bd80      	pop	{r7, pc}

08018c72 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8018c72:	b580      	push	{r7, lr}
 8018c74:	b082      	sub	sp, #8
 8018c76:	af00      	add	r7, sp, #0
 8018c78:	4603      	mov	r3, r0
 8018c7a:	460a      	mov	r2, r1
 8018c7c:	80fb      	strh	r3, [r7, #6]
 8018c7e:	4613      	mov	r3, r2
 8018c80:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8018c82:	797a      	ldrb	r2, [r7, #5]
 8018c84:	88fb      	ldrh	r3, [r7, #6]
 8018c86:	4611      	mov	r1, r2
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f001 fed9 	bl	801aa40 <SUBGRF_WriteRegister>
}
 8018c8e:	bf00      	nop
 8018c90:	3708      	adds	r7, #8
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}

08018c96 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8018c96:	b580      	push	{r7, lr}
 8018c98:	b082      	sub	sp, #8
 8018c9a:	af00      	add	r7, sp, #0
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018ca0:	88fb      	ldrh	r3, [r7, #6]
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	f001 fee0 	bl	801aa68 <SUBGRF_ReadRegister>
 8018ca8:	4603      	mov	r3, r0
}
 8018caa:	4618      	mov	r0, r3
 8018cac:	3708      	adds	r7, #8
 8018cae:	46bd      	mov	sp, r7
 8018cb0:	bd80      	pop	{r7, pc}

08018cb2 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018cb2:	b580      	push	{r7, lr}
 8018cb4:	b082      	sub	sp, #8
 8018cb6:	af00      	add	r7, sp, #0
 8018cb8:	4603      	mov	r3, r0
 8018cba:	6039      	str	r1, [r7, #0]
 8018cbc:	80fb      	strh	r3, [r7, #6]
 8018cbe:	4613      	mov	r3, r2
 8018cc0:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018cc2:	797b      	ldrb	r3, [r7, #5]
 8018cc4:	b29a      	uxth	r2, r3
 8018cc6:	88fb      	ldrh	r3, [r7, #6]
 8018cc8:	6839      	ldr	r1, [r7, #0]
 8018cca:	4618      	mov	r0, r3
 8018ccc:	f001 fee0 	bl	801aa90 <SUBGRF_WriteRegisters>
}
 8018cd0:	bf00      	nop
 8018cd2:	3708      	adds	r7, #8
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	bd80      	pop	{r7, pc}

08018cd8 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018cd8:	b580      	push	{r7, lr}
 8018cda:	b082      	sub	sp, #8
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	4603      	mov	r3, r0
 8018ce0:	6039      	str	r1, [r7, #0]
 8018ce2:	80fb      	strh	r3, [r7, #6]
 8018ce4:	4613      	mov	r3, r2
 8018ce6:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8018ce8:	797b      	ldrb	r3, [r7, #5]
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	88fb      	ldrh	r3, [r7, #6]
 8018cee:	6839      	ldr	r1, [r7, #0]
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	f001 feef 	bl	801aad4 <SUBGRF_ReadRegisters>
}
 8018cf6:	bf00      	nop
 8018cf8:	3708      	adds	r7, #8
 8018cfa:	46bd      	mov	sp, r7
 8018cfc:	bd80      	pop	{r7, pc}
	...

08018d00 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b082      	sub	sp, #8
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	4603      	mov	r3, r0
 8018d08:	460a      	mov	r2, r1
 8018d0a:	71fb      	strb	r3, [r7, #7]
 8018d0c:	4613      	mov	r3, r2
 8018d0e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018d10:	79fb      	ldrb	r3, [r7, #7]
 8018d12:	2b01      	cmp	r3, #1
 8018d14:	d10a      	bne.n	8018d2c <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8018d16:	4a0e      	ldr	r2, [pc, #56]	; (8018d50 <RadioSetMaxPayloadLength+0x50>)
 8018d18:	79bb      	ldrb	r3, [r7, #6]
 8018d1a:	7013      	strb	r3, [r2, #0]
 8018d1c:	4b0c      	ldr	r3, [pc, #48]	; (8018d50 <RadioSetMaxPayloadLength+0x50>)
 8018d1e:	781a      	ldrb	r2, [r3, #0]
 8018d20:	4b0c      	ldr	r3, [pc, #48]	; (8018d54 <RadioSetMaxPayloadLength+0x54>)
 8018d22:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d24:	480c      	ldr	r0, [pc, #48]	; (8018d58 <RadioSetMaxPayloadLength+0x58>)
 8018d26:	f001 fd43 	bl	801a7b0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8018d2a:	e00d      	b.n	8018d48 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8018d2c:	4b09      	ldr	r3, [pc, #36]	; (8018d54 <RadioSetMaxPayloadLength+0x54>)
 8018d2e:	7d5b      	ldrb	r3, [r3, #21]
 8018d30:	2b01      	cmp	r3, #1
 8018d32:	d109      	bne.n	8018d48 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8018d34:	4a06      	ldr	r2, [pc, #24]	; (8018d50 <RadioSetMaxPayloadLength+0x50>)
 8018d36:	79bb      	ldrb	r3, [r7, #6]
 8018d38:	7013      	strb	r3, [r2, #0]
 8018d3a:	4b05      	ldr	r3, [pc, #20]	; (8018d50 <RadioSetMaxPayloadLength+0x50>)
 8018d3c:	781a      	ldrb	r2, [r3, #0]
 8018d3e:	4b05      	ldr	r3, [pc, #20]	; (8018d54 <RadioSetMaxPayloadLength+0x54>)
 8018d40:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018d42:	4805      	ldr	r0, [pc, #20]	; (8018d58 <RadioSetMaxPayloadLength+0x58>)
 8018d44:	f001 fd34 	bl	801a7b0 <SUBGRF_SetPacketParams>
}
 8018d48:	bf00      	nop
 8018d4a:	3708      	adds	r7, #8
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}
 8018d50:	20000144 	.word	0x20000144
 8018d54:	20001c2c 	.word	0x20001c2c
 8018d58:	20001c3a 	.word	0x20001c3a

08018d5c <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8018d5c:	b580      	push	{r7, lr}
 8018d5e:	b082      	sub	sp, #8
 8018d60:	af00      	add	r7, sp, #0
 8018d62:	4603      	mov	r3, r0
 8018d64:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8018d66:	4a13      	ldr	r2, [pc, #76]	; (8018db4 <RadioSetPublicNetwork+0x58>)
 8018d68:	79fb      	ldrb	r3, [r7, #7]
 8018d6a:	7313      	strb	r3, [r2, #12]
 8018d6c:	4b11      	ldr	r3, [pc, #68]	; (8018db4 <RadioSetPublicNetwork+0x58>)
 8018d6e:	7b1a      	ldrb	r2, [r3, #12]
 8018d70:	4b10      	ldr	r3, [pc, #64]	; (8018db4 <RadioSetPublicNetwork+0x58>)
 8018d72:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8018d74:	2001      	movs	r0, #1
 8018d76:	f7ff f82d 	bl	8017dd4 <RadioSetModem>
    if( enable == true )
 8018d7a:	79fb      	ldrb	r3, [r7, #7]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d00a      	beq.n	8018d96 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8018d80:	2134      	movs	r1, #52	; 0x34
 8018d82:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8018d86:	f001 fe5b 	bl	801aa40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8018d8a:	2144      	movs	r1, #68	; 0x44
 8018d8c:	f240 7041 	movw	r0, #1857	; 0x741
 8018d90:	f001 fe56 	bl	801aa40 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018d94:	e009      	b.n	8018daa <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018d96:	2114      	movs	r1, #20
 8018d98:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8018d9c:	f001 fe50 	bl	801aa40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018da0:	2124      	movs	r1, #36	; 0x24
 8018da2:	f240 7041 	movw	r0, #1857	; 0x741
 8018da6:	f001 fe4b 	bl	801aa40 <SUBGRF_WriteRegister>
}
 8018daa:	bf00      	nop
 8018dac:	3708      	adds	r7, #8
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	20001c2c 	.word	0x20001c2c

08018db8 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018dbc:	f001 ff90 	bl	801ace0 <SUBGRF_GetRadioWakeUpTime>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	3303      	adds	r3, #3
}
 8018dc4:	4618      	mov	r0, r3
 8018dc6:	bd80      	pop	{r7, pc}

08018dc8 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018dc8:	b580      	push	{r7, lr}
 8018dca:	b082      	sub	sp, #8
 8018dcc:	af00      	add	r7, sp, #0
 8018dce:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018dd0:	f000 f80e 	bl	8018df0 <RadioOnTxTimeoutProcess>
}
 8018dd4:	bf00      	nop
 8018dd6:	3708      	adds	r7, #8
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	bd80      	pop	{r7, pc}

08018ddc <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b082      	sub	sp, #8
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018de4:	f000 f818 	bl	8018e18 <RadioOnRxTimeoutProcess>
}
 8018de8:	bf00      	nop
 8018dea:	3708      	adds	r7, #8
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018df4:	4b07      	ldr	r3, [pc, #28]	; (8018e14 <RadioOnTxTimeoutProcess+0x24>)
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d008      	beq.n	8018e0e <RadioOnTxTimeoutProcess+0x1e>
 8018dfc:	4b05      	ldr	r3, [pc, #20]	; (8018e14 <RadioOnTxTimeoutProcess+0x24>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	685b      	ldr	r3, [r3, #4]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d003      	beq.n	8018e0e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018e06:	4b03      	ldr	r3, [pc, #12]	; (8018e14 <RadioOnTxTimeoutProcess+0x24>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	685b      	ldr	r3, [r3, #4]
 8018e0c:	4798      	blx	r3
    }
}
 8018e0e:	bf00      	nop
 8018e10:	bd80      	pop	{r7, pc}
 8018e12:	bf00      	nop
 8018e14:	20001c28 	.word	0x20001c28

08018e18 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018e1c:	4b07      	ldr	r3, [pc, #28]	; (8018e3c <RadioOnRxTimeoutProcess+0x24>)
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d008      	beq.n	8018e36 <RadioOnRxTimeoutProcess+0x1e>
 8018e24:	4b05      	ldr	r3, [pc, #20]	; (8018e3c <RadioOnRxTimeoutProcess+0x24>)
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	68db      	ldr	r3, [r3, #12]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d003      	beq.n	8018e36 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018e2e:	4b03      	ldr	r3, [pc, #12]	; (8018e3c <RadioOnRxTimeoutProcess+0x24>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	68db      	ldr	r3, [r3, #12]
 8018e34:	4798      	blx	r3
    }
}
 8018e36:	bf00      	nop
 8018e38:	bd80      	pop	{r7, pc}
 8018e3a:	bf00      	nop
 8018e3c:	20001c28 	.word	0x20001c28

08018e40 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b082      	sub	sp, #8
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	4603      	mov	r3, r0
 8018e48:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018e4a:	4a05      	ldr	r2, [pc, #20]	; (8018e60 <RadioOnDioIrq+0x20>)
 8018e4c:	88fb      	ldrh	r3, [r7, #6]
 8018e4e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8018e52:	f000 f807 	bl	8018e64 <RadioIrqProcess>
}
 8018e56:	bf00      	nop
 8018e58:	3708      	adds	r7, #8
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	20001c2c 	.word	0x20001c2c

08018e64 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018e64:	b590      	push	{r4, r7, lr}
 8018e66:	b083      	sub	sp, #12
 8018e68:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018e72:	4ba8      	ldr	r3, [pc, #672]	; (8019114 <RadioIrqProcess+0x2b0>)
 8018e74:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8018e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e7c:	f000 810c 	beq.w	8019098 <RadioIrqProcess+0x234>
 8018e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018e84:	f300 81e8 	bgt.w	8019258 <RadioIrqProcess+0x3f4>
 8018e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e8c:	f000 80f0 	beq.w	8019070 <RadioIrqProcess+0x20c>
 8018e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e94:	f300 81e0 	bgt.w	8019258 <RadioIrqProcess+0x3f4>
 8018e98:	2b80      	cmp	r3, #128	; 0x80
 8018e9a:	f000 80d5 	beq.w	8019048 <RadioIrqProcess+0x1e4>
 8018e9e:	2b80      	cmp	r3, #128	; 0x80
 8018ea0:	f300 81da 	bgt.w	8019258 <RadioIrqProcess+0x3f4>
 8018ea4:	2b20      	cmp	r3, #32
 8018ea6:	dc49      	bgt.n	8018f3c <RadioIrqProcess+0xd8>
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	f340 81d5 	ble.w	8019258 <RadioIrqProcess+0x3f4>
 8018eae:	3b01      	subs	r3, #1
 8018eb0:	2b1f      	cmp	r3, #31
 8018eb2:	f200 81d1 	bhi.w	8019258 <RadioIrqProcess+0x3f4>
 8018eb6:	a201      	add	r2, pc, #4	; (adr r2, 8018ebc <RadioIrqProcess+0x58>)
 8018eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ebc:	08018f45 	.word	0x08018f45
 8018ec0:	08018f7f 	.word	0x08018f7f
 8018ec4:	08019259 	.word	0x08019259
 8018ec8:	08019135 	.word	0x08019135
 8018ecc:	08019259 	.word	0x08019259
 8018ed0:	08019259 	.word	0x08019259
 8018ed4:	08019259 	.word	0x08019259
 8018ed8:	080191b1 	.word	0x080191b1
 8018edc:	08019259 	.word	0x08019259
 8018ee0:	08019259 	.word	0x08019259
 8018ee4:	08019259 	.word	0x08019259
 8018ee8:	08019259 	.word	0x08019259
 8018eec:	08019259 	.word	0x08019259
 8018ef0:	08019259 	.word	0x08019259
 8018ef4:	08019259 	.word	0x08019259
 8018ef8:	080191cd 	.word	0x080191cd
 8018efc:	08019259 	.word	0x08019259
 8018f00:	08019259 	.word	0x08019259
 8018f04:	08019259 	.word	0x08019259
 8018f08:	08019259 	.word	0x08019259
 8018f0c:	08019259 	.word	0x08019259
 8018f10:	08019259 	.word	0x08019259
 8018f14:	08019259 	.word	0x08019259
 8018f18:	08019259 	.word	0x08019259
 8018f1c:	08019259 	.word	0x08019259
 8018f20:	08019259 	.word	0x08019259
 8018f24:	08019259 	.word	0x08019259
 8018f28:	08019259 	.word	0x08019259
 8018f2c:	08019259 	.word	0x08019259
 8018f30:	08019259 	.word	0x08019259
 8018f34:	08019259 	.word	0x08019259
 8018f38:	080191db 	.word	0x080191db
 8018f3c:	2b40      	cmp	r3, #64	; 0x40
 8018f3e:	f000 816d 	beq.w	801921c <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8018f42:	e189      	b.n	8019258 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018f44:	4874      	ldr	r0, [pc, #464]	; (8019118 <RadioIrqProcess+0x2b4>)
 8018f46:	f002 fe4d 	bl	801bbe4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018f4a:	2000      	movs	r0, #0
 8018f4c:	f000 fff8 	bl	8019f40 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018f50:	f002 f85a 	bl	801b008 <RFW_Is_LongPacketModeEnabled>
 8018f54:	4603      	mov	r3, r0
 8018f56:	2b01      	cmp	r3, #1
 8018f58:	d101      	bne.n	8018f5e <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018f5a:	f002 f87e 	bl	801b05a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018f5e:	4b6f      	ldr	r3, [pc, #444]	; (801911c <RadioIrqProcess+0x2b8>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	f000 817a 	beq.w	801925c <RadioIrqProcess+0x3f8>
 8018f68:	4b6c      	ldr	r3, [pc, #432]	; (801911c <RadioIrqProcess+0x2b8>)
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	f000 8174 	beq.w	801925c <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018f74:	4b69      	ldr	r3, [pc, #420]	; (801911c <RadioIrqProcess+0x2b8>)
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4798      	blx	r3
        break;
 8018f7c:	e16e      	b.n	801925c <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018f7e:	4868      	ldr	r0, [pc, #416]	; (8019120 <RadioIrqProcess+0x2bc>)
 8018f80:	f002 fe30 	bl	801bbe4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018f84:	4b63      	ldr	r3, [pc, #396]	; (8019114 <RadioIrqProcess+0x2b0>)
 8018f86:	785b      	ldrb	r3, [r3, #1]
 8018f88:	f083 0301 	eor.w	r3, r3, #1
 8018f8c:	b2db      	uxtb	r3, r3
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d014      	beq.n	8018fbc <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018f92:	2000      	movs	r0, #0
 8018f94:	f000 ffd4 	bl	8019f40 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018f98:	2100      	movs	r1, #0
 8018f9a:	f640 1002 	movw	r0, #2306	; 0x902
 8018f9e:	f001 fd4f 	bl	801aa40 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018fa2:	f640 1044 	movw	r0, #2372	; 0x944
 8018fa6:	f001 fd5f 	bl	801aa68 <SUBGRF_ReadRegister>
 8018faa:	4603      	mov	r3, r0
 8018fac:	f043 0302 	orr.w	r3, r3, #2
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	f640 1044 	movw	r0, #2372	; 0x944
 8018fb8:	f001 fd42 	bl	801aa40 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018fbc:	1dfb      	adds	r3, r7, #7
 8018fbe:	22ff      	movs	r2, #255	; 0xff
 8018fc0:	4619      	mov	r1, r3
 8018fc2:	4858      	ldr	r0, [pc, #352]	; (8019124 <RadioIrqProcess+0x2c0>)
 8018fc4:	f000 fe8c 	bl	8019ce0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018fc8:	4857      	ldr	r0, [pc, #348]	; (8019128 <RadioIrqProcess+0x2c4>)
 8018fca:	f001 fce7 	bl	801a99c <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018fce:	4b53      	ldr	r3, [pc, #332]	; (801911c <RadioIrqProcess+0x2b8>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d036      	beq.n	8019044 <RadioIrqProcess+0x1e0>
 8018fd6:	4b51      	ldr	r3, [pc, #324]	; (801911c <RadioIrqProcess+0x2b8>)
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	689b      	ldr	r3, [r3, #8]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	d031      	beq.n	8019044 <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 8018fe0:	4b4c      	ldr	r3, [pc, #304]	; (8019114 <RadioIrqProcess+0x2b0>)
 8018fe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018fe6:	2b01      	cmp	r3, #1
 8018fe8:	d10e      	bne.n	8019008 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8018fea:	4b4c      	ldr	r3, [pc, #304]	; (801911c <RadioIrqProcess+0x2b8>)
 8018fec:	681b      	ldr	r3, [r3, #0]
 8018fee:	689c      	ldr	r4, [r3, #8]
 8018ff0:	79fb      	ldrb	r3, [r7, #7]
 8018ff2:	b299      	uxth	r1, r3
 8018ff4:	4b47      	ldr	r3, [pc, #284]	; (8019114 <RadioIrqProcess+0x2b0>)
 8018ff6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8018ffa:	b21a      	sxth	r2, r3
 8018ffc:	4b45      	ldr	r3, [pc, #276]	; (8019114 <RadioIrqProcess+0x2b0>)
 8018ffe:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8019002:	4848      	ldr	r0, [pc, #288]	; (8019124 <RadioIrqProcess+0x2c0>)
 8019004:	47a0      	blx	r4
                break;
 8019006:	e01e      	b.n	8019046 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8019008:	4b42      	ldr	r3, [pc, #264]	; (8019114 <RadioIrqProcess+0x2b0>)
 801900a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801900c:	463a      	mov	r2, r7
 801900e:	4611      	mov	r1, r2
 8019010:	4618      	mov	r0, r3
 8019012:	f001 ff47 	bl	801aea4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8019016:	4b41      	ldr	r3, [pc, #260]	; (801911c <RadioIrqProcess+0x2b8>)
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	689c      	ldr	r4, [r3, #8]
 801901c:	79fb      	ldrb	r3, [r7, #7]
 801901e:	b299      	uxth	r1, r3
 8019020:	4b3c      	ldr	r3, [pc, #240]	; (8019114 <RadioIrqProcess+0x2b0>)
 8019022:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 8019026:	b218      	sxth	r0, r3
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801902e:	4a3f      	ldr	r2, [pc, #252]	; (801912c <RadioIrqProcess+0x2c8>)
 8019030:	fb82 c203 	smull	ip, r2, r2, r3
 8019034:	1192      	asrs	r2, r2, #6
 8019036:	17db      	asrs	r3, r3, #31
 8019038:	1ad3      	subs	r3, r2, r3
 801903a:	b25b      	sxtb	r3, r3
 801903c:	4602      	mov	r2, r0
 801903e:	4839      	ldr	r0, [pc, #228]	; (8019124 <RadioIrqProcess+0x2c0>)
 8019040:	47a0      	blx	r4
                break;
 8019042:	e000      	b.n	8019046 <RadioIrqProcess+0x1e2>
        }
 8019044:	bf00      	nop
        break;
 8019046:	e118      	b.n	801927a <RadioIrqProcess+0x416>
        SUBGRF_SetStandby( STDBY_RC );
 8019048:	2000      	movs	r0, #0
 801904a:	f000 ff79 	bl	8019f40 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801904e:	4b33      	ldr	r3, [pc, #204]	; (801911c <RadioIrqProcess+0x2b8>)
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	f000 8104 	beq.w	8019260 <RadioIrqProcess+0x3fc>
 8019058:	4b30      	ldr	r3, [pc, #192]	; (801911c <RadioIrqProcess+0x2b8>)
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	699b      	ldr	r3, [r3, #24]
 801905e:	2b00      	cmp	r3, #0
 8019060:	f000 80fe 	beq.w	8019260 <RadioIrqProcess+0x3fc>
            RadioEvents->CadDone( false );
 8019064:	4b2d      	ldr	r3, [pc, #180]	; (801911c <RadioIrqProcess+0x2b8>)
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	699b      	ldr	r3, [r3, #24]
 801906a:	2000      	movs	r0, #0
 801906c:	4798      	blx	r3
        break;
 801906e:	e0f7      	b.n	8019260 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8019070:	2000      	movs	r0, #0
 8019072:	f000 ff65 	bl	8019f40 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8019076:	4b29      	ldr	r3, [pc, #164]	; (801911c <RadioIrqProcess+0x2b8>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	2b00      	cmp	r3, #0
 801907c:	f000 80f2 	beq.w	8019264 <RadioIrqProcess+0x400>
 8019080:	4b26      	ldr	r3, [pc, #152]	; (801911c <RadioIrqProcess+0x2b8>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	699b      	ldr	r3, [r3, #24]
 8019086:	2b00      	cmp	r3, #0
 8019088:	f000 80ec 	beq.w	8019264 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( true );
 801908c:	4b23      	ldr	r3, [pc, #140]	; (801911c <RadioIrqProcess+0x2b8>)
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	699b      	ldr	r3, [r3, #24]
 8019092:	2001      	movs	r0, #1
 8019094:	4798      	blx	r3
        break;
 8019096:	e0e5      	b.n	8019264 <RadioIrqProcess+0x400>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8019098:	4b25      	ldr	r3, [pc, #148]	; (8019130 <RadioIrqProcess+0x2cc>)
 801909a:	2201      	movs	r2, #1
 801909c:	2100      	movs	r1, #0
 801909e:	2002      	movs	r0, #2
 80190a0:	f002 ffaa 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80190a4:	f000 fe02 	bl	8019cac <SUBGRF_GetOperatingMode>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b04      	cmp	r3, #4
 80190ac:	d115      	bne.n	80190da <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 80190ae:	481a      	ldr	r0, [pc, #104]	; (8019118 <RadioIrqProcess+0x2b4>)
 80190b0:	f002 fd98 	bl	801bbe4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80190b4:	2000      	movs	r0, #0
 80190b6:	f000 ff43 	bl	8019f40 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80190ba:	4b18      	ldr	r3, [pc, #96]	; (801911c <RadioIrqProcess+0x2b8>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	f000 80d2 	beq.w	8019268 <RadioIrqProcess+0x404>
 80190c4:	4b15      	ldr	r3, [pc, #84]	; (801911c <RadioIrqProcess+0x2b8>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	685b      	ldr	r3, [r3, #4]
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	f000 80cc 	beq.w	8019268 <RadioIrqProcess+0x404>
                RadioEvents->TxTimeout( );
 80190d0:	4b12      	ldr	r3, [pc, #72]	; (801911c <RadioIrqProcess+0x2b8>)
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	4798      	blx	r3
        break;
 80190d8:	e0c6      	b.n	8019268 <RadioIrqProcess+0x404>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80190da:	f000 fde7 	bl	8019cac <SUBGRF_GetOperatingMode>
 80190de:	4603      	mov	r3, r0
 80190e0:	2b05      	cmp	r3, #5
 80190e2:	f040 80c1 	bne.w	8019268 <RadioIrqProcess+0x404>
            TimerStop( &RxTimeoutTimer );
 80190e6:	480e      	ldr	r0, [pc, #56]	; (8019120 <RadioIrqProcess+0x2bc>)
 80190e8:	f002 fd7c 	bl	801bbe4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80190ec:	2000      	movs	r0, #0
 80190ee:	f000 ff27 	bl	8019f40 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80190f2:	4b0a      	ldr	r3, [pc, #40]	; (801911c <RadioIrqProcess+0x2b8>)
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	f000 80b6 	beq.w	8019268 <RadioIrqProcess+0x404>
 80190fc:	4b07      	ldr	r3, [pc, #28]	; (801911c <RadioIrqProcess+0x2b8>)
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	68db      	ldr	r3, [r3, #12]
 8019102:	2b00      	cmp	r3, #0
 8019104:	f000 80b0 	beq.w	8019268 <RadioIrqProcess+0x404>
                RadioEvents->RxTimeout( );
 8019108:	4b04      	ldr	r3, [pc, #16]	; (801911c <RadioIrqProcess+0x2b8>)
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	68db      	ldr	r3, [r3, #12]
 801910e:	4798      	blx	r3
        break;
 8019110:	e0aa      	b.n	8019268 <RadioIrqProcess+0x404>
 8019112:	bf00      	nop
 8019114:	20001c2c 	.word	0x20001c2c
 8019118:	20001c88 	.word	0x20001c88
 801911c:	20001c28 	.word	0x20001c28
 8019120:	20001ca0 	.word	0x20001ca0
 8019124:	20001b28 	.word	0x20001b28
 8019128:	20001c50 	.word	0x20001c50
 801912c:	10624dd3 	.word	0x10624dd3
 8019130:	0801d000 	.word	0x0801d000
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8019134:	4b53      	ldr	r3, [pc, #332]	; (8019284 <RadioIrqProcess+0x420>)
 8019136:	2201      	movs	r2, #1
 8019138:	2100      	movs	r1, #0
 801913a:	2002      	movs	r0, #2
 801913c:	f002 ff5c 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8019140:	4b51      	ldr	r3, [pc, #324]	; (8019288 <RadioIrqProcess+0x424>)
 8019142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019144:	2b00      	cmp	r3, #0
 8019146:	f000 8091 	beq.w	801926c <RadioIrqProcess+0x408>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 801914a:	4a50      	ldr	r2, [pc, #320]	; (801928c <RadioIrqProcess+0x428>)
 801914c:	4b4e      	ldr	r3, [pc, #312]	; (8019288 <RadioIrqProcess+0x424>)
 801914e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019150:	0c1b      	lsrs	r3, r3, #16
 8019152:	b2db      	uxtb	r3, r3
 8019154:	4619      	mov	r1, r3
 8019156:	f640 1003 	movw	r0, #2307	; 0x903
 801915a:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 801915c:	4a4b      	ldr	r2, [pc, #300]	; (801928c <RadioIrqProcess+0x428>)
 801915e:	4b4a      	ldr	r3, [pc, #296]	; (8019288 <RadioIrqProcess+0x424>)
 8019160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019162:	0a1b      	lsrs	r3, r3, #8
 8019164:	b2db      	uxtb	r3, r3
 8019166:	4619      	mov	r1, r3
 8019168:	f640 1004 	movw	r0, #2308	; 0x904
 801916c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 801916e:	4a47      	ldr	r2, [pc, #284]	; (801928c <RadioIrqProcess+0x428>)
 8019170:	4b45      	ldr	r3, [pc, #276]	; (8019288 <RadioIrqProcess+0x424>)
 8019172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019174:	b2db      	uxtb	r3, r3
 8019176:	4619      	mov	r1, r3
 8019178:	f640 1005 	movw	r0, #2309	; 0x905
 801917c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801917e:	4c43      	ldr	r4, [pc, #268]	; (801928c <RadioIrqProcess+0x428>)
 8019180:	4b43      	ldr	r3, [pc, #268]	; (8019290 <RadioIrqProcess+0x42c>)
 8019182:	f640 1002 	movw	r0, #2306	; 0x902
 8019186:	4798      	blx	r3
 8019188:	4603      	mov	r3, r0
 801918a:	f043 0301 	orr.w	r3, r3, #1
 801918e:	b2db      	uxtb	r3, r3
 8019190:	4619      	mov	r1, r3
 8019192:	f640 1002 	movw	r0, #2306	; 0x902
 8019196:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8019198:	4b3b      	ldr	r3, [pc, #236]	; (8019288 <RadioIrqProcess+0x424>)
 801919a:	2200      	movs	r2, #0
 801919c:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801919e:	2300      	movs	r3, #0
 80191a0:	2200      	movs	r2, #0
 80191a2:	f240 2162 	movw	r1, #610	; 0x262
 80191a6:	f240 2062 	movw	r0, #610	; 0x262
 80191aa:	f001 f899 	bl	801a2e0 <SUBGRF_SetDioIrqParams>
        break;
 80191ae:	e05d      	b.n	801926c <RadioIrqProcess+0x408>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80191b0:	4b38      	ldr	r3, [pc, #224]	; (8019294 <RadioIrqProcess+0x430>)
 80191b2:	2201      	movs	r2, #1
 80191b4:	2100      	movs	r1, #0
 80191b6:	2002      	movs	r0, #2
 80191b8:	f002 ff1e 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80191bc:	f001 ff1d 	bl	801affa <RFW_Is_Init>
 80191c0:	4603      	mov	r3, r0
 80191c2:	2b01      	cmp	r3, #1
 80191c4:	d154      	bne.n	8019270 <RadioIrqProcess+0x40c>
            RFW_ReceivePayload( );
 80191c6:	f001 ff4e 	bl	801b066 <RFW_ReceivePayload>
        break;
 80191ca:	e051      	b.n	8019270 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80191cc:	4b32      	ldr	r3, [pc, #200]	; (8019298 <RadioIrqProcess+0x434>)
 80191ce:	2201      	movs	r2, #1
 80191d0:	2100      	movs	r1, #0
 80191d2:	2002      	movs	r0, #2
 80191d4:	f002 ff10 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80191d8:	e04f      	b.n	801927a <RadioIrqProcess+0x416>
        TimerStop( &RxTimeoutTimer );
 80191da:	4830      	ldr	r0, [pc, #192]	; (801929c <RadioIrqProcess+0x438>)
 80191dc:	f002 fd02 	bl	801bbe4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80191e0:	4b29      	ldr	r3, [pc, #164]	; (8019288 <RadioIrqProcess+0x424>)
 80191e2:	785b      	ldrb	r3, [r3, #1]
 80191e4:	f083 0301 	eor.w	r3, r3, #1
 80191e8:	b2db      	uxtb	r3, r3
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d002      	beq.n	80191f4 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 80191ee:	2000      	movs	r0, #0
 80191f0:	f000 fea6 	bl	8019f40 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80191f4:	4b2a      	ldr	r3, [pc, #168]	; (80192a0 <RadioIrqProcess+0x43c>)
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d03b      	beq.n	8019274 <RadioIrqProcess+0x410>
 80191fc:	4b28      	ldr	r3, [pc, #160]	; (80192a0 <RadioIrqProcess+0x43c>)
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	68db      	ldr	r3, [r3, #12]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d036      	beq.n	8019274 <RadioIrqProcess+0x410>
            RadioEvents->RxTimeout( );
 8019206:	4b26      	ldr	r3, [pc, #152]	; (80192a0 <RadioIrqProcess+0x43c>)
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	68db      	ldr	r3, [r3, #12]
 801920c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801920e:	4b25      	ldr	r3, [pc, #148]	; (80192a4 <RadioIrqProcess+0x440>)
 8019210:	2201      	movs	r2, #1
 8019212:	2100      	movs	r1, #0
 8019214:	2002      	movs	r0, #2
 8019216:	f002 feef 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801921a:	e02b      	b.n	8019274 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801921c:	4b22      	ldr	r3, [pc, #136]	; (80192a8 <RadioIrqProcess+0x444>)
 801921e:	2201      	movs	r2, #1
 8019220:	2100      	movs	r1, #0
 8019222:	2002      	movs	r0, #2
 8019224:	f002 fee8 	bl	801bff8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8019228:	4b17      	ldr	r3, [pc, #92]	; (8019288 <RadioIrqProcess+0x424>)
 801922a:	785b      	ldrb	r3, [r3, #1]
 801922c:	f083 0301 	eor.w	r3, r3, #1
 8019230:	b2db      	uxtb	r3, r3
 8019232:	2b00      	cmp	r3, #0
 8019234:	d002      	beq.n	801923c <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8019236:	2000      	movs	r0, #0
 8019238:	f000 fe82 	bl	8019f40 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801923c:	4b18      	ldr	r3, [pc, #96]	; (80192a0 <RadioIrqProcess+0x43c>)
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d019      	beq.n	8019278 <RadioIrqProcess+0x414>
 8019244:	4b16      	ldr	r3, [pc, #88]	; (80192a0 <RadioIrqProcess+0x43c>)
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	691b      	ldr	r3, [r3, #16]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d014      	beq.n	8019278 <RadioIrqProcess+0x414>
            RadioEvents->RxError( );
 801924e:	4b14      	ldr	r3, [pc, #80]	; (80192a0 <RadioIrqProcess+0x43c>)
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	691b      	ldr	r3, [r3, #16]
 8019254:	4798      	blx	r3
        break;
 8019256:	e00f      	b.n	8019278 <RadioIrqProcess+0x414>
        break;
 8019258:	bf00      	nop
 801925a:	e00e      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 801925c:	bf00      	nop
 801925e:	e00c      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 8019260:	bf00      	nop
 8019262:	e00a      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 8019264:	bf00      	nop
 8019266:	e008      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 8019268:	bf00      	nop
 801926a:	e006      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 801926c:	bf00      	nop
 801926e:	e004      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 8019270:	bf00      	nop
 8019272:	e002      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 8019274:	bf00      	nop
 8019276:	e000      	b.n	801927a <RadioIrqProcess+0x416>
        break;
 8019278:	bf00      	nop
    }
}
 801927a:	bf00      	nop
 801927c:	370c      	adds	r7, #12
 801927e:	46bd      	mov	sp, r7
 8019280:	bd90      	pop	{r4, r7, pc}
 8019282:	bf00      	nop
 8019284:	0801d014 	.word	0x0801d014
 8019288:	20001c2c 	.word	0x20001c2c
 801928c:	08018c73 	.word	0x08018c73
 8019290:	08018c97 	.word	0x08018c97
 8019294:	0801d020 	.word	0x0801d020
 8019298:	0801d02c 	.word	0x0801d02c
 801929c:	20001ca0 	.word	0x20001ca0
 80192a0:	20001c28 	.word	0x20001c28
 80192a4:	0801d038 	.word	0x0801d038
 80192a8:	0801d044 	.word	0x0801d044

080192ac <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80192b0:	4b09      	ldr	r3, [pc, #36]	; (80192d8 <RadioTxPrbs+0x2c>)
 80192b2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80192b6:	2101      	movs	r1, #1
 80192b8:	4618      	mov	r0, r3
 80192ba:	f001 fcb5 	bl	801ac28 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80192be:	4b07      	ldr	r3, [pc, #28]	; (80192dc <RadioTxPrbs+0x30>)
 80192c0:	212d      	movs	r1, #45	; 0x2d
 80192c2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80192c6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80192c8:	f000 fefd 	bl	801a0c6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80192cc:	4804      	ldr	r0, [pc, #16]	; (80192e0 <RadioTxPrbs+0x34>)
 80192ce:	f000 fe53 	bl	8019f78 <SUBGRF_SetTx>
}
 80192d2:	bf00      	nop
 80192d4:	bd80      	pop	{r7, pc}
 80192d6:	bf00      	nop
 80192d8:	20001c2c 	.word	0x20001c2c
 80192dc:	08018c73 	.word	0x08018c73
 80192e0:	000fffff 	.word	0x000fffff

080192e4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b084      	sub	sp, #16
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	4603      	mov	r3, r0
 80192ec:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80192ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192f2:	4618      	mov	r0, r3
 80192f4:	f001 fcc0 	bl	801ac78 <SUBGRF_SetRfTxPower>
 80192f8:	4603      	mov	r3, r0
 80192fa:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80192fc:	7bfb      	ldrb	r3, [r7, #15]
 80192fe:	2101      	movs	r1, #1
 8019300:	4618      	mov	r0, r3
 8019302:	f001 fc91 	bl	801ac28 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8019306:	f000 fed5 	bl	801a0b4 <SUBGRF_SetTxContinuousWave>
}
 801930a:	bf00      	nop
 801930c:	3710      	adds	r7, #16
 801930e:	46bd      	mov	sp, r7
 8019310:	bd80      	pop	{r7, pc}

08019312 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8019312:	b480      	push	{r7}
 8019314:	b089      	sub	sp, #36	; 0x24
 8019316:	af00      	add	r7, sp, #0
 8019318:	60f8      	str	r0, [r7, #12]
 801931a:	60b9      	str	r1, [r7, #8]
 801931c:	4613      	mov	r3, r2
 801931e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8019320:	2300      	movs	r3, #0
 8019322:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8019324:	2300      	movs	r3, #0
 8019326:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8019328:	2300      	movs	r3, #0
 801932a:	61bb      	str	r3, [r7, #24]
 801932c:	e011      	b.n	8019352 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801932e:	69bb      	ldr	r3, [r7, #24]
 8019330:	68ba      	ldr	r2, [r7, #8]
 8019332:	4413      	add	r3, r2
 8019334:	781a      	ldrb	r2, [r3, #0]
 8019336:	69bb      	ldr	r3, [r7, #24]
 8019338:	68b9      	ldr	r1, [r7, #8]
 801933a:	440b      	add	r3, r1
 801933c:	43d2      	mvns	r2, r2
 801933e:	b2d2      	uxtb	r2, r2
 8019340:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8019342:	69bb      	ldr	r3, [r7, #24]
 8019344:	68fa      	ldr	r2, [r7, #12]
 8019346:	4413      	add	r3, r2
 8019348:	2200      	movs	r2, #0
 801934a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801934c:	69bb      	ldr	r3, [r7, #24]
 801934e:	3301      	adds	r3, #1
 8019350:	61bb      	str	r3, [r7, #24]
 8019352:	79fb      	ldrb	r3, [r7, #7]
 8019354:	69ba      	ldr	r2, [r7, #24]
 8019356:	429a      	cmp	r2, r3
 8019358:	dbe9      	blt.n	801932e <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801935a:	2300      	movs	r3, #0
 801935c:	61bb      	str	r3, [r7, #24]
 801935e:	e049      	b.n	80193f4 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8019360:	69bb      	ldr	r3, [r7, #24]
 8019362:	425a      	negs	r2, r3
 8019364:	f003 0307 	and.w	r3, r3, #7
 8019368:	f002 0207 	and.w	r2, r2, #7
 801936c:	bf58      	it	pl
 801936e:	4253      	negpl	r3, r2
 8019370:	b2db      	uxtb	r3, r3
 8019372:	f1c3 0307 	rsb	r3, r3, #7
 8019376:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8019378:	69bb      	ldr	r3, [r7, #24]
 801937a:	2b00      	cmp	r3, #0
 801937c:	da00      	bge.n	8019380 <payload_integration+0x6e>
 801937e:	3307      	adds	r3, #7
 8019380:	10db      	asrs	r3, r3, #3
 8019382:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019384:	69bb      	ldr	r3, [r7, #24]
 8019386:	3301      	adds	r3, #1
 8019388:	425a      	negs	r2, r3
 801938a:	f003 0307 	and.w	r3, r3, #7
 801938e:	f002 0207 	and.w	r2, r2, #7
 8019392:	bf58      	it	pl
 8019394:	4253      	negpl	r3, r2
 8019396:	b2db      	uxtb	r3, r3
 8019398:	f1c3 0307 	rsb	r3, r3, #7
 801939c:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801939e:	69bb      	ldr	r3, [r7, #24]
 80193a0:	3301      	adds	r3, #1
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	da00      	bge.n	80193a8 <payload_integration+0x96>
 80193a6:	3307      	adds	r3, #7
 80193a8:	10db      	asrs	r3, r3, #3
 80193aa:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80193ac:	7dbb      	ldrb	r3, [r7, #22]
 80193ae:	68ba      	ldr	r2, [r7, #8]
 80193b0:	4413      	add	r3, r2
 80193b2:	781b      	ldrb	r3, [r3, #0]
 80193b4:	461a      	mov	r2, r3
 80193b6:	7dfb      	ldrb	r3, [r7, #23]
 80193b8:	fa42 f303 	asr.w	r3, r2, r3
 80193bc:	b2db      	uxtb	r3, r3
 80193be:	f003 0301 	and.w	r3, r3, #1
 80193c2:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80193c4:	7ffa      	ldrb	r2, [r7, #31]
 80193c6:	7cfb      	ldrb	r3, [r7, #19]
 80193c8:	4053      	eors	r3, r2
 80193ca:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80193cc:	7d3b      	ldrb	r3, [r7, #20]
 80193ce:	68fa      	ldr	r2, [r7, #12]
 80193d0:	4413      	add	r3, r2
 80193d2:	781b      	ldrb	r3, [r3, #0]
 80193d4:	b25a      	sxtb	r2, r3
 80193d6:	7ff9      	ldrb	r1, [r7, #31]
 80193d8:	7d7b      	ldrb	r3, [r7, #21]
 80193da:	fa01 f303 	lsl.w	r3, r1, r3
 80193de:	b25b      	sxtb	r3, r3
 80193e0:	4313      	orrs	r3, r2
 80193e2:	b259      	sxtb	r1, r3
 80193e4:	7d3b      	ldrb	r3, [r7, #20]
 80193e6:	68fa      	ldr	r2, [r7, #12]
 80193e8:	4413      	add	r3, r2
 80193ea:	b2ca      	uxtb	r2, r1
 80193ec:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 80193ee:	69bb      	ldr	r3, [r7, #24]
 80193f0:	3301      	adds	r3, #1
 80193f2:	61bb      	str	r3, [r7, #24]
 80193f4:	79fb      	ldrb	r3, [r7, #7]
 80193f6:	00db      	lsls	r3, r3, #3
 80193f8:	69ba      	ldr	r2, [r7, #24]
 80193fa:	429a      	cmp	r2, r3
 80193fc:	dbb0      	blt.n	8019360 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80193fe:	7ffb      	ldrb	r3, [r7, #31]
 8019400:	01db      	lsls	r3, r3, #7
 8019402:	b25a      	sxtb	r2, r3
 8019404:	7ffb      	ldrb	r3, [r7, #31]
 8019406:	019b      	lsls	r3, r3, #6
 8019408:	b25b      	sxtb	r3, r3
 801940a:	4313      	orrs	r3, r2
 801940c:	b25b      	sxtb	r3, r3
 801940e:	7ffa      	ldrb	r2, [r7, #31]
 8019410:	2a00      	cmp	r2, #0
 8019412:	d101      	bne.n	8019418 <payload_integration+0x106>
 8019414:	2220      	movs	r2, #32
 8019416:	e000      	b.n	801941a <payload_integration+0x108>
 8019418:	2200      	movs	r2, #0
 801941a:	4313      	orrs	r3, r2
 801941c:	b259      	sxtb	r1, r3
 801941e:	79fb      	ldrb	r3, [r7, #7]
 8019420:	68fa      	ldr	r2, [r7, #12]
 8019422:	4413      	add	r3, r2
 8019424:	b2ca      	uxtb	r2, r1
 8019426:	701a      	strb	r2, [r3, #0]
}
 8019428:	bf00      	nop
 801942a:	3724      	adds	r7, #36	; 0x24
 801942c:	46bd      	mov	sp, r7
 801942e:	bc80      	pop	{r7}
 8019430:	4770      	bx	lr
	...

08019434 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b08c      	sub	sp, #48	; 0x30
 8019438:	af00      	add	r7, sp, #0
 801943a:	60b9      	str	r1, [r7, #8]
 801943c:	607a      	str	r2, [r7, #4]
 801943e:	603b      	str	r3, [r7, #0]
 8019440:	4603      	mov	r3, r0
 8019442:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 8019444:	2300      	movs	r3, #0
 8019446:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 8019448:	2300      	movs	r3, #0
 801944a:	623b      	str	r3, [r7, #32]
 801944c:	2300      	movs	r3, #0
 801944e:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019450:	f001 fdcd 	bl	801afee <RFW_DeInit>

    if( rxContinuous != 0 )
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d001      	beq.n	801945e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801945a:	2300      	movs	r3, #0
 801945c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	2b00      	cmp	r3, #0
 8019462:	bf14      	ite	ne
 8019464:	2301      	movne	r3, #1
 8019466:	2300      	moveq	r3, #0
 8019468:	b2da      	uxtb	r2, r3
 801946a:	4ba3      	ldr	r3, [pc, #652]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801946c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801946e:	7bfb      	ldrb	r3, [r7, #15]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d003      	beq.n	801947c <RadioSetRxGenericConfig+0x48>
 8019474:	2b01      	cmp	r3, #1
 8019476:	f000 80dc 	beq.w	8019632 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801947a:	e194      	b.n	80197a6 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801947c:	68bb      	ldr	r3, [r7, #8]
 801947e:	689b      	ldr	r3, [r3, #8]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d003      	beq.n	801948c <RadioSetRxGenericConfig+0x58>
 8019484:	68bb      	ldr	r3, [r7, #8]
 8019486:	68db      	ldr	r3, [r3, #12]
 8019488:	2b00      	cmp	r3, #0
 801948a:	d102      	bne.n	8019492 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801948c:	f04f 33ff 	mov.w	r3, #4294967295
 8019490:	e18a      	b.n	80197a8 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8019492:	68bb      	ldr	r3, [r7, #8]
 8019494:	7f9b      	ldrb	r3, [r3, #30]
 8019496:	2b08      	cmp	r3, #8
 8019498:	d902      	bls.n	80194a0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801949a:	f04f 33ff 	mov.w	r3, #4294967295
 801949e:	e183      	b.n	80197a8 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	6919      	ldr	r1, [r3, #16]
 80194a4:	68bb      	ldr	r3, [r7, #8]
 80194a6:	7f9b      	ldrb	r3, [r3, #30]
 80194a8:	b29a      	uxth	r2, r3
 80194aa:	f107 0320 	add.w	r3, r7, #32
 80194ae:	4618      	mov	r0, r3
 80194b0:	f001 fe5a 	bl	801b168 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	bf14      	ite	ne
 80194bc:	2301      	movne	r3, #1
 80194be:	2300      	moveq	r3, #0
 80194c0:	b2db      	uxtb	r3, r3
 80194c2:	4618      	mov	r0, r3
 80194c4:	f000 fe08 	bl	801a0d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80194c8:	4b8b      	ldr	r3, [pc, #556]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80194ca:	2200      	movs	r2, #0
 80194cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	689b      	ldr	r3, [r3, #8]
 80194d4:	4a88      	ldr	r2, [pc, #544]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80194d6:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	f893 2020 	ldrb.w	r2, [r3, #32]
 80194de:	4b86      	ldr	r3, [pc, #536]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80194e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 80194e4:	68bb      	ldr	r3, [r7, #8]
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	4618      	mov	r0, r3
 80194ea:	f001 fcb3 	bl	801ae54 <SUBGRF_GetFskBandwidthRegValue>
 80194ee:	4603      	mov	r3, r0
 80194f0:	461a      	mov	r2, r3
 80194f2:	4b81      	ldr	r3, [pc, #516]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80194f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80194f8:	4b7f      	ldr	r3, [pc, #508]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80194fa:	2200      	movs	r2, #0
 80194fc:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	68db      	ldr	r3, [r3, #12]
 8019502:	b29b      	uxth	r3, r3
 8019504:	00db      	lsls	r3, r3, #3
 8019506:	b29a      	uxth	r2, r3
 8019508:	4b7b      	ldr	r3, [pc, #492]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801950a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801950c:	68bb      	ldr	r3, [r7, #8]
 801950e:	7fda      	ldrb	r2, [r3, #31]
 8019510:	4b79      	ldr	r3, [pc, #484]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 8019512:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	7f9b      	ldrb	r3, [r3, #30]
 8019518:	00db      	lsls	r3, r3, #3
 801951a:	b2da      	uxtb	r2, r3
 801951c:	4b76      	ldr	r3, [pc, #472]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801951e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8019520:	68bb      	ldr	r3, [r7, #8]
 8019522:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8019526:	4b74      	ldr	r3, [pc, #464]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 8019528:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801952a:	68bb      	ldr	r3, [r7, #8]
 801952c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019530:	2b00      	cmp	r3, #0
 8019532:	d105      	bne.n	8019540 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8019534:	68bb      	ldr	r3, [r7, #8]
 8019536:	695b      	ldr	r3, [r3, #20]
 8019538:	b2da      	uxtb	r2, r3
 801953a:	4b6f      	ldr	r3, [pc, #444]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801953c:	759a      	strb	r2, [r3, #22]
 801953e:	e00b      	b.n	8019558 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8019540:	68bb      	ldr	r3, [r7, #8]
 8019542:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019546:	2b02      	cmp	r3, #2
 8019548:	d103      	bne.n	8019552 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801954a:	4b6b      	ldr	r3, [pc, #428]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801954c:	22ff      	movs	r2, #255	; 0xff
 801954e:	759a      	strb	r2, [r3, #22]
 8019550:	e002      	b.n	8019558 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8019552:	4b69      	ldr	r3, [pc, #420]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 8019554:	22ff      	movs	r2, #255	; 0xff
 8019556:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801955e:	2b02      	cmp	r3, #2
 8019560:	d004      	beq.n	801956c <RadioSetRxGenericConfig+0x138>
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8019568:	2b02      	cmp	r3, #2
 801956a:	d12d      	bne.n	80195c8 <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019572:	2bf1      	cmp	r3, #241	; 0xf1
 8019574:	d00c      	beq.n	8019590 <RadioSetRxGenericConfig+0x15c>
 8019576:	68bb      	ldr	r3, [r7, #8]
 8019578:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801957c:	2bf2      	cmp	r3, #242	; 0xf2
 801957e:	d007      	beq.n	8019590 <RadioSetRxGenericConfig+0x15c>
 8019580:	68bb      	ldr	r3, [r7, #8]
 8019582:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8019586:	2b01      	cmp	r3, #1
 8019588:	d002      	beq.n	8019590 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801958a:	f04f 33ff 	mov.w	r3, #4294967295
 801958e:	e10b      	b.n	80197a8 <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8019590:	2300      	movs	r3, #0
 8019592:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8019594:	68bb      	ldr	r3, [r7, #8]
 8019596:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8019598:	4b58      	ldr	r3, [pc, #352]	; (80196fc <RadioSetRxGenericConfig+0x2c8>)
 801959a:	6819      	ldr	r1, [r3, #0]
 801959c:	f107 0314 	add.w	r3, r7, #20
 80195a0:	4a57      	ldr	r2, [pc, #348]	; (8019700 <RadioSetRxGenericConfig+0x2cc>)
 80195a2:	4618      	mov	r0, r3
 80195a4:	f001 fd16 	bl	801afd4 <RFW_Init>
 80195a8:	4603      	mov	r3, r0
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d002      	beq.n	80195b4 <RadioSetRxGenericConfig+0x180>
            return -1;
 80195ae:	f04f 33ff 	mov.w	r3, #4294967295
 80195b2:	e0f9      	b.n	80197a8 <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80195b4:	4b50      	ldr	r3, [pc, #320]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80195b6:	2200      	movs	r2, #0
 80195b8:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80195ba:	4b4f      	ldr	r3, [pc, #316]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80195bc:	2201      	movs	r2, #1
 80195be:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80195c0:	4b4d      	ldr	r3, [pc, #308]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80195c2:	2200      	movs	r2, #0
 80195c4:	755a      	strb	r2, [r3, #21]
        {
 80195c6:	e00e      	b.n	80195e6 <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80195c8:	68bb      	ldr	r3, [r7, #8]
 80195ca:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80195ce:	4b4a      	ldr	r3, [pc, #296]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80195d0:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80195d2:	68bb      	ldr	r3, [r7, #8]
 80195d4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80195d8:	4b47      	ldr	r3, [pc, #284]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80195da:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 80195dc:	68bb      	ldr	r3, [r7, #8]
 80195de:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80195e2:	4b45      	ldr	r3, [pc, #276]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80195e4:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80195e6:	f7ff fa48 	bl	8018a7a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80195ea:	2000      	movs	r0, #0
 80195ec:	f7fe fbf2 	bl	8017dd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195f0:	4844      	ldr	r0, [pc, #272]	; (8019704 <RadioSetRxGenericConfig+0x2d0>)
 80195f2:	f001 f80b 	bl	801a60c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195f6:	4844      	ldr	r0, [pc, #272]	; (8019708 <RadioSetRxGenericConfig+0x2d4>)
 80195f8:	f001 f8da 	bl	801a7b0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80195fc:	f107 0320 	add.w	r3, r7, #32
 8019600:	4618      	mov	r0, r3
 8019602:	f000 fba2 	bl	8019d4a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	8b9b      	ldrh	r3, [r3, #28]
 801960a:	4618      	mov	r0, r3
 801960c:	f000 fbec 	bl	8019de8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019610:	68bb      	ldr	r3, [r7, #8]
 8019612:	8b1b      	ldrh	r3, [r3, #24]
 8019614:	4618      	mov	r0, r3
 8019616:	f000 fbc7 	bl	8019da8 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801961a:	683b      	ldr	r3, [r7, #0]
 801961c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8019620:	fb03 f202 	mul.w	r2, r3, r2
 8019624:	68bb      	ldr	r3, [r7, #8]
 8019626:	689b      	ldr	r3, [r3, #8]
 8019628:	fbb2 f3f3 	udiv	r3, r2, r3
 801962c:	4a32      	ldr	r2, [pc, #200]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801962e:	6093      	str	r3, [r2, #8]
        break;
 8019630:	e0b9      	b.n	80197a6 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 8019632:	68bb      	ldr	r3, [r7, #8]
 8019634:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8019636:	2b00      	cmp	r3, #0
 8019638:	d102      	bne.n	8019640 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801963a:	f04f 33ff 	mov.w	r3, #4294967295
 801963e:	e0b3      	b.n	80197a8 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8019646:	2b01      	cmp	r3, #1
 8019648:	d104      	bne.n	8019654 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801964a:	68bb      	ldr	r3, [r7, #8]
 801964c:	695b      	ldr	r3, [r3, #20]
 801964e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019652:	e002      	b.n	801965a <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 8019654:	23ff      	movs	r3, #255	; 0xff
 8019656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801965e:	2b00      	cmp	r3, #0
 8019660:	bf14      	ite	ne
 8019662:	2301      	movne	r3, #1
 8019664:	2300      	moveq	r3, #0
 8019666:	b2db      	uxtb	r3, r3
 8019668:	4618      	mov	r0, r3
 801966a:	f000 fd35 	bl	801a0d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801966e:	683b      	ldr	r3, [r7, #0]
 8019670:	b2db      	uxtb	r3, r3
 8019672:	4618      	mov	r0, r3
 8019674:	f000 fd3f 	bl	801a0f6 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019678:	4b1f      	ldr	r3, [pc, #124]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 801967a:	2201      	movs	r2, #1
 801967c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019680:	68bb      	ldr	r3, [r7, #8]
 8019682:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8019686:	4b1c      	ldr	r3, [pc, #112]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 8019688:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8019692:	4b19      	ldr	r3, [pc, #100]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 8019694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019698:	68bb      	ldr	r3, [r7, #8]
 801969a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801969e:	4b16      	ldr	r3, [pc, #88]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80196a0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80196a4:	68bb      	ldr	r3, [r7, #8]
 80196a6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80196aa:	2b02      	cmp	r3, #2
 80196ac:	d010      	beq.n	80196d0 <RadioSetRxGenericConfig+0x29c>
 80196ae:	2b02      	cmp	r3, #2
 80196b0:	dc2c      	bgt.n	801970c <RadioSetRxGenericConfig+0x2d8>
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d002      	beq.n	80196bc <RadioSetRxGenericConfig+0x288>
 80196b6:	2b01      	cmp	r3, #1
 80196b8:	d005      	beq.n	80196c6 <RadioSetRxGenericConfig+0x292>
            break;
 80196ba:	e027      	b.n	801970c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80196bc:	4b0e      	ldr	r3, [pc, #56]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80196be:	2200      	movs	r2, #0
 80196c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80196c4:	e023      	b.n	801970e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80196c6:	4b0c      	ldr	r3, [pc, #48]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80196c8:	2201      	movs	r2, #1
 80196ca:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80196ce:	e01e      	b.n	801970e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80196d0:	68bb      	ldr	r3, [r7, #8]
 80196d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80196d6:	2b0b      	cmp	r3, #11
 80196d8:	d004      	beq.n	80196e4 <RadioSetRxGenericConfig+0x2b0>
 80196da:	68bb      	ldr	r3, [r7, #8]
 80196dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80196e0:	2b0c      	cmp	r3, #12
 80196e2:	d104      	bne.n	80196ee <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80196e4:	4b04      	ldr	r3, [pc, #16]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80196e6:	2201      	movs	r2, #1
 80196e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80196ec:	e00f      	b.n	801970e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80196ee:	4b02      	ldr	r3, [pc, #8]	; (80196f8 <RadioSetRxGenericConfig+0x2c4>)
 80196f0:	2200      	movs	r2, #0
 80196f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80196f6:	e00a      	b.n	801970e <RadioSetRxGenericConfig+0x2da>
 80196f8:	20001c2c 	.word	0x20001c2c
 80196fc:	20001c28 	.word	0x20001c28
 8019700:	20001ca0 	.word	0x20001ca0
 8019704:	20001c64 	.word	0x20001c64
 8019708:	20001c3a 	.word	0x20001c3a
            break;
 801970c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801970e:	4b28      	ldr	r3, [pc, #160]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 8019710:	2201      	movs	r2, #1
 8019712:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8019718:	4b25      	ldr	r3, [pc, #148]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 801971a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801971c:	68bb      	ldr	r3, [r7, #8]
 801971e:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8019722:	4b23      	ldr	r3, [pc, #140]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 8019724:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8019726:	4a22      	ldr	r2, [pc, #136]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 8019728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801972c:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8019734:	4b1e      	ldr	r3, [pc, #120]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 8019736:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801973a:	68bb      	ldr	r3, [r7, #8]
 801973c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8019740:	4b1b      	ldr	r3, [pc, #108]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 8019742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8019746:	f7ff f998 	bl	8018a7a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801974a:	2001      	movs	r0, #1
 801974c:	f7fe fb42 	bl	8017dd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019750:	4818      	ldr	r0, [pc, #96]	; (80197b4 <RadioSetRxGenericConfig+0x380>)
 8019752:	f000 ff5b 	bl	801a60c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019756:	4818      	ldr	r0, [pc, #96]	; (80197b8 <RadioSetRxGenericConfig+0x384>)
 8019758:	f001 f82a 	bl	801a7b0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801975c:	4b14      	ldr	r3, [pc, #80]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 801975e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8019762:	2b01      	cmp	r3, #1
 8019764:	d10d      	bne.n	8019782 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8019766:	f240 7036 	movw	r0, #1846	; 0x736
 801976a:	f001 f97d 	bl	801aa68 <SUBGRF_ReadRegister>
 801976e:	4603      	mov	r3, r0
 8019770:	f023 0304 	bic.w	r3, r3, #4
 8019774:	b2db      	uxtb	r3, r3
 8019776:	4619      	mov	r1, r3
 8019778:	f240 7036 	movw	r0, #1846	; 0x736
 801977c:	f001 f960 	bl	801aa40 <SUBGRF_WriteRegister>
 8019780:	e00c      	b.n	801979c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8019782:	f240 7036 	movw	r0, #1846	; 0x736
 8019786:	f001 f96f 	bl	801aa68 <SUBGRF_ReadRegister>
 801978a:	4603      	mov	r3, r0
 801978c:	f043 0304 	orr.w	r3, r3, #4
 8019790:	b2db      	uxtb	r3, r3
 8019792:	4619      	mov	r1, r3
 8019794:	f240 7036 	movw	r0, #1846	; 0x736
 8019798:	f001 f952 	bl	801aa40 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801979c:	4b04      	ldr	r3, [pc, #16]	; (80197b0 <RadioSetRxGenericConfig+0x37c>)
 801979e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197a2:	609a      	str	r2, [r3, #8]
        break;
 80197a4:	bf00      	nop
    }
    return status;
 80197a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80197a8:	4618      	mov	r0, r3
 80197aa:	3730      	adds	r7, #48	; 0x30
 80197ac:	46bd      	mov	sp, r7
 80197ae:	bd80      	pop	{r7, pc}
 80197b0:	20001c2c 	.word	0x20001c2c
 80197b4:	20001c64 	.word	0x20001c64
 80197b8:	20001c3a 	.word	0x20001c3a

080197bc <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b08e      	sub	sp, #56	; 0x38
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	60b9      	str	r1, [r7, #8]
 80197c4:	607b      	str	r3, [r7, #4]
 80197c6:	4603      	mov	r3, r0
 80197c8:	73fb      	strb	r3, [r7, #15]
 80197ca:	4613      	mov	r3, r2
 80197cc:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 80197ce:	2300      	movs	r3, #0
 80197d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80197d2:	2300      	movs	r3, #0
 80197d4:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80197d6:	f001 fc0a 	bl	801afee <RFW_DeInit>
    switch( modem )
 80197da:	7bfb      	ldrb	r3, [r7, #15]
 80197dc:	2b03      	cmp	r3, #3
 80197de:	f200 8204 	bhi.w	8019bea <RadioSetTxGenericConfig+0x42e>
 80197e2:	a201      	add	r2, pc, #4	; (adr r2, 80197e8 <RadioSetTxGenericConfig+0x2c>)
 80197e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197e8:	0801996d 	.word	0x0801996d
 80197ec:	08019ab5 	.word	0x08019ab5
 80197f0:	08019bad 	.word	0x08019bad
 80197f4:	080197f9 	.word	0x080197f9
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	7c9b      	ldrb	r3, [r3, #18]
 80197fc:	2b08      	cmp	r3, #8
 80197fe:	d902      	bls.n	8019806 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8019800:	f04f 33ff 	mov.w	r3, #4294967295
 8019804:	e206      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 8019806:	68bb      	ldr	r3, [r7, #8]
 8019808:	6899      	ldr	r1, [r3, #8]
 801980a:	68bb      	ldr	r3, [r7, #8]
 801980c:	7c9b      	ldrb	r3, [r3, #18]
 801980e:	b29a      	uxth	r2, r3
 8019810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019814:	4618      	mov	r0, r3
 8019816:	f001 fca7 	bl	801b168 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801981a:	68bb      	ldr	r3, [r7, #8]
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d102      	bne.n	8019828 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 8019822:	f04f 33ff 	mov.w	r3, #4294967295
 8019826:	e1f5      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f242 7210 	movw	r2, #10000	; 0x2710
 8019830:	4293      	cmp	r3, r2
 8019832:	d813      	bhi.n	801985c <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 8019834:	2302      	movs	r3, #2
 8019836:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801983a:	4b99      	ldr	r3, [pc, #612]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801983c:	2203      	movs	r2, #3
 801983e:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8019840:	4b97      	ldr	r3, [pc, #604]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019842:	2203      	movs	r2, #3
 8019844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019848:	68bb      	ldr	r3, [r7, #8]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	4a94      	ldr	r2, [pc, #592]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801984e:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019850:	68bb      	ldr	r3, [r7, #8]
 8019852:	7cda      	ldrb	r2, [r3, #19]
 8019854:	4b92      	ldr	r3, [pc, #584]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801985a:	e017      	b.n	801988c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 801985c:	2300      	movs	r3, #0
 801985e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8019862:	4b8f      	ldr	r3, [pc, #572]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019864:	2200      	movs	r2, #0
 8019866:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019868:	4b8d      	ldr	r3, [pc, #564]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801986a:	2200      	movs	r2, #0
 801986c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4a8a      	ldr	r2, [pc, #552]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019876:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019878:	68bb      	ldr	r3, [r7, #8]
 801987a:	7cda      	ldrb	r2, [r3, #19]
 801987c:	4b88      	ldr	r3, [pc, #544]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801987e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8019882:	68bb      	ldr	r3, [r7, #8]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	089b      	lsrs	r3, r3, #2
 8019888:	4a85      	ldr	r2, [pc, #532]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801988a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	685b      	ldr	r3, [r3, #4]
 8019890:	b29b      	uxth	r3, r3
 8019892:	00db      	lsls	r3, r3, #3
 8019894:	b29a      	uxth	r2, r3
 8019896:	4b82      	ldr	r3, [pc, #520]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019898:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801989a:	4b81      	ldr	r3, [pc, #516]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801989c:	2204      	movs	r2, #4
 801989e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 80198a0:	68bb      	ldr	r3, [r7, #8]
 80198a2:	7c9b      	ldrb	r3, [r3, #18]
 80198a4:	00db      	lsls	r3, r3, #3
 80198a6:	b2da      	uxtb	r2, r3
 80198a8:	4b7d      	ldr	r3, [pc, #500]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80198aa:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80198ac:	4b7c      	ldr	r3, [pc, #496]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80198ae:	2200      	movs	r2, #0
 80198b0:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80198b2:	68bb      	ldr	r3, [r7, #8]
 80198b4:	7d9b      	ldrb	r3, [r3, #22]
 80198b6:	2b02      	cmp	r3, #2
 80198b8:	d003      	beq.n	80198c2 <RadioSetTxGenericConfig+0x106>
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	7d1b      	ldrb	r3, [r3, #20]
 80198be:	2b02      	cmp	r3, #2
 80198c0:	d12b      	bne.n	801991a <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80198c2:	68bb      	ldr	r3, [r7, #8]
 80198c4:	7d5b      	ldrb	r3, [r3, #21]
 80198c6:	2bf1      	cmp	r3, #241	; 0xf1
 80198c8:	d00a      	beq.n	80198e0 <RadioSetTxGenericConfig+0x124>
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	7d5b      	ldrb	r3, [r3, #21]
 80198ce:	2bf2      	cmp	r3, #242	; 0xf2
 80198d0:	d006      	beq.n	80198e0 <RadioSetTxGenericConfig+0x124>
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	7d5b      	ldrb	r3, [r3, #21]
 80198d6:	2b01      	cmp	r3, #1
 80198d8:	d002      	beq.n	80198e0 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 80198da:	f04f 33ff 	mov.w	r3, #4294967295
 80198de:	e199      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 80198e0:	68bb      	ldr	r3, [r7, #8]
 80198e2:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 80198e4:	2301      	movs	r3, #1
 80198e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80198ea:	4b6e      	ldr	r3, [pc, #440]	; (8019aa4 <RadioSetTxGenericConfig+0x2e8>)
 80198ec:	6819      	ldr	r1, [r3, #0]
 80198ee:	f107 0320 	add.w	r3, r7, #32
 80198f2:	4a6d      	ldr	r2, [pc, #436]	; (8019aa8 <RadioSetTxGenericConfig+0x2ec>)
 80198f4:	4618      	mov	r0, r3
 80198f6:	f001 fb6d 	bl	801afd4 <RFW_Init>
 80198fa:	4603      	mov	r3, r0
 80198fc:	2b00      	cmp	r3, #0
 80198fe:	d002      	beq.n	8019906 <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8019900:	f04f 33ff 	mov.w	r3, #4294967295
 8019904:	e186      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019906:	4b66      	ldr	r3, [pc, #408]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019908:	2200      	movs	r2, #0
 801990a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 801990c:	4b64      	ldr	r3, [pc, #400]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801990e:	2201      	movs	r2, #1
 8019910:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019912:	4b63      	ldr	r3, [pc, #396]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019914:	2200      	movs	r2, #0
 8019916:	755a      	strb	r2, [r3, #21]
        {
 8019918:	e00b      	b.n	8019932 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801991a:	68bb      	ldr	r3, [r7, #8]
 801991c:	7d5a      	ldrb	r2, [r3, #21]
 801991e:	4b60      	ldr	r3, [pc, #384]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019920:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8019922:	68bb      	ldr	r3, [r7, #8]
 8019924:	7d9a      	ldrb	r2, [r3, #22]
 8019926:	4b5e      	ldr	r3, [pc, #376]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019928:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801992a:	68bb      	ldr	r3, [r7, #8]
 801992c:	7d1a      	ldrb	r2, [r3, #20]
 801992e:	4b5c      	ldr	r3, [pc, #368]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019930:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019932:	f7ff f8a2 	bl	8018a7a <RadioStandby>
        RadioSetModem( radio_modem );
 8019936:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801993a:	4618      	mov	r0, r3
 801993c:	f7fe fa4a 	bl	8017dd4 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019940:	485a      	ldr	r0, [pc, #360]	; (8019aac <RadioSetTxGenericConfig+0x2f0>)
 8019942:	f000 fe63 	bl	801a60c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019946:	485a      	ldr	r0, [pc, #360]	; (8019ab0 <RadioSetTxGenericConfig+0x2f4>)
 8019948:	f000 ff32 	bl	801a7b0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801994c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019950:	4618      	mov	r0, r3
 8019952:	f000 f9fa 	bl	8019d4a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	8a1b      	ldrh	r3, [r3, #16]
 801995a:	4618      	mov	r0, r3
 801995c:	f000 fa44 	bl	8019de8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 8019960:	68bb      	ldr	r3, [r7, #8]
 8019962:	899b      	ldrh	r3, [r3, #12]
 8019964:	4618      	mov	r0, r3
 8019966:	f000 fa1f 	bl	8019da8 <SUBGRF_SetCrcPolynomial>
        break;
 801996a:	e13f      	b.n	8019bec <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801996c:	68bb      	ldr	r3, [r7, #8]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	2b00      	cmp	r3, #0
 8019972:	d102      	bne.n	801997a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8019974:	f04f 33ff 	mov.w	r3, #4294967295
 8019978:	e14c      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801997a:	68bb      	ldr	r3, [r7, #8]
 801997c:	7c9b      	ldrb	r3, [r3, #18]
 801997e:	2b08      	cmp	r3, #8
 8019980:	d902      	bls.n	8019988 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8019982:	f04f 33ff 	mov.w	r3, #4294967295
 8019986:	e145      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 8019988:	68bb      	ldr	r3, [r7, #8]
 801998a:	6899      	ldr	r1, [r3, #8]
 801998c:	68bb      	ldr	r3, [r7, #8]
 801998e:	7c9b      	ldrb	r3, [r3, #18]
 8019990:	b29a      	uxth	r2, r3
 8019992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019996:	4618      	mov	r0, r3
 8019998:	f001 fbe6 	bl	801b168 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801999c:	4b40      	ldr	r3, [pc, #256]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 801999e:	2200      	movs	r2, #0
 80199a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80199a4:	68bb      	ldr	r3, [r7, #8]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	4a3d      	ldr	r2, [pc, #244]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199aa:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 80199ac:	68bb      	ldr	r3, [r7, #8]
 80199ae:	7cda      	ldrb	r2, [r3, #19]
 80199b0:	4b3b      	ldr	r3, [pc, #236]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 80199b6:	68bb      	ldr	r3, [r7, #8]
 80199b8:	699b      	ldr	r3, [r3, #24]
 80199ba:	4a39      	ldr	r2, [pc, #228]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199bc:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80199be:	4b38      	ldr	r3, [pc, #224]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199c0:	2200      	movs	r2, #0
 80199c2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80199c4:	68bb      	ldr	r3, [r7, #8]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	b29b      	uxth	r3, r3
 80199ca:	00db      	lsls	r3, r3, #3
 80199cc:	b29a      	uxth	r2, r3
 80199ce:	4b34      	ldr	r3, [pc, #208]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199d0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80199d2:	4b33      	ldr	r3, [pc, #204]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199d4:	2204      	movs	r2, #4
 80199d6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80199d8:	68bb      	ldr	r3, [r7, #8]
 80199da:	7c9b      	ldrb	r3, [r3, #18]
 80199dc:	00db      	lsls	r3, r3, #3
 80199de:	b2da      	uxtb	r2, r3
 80199e0:	4b2f      	ldr	r3, [pc, #188]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199e2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80199e4:	4b2e      	ldr	r3, [pc, #184]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 80199e6:	2200      	movs	r2, #0
 80199e8:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80199ea:	68bb      	ldr	r3, [r7, #8]
 80199ec:	7d9b      	ldrb	r3, [r3, #22]
 80199ee:	2b02      	cmp	r3, #2
 80199f0:	d003      	beq.n	80199fa <RadioSetTxGenericConfig+0x23e>
 80199f2:	68bb      	ldr	r3, [r7, #8]
 80199f4:	7d1b      	ldrb	r3, [r3, #20]
 80199f6:	2b02      	cmp	r3, #2
 80199f8:	d12a      	bne.n	8019a50 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80199fa:	68bb      	ldr	r3, [r7, #8]
 80199fc:	7d5b      	ldrb	r3, [r3, #21]
 80199fe:	2bf1      	cmp	r3, #241	; 0xf1
 8019a00:	d00a      	beq.n	8019a18 <RadioSetTxGenericConfig+0x25c>
 8019a02:	68bb      	ldr	r3, [r7, #8]
 8019a04:	7d5b      	ldrb	r3, [r3, #21]
 8019a06:	2bf2      	cmp	r3, #242	; 0xf2
 8019a08:	d006      	beq.n	8019a18 <RadioSetTxGenericConfig+0x25c>
 8019a0a:	68bb      	ldr	r3, [r7, #8]
 8019a0c:	7d5b      	ldrb	r3, [r3, #21]
 8019a0e:	2b01      	cmp	r3, #1
 8019a10:	d002      	beq.n	8019a18 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 8019a12:	f04f 33ff 	mov.w	r3, #4294967295
 8019a16:	e0fd      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 8019a18:	2301      	movs	r3, #1
 8019a1a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 8019a1c:	68bb      	ldr	r3, [r7, #8]
 8019a1e:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019a20:	4b20      	ldr	r3, [pc, #128]	; (8019aa4 <RadioSetTxGenericConfig+0x2e8>)
 8019a22:	6819      	ldr	r1, [r3, #0]
 8019a24:	f107 0314 	add.w	r3, r7, #20
 8019a28:	4a1f      	ldr	r2, [pc, #124]	; (8019aa8 <RadioSetTxGenericConfig+0x2ec>)
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f001 fad2 	bl	801afd4 <RFW_Init>
 8019a30:	4603      	mov	r3, r0
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d002      	beq.n	8019a3c <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 8019a36:	f04f 33ff 	mov.w	r3, #4294967295
 8019a3a:	e0eb      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019a3c:	4b18      	ldr	r3, [pc, #96]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019a3e:	2200      	movs	r2, #0
 8019a40:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8019a42:	4b17      	ldr	r3, [pc, #92]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019a44:	2201      	movs	r2, #1
 8019a46:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019a48:	4b15      	ldr	r3, [pc, #84]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	755a      	strb	r2, [r3, #21]
        {
 8019a4e:	e00b      	b.n	8019a68 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8019a50:	68bb      	ldr	r3, [r7, #8]
 8019a52:	7d5a      	ldrb	r2, [r3, #21]
 8019a54:	4b12      	ldr	r3, [pc, #72]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019a56:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019a58:	68bb      	ldr	r3, [r7, #8]
 8019a5a:	7d9a      	ldrb	r2, [r3, #22]
 8019a5c:	4b10      	ldr	r3, [pc, #64]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019a5e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8019a60:	68bb      	ldr	r3, [r7, #8]
 8019a62:	7d1a      	ldrb	r2, [r3, #20]
 8019a64:	4b0e      	ldr	r3, [pc, #56]	; (8019aa0 <RadioSetTxGenericConfig+0x2e4>)
 8019a66:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 8019a68:	f7ff f807 	bl	8018a7a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019a6c:	2000      	movs	r0, #0
 8019a6e:	f7fe f9b1 	bl	8017dd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019a72:	480e      	ldr	r0, [pc, #56]	; (8019aac <RadioSetTxGenericConfig+0x2f0>)
 8019a74:	f000 fdca 	bl	801a60c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019a78:	480d      	ldr	r0, [pc, #52]	; (8019ab0 <RadioSetTxGenericConfig+0x2f4>)
 8019a7a:	f000 fe99 	bl	801a7b0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019a82:	4618      	mov	r0, r3
 8019a84:	f000 f961 	bl	8019d4a <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	8a1b      	ldrh	r3, [r3, #16]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f000 f9ab 	bl	8019de8 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8019a92:	68bb      	ldr	r3, [r7, #8]
 8019a94:	899b      	ldrh	r3, [r3, #12]
 8019a96:	4618      	mov	r0, r3
 8019a98:	f000 f986 	bl	8019da8 <SUBGRF_SetCrcPolynomial>
        break;
 8019a9c:	e0a6      	b.n	8019bec <RadioSetTxGenericConfig+0x430>
 8019a9e:	bf00      	nop
 8019aa0:	20001c2c 	.word	0x20001c2c
 8019aa4:	20001c28 	.word	0x20001c28
 8019aa8:	20001c88 	.word	0x20001c88
 8019aac:	20001c64 	.word	0x20001c64
 8019ab0:	20001c3a 	.word	0x20001c3a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019ab4:	4b59      	ldr	r3, [pc, #356]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019ab6:	2201      	movs	r2, #1
 8019ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019abc:	68bb      	ldr	r3, [r7, #8]
 8019abe:	781a      	ldrb	r2, [r3, #0]
 8019ac0:	4b56      	ldr	r3, [pc, #344]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019ac2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019ac6:	68bb      	ldr	r3, [r7, #8]
 8019ac8:	785a      	ldrb	r2, [r3, #1]
 8019aca:	4b54      	ldr	r3, [pc, #336]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	789a      	ldrb	r2, [r3, #2]
 8019ad4:	4b51      	ldr	r3, [pc, #324]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019ad6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	78db      	ldrb	r3, [r3, #3]
 8019ade:	2b02      	cmp	r3, #2
 8019ae0:	d010      	beq.n	8019b04 <RadioSetTxGenericConfig+0x348>
 8019ae2:	2b02      	cmp	r3, #2
 8019ae4:	dc20      	bgt.n	8019b28 <RadioSetTxGenericConfig+0x36c>
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d002      	beq.n	8019af0 <RadioSetTxGenericConfig+0x334>
 8019aea:	2b01      	cmp	r3, #1
 8019aec:	d005      	beq.n	8019afa <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8019aee:	e01b      	b.n	8019b28 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019af0:	4b4a      	ldr	r3, [pc, #296]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019af2:	2200      	movs	r2, #0
 8019af4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019af8:	e017      	b.n	8019b2a <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019afa:	4b48      	ldr	r3, [pc, #288]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019afc:	2201      	movs	r2, #1
 8019afe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019b02:	e012      	b.n	8019b2a <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019b04:	68bb      	ldr	r3, [r7, #8]
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	2b0b      	cmp	r3, #11
 8019b0a:	d003      	beq.n	8019b14 <RadioSetTxGenericConfig+0x358>
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	781b      	ldrb	r3, [r3, #0]
 8019b10:	2b0c      	cmp	r3, #12
 8019b12:	d104      	bne.n	8019b1e <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019b14:	4b41      	ldr	r3, [pc, #260]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b16:	2201      	movs	r2, #1
 8019b18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019b1c:	e005      	b.n	8019b2a <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019b1e:	4b3f      	ldr	r3, [pc, #252]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b20:	2200      	movs	r2, #0
 8019b22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8019b26:	e000      	b.n	8019b2a <RadioSetTxGenericConfig+0x36e>
            break;
 8019b28:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019b2a:	4b3c      	ldr	r3, [pc, #240]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b2c:	2201      	movs	r2, #1
 8019b2e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8019b30:	68bb      	ldr	r3, [r7, #8]
 8019b32:	889a      	ldrh	r2, [r3, #4]
 8019b34:	4b39      	ldr	r3, [pc, #228]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b36:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8019b38:	68bb      	ldr	r3, [r7, #8]
 8019b3a:	799a      	ldrb	r2, [r3, #6]
 8019b3c:	4b37      	ldr	r3, [pc, #220]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b3e:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8019b40:	68bb      	ldr	r3, [r7, #8]
 8019b42:	79da      	ldrb	r2, [r3, #7]
 8019b44:	4b35      	ldr	r3, [pc, #212]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b46:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8019b4a:	68bb      	ldr	r3, [r7, #8]
 8019b4c:	7a1a      	ldrb	r2, [r3, #8]
 8019b4e:	4b33      	ldr	r3, [pc, #204]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 8019b54:	f7fe ff91 	bl	8018a7a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8019b58:	2001      	movs	r0, #1
 8019b5a:	f7fe f93b 	bl	8017dd4 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019b5e:	4830      	ldr	r0, [pc, #192]	; (8019c20 <RadioSetTxGenericConfig+0x464>)
 8019b60:	f000 fd54 	bl	801a60c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019b64:	482f      	ldr	r0, [pc, #188]	; (8019c24 <RadioSetTxGenericConfig+0x468>)
 8019b66:	f000 fe23 	bl	801a7b0 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8019b6a:	4b2c      	ldr	r3, [pc, #176]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019b6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019b70:	2b06      	cmp	r3, #6
 8019b72:	d10d      	bne.n	8019b90 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019b74:	f640 0089 	movw	r0, #2185	; 0x889
 8019b78:	f000 ff76 	bl	801aa68 <SUBGRF_ReadRegister>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	f023 0304 	bic.w	r3, r3, #4
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	4619      	mov	r1, r3
 8019b86:	f640 0089 	movw	r0, #2185	; 0x889
 8019b8a:	f000 ff59 	bl	801aa40 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8019b8e:	e02d      	b.n	8019bec <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8019b90:	f640 0089 	movw	r0, #2185	; 0x889
 8019b94:	f000 ff68 	bl	801aa68 <SUBGRF_ReadRegister>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	f043 0304 	orr.w	r3, r3, #4
 8019b9e:	b2db      	uxtb	r3, r3
 8019ba0:	4619      	mov	r1, r3
 8019ba2:	f640 0089 	movw	r0, #2185	; 0x889
 8019ba6:	f000 ff4b 	bl	801aa40 <SUBGRF_WriteRegister>
        break;
 8019baa:	e01f      	b.n	8019bec <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d004      	beq.n	8019bbe <RadioSetTxGenericConfig+0x402>
 8019bb4:	68bb      	ldr	r3, [r7, #8]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019bbc:	d902      	bls.n	8019bc4 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8019bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8019bc2:	e027      	b.n	8019c14 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8019bc4:	2003      	movs	r0, #3
 8019bc6:	f7fe f905 	bl	8017dd4 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019bca:	4b14      	ldr	r3, [pc, #80]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019bcc:	2202      	movs	r2, #2
 8019bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8019bd2:	68bb      	ldr	r3, [r7, #8]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	4a11      	ldr	r2, [pc, #68]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019bd8:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019bda:	4b10      	ldr	r3, [pc, #64]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019bdc:	2216      	movs	r2, #22
 8019bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019be2:	480f      	ldr	r0, [pc, #60]	; (8019c20 <RadioSetTxGenericConfig+0x464>)
 8019be4:	f000 fd12 	bl	801a60c <SUBGRF_SetModulationParams>
        break;
 8019be8:	e000      	b.n	8019bec <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8019bea:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019bec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	f001 f841 	bl	801ac78 <SUBGRF_SetRfTxPower>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	461a      	mov	r2, r3
 8019bfa:	4b08      	ldr	r3, [pc, #32]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019bfc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8019c00:	4b06      	ldr	r3, [pc, #24]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019c02:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8019c06:	4618      	mov	r0, r3
 8019c08:	f001 fa05 	bl	801b016 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019c0c:	4a03      	ldr	r2, [pc, #12]	; (8019c1c <RadioSetTxGenericConfig+0x460>)
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	6053      	str	r3, [r2, #4]
    return 0;
 8019c12:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019c14:	4618      	mov	r0, r3
 8019c16:	3738      	adds	r7, #56	; 0x38
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	bd80      	pop	{r7, pc}
 8019c1c:	20001c2c 	.word	0x20001c2c
 8019c20:	20001c64 	.word	0x20001c64
 8019c24:	20001c3a 	.word	0x20001c3a

08019c28 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8019c28:	b580      	push	{r7, lr}
 8019c2a:	b084      	sub	sp, #16
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d002      	beq.n	8019c3c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8019c36:	4a1a      	ldr	r2, [pc, #104]	; (8019ca0 <SUBGRF_Init+0x78>)
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8019c3c:	f7e8 f8f4 	bl	8001e28 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019c40:	2002      	movs	r0, #2
 8019c42:	f001 f8e5 	bl	801ae10 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019c46:	4b17      	ldr	r3, [pc, #92]	; (8019ca4 <SUBGRF_Init+0x7c>)
 8019c48:	2200      	movs	r2, #0
 8019c4a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	f000 f977 	bl	8019f40 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8019c52:	f7f1 fd81 	bl	800b758 <RBI_IsTCXO>
 8019c56:	4603      	mov	r3, r0
 8019c58:	2b01      	cmp	r3, #1
 8019c5a:	d10e      	bne.n	8019c7a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019c5c:	2140      	movs	r1, #64	; 0x40
 8019c5e:	2001      	movs	r0, #1
 8019c60:	f000 fb78 	bl	801a354 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019c64:	2100      	movs	r1, #0
 8019c66:	f640 1011 	movw	r0, #2321	; 0x911
 8019c6a:	f000 fee9 	bl	801aa40 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8019c6e:	237f      	movs	r3, #127	; 0x7f
 8019c70:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8019c72:	7b38      	ldrb	r0, [r7, #12]
 8019c74:	f000 fa85 	bl	801a182 <SUBGRF_Calibrate>
 8019c78:	e009      	b.n	8019c8e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019c7a:	2120      	movs	r1, #32
 8019c7c:	f640 1011 	movw	r0, #2321	; 0x911
 8019c80:	f000 fede 	bl	801aa40 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019c84:	2120      	movs	r1, #32
 8019c86:	f640 1012 	movw	r0, #2322	; 0x912
 8019c8a:	f000 fed9 	bl	801aa40 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8019c8e:	f7f1 fd47 	bl	800b720 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019c92:	4b05      	ldr	r3, [pc, #20]	; (8019ca8 <SUBGRF_Init+0x80>)
 8019c94:	2201      	movs	r2, #1
 8019c96:	701a      	strb	r2, [r3, #0]
}
 8019c98:	bf00      	nop
 8019c9a:	3710      	adds	r7, #16
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}
 8019ca0:	20001cc4 	.word	0x20001cc4
 8019ca4:	20001cc0 	.word	0x20001cc0
 8019ca8:	20001cb8 	.word	0x20001cb8

08019cac <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019cac:	b480      	push	{r7}
 8019cae:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019cb0:	4b02      	ldr	r3, [pc, #8]	; (8019cbc <SUBGRF_GetOperatingMode+0x10>)
 8019cb2:	781b      	ldrb	r3, [r3, #0]
}
 8019cb4:	4618      	mov	r0, r3
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bc80      	pop	{r7}
 8019cba:	4770      	bx	lr
 8019cbc:	20001cb8 	.word	0x20001cb8

08019cc0 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b082      	sub	sp, #8
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	6078      	str	r0, [r7, #4]
 8019cc8:	460b      	mov	r3, r1
 8019cca:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019ccc:	78fb      	ldrb	r3, [r7, #3]
 8019cce:	461a      	mov	r2, r3
 8019cd0:	6879      	ldr	r1, [r7, #4]
 8019cd2:	2000      	movs	r0, #0
 8019cd4:	f000 ff20 	bl	801ab18 <SUBGRF_WriteBuffer>
}
 8019cd8:	bf00      	nop
 8019cda:	3708      	adds	r7, #8
 8019cdc:	46bd      	mov	sp, r7
 8019cde:	bd80      	pop	{r7, pc}

08019ce0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b086      	sub	sp, #24
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	4613      	mov	r3, r2
 8019cec:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8019cee:	2300      	movs	r3, #0
 8019cf0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8019cf2:	f107 0317 	add.w	r3, r7, #23
 8019cf6:	4619      	mov	r1, r3
 8019cf8:	68b8      	ldr	r0, [r7, #8]
 8019cfa:	f000 fe23 	bl	801a944 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8019cfe:	68bb      	ldr	r3, [r7, #8]
 8019d00:	781b      	ldrb	r3, [r3, #0]
 8019d02:	79fa      	ldrb	r2, [r7, #7]
 8019d04:	429a      	cmp	r2, r3
 8019d06:	d201      	bcs.n	8019d0c <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8019d08:	2301      	movs	r3, #1
 8019d0a:	e007      	b.n	8019d1c <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8019d0c:	7df8      	ldrb	r0, [r7, #23]
 8019d0e:	68bb      	ldr	r3, [r7, #8]
 8019d10:	781b      	ldrb	r3, [r3, #0]
 8019d12:	461a      	mov	r2, r3
 8019d14:	68f9      	ldr	r1, [r7, #12]
 8019d16:	f000 ff21 	bl	801ab5c <SUBGRF_ReadBuffer>

    return 0;
 8019d1a:	2300      	movs	r3, #0
}
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	3718      	adds	r7, #24
 8019d20:	46bd      	mov	sp, r7
 8019d22:	bd80      	pop	{r7, pc}

08019d24 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b084      	sub	sp, #16
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	60f8      	str	r0, [r7, #12]
 8019d2c:	460b      	mov	r3, r1
 8019d2e:	607a      	str	r2, [r7, #4]
 8019d30:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8019d32:	7afb      	ldrb	r3, [r7, #11]
 8019d34:	4619      	mov	r1, r3
 8019d36:	68f8      	ldr	r0, [r7, #12]
 8019d38:	f7ff ffc2 	bl	8019cc0 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019d3c:	6878      	ldr	r0, [r7, #4]
 8019d3e:	f000 f91b 	bl	8019f78 <SUBGRF_SetTx>
}
 8019d42:	bf00      	nop
 8019d44:	3710      	adds	r7, #16
 8019d46:	46bd      	mov	sp, r7
 8019d48:	bd80      	pop	{r7, pc}

08019d4a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019d4a:	b580      	push	{r7, lr}
 8019d4c:	b082      	sub	sp, #8
 8019d4e:	af00      	add	r7, sp, #0
 8019d50:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019d52:	2208      	movs	r2, #8
 8019d54:	6879      	ldr	r1, [r7, #4]
 8019d56:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8019d5a:	f000 fe99 	bl	801aa90 <SUBGRF_WriteRegisters>
    return 0;
 8019d5e:	2300      	movs	r3, #0
}
 8019d60:	4618      	mov	r0, r3
 8019d62:	3708      	adds	r7, #8
 8019d64:	46bd      	mov	sp, r7
 8019d66:	bd80      	pop	{r7, pc}

08019d68 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b084      	sub	sp, #16
 8019d6c:	af00      	add	r7, sp, #0
 8019d6e:	4603      	mov	r3, r0
 8019d70:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019d72:	88fb      	ldrh	r3, [r7, #6]
 8019d74:	0a1b      	lsrs	r3, r3, #8
 8019d76:	b29b      	uxth	r3, r3
 8019d78:	b2db      	uxtb	r3, r3
 8019d7a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019d7c:	88fb      	ldrh	r3, [r7, #6]
 8019d7e:	b2db      	uxtb	r3, r3
 8019d80:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019d82:	f000 fb6b 	bl	801a45c <SUBGRF_GetPacketType>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d108      	bne.n	8019d9e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019d8c:	f107 030c 	add.w	r3, r7, #12
 8019d90:	2202      	movs	r2, #2
 8019d92:	4619      	mov	r1, r3
 8019d94:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8019d98:	f000 fe7a 	bl	801aa90 <SUBGRF_WriteRegisters>
            break;
 8019d9c:	e000      	b.n	8019da0 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019d9e:	bf00      	nop
    }
}
 8019da0:	bf00      	nop
 8019da2:	3710      	adds	r7, #16
 8019da4:	46bd      	mov	sp, r7
 8019da6:	bd80      	pop	{r7, pc}

08019da8 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019da8:	b580      	push	{r7, lr}
 8019daa:	b084      	sub	sp, #16
 8019dac:	af00      	add	r7, sp, #0
 8019dae:	4603      	mov	r3, r0
 8019db0:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019db2:	88fb      	ldrh	r3, [r7, #6]
 8019db4:	0a1b      	lsrs	r3, r3, #8
 8019db6:	b29b      	uxth	r3, r3
 8019db8:	b2db      	uxtb	r3, r3
 8019dba:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019dbc:	88fb      	ldrh	r3, [r7, #6]
 8019dbe:	b2db      	uxtb	r3, r3
 8019dc0:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019dc2:	f000 fb4b 	bl	801a45c <SUBGRF_GetPacketType>
 8019dc6:	4603      	mov	r3, r0
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d108      	bne.n	8019dde <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019dcc:	f107 030c 	add.w	r3, r7, #12
 8019dd0:	2202      	movs	r2, #2
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	f240 60be 	movw	r0, #1726	; 0x6be
 8019dd8:	f000 fe5a 	bl	801aa90 <SUBGRF_WriteRegisters>
            break;
 8019ddc:	e000      	b.n	8019de0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019dde:	bf00      	nop
    }
}
 8019de0:	bf00      	nop
 8019de2:	3710      	adds	r7, #16
 8019de4:	46bd      	mov	sp, r7
 8019de6:	bd80      	pop	{r7, pc}

08019de8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b084      	sub	sp, #16
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	4603      	mov	r3, r0
 8019df0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019df2:	2300      	movs	r3, #0
 8019df4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019df6:	f000 fb31 	bl	801a45c <SUBGRF_GetPacketType>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d121      	bne.n	8019e44 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019e00:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019e04:	f000 fe30 	bl	801aa68 <SUBGRF_ReadRegister>
 8019e08:	4603      	mov	r3, r0
 8019e0a:	f023 0301 	bic.w	r3, r3, #1
 8019e0e:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019e10:	88fb      	ldrh	r3, [r7, #6]
 8019e12:	0a1b      	lsrs	r3, r3, #8
 8019e14:	b29b      	uxth	r3, r3
 8019e16:	b25b      	sxtb	r3, r3
 8019e18:	f003 0301 	and.w	r3, r3, #1
 8019e1c:	b25a      	sxtb	r2, r3
 8019e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e22:	4313      	orrs	r3, r2
 8019e24:	b25b      	sxtb	r3, r3
 8019e26:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019e28:	7bfb      	ldrb	r3, [r7, #15]
 8019e2a:	4619      	mov	r1, r3
 8019e2c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8019e30:	f000 fe06 	bl	801aa40 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019e34:	88fb      	ldrh	r3, [r7, #6]
 8019e36:	b2db      	uxtb	r3, r3
 8019e38:	4619      	mov	r1, r3
 8019e3a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8019e3e:	f000 fdff 	bl	801aa40 <SUBGRF_WriteRegister>
            break;
 8019e42:	e000      	b.n	8019e46 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019e44:	bf00      	nop
    }
}
 8019e46:	bf00      	nop
 8019e48:	3710      	adds	r7, #16
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bd80      	pop	{r7, pc}

08019e4e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019e4e:	b580      	push	{r7, lr}
 8019e50:	b082      	sub	sp, #8
 8019e52:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019e54:	2300      	movs	r3, #0
 8019e56:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019e5c:	2300      	movs	r3, #0
 8019e5e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019e60:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019e64:	f000 fe00 	bl	801aa68 <SUBGRF_ReadRegister>
 8019e68:	4603      	mov	r3, r0
 8019e6a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019e6c:	79fb      	ldrb	r3, [r7, #7]
 8019e6e:	f023 0301 	bic.w	r3, r3, #1
 8019e72:	b2db      	uxtb	r3, r3
 8019e74:	4619      	mov	r1, r3
 8019e76:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019e7a:	f000 fde1 	bl	801aa40 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019e7e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019e82:	f000 fdf1 	bl	801aa68 <SUBGRF_ReadRegister>
 8019e86:	4603      	mov	r3, r0
 8019e88:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019e8a:	79bb      	ldrb	r3, [r7, #6]
 8019e8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e90:	b2db      	uxtb	r3, r3
 8019e92:	4619      	mov	r1, r3
 8019e94:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019e98:	f000 fdd2 	bl	801aa40 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019e9c:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8019ea0:	f000 f88a 	bl	8019fb8 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019ea4:	463b      	mov	r3, r7
 8019ea6:	2204      	movs	r2, #4
 8019ea8:	4619      	mov	r1, r3
 8019eaa:	f640 0019 	movw	r0, #2073	; 0x819
 8019eae:	f000 fe11 	bl	801aad4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019eb2:	2000      	movs	r0, #0
 8019eb4:	f000 f844 	bl	8019f40 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019eb8:	79fb      	ldrb	r3, [r7, #7]
 8019eba:	4619      	mov	r1, r3
 8019ebc:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8019ec0:	f000 fdbe 	bl	801aa40 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019ec4:	79bb      	ldrb	r3, [r7, #6]
 8019ec6:	4619      	mov	r1, r3
 8019ec8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8019ecc:	f000 fdb8 	bl	801aa40 <SUBGRF_WriteRegister>

    return number;
 8019ed0:	683b      	ldr	r3, [r7, #0]
}
 8019ed2:	4618      	mov	r0, r3
 8019ed4:	3708      	adds	r7, #8
 8019ed6:	46bd      	mov	sp, r7
 8019ed8:	bd80      	pop	{r7, pc}
	...

08019edc <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b084      	sub	sp, #16
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019ee4:	2000      	movs	r0, #0
 8019ee6:	f7f1 fc22 	bl	800b72e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019eea:	2002      	movs	r0, #2
 8019eec:	f000 ff90 	bl	801ae10 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019ef0:	793b      	ldrb	r3, [r7, #4]
 8019ef2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019ef6:	b2db      	uxtb	r3, r3
 8019ef8:	009b      	lsls	r3, r3, #2
 8019efa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019efc:	793b      	ldrb	r3, [r7, #4]
 8019efe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019f02:	b2db      	uxtb	r3, r3
 8019f04:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019f06:	b25b      	sxtb	r3, r3
 8019f08:	4313      	orrs	r3, r2
 8019f0a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019f0c:	793b      	ldrb	r3, [r7, #4]
 8019f0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019f12:	b2db      	uxtb	r3, r3
 8019f14:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019f16:	4313      	orrs	r3, r2
 8019f18:	b25b      	sxtb	r3, r3
 8019f1a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019f1c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019f1e:	f107 030f 	add.w	r3, r7, #15
 8019f22:	2201      	movs	r2, #1
 8019f24:	4619      	mov	r1, r3
 8019f26:	2084      	movs	r0, #132	; 0x84
 8019f28:	f000 fe3a 	bl	801aba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019f2c:	4b03      	ldr	r3, [pc, #12]	; (8019f3c <SUBGRF_SetSleep+0x60>)
 8019f2e:	2200      	movs	r2, #0
 8019f30:	701a      	strb	r2, [r3, #0]
}
 8019f32:	bf00      	nop
 8019f34:	3710      	adds	r7, #16
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	20001cb8 	.word	0x20001cb8

08019f40 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b082      	sub	sp, #8
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	4603      	mov	r3, r0
 8019f48:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019f4a:	1dfb      	adds	r3, r7, #7
 8019f4c:	2201      	movs	r2, #1
 8019f4e:	4619      	mov	r1, r3
 8019f50:	2080      	movs	r0, #128	; 0x80
 8019f52:	f000 fe25 	bl	801aba0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019f56:	79fb      	ldrb	r3, [r7, #7]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d103      	bne.n	8019f64 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019f5c:	4b05      	ldr	r3, [pc, #20]	; (8019f74 <SUBGRF_SetStandby+0x34>)
 8019f5e:	2201      	movs	r2, #1
 8019f60:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019f62:	e002      	b.n	8019f6a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019f64:	4b03      	ldr	r3, [pc, #12]	; (8019f74 <SUBGRF_SetStandby+0x34>)
 8019f66:	2202      	movs	r2, #2
 8019f68:	701a      	strb	r2, [r3, #0]
}
 8019f6a:	bf00      	nop
 8019f6c:	3708      	adds	r7, #8
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bd80      	pop	{r7, pc}
 8019f72:	bf00      	nop
 8019f74:	20001cb8 	.word	0x20001cb8

08019f78 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019f78:	b580      	push	{r7, lr}
 8019f7a:	b084      	sub	sp, #16
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019f80:	4b0c      	ldr	r3, [pc, #48]	; (8019fb4 <SUBGRF_SetTx+0x3c>)
 8019f82:	2204      	movs	r2, #4
 8019f84:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	0c1b      	lsrs	r3, r3, #16
 8019f8a:	b2db      	uxtb	r3, r3
 8019f8c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	0a1b      	lsrs	r3, r3, #8
 8019f92:	b2db      	uxtb	r3, r3
 8019f94:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	b2db      	uxtb	r3, r3
 8019f9a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019f9c:	f107 030c 	add.w	r3, r7, #12
 8019fa0:	2203      	movs	r2, #3
 8019fa2:	4619      	mov	r1, r3
 8019fa4:	2083      	movs	r0, #131	; 0x83
 8019fa6:	f000 fdfb 	bl	801aba0 <SUBGRF_WriteCommand>
}
 8019faa:	bf00      	nop
 8019fac:	3710      	adds	r7, #16
 8019fae:	46bd      	mov	sp, r7
 8019fb0:	bd80      	pop	{r7, pc}
 8019fb2:	bf00      	nop
 8019fb4:	20001cb8 	.word	0x20001cb8

08019fb8 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b084      	sub	sp, #16
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019fc0:	4b0c      	ldr	r3, [pc, #48]	; (8019ff4 <SUBGRF_SetRx+0x3c>)
 8019fc2:	2205      	movs	r2, #5
 8019fc4:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	0c1b      	lsrs	r3, r3, #16
 8019fca:	b2db      	uxtb	r3, r3
 8019fcc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	0a1b      	lsrs	r3, r3, #8
 8019fd2:	b2db      	uxtb	r3, r3
 8019fd4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	b2db      	uxtb	r3, r3
 8019fda:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019fdc:	f107 030c 	add.w	r3, r7, #12
 8019fe0:	2203      	movs	r2, #3
 8019fe2:	4619      	mov	r1, r3
 8019fe4:	2082      	movs	r0, #130	; 0x82
 8019fe6:	f000 fddb 	bl	801aba0 <SUBGRF_WriteCommand>
}
 8019fea:	bf00      	nop
 8019fec:	3710      	adds	r7, #16
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	bf00      	nop
 8019ff4:	20001cb8 	.word	0x20001cb8

08019ff8 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019ff8:	b580      	push	{r7, lr}
 8019ffa:	b084      	sub	sp, #16
 8019ffc:	af00      	add	r7, sp, #0
 8019ffe:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801a000:	4b0e      	ldr	r3, [pc, #56]	; (801a03c <SUBGRF_SetRxBoosted+0x44>)
 801a002:	2205      	movs	r2, #5
 801a004:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801a006:	2197      	movs	r1, #151	; 0x97
 801a008:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801a00c:	f000 fd18 	bl	801aa40 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	0c1b      	lsrs	r3, r3, #16
 801a014:	b2db      	uxtb	r3, r3
 801a016:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	0a1b      	lsrs	r3, r3, #8
 801a01c:	b2db      	uxtb	r3, r3
 801a01e:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	b2db      	uxtb	r3, r3
 801a024:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801a026:	f107 030c 	add.w	r3, r7, #12
 801a02a:	2203      	movs	r2, #3
 801a02c:	4619      	mov	r1, r3
 801a02e:	2082      	movs	r0, #130	; 0x82
 801a030:	f000 fdb6 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a034:	bf00      	nop
 801a036:	3710      	adds	r7, #16
 801a038:	46bd      	mov	sp, r7
 801a03a:	bd80      	pop	{r7, pc}
 801a03c:	20001cb8 	.word	0x20001cb8

0801a040 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801a040:	b580      	push	{r7, lr}
 801a042:	b084      	sub	sp, #16
 801a044:	af00      	add	r7, sp, #0
 801a046:	6078      	str	r0, [r7, #4]
 801a048:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	0c1b      	lsrs	r3, r3, #16
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	0a1b      	lsrs	r3, r3, #8
 801a056:	b2db      	uxtb	r3, r3
 801a058:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801a060:	683b      	ldr	r3, [r7, #0]
 801a062:	0c1b      	lsrs	r3, r3, #16
 801a064:	b2db      	uxtb	r3, r3
 801a066:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	0a1b      	lsrs	r3, r3, #8
 801a06c:	b2db      	uxtb	r3, r3
 801a06e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801a070:	683b      	ldr	r3, [r7, #0]
 801a072:	b2db      	uxtb	r3, r3
 801a074:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801a076:	f107 0308 	add.w	r3, r7, #8
 801a07a:	2206      	movs	r2, #6
 801a07c:	4619      	mov	r1, r3
 801a07e:	2094      	movs	r0, #148	; 0x94
 801a080:	f000 fd8e 	bl	801aba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801a084:	4b03      	ldr	r3, [pc, #12]	; (801a094 <SUBGRF_SetRxDutyCycle+0x54>)
 801a086:	2206      	movs	r2, #6
 801a088:	701a      	strb	r2, [r3, #0]
}
 801a08a:	bf00      	nop
 801a08c:	3710      	adds	r7, #16
 801a08e:	46bd      	mov	sp, r7
 801a090:	bd80      	pop	{r7, pc}
 801a092:	bf00      	nop
 801a094:	20001cb8 	.word	0x20001cb8

0801a098 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801a09c:	2200      	movs	r2, #0
 801a09e:	2100      	movs	r1, #0
 801a0a0:	20c5      	movs	r0, #197	; 0xc5
 801a0a2:	f000 fd7d 	bl	801aba0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801a0a6:	4b02      	ldr	r3, [pc, #8]	; (801a0b0 <SUBGRF_SetCad+0x18>)
 801a0a8:	2207      	movs	r2, #7
 801a0aa:	701a      	strb	r2, [r3, #0]
}
 801a0ac:	bf00      	nop
 801a0ae:	bd80      	pop	{r7, pc}
 801a0b0:	20001cb8 	.word	0x20001cb8

0801a0b4 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801a0b8:	2200      	movs	r2, #0
 801a0ba:	2100      	movs	r1, #0
 801a0bc:	20d1      	movs	r0, #209	; 0xd1
 801a0be:	f000 fd6f 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a0c2:	bf00      	nop
 801a0c4:	bd80      	pop	{r7, pc}

0801a0c6 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801a0c6:	b580      	push	{r7, lr}
 801a0c8:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	2100      	movs	r1, #0
 801a0ce:	20d2      	movs	r0, #210	; 0xd2
 801a0d0:	f000 fd66 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a0d4:	bf00      	nop
 801a0d6:	bd80      	pop	{r7, pc}

0801a0d8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b082      	sub	sp, #8
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	4603      	mov	r3, r0
 801a0e0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801a0e2:	1dfb      	adds	r3, r7, #7
 801a0e4:	2201      	movs	r2, #1
 801a0e6:	4619      	mov	r1, r3
 801a0e8:	209f      	movs	r0, #159	; 0x9f
 801a0ea:	f000 fd59 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a0ee:	bf00      	nop
 801a0f0:	3708      	adds	r7, #8
 801a0f2:	46bd      	mov	sp, r7
 801a0f4:	bd80      	pop	{r7, pc}

0801a0f6 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801a0f6:	b580      	push	{r7, lr}
 801a0f8:	b084      	sub	sp, #16
 801a0fa:	af00      	add	r7, sp, #0
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801a100:	1dfb      	adds	r3, r7, #7
 801a102:	2201      	movs	r2, #1
 801a104:	4619      	mov	r1, r3
 801a106:	20a0      	movs	r0, #160	; 0xa0
 801a108:	f000 fd4a 	bl	801aba0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801a10c:	79fb      	ldrb	r3, [r7, #7]
 801a10e:	2b3f      	cmp	r3, #63	; 0x3f
 801a110:	d91c      	bls.n	801a14c <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801a112:	79fb      	ldrb	r3, [r7, #7]
 801a114:	085b      	lsrs	r3, r3, #1
 801a116:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801a118:	2300      	movs	r3, #0
 801a11a:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801a11c:	2300      	movs	r3, #0
 801a11e:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801a120:	e005      	b.n	801a12e <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801a122:	7bfb      	ldrb	r3, [r7, #15]
 801a124:	089b      	lsrs	r3, r3, #2
 801a126:	73fb      	strb	r3, [r7, #15]
            exp++;
 801a128:	7bbb      	ldrb	r3, [r7, #14]
 801a12a:	3301      	adds	r3, #1
 801a12c:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801a12e:	7bfb      	ldrb	r3, [r7, #15]
 801a130:	2b1f      	cmp	r3, #31
 801a132:	d8f6      	bhi.n	801a122 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801a134:	7bfb      	ldrb	r3, [r7, #15]
 801a136:	00db      	lsls	r3, r3, #3
 801a138:	b2da      	uxtb	r2, r3
 801a13a:	7bbb      	ldrb	r3, [r7, #14]
 801a13c:	4413      	add	r3, r2
 801a13e:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801a140:	7b7b      	ldrb	r3, [r7, #13]
 801a142:	4619      	mov	r1, r3
 801a144:	f240 7006 	movw	r0, #1798	; 0x706
 801a148:	f000 fc7a 	bl	801aa40 <SUBGRF_WriteRegister>
    }
}
 801a14c:	bf00      	nop
 801a14e:	3710      	adds	r7, #16
 801a150:	46bd      	mov	sp, r7
 801a152:	bd80      	pop	{r7, pc}

0801a154 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801a154:	b580      	push	{r7, lr}
 801a156:	b082      	sub	sp, #8
 801a158:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801a15a:	f7f1 fb04 	bl	800b766 <RBI_IsDCDC>
 801a15e:	4603      	mov	r3, r0
 801a160:	2b01      	cmp	r3, #1
 801a162:	d102      	bne.n	801a16a <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801a164:	2301      	movs	r3, #1
 801a166:	71fb      	strb	r3, [r7, #7]
 801a168:	e001      	b.n	801a16e <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801a16a:	2300      	movs	r3, #0
 801a16c:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801a16e:	1dfb      	adds	r3, r7, #7
 801a170:	2201      	movs	r2, #1
 801a172:	4619      	mov	r1, r3
 801a174:	2096      	movs	r0, #150	; 0x96
 801a176:	f000 fd13 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a17a:	bf00      	nop
 801a17c:	3708      	adds	r7, #8
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}

0801a182 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801a182:	b580      	push	{r7, lr}
 801a184:	b084      	sub	sp, #16
 801a186:	af00      	add	r7, sp, #0
 801a188:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a18a:	793b      	ldrb	r3, [r7, #4]
 801a18c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801a190:	b2db      	uxtb	r3, r3
 801a192:	019b      	lsls	r3, r3, #6
 801a194:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a196:	793b      	ldrb	r3, [r7, #4]
 801a198:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801a19c:	b2db      	uxtb	r3, r3
 801a19e:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a1a0:	b25b      	sxtb	r3, r3
 801a1a2:	4313      	orrs	r3, r2
 801a1a4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a1a6:	793b      	ldrb	r3, [r7, #4]
 801a1a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801a1ac:	b2db      	uxtb	r3, r3
 801a1ae:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801a1b0:	b25b      	sxtb	r3, r3
 801a1b2:	4313      	orrs	r3, r2
 801a1b4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a1b6:	793b      	ldrb	r3, [r7, #4]
 801a1b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801a1bc:	b2db      	uxtb	r3, r3
 801a1be:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801a1c0:	b25b      	sxtb	r3, r3
 801a1c2:	4313      	orrs	r3, r2
 801a1c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a1c6:	793b      	ldrb	r3, [r7, #4]
 801a1c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801a1cc:	b2db      	uxtb	r3, r3
 801a1ce:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801a1d0:	b25b      	sxtb	r3, r3
 801a1d2:	4313      	orrs	r3, r2
 801a1d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a1d6:	793b      	ldrb	r3, [r7, #4]
 801a1d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801a1dc:	b2db      	uxtb	r3, r3
 801a1de:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801a1e0:	b25b      	sxtb	r3, r3
 801a1e2:	4313      	orrs	r3, r2
 801a1e4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801a1e6:	793b      	ldrb	r3, [r7, #4]
 801a1e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801a1ec:	b2db      	uxtb	r3, r3
 801a1ee:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801a1f0:	4313      	orrs	r3, r2
 801a1f2:	b25b      	sxtb	r3, r3
 801a1f4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801a1f6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801a1f8:	f107 030f 	add.w	r3, r7, #15
 801a1fc:	2201      	movs	r2, #1
 801a1fe:	4619      	mov	r1, r3
 801a200:	2089      	movs	r0, #137	; 0x89
 801a202:	f000 fccd 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a206:	bf00      	nop
 801a208:	3710      	adds	r7, #16
 801a20a:	46bd      	mov	sp, r7
 801a20c:	bd80      	pop	{r7, pc}
	...

0801a210 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b084      	sub	sp, #16
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	4a1b      	ldr	r2, [pc, #108]	; (801a288 <SUBGRF_CalibrateImage+0x78>)
 801a21c:	4293      	cmp	r3, r2
 801a21e:	d904      	bls.n	801a22a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801a220:	23e1      	movs	r3, #225	; 0xe1
 801a222:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801a224:	23e9      	movs	r3, #233	; 0xe9
 801a226:	737b      	strb	r3, [r7, #13]
 801a228:	e022      	b.n	801a270 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	4a17      	ldr	r2, [pc, #92]	; (801a28c <SUBGRF_CalibrateImage+0x7c>)
 801a22e:	4293      	cmp	r3, r2
 801a230:	d904      	bls.n	801a23c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801a232:	23d7      	movs	r3, #215	; 0xd7
 801a234:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801a236:	23db      	movs	r3, #219	; 0xdb
 801a238:	737b      	strb	r3, [r7, #13]
 801a23a:	e019      	b.n	801a270 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	4a14      	ldr	r2, [pc, #80]	; (801a290 <SUBGRF_CalibrateImage+0x80>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d904      	bls.n	801a24e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801a244:	23c1      	movs	r3, #193	; 0xc1
 801a246:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801a248:	23c5      	movs	r3, #197	; 0xc5
 801a24a:	737b      	strb	r3, [r7, #13]
 801a24c:	e010      	b.n	801a270 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	4a10      	ldr	r2, [pc, #64]	; (801a294 <SUBGRF_CalibrateImage+0x84>)
 801a252:	4293      	cmp	r3, r2
 801a254:	d904      	bls.n	801a260 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801a256:	2375      	movs	r3, #117	; 0x75
 801a258:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801a25a:	2381      	movs	r3, #129	; 0x81
 801a25c:	737b      	strb	r3, [r7, #13]
 801a25e:	e007      	b.n	801a270 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 801a260:	687b      	ldr	r3, [r7, #4]
 801a262:	4a0d      	ldr	r2, [pc, #52]	; (801a298 <SUBGRF_CalibrateImage+0x88>)
 801a264:	4293      	cmp	r3, r2
 801a266:	d903      	bls.n	801a270 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 801a268:	236b      	movs	r3, #107	; 0x6b
 801a26a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801a26c:	236f      	movs	r3, #111	; 0x6f
 801a26e:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801a270:	f107 030c 	add.w	r3, r7, #12
 801a274:	2202      	movs	r2, #2
 801a276:	4619      	mov	r1, r3
 801a278:	2098      	movs	r0, #152	; 0x98
 801a27a:	f000 fc91 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a27e:	bf00      	nop
 801a280:	3710      	adds	r7, #16
 801a282:	46bd      	mov	sp, r7
 801a284:	bd80      	pop	{r7, pc}
 801a286:	bf00      	nop
 801a288:	35a4e900 	.word	0x35a4e900
 801a28c:	32a9f880 	.word	0x32a9f880
 801a290:	2de54480 	.word	0x2de54480
 801a294:	1b6b0b00 	.word	0x1b6b0b00
 801a298:	1954fc40 	.word	0x1954fc40

0801a29c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801a29c:	b590      	push	{r4, r7, lr}
 801a29e:	b085      	sub	sp, #20
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	4604      	mov	r4, r0
 801a2a4:	4608      	mov	r0, r1
 801a2a6:	4611      	mov	r1, r2
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	4623      	mov	r3, r4
 801a2ac:	71fb      	strb	r3, [r7, #7]
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	71bb      	strb	r3, [r7, #6]
 801a2b2:	460b      	mov	r3, r1
 801a2b4:	717b      	strb	r3, [r7, #5]
 801a2b6:	4613      	mov	r3, r2
 801a2b8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801a2ba:	79fb      	ldrb	r3, [r7, #7]
 801a2bc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801a2be:	79bb      	ldrb	r3, [r7, #6]
 801a2c0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801a2c2:	797b      	ldrb	r3, [r7, #5]
 801a2c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801a2c6:	793b      	ldrb	r3, [r7, #4]
 801a2c8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801a2ca:	f107 030c 	add.w	r3, r7, #12
 801a2ce:	2204      	movs	r2, #4
 801a2d0:	4619      	mov	r1, r3
 801a2d2:	2095      	movs	r0, #149	; 0x95
 801a2d4:	f000 fc64 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a2d8:	bf00      	nop
 801a2da:	3714      	adds	r7, #20
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd90      	pop	{r4, r7, pc}

0801a2e0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801a2e0:	b590      	push	{r4, r7, lr}
 801a2e2:	b085      	sub	sp, #20
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	4604      	mov	r4, r0
 801a2e8:	4608      	mov	r0, r1
 801a2ea:	4611      	mov	r1, r2
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	4623      	mov	r3, r4
 801a2f0:	80fb      	strh	r3, [r7, #6]
 801a2f2:	4603      	mov	r3, r0
 801a2f4:	80bb      	strh	r3, [r7, #4]
 801a2f6:	460b      	mov	r3, r1
 801a2f8:	807b      	strh	r3, [r7, #2]
 801a2fa:	4613      	mov	r3, r2
 801a2fc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801a2fe:	88fb      	ldrh	r3, [r7, #6]
 801a300:	0a1b      	lsrs	r3, r3, #8
 801a302:	b29b      	uxth	r3, r3
 801a304:	b2db      	uxtb	r3, r3
 801a306:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801a308:	88fb      	ldrh	r3, [r7, #6]
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801a30e:	88bb      	ldrh	r3, [r7, #4]
 801a310:	0a1b      	lsrs	r3, r3, #8
 801a312:	b29b      	uxth	r3, r3
 801a314:	b2db      	uxtb	r3, r3
 801a316:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801a318:	88bb      	ldrh	r3, [r7, #4]
 801a31a:	b2db      	uxtb	r3, r3
 801a31c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801a31e:	887b      	ldrh	r3, [r7, #2]
 801a320:	0a1b      	lsrs	r3, r3, #8
 801a322:	b29b      	uxth	r3, r3
 801a324:	b2db      	uxtb	r3, r3
 801a326:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a328:	887b      	ldrh	r3, [r7, #2]
 801a32a:	b2db      	uxtb	r3, r3
 801a32c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a32e:	883b      	ldrh	r3, [r7, #0]
 801a330:	0a1b      	lsrs	r3, r3, #8
 801a332:	b29b      	uxth	r3, r3
 801a334:	b2db      	uxtb	r3, r3
 801a336:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a338:	883b      	ldrh	r3, [r7, #0]
 801a33a:	b2db      	uxtb	r3, r3
 801a33c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a33e:	f107 0308 	add.w	r3, r7, #8
 801a342:	2208      	movs	r2, #8
 801a344:	4619      	mov	r1, r3
 801a346:	2008      	movs	r0, #8
 801a348:	f000 fc2a 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a34c:	bf00      	nop
 801a34e:	3714      	adds	r7, #20
 801a350:	46bd      	mov	sp, r7
 801a352:	bd90      	pop	{r4, r7, pc}

0801a354 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b084      	sub	sp, #16
 801a358:	af00      	add	r7, sp, #0
 801a35a:	4603      	mov	r3, r0
 801a35c:	6039      	str	r1, [r7, #0]
 801a35e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a360:	79fb      	ldrb	r3, [r7, #7]
 801a362:	f003 0307 	and.w	r3, r3, #7
 801a366:	b2db      	uxtb	r3, r3
 801a368:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a36a:	683b      	ldr	r3, [r7, #0]
 801a36c:	0c1b      	lsrs	r3, r3, #16
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	0a1b      	lsrs	r3, r3, #8
 801a376:	b2db      	uxtb	r3, r3
 801a378:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a37a:	683b      	ldr	r3, [r7, #0]
 801a37c:	b2db      	uxtb	r3, r3
 801a37e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a380:	f107 030c 	add.w	r3, r7, #12
 801a384:	2204      	movs	r2, #4
 801a386:	4619      	mov	r1, r3
 801a388:	2097      	movs	r0, #151	; 0x97
 801a38a:	f000 fc09 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a38e:	bf00      	nop
 801a390:	3710      	adds	r7, #16
 801a392:	46bd      	mov	sp, r7
 801a394:	bd80      	pop	{r7, pc}
	...

0801a398 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a39c:	b084      	sub	sp, #16
 801a39e:	af00      	add	r7, sp, #0
 801a3a0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a3a6:	4b1d      	ldr	r3, [pc, #116]	; (801a41c <SUBGRF_SetRfFrequency+0x84>)
 801a3a8:	781b      	ldrb	r3, [r3, #0]
 801a3aa:	f083 0301 	eor.w	r3, r3, #1
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	2b00      	cmp	r3, #0
 801a3b2:	d005      	beq.n	801a3c0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a3b4:	6878      	ldr	r0, [r7, #4]
 801a3b6:	f7ff ff2b 	bl	801a210 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a3ba:	4b18      	ldr	r3, [pc, #96]	; (801a41c <SUBGRF_SetRfFrequency+0x84>)
 801a3bc:	2201      	movs	r2, #1
 801a3be:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	461c      	mov	r4, r3
 801a3c6:	4615      	mov	r5, r2
 801a3c8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a3cc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a3d0:	4a13      	ldr	r2, [pc, #76]	; (801a420 <SUBGRF_SetRfFrequency+0x88>)
 801a3d2:	f04f 0300 	mov.w	r3, #0
 801a3d6:	4640      	mov	r0, r8
 801a3d8:	4649      	mov	r1, r9
 801a3da:	f7e6 fbef 	bl	8000bbc <__aeabi_uldivmod>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	4613      	mov	r3, r2
 801a3e4:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a3e6:	68fb      	ldr	r3, [r7, #12]
 801a3e8:	0e1b      	lsrs	r3, r3, #24
 801a3ea:	b2db      	uxtb	r3, r3
 801a3ec:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	0c1b      	lsrs	r3, r3, #16
 801a3f2:	b2db      	uxtb	r3, r3
 801a3f4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	0a1b      	lsrs	r3, r3, #8
 801a3fa:	b2db      	uxtb	r3, r3
 801a3fc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	b2db      	uxtb	r3, r3
 801a402:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a404:	f107 0308 	add.w	r3, r7, #8
 801a408:	2204      	movs	r2, #4
 801a40a:	4619      	mov	r1, r3
 801a40c:	2086      	movs	r0, #134	; 0x86
 801a40e:	f000 fbc7 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a412:	bf00      	nop
 801a414:	3710      	adds	r7, #16
 801a416:	46bd      	mov	sp, r7
 801a418:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a41c:	20001cc0 	.word	0x20001cc0
 801a420:	01e84800 	.word	0x01e84800

0801a424 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b082      	sub	sp, #8
 801a428:	af00      	add	r7, sp, #0
 801a42a:	4603      	mov	r3, r0
 801a42c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a42e:	79fa      	ldrb	r2, [r7, #7]
 801a430:	4b09      	ldr	r3, [pc, #36]	; (801a458 <SUBGRF_SetPacketType+0x34>)
 801a432:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a434:	79fb      	ldrb	r3, [r7, #7]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d104      	bne.n	801a444 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a43a:	2100      	movs	r1, #0
 801a43c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a440:	f000 fafe 	bl	801aa40 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a444:	1dfb      	adds	r3, r7, #7
 801a446:	2201      	movs	r2, #1
 801a448:	4619      	mov	r1, r3
 801a44a:	208a      	movs	r0, #138	; 0x8a
 801a44c:	f000 fba8 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a450:	bf00      	nop
 801a452:	3708      	adds	r7, #8
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}
 801a458:	20001cb9 	.word	0x20001cb9

0801a45c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a45c:	b480      	push	{r7}
 801a45e:	af00      	add	r7, sp, #0
    return PacketType;
 801a460:	4b02      	ldr	r3, [pc, #8]	; (801a46c <SUBGRF_GetPacketType+0x10>)
 801a462:	781b      	ldrb	r3, [r3, #0]
}
 801a464:	4618      	mov	r0, r3
 801a466:	46bd      	mov	sp, r7
 801a468:	bc80      	pop	{r7}
 801a46a:	4770      	bx	lr
 801a46c:	20001cb9 	.word	0x20001cb9

0801a470 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b084      	sub	sp, #16
 801a474:	af00      	add	r7, sp, #0
 801a476:	4603      	mov	r3, r0
 801a478:	71fb      	strb	r3, [r7, #7]
 801a47a:	460b      	mov	r3, r1
 801a47c:	71bb      	strb	r3, [r7, #6]
 801a47e:	4613      	mov	r3, r2
 801a480:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a482:	79fb      	ldrb	r3, [r7, #7]
 801a484:	2b01      	cmp	r3, #1
 801a486:	d149      	bne.n	801a51c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a488:	2000      	movs	r0, #0
 801a48a:	f7f1 f973 	bl	800b774 <RBI_GetRFOMaxPowerConfig>
 801a48e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a490:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a494:	68fa      	ldr	r2, [r7, #12]
 801a496:	429a      	cmp	r2, r3
 801a498:	da01      	bge.n	801a49e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	2b0e      	cmp	r3, #14
 801a4a2:	d10e      	bne.n	801a4c2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	2201      	movs	r2, #1
 801a4a8:	2100      	movs	r1, #0
 801a4aa:	2004      	movs	r0, #4
 801a4ac:	f7ff fef6 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a4b0:	79ba      	ldrb	r2, [r7, #6]
 801a4b2:	68fb      	ldr	r3, [r7, #12]
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	1ad3      	subs	r3, r2, r3
 801a4b8:	b2db      	uxtb	r3, r3
 801a4ba:	330e      	adds	r3, #14
 801a4bc:	b2db      	uxtb	r3, r3
 801a4be:	71bb      	strb	r3, [r7, #6]
 801a4c0:	e01f      	b.n	801a502 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	2b0a      	cmp	r3, #10
 801a4c6:	d10e      	bne.n	801a4e6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a4c8:	2301      	movs	r3, #1
 801a4ca:	2201      	movs	r2, #1
 801a4cc:	2100      	movs	r1, #0
 801a4ce:	2001      	movs	r0, #1
 801a4d0:	f7ff fee4 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a4d4:	79ba      	ldrb	r2, [r7, #6]
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	b2db      	uxtb	r3, r3
 801a4da:	1ad3      	subs	r3, r2, r3
 801a4dc:	b2db      	uxtb	r3, r3
 801a4de:	330d      	adds	r3, #13
 801a4e0:	b2db      	uxtb	r3, r3
 801a4e2:	71bb      	strb	r3, [r7, #6]
 801a4e4:	e00d      	b.n	801a502 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	2201      	movs	r2, #1
 801a4ea:	2100      	movs	r1, #0
 801a4ec:	2006      	movs	r0, #6
 801a4ee:	f7ff fed5 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a4f2:	79ba      	ldrb	r2, [r7, #6]
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	b2db      	uxtb	r3, r3
 801a4f8:	1ad3      	subs	r3, r2, r3
 801a4fa:	b2db      	uxtb	r3, r3
 801a4fc:	330e      	adds	r3, #14
 801a4fe:	b2db      	uxtb	r3, r3
 801a500:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a502:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a506:	f113 0f11 	cmn.w	r3, #17
 801a50a:	da01      	bge.n	801a510 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a50c:	23ef      	movs	r3, #239	; 0xef
 801a50e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a510:	2118      	movs	r1, #24
 801a512:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a516:	f000 fa93 	bl	801aa40 <SUBGRF_WriteRegister>
 801a51a:	e067      	b.n	801a5ec <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a51c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801a520:	f000 faa2 	bl	801aa68 <SUBGRF_ReadRegister>
 801a524:	4603      	mov	r3, r0
 801a526:	f043 031e 	orr.w	r3, r3, #30
 801a52a:	b2db      	uxtb	r3, r3
 801a52c:	4619      	mov	r1, r3
 801a52e:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801a532:	f000 fa85 	bl	801aa40 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a536:	2001      	movs	r0, #1
 801a538:	f7f1 f91c 	bl	800b774 <RBI_GetRFOMaxPowerConfig>
 801a53c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a53e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a542:	68fa      	ldr	r2, [r7, #12]
 801a544:	429a      	cmp	r2, r3
 801a546:	da01      	bge.n	801a54c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	2b14      	cmp	r3, #20
 801a550:	d10e      	bne.n	801a570 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a552:	2301      	movs	r3, #1
 801a554:	2200      	movs	r2, #0
 801a556:	2105      	movs	r1, #5
 801a558:	2003      	movs	r0, #3
 801a55a:	f7ff fe9f 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a55e:	79ba      	ldrb	r2, [r7, #6]
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	b2db      	uxtb	r3, r3
 801a564:	1ad3      	subs	r3, r2, r3
 801a566:	b2db      	uxtb	r3, r3
 801a568:	3316      	adds	r3, #22
 801a56a:	b2db      	uxtb	r3, r3
 801a56c:	71bb      	strb	r3, [r7, #6]
 801a56e:	e031      	b.n	801a5d4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	2b11      	cmp	r3, #17
 801a574:	d10e      	bne.n	801a594 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a576:	2301      	movs	r3, #1
 801a578:	2200      	movs	r2, #0
 801a57a:	2103      	movs	r1, #3
 801a57c:	2002      	movs	r0, #2
 801a57e:	f7ff fe8d 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a582:	79ba      	ldrb	r2, [r7, #6]
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	b2db      	uxtb	r3, r3
 801a588:	1ad3      	subs	r3, r2, r3
 801a58a:	b2db      	uxtb	r3, r3
 801a58c:	3316      	adds	r3, #22
 801a58e:	b2db      	uxtb	r3, r3
 801a590:	71bb      	strb	r3, [r7, #6]
 801a592:	e01f      	b.n	801a5d4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	2b0e      	cmp	r3, #14
 801a598:	d10e      	bne.n	801a5b8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a59a:	2301      	movs	r3, #1
 801a59c:	2200      	movs	r2, #0
 801a59e:	2102      	movs	r1, #2
 801a5a0:	2002      	movs	r0, #2
 801a5a2:	f7ff fe7b 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a5a6:	79ba      	ldrb	r2, [r7, #6]
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	b2db      	uxtb	r3, r3
 801a5ac:	1ad3      	subs	r3, r2, r3
 801a5ae:	b2db      	uxtb	r3, r3
 801a5b0:	330e      	adds	r3, #14
 801a5b2:	b2db      	uxtb	r3, r3
 801a5b4:	71bb      	strb	r3, [r7, #6]
 801a5b6:	e00d      	b.n	801a5d4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a5b8:	2301      	movs	r3, #1
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	2107      	movs	r1, #7
 801a5be:	2004      	movs	r0, #4
 801a5c0:	f7ff fe6c 	bl	801a29c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a5c4:	79ba      	ldrb	r2, [r7, #6]
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	b2db      	uxtb	r3, r3
 801a5ca:	1ad3      	subs	r3, r2, r3
 801a5cc:	b2db      	uxtb	r3, r3
 801a5ce:	3316      	adds	r3, #22
 801a5d0:	b2db      	uxtb	r3, r3
 801a5d2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a5d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a5d8:	f113 0f09 	cmn.w	r3, #9
 801a5dc:	da01      	bge.n	801a5e2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a5de:	23f7      	movs	r3, #247	; 0xf7
 801a5e0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a5e2:	2138      	movs	r1, #56	; 0x38
 801a5e4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801a5e8:	f000 fa2a 	bl	801aa40 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a5ec:	79bb      	ldrb	r3, [r7, #6]
 801a5ee:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a5f0:	797b      	ldrb	r3, [r7, #5]
 801a5f2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a5f4:	f107 0308 	add.w	r3, r7, #8
 801a5f8:	2202      	movs	r2, #2
 801a5fa:	4619      	mov	r1, r3
 801a5fc:	208e      	movs	r0, #142	; 0x8e
 801a5fe:	f000 facf 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a602:	bf00      	nop
 801a604:	3710      	adds	r7, #16
 801a606:	46bd      	mov	sp, r7
 801a608:	bd80      	pop	{r7, pc}
	...

0801a60c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a60c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a610:	b086      	sub	sp, #24
 801a612:	af00      	add	r7, sp, #0
 801a614:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a616:	2300      	movs	r3, #0
 801a618:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a61a:	4a61      	ldr	r2, [pc, #388]	; (801a7a0 <SUBGRF_SetModulationParams+0x194>)
 801a61c:	f107 0308 	add.w	r3, r7, #8
 801a620:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a624:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	781a      	ldrb	r2, [r3, #0]
 801a62c:	4b5d      	ldr	r3, [pc, #372]	; (801a7a4 <SUBGRF_SetModulationParams+0x198>)
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	429a      	cmp	r2, r3
 801a632:	d004      	beq.n	801a63e <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	781b      	ldrb	r3, [r3, #0]
 801a638:	4618      	mov	r0, r3
 801a63a:	f7ff fef3 	bl	801a424 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	2b03      	cmp	r3, #3
 801a644:	f200 80a5 	bhi.w	801a792 <SUBGRF_SetModulationParams+0x186>
 801a648:	a201      	add	r2, pc, #4	; (adr r2, 801a650 <SUBGRF_SetModulationParams+0x44>)
 801a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a64e:	bf00      	nop
 801a650:	0801a661 	.word	0x0801a661
 801a654:	0801a721 	.word	0x0801a721
 801a658:	0801a6e3 	.word	0x0801a6e3
 801a65c:	0801a74f 	.word	0x0801a74f
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a660:	2308      	movs	r3, #8
 801a662:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	685b      	ldr	r3, [r3, #4]
 801a668:	4a4f      	ldr	r2, [pc, #316]	; (801a7a8 <SUBGRF_SetModulationParams+0x19c>)
 801a66a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a66e:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	0c1b      	lsrs	r3, r3, #16
 801a674:	b2db      	uxtb	r3, r3
 801a676:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a678:	697b      	ldr	r3, [r7, #20]
 801a67a:	0a1b      	lsrs	r3, r3, #8
 801a67c:	b2db      	uxtb	r3, r3
 801a67e:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	b2db      	uxtb	r3, r3
 801a684:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	7b1b      	ldrb	r3, [r3, #12]
 801a68a:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	7b5b      	ldrb	r3, [r3, #13]
 801a690:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	689b      	ldr	r3, [r3, #8]
 801a696:	2200      	movs	r2, #0
 801a698:	461c      	mov	r4, r3
 801a69a:	4615      	mov	r5, r2
 801a69c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a6a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a6a4:	4a41      	ldr	r2, [pc, #260]	; (801a7ac <SUBGRF_SetModulationParams+0x1a0>)
 801a6a6:	f04f 0300 	mov.w	r3, #0
 801a6aa:	4640      	mov	r0, r8
 801a6ac:	4649      	mov	r1, r9
 801a6ae:	f7e6 fa85 	bl	8000bbc <__aeabi_uldivmod>
 801a6b2:	4602      	mov	r2, r0
 801a6b4:	460b      	mov	r3, r1
 801a6b6:	4613      	mov	r3, r2
 801a6b8:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a6ba:	697b      	ldr	r3, [r7, #20]
 801a6bc:	0c1b      	lsrs	r3, r3, #16
 801a6be:	b2db      	uxtb	r3, r3
 801a6c0:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a6c2:	697b      	ldr	r3, [r7, #20]
 801a6c4:	0a1b      	lsrs	r3, r3, #8
 801a6c6:	b2db      	uxtb	r3, r3
 801a6c8:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a6ca:	697b      	ldr	r3, [r7, #20]
 801a6cc:	b2db      	uxtb	r3, r3
 801a6ce:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a6d0:	7cfb      	ldrb	r3, [r7, #19]
 801a6d2:	b29a      	uxth	r2, r3
 801a6d4:	f107 0308 	add.w	r3, r7, #8
 801a6d8:	4619      	mov	r1, r3
 801a6da:	208b      	movs	r0, #139	; 0x8b
 801a6dc:	f000 fa60 	bl	801aba0 <SUBGRF_WriteCommand>
        break;
 801a6e0:	e058      	b.n	801a794 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a6e2:	2304      	movs	r3, #4
 801a6e4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	691b      	ldr	r3, [r3, #16]
 801a6ea:	4a2f      	ldr	r2, [pc, #188]	; (801a7a8 <SUBGRF_SetModulationParams+0x19c>)
 801a6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6f0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a6f2:	697b      	ldr	r3, [r7, #20]
 801a6f4:	0c1b      	lsrs	r3, r3, #16
 801a6f6:	b2db      	uxtb	r3, r3
 801a6f8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a6fa:	697b      	ldr	r3, [r7, #20]
 801a6fc:	0a1b      	lsrs	r3, r3, #8
 801a6fe:	b2db      	uxtb	r3, r3
 801a700:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a702:	697b      	ldr	r3, [r7, #20]
 801a704:	b2db      	uxtb	r3, r3
 801a706:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	7d1b      	ldrb	r3, [r3, #20]
 801a70c:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a70e:	7cfb      	ldrb	r3, [r7, #19]
 801a710:	b29a      	uxth	r2, r3
 801a712:	f107 0308 	add.w	r3, r7, #8
 801a716:	4619      	mov	r1, r3
 801a718:	208b      	movs	r0, #139	; 0x8b
 801a71a:	f000 fa41 	bl	801aba0 <SUBGRF_WriteCommand>
        break;
 801a71e:	e039      	b.n	801a794 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801a720:	2304      	movs	r3, #4
 801a722:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	7e1b      	ldrb	r3, [r3, #24]
 801a728:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	7e5b      	ldrb	r3, [r3, #25]
 801a72e:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	7e9b      	ldrb	r3, [r3, #26]
 801a734:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	7edb      	ldrb	r3, [r3, #27]
 801a73a:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a73c:	7cfb      	ldrb	r3, [r7, #19]
 801a73e:	b29a      	uxth	r2, r3
 801a740:	f107 0308 	add.w	r3, r7, #8
 801a744:	4619      	mov	r1, r3
 801a746:	208b      	movs	r0, #139	; 0x8b
 801a748:	f000 fa2a 	bl	801aba0 <SUBGRF_WriteCommand>

        break;
 801a74c:	e022      	b.n	801a794 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a74e:	2305      	movs	r3, #5
 801a750:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	685b      	ldr	r3, [r3, #4]
 801a756:	4a14      	ldr	r2, [pc, #80]	; (801a7a8 <SUBGRF_SetModulationParams+0x19c>)
 801a758:	fbb2 f3f3 	udiv	r3, r2, r3
 801a75c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	0c1b      	lsrs	r3, r3, #16
 801a762:	b2db      	uxtb	r3, r3
 801a764:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a766:	697b      	ldr	r3, [r7, #20]
 801a768:	0a1b      	lsrs	r3, r3, #8
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a76e:	697b      	ldr	r3, [r7, #20]
 801a770:	b2db      	uxtb	r3, r3
 801a772:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	7b1b      	ldrb	r3, [r3, #12]
 801a778:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	7b5b      	ldrb	r3, [r3, #13]
 801a77e:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a780:	7cfb      	ldrb	r3, [r7, #19]
 801a782:	b29a      	uxth	r2, r3
 801a784:	f107 0308 	add.w	r3, r7, #8
 801a788:	4619      	mov	r1, r3
 801a78a:	208b      	movs	r0, #139	; 0x8b
 801a78c:	f000 fa08 	bl	801aba0 <SUBGRF_WriteCommand>
        break;
 801a790:	e000      	b.n	801a794 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a792:	bf00      	nop
    }
}
 801a794:	bf00      	nop
 801a796:	3718      	adds	r7, #24
 801a798:	46bd      	mov	sp, r7
 801a79a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a79e:	bf00      	nop
 801a7a0:	0801d054 	.word	0x0801d054
 801a7a4:	20001cb9 	.word	0x20001cb9
 801a7a8:	3d090000 	.word	0x3d090000
 801a7ac:	01e84800 	.word	0x01e84800

0801a7b0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b086      	sub	sp, #24
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a7bc:	4a48      	ldr	r2, [pc, #288]	; (801a8e0 <SUBGRF_SetPacketParams+0x130>)
 801a7be:	f107 030c 	add.w	r3, r7, #12
 801a7c2:	ca07      	ldmia	r2, {r0, r1, r2}
 801a7c4:	c303      	stmia	r3!, {r0, r1}
 801a7c6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	781a      	ldrb	r2, [r3, #0]
 801a7cc:	4b45      	ldr	r3, [pc, #276]	; (801a8e4 <SUBGRF_SetPacketParams+0x134>)
 801a7ce:	781b      	ldrb	r3, [r3, #0]
 801a7d0:	429a      	cmp	r2, r3
 801a7d2:	d004      	beq.n	801a7de <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	781b      	ldrb	r3, [r3, #0]
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f7ff fe23 	bl	801a424 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	2b03      	cmp	r3, #3
 801a7e4:	d878      	bhi.n	801a8d8 <SUBGRF_SetPacketParams+0x128>
 801a7e6:	a201      	add	r2, pc, #4	; (adr r2, 801a7ec <SUBGRF_SetPacketParams+0x3c>)
 801a7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a7ec:	0801a7fd 	.word	0x0801a7fd
 801a7f0:	0801a88d 	.word	0x0801a88d
 801a7f4:	0801a881 	.word	0x0801a881
 801a7f8:	0801a7fd 	.word	0x0801a7fd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	7a5b      	ldrb	r3, [r3, #9]
 801a800:	2bf1      	cmp	r3, #241	; 0xf1
 801a802:	d10a      	bne.n	801a81a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a804:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801a808:	f7ff faae 	bl	8019d68 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a80c:	f248 0005 	movw	r0, #32773	; 0x8005
 801a810:	f7ff faca 	bl	8019da8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a814:	2302      	movs	r3, #2
 801a816:	75bb      	strb	r3, [r7, #22]
 801a818:	e011      	b.n	801a83e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	7a5b      	ldrb	r3, [r3, #9]
 801a81e:	2bf2      	cmp	r3, #242	; 0xf2
 801a820:	d10a      	bne.n	801a838 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a822:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801a826:	f7ff fa9f 	bl	8019d68 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a82a:	f241 0021 	movw	r0, #4129	; 0x1021
 801a82e:	f7ff fabb 	bl	8019da8 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a832:	2306      	movs	r3, #6
 801a834:	75bb      	strb	r3, [r7, #22]
 801a836:	e002      	b.n	801a83e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	7a5b      	ldrb	r3, [r3, #9]
 801a83c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a83e:	2309      	movs	r3, #9
 801a840:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	885b      	ldrh	r3, [r3, #2]
 801a846:	0a1b      	lsrs	r3, r3, #8
 801a848:	b29b      	uxth	r3, r3
 801a84a:	b2db      	uxtb	r3, r3
 801a84c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	885b      	ldrh	r3, [r3, #2]
 801a852:	b2db      	uxtb	r3, r3
 801a854:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	791b      	ldrb	r3, [r3, #4]
 801a85a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	795b      	ldrb	r3, [r3, #5]
 801a860:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	799b      	ldrb	r3, [r3, #6]
 801a866:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	79db      	ldrb	r3, [r3, #7]
 801a86c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	7a1b      	ldrb	r3, [r3, #8]
 801a872:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a874:	7dbb      	ldrb	r3, [r7, #22]
 801a876:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	7a9b      	ldrb	r3, [r3, #10]
 801a87c:	753b      	strb	r3, [r7, #20]
        break;
 801a87e:	e022      	b.n	801a8c6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a880:	2301      	movs	r3, #1
 801a882:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	7b1b      	ldrb	r3, [r3, #12]
 801a888:	733b      	strb	r3, [r7, #12]
        break;
 801a88a:	e01c      	b.n	801a8c6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a88c:	2306      	movs	r3, #6
 801a88e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	89db      	ldrh	r3, [r3, #14]
 801a894:	0a1b      	lsrs	r3, r3, #8
 801a896:	b29b      	uxth	r3, r3
 801a898:	b2db      	uxtb	r3, r3
 801a89a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	89db      	ldrh	r3, [r3, #14]
 801a8a0:	b2db      	uxtb	r3, r3
 801a8a2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	7c1a      	ldrb	r2, [r3, #16]
 801a8a8:	4b0f      	ldr	r3, [pc, #60]	; (801a8e8 <SUBGRF_SetPacketParams+0x138>)
 801a8aa:	4611      	mov	r1, r2
 801a8ac:	7019      	strb	r1, [r3, #0]
 801a8ae:	4613      	mov	r3, r2
 801a8b0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	7c5b      	ldrb	r3, [r3, #17]
 801a8b6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	7c9b      	ldrb	r3, [r3, #18]
 801a8bc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	7cdb      	ldrb	r3, [r3, #19]
 801a8c2:	747b      	strb	r3, [r7, #17]
        break;
 801a8c4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a8c6:	7dfb      	ldrb	r3, [r7, #23]
 801a8c8:	b29a      	uxth	r2, r3
 801a8ca:	f107 030c 	add.w	r3, r7, #12
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	208c      	movs	r0, #140	; 0x8c
 801a8d2:	f000 f965 	bl	801aba0 <SUBGRF_WriteCommand>
 801a8d6:	e000      	b.n	801a8da <SUBGRF_SetPacketParams+0x12a>
        return;
 801a8d8:	bf00      	nop
}
 801a8da:	3718      	adds	r7, #24
 801a8dc:	46bd      	mov	sp, r7
 801a8de:	bd80      	pop	{r7, pc}
 801a8e0:	0801d05c 	.word	0x0801d05c
 801a8e4:	20001cb9 	.word	0x20001cb9
 801a8e8:	20001cba 	.word	0x20001cba

0801a8ec <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b084      	sub	sp, #16
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	4603      	mov	r3, r0
 801a8f4:	460a      	mov	r2, r1
 801a8f6:	71fb      	strb	r3, [r7, #7]
 801a8f8:	4613      	mov	r3, r2
 801a8fa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a8fc:	79fb      	ldrb	r3, [r7, #7]
 801a8fe:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a900:	79bb      	ldrb	r3, [r7, #6]
 801a902:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a904:	f107 030c 	add.w	r3, r7, #12
 801a908:	2202      	movs	r2, #2
 801a90a:	4619      	mov	r1, r3
 801a90c:	208f      	movs	r0, #143	; 0x8f
 801a90e:	f000 f947 	bl	801aba0 <SUBGRF_WriteCommand>
}
 801a912:	bf00      	nop
 801a914:	3710      	adds	r7, #16
 801a916:	46bd      	mov	sp, r7
 801a918:	bd80      	pop	{r7, pc}

0801a91a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a91a:	b580      	push	{r7, lr}
 801a91c:	b082      	sub	sp, #8
 801a91e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a920:	2300      	movs	r3, #0
 801a922:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a924:	1d3b      	adds	r3, r7, #4
 801a926:	2201      	movs	r2, #1
 801a928:	4619      	mov	r1, r3
 801a92a:	2015      	movs	r0, #21
 801a92c:	f000 f95a 	bl	801abe4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a930:	793b      	ldrb	r3, [r7, #4]
 801a932:	425b      	negs	r3, r3
 801a934:	105b      	asrs	r3, r3, #1
 801a936:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a938:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	3708      	adds	r7, #8
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}

0801a944 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a944:	b580      	push	{r7, lr}
 801a946:	b084      	sub	sp, #16
 801a948:	af00      	add	r7, sp, #0
 801a94a:	6078      	str	r0, [r7, #4]
 801a94c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a94e:	f107 030c 	add.w	r3, r7, #12
 801a952:	2202      	movs	r2, #2
 801a954:	4619      	mov	r1, r3
 801a956:	2013      	movs	r0, #19
 801a958:	f000 f944 	bl	801abe4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a95c:	f7ff fd7e 	bl	801a45c <SUBGRF_GetPacketType>
 801a960:	4603      	mov	r3, r0
 801a962:	2b01      	cmp	r3, #1
 801a964:	d10d      	bne.n	801a982 <SUBGRF_GetRxBufferStatus+0x3e>
 801a966:	4b0c      	ldr	r3, [pc, #48]	; (801a998 <SUBGRF_GetRxBufferStatus+0x54>)
 801a968:	781b      	ldrb	r3, [r3, #0]
 801a96a:	b2db      	uxtb	r3, r3
 801a96c:	2b01      	cmp	r3, #1
 801a96e:	d108      	bne.n	801a982 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a970:	f240 7002 	movw	r0, #1794	; 0x702
 801a974:	f000 f878 	bl	801aa68 <SUBGRF_ReadRegister>
 801a978:	4603      	mov	r3, r0
 801a97a:	461a      	mov	r2, r3
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	701a      	strb	r2, [r3, #0]
 801a980:	e002      	b.n	801a988 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a982:	7b3a      	ldrb	r2, [r7, #12]
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a988:	7b7a      	ldrb	r2, [r7, #13]
 801a98a:	683b      	ldr	r3, [r7, #0]
 801a98c:	701a      	strb	r2, [r3, #0]
}
 801a98e:	bf00      	nop
 801a990:	3710      	adds	r7, #16
 801a992:	46bd      	mov	sp, r7
 801a994:	bd80      	pop	{r7, pc}
 801a996:	bf00      	nop
 801a998:	20001cba 	.word	0x20001cba

0801a99c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b084      	sub	sp, #16
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a9a4:	f107 030c 	add.w	r3, r7, #12
 801a9a8:	2203      	movs	r2, #3
 801a9aa:	4619      	mov	r1, r3
 801a9ac:	2014      	movs	r0, #20
 801a9ae:	f000 f919 	bl	801abe4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a9b2:	f7ff fd53 	bl	801a45c <SUBGRF_GetPacketType>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	461a      	mov	r2, r3
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	781b      	ldrb	r3, [r3, #0]
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d002      	beq.n	801a9cc <SUBGRF_GetPacketStatus+0x30>
 801a9c6:	2b01      	cmp	r3, #1
 801a9c8:	d013      	beq.n	801a9f2 <SUBGRF_GetPacketStatus+0x56>
 801a9ca:	e02a      	b.n	801aa22 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a9cc:	7b3a      	ldrb	r2, [r7, #12]
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a9d2:	7b7b      	ldrb	r3, [r7, #13]
 801a9d4:	425b      	negs	r3, r3
 801a9d6:	105b      	asrs	r3, r3, #1
 801a9d8:	b25a      	sxtb	r2, r3
 801a9da:	687b      	ldr	r3, [r7, #4]
 801a9dc:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a9de:	7bbb      	ldrb	r3, [r7, #14]
 801a9e0:	425b      	negs	r3, r3
 801a9e2:	105b      	asrs	r3, r3, #1
 801a9e4:	b25a      	sxtb	r2, r3
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	2200      	movs	r2, #0
 801a9ee:	609a      	str	r2, [r3, #8]
            break;
 801a9f0:	e020      	b.n	801aa34 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a9f2:	7b3b      	ldrb	r3, [r7, #12]
 801a9f4:	425b      	negs	r3, r3
 801a9f6:	105b      	asrs	r3, r3, #1
 801a9f8:	b25a      	sxtb	r2, r3
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a9fe:	7b7b      	ldrb	r3, [r7, #13]
 801aa00:	b25b      	sxtb	r3, r3
 801aa02:	3302      	adds	r3, #2
 801aa04:	109b      	asrs	r3, r3, #2
 801aa06:	b25a      	sxtb	r2, r3
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801aa0c:	7bbb      	ldrb	r3, [r7, #14]
 801aa0e:	425b      	negs	r3, r3
 801aa10:	105b      	asrs	r3, r3, #1
 801aa12:	b25a      	sxtb	r2, r3
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801aa18:	4b08      	ldr	r3, [pc, #32]	; (801aa3c <SUBGRF_GetPacketStatus+0xa0>)
 801aa1a:	681a      	ldr	r2, [r3, #0]
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	611a      	str	r2, [r3, #16]
            break;
 801aa20:	e008      	b.n	801aa34 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801aa22:	2214      	movs	r2, #20
 801aa24:	2100      	movs	r1, #0
 801aa26:	6878      	ldr	r0, [r7, #4]
 801aa28:	f000 fbbd 	bl	801b1a6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801aa2c:	687b      	ldr	r3, [r7, #4]
 801aa2e:	220f      	movs	r2, #15
 801aa30:	701a      	strb	r2, [r3, #0]
            break;
 801aa32:	bf00      	nop
    }
}
 801aa34:	bf00      	nop
 801aa36:	3710      	adds	r7, #16
 801aa38:	46bd      	mov	sp, r7
 801aa3a:	bd80      	pop	{r7, pc}
 801aa3c:	20001cbc 	.word	0x20001cbc

0801aa40 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	b082      	sub	sp, #8
 801aa44:	af00      	add	r7, sp, #0
 801aa46:	4603      	mov	r3, r0
 801aa48:	460a      	mov	r2, r1
 801aa4a:	80fb      	strh	r3, [r7, #6]
 801aa4c:	4613      	mov	r3, r2
 801aa4e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801aa50:	1d7a      	adds	r2, r7, #5
 801aa52:	88f9      	ldrh	r1, [r7, #6]
 801aa54:	2301      	movs	r3, #1
 801aa56:	4803      	ldr	r0, [pc, #12]	; (801aa64 <SUBGRF_WriteRegister+0x24>)
 801aa58:	f7ed faf0 	bl	800803c <HAL_SUBGHZ_WriteRegisters>
}
 801aa5c:	bf00      	nop
 801aa5e:	3708      	adds	r7, #8
 801aa60:	46bd      	mov	sp, r7
 801aa62:	bd80      	pop	{r7, pc}
 801aa64:	20000324 	.word	0x20000324

0801aa68 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b084      	sub	sp, #16
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	4603      	mov	r3, r0
 801aa70:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801aa72:	f107 020f 	add.w	r2, r7, #15
 801aa76:	88f9      	ldrh	r1, [r7, #6]
 801aa78:	2301      	movs	r3, #1
 801aa7a:	4804      	ldr	r0, [pc, #16]	; (801aa8c <SUBGRF_ReadRegister+0x24>)
 801aa7c:	f7ed fb3d 	bl	80080fa <HAL_SUBGHZ_ReadRegisters>
    return data;
 801aa80:	7bfb      	ldrb	r3, [r7, #15]
}
 801aa82:	4618      	mov	r0, r3
 801aa84:	3710      	adds	r7, #16
 801aa86:	46bd      	mov	sp, r7
 801aa88:	bd80      	pop	{r7, pc}
 801aa8a:	bf00      	nop
 801aa8c:	20000324 	.word	0x20000324

0801aa90 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b086      	sub	sp, #24
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	4603      	mov	r3, r0
 801aa98:	6039      	str	r1, [r7, #0]
 801aa9a:	80fb      	strh	r3, [r7, #6]
 801aa9c:	4613      	mov	r3, r2
 801aa9e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aaa0:	f3ef 8310 	mrs	r3, PRIMASK
 801aaa4:	60fb      	str	r3, [r7, #12]
  return(result);
 801aaa6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aaa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aaaa:	b672      	cpsid	i
}
 801aaac:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801aaae:	88bb      	ldrh	r3, [r7, #4]
 801aab0:	88f9      	ldrh	r1, [r7, #6]
 801aab2:	683a      	ldr	r2, [r7, #0]
 801aab4:	4806      	ldr	r0, [pc, #24]	; (801aad0 <SUBGRF_WriteRegisters+0x40>)
 801aab6:	f7ed fac1 	bl	800803c <HAL_SUBGHZ_WriteRegisters>
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aabe:	693b      	ldr	r3, [r7, #16]
 801aac0:	f383 8810 	msr	PRIMASK, r3
}
 801aac4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801aac6:	bf00      	nop
 801aac8:	3718      	adds	r7, #24
 801aaca:	46bd      	mov	sp, r7
 801aacc:	bd80      	pop	{r7, pc}
 801aace:	bf00      	nop
 801aad0:	20000324 	.word	0x20000324

0801aad4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b086      	sub	sp, #24
 801aad8:	af00      	add	r7, sp, #0
 801aada:	4603      	mov	r3, r0
 801aadc:	6039      	str	r1, [r7, #0]
 801aade:	80fb      	strh	r3, [r7, #6]
 801aae0:	4613      	mov	r3, r2
 801aae2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aae4:	f3ef 8310 	mrs	r3, PRIMASK
 801aae8:	60fb      	str	r3, [r7, #12]
  return(result);
 801aaea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801aaec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aaee:	b672      	cpsid	i
}
 801aaf0:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801aaf2:	88bb      	ldrh	r3, [r7, #4]
 801aaf4:	88f9      	ldrh	r1, [r7, #6]
 801aaf6:	683a      	ldr	r2, [r7, #0]
 801aaf8:	4806      	ldr	r0, [pc, #24]	; (801ab14 <SUBGRF_ReadRegisters+0x40>)
 801aafa:	f7ed fafe 	bl	80080fa <HAL_SUBGHZ_ReadRegisters>
 801aafe:	697b      	ldr	r3, [r7, #20]
 801ab00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab02:	693b      	ldr	r3, [r7, #16]
 801ab04:	f383 8810 	msr	PRIMASK, r3
}
 801ab08:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ab0a:	bf00      	nop
 801ab0c:	3718      	adds	r7, #24
 801ab0e:	46bd      	mov	sp, r7
 801ab10:	bd80      	pop	{r7, pc}
 801ab12:	bf00      	nop
 801ab14:	20000324 	.word	0x20000324

0801ab18 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b086      	sub	sp, #24
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	4603      	mov	r3, r0
 801ab20:	6039      	str	r1, [r7, #0]
 801ab22:	71fb      	strb	r3, [r7, #7]
 801ab24:	4613      	mov	r3, r2
 801ab26:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab28:	f3ef 8310 	mrs	r3, PRIMASK
 801ab2c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ab30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab32:	b672      	cpsid	i
}
 801ab34:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ab36:	79bb      	ldrb	r3, [r7, #6]
 801ab38:	b29b      	uxth	r3, r3
 801ab3a:	79f9      	ldrb	r1, [r7, #7]
 801ab3c:	683a      	ldr	r2, [r7, #0]
 801ab3e:	4806      	ldr	r0, [pc, #24]	; (801ab58 <SUBGRF_WriteBuffer+0x40>)
 801ab40:	f7ed fbef 	bl	8008322 <HAL_SUBGHZ_WriteBuffer>
 801ab44:	697b      	ldr	r3, [r7, #20]
 801ab46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab48:	693b      	ldr	r3, [r7, #16]
 801ab4a:	f383 8810 	msr	PRIMASK, r3
}
 801ab4e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ab50:	bf00      	nop
 801ab52:	3718      	adds	r7, #24
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}
 801ab58:	20000324 	.word	0x20000324

0801ab5c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b086      	sub	sp, #24
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	4603      	mov	r3, r0
 801ab64:	6039      	str	r1, [r7, #0]
 801ab66:	71fb      	strb	r3, [r7, #7]
 801ab68:	4613      	mov	r3, r2
 801ab6a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ab6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ab70:	60fb      	str	r3, [r7, #12]
  return(result);
 801ab72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ab74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ab76:	b672      	cpsid	i
}
 801ab78:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ab7a:	79bb      	ldrb	r3, [r7, #6]
 801ab7c:	b29b      	uxth	r3, r3
 801ab7e:	79f9      	ldrb	r1, [r7, #7]
 801ab80:	683a      	ldr	r2, [r7, #0]
 801ab82:	4806      	ldr	r0, [pc, #24]	; (801ab9c <SUBGRF_ReadBuffer+0x40>)
 801ab84:	f7ed fc20 	bl	80083c8 <HAL_SUBGHZ_ReadBuffer>
 801ab88:	697b      	ldr	r3, [r7, #20]
 801ab8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ab8c:	693b      	ldr	r3, [r7, #16]
 801ab8e:	f383 8810 	msr	PRIMASK, r3
}
 801ab92:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ab94:	bf00      	nop
 801ab96:	3718      	adds	r7, #24
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bd80      	pop	{r7, pc}
 801ab9c:	20000324 	.word	0x20000324

0801aba0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b086      	sub	sp, #24
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	4603      	mov	r3, r0
 801aba8:	6039      	str	r1, [r7, #0]
 801abaa:	71fb      	strb	r3, [r7, #7]
 801abac:	4613      	mov	r3, r2
 801abae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abb0:	f3ef 8310 	mrs	r3, PRIMASK
 801abb4:	60fb      	str	r3, [r7, #12]
  return(result);
 801abb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801abb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801abba:	b672      	cpsid	i
}
 801abbc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801abbe:	88bb      	ldrh	r3, [r7, #4]
 801abc0:	79f9      	ldrb	r1, [r7, #7]
 801abc2:	683a      	ldr	r2, [r7, #0]
 801abc4:	4806      	ldr	r0, [pc, #24]	; (801abe0 <SUBGRF_WriteCommand+0x40>)
 801abc6:	f7ed faf9 	bl	80081bc <HAL_SUBGHZ_ExecSetCmd>
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801abce:	693b      	ldr	r3, [r7, #16]
 801abd0:	f383 8810 	msr	PRIMASK, r3
}
 801abd4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801abd6:	bf00      	nop
 801abd8:	3718      	adds	r7, #24
 801abda:	46bd      	mov	sp, r7
 801abdc:	bd80      	pop	{r7, pc}
 801abde:	bf00      	nop
 801abe0:	20000324 	.word	0x20000324

0801abe4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b086      	sub	sp, #24
 801abe8:	af00      	add	r7, sp, #0
 801abea:	4603      	mov	r3, r0
 801abec:	6039      	str	r1, [r7, #0]
 801abee:	71fb      	strb	r3, [r7, #7]
 801abf0:	4613      	mov	r3, r2
 801abf2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801abf4:	f3ef 8310 	mrs	r3, PRIMASK
 801abf8:	60fb      	str	r3, [r7, #12]
  return(result);
 801abfa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801abfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801abfe:	b672      	cpsid	i
}
 801ac00:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ac02:	88bb      	ldrh	r3, [r7, #4]
 801ac04:	79f9      	ldrb	r1, [r7, #7]
 801ac06:	683a      	ldr	r2, [r7, #0]
 801ac08:	4806      	ldr	r0, [pc, #24]	; (801ac24 <SUBGRF_ReadCommand+0x40>)
 801ac0a:	f7ed fb36 	bl	800827a <HAL_SUBGHZ_ExecGetCmd>
 801ac0e:	697b      	ldr	r3, [r7, #20]
 801ac10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ac12:	693b      	ldr	r3, [r7, #16]
 801ac14:	f383 8810 	msr	PRIMASK, r3
}
 801ac18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ac1a:	bf00      	nop
 801ac1c:	3718      	adds	r7, #24
 801ac1e:	46bd      	mov	sp, r7
 801ac20:	bd80      	pop	{r7, pc}
 801ac22:	bf00      	nop
 801ac24:	20000324 	.word	0x20000324

0801ac28 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b084      	sub	sp, #16
 801ac2c:	af00      	add	r7, sp, #0
 801ac2e:	4603      	mov	r3, r0
 801ac30:	460a      	mov	r2, r1
 801ac32:	71fb      	strb	r3, [r7, #7]
 801ac34:	4613      	mov	r3, r2
 801ac36:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801ac38:	2301      	movs	r3, #1
 801ac3a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801ac3c:	79bb      	ldrb	r3, [r7, #6]
 801ac3e:	2b01      	cmp	r3, #1
 801ac40:	d10d      	bne.n	801ac5e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801ac42:	79fb      	ldrb	r3, [r7, #7]
 801ac44:	2b01      	cmp	r3, #1
 801ac46:	d104      	bne.n	801ac52 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801ac48:	2302      	movs	r3, #2
 801ac4a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801ac4c:	2004      	movs	r0, #4
 801ac4e:	f000 f8df 	bl	801ae10 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801ac52:	79fb      	ldrb	r3, [r7, #7]
 801ac54:	2b02      	cmp	r3, #2
 801ac56:	d107      	bne.n	801ac68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801ac58:	2303      	movs	r3, #3
 801ac5a:	73fb      	strb	r3, [r7, #15]
 801ac5c:	e004      	b.n	801ac68 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801ac5e:	79bb      	ldrb	r3, [r7, #6]
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d101      	bne.n	801ac68 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801ac64:	2301      	movs	r3, #1
 801ac66:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801ac68:	7bfb      	ldrb	r3, [r7, #15]
 801ac6a:	4618      	mov	r0, r3
 801ac6c:	f7f0 fd5f 	bl	800b72e <RBI_ConfigRFSwitch>
}
 801ac70:	bf00      	nop
 801ac72:	3710      	adds	r7, #16
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}

0801ac78 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801ac78:	b580      	push	{r7, lr}
 801ac7a:	b084      	sub	sp, #16
 801ac7c:	af00      	add	r7, sp, #0
 801ac7e:	4603      	mov	r3, r0
 801ac80:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801ac82:	2301      	movs	r3, #1
 801ac84:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801ac86:	f7f0 fd60 	bl	800b74a <RBI_GetTxConfig>
 801ac8a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	2b02      	cmp	r3, #2
 801ac90:	d016      	beq.n	801acc0 <SUBGRF_SetRfTxPower+0x48>
 801ac92:	68bb      	ldr	r3, [r7, #8]
 801ac94:	2b02      	cmp	r3, #2
 801ac96:	dc16      	bgt.n	801acc6 <SUBGRF_SetRfTxPower+0x4e>
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d003      	beq.n	801aca6 <SUBGRF_SetRfTxPower+0x2e>
 801ac9e:	68bb      	ldr	r3, [r7, #8]
 801aca0:	2b01      	cmp	r3, #1
 801aca2:	d00a      	beq.n	801acba <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801aca4:	e00f      	b.n	801acc6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801aca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801acaa:	2b0f      	cmp	r3, #15
 801acac:	dd02      	ble.n	801acb4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801acae:	2302      	movs	r3, #2
 801acb0:	73fb      	strb	r3, [r7, #15]
            break;
 801acb2:	e009      	b.n	801acc8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801acb4:	2301      	movs	r3, #1
 801acb6:	73fb      	strb	r3, [r7, #15]
            break;
 801acb8:	e006      	b.n	801acc8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801acba:	2301      	movs	r3, #1
 801acbc:	73fb      	strb	r3, [r7, #15]
            break;
 801acbe:	e003      	b.n	801acc8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801acc0:	2302      	movs	r3, #2
 801acc2:	73fb      	strb	r3, [r7, #15]
            break;
 801acc4:	e000      	b.n	801acc8 <SUBGRF_SetRfTxPower+0x50>
            break;
 801acc6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801acc8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801accc:	7bfb      	ldrb	r3, [r7, #15]
 801acce:	2202      	movs	r2, #2
 801acd0:	4618      	mov	r0, r3
 801acd2:	f7ff fbcd 	bl	801a470 <SUBGRF_SetTxParams>

    return paSelect;
 801acd6:	7bfb      	ldrb	r3, [r7, #15]
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3710      	adds	r7, #16
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}

0801ace0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801ace0:	b480      	push	{r7}
 801ace2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801ace4:	2301      	movs	r3, #1
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	46bd      	mov	sp, r7
 801acea:	bc80      	pop	{r7}
 801acec:	4770      	bx	lr
	...

0801acf0 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b082      	sub	sp, #8
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801acf8:	4b03      	ldr	r3, [pc, #12]	; (801ad08 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	2001      	movs	r0, #1
 801acfe:	4798      	blx	r3
}
 801ad00:	bf00      	nop
 801ad02:	3708      	adds	r7, #8
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}
 801ad08:	20001cc4 	.word	0x20001cc4

0801ad0c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b082      	sub	sp, #8
 801ad10:	af00      	add	r7, sp, #0
 801ad12:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801ad14:	4b03      	ldr	r3, [pc, #12]	; (801ad24 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	2002      	movs	r0, #2
 801ad1a:	4798      	blx	r3
}
 801ad1c:	bf00      	nop
 801ad1e:	3708      	adds	r7, #8
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bd80      	pop	{r7, pc}
 801ad24:	20001cc4 	.word	0x20001cc4

0801ad28 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b082      	sub	sp, #8
 801ad2c:	af00      	add	r7, sp, #0
 801ad2e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801ad30:	4b03      	ldr	r3, [pc, #12]	; (801ad40 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	2040      	movs	r0, #64	; 0x40
 801ad36:	4798      	blx	r3
}
 801ad38:	bf00      	nop
 801ad3a:	3708      	adds	r7, #8
 801ad3c:	46bd      	mov	sp, r7
 801ad3e:	bd80      	pop	{r7, pc}
 801ad40:	20001cc4 	.word	0x20001cc4

0801ad44 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801ad44:	b580      	push	{r7, lr}
 801ad46:	b082      	sub	sp, #8
 801ad48:	af00      	add	r7, sp, #0
 801ad4a:	6078      	str	r0, [r7, #4]
 801ad4c:	460b      	mov	r3, r1
 801ad4e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801ad50:	78fb      	ldrb	r3, [r7, #3]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d002      	beq.n	801ad5c <HAL_SUBGHZ_CADStatusCallback+0x18>
 801ad56:	2b01      	cmp	r3, #1
 801ad58:	d005      	beq.n	801ad66 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801ad5a:	e00a      	b.n	801ad72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801ad5c:	4b07      	ldr	r3, [pc, #28]	; (801ad7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	2080      	movs	r0, #128	; 0x80
 801ad62:	4798      	blx	r3
            break;
 801ad64:	e005      	b.n	801ad72 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801ad66:	4b05      	ldr	r3, [pc, #20]	; (801ad7c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801ad6e:	4798      	blx	r3
            break;
 801ad70:	bf00      	nop
    }
}
 801ad72:	bf00      	nop
 801ad74:	3708      	adds	r7, #8
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	20001cc4 	.word	0x20001cc4

0801ad80 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b082      	sub	sp, #8
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801ad88:	4b04      	ldr	r3, [pc, #16]	; (801ad9c <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 801ad90:	4798      	blx	r3
}
 801ad92:	bf00      	nop
 801ad94:	3708      	adds	r7, #8
 801ad96:	46bd      	mov	sp, r7
 801ad98:	bd80      	pop	{r7, pc}
 801ad9a:	bf00      	nop
 801ad9c:	20001cc4 	.word	0x20001cc4

0801ada0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b082      	sub	sp, #8
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801ada8:	4b03      	ldr	r3, [pc, #12]	; (801adb8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	2020      	movs	r0, #32
 801adae:	4798      	blx	r3
}
 801adb0:	bf00      	nop
 801adb2:	3708      	adds	r7, #8
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}
 801adb8:	20001cc4 	.word	0x20001cc4

0801adbc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b082      	sub	sp, #8
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801adc4:	4b03      	ldr	r3, [pc, #12]	; (801add4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	2004      	movs	r0, #4
 801adca:	4798      	blx	r3
}
 801adcc:	bf00      	nop
 801adce:	3708      	adds	r7, #8
 801add0:	46bd      	mov	sp, r7
 801add2:	bd80      	pop	{r7, pc}
 801add4:	20001cc4 	.word	0x20001cc4

0801add8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b082      	sub	sp, #8
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801ade0:	4b03      	ldr	r3, [pc, #12]	; (801adf0 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	2008      	movs	r0, #8
 801ade6:	4798      	blx	r3
}
 801ade8:	bf00      	nop
 801adea:	3708      	adds	r7, #8
 801adec:	46bd      	mov	sp, r7
 801adee:	bd80      	pop	{r7, pc}
 801adf0:	20001cc4 	.word	0x20001cc4

0801adf4 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801adf4:	b580      	push	{r7, lr}
 801adf6:	b082      	sub	sp, #8
 801adf8:	af00      	add	r7, sp, #0
 801adfa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801adfc:	4b03      	ldr	r3, [pc, #12]	; (801ae0c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	2010      	movs	r0, #16
 801ae02:	4798      	blx	r3
}
 801ae04:	bf00      	nop
 801ae06:	3708      	adds	r7, #8
 801ae08:	46bd      	mov	sp, r7
 801ae0a:	bd80      	pop	{r7, pc}
 801ae0c:	20001cc4 	.word	0x20001cc4

0801ae10 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801ae10:	b580      	push	{r7, lr}
 801ae12:	b084      	sub	sp, #16
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	4603      	mov	r3, r0
 801ae18:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801ae1a:	f7f0 fca4 	bl	800b766 <RBI_IsDCDC>
 801ae1e:	4603      	mov	r3, r0
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d112      	bne.n	801ae4a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ae24:	f640 1023 	movw	r0, #2339	; 0x923
 801ae28:	f7ff fe1e 	bl	801aa68 <SUBGRF_ReadRegister>
 801ae2c:	4603      	mov	r3, r0
 801ae2e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ae30:	7bfb      	ldrb	r3, [r7, #15]
 801ae32:	f023 0306 	bic.w	r3, r3, #6
 801ae36:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ae38:	7bfa      	ldrb	r2, [r7, #15]
 801ae3a:	79fb      	ldrb	r3, [r7, #7]
 801ae3c:	4313      	orrs	r3, r2
 801ae3e:	b2db      	uxtb	r3, r3
 801ae40:	4619      	mov	r1, r3
 801ae42:	f640 1023 	movw	r0, #2339	; 0x923
 801ae46:	f7ff fdfb 	bl	801aa40 <SUBGRF_WriteRegister>
  }
}
 801ae4a:	bf00      	nop
 801ae4c:	3710      	adds	r7, #16
 801ae4e:	46bd      	mov	sp, r7
 801ae50:	bd80      	pop	{r7, pc}
	...

0801ae54 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ae54:	b480      	push	{r7}
 801ae56:	b085      	sub	sp, #20
 801ae58:	af00      	add	r7, sp, #0
 801ae5a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d101      	bne.n	801ae66 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ae62:	231f      	movs	r3, #31
 801ae64:	e016      	b.n	801ae94 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ae66:	2300      	movs	r3, #0
 801ae68:	73fb      	strb	r3, [r7, #15]
 801ae6a:	e00f      	b.n	801ae8c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801ae6c:	7bfb      	ldrb	r3, [r7, #15]
 801ae6e:	4a0c      	ldr	r2, [pc, #48]	; (801aea0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ae70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ae74:	687a      	ldr	r2, [r7, #4]
 801ae76:	429a      	cmp	r2, r3
 801ae78:	d205      	bcs.n	801ae86 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ae7a:	7bfb      	ldrb	r3, [r7, #15]
 801ae7c:	4a08      	ldr	r2, [pc, #32]	; (801aea0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ae7e:	00db      	lsls	r3, r3, #3
 801ae80:	4413      	add	r3, r2
 801ae82:	791b      	ldrb	r3, [r3, #4]
 801ae84:	e006      	b.n	801ae94 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ae86:	7bfb      	ldrb	r3, [r7, #15]
 801ae88:	3301      	adds	r3, #1
 801ae8a:	73fb      	strb	r3, [r7, #15]
 801ae8c:	7bfb      	ldrb	r3, [r7, #15]
 801ae8e:	2b15      	cmp	r3, #21
 801ae90:	d9ec      	bls.n	801ae6c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 801ae92:	e7fe      	b.n	801ae92 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	3714      	adds	r7, #20
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bc80      	pop	{r7}
 801ae9c:	4770      	bx	lr
 801ae9e:	bf00      	nop
 801aea0:	0801d5c0 	.word	0x0801d5c0

0801aea4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801aea4:	b580      	push	{r7, lr}
 801aea6:	b08a      	sub	sp, #40	; 0x28
 801aea8:	af00      	add	r7, sp, #0
 801aeaa:	6078      	str	r0, [r7, #4]
 801aeac:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801aeae:	4b35      	ldr	r3, [pc, #212]	; (801af84 <SUBGRF_GetCFO+0xe0>)
 801aeb0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801aeb2:	f640 0007 	movw	r0, #2055	; 0x807
 801aeb6:	f7ff fdd7 	bl	801aa68 <SUBGRF_ReadRegister>
 801aeba:	4603      	mov	r3, r0
 801aebc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801aebe:	7ffb      	ldrb	r3, [r7, #31]
 801aec0:	08db      	lsrs	r3, r3, #3
 801aec2:	b2db      	uxtb	r3, r3
 801aec4:	f003 0303 	and.w	r3, r3, #3
 801aec8:	3328      	adds	r3, #40	; 0x28
 801aeca:	443b      	add	r3, r7
 801aecc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801aed0:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801aed2:	7ffb      	ldrb	r3, [r7, #31]
 801aed4:	f003 0307 	and.w	r3, r3, #7
 801aed8:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 801aeda:	7fba      	ldrb	r2, [r7, #30]
 801aedc:	7f7b      	ldrb	r3, [r7, #29]
 801aede:	3b01      	subs	r3, #1
 801aee0:	fa02 f303 	lsl.w	r3, r2, r3
 801aee4:	461a      	mov	r2, r3
 801aee6:	4b28      	ldr	r3, [pc, #160]	; (801af88 <SUBGRF_GetCFO+0xe4>)
 801aee8:	fbb3 f3f2 	udiv	r3, r3, r2
 801aeec:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801aeee:	69ba      	ldr	r2, [r7, #24]
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	fbb2 f3f3 	udiv	r3, r2, r3
 801aef6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801aef8:	2301      	movs	r3, #1
 801aefa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801aefe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af02:	697a      	ldr	r2, [r7, #20]
 801af04:	fb02 f303 	mul.w	r3, r2, r3
 801af08:	2b07      	cmp	r3, #7
 801af0a:	d802      	bhi.n	801af12 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801af0c:	2302      	movs	r3, #2
 801af0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801af12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801af16:	697a      	ldr	r2, [r7, #20]
 801af18:	fb02 f303 	mul.w	r3, r2, r3
 801af1c:	2b03      	cmp	r3, #3
 801af1e:	d802      	bhi.n	801af26 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801af20:	2304      	movs	r3, #4
 801af22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801af26:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801af2a:	69bb      	ldr	r3, [r7, #24]
 801af2c:	fb02 f303 	mul.w	r3, r2, r3
 801af30:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801af32:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801af36:	f7ff fd97 	bl	801aa68 <SUBGRF_ReadRegister>
 801af3a:	4603      	mov	r3, r0
 801af3c:	021b      	lsls	r3, r3, #8
 801af3e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801af42:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801af44:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801af48:	f7ff fd8e 	bl	801aa68 <SUBGRF_ReadRegister>
 801af4c:	4603      	mov	r3, r0
 801af4e:	461a      	mov	r2, r3
 801af50:	6a3b      	ldr	r3, [r7, #32]
 801af52:	4313      	orrs	r3, r2
 801af54:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801af56:	6a3b      	ldr	r3, [r7, #32]
 801af58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d005      	beq.n	801af6c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801af60:	6a3b      	ldr	r3, [r7, #32]
 801af62:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801af66:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801af6a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801af6c:	693b      	ldr	r3, [r7, #16]
 801af6e:	095b      	lsrs	r3, r3, #5
 801af70:	6a3a      	ldr	r2, [r7, #32]
 801af72:	fb02 f303 	mul.w	r3, r2, r3
 801af76:	11da      	asrs	r2, r3, #7
 801af78:	683b      	ldr	r3, [r7, #0]
 801af7a:	601a      	str	r2, [r3, #0]
}
 801af7c:	bf00      	nop
 801af7e:	3728      	adds	r7, #40	; 0x28
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}
 801af84:	0c0a0804 	.word	0x0c0a0804
 801af88:	01e84800 	.word	0x01e84800

0801af8c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 801af8c:	b480      	push	{r7}
 801af8e:	b087      	sub	sp, #28
 801af90:	af00      	add	r7, sp, #0
 801af92:	4603      	mov	r3, r0
 801af94:	60b9      	str	r1, [r7, #8]
 801af96:	607a      	str	r2, [r7, #4]
 801af98:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 801af9a:	2300      	movs	r3, #0
 801af9c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 801af9e:	f04f 33ff 	mov.w	r3, #4294967295
 801afa2:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801afa4:	697b      	ldr	r3, [r7, #20]
}
 801afa6:	4618      	mov	r0, r3
 801afa8:	371c      	adds	r7, #28
 801afaa:	46bd      	mov	sp, r7
 801afac:	bc80      	pop	{r7}
 801afae:	4770      	bx	lr

0801afb0 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 801afb0:	b480      	push	{r7}
 801afb2:	b087      	sub	sp, #28
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	4603      	mov	r3, r0
 801afb8:	60b9      	str	r1, [r7, #8]
 801afba:	607a      	str	r2, [r7, #4]
 801afbc:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 801afbe:	2300      	movs	r3, #0
 801afc0:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 801afc2:	f04f 33ff 	mov.w	r3, #4294967295
 801afc6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 801afc8:	697b      	ldr	r3, [r7, #20]
}
 801afca:	4618      	mov	r0, r3
 801afcc:	371c      	adds	r7, #28
 801afce:	46bd      	mov	sp, r7
 801afd0:	bc80      	pop	{r7}
 801afd2:	4770      	bx	lr

0801afd4 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 801afd4:	b480      	push	{r7}
 801afd6:	b085      	sub	sp, #20
 801afd8:	af00      	add	r7, sp, #0
 801afda:	60f8      	str	r0, [r7, #12]
 801afdc:	60b9      	str	r1, [r7, #8]
 801afde:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 801afe0:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801afe4:	4618      	mov	r0, r3
 801afe6:	3714      	adds	r7, #20
 801afe8:	46bd      	mov	sp, r7
 801afea:	bc80      	pop	{r7}
 801afec:	4770      	bx	lr

0801afee <RFW_DeInit>:

void RFW_DeInit( void)
{
 801afee:	b480      	push	{r7}
 801aff0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 801aff2:	bf00      	nop
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bc80      	pop	{r7}
 801aff8:	4770      	bx	lr

0801affa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 801affa:	b480      	push	{r7}
 801affc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 801affe:	2300      	movs	r3, #0
#endif
}
 801b000:	4618      	mov	r0, r3
 801b002:	46bd      	mov	sp, r7
 801b004:	bc80      	pop	{r7}
 801b006:	4770      	bx	lr

0801b008 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 801b008:	b480      	push	{r7}
 801b00a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 801b00c:	2300      	movs	r3, #0
#endif
}
 801b00e:	4618      	mov	r0, r3
 801b010:	46bd      	mov	sp, r7
 801b012:	bc80      	pop	{r7}
 801b014:	4770      	bx	lr

0801b016 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 801b016:	b480      	push	{r7}
 801b018:	b083      	sub	sp, #12
 801b01a:	af00      	add	r7, sp, #0
 801b01c:	4603      	mov	r3, r0
 801b01e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 801b020:	bf00      	nop
 801b022:	370c      	adds	r7, #12
 801b024:	46bd      	mov	sp, r7
 801b026:	bc80      	pop	{r7}
 801b028:	4770      	bx	lr

0801b02a <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 801b02a:	b480      	push	{r7}
 801b02c:	b087      	sub	sp, #28
 801b02e:	af00      	add	r7, sp, #0
 801b030:	60f8      	str	r0, [r7, #12]
 801b032:	460b      	mov	r3, r1
 801b034:	607a      	str	r2, [r7, #4]
 801b036:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 801b038:	f04f 33ff 	mov.w	r3, #4294967295
 801b03c:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 801b03e:	697b      	ldr	r3, [r7, #20]
}
 801b040:	4618      	mov	r0, r3
 801b042:	371c      	adds	r7, #28
 801b044:	46bd      	mov	sp, r7
 801b046:	bc80      	pop	{r7}
 801b048:	4770      	bx	lr

0801b04a <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801b04a:	b480      	push	{r7}
 801b04c:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 801b04e:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 801b052:	4618      	mov	r0, r3
 801b054:	46bd      	mov	sp, r7
 801b056:	bc80      	pop	{r7}
 801b058:	4770      	bx	lr

0801b05a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 801b05a:	b480      	push	{r7}
 801b05c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 801b05e:	bf00      	nop
 801b060:	46bd      	mov	sp, r7
 801b062:	bc80      	pop	{r7}
 801b064:	4770      	bx	lr

0801b066 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801b066:	b480      	push	{r7}
 801b068:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 801b06a:	bf00      	nop
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bc80      	pop	{r7}
 801b070:	4770      	bx	lr

0801b072 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 801b072:	b480      	push	{r7}
 801b074:	b083      	sub	sp, #12
 801b076:	af00      	add	r7, sp, #0
 801b078:	4603      	mov	r3, r0
 801b07a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 801b07c:	bf00      	nop
 801b07e:	370c      	adds	r7, #12
 801b080:	46bd      	mov	sp, r7
 801b082:	bc80      	pop	{r7}
 801b084:	4770      	bx	lr
	...

0801b088 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801b088:	b480      	push	{r7}
 801b08a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801b08c:	4b04      	ldr	r3, [pc, #16]	; (801b0a0 <UTIL_LPM_Init+0x18>)
 801b08e:	2200      	movs	r2, #0
 801b090:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801b092:	4b04      	ldr	r3, [pc, #16]	; (801b0a4 <UTIL_LPM_Init+0x1c>)
 801b094:	2200      	movs	r2, #0
 801b096:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801b098:	bf00      	nop
 801b09a:	46bd      	mov	sp, r7
 801b09c:	bc80      	pop	{r7}
 801b09e:	4770      	bx	lr
 801b0a0:	20001cc8 	.word	0x20001cc8
 801b0a4:	20001ccc 	.word	0x20001ccc

0801b0a8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b0a8:	b480      	push	{r7}
 801b0aa:	b087      	sub	sp, #28
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b0b4:	f3ef 8310 	mrs	r3, PRIMASK
 801b0b8:	613b      	str	r3, [r7, #16]
  return(result);
 801b0ba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b0bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b0be:	b672      	cpsid	i
}
 801b0c0:	bf00      	nop
  
  switch( state )
 801b0c2:	78fb      	ldrb	r3, [r7, #3]
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	d008      	beq.n	801b0da <UTIL_LPM_SetStopMode+0x32>
 801b0c8:	2b01      	cmp	r3, #1
 801b0ca:	d10e      	bne.n	801b0ea <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801b0cc:	4b0d      	ldr	r3, [pc, #52]	; (801b104 <UTIL_LPM_SetStopMode+0x5c>)
 801b0ce:	681a      	ldr	r2, [r3, #0]
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	4313      	orrs	r3, r2
 801b0d4:	4a0b      	ldr	r2, [pc, #44]	; (801b104 <UTIL_LPM_SetStopMode+0x5c>)
 801b0d6:	6013      	str	r3, [r2, #0]
      break;
 801b0d8:	e008      	b.n	801b0ec <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	43da      	mvns	r2, r3
 801b0de:	4b09      	ldr	r3, [pc, #36]	; (801b104 <UTIL_LPM_SetStopMode+0x5c>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4013      	ands	r3, r2
 801b0e4:	4a07      	ldr	r2, [pc, #28]	; (801b104 <UTIL_LPM_SetStopMode+0x5c>)
 801b0e6:	6013      	str	r3, [r2, #0]
      break;
 801b0e8:	e000      	b.n	801b0ec <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801b0ea:	bf00      	nop
 801b0ec:	697b      	ldr	r3, [r7, #20]
 801b0ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	f383 8810 	msr	PRIMASK, r3
}
 801b0f6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b0f8:	bf00      	nop
 801b0fa:	371c      	adds	r7, #28
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bc80      	pop	{r7}
 801b100:	4770      	bx	lr
 801b102:	bf00      	nop
 801b104:	20001cc8 	.word	0x20001cc8

0801b108 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801b108:	b480      	push	{r7}
 801b10a:	b087      	sub	sp, #28
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
 801b110:	460b      	mov	r3, r1
 801b112:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b114:	f3ef 8310 	mrs	r3, PRIMASK
 801b118:	613b      	str	r3, [r7, #16]
  return(result);
 801b11a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801b11c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b11e:	b672      	cpsid	i
}
 801b120:	bf00      	nop
  
  switch(state)
 801b122:	78fb      	ldrb	r3, [r7, #3]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d008      	beq.n	801b13a <UTIL_LPM_SetOffMode+0x32>
 801b128:	2b01      	cmp	r3, #1
 801b12a:	d10e      	bne.n	801b14a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801b12c:	4b0d      	ldr	r3, [pc, #52]	; (801b164 <UTIL_LPM_SetOffMode+0x5c>)
 801b12e:	681a      	ldr	r2, [r3, #0]
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	4313      	orrs	r3, r2
 801b134:	4a0b      	ldr	r2, [pc, #44]	; (801b164 <UTIL_LPM_SetOffMode+0x5c>)
 801b136:	6013      	str	r3, [r2, #0]
      break;
 801b138:	e008      	b.n	801b14c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	43da      	mvns	r2, r3
 801b13e:	4b09      	ldr	r3, [pc, #36]	; (801b164 <UTIL_LPM_SetOffMode+0x5c>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	4013      	ands	r3, r2
 801b144:	4a07      	ldr	r2, [pc, #28]	; (801b164 <UTIL_LPM_SetOffMode+0x5c>)
 801b146:	6013      	str	r3, [r2, #0]
      break;
 801b148:	e000      	b.n	801b14c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801b14a:	bf00      	nop
 801b14c:	697b      	ldr	r3, [r7, #20]
 801b14e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	f383 8810 	msr	PRIMASK, r3
}
 801b156:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801b158:	bf00      	nop
 801b15a:	371c      	adds	r7, #28
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bc80      	pop	{r7}
 801b160:	4770      	bx	lr
 801b162:	bf00      	nop
 801b164:	20001ccc 	.word	0x20001ccc

0801b168 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801b168:	b480      	push	{r7}
 801b16a:	b087      	sub	sp, #28
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	60f8      	str	r0, [r7, #12]
 801b170:	60b9      	str	r1, [r7, #8]
 801b172:	4613      	mov	r3, r2
 801b174:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801b17a:	68bb      	ldr	r3, [r7, #8]
 801b17c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801b17e:	e007      	b.n	801b190 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801b180:	693a      	ldr	r2, [r7, #16]
 801b182:	1c53      	adds	r3, r2, #1
 801b184:	613b      	str	r3, [r7, #16]
 801b186:	697b      	ldr	r3, [r7, #20]
 801b188:	1c59      	adds	r1, r3, #1
 801b18a:	6179      	str	r1, [r7, #20]
 801b18c:	7812      	ldrb	r2, [r2, #0]
 801b18e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b190:	88fb      	ldrh	r3, [r7, #6]
 801b192:	1e5a      	subs	r2, r3, #1
 801b194:	80fa      	strh	r2, [r7, #6]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d1f2      	bne.n	801b180 <UTIL_MEM_cpy_8+0x18>
    }
}
 801b19a:	bf00      	nop
 801b19c:	bf00      	nop
 801b19e:	371c      	adds	r7, #28
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	bc80      	pop	{r7}
 801b1a4:	4770      	bx	lr

0801b1a6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801b1a6:	b480      	push	{r7}
 801b1a8:	b085      	sub	sp, #20
 801b1aa:	af00      	add	r7, sp, #0
 801b1ac:	6078      	str	r0, [r7, #4]
 801b1ae:	460b      	mov	r3, r1
 801b1b0:	70fb      	strb	r3, [r7, #3]
 801b1b2:	4613      	mov	r3, r2
 801b1b4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801b1ba:	e004      	b.n	801b1c6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	1c5a      	adds	r2, r3, #1
 801b1c0:	60fa      	str	r2, [r7, #12]
 801b1c2:	78fa      	ldrb	r2, [r7, #3]
 801b1c4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801b1c6:	883b      	ldrh	r3, [r7, #0]
 801b1c8:	1e5a      	subs	r2, r3, #1
 801b1ca:	803a      	strh	r2, [r7, #0]
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d1f5      	bne.n	801b1bc <UTIL_MEM_set_8+0x16>
  }
}
 801b1d0:	bf00      	nop
 801b1d2:	bf00      	nop
 801b1d4:	3714      	adds	r7, #20
 801b1d6:	46bd      	mov	sp, r7
 801b1d8:	bc80      	pop	{r7}
 801b1da:	4770      	bx	lr

0801b1dc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801b1dc:	b082      	sub	sp, #8
 801b1de:	b480      	push	{r7}
 801b1e0:	b087      	sub	sp, #28
 801b1e2:	af00      	add	r7, sp, #0
 801b1e4:	60f8      	str	r0, [r7, #12]
 801b1e6:	1d38      	adds	r0, r7, #4
 801b1e8:	e880 0006 	stmia.w	r0, {r1, r2}
 801b1ec:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801b1ee:	2300      	movs	r3, #0
 801b1f0:	613b      	str	r3, [r7, #16]
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801b1f6:	687a      	ldr	r2, [r7, #4]
 801b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fa:	4413      	add	r3, r2
 801b1fc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801b1fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b202:	b29a      	uxth	r2, r3
 801b204:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b208:	b29b      	uxth	r3, r3
 801b20a:	4413      	add	r3, r2
 801b20c:	b29b      	uxth	r3, r3
 801b20e:	b21b      	sxth	r3, r3
 801b210:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801b212:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b216:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801b21a:	db0a      	blt.n	801b232 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801b21c:	693b      	ldr	r3, [r7, #16]
 801b21e:	3301      	adds	r3, #1
 801b220:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801b222:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b226:	b29b      	uxth	r3, r3
 801b228:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801b22c:	b29b      	uxth	r3, r3
 801b22e:	b21b      	sxth	r3, r3
 801b230:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	461a      	mov	r2, r3
 801b236:	f107 0310 	add.w	r3, r7, #16
 801b23a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b23e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b242:	68f8      	ldr	r0, [r7, #12]
 801b244:	371c      	adds	r7, #28
 801b246:	46bd      	mov	sp, r7
 801b248:	bc80      	pop	{r7}
 801b24a:	b002      	add	sp, #8
 801b24c:	4770      	bx	lr

0801b24e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801b24e:	b082      	sub	sp, #8
 801b250:	b480      	push	{r7}
 801b252:	b087      	sub	sp, #28
 801b254:	af00      	add	r7, sp, #0
 801b256:	60f8      	str	r0, [r7, #12]
 801b258:	1d38      	adds	r0, r7, #4
 801b25a:	e880 0006 	stmia.w	r0, {r1, r2}
 801b25e:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801b260:	2300      	movs	r3, #0
 801b262:	613b      	str	r3, [r7, #16]
 801b264:	2300      	movs	r3, #0
 801b266:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801b268:	687a      	ldr	r2, [r7, #4]
 801b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b26c:	1ad3      	subs	r3, r2, r3
 801b26e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801b270:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801b274:	b29a      	uxth	r2, r3
 801b276:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	1ad3      	subs	r3, r2, r3
 801b27e:	b29b      	uxth	r3, r3
 801b280:	b21b      	sxth	r3, r3
 801b282:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801b284:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	da0a      	bge.n	801b2a2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801b28c:	693b      	ldr	r3, [r7, #16]
 801b28e:	3b01      	subs	r3, #1
 801b290:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801b292:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801b296:	b29b      	uxth	r3, r3
 801b298:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801b29c:	b29b      	uxth	r3, r3
 801b29e:	b21b      	sxth	r3, r3
 801b2a0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b2a2:	68fb      	ldr	r3, [r7, #12]
 801b2a4:	461a      	mov	r2, r3
 801b2a6:	f107 0310 	add.w	r3, r7, #16
 801b2aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b2ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b2b2:	68f8      	ldr	r0, [r7, #12]
 801b2b4:	371c      	adds	r7, #28
 801b2b6:	46bd      	mov	sp, r7
 801b2b8:	bc80      	pop	{r7}
 801b2ba:	b002      	add	sp, #8
 801b2bc:	4770      	bx	lr
	...

0801b2c0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b2c0:	b580      	push	{r7, lr}
 801b2c2:	b088      	sub	sp, #32
 801b2c4:	af02      	add	r7, sp, #8
 801b2c6:	463b      	mov	r3, r7
 801b2c8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	60bb      	str	r3, [r7, #8]
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b2d4:	4b10      	ldr	r3, [pc, #64]	; (801b318 <SysTimeSet+0x58>)
 801b2d6:	691b      	ldr	r3, [r3, #16]
 801b2d8:	f107 0208 	add.w	r2, r7, #8
 801b2dc:	3204      	adds	r2, #4
 801b2de:	4610      	mov	r0, r2
 801b2e0:	4798      	blx	r3
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b2e6:	f107 0010 	add.w	r0, r7, #16
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	9300      	str	r3, [sp, #0]
 801b2ee:	68bb      	ldr	r3, [r7, #8]
 801b2f0:	463a      	mov	r2, r7
 801b2f2:	ca06      	ldmia	r2, {r1, r2}
 801b2f4:	f7ff ffab 	bl	801b24e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b2f8:	4b07      	ldr	r3, [pc, #28]	; (801b318 <SysTimeSet+0x58>)
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	693a      	ldr	r2, [r7, #16]
 801b2fe:	4610      	mov	r0, r2
 801b300:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b302:	4b05      	ldr	r3, [pc, #20]	; (801b318 <SysTimeSet+0x58>)
 801b304:	689b      	ldr	r3, [r3, #8]
 801b306:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b30a:	4610      	mov	r0, r2
 801b30c:	4798      	blx	r3
}
 801b30e:	bf00      	nop
 801b310:	3718      	adds	r7, #24
 801b312:	46bd      	mov	sp, r7
 801b314:	bd80      	pop	{r7, pc}
 801b316:	bf00      	nop
 801b318:	0801d18c 	.word	0x0801d18c

0801b31c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b08a      	sub	sp, #40	; 0x28
 801b320:	af02      	add	r7, sp, #8
 801b322:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b324:	2300      	movs	r3, #0
 801b326:	61bb      	str	r3, [r7, #24]
 801b328:	2300      	movs	r3, #0
 801b32a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b32c:	2300      	movs	r3, #0
 801b32e:	613b      	str	r3, [r7, #16]
 801b330:	2300      	movs	r3, #0
 801b332:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b334:	4b14      	ldr	r3, [pc, #80]	; (801b388 <SysTimeGet+0x6c>)
 801b336:	691b      	ldr	r3, [r3, #16]
 801b338:	f107 0218 	add.w	r2, r7, #24
 801b33c:	3204      	adds	r2, #4
 801b33e:	4610      	mov	r0, r2
 801b340:	4798      	blx	r3
 801b342:	4603      	mov	r3, r0
 801b344:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b346:	4b10      	ldr	r3, [pc, #64]	; (801b388 <SysTimeGet+0x6c>)
 801b348:	68db      	ldr	r3, [r3, #12]
 801b34a:	4798      	blx	r3
 801b34c:	4603      	mov	r3, r0
 801b34e:	b21b      	sxth	r3, r3
 801b350:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b352:	4b0d      	ldr	r3, [pc, #52]	; (801b388 <SysTimeGet+0x6c>)
 801b354:	685b      	ldr	r3, [r3, #4]
 801b356:	4798      	blx	r3
 801b358:	4603      	mov	r3, r0
 801b35a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b35c:	f107 0010 	add.w	r0, r7, #16
 801b360:	69fb      	ldr	r3, [r7, #28]
 801b362:	9300      	str	r3, [sp, #0]
 801b364:	69bb      	ldr	r3, [r7, #24]
 801b366:	f107 0208 	add.w	r2, r7, #8
 801b36a:	ca06      	ldmia	r2, {r1, r2}
 801b36c:	f7ff ff36 	bl	801b1dc <SysTimeAdd>

  return sysTime;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	461a      	mov	r2, r3
 801b374:	f107 0310 	add.w	r3, r7, #16
 801b378:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b37c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	3720      	adds	r7, #32
 801b384:	46bd      	mov	sp, r7
 801b386:	bd80      	pop	{r7, pc}
 801b388:	0801d18c 	.word	0x0801d18c

0801b38c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b084      	sub	sp, #16
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b394:	2300      	movs	r3, #0
 801b396:	60bb      	str	r3, [r7, #8]
 801b398:	2300      	movs	r3, #0
 801b39a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b39c:	4b0a      	ldr	r3, [pc, #40]	; (801b3c8 <SysTimeGetMcuTime+0x3c>)
 801b39e:	691b      	ldr	r3, [r3, #16]
 801b3a0:	f107 0208 	add.w	r2, r7, #8
 801b3a4:	3204      	adds	r2, #4
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	4798      	blx	r3
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	461a      	mov	r2, r3
 801b3b2:	f107 0308 	add.w	r3, r7, #8
 801b3b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b3be:	6878      	ldr	r0, [r7, #4]
 801b3c0:	3710      	adds	r7, #16
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	bd80      	pop	{r7, pc}
 801b3c6:	bf00      	nop
 801b3c8:	0801d18c 	.word	0x0801d18c

0801b3cc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b3cc:	b580      	push	{r7, lr}
 801b3ce:	b088      	sub	sp, #32
 801b3d0:	af02      	add	r7, sp, #8
 801b3d2:	463b      	mov	r3, r7
 801b3d4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b3d8:	4b0f      	ldr	r3, [pc, #60]	; (801b418 <SysTimeToMs+0x4c>)
 801b3da:	68db      	ldr	r3, [r3, #12]
 801b3dc:	4798      	blx	r3
 801b3de:	4603      	mov	r3, r0
 801b3e0:	b21b      	sxth	r3, r3
 801b3e2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b3e4:	4b0c      	ldr	r3, [pc, #48]	; (801b418 <SysTimeToMs+0x4c>)
 801b3e6:	685b      	ldr	r3, [r3, #4]
 801b3e8:	4798      	blx	r3
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b3ee:	f107 0008 	add.w	r0, r7, #8
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	9300      	str	r3, [sp, #0]
 801b3f6:	693b      	ldr	r3, [r7, #16]
 801b3f8:	463a      	mov	r2, r7
 801b3fa:	ca06      	ldmia	r2, {r1, r2}
 801b3fc:	f7ff ff27 	bl	801b24e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b400:	68bb      	ldr	r3, [r7, #8]
 801b402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b406:	fb02 f303 	mul.w	r3, r2, r3
 801b40a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b40e:	4413      	add	r3, r2
}
 801b410:	4618      	mov	r0, r3
 801b412:	3718      	adds	r7, #24
 801b414:	46bd      	mov	sp, r7
 801b416:	bd80      	pop	{r7, pc}
 801b418:	0801d18c 	.word	0x0801d18c

0801b41c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b41c:	b580      	push	{r7, lr}
 801b41e:	b08a      	sub	sp, #40	; 0x28
 801b420:	af02      	add	r7, sp, #8
 801b422:	6078      	str	r0, [r7, #4]
 801b424:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b426:	683b      	ldr	r3, [r7, #0]
 801b428:	4a19      	ldr	r2, [pc, #100]	; (801b490 <SysTimeFromMs+0x74>)
 801b42a:	fba2 2303 	umull	r2, r3, r2, r3
 801b42e:	099b      	lsrs	r3, r3, #6
 801b430:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b432:	69fb      	ldr	r3, [r7, #28]
 801b434:	617b      	str	r3, [r7, #20]
 801b436:	683b      	ldr	r3, [r7, #0]
 801b438:	b29a      	uxth	r2, r3
 801b43a:	69fb      	ldr	r3, [r7, #28]
 801b43c:	b29b      	uxth	r3, r3
 801b43e:	4619      	mov	r1, r3
 801b440:	0149      	lsls	r1, r1, #5
 801b442:	1ac9      	subs	r1, r1, r3
 801b444:	0089      	lsls	r1, r1, #2
 801b446:	440b      	add	r3, r1
 801b448:	00db      	lsls	r3, r3, #3
 801b44a:	b29b      	uxth	r3, r3
 801b44c:	1ad3      	subs	r3, r2, r3
 801b44e:	b29b      	uxth	r3, r3
 801b450:	b21b      	sxth	r3, r3
 801b452:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b454:	f107 030c 	add.w	r3, r7, #12
 801b458:	2200      	movs	r2, #0
 801b45a:	601a      	str	r2, [r3, #0]
 801b45c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b45e:	4b0d      	ldr	r3, [pc, #52]	; (801b494 <SysTimeFromMs+0x78>)
 801b460:	68db      	ldr	r3, [r3, #12]
 801b462:	4798      	blx	r3
 801b464:	4603      	mov	r3, r0
 801b466:	b21b      	sxth	r3, r3
 801b468:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b46a:	4b0a      	ldr	r3, [pc, #40]	; (801b494 <SysTimeFromMs+0x78>)
 801b46c:	685b      	ldr	r3, [r3, #4]
 801b46e:	4798      	blx	r3
 801b470:	4603      	mov	r3, r0
 801b472:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b474:	6878      	ldr	r0, [r7, #4]
 801b476:	693b      	ldr	r3, [r7, #16]
 801b478:	9300      	str	r3, [sp, #0]
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	f107 0214 	add.w	r2, r7, #20
 801b480:	ca06      	ldmia	r2, {r1, r2}
 801b482:	f7ff feab 	bl	801b1dc <SysTimeAdd>
}
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	3720      	adds	r7, #32
 801b48a:	46bd      	mov	sp, r7
 801b48c:	bd80      	pop	{r7, pc}
 801b48e:	bf00      	nop
 801b490:	10624dd3 	.word	0x10624dd3
 801b494:	0801d18c 	.word	0x0801d18c

0801b498 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b498:	b480      	push	{r7}
 801b49a:	b085      	sub	sp, #20
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b4a4:	e00e      	b.n	801b4c4 <ee_skip_atoi+0x2c>
 801b4a6:	68fa      	ldr	r2, [r7, #12]
 801b4a8:	4613      	mov	r3, r2
 801b4aa:	009b      	lsls	r3, r3, #2
 801b4ac:	4413      	add	r3, r2
 801b4ae:	005b      	lsls	r3, r3, #1
 801b4b0:	4618      	mov	r0, r3
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	1c59      	adds	r1, r3, #1
 801b4b8:	687a      	ldr	r2, [r7, #4]
 801b4ba:	6011      	str	r1, [r2, #0]
 801b4bc:	781b      	ldrb	r3, [r3, #0]
 801b4be:	4403      	add	r3, r0
 801b4c0:	3b30      	subs	r3, #48	; 0x30
 801b4c2:	60fb      	str	r3, [r7, #12]
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	781b      	ldrb	r3, [r3, #0]
 801b4ca:	2b2f      	cmp	r3, #47	; 0x2f
 801b4cc:	d904      	bls.n	801b4d8 <ee_skip_atoi+0x40>
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	2b39      	cmp	r3, #57	; 0x39
 801b4d6:	d9e6      	bls.n	801b4a6 <ee_skip_atoi+0xe>
  return i;
 801b4d8:	68fb      	ldr	r3, [r7, #12]
}
 801b4da:	4618      	mov	r0, r3
 801b4dc:	3714      	adds	r7, #20
 801b4de:	46bd      	mov	sp, r7
 801b4e0:	bc80      	pop	{r7}
 801b4e2:	4770      	bx	lr

0801b4e4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b4e4:	b480      	push	{r7}
 801b4e6:	b099      	sub	sp, #100	; 0x64
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	60f8      	str	r0, [r7, #12]
 801b4ec:	60b9      	str	r1, [r7, #8]
 801b4ee:	607a      	str	r2, [r7, #4]
 801b4f0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b4f2:	4b71      	ldr	r3, [pc, #452]	; (801b6b8 <ee_number+0x1d4>)
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b4f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d002      	beq.n	801b508 <ee_number+0x24>
 801b502:	4b6e      	ldr	r3, [pc, #440]	; (801b6bc <ee_number+0x1d8>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b508:	683b      	ldr	r3, [r7, #0]
 801b50a:	2b01      	cmp	r3, #1
 801b50c:	dd02      	ble.n	801b514 <ee_number+0x30>
 801b50e:	683b      	ldr	r3, [r7, #0]
 801b510:	2b24      	cmp	r3, #36	; 0x24
 801b512:	dd01      	ble.n	801b518 <ee_number+0x34>
 801b514:	2300      	movs	r3, #0
 801b516:	e0ca      	b.n	801b6ae <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b51a:	f003 0301 	and.w	r3, r3, #1
 801b51e:	2b00      	cmp	r3, #0
 801b520:	d001      	beq.n	801b526 <ee_number+0x42>
 801b522:	2330      	movs	r3, #48	; 0x30
 801b524:	e000      	b.n	801b528 <ee_number+0x44>
 801b526:	2320      	movs	r3, #32
 801b528:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801b52c:	2300      	movs	r3, #0
 801b52e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801b532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b534:	f003 0302 	and.w	r3, r3, #2
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d00b      	beq.n	801b554 <ee_number+0x70>
  {
    if (num < 0)
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	da08      	bge.n	801b554 <ee_number+0x70>
    {
      sign = '-';
 801b542:	232d      	movs	r3, #45	; 0x2d
 801b544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	425b      	negs	r3, r3
 801b54c:	607b      	str	r3, [r7, #4]
      size--;
 801b54e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b550:	3b01      	subs	r3, #1
 801b552:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b554:	2300      	movs	r3, #0
 801b556:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d11e      	bne.n	801b59c <ee_number+0xb8>
    tmp[i++] = '0';
 801b55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b560:	1c5a      	adds	r2, r3, #1
 801b562:	657a      	str	r2, [r7, #84]	; 0x54
 801b564:	3360      	adds	r3, #96	; 0x60
 801b566:	443b      	add	r3, r7
 801b568:	2230      	movs	r2, #48	; 0x30
 801b56a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b56e:	e018      	b.n	801b5a2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	683a      	ldr	r2, [r7, #0]
 801b574:	fbb3 f1f2 	udiv	r1, r3, r2
 801b578:	fb01 f202 	mul.w	r2, r1, r2
 801b57c:	1a9b      	subs	r3, r3, r2
 801b57e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b580:	441a      	add	r2, r3
 801b582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b584:	1c59      	adds	r1, r3, #1
 801b586:	6579      	str	r1, [r7, #84]	; 0x54
 801b588:	7812      	ldrb	r2, [r2, #0]
 801b58a:	3360      	adds	r3, #96	; 0x60
 801b58c:	443b      	add	r3, r7
 801b58e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b592:	687a      	ldr	r2, [r7, #4]
 801b594:	683b      	ldr	r3, [r7, #0]
 801b596:	fbb2 f3f3 	udiv	r3, r2, r3
 801b59a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d1e6      	bne.n	801b570 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b5a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5a6:	429a      	cmp	r2, r3
 801b5a8:	dd01      	ble.n	801b5ae <ee_number+0xca>
 801b5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b5ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801b5ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801b5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b5b2:	1ad3      	subs	r3, r2, r3
 801b5b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b5b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b5b8:	f003 0301 	and.w	r3, r3, #1
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d112      	bne.n	801b5e6 <ee_number+0x102>
 801b5c0:	e00c      	b.n	801b5dc <ee_number+0xf8>
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	1c5a      	adds	r2, r3, #1
 801b5c6:	60fa      	str	r2, [r7, #12]
 801b5c8:	2220      	movs	r2, #32
 801b5ca:	701a      	strb	r2, [r3, #0]
 801b5cc:	68bb      	ldr	r3, [r7, #8]
 801b5ce:	3b01      	subs	r3, #1
 801b5d0:	60bb      	str	r3, [r7, #8]
 801b5d2:	68bb      	ldr	r3, [r7, #8]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d101      	bne.n	801b5dc <ee_number+0xf8>
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	e068      	b.n	801b6ae <ee_number+0x1ca>
 801b5dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b5de:	1e5a      	subs	r2, r3, #1
 801b5e0:	66ba      	str	r2, [r7, #104]	; 0x68
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	dced      	bgt.n	801b5c2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b5e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d01b      	beq.n	801b626 <ee_number+0x142>
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	1c5a      	adds	r2, r3, #1
 801b5f2:	60fa      	str	r2, [r7, #12]
 801b5f4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801b5f8:	701a      	strb	r2, [r3, #0]
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	3b01      	subs	r3, #1
 801b5fe:	60bb      	str	r3, [r7, #8]
 801b600:	68bb      	ldr	r3, [r7, #8]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d10f      	bne.n	801b626 <ee_number+0x142>
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	e051      	b.n	801b6ae <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b60a:	68fb      	ldr	r3, [r7, #12]
 801b60c:	1c5a      	adds	r2, r3, #1
 801b60e:	60fa      	str	r2, [r7, #12]
 801b610:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801b614:	701a      	strb	r2, [r3, #0]
 801b616:	68bb      	ldr	r3, [r7, #8]
 801b618:	3b01      	subs	r3, #1
 801b61a:	60bb      	str	r3, [r7, #8]
 801b61c:	68bb      	ldr	r3, [r7, #8]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	d101      	bne.n	801b626 <ee_number+0x142>
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	e043      	b.n	801b6ae <ee_number+0x1ca>
 801b626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b628:	1e5a      	subs	r2, r3, #1
 801b62a:	66ba      	str	r2, [r7, #104]	; 0x68
 801b62c:	2b00      	cmp	r3, #0
 801b62e:	dcec      	bgt.n	801b60a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b630:	e00c      	b.n	801b64c <ee_number+0x168>
 801b632:	68fb      	ldr	r3, [r7, #12]
 801b634:	1c5a      	adds	r2, r3, #1
 801b636:	60fa      	str	r2, [r7, #12]
 801b638:	2230      	movs	r2, #48	; 0x30
 801b63a:	701a      	strb	r2, [r3, #0]
 801b63c:	68bb      	ldr	r3, [r7, #8]
 801b63e:	3b01      	subs	r3, #1
 801b640:	60bb      	str	r3, [r7, #8]
 801b642:	68bb      	ldr	r3, [r7, #8]
 801b644:	2b00      	cmp	r3, #0
 801b646:	d101      	bne.n	801b64c <ee_number+0x168>
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	e030      	b.n	801b6ae <ee_number+0x1ca>
 801b64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801b64e:	1e5a      	subs	r2, r3, #1
 801b650:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b654:	429a      	cmp	r2, r3
 801b656:	dbec      	blt.n	801b632 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b658:	e010      	b.n	801b67c <ee_number+0x198>
 801b65a:	68fb      	ldr	r3, [r7, #12]
 801b65c:	1c5a      	adds	r2, r3, #1
 801b65e:	60fa      	str	r2, [r7, #12]
 801b660:	f107 0110 	add.w	r1, r7, #16
 801b664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801b666:	440a      	add	r2, r1
 801b668:	7812      	ldrb	r2, [r2, #0]
 801b66a:	701a      	strb	r2, [r3, #0]
 801b66c:	68bb      	ldr	r3, [r7, #8]
 801b66e:	3b01      	subs	r3, #1
 801b670:	60bb      	str	r3, [r7, #8]
 801b672:	68bb      	ldr	r3, [r7, #8]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d101      	bne.n	801b67c <ee_number+0x198>
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	e018      	b.n	801b6ae <ee_number+0x1ca>
 801b67c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801b67e:	1e5a      	subs	r2, r3, #1
 801b680:	657a      	str	r2, [r7, #84]	; 0x54
 801b682:	2b00      	cmp	r3, #0
 801b684:	dce9      	bgt.n	801b65a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b686:	e00c      	b.n	801b6a2 <ee_number+0x1be>
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	1c5a      	adds	r2, r3, #1
 801b68c:	60fa      	str	r2, [r7, #12]
 801b68e:	2220      	movs	r2, #32
 801b690:	701a      	strb	r2, [r3, #0]
 801b692:	68bb      	ldr	r3, [r7, #8]
 801b694:	3b01      	subs	r3, #1
 801b696:	60bb      	str	r3, [r7, #8]
 801b698:	68bb      	ldr	r3, [r7, #8]
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d101      	bne.n	801b6a2 <ee_number+0x1be>
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	e005      	b.n	801b6ae <ee_number+0x1ca>
 801b6a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801b6a4:	1e5a      	subs	r2, r3, #1
 801b6a6:	66ba      	str	r2, [r7, #104]	; 0x68
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	dced      	bgt.n	801b688 <ee_number+0x1a4>

  return str;
 801b6ac:	68fb      	ldr	r3, [r7, #12]
}
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	3764      	adds	r7, #100	; 0x64
 801b6b2:	46bd      	mov	sp, r7
 801b6b4:	bc80      	pop	{r7}
 801b6b6:	4770      	bx	lr
 801b6b8:	20000148 	.word	0x20000148
 801b6bc:	2000014c 	.word	0x2000014c

0801b6c0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b6c0:	b580      	push	{r7, lr}
 801b6c2:	b092      	sub	sp, #72	; 0x48
 801b6c4:	af04      	add	r7, sp, #16
 801b6c6:	60f8      	str	r0, [r7, #12]
 801b6c8:	60b9      	str	r1, [r7, #8]
 801b6ca:	607a      	str	r2, [r7, #4]
 801b6cc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b6ce:	68bb      	ldr	r3, [r7, #8]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	dc01      	bgt.n	801b6d8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	e142      	b.n	801b95e <tiny_vsnprintf_like+0x29e>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b6d8:	68fb      	ldr	r3, [r7, #12]
 801b6da:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b6dc:	e12a      	b.n	801b934 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b6de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	1ad2      	subs	r2, r2, r3
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	f280 8131 	bge.w	801b950 <tiny_vsnprintf_like+0x290>

    if (*fmt != '%')
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	781b      	ldrb	r3, [r3, #0]
 801b6f2:	2b25      	cmp	r3, #37	; 0x25
 801b6f4:	d006      	beq.n	801b704 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b6f6:	687a      	ldr	r2, [r7, #4]
 801b6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6fa:	1c59      	adds	r1, r3, #1
 801b6fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b6fe:	7812      	ldrb	r2, [r2, #0]
 801b700:	701a      	strb	r2, [r3, #0]
      continue;
 801b702:	e114      	b.n	801b92e <tiny_vsnprintf_like+0x26e>
    }

    // Process flags
    flags = 0;
 801b704:	2300      	movs	r3, #0
 801b706:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b708:	687b      	ldr	r3, [r7, #4]
 801b70a:	3301      	adds	r3, #1
 801b70c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	781b      	ldrb	r3, [r3, #0]
 801b712:	2b30      	cmp	r3, #48	; 0x30
 801b714:	d103      	bne.n	801b71e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b716:	6a3b      	ldr	r3, [r7, #32]
 801b718:	f043 0301 	orr.w	r3, r3, #1
 801b71c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b71e:	f04f 33ff 	mov.w	r3, #4294967295
 801b722:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	781b      	ldrb	r3, [r3, #0]
 801b728:	2b2f      	cmp	r3, #47	; 0x2f
 801b72a:	d908      	bls.n	801b73e <tiny_vsnprintf_like+0x7e>
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	781b      	ldrb	r3, [r3, #0]
 801b730:	2b39      	cmp	r3, #57	; 0x39
 801b732:	d804      	bhi.n	801b73e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b734:	1d3b      	adds	r3, r7, #4
 801b736:	4618      	mov	r0, r3
 801b738:	f7ff feae 	bl	801b498 <ee_skip_atoi>
 801b73c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b73e:	f04f 33ff 	mov.w	r3, #4294967295
 801b742:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b744:	f04f 33ff 	mov.w	r3, #4294967295
 801b748:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b74a:	230a      	movs	r3, #10
 801b74c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	781b      	ldrb	r3, [r3, #0]
 801b752:	3b58      	subs	r3, #88	; 0x58
 801b754:	2b20      	cmp	r3, #32
 801b756:	f200 8094 	bhi.w	801b882 <tiny_vsnprintf_like+0x1c2>
 801b75a:	a201      	add	r2, pc, #4	; (adr r2, 801b760 <tiny_vsnprintf_like+0xa0>)
 801b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b760:	0801b86b 	.word	0x0801b86b
 801b764:	0801b883 	.word	0x0801b883
 801b768:	0801b883 	.word	0x0801b883
 801b76c:	0801b883 	.word	0x0801b883
 801b770:	0801b883 	.word	0x0801b883
 801b774:	0801b883 	.word	0x0801b883
 801b778:	0801b883 	.word	0x0801b883
 801b77c:	0801b883 	.word	0x0801b883
 801b780:	0801b883 	.word	0x0801b883
 801b784:	0801b883 	.word	0x0801b883
 801b788:	0801b883 	.word	0x0801b883
 801b78c:	0801b7ef 	.word	0x0801b7ef
 801b790:	0801b879 	.word	0x0801b879
 801b794:	0801b883 	.word	0x0801b883
 801b798:	0801b883 	.word	0x0801b883
 801b79c:	0801b883 	.word	0x0801b883
 801b7a0:	0801b883 	.word	0x0801b883
 801b7a4:	0801b879 	.word	0x0801b879
 801b7a8:	0801b883 	.word	0x0801b883
 801b7ac:	0801b883 	.word	0x0801b883
 801b7b0:	0801b883 	.word	0x0801b883
 801b7b4:	0801b883 	.word	0x0801b883
 801b7b8:	0801b883 	.word	0x0801b883
 801b7bc:	0801b883 	.word	0x0801b883
 801b7c0:	0801b883 	.word	0x0801b883
 801b7c4:	0801b883 	.word	0x0801b883
 801b7c8:	0801b883 	.word	0x0801b883
 801b7cc:	0801b80f 	.word	0x0801b80f
 801b7d0:	0801b883 	.word	0x0801b883
 801b7d4:	0801b8cf 	.word	0x0801b8cf
 801b7d8:	0801b883 	.word	0x0801b883
 801b7dc:	0801b883 	.word	0x0801b883
 801b7e0:	0801b873 	.word	0x0801b873
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7e6:	1c5a      	adds	r2, r3, #1
 801b7e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b7ea:	2220      	movs	r2, #32
 801b7ec:	701a      	strb	r2, [r3, #0]
 801b7ee:	69fb      	ldr	r3, [r7, #28]
 801b7f0:	3b01      	subs	r3, #1
 801b7f2:	61fb      	str	r3, [r7, #28]
 801b7f4:	69fb      	ldr	r3, [r7, #28]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	dcf4      	bgt.n	801b7e4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b7fa:	683b      	ldr	r3, [r7, #0]
 801b7fc:	1d1a      	adds	r2, r3, #4
 801b7fe:	603a      	str	r2, [r7, #0]
 801b800:	6819      	ldr	r1, [r3, #0]
 801b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b804:	1c5a      	adds	r2, r3, #1
 801b806:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b808:	b2ca      	uxtb	r2, r1
 801b80a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b80c:	e08f      	b.n	801b92e <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 801b80e:	683b      	ldr	r3, [r7, #0]
 801b810:	1d1a      	adds	r2, r3, #4
 801b812:	603a      	str	r2, [r7, #0]
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d101      	bne.n	801b822 <tiny_vsnprintf_like+0x162>
 801b81e:	4b52      	ldr	r3, [pc, #328]	; (801b968 <tiny_vsnprintf_like+0x2a8>)
 801b820:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b824:	f7e4 fcb2 	bl	800018c <strlen>
 801b828:	4603      	mov	r3, r0
 801b82a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b82c:	e004      	b.n	801b838 <tiny_vsnprintf_like+0x178>
 801b82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b830:	1c5a      	adds	r2, r3, #1
 801b832:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b834:	2220      	movs	r2, #32
 801b836:	701a      	strb	r2, [r3, #0]
 801b838:	69fb      	ldr	r3, [r7, #28]
 801b83a:	1e5a      	subs	r2, r3, #1
 801b83c:	61fa      	str	r2, [r7, #28]
 801b83e:	693a      	ldr	r2, [r7, #16]
 801b840:	429a      	cmp	r2, r3
 801b842:	dbf4      	blt.n	801b82e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b844:	2300      	movs	r3, #0
 801b846:	62bb      	str	r3, [r7, #40]	; 0x28
 801b848:	e00a      	b.n	801b860 <tiny_vsnprintf_like+0x1a0>
 801b84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b84c:	1c53      	adds	r3, r2, #1
 801b84e:	627b      	str	r3, [r7, #36]	; 0x24
 801b850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b852:	1c59      	adds	r1, r3, #1
 801b854:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b856:	7812      	ldrb	r2, [r2, #0]
 801b858:	701a      	strb	r2, [r3, #0]
 801b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b85c:	3301      	adds	r3, #1
 801b85e:	62bb      	str	r3, [r7, #40]	; 0x28
 801b860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b862:	693b      	ldr	r3, [r7, #16]
 801b864:	429a      	cmp	r2, r3
 801b866:	dbf0      	blt.n	801b84a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b868:	e061      	b.n	801b92e <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b86a:	6a3b      	ldr	r3, [r7, #32]
 801b86c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b870:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b872:	2310      	movs	r3, #16
 801b874:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801b876:	e02d      	b.n	801b8d4 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b878:	6a3b      	ldr	r3, [r7, #32]
 801b87a:	f043 0302 	orr.w	r3, r3, #2
 801b87e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b880:	e025      	b.n	801b8ce <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	781b      	ldrb	r3, [r3, #0]
 801b886:	2b25      	cmp	r3, #37	; 0x25
 801b888:	d004      	beq.n	801b894 <tiny_vsnprintf_like+0x1d4>
 801b88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b88c:	1c5a      	adds	r2, r3, #1
 801b88e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801b890:	2225      	movs	r2, #37	; 0x25
 801b892:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b896:	68fb      	ldr	r3, [r7, #12]
 801b898:	1ad2      	subs	r2, r2, r3
 801b89a:	68bb      	ldr	r3, [r7, #8]
 801b89c:	3b01      	subs	r3, #1
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	da17      	bge.n	801b8d2 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	781b      	ldrb	r3, [r3, #0]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d006      	beq.n	801b8b8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b8aa:	687a      	ldr	r2, [r7, #4]
 801b8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8ae:	1c59      	adds	r1, r3, #1
 801b8b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 801b8b2:	7812      	ldrb	r2, [r2, #0]
 801b8b4:	701a      	strb	r2, [r3, #0]
 801b8b6:	e002      	b.n	801b8be <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b8b8:	687b      	ldr	r3, [r7, #4]
 801b8ba:	3b01      	subs	r3, #1
 801b8bc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b8be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	1ad2      	subs	r2, r2, r3
 801b8c4:	68bb      	ldr	r3, [r7, #8]
 801b8c6:	3b01      	subs	r3, #1
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	db2f      	blt.n	801b92c <tiny_vsnprintf_like+0x26c>
 801b8cc:	e002      	b.n	801b8d4 <tiny_vsnprintf_like+0x214>
        break;
 801b8ce:	bf00      	nop
 801b8d0:	e000      	b.n	801b8d4 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 801b8d2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	2b6c      	cmp	r3, #108	; 0x6c
 801b8d8:	d105      	bne.n	801b8e6 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	1d1a      	adds	r2, r3, #4
 801b8de:	603a      	str	r2, [r7, #0]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	637b      	str	r3, [r7, #52]	; 0x34
 801b8e4:	e00f      	b.n	801b906 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 801b8e6:	6a3b      	ldr	r3, [r7, #32]
 801b8e8:	f003 0302 	and.w	r3, r3, #2
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d005      	beq.n	801b8fc <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 801b8f0:	683b      	ldr	r3, [r7, #0]
 801b8f2:	1d1a      	adds	r2, r3, #4
 801b8f4:	603a      	str	r2, [r7, #0]
 801b8f6:	681b      	ldr	r3, [r3, #0]
 801b8f8:	637b      	str	r3, [r7, #52]	; 0x34
 801b8fa:	e004      	b.n	801b906 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 801b8fc:	683b      	ldr	r3, [r7, #0]
 801b8fe:	1d1a      	adds	r2, r3, #4
 801b900:	603a      	str	r2, [r7, #0]
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b906:	68bb      	ldr	r3, [r7, #8]
 801b908:	1e5a      	subs	r2, r3, #1
 801b90a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b90c:	68fb      	ldr	r3, [r7, #12]
 801b90e:	1acb      	subs	r3, r1, r3
 801b910:	1ad1      	subs	r1, r2, r3
 801b912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801b914:	6a3b      	ldr	r3, [r7, #32]
 801b916:	9302      	str	r3, [sp, #8]
 801b918:	69bb      	ldr	r3, [r7, #24]
 801b91a:	9301      	str	r3, [sp, #4]
 801b91c:	69fb      	ldr	r3, [r7, #28]
 801b91e:	9300      	str	r3, [sp, #0]
 801b920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b922:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b924:	f7ff fdde 	bl	801b4e4 <ee_number>
 801b928:	62f8      	str	r0, [r7, #44]	; 0x2c
 801b92a:	e000      	b.n	801b92e <tiny_vsnprintf_like+0x26e>
        continue;
 801b92c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	3301      	adds	r3, #1
 801b932:	607b      	str	r3, [r7, #4]
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	781b      	ldrb	r3, [r3, #0]
 801b938:	2b00      	cmp	r3, #0
 801b93a:	f47f aed0 	bne.w	801b6de <tiny_vsnprintf_like+0x1e>
 801b93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b940:	68fb      	ldr	r3, [r7, #12]
 801b942:	1ad2      	subs	r2, r2, r3
 801b944:	68bb      	ldr	r3, [r7, #8]
 801b946:	3b01      	subs	r3, #1
 801b948:	429a      	cmp	r2, r3
 801b94a:	f6bf aec8 	bge.w	801b6de <tiny_vsnprintf_like+0x1e>
 801b94e:	e000      	b.n	801b952 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 801b950:	bf00      	nop
  }

  *str = '\0';
 801b952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b954:	2200      	movs	r2, #0
 801b956:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b95a:	68fb      	ldr	r3, [r7, #12]
 801b95c:	1ad3      	subs	r3, r2, r3
}
 801b95e:	4618      	mov	r0, r3
 801b960:	3738      	adds	r7, #56	; 0x38
 801b962:	46bd      	mov	sp, r7
 801b964:	bd80      	pop	{r7, pc}
 801b966:	bf00      	nop
 801b968:	0801d0b8 	.word	0x0801d0b8

0801b96c <UTIL_SEQ_RegTask>:

  return;
}

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b96c:	b580      	push	{r7, lr}
 801b96e:	b088      	sub	sp, #32
 801b970:	af00      	add	r7, sp, #0
 801b972:	60f8      	str	r0, [r7, #12]
 801b974:	60b9      	str	r1, [r7, #8]
 801b976:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b978:	f3ef 8310 	mrs	r3, PRIMASK
 801b97c:	617b      	str	r3, [r7, #20]
  return(result);
 801b97e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b982:	b672      	cpsid	i
}
 801b984:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b986:	68f8      	ldr	r0, [r7, #12]
 801b988:	f000 f83e 	bl	801ba08 <SEQ_BitPosition>
 801b98c:	4603      	mov	r3, r0
 801b98e:	4619      	mov	r1, r3
 801b990:	4a06      	ldr	r2, [pc, #24]	; (801b9ac <UTIL_SEQ_RegTask+0x40>)
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b998:	69fb      	ldr	r3, [r7, #28]
 801b99a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b99c:	69bb      	ldr	r3, [r7, #24]
 801b99e:	f383 8810 	msr	PRIMASK, r3
}
 801b9a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b9a4:	bf00      	nop
}
 801b9a6:	3720      	adds	r7, #32
 801b9a8:	46bd      	mov	sp, r7
 801b9aa:	bd80      	pop	{r7, pc}
 801b9ac:	20001cd4 	.word	0x20001cd4

0801b9b0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b9b0:	b480      	push	{r7}
 801b9b2:	b087      	sub	sp, #28
 801b9b4:	af00      	add	r7, sp, #0
 801b9b6:	6078      	str	r0, [r7, #4]
 801b9b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9ba:	f3ef 8310 	mrs	r3, PRIMASK
 801b9be:	60fb      	str	r3, [r7, #12]
  return(result);
 801b9c0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b9c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9c4:	b672      	cpsid	i
}
 801b9c6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b9c8:	4b0d      	ldr	r3, [pc, #52]	; (801ba00 <UTIL_SEQ_SetTask+0x50>)
 801b9ca:	681a      	ldr	r2, [r3, #0]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	4313      	orrs	r3, r2
 801b9d0:	4a0b      	ldr	r2, [pc, #44]	; (801ba00 <UTIL_SEQ_SetTask+0x50>)
 801b9d2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b9d4:	4a0b      	ldr	r2, [pc, #44]	; (801ba04 <UTIL_SEQ_SetTask+0x54>)
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	431a      	orrs	r2, r3
 801b9e0:	4908      	ldr	r1, [pc, #32]	; (801ba04 <UTIL_SEQ_SetTask+0x54>)
 801b9e2:	683b      	ldr	r3, [r7, #0]
 801b9e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b9e8:	697b      	ldr	r3, [r7, #20]
 801b9ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9ec:	693b      	ldr	r3, [r7, #16]
 801b9ee:	f383 8810 	msr	PRIMASK, r3
}
 801b9f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b9f4:	bf00      	nop
}
 801b9f6:	371c      	adds	r7, #28
 801b9f8:	46bd      	mov	sp, r7
 801b9fa:	bc80      	pop	{r7}
 801b9fc:	4770      	bx	lr
 801b9fe:	bf00      	nop
 801ba00:	20001cd0 	.word	0x20001cd0
 801ba04:	20001ce4 	.word	0x20001ce4

0801ba08 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ba08:	b480      	push	{r7}
 801ba0a:	b085      	sub	sp, #20
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ba10:	2300      	movs	r3, #0
 801ba12:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ba18:	68bb      	ldr	r3, [r7, #8]
 801ba1a:	0c1b      	lsrs	r3, r3, #16
 801ba1c:	041b      	lsls	r3, r3, #16
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	d104      	bne.n	801ba2c <SEQ_BitPosition+0x24>
 801ba22:	2310      	movs	r3, #16
 801ba24:	73fb      	strb	r3, [r7, #15]
 801ba26:	68bb      	ldr	r3, [r7, #8]
 801ba28:	041b      	lsls	r3, r3, #16
 801ba2a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ba2c:	68bb      	ldr	r3, [r7, #8]
 801ba2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	d105      	bne.n	801ba42 <SEQ_BitPosition+0x3a>
 801ba36:	7bfb      	ldrb	r3, [r7, #15]
 801ba38:	3308      	adds	r3, #8
 801ba3a:	73fb      	strb	r3, [r7, #15]
 801ba3c:	68bb      	ldr	r3, [r7, #8]
 801ba3e:	021b      	lsls	r3, r3, #8
 801ba40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ba42:	68bb      	ldr	r3, [r7, #8]
 801ba44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d105      	bne.n	801ba58 <SEQ_BitPosition+0x50>
 801ba4c:	7bfb      	ldrb	r3, [r7, #15]
 801ba4e:	3304      	adds	r3, #4
 801ba50:	73fb      	strb	r3, [r7, #15]
 801ba52:	68bb      	ldr	r3, [r7, #8]
 801ba54:	011b      	lsls	r3, r3, #4
 801ba56:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ba58:	68bb      	ldr	r3, [r7, #8]
 801ba5a:	0f1b      	lsrs	r3, r3, #28
 801ba5c:	4a06      	ldr	r2, [pc, #24]	; (801ba78 <SEQ_BitPosition+0x70>)
 801ba5e:	5cd2      	ldrb	r2, [r2, r3]
 801ba60:	7bfb      	ldrb	r3, [r7, #15]
 801ba62:	4413      	add	r3, r2
 801ba64:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ba66:	7bfb      	ldrb	r3, [r7, #15]
 801ba68:	f1c3 031f 	rsb	r3, r3, #31
 801ba6c:	b2db      	uxtb	r3, r3
}
 801ba6e:	4618      	mov	r0, r3
 801ba70:	3714      	adds	r7, #20
 801ba72:	46bd      	mov	sp, r7
 801ba74:	bc80      	pop	{r7}
 801ba76:	4770      	bx	lr
 801ba78:	0801d670 	.word	0x0801d670

0801ba7c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ba7c:	b580      	push	{r7, lr}
 801ba7e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ba80:	4b04      	ldr	r3, [pc, #16]	; (801ba94 <UTIL_TIMER_Init+0x18>)
 801ba82:	2200      	movs	r2, #0
 801ba84:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ba86:	4b04      	ldr	r3, [pc, #16]	; (801ba98 <UTIL_TIMER_Init+0x1c>)
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	4798      	blx	r3
 801ba8c:	4603      	mov	r3, r0
}
 801ba8e:	4618      	mov	r0, r3
 801ba90:	bd80      	pop	{r7, pc}
 801ba92:	bf00      	nop
 801ba94:	20001cec 	.word	0x20001cec
 801ba98:	0801d160 	.word	0x0801d160

0801ba9c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b084      	sub	sp, #16
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	60f8      	str	r0, [r7, #12]
 801baa4:	60b9      	str	r1, [r7, #8]
 801baa6:	603b      	str	r3, [r7, #0]
 801baa8:	4613      	mov	r3, r2
 801baaa:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d023      	beq.n	801bafa <UTIL_TIMER_Create+0x5e>
 801bab2:	683b      	ldr	r3, [r7, #0]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d020      	beq.n	801bafa <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	2200      	movs	r2, #0
 801babc:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801babe:	4b11      	ldr	r3, [pc, #68]	; (801bb04 <UTIL_TIMER_Create+0x68>)
 801bac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bac2:	68b8      	ldr	r0, [r7, #8]
 801bac4:	4798      	blx	r3
 801bac6:	4602      	mov	r2, r0
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	2200      	movs	r2, #0
 801bad0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801bad2:	68fb      	ldr	r3, [r7, #12]
 801bad4:	2200      	movs	r2, #0
 801bad6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	2200      	movs	r2, #0
 801badc:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801bade:	68fb      	ldr	r3, [r7, #12]
 801bae0:	683a      	ldr	r2, [r7, #0]
 801bae2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801bae4:	68fb      	ldr	r3, [r7, #12]
 801bae6:	69ba      	ldr	r2, [r7, #24]
 801bae8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	79fa      	ldrb	r2, [r7, #7]
 801baee:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801baf0:	68fb      	ldr	r3, [r7, #12]
 801baf2:	2200      	movs	r2, #0
 801baf4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801baf6:	2300      	movs	r3, #0
 801baf8:	e000      	b.n	801bafc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801bafa:	2301      	movs	r3, #1
  }
}
 801bafc:	4618      	mov	r0, r3
 801bafe:	3710      	adds	r7, #16
 801bb00:	46bd      	mov	sp, r7
 801bb02:	bd80      	pop	{r7, pc}
 801bb04:	0801d160 	.word	0x0801d160

0801bb08 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b08a      	sub	sp, #40	; 0x28
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bb10:	2300      	movs	r3, #0
 801bb12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d056      	beq.n	801bbca <UTIL_TIMER_Start+0xc2>
 801bb1c:	6878      	ldr	r0, [r7, #4]
 801bb1e:	f000 f9a9 	bl	801be74 <TimerExists>
 801bb22:	4603      	mov	r3, r0
 801bb24:	f083 0301 	eor.w	r3, r3, #1
 801bb28:	b2db      	uxtb	r3, r3
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d04d      	beq.n	801bbca <UTIL_TIMER_Start+0xc2>
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	7a5b      	ldrb	r3, [r3, #9]
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	d149      	bne.n	801bbca <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb36:	f3ef 8310 	mrs	r3, PRIMASK
 801bb3a:	613b      	str	r3, [r7, #16]
  return(result);
 801bb3c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bb3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb40:	b672      	cpsid	i
}
 801bb42:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	685b      	ldr	r3, [r3, #4]
 801bb48:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801bb4a:	4b24      	ldr	r3, [pc, #144]	; (801bbdc <UTIL_TIMER_Start+0xd4>)
 801bb4c:	6a1b      	ldr	r3, [r3, #32]
 801bb4e:	4798      	blx	r3
 801bb50:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801bb52:	6a3a      	ldr	r2, [r7, #32]
 801bb54:	69bb      	ldr	r3, [r7, #24]
 801bb56:	429a      	cmp	r2, r3
 801bb58:	d201      	bcs.n	801bb5e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801bb5a:	69bb      	ldr	r3, [r7, #24]
 801bb5c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	6a3a      	ldr	r2, [r7, #32]
 801bb62:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	2200      	movs	r2, #0
 801bb68:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	2201      	movs	r2, #1
 801bb6e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	2200      	movs	r2, #0
 801bb74:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bb76:	4b1a      	ldr	r3, [pc, #104]	; (801bbe0 <UTIL_TIMER_Start+0xd8>)
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	2b00      	cmp	r3, #0
 801bb7c:	d106      	bne.n	801bb8c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bb7e:	4b17      	ldr	r3, [pc, #92]	; (801bbdc <UTIL_TIMER_Start+0xd4>)
 801bb80:	691b      	ldr	r3, [r3, #16]
 801bb82:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bb84:	6878      	ldr	r0, [r7, #4]
 801bb86:	f000 f9eb 	bl	801bf60 <TimerInsertNewHeadTimer>
 801bb8a:	e017      	b.n	801bbbc <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801bb8c:	4b13      	ldr	r3, [pc, #76]	; (801bbdc <UTIL_TIMER_Start+0xd4>)
 801bb8e:	699b      	ldr	r3, [r3, #24]
 801bb90:	4798      	blx	r3
 801bb92:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	681a      	ldr	r2, [r3, #0]
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	441a      	add	r2, r3
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	681a      	ldr	r2, [r3, #0]
 801bba4:	4b0e      	ldr	r3, [pc, #56]	; (801bbe0 <UTIL_TIMER_Start+0xd8>)
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	681b      	ldr	r3, [r3, #0]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d203      	bcs.n	801bbb6 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	f000 f9d6 	bl	801bf60 <TimerInsertNewHeadTimer>
 801bbb4:	e002      	b.n	801bbbc <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801bbb6:	6878      	ldr	r0, [r7, #4]
 801bbb8:	f000 f9a2 	bl	801bf00 <TimerInsertTimer>
 801bbbc:	69fb      	ldr	r3, [r7, #28]
 801bbbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbc0:	68fb      	ldr	r3, [r7, #12]
 801bbc2:	f383 8810 	msr	PRIMASK, r3
}
 801bbc6:	bf00      	nop
  {
 801bbc8:	e002      	b.n	801bbd0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801bbca:	2301      	movs	r3, #1
 801bbcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801bbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	3728      	adds	r7, #40	; 0x28
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}
 801bbdc:	0801d160 	.word	0x0801d160
 801bbe0:	20001cec 	.word	0x20001cec

0801bbe4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b088      	sub	sp, #32
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bbec:	2300      	movs	r3, #0
 801bbee:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d05b      	beq.n	801bcae <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bbf6:	f3ef 8310 	mrs	r3, PRIMASK
 801bbfa:	60fb      	str	r3, [r7, #12]
  return(result);
 801bbfc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bbfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc00:	b672      	cpsid	i
}
 801bc02:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801bc04:	4b2d      	ldr	r3, [pc, #180]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801bc0a:	4b2c      	ldr	r3, [pc, #176]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	2201      	movs	r2, #1
 801bc14:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801bc16:	4b29      	ldr	r3, [pc, #164]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d041      	beq.n	801bca2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	2200      	movs	r2, #0
 801bc22:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801bc24:	4b25      	ldr	r3, [pc, #148]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	687a      	ldr	r2, [r7, #4]
 801bc2a:	429a      	cmp	r2, r3
 801bc2c:	d134      	bne.n	801bc98 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801bc2e:	4b23      	ldr	r3, [pc, #140]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	2200      	movs	r2, #0
 801bc34:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801bc36:	4b21      	ldr	r3, [pc, #132]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc38:	681b      	ldr	r3, [r3, #0]
 801bc3a:	695b      	ldr	r3, [r3, #20]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d00a      	beq.n	801bc56 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801bc40:	4b1e      	ldr	r3, [pc, #120]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	695b      	ldr	r3, [r3, #20]
 801bc46:	4a1d      	ldr	r2, [pc, #116]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc48:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801bc4a:	4b1c      	ldr	r3, [pc, #112]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f000 f92c 	bl	801beac <TimerSetTimeout>
 801bc54:	e023      	b.n	801bc9e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801bc56:	4b1a      	ldr	r3, [pc, #104]	; (801bcc0 <UTIL_TIMER_Stop+0xdc>)
 801bc58:	68db      	ldr	r3, [r3, #12]
 801bc5a:	4798      	blx	r3
            TimerListHead = NULL;
 801bc5c:	4b17      	ldr	r3, [pc, #92]	; (801bcbc <UTIL_TIMER_Stop+0xd8>)
 801bc5e:	2200      	movs	r2, #0
 801bc60:	601a      	str	r2, [r3, #0]
 801bc62:	e01c      	b.n	801bc9e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801bc64:	697a      	ldr	r2, [r7, #20]
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	d110      	bne.n	801bc8e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	695b      	ldr	r3, [r3, #20]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d006      	beq.n	801bc82 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801bc74:	697b      	ldr	r3, [r7, #20]
 801bc76:	695b      	ldr	r3, [r3, #20]
 801bc78:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bc7a:	69bb      	ldr	r3, [r7, #24]
 801bc7c:	697a      	ldr	r2, [r7, #20]
 801bc7e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801bc80:	e00d      	b.n	801bc9e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801bc82:	2300      	movs	r3, #0
 801bc84:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bc86:	69bb      	ldr	r3, [r7, #24]
 801bc88:	697a      	ldr	r2, [r7, #20]
 801bc8a:	615a      	str	r2, [r3, #20]
            break;
 801bc8c:	e007      	b.n	801bc9e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801bc8e:	697b      	ldr	r3, [r7, #20]
 801bc90:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801bc92:	697b      	ldr	r3, [r7, #20]
 801bc94:	695b      	ldr	r3, [r3, #20]
 801bc96:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801bc98:	697b      	ldr	r3, [r7, #20]
 801bc9a:	2b00      	cmp	r3, #0
 801bc9c:	d1e2      	bne.n	801bc64 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801bc9e:	2300      	movs	r3, #0
 801bca0:	77fb      	strb	r3, [r7, #31]
 801bca2:	693b      	ldr	r3, [r7, #16]
 801bca4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bca6:	68bb      	ldr	r3, [r7, #8]
 801bca8:	f383 8810 	msr	PRIMASK, r3
}
 801bcac:	e001      	b.n	801bcb2 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801bcae:	2301      	movs	r3, #1
 801bcb0:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801bcb2:	7ffb      	ldrb	r3, [r7, #31]
}
 801bcb4:	4618      	mov	r0, r3
 801bcb6:	3720      	adds	r7, #32
 801bcb8:	46bd      	mov	sp, r7
 801bcba:	bd80      	pop	{r7, pc}
 801bcbc:	20001cec 	.word	0x20001cec
 801bcc0:	0801d160 	.word	0x0801d160

0801bcc4 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801bcc4:	b580      	push	{r7, lr}
 801bcc6:	b084      	sub	sp, #16
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
 801bccc:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bcce:	2300      	movs	r3, #0
 801bcd0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d102      	bne.n	801bcde <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801bcd8:	2301      	movs	r3, #1
 801bcda:	73fb      	strb	r3, [r7, #15]
 801bcdc:	e014      	b.n	801bd08 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801bcde:	4b0d      	ldr	r3, [pc, #52]	; (801bd14 <UTIL_TIMER_SetPeriod+0x50>)
 801bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bce2:	6838      	ldr	r0, [r7, #0]
 801bce4:	4798      	blx	r3
 801bce6:	4602      	mov	r2, r0
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801bcec:	6878      	ldr	r0, [r7, #4]
 801bcee:	f000 f8c1 	bl	801be74 <TimerExists>
 801bcf2:	4603      	mov	r3, r0
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d007      	beq.n	801bd08 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801bcf8:	6878      	ldr	r0, [r7, #4]
 801bcfa:	f7ff ff73 	bl	801bbe4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801bcfe:	6878      	ldr	r0, [r7, #4]
 801bd00:	f7ff ff02 	bl	801bb08 <UTIL_TIMER_Start>
 801bd04:	4603      	mov	r3, r0
 801bd06:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801bd08:	7bfb      	ldrb	r3, [r7, #15]
}
 801bd0a:	4618      	mov	r0, r3
 801bd0c:	3710      	adds	r7, #16
 801bd0e:	46bd      	mov	sp, r7
 801bd10:	bd80      	pop	{r7, pc}
 801bd12:	bf00      	nop
 801bd14:	0801d160 	.word	0x0801d160

0801bd18 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801bd18:	b590      	push	{r4, r7, lr}
 801bd1a:	b089      	sub	sp, #36	; 0x24
 801bd1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bd1e:	f3ef 8310 	mrs	r3, PRIMASK
 801bd22:	60bb      	str	r3, [r7, #8]
  return(result);
 801bd24:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bd26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bd28:	b672      	cpsid	i
}
 801bd2a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801bd2c:	4b38      	ldr	r3, [pc, #224]	; (801be10 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd2e:	695b      	ldr	r3, [r3, #20]
 801bd30:	4798      	blx	r3
 801bd32:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801bd34:	4b36      	ldr	r3, [pc, #216]	; (801be10 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd36:	691b      	ldr	r3, [r3, #16]
 801bd38:	4798      	blx	r3
 801bd3a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801bd3c:	693a      	ldr	r2, [r7, #16]
 801bd3e:	697b      	ldr	r3, [r7, #20]
 801bd40:	1ad3      	subs	r3, r2, r3
 801bd42:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801bd44:	4b33      	ldr	r3, [pc, #204]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d037      	beq.n	801bdbc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801bd4c:	4b31      	ldr	r3, [pc, #196]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801bd52:	69fb      	ldr	r3, [r7, #28]
 801bd54:	681b      	ldr	r3, [r3, #0]
 801bd56:	68fa      	ldr	r2, [r7, #12]
 801bd58:	429a      	cmp	r2, r3
 801bd5a:	d206      	bcs.n	801bd6a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801bd5c:	69fb      	ldr	r3, [r7, #28]
 801bd5e:	681a      	ldr	r2, [r3, #0]
 801bd60:	68fb      	ldr	r3, [r7, #12]
 801bd62:	1ad2      	subs	r2, r2, r3
 801bd64:	69fb      	ldr	r3, [r7, #28]
 801bd66:	601a      	str	r2, [r3, #0]
 801bd68:	e002      	b.n	801bd70 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801bd6a:	69fb      	ldr	r3, [r7, #28]
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801bd70:	69fb      	ldr	r3, [r7, #28]
 801bd72:	695b      	ldr	r3, [r3, #20]
 801bd74:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801bd76:	69fb      	ldr	r3, [r7, #28]
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d1ea      	bne.n	801bd52 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bd7c:	e01e      	b.n	801bdbc <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801bd7e:	4b25      	ldr	r3, [pc, #148]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd80:	681b      	ldr	r3, [r3, #0]
 801bd82:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801bd84:	4b23      	ldr	r3, [pc, #140]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	695b      	ldr	r3, [r3, #20]
 801bd8a:	4a22      	ldr	r2, [pc, #136]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd8c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801bd8e:	69fb      	ldr	r3, [r7, #28]
 801bd90:	2200      	movs	r2, #0
 801bd92:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801bd94:	69fb      	ldr	r3, [r7, #28]
 801bd96:	2200      	movs	r2, #0
 801bd98:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801bd9a:	69fb      	ldr	r3, [r7, #28]
 801bd9c:	68db      	ldr	r3, [r3, #12]
 801bd9e:	69fa      	ldr	r2, [r7, #28]
 801bda0:	6912      	ldr	r2, [r2, #16]
 801bda2:	4610      	mov	r0, r2
 801bda4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801bda6:	69fb      	ldr	r3, [r7, #28]
 801bda8:	7adb      	ldrb	r3, [r3, #11]
 801bdaa:	2b01      	cmp	r3, #1
 801bdac:	d106      	bne.n	801bdbc <UTIL_TIMER_IRQ_Handler+0xa4>
 801bdae:	69fb      	ldr	r3, [r7, #28]
 801bdb0:	7a9b      	ldrb	r3, [r3, #10]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d102      	bne.n	801bdbc <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801bdb6:	69f8      	ldr	r0, [r7, #28]
 801bdb8:	f7ff fea6 	bl	801bb08 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bdbc:	4b15      	ldr	r3, [pc, #84]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d00d      	beq.n	801bde0 <UTIL_TIMER_IRQ_Handler+0xc8>
 801bdc4:	4b13      	ldr	r3, [pc, #76]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d0d7      	beq.n	801bd7e <UTIL_TIMER_IRQ_Handler+0x66>
 801bdce:	4b11      	ldr	r3, [pc, #68]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	681c      	ldr	r4, [r3, #0]
 801bdd4:	4b0e      	ldr	r3, [pc, #56]	; (801be10 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bdd6:	699b      	ldr	r3, [r3, #24]
 801bdd8:	4798      	blx	r3
 801bdda:	4603      	mov	r3, r0
 801bddc:	429c      	cmp	r4, r3
 801bdde:	d3ce      	bcc.n	801bd7e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801bde0:	4b0c      	ldr	r3, [pc, #48]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d009      	beq.n	801bdfc <UTIL_TIMER_IRQ_Handler+0xe4>
 801bde8:	4b0a      	ldr	r3, [pc, #40]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	7a1b      	ldrb	r3, [r3, #8]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d104      	bne.n	801bdfc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801bdf2:	4b08      	ldr	r3, [pc, #32]	; (801be14 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	f000 f858 	bl	801beac <TimerSetTimeout>
 801bdfc:	69bb      	ldr	r3, [r7, #24]
 801bdfe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	f383 8810 	msr	PRIMASK, r3
}
 801be06:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801be08:	bf00      	nop
 801be0a:	3724      	adds	r7, #36	; 0x24
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd90      	pop	{r4, r7, pc}
 801be10:	0801d160 	.word	0x0801d160
 801be14:	20001cec 	.word	0x20001cec

0801be18 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801be18:	b580      	push	{r7, lr}
 801be1a:	b082      	sub	sp, #8
 801be1c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801be1e:	4b06      	ldr	r3, [pc, #24]	; (801be38 <UTIL_TIMER_GetCurrentTime+0x20>)
 801be20:	69db      	ldr	r3, [r3, #28]
 801be22:	4798      	blx	r3
 801be24:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801be26:	4b04      	ldr	r3, [pc, #16]	; (801be38 <UTIL_TIMER_GetCurrentTime+0x20>)
 801be28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be2a:	6878      	ldr	r0, [r7, #4]
 801be2c:	4798      	blx	r3
 801be2e:	4603      	mov	r3, r0
}
 801be30:	4618      	mov	r0, r3
 801be32:	3708      	adds	r7, #8
 801be34:	46bd      	mov	sp, r7
 801be36:	bd80      	pop	{r7, pc}
 801be38:	0801d160 	.word	0x0801d160

0801be3c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801be3c:	b580      	push	{r7, lr}
 801be3e:	b084      	sub	sp, #16
 801be40:	af00      	add	r7, sp, #0
 801be42:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801be44:	4b0a      	ldr	r3, [pc, #40]	; (801be70 <UTIL_TIMER_GetElapsedTime+0x34>)
 801be46:	69db      	ldr	r3, [r3, #28]
 801be48:	4798      	blx	r3
 801be4a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801be4c:	4b08      	ldr	r3, [pc, #32]	; (801be70 <UTIL_TIMER_GetElapsedTime+0x34>)
 801be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be50:	6878      	ldr	r0, [r7, #4]
 801be52:	4798      	blx	r3
 801be54:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801be56:	4b06      	ldr	r3, [pc, #24]	; (801be70 <UTIL_TIMER_GetElapsedTime+0x34>)
 801be58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801be5a:	68f9      	ldr	r1, [r7, #12]
 801be5c:	68ba      	ldr	r2, [r7, #8]
 801be5e:	1a8a      	subs	r2, r1, r2
 801be60:	4610      	mov	r0, r2
 801be62:	4798      	blx	r3
 801be64:	4603      	mov	r3, r0
}
 801be66:	4618      	mov	r0, r3
 801be68:	3710      	adds	r7, #16
 801be6a:	46bd      	mov	sp, r7
 801be6c:	bd80      	pop	{r7, pc}
 801be6e:	bf00      	nop
 801be70:	0801d160 	.word	0x0801d160

0801be74 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801be74:	b480      	push	{r7}
 801be76:	b085      	sub	sp, #20
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801be7c:	4b0a      	ldr	r3, [pc, #40]	; (801bea8 <TimerExists+0x34>)
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801be82:	e008      	b.n	801be96 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801be84:	68fa      	ldr	r2, [r7, #12]
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	429a      	cmp	r2, r3
 801be8a:	d101      	bne.n	801be90 <TimerExists+0x1c>
    {
      return true;
 801be8c:	2301      	movs	r3, #1
 801be8e:	e006      	b.n	801be9e <TimerExists+0x2a>
    }
    cur = cur->Next;
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	695b      	ldr	r3, [r3, #20]
 801be94:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d1f3      	bne.n	801be84 <TimerExists+0x10>
  }
  return false;
 801be9c:	2300      	movs	r3, #0
}
 801be9e:	4618      	mov	r0, r3
 801bea0:	3714      	adds	r7, #20
 801bea2:	46bd      	mov	sp, r7
 801bea4:	bc80      	pop	{r7}
 801bea6:	4770      	bx	lr
 801bea8:	20001cec 	.word	0x20001cec

0801beac <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801beac:	b590      	push	{r4, r7, lr}
 801beae:	b085      	sub	sp, #20
 801beb0:	af00      	add	r7, sp, #0
 801beb2:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801beb4:	4b11      	ldr	r3, [pc, #68]	; (801befc <TimerSetTimeout+0x50>)
 801beb6:	6a1b      	ldr	r3, [r3, #32]
 801beb8:	4798      	blx	r3
 801beba:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	2201      	movs	r2, #1
 801bec0:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681c      	ldr	r4, [r3, #0]
 801bec6:	4b0d      	ldr	r3, [pc, #52]	; (801befc <TimerSetTimeout+0x50>)
 801bec8:	699b      	ldr	r3, [r3, #24]
 801beca:	4798      	blx	r3
 801becc:	4602      	mov	r2, r0
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	4413      	add	r3, r2
 801bed2:	429c      	cmp	r4, r3
 801bed4:	d207      	bcs.n	801bee6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801bed6:	4b09      	ldr	r3, [pc, #36]	; (801befc <TimerSetTimeout+0x50>)
 801bed8:	699b      	ldr	r3, [r3, #24]
 801beda:	4798      	blx	r3
 801bedc:	4602      	mov	r2, r0
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	441a      	add	r2, r3
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801bee6:	4b05      	ldr	r3, [pc, #20]	; (801befc <TimerSetTimeout+0x50>)
 801bee8:	689b      	ldr	r3, [r3, #8]
 801beea:	687a      	ldr	r2, [r7, #4]
 801beec:	6812      	ldr	r2, [r2, #0]
 801beee:	4610      	mov	r0, r2
 801bef0:	4798      	blx	r3
}
 801bef2:	bf00      	nop
 801bef4:	3714      	adds	r7, #20
 801bef6:	46bd      	mov	sp, r7
 801bef8:	bd90      	pop	{r4, r7, pc}
 801befa:	bf00      	nop
 801befc:	0801d160 	.word	0x0801d160

0801bf00 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801bf00:	b480      	push	{r7}
 801bf02:	b085      	sub	sp, #20
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bf08:	4b14      	ldr	r3, [pc, #80]	; (801bf5c <TimerInsertTimer+0x5c>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801bf0e:	4b13      	ldr	r3, [pc, #76]	; (801bf5c <TimerInsertTimer+0x5c>)
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	695b      	ldr	r3, [r3, #20]
 801bf14:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801bf16:	e012      	b.n	801bf3e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	681a      	ldr	r2, [r3, #0]
 801bf1c:	68bb      	ldr	r3, [r7, #8]
 801bf1e:	681b      	ldr	r3, [r3, #0]
 801bf20:	429a      	cmp	r2, r3
 801bf22:	d905      	bls.n	801bf30 <TimerInsertTimer+0x30>
    {
        cur = next;
 801bf24:	68bb      	ldr	r3, [r7, #8]
 801bf26:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801bf28:	68bb      	ldr	r3, [r7, #8]
 801bf2a:	695b      	ldr	r3, [r3, #20]
 801bf2c:	60bb      	str	r3, [r7, #8]
 801bf2e:	e006      	b.n	801bf3e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	687a      	ldr	r2, [r7, #4]
 801bf34:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801bf36:	687b      	ldr	r3, [r7, #4]
 801bf38:	68ba      	ldr	r2, [r7, #8]
 801bf3a:	615a      	str	r2, [r3, #20]
        return;
 801bf3c:	e009      	b.n	801bf52 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	695b      	ldr	r3, [r3, #20]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d1e8      	bne.n	801bf18 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801bf46:	68fb      	ldr	r3, [r7, #12]
 801bf48:	687a      	ldr	r2, [r7, #4]
 801bf4a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	2200      	movs	r2, #0
 801bf50:	615a      	str	r2, [r3, #20]
}
 801bf52:	3714      	adds	r7, #20
 801bf54:	46bd      	mov	sp, r7
 801bf56:	bc80      	pop	{r7}
 801bf58:	4770      	bx	lr
 801bf5a:	bf00      	nop
 801bf5c:	20001cec 	.word	0x20001cec

0801bf60 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	b084      	sub	sp, #16
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bf68:	4b0b      	ldr	r3, [pc, #44]	; (801bf98 <TimerInsertNewHeadTimer+0x38>)
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801bf6e:	68fb      	ldr	r3, [r7, #12]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d002      	beq.n	801bf7a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	2200      	movs	r2, #0
 801bf78:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	68fa      	ldr	r2, [r7, #12]
 801bf7e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801bf80:	4a05      	ldr	r2, [pc, #20]	; (801bf98 <TimerInsertNewHeadTimer+0x38>)
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801bf86:	4b04      	ldr	r3, [pc, #16]	; (801bf98 <TimerInsertNewHeadTimer+0x38>)
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	4618      	mov	r0, r3
 801bf8c:	f7ff ff8e 	bl	801beac <TimerSetTimeout>
}
 801bf90:	bf00      	nop
 801bf92:	3710      	adds	r7, #16
 801bf94:	46bd      	mov	sp, r7
 801bf96:	bd80      	pop	{r7, pc}
 801bf98:	20001cec 	.word	0x20001cec

0801bf9c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bf9c:	b580      	push	{r7, lr}
 801bf9e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bfa0:	2218      	movs	r2, #24
 801bfa2:	2100      	movs	r1, #0
 801bfa4:	4807      	ldr	r0, [pc, #28]	; (801bfc4 <UTIL_ADV_TRACE_Init+0x28>)
 801bfa6:	f7ff f8fe 	bl	801b1a6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bfaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801bfae:	2100      	movs	r1, #0
 801bfb0:	4805      	ldr	r0, [pc, #20]	; (801bfc8 <UTIL_ADV_TRACE_Init+0x2c>)
 801bfb2:	f7ff f8f8 	bl	801b1a6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bfb6:	4b05      	ldr	r3, [pc, #20]	; (801bfcc <UTIL_ADV_TRACE_Init+0x30>)
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	4805      	ldr	r0, [pc, #20]	; (801bfd0 <UTIL_ADV_TRACE_Init+0x34>)
 801bfbc:	4798      	blx	r3
 801bfbe:	4603      	mov	r3, r0
}
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	bd80      	pop	{r7, pc}
 801bfc4:	20001cf0 	.word	0x20001cf0
 801bfc8:	20001d08 	.word	0x20001d08
 801bfcc:	0801d1a0 	.word	0x0801d1a0
 801bfd0:	0801c23d 	.word	0x0801c23d

0801bfd4 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801bfd4:	b480      	push	{r7}
 801bfd6:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bfd8:	4b06      	ldr	r3, [pc, #24]	; (801bff4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bfda:	8a5a      	ldrh	r2, [r3, #18]
 801bfdc:	4b05      	ldr	r3, [pc, #20]	; (801bff4 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bfde:	8a1b      	ldrh	r3, [r3, #16]
 801bfe0:	429a      	cmp	r2, r3
 801bfe2:	d101      	bne.n	801bfe8 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801bfe4:	2301      	movs	r3, #1
 801bfe6:	e000      	b.n	801bfea <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801bfe8:	2300      	movs	r3, #0
}
 801bfea:	4618      	mov	r0, r3
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bc80      	pop	{r7}
 801bff0:	4770      	bx	lr
 801bff2:	bf00      	nop
 801bff4:	20001cf0 	.word	0x20001cf0

0801bff8 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bff8:	b408      	push	{r3}
 801bffa:	b580      	push	{r7, lr}
 801bffc:	b08d      	sub	sp, #52	; 0x34
 801bffe:	af00      	add	r7, sp, #0
 801c000:	60f8      	str	r0, [r7, #12]
 801c002:	60b9      	str	r1, [r7, #8]
 801c004:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801c006:	2300      	movs	r3, #0
 801c008:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801c00a:	2300      	movs	r3, #0
 801c00c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801c00e:	4b37      	ldr	r3, [pc, #220]	; (801c0ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c010:	7a1b      	ldrb	r3, [r3, #8]
 801c012:	461a      	mov	r2, r3
 801c014:	68fb      	ldr	r3, [r7, #12]
 801c016:	4293      	cmp	r3, r2
 801c018:	d902      	bls.n	801c020 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801c01a:	f06f 0304 	mvn.w	r3, #4
 801c01e:	e05e      	b.n	801c0de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801c020:	4b32      	ldr	r3, [pc, #200]	; (801c0ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c022:	68da      	ldr	r2, [r3, #12]
 801c024:	68bb      	ldr	r3, [r7, #8]
 801c026:	4013      	ands	r3, r2
 801c028:	68ba      	ldr	r2, [r7, #8]
 801c02a:	429a      	cmp	r2, r3
 801c02c:	d002      	beq.n	801c034 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801c02e:	f06f 0305 	mvn.w	r3, #5
 801c032:	e054      	b.n	801c0de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801c034:	4b2d      	ldr	r3, [pc, #180]	; (801c0ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c036:	685b      	ldr	r3, [r3, #4]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d00a      	beq.n	801c052 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d007      	beq.n	801c052 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801c042:	4b2a      	ldr	r3, [pc, #168]	; (801c0ec <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801c044:	685b      	ldr	r3, [r3, #4]
 801c046:	f107 0116 	add.w	r1, r7, #22
 801c04a:	f107 0218 	add.w	r2, r7, #24
 801c04e:	4610      	mov	r0, r2
 801c050:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801c052:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c056:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c05a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c05c:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c060:	4823      	ldr	r0, [pc, #140]	; (801c0f0 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801c062:	f7ff fb2d 	bl	801b6c0 <tiny_vsnprintf_like>
 801c066:	4603      	mov	r3, r0
 801c068:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801c06a:	f000 f9f1 	bl	801c450 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801c06e:	8afa      	ldrh	r2, [r7, #22]
 801c070:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801c072:	4413      	add	r3, r2
 801c074:	b29b      	uxth	r3, r3
 801c076:	f107 0214 	add.w	r2, r7, #20
 801c07a:	4611      	mov	r1, r2
 801c07c:	4618      	mov	r0, r3
 801c07e:	f000 f969 	bl	801c354 <TRACE_AllocateBufer>
 801c082:	4603      	mov	r3, r0
 801c084:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c088:	d025      	beq.n	801c0d6 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801c08a:	2300      	movs	r3, #0
 801c08c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c08e:	e00e      	b.n	801c0ae <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801c090:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c092:	8aba      	ldrh	r2, [r7, #20]
 801c094:	3330      	adds	r3, #48	; 0x30
 801c096:	443b      	add	r3, r7
 801c098:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c09c:	4b15      	ldr	r3, [pc, #84]	; (801c0f4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c09e:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c0a0:	8abb      	ldrh	r3, [r7, #20]
 801c0a2:	3301      	adds	r3, #1
 801c0a4:	b29b      	uxth	r3, r3
 801c0a6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c0a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c0aa:	3301      	adds	r3, #1
 801c0ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c0ae:	8afb      	ldrh	r3, [r7, #22]
 801c0b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	d3ec      	bcc.n	801c090 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c0b6:	8abb      	ldrh	r3, [r7, #20]
 801c0b8:	461a      	mov	r2, r3
 801c0ba:	4b0e      	ldr	r3, [pc, #56]	; (801c0f4 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c0bc:	18d0      	adds	r0, r2, r3
 801c0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c0c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 801c0c6:	f7ff fafb 	bl	801b6c0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c0ca:	f000 f9df 	bl	801c48c <TRACE_UnLock>

    return TRACE_Send();
 801c0ce:	f000 f831 	bl	801c134 <TRACE_Send>
 801c0d2:	4603      	mov	r3, r0
 801c0d4:	e003      	b.n	801c0de <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c0d6:	f000 f9d9 	bl	801c48c <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c0da:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c0de:	4618      	mov	r0, r3
 801c0e0:	3734      	adds	r7, #52	; 0x34
 801c0e2:	46bd      	mov	sp, r7
 801c0e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c0e8:	b001      	add	sp, #4
 801c0ea:	4770      	bx	lr
 801c0ec:	20001cf0 	.word	0x20001cf0
 801c0f0:	20002108 	.word	0x20002108
 801c0f4:	20001d08 	.word	0x20001d08

0801c0f8 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c0f8:	b480      	push	{r7}
 801c0fa:	b083      	sub	sp, #12
 801c0fc:	af00      	add	r7, sp, #0
 801c0fe:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c100:	4a03      	ldr	r2, [pc, #12]	; (801c110 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c102:	687b      	ldr	r3, [r7, #4]
 801c104:	6053      	str	r3, [r2, #4]
}
 801c106:	bf00      	nop
 801c108:	370c      	adds	r7, #12
 801c10a:	46bd      	mov	sp, r7
 801c10c:	bc80      	pop	{r7}
 801c10e:	4770      	bx	lr
 801c110:	20001cf0 	.word	0x20001cf0

0801c114 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c114:	b480      	push	{r7}
 801c116:	b083      	sub	sp, #12
 801c118:	af00      	add	r7, sp, #0
 801c11a:	4603      	mov	r3, r0
 801c11c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c11e:	4a04      	ldr	r2, [pc, #16]	; (801c130 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c120:	79fb      	ldrb	r3, [r7, #7]
 801c122:	7213      	strb	r3, [r2, #8]
}
 801c124:	bf00      	nop
 801c126:	370c      	adds	r7, #12
 801c128:	46bd      	mov	sp, r7
 801c12a:	bc80      	pop	{r7}
 801c12c:	4770      	bx	lr
 801c12e:	bf00      	nop
 801c130:	20001cf0 	.word	0x20001cf0

0801c134 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b088      	sub	sp, #32
 801c138:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c13a:	2300      	movs	r3, #0
 801c13c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c13e:	2300      	movs	r3, #0
 801c140:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c142:	f3ef 8310 	mrs	r3, PRIMASK
 801c146:	613b      	str	r3, [r7, #16]
  return(result);
 801c148:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c14a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c14c:	b672      	cpsid	i
}
 801c14e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c150:	f000 f9ba 	bl	801c4c8 <TRACE_IsLocked>
 801c154:	4603      	mov	r3, r0
 801c156:	2b00      	cmp	r3, #0
 801c158:	d15d      	bne.n	801c216 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c15a:	f000 f979 	bl	801c450 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c15e:	4b34      	ldr	r3, [pc, #208]	; (801c230 <TRACE_Send+0xfc>)
 801c160:	8a1a      	ldrh	r2, [r3, #16]
 801c162:	4b33      	ldr	r3, [pc, #204]	; (801c230 <TRACE_Send+0xfc>)
 801c164:	8a5b      	ldrh	r3, [r3, #18]
 801c166:	429a      	cmp	r2, r3
 801c168:	d04d      	beq.n	801c206 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c16a:	4b31      	ldr	r3, [pc, #196]	; (801c230 <TRACE_Send+0xfc>)
 801c16c:	789b      	ldrb	r3, [r3, #2]
 801c16e:	2b01      	cmp	r3, #1
 801c170:	d117      	bne.n	801c1a2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c172:	4b2f      	ldr	r3, [pc, #188]	; (801c230 <TRACE_Send+0xfc>)
 801c174:	881a      	ldrh	r2, [r3, #0]
 801c176:	4b2e      	ldr	r3, [pc, #184]	; (801c230 <TRACE_Send+0xfc>)
 801c178:	8a1b      	ldrh	r3, [r3, #16]
 801c17a:	1ad3      	subs	r3, r2, r3
 801c17c:	b29a      	uxth	r2, r3
 801c17e:	4b2c      	ldr	r3, [pc, #176]	; (801c230 <TRACE_Send+0xfc>)
 801c180:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c182:	4b2b      	ldr	r3, [pc, #172]	; (801c230 <TRACE_Send+0xfc>)
 801c184:	2202      	movs	r2, #2
 801c186:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c188:	4b29      	ldr	r3, [pc, #164]	; (801c230 <TRACE_Send+0xfc>)
 801c18a:	2200      	movs	r2, #0
 801c18c:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c18e:	4b28      	ldr	r3, [pc, #160]	; (801c230 <TRACE_Send+0xfc>)
 801c190:	8a9b      	ldrh	r3, [r3, #20]
 801c192:	2b00      	cmp	r3, #0
 801c194:	d105      	bne.n	801c1a2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c196:	4b26      	ldr	r3, [pc, #152]	; (801c230 <TRACE_Send+0xfc>)
 801c198:	2200      	movs	r2, #0
 801c19a:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c19c:	4b24      	ldr	r3, [pc, #144]	; (801c230 <TRACE_Send+0xfc>)
 801c19e:	2200      	movs	r2, #0
 801c1a0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c1a2:	4b23      	ldr	r3, [pc, #140]	; (801c230 <TRACE_Send+0xfc>)
 801c1a4:	789b      	ldrb	r3, [r3, #2]
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	d115      	bne.n	801c1d6 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c1aa:	4b21      	ldr	r3, [pc, #132]	; (801c230 <TRACE_Send+0xfc>)
 801c1ac:	8a5a      	ldrh	r2, [r3, #18]
 801c1ae:	4b20      	ldr	r3, [pc, #128]	; (801c230 <TRACE_Send+0xfc>)
 801c1b0:	8a1b      	ldrh	r3, [r3, #16]
 801c1b2:	429a      	cmp	r2, r3
 801c1b4:	d908      	bls.n	801c1c8 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c1b6:	4b1e      	ldr	r3, [pc, #120]	; (801c230 <TRACE_Send+0xfc>)
 801c1b8:	8a5a      	ldrh	r2, [r3, #18]
 801c1ba:	4b1d      	ldr	r3, [pc, #116]	; (801c230 <TRACE_Send+0xfc>)
 801c1bc:	8a1b      	ldrh	r3, [r3, #16]
 801c1be:	1ad3      	subs	r3, r2, r3
 801c1c0:	b29a      	uxth	r2, r3
 801c1c2:	4b1b      	ldr	r3, [pc, #108]	; (801c230 <TRACE_Send+0xfc>)
 801c1c4:	829a      	strh	r2, [r3, #20]
 801c1c6:	e006      	b.n	801c1d6 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c1c8:	4b19      	ldr	r3, [pc, #100]	; (801c230 <TRACE_Send+0xfc>)
 801c1ca:	8a1b      	ldrh	r3, [r3, #16]
 801c1cc:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c1d0:	b29a      	uxth	r2, r3
 801c1d2:	4b17      	ldr	r3, [pc, #92]	; (801c230 <TRACE_Send+0xfc>)
 801c1d4:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c1d6:	4b16      	ldr	r3, [pc, #88]	; (801c230 <TRACE_Send+0xfc>)
 801c1d8:	8a1b      	ldrh	r3, [r3, #16]
 801c1da:	461a      	mov	r2, r3
 801c1dc:	4b15      	ldr	r3, [pc, #84]	; (801c234 <TRACE_Send+0x100>)
 801c1de:	4413      	add	r3, r2
 801c1e0:	61bb      	str	r3, [r7, #24]
 801c1e2:	697b      	ldr	r3, [r7, #20]
 801c1e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	f383 8810 	msr	PRIMASK, r3
}
 801c1ec:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c1ee:	f7e5 ff9b 	bl	8002128 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c1f2:	4b11      	ldr	r3, [pc, #68]	; (801c238 <TRACE_Send+0x104>)
 801c1f4:	68db      	ldr	r3, [r3, #12]
 801c1f6:	4a0e      	ldr	r2, [pc, #56]	; (801c230 <TRACE_Send+0xfc>)
 801c1f8:	8a92      	ldrh	r2, [r2, #20]
 801c1fa:	4611      	mov	r1, r2
 801c1fc:	69b8      	ldr	r0, [r7, #24]
 801c1fe:	4798      	blx	r3
 801c200:	4603      	mov	r3, r0
 801c202:	77fb      	strb	r3, [r7, #31]
 801c204:	e00d      	b.n	801c222 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c206:	f000 f941 	bl	801c48c <TRACE_UnLock>
 801c20a:	697b      	ldr	r3, [r7, #20]
 801c20c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c20e:	68bb      	ldr	r3, [r7, #8]
 801c210:	f383 8810 	msr	PRIMASK, r3
}
 801c214:	e005      	b.n	801c222 <TRACE_Send+0xee>
 801c216:	697b      	ldr	r3, [r7, #20]
 801c218:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c21a:	687b      	ldr	r3, [r7, #4]
 801c21c:	f383 8810 	msr	PRIMASK, r3
}
 801c220:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c222:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c226:	4618      	mov	r0, r3
 801c228:	3720      	adds	r7, #32
 801c22a:	46bd      	mov	sp, r7
 801c22c:	bd80      	pop	{r7, pc}
 801c22e:	bf00      	nop
 801c230:	20001cf0 	.word	0x20001cf0
 801c234:	20001d08 	.word	0x20001d08
 801c238:	0801d1a0 	.word	0x0801d1a0

0801c23c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c23c:	b580      	push	{r7, lr}
 801c23e:	b088      	sub	sp, #32
 801c240:	af00      	add	r7, sp, #0
 801c242:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c244:	2300      	movs	r3, #0
 801c246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c248:	f3ef 8310 	mrs	r3, PRIMASK
 801c24c:	617b      	str	r3, [r7, #20]
  return(result);
 801c24e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c252:	b672      	cpsid	i
}
 801c254:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c256:	4b3c      	ldr	r3, [pc, #240]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c258:	789b      	ldrb	r3, [r3, #2]
 801c25a:	2b02      	cmp	r3, #2
 801c25c:	d106      	bne.n	801c26c <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c25e:	4b3a      	ldr	r3, [pc, #232]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c260:	2200      	movs	r2, #0
 801c262:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c264:	4b38      	ldr	r3, [pc, #224]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c266:	2200      	movs	r2, #0
 801c268:	821a      	strh	r2, [r3, #16]
 801c26a:	e00a      	b.n	801c282 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c26c:	4b36      	ldr	r3, [pc, #216]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c26e:	8a1a      	ldrh	r2, [r3, #16]
 801c270:	4b35      	ldr	r3, [pc, #212]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c272:	8a9b      	ldrh	r3, [r3, #20]
 801c274:	4413      	add	r3, r2
 801c276:	b29b      	uxth	r3, r3
 801c278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c27c:	b29a      	uxth	r2, r3
 801c27e:	4b32      	ldr	r3, [pc, #200]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c280:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c282:	4b31      	ldr	r3, [pc, #196]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c284:	8a1a      	ldrh	r2, [r3, #16]
 801c286:	4b30      	ldr	r3, [pc, #192]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c288:	8a5b      	ldrh	r3, [r3, #18]
 801c28a:	429a      	cmp	r2, r3
 801c28c:	d04d      	beq.n	801c32a <TRACE_TxCpltCallback+0xee>
 801c28e:	4b2e      	ldr	r3, [pc, #184]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c290:	8adb      	ldrh	r3, [r3, #22]
 801c292:	2b01      	cmp	r3, #1
 801c294:	d149      	bne.n	801c32a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c296:	4b2c      	ldr	r3, [pc, #176]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c298:	789b      	ldrb	r3, [r3, #2]
 801c29a:	2b01      	cmp	r3, #1
 801c29c:	d117      	bne.n	801c2ce <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c29e:	4b2a      	ldr	r3, [pc, #168]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2a0:	881a      	ldrh	r2, [r3, #0]
 801c2a2:	4b29      	ldr	r3, [pc, #164]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2a4:	8a1b      	ldrh	r3, [r3, #16]
 801c2a6:	1ad3      	subs	r3, r2, r3
 801c2a8:	b29a      	uxth	r2, r3
 801c2aa:	4b27      	ldr	r3, [pc, #156]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2ac:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c2ae:	4b26      	ldr	r3, [pc, #152]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2b0:	2202      	movs	r2, #2
 801c2b2:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c2b4:	4b24      	ldr	r3, [pc, #144]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c2ba:	4b23      	ldr	r3, [pc, #140]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2bc:	8a9b      	ldrh	r3, [r3, #20]
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d105      	bne.n	801c2ce <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c2c2:	4b21      	ldr	r3, [pc, #132]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2c4:	2200      	movs	r2, #0
 801c2c6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c2c8:	4b1f      	ldr	r3, [pc, #124]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c2ce:	4b1e      	ldr	r3, [pc, #120]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2d0:	789b      	ldrb	r3, [r3, #2]
 801c2d2:	2b00      	cmp	r3, #0
 801c2d4:	d115      	bne.n	801c302 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c2d6:	4b1c      	ldr	r3, [pc, #112]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2d8:	8a5a      	ldrh	r2, [r3, #18]
 801c2da:	4b1b      	ldr	r3, [pc, #108]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2dc:	8a1b      	ldrh	r3, [r3, #16]
 801c2de:	429a      	cmp	r2, r3
 801c2e0:	d908      	bls.n	801c2f4 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c2e2:	4b19      	ldr	r3, [pc, #100]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2e4:	8a5a      	ldrh	r2, [r3, #18]
 801c2e6:	4b18      	ldr	r3, [pc, #96]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2e8:	8a1b      	ldrh	r3, [r3, #16]
 801c2ea:	1ad3      	subs	r3, r2, r3
 801c2ec:	b29a      	uxth	r2, r3
 801c2ee:	4b16      	ldr	r3, [pc, #88]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2f0:	829a      	strh	r2, [r3, #20]
 801c2f2:	e006      	b.n	801c302 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c2f4:	4b14      	ldr	r3, [pc, #80]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c2f6:	8a1b      	ldrh	r3, [r3, #16]
 801c2f8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c2fc:	b29a      	uxth	r2, r3
 801c2fe:	4b12      	ldr	r3, [pc, #72]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c300:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c302:	4b11      	ldr	r3, [pc, #68]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c304:	8a1b      	ldrh	r3, [r3, #16]
 801c306:	461a      	mov	r2, r3
 801c308:	4b10      	ldr	r3, [pc, #64]	; (801c34c <TRACE_TxCpltCallback+0x110>)
 801c30a:	4413      	add	r3, r2
 801c30c:	61fb      	str	r3, [r7, #28]
 801c30e:	69bb      	ldr	r3, [r7, #24]
 801c310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c312:	693b      	ldr	r3, [r7, #16]
 801c314:	f383 8810 	msr	PRIMASK, r3
}
 801c318:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c31a:	4b0d      	ldr	r3, [pc, #52]	; (801c350 <TRACE_TxCpltCallback+0x114>)
 801c31c:	68db      	ldr	r3, [r3, #12]
 801c31e:	4a0a      	ldr	r2, [pc, #40]	; (801c348 <TRACE_TxCpltCallback+0x10c>)
 801c320:	8a92      	ldrh	r2, [r2, #20]
 801c322:	4611      	mov	r1, r2
 801c324:	69f8      	ldr	r0, [r7, #28]
 801c326:	4798      	blx	r3
 801c328:	e00a      	b.n	801c340 <TRACE_TxCpltCallback+0x104>
 801c32a:	69bb      	ldr	r3, [r7, #24]
 801c32c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	f383 8810 	msr	PRIMASK, r3
}
 801c334:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c336:	f7e5 feff 	bl	8002138 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c33a:	f000 f8a7 	bl	801c48c <TRACE_UnLock>
  }
}
 801c33e:	bf00      	nop
 801c340:	bf00      	nop
 801c342:	3720      	adds	r7, #32
 801c344:	46bd      	mov	sp, r7
 801c346:	bd80      	pop	{r7, pc}
 801c348:	20001cf0 	.word	0x20001cf0
 801c34c:	20001d08 	.word	0x20001d08
 801c350:	0801d1a0 	.word	0x0801d1a0

0801c354 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c354:	b480      	push	{r7}
 801c356:	b087      	sub	sp, #28
 801c358:	af00      	add	r7, sp, #0
 801c35a:	4603      	mov	r3, r0
 801c35c:	6039      	str	r1, [r7, #0]
 801c35e:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c364:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c366:	f3ef 8310 	mrs	r3, PRIMASK
 801c36a:	60fb      	str	r3, [r7, #12]
  return(result);
 801c36c:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c36e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c370:	b672      	cpsid	i
}
 801c372:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c374:	4b35      	ldr	r3, [pc, #212]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c376:	8a5a      	ldrh	r2, [r3, #18]
 801c378:	4b34      	ldr	r3, [pc, #208]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c37a:	8a1b      	ldrh	r3, [r3, #16]
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d11b      	bne.n	801c3b8 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c380:	4b32      	ldr	r3, [pc, #200]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c382:	8a5b      	ldrh	r3, [r3, #18]
 801c384:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c388:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c38a:	88fa      	ldrh	r2, [r7, #6]
 801c38c:	8afb      	ldrh	r3, [r7, #22]
 801c38e:	429a      	cmp	r2, r3
 801c390:	d33a      	bcc.n	801c408 <TRACE_AllocateBufer+0xb4>
 801c392:	4b2e      	ldr	r3, [pc, #184]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c394:	8a1b      	ldrh	r3, [r3, #16]
 801c396:	88fa      	ldrh	r2, [r7, #6]
 801c398:	429a      	cmp	r2, r3
 801c39a:	d235      	bcs.n	801c408 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c39c:	4b2b      	ldr	r3, [pc, #172]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c39e:	2201      	movs	r2, #1
 801c3a0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c3a2:	4b2a      	ldr	r3, [pc, #168]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3a4:	8a5a      	ldrh	r2, [r3, #18]
 801c3a6:	4b29      	ldr	r3, [pc, #164]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3a8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c3aa:	4b28      	ldr	r3, [pc, #160]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3ac:	8a1b      	ldrh	r3, [r3, #16]
 801c3ae:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c3b0:	4b26      	ldr	r3, [pc, #152]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	825a      	strh	r2, [r3, #18]
 801c3b6:	e027      	b.n	801c408 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c3b8:	4b24      	ldr	r3, [pc, #144]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3ba:	8a5a      	ldrh	r2, [r3, #18]
 801c3bc:	4b23      	ldr	r3, [pc, #140]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3be:	8a1b      	ldrh	r3, [r3, #16]
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	d91b      	bls.n	801c3fc <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c3c4:	4b21      	ldr	r3, [pc, #132]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3c6:	8a5b      	ldrh	r3, [r3, #18]
 801c3c8:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801c3cc:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c3ce:	88fa      	ldrh	r2, [r7, #6]
 801c3d0:	8afb      	ldrh	r3, [r7, #22]
 801c3d2:	429a      	cmp	r2, r3
 801c3d4:	d318      	bcc.n	801c408 <TRACE_AllocateBufer+0xb4>
 801c3d6:	4b1d      	ldr	r3, [pc, #116]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3d8:	8a1b      	ldrh	r3, [r3, #16]
 801c3da:	88fa      	ldrh	r2, [r7, #6]
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	d213      	bcs.n	801c408 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c3e0:	4b1a      	ldr	r3, [pc, #104]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3e2:	2201      	movs	r2, #1
 801c3e4:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c3e6:	4b19      	ldr	r3, [pc, #100]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3e8:	8a5a      	ldrh	r2, [r3, #18]
 801c3ea:	4b18      	ldr	r3, [pc, #96]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3ec:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c3ee:	4b17      	ldr	r3, [pc, #92]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3f0:	8a1b      	ldrh	r3, [r3, #16]
 801c3f2:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c3f4:	4b15      	ldr	r3, [pc, #84]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	825a      	strh	r2, [r3, #18]
 801c3fa:	e005      	b.n	801c408 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c3fc:	4b13      	ldr	r3, [pc, #76]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c3fe:	8a1a      	ldrh	r2, [r3, #16]
 801c400:	4b12      	ldr	r3, [pc, #72]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c402:	8a5b      	ldrh	r3, [r3, #18]
 801c404:	1ad3      	subs	r3, r2, r3
 801c406:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c408:	8afa      	ldrh	r2, [r7, #22]
 801c40a:	88fb      	ldrh	r3, [r7, #6]
 801c40c:	429a      	cmp	r2, r3
 801c40e:	d90f      	bls.n	801c430 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c410:	4b0e      	ldr	r3, [pc, #56]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c412:	8a5a      	ldrh	r2, [r3, #18]
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c418:	4b0c      	ldr	r3, [pc, #48]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c41a:	8a5a      	ldrh	r2, [r3, #18]
 801c41c:	88fb      	ldrh	r3, [r7, #6]
 801c41e:	4413      	add	r3, r2
 801c420:	b29b      	uxth	r3, r3
 801c422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c426:	b29a      	uxth	r2, r3
 801c428:	4b08      	ldr	r3, [pc, #32]	; (801c44c <TRACE_AllocateBufer+0xf8>)
 801c42a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c42c:	2300      	movs	r3, #0
 801c42e:	82bb      	strh	r3, [r7, #20]
 801c430:	693b      	ldr	r3, [r7, #16]
 801c432:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	f383 8810 	msr	PRIMASK, r3
}
 801c43a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c43c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c440:	4618      	mov	r0, r3
 801c442:	371c      	adds	r7, #28
 801c444:	46bd      	mov	sp, r7
 801c446:	bc80      	pop	{r7}
 801c448:	4770      	bx	lr
 801c44a:	bf00      	nop
 801c44c:	20001cf0 	.word	0x20001cf0

0801c450 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c450:	b480      	push	{r7}
 801c452:	b085      	sub	sp, #20
 801c454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c456:	f3ef 8310 	mrs	r3, PRIMASK
 801c45a:	607b      	str	r3, [r7, #4]
  return(result);
 801c45c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c45e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c460:	b672      	cpsid	i
}
 801c462:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c464:	4b08      	ldr	r3, [pc, #32]	; (801c488 <TRACE_Lock+0x38>)
 801c466:	8adb      	ldrh	r3, [r3, #22]
 801c468:	3301      	adds	r3, #1
 801c46a:	b29a      	uxth	r2, r3
 801c46c:	4b06      	ldr	r3, [pc, #24]	; (801c488 <TRACE_Lock+0x38>)
 801c46e:	82da      	strh	r2, [r3, #22]
 801c470:	68fb      	ldr	r3, [r7, #12]
 801c472:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c474:	68bb      	ldr	r3, [r7, #8]
 801c476:	f383 8810 	msr	PRIMASK, r3
}
 801c47a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c47c:	bf00      	nop
 801c47e:	3714      	adds	r7, #20
 801c480:	46bd      	mov	sp, r7
 801c482:	bc80      	pop	{r7}
 801c484:	4770      	bx	lr
 801c486:	bf00      	nop
 801c488:	20001cf0 	.word	0x20001cf0

0801c48c <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c48c:	b480      	push	{r7}
 801c48e:	b085      	sub	sp, #20
 801c490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c492:	f3ef 8310 	mrs	r3, PRIMASK
 801c496:	607b      	str	r3, [r7, #4]
  return(result);
 801c498:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c49a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c49c:	b672      	cpsid	i
}
 801c49e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c4a0:	4b08      	ldr	r3, [pc, #32]	; (801c4c4 <TRACE_UnLock+0x38>)
 801c4a2:	8adb      	ldrh	r3, [r3, #22]
 801c4a4:	3b01      	subs	r3, #1
 801c4a6:	b29a      	uxth	r2, r3
 801c4a8:	4b06      	ldr	r3, [pc, #24]	; (801c4c4 <TRACE_UnLock+0x38>)
 801c4aa:	82da      	strh	r2, [r3, #22]
 801c4ac:	68fb      	ldr	r3, [r7, #12]
 801c4ae:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c4b0:	68bb      	ldr	r3, [r7, #8]
 801c4b2:	f383 8810 	msr	PRIMASK, r3
}
 801c4b6:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c4b8:	bf00      	nop
 801c4ba:	3714      	adds	r7, #20
 801c4bc:	46bd      	mov	sp, r7
 801c4be:	bc80      	pop	{r7}
 801c4c0:	4770      	bx	lr
 801c4c2:	bf00      	nop
 801c4c4:	20001cf0 	.word	0x20001cf0

0801c4c8 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c4c8:	b480      	push	{r7}
 801c4ca:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c4cc:	4b05      	ldr	r3, [pc, #20]	; (801c4e4 <TRACE_IsLocked+0x1c>)
 801c4ce:	8adb      	ldrh	r3, [r3, #22]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	bf14      	ite	ne
 801c4d4:	2301      	movne	r3, #1
 801c4d6:	2300      	moveq	r3, #0
 801c4d8:	b2db      	uxtb	r3, r3
}
 801c4da:	4618      	mov	r0, r3
 801c4dc:	46bd      	mov	sp, r7
 801c4de:	bc80      	pop	{r7}
 801c4e0:	4770      	bx	lr
 801c4e2:	bf00      	nop
 801c4e4:	20001cf0 	.word	0x20001cf0

0801c4e8 <__libc_init_array>:
 801c4e8:	b570      	push	{r4, r5, r6, lr}
 801c4ea:	4d0d      	ldr	r5, [pc, #52]	; (801c520 <__libc_init_array+0x38>)
 801c4ec:	4c0d      	ldr	r4, [pc, #52]	; (801c524 <__libc_init_array+0x3c>)
 801c4ee:	1b64      	subs	r4, r4, r5
 801c4f0:	10a4      	asrs	r4, r4, #2
 801c4f2:	2600      	movs	r6, #0
 801c4f4:	42a6      	cmp	r6, r4
 801c4f6:	d109      	bne.n	801c50c <__libc_init_array+0x24>
 801c4f8:	4d0b      	ldr	r5, [pc, #44]	; (801c528 <__libc_init_array+0x40>)
 801c4fa:	4c0c      	ldr	r4, [pc, #48]	; (801c52c <__libc_init_array+0x44>)
 801c4fc:	f000 f8e0 	bl	801c6c0 <_init>
 801c500:	1b64      	subs	r4, r4, r5
 801c502:	10a4      	asrs	r4, r4, #2
 801c504:	2600      	movs	r6, #0
 801c506:	42a6      	cmp	r6, r4
 801c508:	d105      	bne.n	801c516 <__libc_init_array+0x2e>
 801c50a:	bd70      	pop	{r4, r5, r6, pc}
 801c50c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c510:	4798      	blx	r3
 801c512:	3601      	adds	r6, #1
 801c514:	e7ee      	b.n	801c4f4 <__libc_init_array+0xc>
 801c516:	f855 3b04 	ldr.w	r3, [r5], #4
 801c51a:	4798      	blx	r3
 801c51c:	3601      	adds	r6, #1
 801c51e:	e7f2      	b.n	801c506 <__libc_init_array+0x1e>
 801c520:	0801d748 	.word	0x0801d748
 801c524:	0801d748 	.word	0x0801d748
 801c528:	0801d748 	.word	0x0801d748
 801c52c:	0801d74c 	.word	0x0801d74c

0801c530 <memset>:
 801c530:	4402      	add	r2, r0
 801c532:	4603      	mov	r3, r0
 801c534:	4293      	cmp	r3, r2
 801c536:	d100      	bne.n	801c53a <memset+0xa>
 801c538:	4770      	bx	lr
 801c53a:	f803 1b01 	strb.w	r1, [r3], #1
 801c53e:	e7f9      	b.n	801c534 <memset+0x4>

0801c540 <strncmp>:
 801c540:	b510      	push	{r4, lr}
 801c542:	4603      	mov	r3, r0
 801c544:	b172      	cbz	r2, 801c564 <strncmp+0x24>
 801c546:	3901      	subs	r1, #1
 801c548:	1884      	adds	r4, r0, r2
 801c54a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c54e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801c552:	4290      	cmp	r0, r2
 801c554:	d101      	bne.n	801c55a <strncmp+0x1a>
 801c556:	42a3      	cmp	r3, r4
 801c558:	d101      	bne.n	801c55e <strncmp+0x1e>
 801c55a:	1a80      	subs	r0, r0, r2
 801c55c:	bd10      	pop	{r4, pc}
 801c55e:	2800      	cmp	r0, #0
 801c560:	d1f3      	bne.n	801c54a <strncmp+0xa>
 801c562:	e7fa      	b.n	801c55a <strncmp+0x1a>
 801c564:	4610      	mov	r0, r2
 801c566:	e7f9      	b.n	801c55c <strncmp+0x1c>

0801c568 <strncpy>:
 801c568:	b510      	push	{r4, lr}
 801c56a:	3901      	subs	r1, #1
 801c56c:	4603      	mov	r3, r0
 801c56e:	b132      	cbz	r2, 801c57e <strncpy+0x16>
 801c570:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c574:	f803 4b01 	strb.w	r4, [r3], #1
 801c578:	3a01      	subs	r2, #1
 801c57a:	2c00      	cmp	r4, #0
 801c57c:	d1f7      	bne.n	801c56e <strncpy+0x6>
 801c57e:	441a      	add	r2, r3
 801c580:	2100      	movs	r1, #0
 801c582:	4293      	cmp	r3, r2
 801c584:	d100      	bne.n	801c588 <strncpy+0x20>
 801c586:	bd10      	pop	{r4, pc}
 801c588:	f803 1b01 	strb.w	r1, [r3], #1
 801c58c:	e7f9      	b.n	801c582 <strncpy+0x1a>

0801c58e <strstr>:
 801c58e:	780a      	ldrb	r2, [r1, #0]
 801c590:	b570      	push	{r4, r5, r6, lr}
 801c592:	b96a      	cbnz	r2, 801c5b0 <strstr+0x22>
 801c594:	bd70      	pop	{r4, r5, r6, pc}
 801c596:	429a      	cmp	r2, r3
 801c598:	d109      	bne.n	801c5ae <strstr+0x20>
 801c59a:	460c      	mov	r4, r1
 801c59c:	4605      	mov	r5, r0
 801c59e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d0f6      	beq.n	801c594 <strstr+0x6>
 801c5a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c5aa:	429e      	cmp	r6, r3
 801c5ac:	d0f7      	beq.n	801c59e <strstr+0x10>
 801c5ae:	3001      	adds	r0, #1
 801c5b0:	7803      	ldrb	r3, [r0, #0]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	d1ef      	bne.n	801c596 <strstr+0x8>
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	e7ec      	b.n	801c594 <strstr+0x6>
 801c5ba:	0000      	movs	r0, r0
 801c5bc:	0000      	movs	r0, r0
	...

0801c5c0 <floor>:
 801c5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 801c5c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 801c5cc:	2e13      	cmp	r6, #19
 801c5ce:	4602      	mov	r2, r0
 801c5d0:	460b      	mov	r3, r1
 801c5d2:	4607      	mov	r7, r0
 801c5d4:	460c      	mov	r4, r1
 801c5d6:	4605      	mov	r5, r0
 801c5d8:	dc33      	bgt.n	801c642 <floor+0x82>
 801c5da:	2e00      	cmp	r6, #0
 801c5dc:	da14      	bge.n	801c608 <floor+0x48>
 801c5de:	a334      	add	r3, pc, #208	; (adr r3, 801c6b0 <floor+0xf0>)
 801c5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e4:	f7e3 fde0 	bl	80001a8 <__adddf3>
 801c5e8:	2200      	movs	r2, #0
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	f7e4 f810 	bl	8000610 <__aeabi_dcmpgt>
 801c5f0:	b138      	cbz	r0, 801c602 <floor+0x42>
 801c5f2:	2c00      	cmp	r4, #0
 801c5f4:	da58      	bge.n	801c6a8 <floor+0xe8>
 801c5f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c5fa:	431d      	orrs	r5, r3
 801c5fc:	d001      	beq.n	801c602 <floor+0x42>
 801c5fe:	4c2e      	ldr	r4, [pc, #184]	; (801c6b8 <floor+0xf8>)
 801c600:	2500      	movs	r5, #0
 801c602:	4623      	mov	r3, r4
 801c604:	462f      	mov	r7, r5
 801c606:	e025      	b.n	801c654 <floor+0x94>
 801c608:	4a2c      	ldr	r2, [pc, #176]	; (801c6bc <floor+0xfc>)
 801c60a:	fa42 f806 	asr.w	r8, r2, r6
 801c60e:	ea01 0208 	and.w	r2, r1, r8
 801c612:	4302      	orrs	r2, r0
 801c614:	d01e      	beq.n	801c654 <floor+0x94>
 801c616:	a326      	add	r3, pc, #152	; (adr r3, 801c6b0 <floor+0xf0>)
 801c618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c61c:	f7e3 fdc4 	bl	80001a8 <__adddf3>
 801c620:	2200      	movs	r2, #0
 801c622:	2300      	movs	r3, #0
 801c624:	f7e3 fff4 	bl	8000610 <__aeabi_dcmpgt>
 801c628:	2800      	cmp	r0, #0
 801c62a:	d0ea      	beq.n	801c602 <floor+0x42>
 801c62c:	2c00      	cmp	r4, #0
 801c62e:	bfbe      	ittt	lt
 801c630:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c634:	fa43 f606 	asrlt.w	r6, r3, r6
 801c638:	19a4      	addlt	r4, r4, r6
 801c63a:	ea24 0408 	bic.w	r4, r4, r8
 801c63e:	2500      	movs	r5, #0
 801c640:	e7df      	b.n	801c602 <floor+0x42>
 801c642:	2e33      	cmp	r6, #51	; 0x33
 801c644:	dd0a      	ble.n	801c65c <floor+0x9c>
 801c646:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c64a:	d103      	bne.n	801c654 <floor+0x94>
 801c64c:	f7e3 fdac 	bl	80001a8 <__adddf3>
 801c650:	4607      	mov	r7, r0
 801c652:	460b      	mov	r3, r1
 801c654:	4638      	mov	r0, r7
 801c656:	4619      	mov	r1, r3
 801c658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c65c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 801c660:	f04f 32ff 	mov.w	r2, #4294967295
 801c664:	fa22 f808 	lsr.w	r8, r2, r8
 801c668:	ea18 0f00 	tst.w	r8, r0
 801c66c:	d0f2      	beq.n	801c654 <floor+0x94>
 801c66e:	a310      	add	r3, pc, #64	; (adr r3, 801c6b0 <floor+0xf0>)
 801c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c674:	f7e3 fd98 	bl	80001a8 <__adddf3>
 801c678:	2200      	movs	r2, #0
 801c67a:	2300      	movs	r3, #0
 801c67c:	f7e3 ffc8 	bl	8000610 <__aeabi_dcmpgt>
 801c680:	2800      	cmp	r0, #0
 801c682:	d0be      	beq.n	801c602 <floor+0x42>
 801c684:	2c00      	cmp	r4, #0
 801c686:	da02      	bge.n	801c68e <floor+0xce>
 801c688:	2e14      	cmp	r6, #20
 801c68a:	d103      	bne.n	801c694 <floor+0xd4>
 801c68c:	3401      	adds	r4, #1
 801c68e:	ea25 0508 	bic.w	r5, r5, r8
 801c692:	e7b6      	b.n	801c602 <floor+0x42>
 801c694:	2301      	movs	r3, #1
 801c696:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c69a:	fa03 f606 	lsl.w	r6, r3, r6
 801c69e:	4435      	add	r5, r6
 801c6a0:	42bd      	cmp	r5, r7
 801c6a2:	bf38      	it	cc
 801c6a4:	18e4      	addcc	r4, r4, r3
 801c6a6:	e7f2      	b.n	801c68e <floor+0xce>
 801c6a8:	2500      	movs	r5, #0
 801c6aa:	462c      	mov	r4, r5
 801c6ac:	e7a9      	b.n	801c602 <floor+0x42>
 801c6ae:	bf00      	nop
 801c6b0:	8800759c 	.word	0x8800759c
 801c6b4:	7e37e43c 	.word	0x7e37e43c
 801c6b8:	bff00000 	.word	0xbff00000
 801c6bc:	000fffff 	.word	0x000fffff

0801c6c0 <_init>:
 801c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6c2:	bf00      	nop
 801c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6c6:	bc08      	pop	{r3}
 801c6c8:	469e      	mov	lr, r3
 801c6ca:	4770      	bx	lr

0801c6cc <_fini>:
 801c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6ce:	bf00      	nop
 801c6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6d2:	bc08      	pop	{r3}
 801c6d4:	469e      	mov	lr, r3
 801c6d6:	4770      	bx	lr
